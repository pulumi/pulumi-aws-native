// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace accessanalyzer {
    /**
     * An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
     */
    export interface AnalyzerArchiveRule {
        filter: outputs.accessanalyzer.AnalyzerFilter[];
        /**
         * The archive rule name
         */
        ruleName: string;
    }

    /**
     * The configuration for the analyzer
     */
    export interface AnalyzerConfigurationProperties {
        unusedAccessConfiguration?: outputs.accessanalyzer.AnalyzerUnusedAccessConfiguration;
    }

    export interface AnalyzerFilter {
        contains?: string[];
        eq?: string[];
        exists?: boolean;
        neq?: string[];
        property: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AnalyzerTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The Configuration for Unused Access Analyzer
     */
    export interface AnalyzerUnusedAccessConfiguration {
        /**
         * The specified access age in days for which to generate findings for unused access. For example, if you specify 90 days, the analyzer will generate findings for IAM entities within the accounts of the selected organization for any access that hasn't been used in 90 or more days since the analyzer's last scan. You can choose a value between 1 and 180 days.
         */
        unusedAccessAge?: number;
    }

}

export namespace acmpca {
    /**
     * Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
     */
    export interface CertificateApiPassthrough {
        extensions?: outputs.acmpca.CertificateExtensions;
        /**
         * Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
         */
        subject?: outputs.acmpca.CertificateSubject;
    }

    /**
     * Structure that contains X.509 AccessDescription information.
     */
    export interface CertificateAuthorityAccessDescription {
        accessLocation: outputs.acmpca.CertificateAuthorityGeneralName;
        accessMethod: outputs.acmpca.CertificateAuthorityAccessMethod;
    }

    /**
     * Structure that contains X.509 AccessMethod information. Assign one and ONLY one field.
     */
    export interface CertificateAuthorityAccessMethod {
        accessMethodType?: string;
        customObjectIdentifier?: string;
    }

    /**
     * Your certificate authority can create and maintain a certificate revocation list (CRL). A CRL contains information about certificates that have been revoked.
     */
    export interface CertificateAuthorityCrlConfiguration {
        crlDistributionPointExtensionConfiguration?: outputs.acmpca.CertificateAuthorityCrlDistributionPointExtensionConfiguration;
        customCname?: string;
        enabled?: boolean;
        expirationInDays?: number;
        s3BucketName?: string;
        s3ObjectAcl?: string;
    }

    /**
     * Configures the default behavior of the CRL Distribution Point extension for certificates issued by your certificate authority
     */
    export interface CertificateAuthorityCrlDistributionPointExtensionConfiguration {
        omitExtension: boolean;
    }

    /**
     * Structure that contains CSR pass though extensions information.
     */
    export interface CertificateAuthorityCsrExtensions {
        keyUsage?: outputs.acmpca.CertificateAuthorityKeyUsage;
        subjectInformationAccess?: outputs.acmpca.CertificateAuthorityAccessDescription[];
    }

    /**
     * Structure that contains X.500 attribute type and value.
     */
    export interface CertificateAuthorityCustomAttribute {
        objectIdentifier: string;
        value: string;
    }

    /**
     * Structure that contains X.509 EdiPartyName information.
     */
    export interface CertificateAuthorityEdiPartyName {
        nameAssigner: string;
        partyName: string;
    }

    /**
     * Structure that contains X.509 GeneralName information. Assign one and ONLY one field.
     */
    export interface CertificateAuthorityGeneralName {
        directoryName?: outputs.acmpca.CertificateAuthoritySubject;
        dnsName?: string;
        ediPartyName?: outputs.acmpca.CertificateAuthorityEdiPartyName;
        ipAddress?: string;
        otherName?: outputs.acmpca.CertificateAuthorityOtherName;
        registeredId?: string;
        rfc822Name?: string;
        uniformResourceIdentifier?: string;
    }

    /**
     * Structure that contains X.509 KeyUsage information.
     */
    export interface CertificateAuthorityKeyUsage {
        crlSign?: boolean;
        dataEncipherment?: boolean;
        decipherOnly?: boolean;
        digitalSignature?: boolean;
        encipherOnly?: boolean;
        keyAgreement?: boolean;
        keyCertSign?: boolean;
        keyEncipherment?: boolean;
        nonRepudiation?: boolean;
    }

    /**
     * Helps to configure online certificate status protocol (OCSP) responder for your certificate authority
     */
    export interface CertificateAuthorityOcspConfiguration {
        enabled?: boolean;
        ocspCustomCname?: string;
    }

    /**
     * Structure that contains X.509 OtherName information.
     */
    export interface CertificateAuthorityOtherName {
        typeId: string;
        value: string;
    }

    /**
     * Certificate Authority revocation information.
     */
    export interface CertificateAuthorityRevocationConfiguration {
        crlConfiguration?: outputs.acmpca.CertificateAuthorityCrlConfiguration;
        ocspConfiguration?: outputs.acmpca.CertificateAuthorityOcspConfiguration;
    }

    /**
     * Structure that contains X.500 distinguished name information for your CA.
     */
    export interface CertificateAuthoritySubject {
        commonName?: string;
        country?: string;
        customAttributes?: outputs.acmpca.CertificateAuthorityCustomAttribute[];
        distinguishedNameQualifier?: string;
        generationQualifier?: string;
        givenName?: string;
        initials?: string;
        locality?: string;
        organization?: string;
        organizationalUnit?: string;
        pseudonym?: string;
        serialNumber?: string;
        state?: string;
        surname?: string;
        title?: string;
    }

    export interface CertificateAuthorityTag {
        key?: string;
        value?: string;
    }

    export interface CertificateCustomAttribute {
        objectIdentifier: string;
        value: string;
    }

    export interface CertificateCustomExtension {
        critical?: boolean;
        objectIdentifier: string;
        value: string;
    }

    export interface CertificateEdiPartyName {
        nameAssigner: string;
        partyName: string;
    }

    export interface CertificateExtendedKeyUsage {
        extendedKeyUsageObjectIdentifier?: string;
        extendedKeyUsageType?: string;
    }

    /**
     * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
     */
    export interface CertificateExtensions {
        certificatePolicies?: outputs.acmpca.CertificatePolicyInformation[];
        customExtensions?: outputs.acmpca.CertificateCustomExtension[];
        extendedKeyUsage?: outputs.acmpca.CertificateExtendedKeyUsage[];
        /**
         * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
         */
        keyUsage?: outputs.acmpca.CertificateKeyUsage;
        subjectAlternativeNames?: outputs.acmpca.CertificateGeneralName[];
    }

    /**
     * Contains information about the certificate subject. The certificate can be one issued by your private certificate authority (CA) or it can be your private CA certificate. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate. The DN must be unique for each entity, but your private CA can issue more than one certificate with the same DN to the same entity.
     */
    export interface CertificateGeneralName {
        /**
         * Contains information about the certificate subject. The certificate can be one issued by your private certificate authority (CA) or it can be your private CA certificate. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate. The DN must be unique for each entity, but your private CA can issue more than one certificate with the same DN to the same entity.
         */
        directoryName?: outputs.acmpca.CertificateSubject;
        dnsName?: string;
        ediPartyName?: outputs.acmpca.CertificateEdiPartyName;
        ipAddress?: string;
        otherName?: outputs.acmpca.CertificateOtherName;
        registeredId?: string;
        rfc822Name?: string;
        uniformResourceIdentifier?: string;
    }

    export interface CertificateKeyUsage {
        crlSign?: boolean;
        dataEncipherment?: boolean;
        decipherOnly?: boolean;
        digitalSignature?: boolean;
        encipherOnly?: boolean;
        keyAgreement?: boolean;
        keyCertSign?: boolean;
        keyEncipherment?: boolean;
        nonRepudiation?: boolean;
    }

    export interface CertificateOtherName {
        typeId: string;
        value: string;
    }

    export interface CertificatePolicyInformation {
        certPolicyId: string;
        policyQualifiers?: outputs.acmpca.CertificatePolicyQualifierInfo[];
    }

    export interface CertificatePolicyQualifierInfo {
        policyQualifierId: string;
        qualifier: outputs.acmpca.CertificateQualifier;
    }

    export interface CertificateQualifier {
        cpsUri: string;
    }

    /**
     * Contains information about the certificate subject. The ``Subject`` field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The ``Subject``must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
     */
    export interface CertificateSubject {
        /**
         * For CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.
         *  Note: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.
         */
        commonName?: string;
        /**
         * Two-digit code that specifies the country in which the certificate subject located.
         */
        country?: string;
        customAttributes?: outputs.acmpca.CertificateCustomAttribute[];
        /**
         * Disambiguating information for the certificate subject.
         */
        distinguishedNameQualifier?: string;
        /**
         * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.
         */
        generationQualifier?: string;
        /**
         * First name.
         */
        givenName?: string;
        /**
         * Concatenation that typically contains the first letter of the *GivenName*, the first letter of the middle name if one exists, and the first letter of the *Surname*.
         */
        initials?: string;
        /**
         * The locality (such as a city or town) in which the certificate subject is located.
         */
        locality?: string;
        /**
         * Legal name of the organization with which the certificate subject is affiliated.
         */
        organization?: string;
        /**
         * A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.
         */
        organizationalUnit?: string;
        /**
         * Typically a shortened version of a longer *GivenName*. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.
         */
        pseudonym?: string;
        /**
         * The certificate serial number.
         */
        serialNumber?: string;
        /**
         * State in which the subject of the certificate is located.
         */
        state?: string;
        /**
         * Family name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.
         */
        surname?: string;
        /**
         * A title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.
         */
        title?: string;
    }

    /**
     * Length of time for which the certificate issued by your private certificate authority (CA), or by the private CA itself, is valid in days, months, or years. You can issue a certificate by calling the ``IssueCertificate`` operation.
     */
    export interface CertificateValidity {
        /**
         * Specifies whether the ``Value`` parameter represents days, months, or years.
         */
        type: string;
        /**
         * Time period.
         */
        value: number;
    }

}

export namespace amazonmq {
    export interface BrokerConfigurationId {
        id: string;
        revision: number;
    }

    export interface BrokerEncryptionOptions {
        kmsKeyId?: string;
        useAwsOwnedKey: boolean;
    }

    export interface BrokerLdapServerMetadata {
        hosts: string[];
        roleBase: string;
        roleName?: string;
        roleSearchMatching: string;
        roleSearchSubtree?: boolean;
        serviceAccountPassword: string;
        serviceAccountUsername: string;
        userBase: string;
        userRoleName?: string;
        userSearchMatching: string;
        userSearchSubtree?: boolean;
    }

    export interface BrokerLogList {
        audit?: boolean;
        general?: boolean;
    }

    export interface BrokerMaintenanceWindow {
        dayOfWeek: string;
        timeOfDay: string;
        timeZone: string;
    }

    export interface BrokerTagsEntry {
        key: string;
        value: string;
    }

    export interface BrokerUser {
        consoleAccess?: boolean;
        groups?: string[];
        password: string;
        replicationUser?: boolean;
        username: string;
    }

    export interface ConfigurationAssociationConfigurationId {
        id: string;
        revision: number;
    }

    export interface ConfigurationTagsEntry {
        key: string;
        value: string;
    }

}

export namespace amplify {
    export interface AppAutoBranchCreationConfig {
        autoBranchCreationPatterns?: string[];
        basicAuthConfig?: outputs.amplify.AppBasicAuthConfig;
        buildSpec?: string;
        enableAutoBranchCreation?: boolean;
        enableAutoBuild?: boolean;
        enablePerformanceMode?: boolean;
        enablePullRequestPreview?: boolean;
        environmentVariables?: outputs.amplify.AppEnvironmentVariable[];
        framework?: string;
        pullRequestEnvironmentName?: string;
        stage?: enums.amplify.AppAutoBranchCreationConfigStage;
    }

    export interface AppBasicAuthConfig {
        enableBasicAuth?: boolean;
        password?: string;
        username?: string;
    }

    export interface AppCustomRule {
        condition?: string;
        source: string;
        status?: string;
        target: string;
    }

    export interface AppEnvironmentVariable {
        name: string;
        value: string;
    }

    export interface AppTag {
        key: string;
        value: string;
    }

    export interface BranchBackend {
        stackArn?: string;
    }

    export interface BranchBasicAuthConfig {
        enableBasicAuth?: boolean;
        password: string;
        username: string;
    }

    export interface BranchEnvironmentVariable {
        name: string;
        value: string;
    }

    export interface BranchTag {
        key: string;
        value: string;
    }

    export interface DomainSubDomainSetting {
        branchName: string;
        prefix: string;
    }

}

export namespace amplifyuibuilder {
    export interface ComponentBindingProperties {
    }

    export interface ComponentChild {
        children?: outputs.amplifyuibuilder.ComponentChild[];
        componentType: string;
        events?: outputs.amplifyuibuilder.ComponentEvents;
        name: string;
        properties: outputs.amplifyuibuilder.ComponentProperties;
        sourceId?: string;
    }

    export interface ComponentCollectionProperties {
    }

    export interface ComponentEvents {
    }

    export interface ComponentOverrides {
    }

    export interface ComponentProperties {
    }

    export interface ComponentTags {
    }

    export interface ComponentVariant {
        overrides?: outputs.amplifyuibuilder.ComponentOverrides;
        variantValues?: outputs.amplifyuibuilder.ComponentVariantValues;
    }

    export interface ComponentVariantValues {
    }

    export interface FormButton {
        children?: string;
        excluded?: boolean;
        position?: outputs.amplifyuibuilder.FormFieldPosition0Properties | outputs.amplifyuibuilder.FormFieldPosition1Properties | outputs.amplifyuibuilder.FormFieldPosition2Properties;
    }

    export interface FormCta {
        cancel?: outputs.amplifyuibuilder.FormButton;
        clear?: outputs.amplifyuibuilder.FormButton;
        position?: enums.amplifyuibuilder.FormButtonsPosition;
        submit?: outputs.amplifyuibuilder.FormButton;
    }

    export interface FormDataTypeConfig {
        dataSourceType: enums.amplifyuibuilder.FormDataSourceType;
        dataTypeName: string;
    }

    export interface FormFieldPosition0Properties {
        fixed: enums.amplifyuibuilder.FormFixedPosition;
    }

    export interface FormFieldPosition1Properties {
        rightOf: string;
    }

    export interface FormFieldPosition2Properties {
        below: string;
    }

    export interface FormFieldsMap {
    }

    export interface FormSectionalElementMap {
    }

    export interface FormStyle {
        horizontalGap?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
        outerPadding?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
        verticalGap?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
    }

    export interface FormStyleConfig0Properties {
        tokenReference: string;
    }

    export interface FormStyleConfig1Properties {
        value: string;
    }

    export interface FormTags {
    }

    export interface ThemeTags {
    }

    export interface ThemeValue {
        children?: outputs.amplifyuibuilder.ThemeValues[];
        value?: string;
    }

    export interface ThemeValues {
        key?: string;
        value?: outputs.amplifyuibuilder.ThemeValue;
    }

}

export namespace apigateway {
    /**
     * ``StageKey`` is a property of the [AWS::ApiGateway::ApiKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-apikey.html) resource that specifies the stage to associate with the API key. This association allows only clients with the key to make requests to methods in that stage.
     */
    export interface ApiKeyStageKey {
        /**
         * The string identifier of the associated RestApi.
         */
        restApiId?: string;
        /**
         * The stage name associated with the stage key.
         */
        stageName?: string;
    }

    export interface ApiKeyTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ClientCertificateTag {
        key: string;
        value: string;
    }

    /**
     * The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
     *   ``AccessLogSetting`` is a property of the [StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type.
     */
    export interface DeploymentAccessLogSetting {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``.
         */
        destinationArn?: string;
        /**
         * A single line format of the access logs of data, as specified by selected $context variables. The format must include at least ``$context.requestId``.
         */
        format?: string;
    }

    /**
     * The ``CanarySetting`` property type specifies settings for the canary deployment in this stage.
     *  ``CanarySetting`` is a property of the [StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type.
     */
    export interface DeploymentCanarySetting {
        /**
         * The percent (0-100) of traffic diverted to a canary deployment.
         */
        percentTraffic?: number;
        /**
         * Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``DeploymentCanarySettings`` property type specifies settings for the canary deployment.
     */
    export interface DeploymentCanarySettings {
        /**
         * The percentage (0.0-100.0) of traffic routed to the canary deployment.
         */
        percentTraffic?: number;
        /**
         * A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``MethodSetting`` property type configures settings for all methods in a stage.
     *  The ``MethodSettings`` property of the [Amazon API Gateway Deployment StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type contains a list of ``MethodSetting`` property types.
     */
    export interface DeploymentMethodSetting {
        /**
         * Specifies whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
         */
        cacheTtlInSeconds?: number;
        /**
         * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * The HTTP method.
         */
        httpMethod?: string;
        /**
         * Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
         */
        loggingLevel?: string;
        /**
         * Specifies whether Amazon CloudWatch metrics are enabled for this method.
         */
        metricsEnabled?: boolean;
        /**
         * The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``).
         */
        resourcePath?: string;
        /**
         * Specifies the throttling burst limit.
         */
        throttlingBurstLimit?: number;
        /**
         * Specifies the throttling rate limit.
         */
        throttlingRateLimit?: number;
    }

    /**
     * ``StageDescription`` is a property of the [AWS::ApiGateway::Deployment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html) resource that configures a deployment stage.
     */
    export interface DeploymentStageDescription {
        /**
         * Specifies settings for logging access in this stage.
         */
        accessLogSetting?: outputs.apigateway.DeploymentAccessLogSetting;
        /**
         * Specifies whether a cache cluster is enabled for the stage.
         */
        cacheClusterEnabled?: boolean;
        /**
         * The size of the stage's cache cluster. For more information, see [cacheClusterSize](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateStage.html#apigw-CreateStage-request-cacheClusterSize) in the *API Gateway API Reference*.
         */
        cacheClusterSize?: string;
        /**
         * Indicates whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         */
        cacheTtlInSeconds?: number;
        /**
         * Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses. For more information, see [Enable API Gateway Caching in a Stage to Enhance API Performance](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html) in the *API Gateway Developer Guide*.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies settings for the canary deployment in this stage.
         */
        canarySetting?: outputs.apigateway.DeploymentCanarySetting;
        /**
         * The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
         */
        clientCertificateId?: string;
        /**
         * Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
         */
        dataTraceEnabled?: boolean;
        /**
         * A description of the purpose of the stage.
         */
        description?: string;
        /**
         * The version identifier of the API documentation snapshot.
         */
        documentationVersion?: string;
        /**
         * The logging level for this method. For valid values, see the ``loggingLevel`` property of the [MethodSetting](https://docs.aws.amazon.com/apigateway/latest/api/API_MethodSetting.html) resource in the *Amazon API Gateway API Reference*.
         */
        loggingLevel?: string;
        /**
         * Configures settings for all of the stage's methods.
         */
        methodSettings?: outputs.apigateway.DeploymentMethodSetting[];
        /**
         * Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
         */
        metricsEnabled?: boolean;
        /**
         * An array of arbitrary tags (key-value pairs) to associate with the stage.
         */
        tags?: outputs.apigateway.DeploymentTag[];
        /**
         * The target request burst rate limit. This allows more requests through for a period of time than the target rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
         */
        throttlingBurstLimit?: number;
        /**
         * The target request steady-state rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
         */
        throttlingRateLimit?: number;
        /**
         * Specifies whether active tracing with X-ray is enabled for this stage.
         *  For more information, see [Trace API Gateway API Execution with X-Ray](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html) in the *API Gateway Developer Guide*.
         */
        tracingEnabled?: boolean;
        /**
         * A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.
         */
        variables?: {[key: string]: string};
    }

    export interface DeploymentTag {
        /**
         * The key name of the tag
         */
        key: string;
        /**
         * The value for the tag
         */
        value: string;
    }

    /**
     * The ``Location`` property specifies the location of the Amazon API Gateway API entity that the documentation applies to. ``Location`` is a property of the [AWS::ApiGateway::DocumentationPart](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationpart.html) resource.
     *  For more information about each property, including constraints and valid values, see [DocumentationPart](https://docs.aws.amazon.com/apigateway/latest/api/API_DocumentationPartLocation.html) in the *Amazon API Gateway REST API Reference*.
     */
    export interface DocumentationPartLocation {
        /**
         * The HTTP verb of a method. It is a valid field for the API entity types of ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``method`` attribute must match that of the parent entity exactly.
         */
        method?: string;
        /**
         * The name of the targeted API entity. It is a valid and required field for the API entity types of ``AUTHORIZER``, ``MODEL``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY`` and ``RESPONSE_HEADER``. It is an invalid field for any other entity type.
         */
        name?: string;
        /**
         * The URL path of the target. It is a valid field for the API entity types of ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``/`` for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``path`` attribute must match that of the parent entity as a prefix.
         */
        path?: string;
        /**
         * The HTTP status code of a response. It is a valid field for the API entity types of ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``statusCode`` attribute must match that of the parent entity exactly.
         */
        statusCode?: string;
        /**
         * The type of API entity to which the documentation content applies. Valid values are ``API``, ``AUTHORIZER``, ``MODEL``, ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. Content inheritance does not apply to any entity of the ``API``, ``AUTHORIZER``, ``METHOD``, ``MODEL``, ``REQUEST_BODY``, or ``RESOURCE`` type.
         */
        type?: enums.apigateway.DocumentationPartLocationType;
    }

    export interface DomainNameEndpointConfiguration {
        types?: string[];
    }

    export interface DomainNameMutualTlsAuthentication {
        truststoreUri?: string;
        truststoreVersion?: string;
    }

    export interface DomainNameTag {
        key?: string;
        value?: string;
    }

    /**
     * ``Integration`` is a property of the [AWS::ApiGateway::Method](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html) resource that specifies information about the target backend that a method calls.
     */
    export interface MethodIntegration {
        /**
         * A list of request parameters whose values API Gateway caches. To be valid values for ``cacheKeyParameters``, these parameters must also be specified for Method ``requestParameters``.
         */
        cacheKeyParameters?: string[];
        /**
         * Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the ``cacheNamespace``. You can specify the same ``cacheNamespace`` across resources to return the same cached data for requests to different resources.
         */
        cacheNamespace?: string;
        /**
         * The ID of the VpcLink used for the integration when ``connectionType=VPC_LINK`` and undefined, otherwise.
         */
        connectionId?: string;
        /**
         * The type of the network connection to the integration endpoint. The valid value is ``INTERNET`` for connections through the public routable internet or ``VPC_LINK`` for private connections between API Gateway and a network load balancer in a VPC. The default value is ``INTERNET``.
         */
        connectionType?: enums.apigateway.MethodIntegrationConnectionType;
        /**
         * Specifies how to handle request payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
         *  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the ``passthroughBehavior`` is configured to support payload pass-through.
         */
        contentHandling?: enums.apigateway.MethodIntegrationContentHandling;
        /**
         * Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string ``arn:aws:iam::\*:user/\*``. To use resource-based permissions on supported AWS services, specify null.
         */
        credentials?: string;
        /**
         * Specifies the integration's HTTP method type. For the Type property, if you specify ``MOCK``, this property is optional. For Lambda integrations, you must set the integration method to ``POST``. For all other types, you must specify this property.
         */
        integrationHttpMethod?: string;
        /**
         * Specifies the integration's responses.
         */
        integrationResponses?: outputs.apigateway.MethodIntegrationResponse[];
        /**
         * Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in ``requestTemplates``. The valid value is one of the following: ``WHEN_NO_MATCH``: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. ``WHEN_NO_TEMPLATES``: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. ``NEVER``: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.
         */
        passthroughBehavior?: enums.apigateway.MethodIntegrationPassthroughBehavior;
        /**
         * A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` must be a valid and unique method request parameter name.
         */
        requestParameters?: {[key: string]: string};
        /**
         * Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
         */
        requestTemplates?: {[key: string]: string};
        /**
         * Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
         */
        timeoutInMillis?: number;
        /**
         * Specifies an API method integration type. The valid value is one of the following:
         *  For the HTTP and HTTP proxy integrations, each integration can specify a protocol (``http/https``), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a ``connectionType`` of ``VPC_LINK`` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
         */
        type: enums.apigateway.MethodIntegrationType;
        /**
         * Specifies Uniform Resource Identifier (URI) of the integration endpoint.
         *  For ``HTTP`` or ``HTTP_PROXY`` integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If ``connectionType`` is ``VPC_LINK`` specify the Network Load Balancer DNS name. For ``AWS`` or ``AWS_PROXY`` integrations, the URI is of the form ``arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}``. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either ``arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}`` or ``arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}``
         */
        uri?: string;
    }

    /**
     * ``IntegrationResponse`` is a property of the [Amazon API Gateway Method Integration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html) property type that specifies the response that API Gateway sends after a method's backend finishes processing a request.
     */
    export interface MethodIntegrationResponse {
        /**
         * Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
         *  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
         */
        contentHandling?: enums.apigateway.MethodIntegrationResponseContentHandling;
        /**
         * A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where ``name`` is a valid and unique header name. The mapped non-static value must match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``name`` is a valid and unique response header name and ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.
         */
        responseParameters?: {[key: string]: string};
        /**
         * Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
         */
        responseTemplates?: {[key: string]: string};
        /**
         * Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the ``.+`` regex to match error response. However, make sure that the error response does not contain any newline (``\n``) character in such cases. If the back end is an LAMlong function, the LAMlong function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
         */
        selectionPattern?: string;
        /**
         * Specifies the status code that is used to map the integration response to an existing MethodResponse.
         */
        statusCode: string;
    }

    /**
     * Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template.
     */
    export interface MethodResponse {
        /**
         * Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
         */
        responseModels?: {[key: string]: string};
        /**
         * A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern ``method.response.header.{name}``, where ``name`` is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in ``integration.response.header.{name}``, a static value enclosed within a pair of single quotes (e.g., ``'application/json'``), or a JSON expression from the back-end response payload in the form of ``integration.response.body.{JSON-expression}``, where ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.)
         */
        responseParameters?: {[key: string]: boolean};
        /**
         * The method response's status code.
         */
        statusCode: string;
    }

    /**
     * The ``EndpointConfiguration`` property type specifies the endpoint types of a REST API.
     *  ``EndpointConfiguration`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource.
     */
    export interface RestApiEndpointConfiguration {
        /**
         * A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is ``"EDGE"``. For a regional API and its custom domain name, the endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
         */
        types?: string[];
        /**
         * A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for ``PRIVATE`` endpoint type.
         */
        vpcEndpointIds?: string[];
    }

    /**
     * ``S3Location`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource that specifies the Amazon S3 location of a OpenAPI (formerly Swagger) file that defines a set of RESTful APIs in JSON or YAML.
     *  On January 1, 2016, the Swagger Specification was donated to the [OpenAPI initiative](https://docs.aws.amazon.com/https://www.openapis.org/), becoming the foundation of the OpenAPI Specification.
     */
    export interface RestApiS3Location {
        /**
         * The name of the S3 bucket where the OpenAPI file is stored.
         */
        bucket?: string;
        /**
         * The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value, API Gateway skips ETag validation of your OpenAPI file.
         */
        eTag?: string;
        /**
         * The file name of the OpenAPI file (Amazon S3 object name).
         */
        key?: string;
        /**
         * For versioning-enabled buckets, a specific version of the OpenAPI file.
         */
        version?: string;
    }

    export interface RestApiTag {
        key: string;
        value: string;
    }

    /**
     * The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
     *   ``AccessLogSetting`` is a property of the [AWS::ApiGateway::Stage](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-stage.html) resource.
     */
    export interface StageAccessLogSetting {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
         */
        destinationArn?: string;
        /**
         * A single line format of the access logs of data, as specified by selected [$context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
         */
        format?: string;
    }

    /**
     * Configuration settings of a canary deployment.
     */
    export interface StageCanarySetting {
        /**
         * The ID of the canary deployment.
         */
        deploymentId?: string;
        /**
         * The percent (0-100) of traffic diverted to a canary deployment.
         */
        percentTraffic?: number;
        /**
         * Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``MethodSetting`` property type configures settings for all methods in a stage.
     *  The ``MethodSettings`` property of the ``AWS::ApiGateway::Stage`` resource contains a list of ``MethodSetting`` property types.
     */
    export interface StageMethodSetting {
        /**
         * Specifies whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
         */
        cacheTtlInSeconds?: number;
        /**
         * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
         */
        httpMethod?: string;
        /**
         * Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
         */
        loggingLevel?: string;
        /**
         * Specifies whether Amazon CloudWatch metrics are enabled for this method.
         */
        metricsEnabled?: boolean;
        /**
         * The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
         */
        resourcePath?: string;
        /**
         * Specifies the throttling burst limit.
         */
        throttlingBurstLimit?: number;
        /**
         * Specifies the throttling rate limit.
         */
        throttlingRateLimit?: number;
    }

    export interface StageTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:.
         */
        value: string;
    }

    /**
     * API stage name of the associated API stage in a usage plan.
     */
    export interface UsagePlanApiStage {
        /**
         * API Id of the associated API stage in a usage plan.
         */
        apiId?: string;
        /**
         * API stage name of the associated API stage in a usage plan.
         */
        stage?: string;
        /**
         * Map containing method level throttling information for API stage in a usage plan.
         */
        throttle?: {[key: string]: outputs.apigateway.UsagePlanThrottleSettings};
    }

    /**
     * ``QuotaSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies a target for the maximum number of requests users can make to your REST APIs.
     *  In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
     */
    export interface UsagePlanQuotaSettings {
        /**
         * The target maximum number of requests that can be made in a given time period.
         */
        limit?: number;
        /**
         * The number of requests subtracted from the given limit in the initial time period.
         */
        offset?: number;
        /**
         * The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
         */
        period?: string;
    }

    export interface UsagePlanTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * ``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies the overall request rate (average requests per second) and burst capacity when users call your REST APIs.
     */
    export interface UsagePlanThrottleSettings {
        /**
         * The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
         */
        burstLimit?: number;
        /**
         * The API target request rate limit.
         */
        rateLimit?: number;
    }

    export interface VpcLinkTag {
        key: string;
        value: string;
    }

}

export namespace apigatewayv2 {
    /**
     * The ``BodyS3Location`` property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
     */
    export interface ApiBodyS3Location {
        /**
         * The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
         */
        bucket?: string;
        /**
         * The Etag of the S3 object.
         */
        etag?: string;
        /**
         * The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
         */
        key?: string;
        /**
         * The version of the S3 object.
         */
        version?: string;
    }

    /**
     * The ``Cors`` property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
     */
    export interface ApiCors {
        /**
         * Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
         */
        allowCredentials?: boolean;
        /**
         * Represents a collection of allowed headers. Supported only for HTTP APIs.
         */
        allowHeaders?: string[];
        /**
         * Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
         */
        allowMethods?: string[];
        /**
         * Represents a collection of allowed origins. Supported only for HTTP APIs.
         */
        allowOrigins?: string[];
        /**
         * Represents a collection of exposed headers. Supported only for HTTP APIs.
         */
        exposeHeaders?: string[];
        /**
         * The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
         */
        maxAge?: number;
    }

    export interface ApiGatewayManagedOverridesAccessLogSettings {
        destinationArn?: string;
        format?: string;
    }

    export interface ApiGatewayManagedOverridesIntegrationOverrides {
        description?: string;
        integrationMethod?: string;
        payloadFormatVersion?: string;
        timeoutInMillis?: number;
    }

    export interface ApiGatewayManagedOverridesRouteOverrides {
        authorizationScopes?: string[];
        authorizationType?: string;
        authorizerId?: string;
        operationName?: string;
        target?: string;
    }

    export interface ApiGatewayManagedOverridesRouteSettings {
        dataTraceEnabled?: boolean;
        detailedMetricsEnabled?: boolean;
        loggingLevel?: string;
        throttlingBurstLimit?: number;
        throttlingRateLimit?: number;
    }

    export interface ApiGatewayManagedOverridesStageOverrides {
        accessLogSettings?: outputs.apigatewayv2.ApiGatewayManagedOverridesAccessLogSettings;
        autoDeploy?: boolean;
        defaultRouteSettings?: outputs.apigatewayv2.ApiGatewayManagedOverridesRouteSettings;
        description?: string;
        routeSettings?: any;
        stageVariables?: any;
    }

    export interface AuthorizerJwtConfiguration {
        audience?: string[];
        issuer?: string;
    }

    /**
     * The ``DomainNameConfiguration`` property type specifies the configuration for an API's domain name.
     *  ``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
     */
    export interface DomainNameConfiguration {
        /**
         * An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
         */
        certificateArn?: string;
        /**
         * The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
         */
        certificateName?: string;
        /**
         * The endpoint type.
         */
        endpointType?: string;
        /**
         * The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
         */
        ownershipVerificationCertificateArn?: string;
        /**
         * The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
         */
        securityPolicy?: string;
    }

    /**
     * If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
     */
    export interface DomainNameMutualTlsAuthentication {
        /**
         * An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
         */
        truststoreUri?: string;
        /**
         * The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
         */
        truststoreVersion?: string;
    }

    export interface IntegrationTlsConfig {
        serverNameToVerify?: string;
    }

    export interface RouteResponseRouteParameters {
    }

    export interface StageAccessLogSettings {
        destinationArn?: string;
        format?: string;
    }

    export interface StageRouteSettings {
        dataTraceEnabled?: boolean;
        detailedMetricsEnabled?: boolean;
        loggingLevel?: string;
        throttlingBurstLimit?: number;
        throttlingRateLimit?: number;
    }

}

export namespace appconfig {
    /**
     * Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    export interface ApplicationTags {
        /**
         * The key-value string map. The valid character set is [a-zA-Z1-9 +-=._:/-]. The tag key can be up to 128 characters and must not start with aws:.
         */
        key: string;
        /**
         * The tag value can be up to 256 characters.
         */
        value: string;
    }

    /**
     * Metadata to assign to the configuration profile. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    export interface ConfigurationProfileTags {
        /**
         * The key-value string map. The tag key can be up to 128 characters and must not start with aws:.
         */
        key?: string;
        /**
         * The tag value can be up to 256 characters.
         */
        value?: string;
    }

    /**
     * A list of methods for validating the configuration.
     */
    export interface ConfigurationProfileValidators {
        /**
         * Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
         */
        content?: string;
        /**
         * AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
         */
        type?: string;
    }

    export interface DeploymentStrategyTags {
        key?: string;
        value?: string;
    }

    export interface DeploymentTags {
        key?: string;
        value?: string;
    }

    /**
     * Amazon CloudWatch alarm to monitor during the deployment process.
     */
    export interface EnvironmentMonitor {
        /**
         * Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.
         */
        alarmArn: string;
        /**
         * ARN of an AWS Identity and Access Management (IAM) role for AWS AppConfig to monitor AlarmArn.
         */
        alarmRoleArn?: string;
    }

    /**
     * Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    export interface EnvironmentTag {
        /**
         * The key-value string map. The valid character set is [a-zA-Z1-9+-=._:/]. The tag key can be up to 128 characters and must not start with aws:.
         */
        key: string;
        /**
         * The tag value can be up to 256 characters.
         */
        value: string;
    }

    /**
     * An action for an extension to take at a specific action point.
     */
    export interface ExtensionAction {
        /**
         * The description of the extension Action.
         */
        description?: string;
        /**
         * The name of the extension action.
         */
        name: string;
        /**
         * The ARN of the role for invoking the extension action.
         */
        roleArn?: string;
        /**
         * The URI of the extension action.
         */
        uri: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ExtensionAssociationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A parameter for the extension to send to a specific action.
     */
    export interface ExtensionParameter {
        /**
         * The description of the extension Parameter.
         */
        description?: string;
        required: boolean;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ExtensionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace appflow {
    /**
     * Contains information about the configuration of the lambda which is being registered as the connector.
     */
    export interface ConnectorLambdaConnectorProvisioningConfig {
        /**
         * Lambda ARN of the connector being registered.
         */
        lambdaArn: string;
    }

    export interface ConnectorProfileAmplitudeConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
        secretKey: string;
    }

    export interface ConnectorProfileApiKeyCredentials {
        apiKey: string;
        apiSecretKey?: string;
    }

    export interface ConnectorProfileBasicAuthCredentials {
        password: string;
        username: string;
    }

    /**
     * Connector specific configurations needed to create connector profile
     */
    export interface ConnectorProfileConfig {
        connectorProfileCredentials?: outputs.appflow.ConnectorProfileCredentials;
        connectorProfileProperties?: outputs.appflow.ConnectorProfileProperties;
    }

    export interface ConnectorProfileConnectorOAuthRequest {
        /**
         * The code provided by the connector when it has been authenticated via the connected app.
         */
        authCode?: string;
        /**
         * The URL to which the authentication server redirects the browser after authorization has been
         * granted.
         */
        redirectUri?: string;
    }

    /**
     * Connector specific configuration needed to create connector profile based on Authentication mechanism
     */
    export interface ConnectorProfileCredentials {
        amplitude?: outputs.appflow.ConnectorProfileAmplitudeConnectorProfileCredentials;
        customConnector?: outputs.appflow.ConnectorProfileCustomConnectorProfileCredentials;
        datadog?: outputs.appflow.ConnectorProfileDatadogConnectorProfileCredentials;
        dynatrace?: outputs.appflow.ConnectorProfileDynatraceConnectorProfileCredentials;
        googleAnalytics?: outputs.appflow.ConnectorProfileGoogleAnalyticsConnectorProfileCredentials;
        inforNexus?: outputs.appflow.ConnectorProfileInforNexusConnectorProfileCredentials;
        marketo?: outputs.appflow.ConnectorProfileMarketoConnectorProfileCredentials;
        pardot?: outputs.appflow.ConnectorProfilePardotConnectorProfileCredentials;
        redshift?: outputs.appflow.ConnectorProfileRedshiftConnectorProfileCredentials;
        salesforce?: outputs.appflow.ConnectorProfileSalesforceConnectorProfileCredentials;
        sapoData?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileCredentials;
        serviceNow?: outputs.appflow.ConnectorProfileServiceNowConnectorProfileCredentials;
        singular?: outputs.appflow.ConnectorProfileSingularConnectorProfileCredentials;
        slack?: outputs.appflow.ConnectorProfileSlackConnectorProfileCredentials;
        snowflake?: outputs.appflow.ConnectorProfileSnowflakeConnectorProfileCredentials;
        trendmicro?: outputs.appflow.ConnectorProfileTrendmicroConnectorProfileCredentials;
        veeva?: outputs.appflow.ConnectorProfileVeevaConnectorProfileCredentials;
        zendesk?: outputs.appflow.ConnectorProfileZendeskConnectorProfileCredentials;
    }

    /**
     * A map for properties for custom authentication.
     */
    export interface ConnectorProfileCredentialsMap {
    }

    export interface ConnectorProfileCustomAuthCredentials {
        credentialsMap?: outputs.appflow.ConnectorProfileCredentialsMap;
        customAuthenticationType: string;
    }

    export interface ConnectorProfileCustomConnectorProfileCredentials {
        apiKey?: outputs.appflow.ConnectorProfileApiKeyCredentials;
        authenticationType: enums.appflow.ConnectorProfileAuthenticationType;
        basic?: outputs.appflow.ConnectorProfileBasicAuthCredentials;
        custom?: outputs.appflow.ConnectorProfileCustomAuthCredentials;
        oauth2?: outputs.appflow.ConnectorProfileOAuth2Credentials;
    }

    export interface ConnectorProfileCustomConnectorProfileProperties {
        oAuth2Properties?: outputs.appflow.ConnectorProfileOAuth2Properties;
        profileProperties?: outputs.appflow.ConnectorProfileProfileProperties;
    }

    export interface ConnectorProfileDatadogConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
        /**
         * Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
         */
        applicationKey: string;
    }

    export interface ConnectorProfileDatadogConnectorProfileProperties {
        /**
         * The location of the Datadog resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileDynatraceConnectorProfileCredentials {
        /**
         * The API tokens used by Dynatrace API to authenticate various API calls.
         */
        apiToken: string;
    }

    export interface ConnectorProfileDynatraceConnectorProfileProperties {
        /**
         * The location of the Dynatrace resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileGoogleAnalyticsConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfileInforNexusConnectorProfileCredentials {
        /**
         * The Access Key portion of the credentials.
         */
        accessKeyId: string;
        /**
         * The encryption keys used to encrypt data.
         */
        datakey: string;
        /**
         * The secret key used to sign requests.
         */
        secretAccessKey: string;
        /**
         * The identiﬁer for the user.
         */
        userId: string;
    }

    export interface ConnectorProfileInforNexusConnectorProfileProperties {
        /**
         * The location of the InforNexus resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileMarketoConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileMarketoConnectorProfileProperties {
        /**
         * The location of the Marketo resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileOAuth2Credentials {
        accessToken?: string;
        clientId?: string;
        clientSecret?: string;
        oAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        refreshToken?: string;
    }

    export interface ConnectorProfileOAuth2Properties {
        oAuth2GrantType?: enums.appflow.ConnectorProfileOAuth2GrantType;
        tokenUrl?: string;
        tokenUrlCustomProperties?: outputs.appflow.ConnectorProfileTokenUrlCustomProperties;
    }

    export interface ConnectorProfileOAuthProperties {
        authCodeUrl?: string;
        oAuthScopes?: string[];
        tokenUrl?: string;
    }

    export interface ConnectorProfilePardotConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The client credentials to fetch access token and refresh token.
         */
        clientCredentialsArn?: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfilePardotConnectorProfileProperties {
        /**
         * The Business unit id of Salesforce Pardot instance to be connected
         */
        businessUnitId: string;
        /**
         * The location of the Salesforce Pardot resource
         */
        instanceUrl?: string;
        /**
         * Indicates whether the connector profile applies to a demo or production environment
         */
        isSandboxEnvironment?: boolean;
    }

    /**
     * A map for properties for custom connector.
     */
    export interface ConnectorProfileProfileProperties {
    }

    /**
     * Connector specific properties needed to create connector profile - currently not needed for Amplitude, Trendmicro, Googleanalytics and Singular
     */
    export interface ConnectorProfileProperties {
        customConnector?: outputs.appflow.ConnectorProfileCustomConnectorProfileProperties;
        datadog?: outputs.appflow.ConnectorProfileDatadogConnectorProfileProperties;
        dynatrace?: outputs.appflow.ConnectorProfileDynatraceConnectorProfileProperties;
        inforNexus?: outputs.appflow.ConnectorProfileInforNexusConnectorProfileProperties;
        marketo?: outputs.appflow.ConnectorProfileMarketoConnectorProfileProperties;
        pardot?: outputs.appflow.ConnectorProfilePardotConnectorProfileProperties;
        redshift?: outputs.appflow.ConnectorProfileRedshiftConnectorProfileProperties;
        salesforce?: outputs.appflow.ConnectorProfileSalesforceConnectorProfileProperties;
        sapoData?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileProperties;
        serviceNow?: outputs.appflow.ConnectorProfileServiceNowConnectorProfileProperties;
        slack?: outputs.appflow.ConnectorProfileSlackConnectorProfileProperties;
        snowflake?: outputs.appflow.ConnectorProfileSnowflakeConnectorProfileProperties;
        veeva?: outputs.appflow.ConnectorProfileVeevaConnectorProfileProperties;
        zendesk?: outputs.appflow.ConnectorProfileZendeskConnectorProfileProperties;
    }

    export interface ConnectorProfileRedshiftConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password?: string;
        /**
         * The name of the user.
         */
        username?: string;
    }

    export interface ConnectorProfileRedshiftConnectorProfileProperties {
        /**
         * The name of the Amazon S3 bucket associated with Redshift.
         */
        bucketName: string;
        /**
         * The object key for the destination bucket in which Amazon AppFlow will place the ﬁles.
         */
        bucketPrefix?: string;
        /**
         * The unique identifier of the Amazon Redshift cluster.
         */
        clusterIdentifier?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that grants Amazon AppFlow access to the data through the Amazon Redshift Data API.
         */
        dataApiRoleArn?: string;
        /**
         * The name of the Amazon Redshift database that will store the transferred data.
         */
        databaseName?: string;
        /**
         * The JDBC URL of the Amazon Redshift cluster.
         */
        databaseUrl?: string;
        /**
         * If Amazon AppFlow will connect to Amazon Redshift Serverless or Amazon Redshift cluster.
         */
        isRedshiftServerless?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the IAM role.
         */
        roleArn: string;
        /**
         * The name of the Amazon Redshift serverless workgroup
         */
        workgroupName?: string;
    }

    export interface ConnectorProfileSalesforceConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The client credentials to fetch access token and refresh token.
         */
        clientCredentialsArn?: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to access your Salesforce records
         */
        jwtToken?: string;
        /**
         * The grant types to fetch an access token
         */
        oAuth2GrantType?: enums.appflow.ConnectorProfileOAuth2GrantType;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfileSalesforceConnectorProfileProperties {
        /**
         * The location of the Salesforce resource
         */
        instanceUrl?: string;
        /**
         * Indicates whether the connector profile applies to a sandbox or production environment
         */
        isSandboxEnvironment?: boolean;
        /**
         * Indicates whether to make Metadata And Authorization calls over Pivate Network
         */
        usePrivateLinkForMetadataAndAuthorization?: boolean;
    }

    export interface ConnectorProfileSapoDataConnectorProfileCredentials {
        basicAuthCredentials?: outputs.appflow.ConnectorProfileBasicAuthCredentials;
        oAuthCredentials?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsProperties;
    }

    export interface ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsProperties {
        accessToken?: string;
        clientId?: string;
        clientSecret?: string;
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        refreshToken?: string;
    }

    export interface ConnectorProfileSapoDataConnectorProfileProperties {
        applicationHostUrl?: string;
        applicationServicePath?: string;
        clientNumber?: string;
        /**
         * If you set this parameter to true, Amazon AppFlow bypasses the single sign-on (SSO) settings in your SAP account when it accesses your SAP OData instance.
         */
        disableSso?: boolean;
        logonLanguage?: string;
        oAuthProperties?: outputs.appflow.ConnectorProfileOAuthProperties;
        portNumber?: number;
        privateLinkServiceName?: string;
    }

    export interface ConnectorProfileServiceNowConnectorProfileCredentials {
        /**
         * The OAuth 2.0 credentials required to authenticate the user.
         */
        oAuth2Credentials?: outputs.appflow.ConnectorProfileOAuth2Credentials;
        /**
         * The password that corresponds to the username.
         */
        password?: string;
        /**
         * The name of the user.
         */
        username?: string;
    }

    export interface ConnectorProfileServiceNowConnectorProfileProperties {
        /**
         * The location of the ServiceNow resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileSingularConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
    }

    export interface ConnectorProfileSlackConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileSlackConnectorProfileProperties {
        /**
         * The location of the Slack resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileSnowflakeConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password: string;
        /**
         * The name of the user.
         */
        username: string;
    }

    export interface ConnectorProfileSnowflakeConnectorProfileProperties {
        /**
         * The name of the account.
         */
        accountName?: string;
        /**
         * The name of the Amazon S3 bucket associated with Snowﬂake.
         */
        bucketName: string;
        /**
         * The bucket prefix that refers to the Amazon S3 bucket associated with Snowﬂake.
         */
        bucketPrefix?: string;
        /**
         * The Snowﬂake Private Link service name to be used for private data transfers.
         */
        privateLinkServiceName?: string;
        /**
         * The region of the Snowﬂake account.
         */
        region?: string;
        /**
         * The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the
         * Snowﬂake account. This is written in the following format: < Database>< Schema><Stage Name>.
         */
        stage: string;
        /**
         * The name of the Snowﬂake warehouse.
         */
        warehouse: string;
    }

    /**
     * A map for properties for custom connector Token Url.
     */
    export interface ConnectorProfileTokenUrlCustomProperties {
    }

    export interface ConnectorProfileTrendmicroConnectorProfileCredentials {
        /**
         * The Secret Access Key portion of the credentials.
         */
        apiSecretKey: string;
    }

    export interface ConnectorProfileVeevaConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password: string;
        /**
         * The name of the user.
         */
        username: string;
    }

    export interface ConnectorProfileVeevaConnectorProfileProperties {
        /**
         * The location of the Veeva resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileZendeskConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileZendeskConnectorProfileProperties {
        /**
         * The location of the Zendesk resource
         */
        instanceUrl: string;
    }

    /**
     * Contains information about the configuration of the connector being registered.
     */
    export interface ConnectorProvisioningConfig {
        /**
         * Contains information about the configuration of the lambda which is being registered as the connector.
         */
        lambda?: outputs.appflow.ConnectorLambdaConnectorProvisioningConfig;
    }

    export interface FlowAggregationConfig {
        aggregationType?: enums.appflow.FlowAggregationType;
        targetFileSize?: number;
    }

    export interface FlowAmplitudeSourceProperties {
        object: string;
    }

    /**
     * Operation to be performed on provided source fields
     */
    export interface FlowConnectorOperator {
        amplitude?: enums.appflow.FlowAmplitudeConnectorOperator;
        customConnector?: enums.appflow.FlowOperator;
        datadog?: enums.appflow.FlowDatadogConnectorOperator;
        dynatrace?: enums.appflow.FlowDynatraceConnectorOperator;
        googleAnalytics?: enums.appflow.FlowGoogleAnalyticsConnectorOperator;
        inforNexus?: enums.appflow.FlowInforNexusConnectorOperator;
        marketo?: enums.appflow.FlowMarketoConnectorOperator;
        pardot?: enums.appflow.FlowPardotConnectorOperator;
        s3?: enums.appflow.FlowS3ConnectorOperator;
        salesforce?: enums.appflow.FlowSalesforceConnectorOperator;
        sapoData?: enums.appflow.FlowSapoDataConnectorOperator;
        serviceNow?: enums.appflow.FlowServiceNowConnectorOperator;
        singular?: enums.appflow.FlowSingularConnectorOperator;
        slack?: enums.appflow.FlowSlackConnectorOperator;
        trendmicro?: enums.appflow.FlowTrendmicroConnectorOperator;
        veeva?: enums.appflow.FlowVeevaConnectorOperator;
        zendesk?: enums.appflow.FlowZendeskConnectorOperator;
    }

    export interface FlowCustomConnectorDestinationProperties {
        customProperties?: outputs.appflow.FlowCustomProperties;
        entityName: string;
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowCustomConnectorSourceProperties {
        customProperties?: outputs.appflow.FlowCustomProperties;
        dataTransferApi?: outputs.appflow.FlowCustomConnectorSourcePropertiesDataTransferApiProperties;
        entityName: string;
    }

    export interface FlowCustomConnectorSourcePropertiesDataTransferApiProperties {
        name: string;
        type: enums.appflow.FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesType;
    }

    /**
     * A map for properties for custom connector.
     */
    export interface FlowCustomProperties {
    }

    export interface FlowDatadogSourceProperties {
        object: string;
    }

    /**
     * Destination connector details
     */
    export interface FlowDestinationConnectorProperties {
        customConnector?: outputs.appflow.FlowCustomConnectorDestinationProperties;
        eventBridge?: outputs.appflow.FlowEventBridgeDestinationProperties;
        lookoutMetrics?: outputs.appflow.FlowLookoutMetricsDestinationProperties;
        marketo?: outputs.appflow.FlowMarketoDestinationProperties;
        redshift?: outputs.appflow.FlowRedshiftDestinationProperties;
        s3?: outputs.appflow.FlowS3DestinationProperties;
        salesforce?: outputs.appflow.FlowSalesforceDestinationProperties;
        sapoData?: outputs.appflow.FlowSapoDataDestinationProperties;
        snowflake?: outputs.appflow.FlowSnowflakeDestinationProperties;
        upsolver?: outputs.appflow.FlowUpsolverDestinationProperties;
        zendesk?: outputs.appflow.FlowZendeskDestinationProperties;
    }

    /**
     * Configurations of destination connector.
     */
    export interface FlowDestinationFlowConfig {
        /**
         * The API version that the destination connector uses.
         */
        apiVersion?: string;
        /**
         * Name of destination connector profile
         */
        connectorProfileName?: string;
        /**
         * Destination connector type
         */
        connectorType: enums.appflow.FlowConnectorType;
        /**
         * Destination connector details
         */
        destinationConnectorProperties: outputs.appflow.FlowDestinationConnectorProperties;
    }

    export interface FlowDynatraceSourceProperties {
        object: string;
    }

    export interface FlowErrorHandlingConfig {
        bucketName?: string;
        bucketPrefix?: string;
        failOnFirstError?: boolean;
    }

    export interface FlowEventBridgeDestinationProperties {
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        object: string;
    }

    /**
     * Trigger settings of the flow.
     */
    export interface FlowGlueDataCatalog {
        /**
         * A string containing the value for the tag
         */
        databaseName: string;
        /**
         * A string containing the value for the tag
         */
        roleArn: string;
        /**
         * A string containing the value for the tag
         */
        tablePrefix: string;
    }

    export interface FlowGoogleAnalyticsSourceProperties {
        object: string;
    }

    /**
     * Configuration for scheduled incremental data pull
     */
    export interface FlowIncrementalPullConfig {
        datetimeTypeFieldName?: string;
    }

    export interface FlowInforNexusSourceProperties {
        object: string;
    }

    export interface FlowLookoutMetricsDestinationProperties {
        object?: string;
    }

    export interface FlowMarketoDestinationProperties {
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        object: string;
    }

    export interface FlowMarketoSourceProperties {
        object: string;
    }

    /**
     * Configurations of metadata catalog of the flow.
     */
    export interface FlowMetadataCatalogConfig {
        /**
         * Configurations of glue data catalog of the flow.
         */
        glueDataCatalog?: outputs.appflow.FlowGlueDataCatalog;
    }

    export interface FlowPardotSourceProperties {
        object: string;
    }

    export interface FlowPrefixConfig {
        pathPrefixHierarchy?: enums.appflow.FlowPathPrefix[];
        prefixFormat?: enums.appflow.FlowPrefixFormat;
        prefixType?: enums.appflow.FlowPrefixType;
    }

    export interface FlowRedshiftDestinationProperties {
        bucketPrefix?: string;
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        intermediateBucketName: string;
        object: string;
    }

    export interface FlowS3DestinationProperties {
        bucketName: string;
        bucketPrefix?: string;
        s3OutputFormatConfig?: outputs.appflow.FlowS3OutputFormatConfig;
    }

    export interface FlowS3InputFormatConfig {
        s3InputFileType?: enums.appflow.FlowS3InputFormatConfigS3InputFileType;
    }

    export interface FlowS3OutputFormatConfig {
        aggregationConfig?: outputs.appflow.FlowAggregationConfig;
        fileType?: enums.appflow.FlowFileType;
        prefixConfig?: outputs.appflow.FlowPrefixConfig;
        preserveSourceDataTyping?: boolean;
    }

    export interface FlowS3SourceProperties {
        bucketName: string;
        bucketPrefix: string;
        s3InputFormatConfig?: outputs.appflow.FlowS3InputFormatConfig;
    }

    export interface FlowSalesforceDestinationProperties {
        dataTransferApi?: enums.appflow.FlowDataTransferApi;
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        object: string;
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowSalesforceSourceProperties {
        dataTransferApi?: enums.appflow.FlowDataTransferApi;
        enableDynamicFieldUpdate?: boolean;
        includeDeletedRecords?: boolean;
        object: string;
    }

    export interface FlowSapoDataDestinationProperties {
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        objectPath: string;
        successResponseHandlingConfig?: outputs.appflow.FlowSuccessResponseHandlingConfig;
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    /**
     * SAP Source connector page size
     */
    export interface FlowSapoDataPaginationConfig {
        maxPageSize: number;
    }

    /**
     * SAP Source connector parallelism factor
     */
    export interface FlowSapoDataParallelismConfig {
        maxParallelism: number;
    }

    export interface FlowSapoDataSourceProperties {
        objectPath: string;
        paginationConfig?: outputs.appflow.FlowSapoDataPaginationConfig;
        parallelismConfig?: outputs.appflow.FlowSapoDataParallelismConfig;
    }

    /**
     * Details required for scheduled trigger type
     */
    export interface FlowScheduledTriggerProperties {
        dataPullMode?: enums.appflow.FlowScheduledTriggerPropertiesDataPullMode;
        firstExecutionFrom?: number;
        flowErrorDeactivationThreshold?: number;
        scheduleEndTime?: number;
        scheduleExpression: string;
        scheduleOffset?: number;
        scheduleStartTime?: number;
        timeZone?: string;
    }

    export interface FlowServiceNowSourceProperties {
        object: string;
    }

    export interface FlowSingularSourceProperties {
        object: string;
    }

    export interface FlowSlackSourceProperties {
        object: string;
    }

    export interface FlowSnowflakeDestinationProperties {
        bucketPrefix?: string;
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        intermediateBucketName: string;
        object: string;
    }

    /**
     * Source connector details required to query a connector
     */
    export interface FlowSourceConnectorProperties {
        amplitude?: outputs.appflow.FlowAmplitudeSourceProperties;
        customConnector?: outputs.appflow.FlowCustomConnectorSourceProperties;
        datadog?: outputs.appflow.FlowDatadogSourceProperties;
        dynatrace?: outputs.appflow.FlowDynatraceSourceProperties;
        googleAnalytics?: outputs.appflow.FlowGoogleAnalyticsSourceProperties;
        inforNexus?: outputs.appflow.FlowInforNexusSourceProperties;
        marketo?: outputs.appflow.FlowMarketoSourceProperties;
        pardot?: outputs.appflow.FlowPardotSourceProperties;
        s3?: outputs.appflow.FlowS3SourceProperties;
        salesforce?: outputs.appflow.FlowSalesforceSourceProperties;
        sapoData?: outputs.appflow.FlowSapoDataSourceProperties;
        serviceNow?: outputs.appflow.FlowServiceNowSourceProperties;
        singular?: outputs.appflow.FlowSingularSourceProperties;
        slack?: outputs.appflow.FlowSlackSourceProperties;
        trendmicro?: outputs.appflow.FlowTrendmicroSourceProperties;
        veeva?: outputs.appflow.FlowVeevaSourceProperties;
        zendesk?: outputs.appflow.FlowZendeskSourceProperties;
    }

    /**
     * Configurations of Source connector of the flow.
     */
    export interface FlowSourceFlowConfig {
        /**
         * The API version that the destination connector uses.
         */
        apiVersion?: string;
        /**
         * Name of source connector profile
         */
        connectorProfileName?: string;
        /**
         * Type of source connector
         */
        connectorType: enums.appflow.FlowConnectorType;
        /**
         * Configuration for scheduled incremental data pull
         */
        incrementalPullConfig?: outputs.appflow.FlowIncrementalPullConfig;
        /**
         * Source connector details required to query a connector
         */
        sourceConnectorProperties: outputs.appflow.FlowSourceConnectorProperties;
    }

    export interface FlowSuccessResponseHandlingConfig {
        bucketName?: string;
        bucketPrefix?: string;
    }

    /**
     * A label for tagging AppFlow resources
     */
    export interface FlowTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface FlowTask {
        /**
         * Operation to be performed on provided source fields
         */
        connectorOperator?: outputs.appflow.FlowConnectorOperator;
        /**
         * A field value on which source field should be validated
         */
        destinationField?: string;
        /**
         * Source fields on which particular task will be applied
         */
        sourceFields: string[];
        /**
         * A Map used to store task related info
         */
        taskProperties?: outputs.appflow.FlowTaskPropertiesObject[];
        /**
         * Type of task
         */
        taskType: enums.appflow.FlowTaskType;
    }

    /**
     * An object used to store task related info
     */
    export interface FlowTaskPropertiesObject {
        key: enums.appflow.FlowOperatorPropertiesKeys;
        value: string;
    }

    export interface FlowTrendmicroSourceProperties {
        object: string;
    }

    /**
     * Trigger settings of the flow.
     */
    export interface FlowTriggerConfig {
        /**
         * Details required based on the type of trigger
         */
        triggerProperties?: outputs.appflow.FlowScheduledTriggerProperties;
        /**
         * Trigger type of the flow
         */
        triggerType: enums.appflow.FlowTriggerType;
    }

    export interface FlowUpsolverDestinationProperties {
        bucketName: string;
        bucketPrefix?: string;
        s3OutputFormatConfig: outputs.appflow.FlowUpsolverS3OutputFormatConfig;
    }

    export interface FlowUpsolverS3OutputFormatConfig {
        aggregationConfig?: outputs.appflow.FlowAggregationConfig;
        fileType?: enums.appflow.FlowFileType;
        prefixConfig: outputs.appflow.FlowPrefixConfig;
    }

    export interface FlowVeevaSourceProperties {
        documentType?: string;
        includeAllVersions?: boolean;
        includeRenditions?: boolean;
        includeSourceFiles?: boolean;
        object: string;
    }

    export interface FlowZendeskDestinationProperties {
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        object: string;
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowZendeskSourceProperties {
        object: string;
    }

}

export namespace appintegrations {
    /**
     * The configuration for what files should be pulled from the source.
     */
    export interface DataIntegrationFileConfiguration {
        /**
         * Restrictions for what files should be pulled from the source.
         */
        filters?: {[key: string]: string[]};
        /**
         * Identifiers for the source folders to pull all files from recursively.
         */
        folders: string[];
    }

    /**
     * The configuration for what data should be pulled from the source.
     */
    export interface DataIntegrationObjectConfiguration {
    }

    export interface DataIntegrationScheduleConfig {
        /**
         * The start date for objects to import in the first flow run. Epoch or ISO timestamp format is supported.
         */
        firstExecutionFrom?: string;
        /**
         * The name of the object to pull from the data source.
         */
        object?: string;
        /**
         * How often the data should be pulled from data source.
         */
        scheduleExpression: string;
    }

    /**
     * A label for tagging DataIntegration resources
     */
    export interface DataIntegrationTag {
        /**
         * A key to identify the tag.
         */
        key: string;
        /**
         * Corresponding tag value for the key.
         */
        value: string;
    }

    export interface EventIntegrationEventFilter {
        /**
         * The source of the events.
         */
        source: string;
    }

    export interface EventIntegrationTag {
        /**
         * A key to identify the tag.
         */
        key: string;
        /**
         * Corresponding tag value for the key.
         */
        value: string;
    }

}

export namespace applicationautoscaling {
    /**
     * specifies the minimum and maximum capacity
     */
    export interface ScalableTargetAction {
        maxCapacity?: number;
        minCapacity?: number;
    }

    /**
     * specifies a scheduled action for a scalable target
     */
    export interface ScalableTargetScheduledAction {
        endTime?: string;
        scalableTargetAction?: outputs.applicationautoscaling.ScalableTargetAction;
        schedule: string;
        scheduledActionName: string;
        startTime?: string;
        timezone?: string;
    }

    /**
     * specifies whether the scaling activities for a scalable target are in a suspended state
     */
    export interface ScalableTargetSuspendedState {
        dynamicScalingInSuspended?: boolean;
        dynamicScalingOutSuspended?: boolean;
        scheduledScalingSuspended?: boolean;
    }

    /**
     * Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Application Auto Scaling.
     */
    export interface ScalingPolicyCustomizedMetricSpecification {
        /**
         * The dimensions of the metric.
         */
        dimensions?: outputs.applicationautoscaling.ScalingPolicyMetricDimension[];
        /**
         * The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the Metric object that is returned by a call to ListMetrics.
         */
        metricName?: string;
        /**
         * The metrics to include in the target tracking scaling policy, as a metric data query. This can include both raw metric and metric math expressions.
         */
        metrics?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricDataQuery[];
        /**
         * The namespace of the metric.
         */
        namespace?: string;
        /**
         * The statistic of the metric.
         */
        statistic?: string;
        /**
         * The unit of the metric. For a complete list of the units that CloudWatch supports, see the MetricDatum data type in the Amazon CloudWatch API Reference.
         */
        unit?: string;
    }

    /**
     * Describes the dimension names and values associated with a metric.
     */
    export interface ScalingPolicyMetricDimension {
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The value of the dimension.
         */
        value: string;
    }

    /**
     * Represents a predefined metric for a target tracking scaling policy to use with Application Auto Scaling.
     */
    export interface ScalingPolicyPredefinedMetricSpecification {
        /**
         * The metric type. The ALBRequestCountPerTarget metric type applies only to Spot Fleets and ECS services.
         */
        predefinedMetricType: string;
        /**
         * Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Spot Fleet or ECS service.
         */
        resourceLabel?: string;
    }

    /**
     * Represents a step adjustment for a StepScalingPolicyConfiguration. Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you've defined for the alarm.
     */
    export interface ScalingPolicyStepAdjustment {
        /**
         * The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
         */
        metricIntervalLowerBound?: number;
        /**
         * The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.
         */
        metricIntervalUpperBound?: number;
        /**
         * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.
         */
        scalingAdjustment: number;
    }

    /**
     * A step scaling policy.
     */
    export interface ScalingPolicyStepScalingPolicyConfiguration {
        /**
         * Specifies how the ScalingAdjustment value in a StepAdjustment is interpreted.
         */
        adjustmentType?: string;
        /**
         * The amount of time, in seconds, to wait for a previous scaling activity to take effect.
         */
        cooldown?: number;
        /**
         * The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average
         */
        metricAggregationType?: string;
        /**
         * The minimum value to scale by when the adjustment type is PercentChangeInCapacity.
         */
        minAdjustmentMagnitude?: number;
        /**
         * A set of adjustments that enable you to scale based on the size of the alarm breach.
         */
        stepAdjustments?: outputs.applicationautoscaling.ScalingPolicyStepAdjustment[];
    }

    /**
     * Represents a specific metric.
     */
    export interface ScalingPolicyTargetTrackingMetric {
        /**
         * The dimensions for the metric.
         */
        dimensions?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricDimension[];
        /**
         * The name of the metric.
         */
        metricName?: string;
        /**
         * The namespace of the metric.
         */
        namespace?: string;
    }

    /**
     * The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.
     */
    export interface ScalingPolicyTargetTrackingMetricDataQuery {
        /**
         * The math expression to perform on the returned data, if this object is performing a math expression.
         */
        expression?: string;
        /**
         * A short name that identifies the object's results in the response.
         */
        id?: string;
        /**
         * A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
         */
        label?: string;
        /**
         * Information about the metric data to return.
         */
        metricStat?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricStat;
        /**
         * Indicates whether to return the timestamps and raw data values of this metric.
         */
        returnData?: boolean;
    }

    /**
     * Describes the dimension of a metric.
     */
    export interface ScalingPolicyTargetTrackingMetricDimension {
        /**
         * The name of the dimension.
         */
        name?: string;
        /**
         * The value of the dimension.
         */
        value?: string;
    }

    /**
     * This structure defines the CloudWatch metric to return, along with the statistic, period, and unit.
     */
    export interface ScalingPolicyTargetTrackingMetricStat {
        /**
         * The CloudWatch metric to return, including the metric name, namespace, and dimensions. 
         */
        metric?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetric;
        /**
         * The statistic to return. It can include any CloudWatch statistic or extended statistic.
         */
        stat?: string;
        /**
         * The unit to use for the returned data points.
         */
        unit?: string;
    }

    /**
     * A target tracking scaling policy.
     */
    export interface ScalingPolicyTargetTrackingScalingPolicyConfiguration {
        /**
         * A customized metric. You can specify either a predefined metric or a customized metric.
         */
        customizedMetricSpecification?: outputs.applicationautoscaling.ScalingPolicyCustomizedMetricSpecification;
        /**
         * Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy won't remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is false.
         */
        disableScaleIn?: boolean;
        /**
         * A predefined metric. You can specify either a predefined metric or a customized metric.
         */
        predefinedMetricSpecification?: outputs.applicationautoscaling.ScalingPolicyPredefinedMetricSpecification;
        /**
         * The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.
         */
        scaleInCooldown?: number;
        /**
         * The amount of time, in seconds, to wait for a previous scale-out activity to take effect.
         */
        scaleOutCooldown?: number;
        /**
         * The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For example, if the metric is CPU utilization, then the target value is a percent value that represents how much of the CPU can be used before scaling out.
         */
        targetValue: number;
    }

}

export namespace applicationinsights {
    /**
     * A CloudWatch alarm to be monitored for the component.
     */
    export interface ApplicationAlarm {
        /**
         * The name of the CloudWatch alarm to be monitored for the component.
         */
        alarmName: string;
        /**
         * Indicates the degree of outage when the alarm goes off.
         */
        severity?: enums.applicationinsights.ApplicationAlarmSeverity;
    }

    /**
     * A metric to be monitored for the component.
     */
    export interface ApplicationAlarmMetric {
        /**
         * The name of the metric to be monitored for the component.
         */
        alarmMetricName: string;
    }

    /**
     * The configuration settings of the component.
     */
    export interface ApplicationComponentConfiguration {
        /**
         * The configuration settings
         */
        configurationDetails?: outputs.applicationinsights.ApplicationConfigurationDetails;
        /**
         * Sub component configurations of the component.
         */
        subComponentTypeConfigurations?: outputs.applicationinsights.ApplicationSubComponentTypeConfiguration[];
    }

    /**
     * The monitoring setting of the component.
     */
    export interface ApplicationComponentMonitoringSetting {
        /**
         * The ARN of the compnonent.
         */
        componentArn?: string;
        /**
         * The component monitoring configuration mode.
         */
        componentConfigurationMode: enums.applicationinsights.ApplicationComponentMonitoringSettingComponentConfigurationMode;
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The monitoring configuration of the component.
         */
        customComponentConfiguration?: outputs.applicationinsights.ApplicationComponentConfiguration;
        /**
         * The overwritten settings on default component monitoring configuration.
         */
        defaultOverwriteComponentConfiguration?: outputs.applicationinsights.ApplicationComponentConfiguration;
        /**
         * The tier of the application component.
         */
        tier: string;
    }

    /**
     * The configuration settings.
     */
    export interface ApplicationConfigurationDetails {
        /**
         * A list of metrics to monitor for the component.
         */
        alarmMetrics?: outputs.applicationinsights.ApplicationAlarmMetric[];
        /**
         * A list of alarms to monitor for the component.
         */
        alarms?: outputs.applicationinsights.ApplicationAlarm[];
        /**
         * The HA cluster Prometheus Exporter settings.
         */
        haClusterPrometheusExporter?: outputs.applicationinsights.ApplicationHaClusterPrometheusExporter;
        /**
         * The HANA DB Prometheus Exporter settings.
         */
        hanaPrometheusExporter?: outputs.applicationinsights.ApplicationHanaPrometheusExporter;
        /**
         * The JMX Prometheus Exporter settings.
         */
        jmxPrometheusExporter?: outputs.applicationinsights.ApplicationJmxPrometheusExporter;
        /**
         * A list of logs to monitor for the component.
         */
        logs?: outputs.applicationinsights.ApplicationLog[];
        /**
         * A list of Windows Events to log.
         */
        windowsEvents?: outputs.applicationinsights.ApplicationWindowsEvent[];
    }

    /**
     * The custom grouped component.
     */
    export interface ApplicationCustomComponent {
        /**
         * The name of the component.
         */
        componentName: string;
        /**
         * The list of resource ARNs that belong to the component.
         */
        resourceList: string[];
    }

    /**
     * The HA cluster Prometheus Exporter settings.
     */
    export interface ApplicationHaClusterPrometheusExporter {
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * The HANA DB Prometheus Exporter settings.
     */
    export interface ApplicationHanaPrometheusExporter {
        /**
         * A flag which indicates agreeing to install SAP HANA DB client.
         */
        agreeToInstallHanadbClient: boolean;
        /**
         * The HANA DB port.
         */
        hanaPort: string;
        /**
         * The secret name which manages the HANA DB credentials e.g. {
         *   "username": "<>",
         *   "password": "<>"
         * }.
         */
        hanaSecretName: string;
        /**
         * HANA DB SID.
         */
        hanasid: string;
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * The JMX Prometheus Exporter settings.
     */
    export interface ApplicationJmxPrometheusExporter {
        /**
         * Java agent host port
         */
        hostPort?: string;
        /**
         * JMX service URL.
         */
        jmxurl?: string;
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * A log to be monitored for the component.
     */
    export interface ApplicationLog {
        /**
         * The type of encoding of the logs to be monitored.
         */
        encoding?: enums.applicationinsights.ApplicationLogEncoding;
        /**
         * The CloudWatch log group name to be associated to the monitored log.
         */
        logGroupName?: string;
        /**
         * The path of the logs to be monitored.
         */
        logPath?: string;
        /**
         * The log type decides the log patterns against which Application Insights analyzes the log.
         */
        logType: string;
        /**
         * The name of the log pattern set.
         */
        patternSet?: string;
    }

    /**
     * The log pattern.
     */
    export interface ApplicationLogPattern {
        /**
         * The log pattern.
         */
        pattern: string;
        /**
         * The name of the log pattern.
         */
        patternName: string;
        /**
         * Rank of the log pattern.
         */
        rank: number;
    }

    /**
     * The log pattern set.
     */
    export interface ApplicationLogPatternSet {
        /**
         * The log patterns of a set.
         */
        logPatterns: outputs.applicationinsights.ApplicationLogPattern[];
        /**
         * The name of the log pattern set.
         */
        patternSetName: string;
    }

    /**
     * The configuration settings of sub components.
     */
    export interface ApplicationSubComponentConfigurationDetails {
        /**
         * A list of metrics to monitor for the component.
         */
        alarmMetrics?: outputs.applicationinsights.ApplicationAlarmMetric[];
        /**
         * A list of logs to monitor for the component.
         */
        logs?: outputs.applicationinsights.ApplicationLog[];
        /**
         * A list of Windows Events to log.
         */
        windowsEvents?: outputs.applicationinsights.ApplicationWindowsEvent[];
    }

    /**
     * One type sub component configurations for the component.
     */
    export interface ApplicationSubComponentTypeConfiguration {
        /**
         * The configuration settings of sub components.
         */
        subComponentConfigurationDetails: outputs.applicationinsights.ApplicationSubComponentConfigurationDetails;
        /**
         * The sub component type.
         */
        subComponentType: enums.applicationinsights.ApplicationSubComponentTypeConfigurationSubComponentType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ApplicationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A Windows Event to be monitored for the component.
     */
    export interface ApplicationWindowsEvent {
        /**
         * The levels of event to log. 
         */
        eventLevels: enums.applicationinsights.ApplicationEventLevel[];
        /**
         * The type of Windows Events to log.
         */
        eventName: string;
        /**
         * The CloudWatch log group name to be associated to the monitored log.
         */
        logGroupName: string;
        /**
         * The name of the log pattern set.
         */
        patternSet?: string;
    }

}

export namespace appmesh {
    export interface GatewayRouteGrpcGatewayRoute {
        action: outputs.appmesh.GatewayRouteGrpcGatewayRouteAction;
        match: outputs.appmesh.GatewayRouteGrpcGatewayRouteMatch;
    }

    export interface GatewayRouteGrpcGatewayRouteAction {
        rewrite?: outputs.appmesh.GatewayRouteGrpcGatewayRouteRewrite;
        target: outputs.appmesh.GatewayRouteTarget;
    }

    export interface GatewayRouteGrpcGatewayRouteMatch {
        hostname?: outputs.appmesh.GatewayRouteHostnameMatch;
        metadata?: outputs.appmesh.GatewayRouteGrpcGatewayRouteMetadata[];
        port?: number;
        serviceName?: string;
    }

    export interface GatewayRouteGrpcGatewayRouteMetadata {
        invert?: boolean;
        match?: outputs.appmesh.GatewayRouteMetadataMatch;
        name: string;
    }

    export interface GatewayRouteGrpcGatewayRouteRewrite {
        hostname?: outputs.appmesh.GatewayRouteHostnameRewrite;
    }

    export interface GatewayRouteHostnameMatch {
        exact?: string;
        suffix?: string;
    }

    export interface GatewayRouteHostnameRewrite {
        defaultTargetHostname?: string;
    }

    export interface GatewayRouteHttpGatewayRoute {
        action: outputs.appmesh.GatewayRouteHttpGatewayRouteAction;
        match: outputs.appmesh.GatewayRouteHttpGatewayRouteMatch;
    }

    export interface GatewayRouteHttpGatewayRouteAction {
        rewrite?: outputs.appmesh.GatewayRouteHttpGatewayRouteRewrite;
        target: outputs.appmesh.GatewayRouteTarget;
    }

    export interface GatewayRouteHttpGatewayRouteHeader {
        invert?: boolean;
        match?: outputs.appmesh.GatewayRouteHttpGatewayRouteHeaderMatch;
        name: string;
    }

    export interface GatewayRouteHttpGatewayRouteHeaderMatch {
        exact?: string;
        prefix?: string;
        range?: outputs.appmesh.GatewayRouteRangeMatch;
        regex?: string;
        suffix?: string;
    }

    export interface GatewayRouteHttpGatewayRouteMatch {
        headers?: outputs.appmesh.GatewayRouteHttpGatewayRouteHeader[];
        hostname?: outputs.appmesh.GatewayRouteHostnameMatch;
        method?: string;
        path?: outputs.appmesh.GatewayRouteHttpPathMatch;
        port?: number;
        prefix?: string;
        queryParameters?: outputs.appmesh.GatewayRouteQueryParameter[];
    }

    export interface GatewayRouteHttpGatewayRoutePathRewrite {
        exact?: string;
    }

    export interface GatewayRouteHttpGatewayRoutePrefixRewrite {
        defaultPrefix?: string;
        value?: string;
    }

    export interface GatewayRouteHttpGatewayRouteRewrite {
        hostname?: outputs.appmesh.GatewayRouteHostnameRewrite;
        path?: outputs.appmesh.GatewayRouteHttpGatewayRoutePathRewrite;
        prefix?: outputs.appmesh.GatewayRouteHttpGatewayRoutePrefixRewrite;
    }

    export interface GatewayRouteHttpPathMatch {
        exact?: string;
        regex?: string;
    }

    export interface GatewayRouteHttpQueryParameterMatch {
        exact?: string;
    }

    export interface GatewayRouteMetadataMatch {
        exact?: string;
        prefix?: string;
        range?: outputs.appmesh.GatewayRouteRangeMatch;
        regex?: string;
        suffix?: string;
    }

    export interface GatewayRouteQueryParameter {
        match?: outputs.appmesh.GatewayRouteHttpQueryParameterMatch;
        name: string;
    }

    export interface GatewayRouteRangeMatch {
        end: number;
        start: number;
    }

    export interface GatewayRouteSpec {
        grpcRoute?: outputs.appmesh.GatewayRouteGrpcGatewayRoute;
        http2Route?: outputs.appmesh.GatewayRouteHttpGatewayRoute;
        httpRoute?: outputs.appmesh.GatewayRouteHttpGatewayRoute;
        priority?: number;
    }

    export interface GatewayRouteTag {
        key: string;
        value: string;
    }

    export interface GatewayRouteTarget {
        port?: number;
        virtualService: outputs.appmesh.GatewayRouteVirtualService;
    }

    export interface GatewayRouteVirtualService {
        virtualServiceName: string;
    }

    export interface MeshEgressFilter {
        type: string;
    }

    export interface MeshServiceDiscovery {
        ipPreference?: string;
    }

    export interface MeshSpec {
        egressFilter?: outputs.appmesh.MeshEgressFilter;
        serviceDiscovery?: outputs.appmesh.MeshServiceDiscovery;
    }

    export interface MeshTag {
        key: string;
        value: string;
    }

    export interface RouteDuration {
        unit: string;
        value: number;
    }

    export interface RouteGrpcRetryPolicy {
        grpcRetryEvents?: string[];
        httpRetryEvents?: string[];
        maxRetries: number;
        perRetryTimeout: outputs.appmesh.RouteDuration;
        tcpRetryEvents?: string[];
    }

    export interface RouteGrpcRoute {
        action: outputs.appmesh.RouteGrpcRouteAction;
        match: outputs.appmesh.RouteGrpcRouteMatch;
        retryPolicy?: outputs.appmesh.RouteGrpcRetryPolicy;
        timeout?: outputs.appmesh.RouteGrpcTimeout;
    }

    export interface RouteGrpcRouteAction {
        weightedTargets: outputs.appmesh.RouteWeightedTarget[];
    }

    export interface RouteGrpcRouteMatch {
        metadata?: outputs.appmesh.RouteGrpcRouteMetadata[];
        methodName?: string;
        port?: number;
        serviceName?: string;
    }

    export interface RouteGrpcRouteMetadata {
        invert?: boolean;
        match?: outputs.appmesh.RouteGrpcRouteMetadataMatchMethod;
        name: string;
    }

    export interface RouteGrpcRouteMetadataMatchMethod {
        exact?: string;
        prefix?: string;
        range?: outputs.appmesh.RouteMatchRange;
        regex?: string;
        suffix?: string;
    }

    export interface RouteGrpcTimeout {
        idle?: outputs.appmesh.RouteDuration;
        perRequest?: outputs.appmesh.RouteDuration;
    }

    export interface RouteHeaderMatchMethod {
        exact?: string;
        prefix?: string;
        range?: outputs.appmesh.RouteMatchRange;
        regex?: string;
        suffix?: string;
    }

    export interface RouteHttpPathMatch {
        exact?: string;
        regex?: string;
    }

    export interface RouteHttpQueryParameterMatch {
        exact?: string;
    }

    export interface RouteHttpRetryPolicy {
        httpRetryEvents?: string[];
        maxRetries: number;
        perRetryTimeout: outputs.appmesh.RouteDuration;
        tcpRetryEvents?: string[];
    }

    export interface RouteHttpRoute {
        action: outputs.appmesh.RouteHttpRouteAction;
        match: outputs.appmesh.RouteHttpRouteMatch;
        retryPolicy?: outputs.appmesh.RouteHttpRetryPolicy;
        timeout?: outputs.appmesh.RouteHttpTimeout;
    }

    export interface RouteHttpRouteAction {
        weightedTargets: outputs.appmesh.RouteWeightedTarget[];
    }

    export interface RouteHttpRouteHeader {
        invert?: boolean;
        match?: outputs.appmesh.RouteHeaderMatchMethod;
        name: string;
    }

    export interface RouteHttpRouteMatch {
        headers?: outputs.appmesh.RouteHttpRouteHeader[];
        method?: string;
        path?: outputs.appmesh.RouteHttpPathMatch;
        port?: number;
        prefix?: string;
        queryParameters?: outputs.appmesh.RouteQueryParameter[];
        scheme?: string;
    }

    export interface RouteHttpTimeout {
        idle?: outputs.appmesh.RouteDuration;
        perRequest?: outputs.appmesh.RouteDuration;
    }

    export interface RouteMatchRange {
        end: number;
        start: number;
    }

    export interface RouteQueryParameter {
        match?: outputs.appmesh.RouteHttpQueryParameterMatch;
        name: string;
    }

    export interface RouteSpec {
        grpcRoute?: outputs.appmesh.RouteGrpcRoute;
        http2Route?: outputs.appmesh.RouteHttpRoute;
        httpRoute?: outputs.appmesh.RouteHttpRoute;
        priority?: number;
        tcpRoute?: outputs.appmesh.RouteTcpRoute;
    }

    export interface RouteTag {
        key: string;
        value: string;
    }

    export interface RouteTcpRoute {
        action: outputs.appmesh.RouteTcpRouteAction;
        match?: outputs.appmesh.RouteTcpRouteMatch;
        timeout?: outputs.appmesh.RouteTcpTimeout;
    }

    export interface RouteTcpRouteAction {
        weightedTargets: outputs.appmesh.RouteWeightedTarget[];
    }

    export interface RouteTcpRouteMatch {
        port?: number;
    }

    export interface RouteTcpTimeout {
        idle?: outputs.appmesh.RouteDuration;
    }

    export interface RouteWeightedTarget {
        port?: number;
        virtualNode: string;
        weight: number;
    }

    export interface VirtualGatewayAccessLog {
        file?: outputs.appmesh.VirtualGatewayFileAccessLog;
    }

    export interface VirtualGatewayBackendDefaults {
        clientPolicy?: outputs.appmesh.VirtualGatewayClientPolicy;
    }

    export interface VirtualGatewayClientPolicy {
        tls?: outputs.appmesh.VirtualGatewayClientPolicyTls;
    }

    export interface VirtualGatewayClientPolicyTls {
        certificate?: outputs.appmesh.VirtualGatewayClientTlsCertificate;
        enforce?: boolean;
        ports?: number[];
        validation: outputs.appmesh.VirtualGatewayTlsValidationContext;
    }

    export interface VirtualGatewayClientTlsCertificate {
        file?: outputs.appmesh.VirtualGatewayListenerTlsFileCertificate;
        sds?: outputs.appmesh.VirtualGatewayListenerTlsSdsCertificate;
    }

    export interface VirtualGatewayConnectionPool {
        grpc?: outputs.appmesh.VirtualGatewayGrpcConnectionPool;
        http?: outputs.appmesh.VirtualGatewayHttpConnectionPool;
        http2?: outputs.appmesh.VirtualGatewayHttp2ConnectionPool;
    }

    export interface VirtualGatewayFileAccessLog {
        format?: outputs.appmesh.VirtualGatewayLoggingFormat;
        path: string;
    }

    export interface VirtualGatewayGrpcConnectionPool {
        maxRequests: number;
    }

    export interface VirtualGatewayHealthCheckPolicy {
        healthyThreshold: number;
        intervalMillis: number;
        path?: string;
        port?: number;
        protocol: string;
        timeoutMillis: number;
        unhealthyThreshold: number;
    }

    export interface VirtualGatewayHttp2ConnectionPool {
        maxRequests: number;
    }

    export interface VirtualGatewayHttpConnectionPool {
        maxConnections: number;
        maxPendingRequests?: number;
    }

    export interface VirtualGatewayJsonFormatRef {
        key: string;
        value: string;
    }

    export interface VirtualGatewayListener {
        connectionPool?: outputs.appmesh.VirtualGatewayConnectionPool;
        healthCheck?: outputs.appmesh.VirtualGatewayHealthCheckPolicy;
        portMapping: outputs.appmesh.VirtualGatewayPortMapping;
        tls?: outputs.appmesh.VirtualGatewayListenerTls;
    }

    export interface VirtualGatewayListenerTls {
        certificate: outputs.appmesh.VirtualGatewayListenerTlsCertificate;
        mode: string;
        validation?: outputs.appmesh.VirtualGatewayListenerTlsValidationContext;
    }

    export interface VirtualGatewayListenerTlsAcmCertificate {
        certificateArn: string;
    }

    export interface VirtualGatewayListenerTlsCertificate {
        acm?: outputs.appmesh.VirtualGatewayListenerTlsAcmCertificate;
        file?: outputs.appmesh.VirtualGatewayListenerTlsFileCertificate;
        sds?: outputs.appmesh.VirtualGatewayListenerTlsSdsCertificate;
    }

    export interface VirtualGatewayListenerTlsFileCertificate {
        certificateChain: string;
        privateKey: string;
    }

    export interface VirtualGatewayListenerTlsSdsCertificate {
        secretName: string;
    }

    export interface VirtualGatewayListenerTlsValidationContext {
        subjectAlternativeNames?: outputs.appmesh.VirtualGatewaySubjectAlternativeNames;
        trust: outputs.appmesh.VirtualGatewayListenerTlsValidationContextTrust;
    }

    export interface VirtualGatewayListenerTlsValidationContextTrust {
        file?: outputs.appmesh.VirtualGatewayTlsValidationContextFileTrust;
        sds?: outputs.appmesh.VirtualGatewayTlsValidationContextSdsTrust;
    }

    export interface VirtualGatewayLogging {
        accessLog?: outputs.appmesh.VirtualGatewayAccessLog;
    }

    export interface VirtualGatewayLoggingFormat {
        json?: outputs.appmesh.VirtualGatewayJsonFormatRef[];
        text?: string;
    }

    export interface VirtualGatewayPortMapping {
        port: number;
        protocol: string;
    }

    export interface VirtualGatewaySpec {
        backendDefaults?: outputs.appmesh.VirtualGatewayBackendDefaults;
        listeners: outputs.appmesh.VirtualGatewayListener[];
        logging?: outputs.appmesh.VirtualGatewayLogging;
    }

    export interface VirtualGatewaySubjectAlternativeNameMatchers {
        exact?: string[];
    }

    export interface VirtualGatewaySubjectAlternativeNames {
        match: outputs.appmesh.VirtualGatewaySubjectAlternativeNameMatchers;
    }

    export interface VirtualGatewayTag {
        key: string;
        value: string;
    }

    export interface VirtualGatewayTlsValidationContext {
        subjectAlternativeNames?: outputs.appmesh.VirtualGatewaySubjectAlternativeNames;
        trust: outputs.appmesh.VirtualGatewayTlsValidationContextTrust;
    }

    export interface VirtualGatewayTlsValidationContextAcmTrust {
        certificateAuthorityArns: string[];
    }

    export interface VirtualGatewayTlsValidationContextFileTrust {
        certificateChain: string;
    }

    export interface VirtualGatewayTlsValidationContextSdsTrust {
        secretName: string;
    }

    export interface VirtualGatewayTlsValidationContextTrust {
        acm?: outputs.appmesh.VirtualGatewayTlsValidationContextAcmTrust;
        file?: outputs.appmesh.VirtualGatewayTlsValidationContextFileTrust;
        sds?: outputs.appmesh.VirtualGatewayTlsValidationContextSdsTrust;
    }

    export interface VirtualNodeAccessLog {
        file?: outputs.appmesh.VirtualNodeFileAccessLog;
    }

    export interface VirtualNodeAwsCloudMapInstanceAttribute {
        key: string;
        value: string;
    }

    export interface VirtualNodeAwsCloudMapServiceDiscovery {
        attributes?: outputs.appmesh.VirtualNodeAwsCloudMapInstanceAttribute[];
        ipPreference?: string;
        namespaceName: string;
        serviceName: string;
    }

    export interface VirtualNodeBackend {
        virtualService?: outputs.appmesh.VirtualNodeVirtualServiceBackend;
    }

    export interface VirtualNodeBackendDefaults {
        clientPolicy?: outputs.appmesh.VirtualNodeClientPolicy;
    }

    export interface VirtualNodeClientPolicy {
        tls?: outputs.appmesh.VirtualNodeClientPolicyTls;
    }

    export interface VirtualNodeClientPolicyTls {
        certificate?: outputs.appmesh.VirtualNodeClientTlsCertificate;
        enforce?: boolean;
        ports?: number[];
        validation: outputs.appmesh.VirtualNodeTlsValidationContext;
    }

    export interface VirtualNodeClientTlsCertificate {
        file?: outputs.appmesh.VirtualNodeListenerTlsFileCertificate;
        sds?: outputs.appmesh.VirtualNodeListenerTlsSdsCertificate;
    }

    export interface VirtualNodeConnectionPool {
        grpc?: outputs.appmesh.VirtualNodeGrpcConnectionPool;
        http?: outputs.appmesh.VirtualNodeHttpConnectionPool;
        http2?: outputs.appmesh.VirtualNodeHttp2ConnectionPool;
        tcp?: outputs.appmesh.VirtualNodeTcpConnectionPool;
    }

    export interface VirtualNodeDnsServiceDiscovery {
        hostname: string;
        ipPreference?: string;
        responseType?: string;
    }

    export interface VirtualNodeDuration {
        unit: string;
        value: number;
    }

    export interface VirtualNodeFileAccessLog {
        format?: outputs.appmesh.VirtualNodeLoggingFormat;
        path: string;
    }

    export interface VirtualNodeGrpcConnectionPool {
        maxRequests: number;
    }

    export interface VirtualNodeGrpcTimeout {
        idle?: outputs.appmesh.VirtualNodeDuration;
        perRequest?: outputs.appmesh.VirtualNodeDuration;
    }

    export interface VirtualNodeHealthCheck {
        healthyThreshold: number;
        intervalMillis: number;
        path?: string;
        port?: number;
        protocol: string;
        timeoutMillis: number;
        unhealthyThreshold: number;
    }

    export interface VirtualNodeHttp2ConnectionPool {
        maxRequests: number;
    }

    export interface VirtualNodeHttpConnectionPool {
        maxConnections: number;
        maxPendingRequests?: number;
    }

    export interface VirtualNodeHttpTimeout {
        idle?: outputs.appmesh.VirtualNodeDuration;
        perRequest?: outputs.appmesh.VirtualNodeDuration;
    }

    export interface VirtualNodeJsonFormatRef {
        key: string;
        value: string;
    }

    export interface VirtualNodeListener {
        connectionPool?: outputs.appmesh.VirtualNodeConnectionPool;
        healthCheck?: outputs.appmesh.VirtualNodeHealthCheck;
        outlierDetection?: outputs.appmesh.VirtualNodeOutlierDetection;
        portMapping: outputs.appmesh.VirtualNodePortMapping;
        timeout?: outputs.appmesh.VirtualNodeListenerTimeout;
        tls?: outputs.appmesh.VirtualNodeListenerTls;
    }

    export interface VirtualNodeListenerTimeout {
        grpc?: outputs.appmesh.VirtualNodeGrpcTimeout;
        http?: outputs.appmesh.VirtualNodeHttpTimeout;
        http2?: outputs.appmesh.VirtualNodeHttpTimeout;
        tcp?: outputs.appmesh.VirtualNodeTcpTimeout;
    }

    export interface VirtualNodeListenerTls {
        certificate: outputs.appmesh.VirtualNodeListenerTlsCertificate;
        mode: string;
        validation?: outputs.appmesh.VirtualNodeListenerTlsValidationContext;
    }

    export interface VirtualNodeListenerTlsAcmCertificate {
        certificateArn: string;
    }

    export interface VirtualNodeListenerTlsCertificate {
        acm?: outputs.appmesh.VirtualNodeListenerTlsAcmCertificate;
        file?: outputs.appmesh.VirtualNodeListenerTlsFileCertificate;
        sds?: outputs.appmesh.VirtualNodeListenerTlsSdsCertificate;
    }

    export interface VirtualNodeListenerTlsFileCertificate {
        certificateChain: string;
        privateKey: string;
    }

    export interface VirtualNodeListenerTlsSdsCertificate {
        secretName: string;
    }

    export interface VirtualNodeListenerTlsValidationContext {
        subjectAlternativeNames?: outputs.appmesh.VirtualNodeSubjectAlternativeNames;
        trust: outputs.appmesh.VirtualNodeListenerTlsValidationContextTrust;
    }

    export interface VirtualNodeListenerTlsValidationContextTrust {
        file?: outputs.appmesh.VirtualNodeTlsValidationContextFileTrust;
        sds?: outputs.appmesh.VirtualNodeTlsValidationContextSdsTrust;
    }

    export interface VirtualNodeLogging {
        accessLog?: outputs.appmesh.VirtualNodeAccessLog;
    }

    export interface VirtualNodeLoggingFormat {
        json?: outputs.appmesh.VirtualNodeJsonFormatRef[];
        text?: string;
    }

    export interface VirtualNodeOutlierDetection {
        baseEjectionDuration: outputs.appmesh.VirtualNodeDuration;
        interval: outputs.appmesh.VirtualNodeDuration;
        maxEjectionPercent: number;
        maxServerErrors: number;
    }

    export interface VirtualNodePortMapping {
        port: number;
        protocol: string;
    }

    export interface VirtualNodeServiceDiscovery {
        awsCloudMap?: outputs.appmesh.VirtualNodeAwsCloudMapServiceDiscovery;
        dns?: outputs.appmesh.VirtualNodeDnsServiceDiscovery;
    }

    export interface VirtualNodeSpec {
        backendDefaults?: outputs.appmesh.VirtualNodeBackendDefaults;
        backends?: outputs.appmesh.VirtualNodeBackend[];
        listeners?: outputs.appmesh.VirtualNodeListener[];
        logging?: outputs.appmesh.VirtualNodeLogging;
        serviceDiscovery?: outputs.appmesh.VirtualNodeServiceDiscovery;
    }

    export interface VirtualNodeSubjectAlternativeNameMatchers {
        exact?: string[];
    }

    export interface VirtualNodeSubjectAlternativeNames {
        match: outputs.appmesh.VirtualNodeSubjectAlternativeNameMatchers;
    }

    export interface VirtualNodeTag {
        key: string;
        value: string;
    }

    export interface VirtualNodeTcpConnectionPool {
        maxConnections: number;
    }

    export interface VirtualNodeTcpTimeout {
        idle?: outputs.appmesh.VirtualNodeDuration;
    }

    export interface VirtualNodeTlsValidationContext {
        subjectAlternativeNames?: outputs.appmesh.VirtualNodeSubjectAlternativeNames;
        trust: outputs.appmesh.VirtualNodeTlsValidationContextTrust;
    }

    export interface VirtualNodeTlsValidationContextAcmTrust {
        certificateAuthorityArns: string[];
    }

    export interface VirtualNodeTlsValidationContextFileTrust {
        certificateChain: string;
    }

    export interface VirtualNodeTlsValidationContextSdsTrust {
        secretName: string;
    }

    export interface VirtualNodeTlsValidationContextTrust {
        acm?: outputs.appmesh.VirtualNodeTlsValidationContextAcmTrust;
        file?: outputs.appmesh.VirtualNodeTlsValidationContextFileTrust;
        sds?: outputs.appmesh.VirtualNodeTlsValidationContextSdsTrust;
    }

    export interface VirtualNodeVirtualServiceBackend {
        clientPolicy?: outputs.appmesh.VirtualNodeClientPolicy;
        virtualServiceName: string;
    }

    export interface VirtualRouterListener {
        portMapping: outputs.appmesh.VirtualRouterPortMapping;
    }

    export interface VirtualRouterPortMapping {
        port: number;
        protocol: string;
    }

    export interface VirtualRouterSpec {
        listeners: outputs.appmesh.VirtualRouterListener[];
    }

    export interface VirtualRouterTag {
        key: string;
        value: string;
    }

    export interface VirtualServiceProvider {
        virtualNode?: outputs.appmesh.VirtualServiceVirtualNodeServiceProvider;
        virtualRouter?: outputs.appmesh.VirtualServiceVirtualRouterServiceProvider;
    }

    export interface VirtualServiceSpec {
        provider?: outputs.appmesh.VirtualServiceProvider;
    }

    export interface VirtualServiceTag {
        key: string;
        value: string;
    }

    export interface VirtualServiceVirtualNodeServiceProvider {
        virtualNodeName: string;
    }

    export interface VirtualServiceVirtualRouterServiceProvider {
        virtualRouterName: string;
    }

}

export namespace apprunner {
    export interface AutoScalingConfigurationTag {
        key?: string;
        value?: string;
    }

    export interface ObservabilityConfigurationTag {
        key?: string;
        value?: string;
    }

    /**
     * Describes the configuration of the tracing feature within an AWS App Runner observability configuration.
     */
    export interface ObservabilityConfigurationTraceConfiguration {
        /**
         * The implementation provider chosen for tracing App Runner services.
         */
        vendor: enums.apprunner.ObservabilityConfigurationTraceConfigurationVendor;
    }

    /**
     * Authentication Configuration
     */
    export interface ServiceAuthenticationConfiguration {
        /**
         * Access Role Arn
         */
        accessRoleArn?: string;
        /**
         * Connection Arn
         */
        connectionArn?: string;
    }

    /**
     * Code Configuration
     */
    export interface ServiceCodeConfiguration {
        codeConfigurationValues?: outputs.apprunner.ServiceCodeConfigurationValues;
        /**
         * Configuration Source
         */
        configurationSource: enums.apprunner.ServiceCodeConfigurationConfigurationSource;
    }

    /**
     * Code Configuration Values
     */
    export interface ServiceCodeConfigurationValues {
        /**
         * Build Command
         */
        buildCommand?: string;
        /**
         * Port
         */
        port?: string;
        /**
         * Runtime
         */
        runtime: enums.apprunner.ServiceCodeConfigurationValuesRuntime;
        /**
         * The secrets and parameters that get referenced by your service as environment variables
         */
        runtimeEnvironmentSecrets?: outputs.apprunner.ServiceKeyValuePair[];
        runtimeEnvironmentVariables?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * Start Command
         */
        startCommand?: string;
    }

    /**
     * Source Code Repository
     */
    export interface ServiceCodeRepository {
        codeConfiguration?: outputs.apprunner.ServiceCodeConfiguration;
        /**
         * Repository Url
         */
        repositoryUrl: string;
        sourceCodeVersion: outputs.apprunner.ServiceSourceCodeVersion;
        /**
         * Source Directory
         */
        sourceDirectory?: string;
    }

    /**
     * Network egress configuration
     */
    export interface ServiceEgressConfiguration {
        /**
         * Network egress type.
         */
        egressType: enums.apprunner.ServiceEgressConfigurationEgressType;
        /**
         * The Amazon Resource Name (ARN) of the App Runner VpcConnector.
         */
        vpcConnectorArn?: string;
    }

    /**
     * Encryption configuration (KMS key)
     */
    export interface ServiceEncryptionConfiguration {
        /**
         * The KMS Key
         */
        kmsKey: string;
    }

    /**
     * Health check configuration
     */
    export interface ServiceHealthCheckConfiguration {
        /**
         * Health check Healthy Threshold
         */
        healthyThreshold?: number;
        /**
         * Health check Interval
         */
        interval?: number;
        /**
         * Health check Path
         */
        path?: string;
        /**
         * Health Check Protocol
         */
        protocol?: enums.apprunner.ServiceHealthCheckConfigurationProtocol;
        /**
         * Health check Timeout
         */
        timeout?: number;
        /**
         * Health check Unhealthy Threshold
         */
        unhealthyThreshold?: number;
    }

    /**
     * Image Configuration
     */
    export interface ServiceImageConfiguration {
        /**
         * Port
         */
        port?: string;
        /**
         * The secrets and parameters that get referenced by your service as environment variables
         */
        runtimeEnvironmentSecrets?: outputs.apprunner.ServiceKeyValuePair[];
        runtimeEnvironmentVariables?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * Start Command
         */
        startCommand?: string;
    }

    /**
     * Image Repository
     */
    export interface ServiceImageRepository {
        imageConfiguration?: outputs.apprunner.ServiceImageConfiguration;
        /**
         * Image Identifier
         */
        imageIdentifier: string;
        /**
         * Image Repository Type
         */
        imageRepositoryType: enums.apprunner.ServiceImageRepositoryImageRepositoryType;
    }

    /**
     * Network ingress configuration
     */
    export interface ServiceIngressConfiguration {
        /**
         * It's set to true if the Apprunner service is publicly accessible. It's set to false otherwise.
         */
        isPubliclyAccessible: boolean;
    }

    /**
     * Instance Configuration
     */
    export interface ServiceInstanceConfiguration {
        /**
         * CPU
         */
        cpu?: string;
        /**
         * Instance Role Arn
         */
        instanceRoleArn?: string;
        /**
         * Memory
         */
        memory?: string;
    }

    export interface ServiceKeyValuePair {
        name?: string;
        value?: string;
    }

    /**
     * Network configuration
     */
    export interface ServiceNetworkConfiguration {
        egressConfiguration?: outputs.apprunner.ServiceEgressConfiguration;
        ingressConfiguration?: outputs.apprunner.ServiceIngressConfiguration;
        /**
         * App Runner service endpoint IP address type
         */
        ipAddressType?: enums.apprunner.ServiceNetworkConfigurationIpAddressType;
    }

    /**
     * Service observability configuration
     */
    export interface ServiceObservabilityConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the App Runner ObservabilityConfiguration.
         */
        observabilityConfigurationArn?: string;
        /**
         * Observability enabled
         */
        observabilityEnabled: boolean;
    }

    /**
     * Source Code Version
     */
    export interface ServiceSourceCodeVersion {
        /**
         * Source Code Version Type
         */
        type: enums.apprunner.ServiceSourceCodeVersionType;
        /**
         * Source Code Version Value
         */
        value: string;
    }

    /**
     * Source Code configuration
     */
    export interface ServiceSourceConfiguration {
        authenticationConfiguration?: outputs.apprunner.ServiceAuthenticationConfiguration;
        /**
         * Auto Deployment enabled
         */
        autoDeploymentsEnabled?: boolean;
        codeRepository?: outputs.apprunner.ServiceCodeRepository;
        imageRepository?: outputs.apprunner.ServiceImageRepository;
    }

    export interface ServiceTag {
        key?: string;
        value?: string;
    }

    export interface VpcConnectorTag {
        key?: string;
        value?: string;
    }

    /**
     * The configuration of customer’s VPC and related VPC endpoint
     */
    export interface VpcIngressConnectionIngressVpcConfiguration {
        /**
         * The ID of the VPC endpoint that your App Runner service connects to.
         */
        vpcEndpointId: string;
        /**
         * The ID of the VPC that the VPC endpoint is used in.
         */
        vpcId: string;
    }

    export interface VpcIngressConnectionTag {
        key?: string;
        value?: string;
    }

}

export namespace appstream {
    export interface AppBlockBuilderAccessEndpoint {
        endpointType: string;
        vpceId: string;
    }

    export interface AppBlockBuilderTag {
        key: string;
        value: string;
    }

    export interface AppBlockBuilderVpcConfig {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface AppBlockS3Location {
        s3Bucket: string;
        s3Key?: string;
    }

    export interface AppBlockScriptDetails {
        executableParameters?: string;
        executablePath: string;
        scriptS3Location: outputs.appstream.AppBlockS3Location;
        timeoutInSeconds: number;
    }

    export interface AppBlockTag0Properties {
        key: string;
        value: string;
    }

    export interface AppBlockTag1Properties {
        tagKey: string;
        tagValue: string;
    }

    export interface ApplicationS3Location {
        s3Bucket: string;
        s3Key: string;
    }

    export interface ApplicationTag0Properties {
        key: string;
        value: string;
    }

    export interface ApplicationTag1Properties {
        tagKey: string;
        tagValue: string;
    }

    export interface DirectoryConfigCertificateBasedAuthProperties {
        certificateAuthorityArn?: string;
        status?: string;
    }

    export interface DirectoryConfigServiceAccountCredentials {
        accountName: string;
        accountPassword: string;
    }

    export interface EntitlementAttribute {
        name: string;
        value: string;
    }

    export interface FleetComputeCapacity {
        desiredInstances?: number;
        desiredSessions?: number;
    }

    export interface FleetDomainJoinInfo {
        directoryName?: string;
        organizationalUnitDistinguishedName?: string;
    }

    export interface FleetS3Location {
        s3Bucket: string;
        s3Key: string;
    }

    export interface FleetTag {
        key: string;
        value: string;
    }

    export interface FleetVpcConfig {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface ImageBuilderAccessEndpoint {
        endpointType: string;
        vpceId: string;
    }

    export interface ImageBuilderDomainJoinInfo {
        directoryName?: string;
        organizationalUnitDistinguishedName?: string;
    }

    export interface ImageBuilderTag {
        key: string;
        value: string;
    }

    export interface ImageBuilderVpcConfig {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface StackAccessEndpoint {
        endpointType: string;
        vpceId: string;
    }

    export interface StackApplicationSettings {
        enabled: boolean;
        settingsGroup?: string;
    }

    export interface StackStorageConnector {
        connectorType: string;
        domains?: string[];
        resourceIdentifier?: string;
    }

    export interface StackStreamingExperienceSettings {
        preferredProtocol?: string;
    }

    export interface StackTag {
        key: string;
        value: string;
    }

    export interface StackUserSetting {
        action: string;
        maximumLength?: number;
        permission: string;
    }

}

export namespace appsync {
    export interface DataSourceAuthorizationConfig {
        authorizationType: string;
        awsIamConfig?: outputs.appsync.DataSourceAwsIamConfig;
    }

    export interface DataSourceAwsIamConfig {
        signingRegion?: string;
        signingServiceName?: string;
    }

    export interface DataSourceDeltaSyncConfig {
        baseTableTtl: string;
        deltaSyncTableName: string;
        deltaSyncTableTtl: string;
    }

    export interface DataSourceDynamoDbConfig {
        awsRegion: string;
        deltaSyncConfig?: outputs.appsync.DataSourceDeltaSyncConfig;
        tableName: string;
        useCallerCredentials?: boolean;
        versioned?: boolean;
    }

    export interface DataSourceElasticsearchConfig {
        awsRegion: string;
        endpoint: string;
    }

    export interface DataSourceEventBridgeConfig {
        eventBusArn: string;
    }

    export interface DataSourceHttpConfig {
        authorizationConfig?: outputs.appsync.DataSourceAuthorizationConfig;
        endpoint: string;
    }

    export interface DataSourceLambdaConfig {
        lambdaFunctionArn: string;
    }

    export interface DataSourceOpenSearchServiceConfig {
        awsRegion: string;
        endpoint: string;
    }

    export interface DataSourceRdsHttpEndpointConfig {
        awsRegion: string;
        awsSecretStoreArn: string;
        databaseName?: string;
        dbClusterIdentifier: string;
        schema?: string;
    }

    export interface DataSourceRelationalDatabaseConfig {
        rdsHttpEndpointConfig?: outputs.appsync.DataSourceRdsHttpEndpointConfig;
        relationalDatabaseSourceType: string;
    }

    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    export interface FunctionConfigurationAppSyncRuntime {
        /**
         * The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
         */
        name: string;
        /**
         * The version of the runtime to use. Currently, the only allowed version is 1.0.0.
         */
        runtimeVersion: string;
    }

    /**
     * The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
     */
    export interface FunctionConfigurationLambdaConflictHandlerConfig {
        /**
         * The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
         */
        lambdaConflictHandlerArn?: string;
    }

    /**
     * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
     */
    export interface FunctionConfigurationSyncConfig {
        /**
         * The Conflict Detection strategy to use.
         */
        conflictDetection: string;
        /**
         * The Conflict Resolution strategy to perform in the event of a conflict.
         */
        conflictHandler?: string;
        lambdaConflictHandlerConfig?: outputs.appsync.FunctionConfigurationLambdaConflictHandlerConfig;
    }

    export interface GraphQlApiAdditionalAuthenticationProvider {
        authenticationType: string;
        lambdaAuthorizerConfig?: outputs.appsync.GraphQlApiLambdaAuthorizerConfig;
        openIdConnectConfig?: outputs.appsync.GraphQlApiOpenIdConnectConfig;
        userPoolConfig?: outputs.appsync.GraphQlApiCognitoUserPoolConfig;
    }

    export interface GraphQlApiCognitoUserPoolConfig {
        appIdClientRegex?: string;
        awsRegion?: string;
        userPoolId?: string;
    }

    export interface GraphQlApiLambdaAuthorizerConfig {
        authorizerResultTtlInSeconds?: number;
        authorizerUri?: string;
        identityValidationExpression?: string;
    }

    export interface GraphQlApiLogConfig {
        cloudWatchLogsRoleArn?: string;
        excludeVerboseContent?: boolean;
        fieldLogLevel?: string;
    }

    export interface GraphQlApiOpenIdConnectConfig {
        authTtl?: number;
        clientId?: string;
        iatTtl?: number;
        issuer?: string;
    }

    export interface GraphQlApiTag {
        key: string;
        value: string;
    }

    export interface GraphQlApiUserPoolConfig {
        appIdClientRegex?: string;
        awsRegion?: string;
        defaultAction?: string;
        userPoolId?: string;
    }

    /**
     * Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    export interface ResolverAppSyncRuntime {
        /**
         * The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
         */
        name: string;
        /**
         * The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
         */
        runtimeVersion: string;
    }

    /**
     * The caching configuration for a resolver that has caching activated.
     */
    export interface ResolverCachingConfig {
        /**
         * The caching keys for a resolver that has caching activated.
         *  Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
         */
        cachingKeys?: string[];
        /**
         * The TTL in seconds for a resolver that has caching activated.
         *  Valid values are 1–3,600 seconds.
         */
        ttl: number;
    }

    /**
     * The ``LambdaConflictHandlerConfig`` when configuring LAMBDA as the Conflict Handler.
     */
    export interface ResolverLambdaConflictHandlerConfig {
        /**
         * The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
         */
        lambdaConflictHandlerArn?: string;
    }

    /**
     * Use the ``PipelineConfig`` property type to specify ``PipelineConfig`` for an APSYlong resolver.
     *   ``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
     */
    export interface ResolverPipelineConfig {
        /**
         * A list of ``Function`` objects.
         */
        functions?: string[];
    }

    /**
     * Describes a Sync configuration for a resolver.
     *  Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
     */
    export interface ResolverSyncConfig {
        /**
         * The Conflict Detection strategy to use.
         *   +   *VERSION*: Detect conflicts based on object versions for this resolver.
         *   +   *NONE*: Do not detect conflicts when invoking this resolver.
         */
        conflictDetection: string;
        /**
         * The Conflict Resolution strategy to perform in the event of a conflict.
         *   +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
         *   +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
         *   +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
         */
        conflictHandler?: string;
        /**
         * The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
         */
        lambdaConflictHandlerConfig?: outputs.appsync.ResolverLambdaConflictHandlerConfig;
    }

    export interface SourceApiAssociationConfig {
        /**
         * Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
         */
        mergeType?: enums.appsync.SourceApiAssociationConfigMergeType;
    }

}

export namespace aps {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface RuleGroupsNamespaceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Logging configuration
     */
    export interface WorkspaceLoggingConfiguration {
        /**
         * CloudWatch log group ARN
         */
        logGroupArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface WorkspaceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace arczonalshift {
    export interface ZonalAutoshiftConfigurationControlCondition {
        alarmIdentifier: string;
        type: enums.arczonalshift.ZonalAutoshiftConfigurationControlConditionType;
    }

    export interface ZonalAutoshiftConfigurationPracticeRunConfiguration {
        blockedDates?: string[];
        blockedWindows?: string[];
        blockingAlarms?: outputs.arczonalshift.ZonalAutoshiftConfigurationControlCondition[];
        outcomeAlarms: outputs.arczonalshift.ZonalAutoshiftConfigurationControlCondition[];
    }

}

export namespace ask {
    export interface SkillAuthenticationConfiguration {
        clientId: string;
        clientSecret: string;
        refreshToken: string;
    }

    export interface SkillOverrides {
        manifest?: any;
    }

    export interface SkillPackage {
        overrides?: outputs.ask.SkillOverrides;
        s3Bucket: string;
        s3BucketRole?: string;
        s3Key: string;
        s3ObjectVersion?: string;
    }

}

export namespace athena {
    export interface CapacityReservationCapacityAssignment {
        workgroupNames: string[];
    }

    /**
     * Assignment configuration to assign workgroups to a reservation
     */
    export interface CapacityReservationCapacityAssignmentConfiguration {
        capacityAssignments: outputs.athena.CapacityReservationCapacityAssignment[];
    }

    export interface CapacityReservationTag {
        key: string;
        value: string;
    }

    export interface DataCatalogTag {
        key: string;
        value: string;
    }

    /**
     * Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results
     */
    export interface WorkGroupAclConfiguration {
        s3AclOption: enums.athena.WorkGroupS3AclOption;
    }

    export interface WorkGroupConfiguration {
        additionalConfiguration?: string;
        bytesScannedCutoffPerQuery?: number;
        customerContentEncryptionConfiguration?: outputs.athena.WorkGroupCustomerContentEncryptionConfiguration;
        enforceWorkGroupConfiguration?: boolean;
        engineVersion?: outputs.athena.WorkGroupEngineVersion;
        executionRole?: string;
        publishCloudWatchMetricsEnabled?: boolean;
        requesterPaysEnabled?: boolean;
        resultConfiguration?: outputs.athena.WorkGroupResultConfiguration;
    }

    /**
     * The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified. 
     */
    export interface WorkGroupConfigurationUpdates {
        additionalConfiguration?: string;
        bytesScannedCutoffPerQuery?: number;
        customerContentEncryptionConfiguration?: outputs.athena.WorkGroupCustomerContentEncryptionConfiguration;
        enforceWorkGroupConfiguration?: boolean;
        engineVersion?: outputs.athena.WorkGroupEngineVersion;
        executionRole?: string;
        publishCloudWatchMetricsEnabled?: boolean;
        removeBytesScannedCutoffPerQuery?: boolean;
        removeCustomerContentEncryptionConfiguration?: boolean;
        requesterPaysEnabled?: boolean;
        resultConfigurationUpdates?: outputs.athena.WorkGroupResultConfigurationUpdates;
    }

    /**
     * Indicates the KMS key for encrypting notebook content.
     */
    export interface WorkGroupCustomerContentEncryptionConfiguration {
        kmsKey: string;
    }

    /**
     * If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
     */
    export interface WorkGroupEncryptionConfiguration {
        encryptionOption: enums.athena.WorkGroupEncryptionOption;
        kmsKey?: string;
    }

    /**
     * The Athena engine version for running queries.
     */
    export interface WorkGroupEngineVersion {
        effectiveEngineVersion?: string;
        selectedEngineVersion?: string;
    }

    /**
     * The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
     */
    export interface WorkGroupResultConfiguration {
        aclConfiguration?: outputs.athena.WorkGroupAclConfiguration;
        encryptionConfiguration?: outputs.athena.WorkGroupEncryptionConfiguration;
        expectedBucketOwner?: string;
        outputLocation?: string;
    }

    /**
     * The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. 
     */
    export interface WorkGroupResultConfigurationUpdates {
        aclConfiguration?: outputs.athena.WorkGroupAclConfiguration;
        encryptionConfiguration?: outputs.athena.WorkGroupEncryptionConfiguration;
        expectedBucketOwner?: string;
        outputLocation?: string;
        removeAclConfiguration?: boolean;
        removeEncryptionConfiguration?: boolean;
        removeExpectedBucketOwner?: boolean;
        removeOutputLocation?: boolean;
    }

    export interface WorkGroupTag {
        key: string;
        value: string;
    }

}

export namespace auditmanager {
    /**
     * The AWS account associated with the assessment.
     */
    export interface AssessmentAwsAccount {
        emailAddress?: string;
        id?: string;
        name?: string;
    }

    /**
     * An AWS service such as Amazon S3, AWS CloudTrail, and so on.
     */
    export interface AssessmentAwsService {
        serviceName?: string;
    }

    /**
     * The assignment of a control set to a delegate for review.
     */
    export interface AssessmentDelegation {
        assessmentId?: string;
        assessmentName?: string;
        comment?: string;
        controlSetId?: string;
        createdBy?: string;
        creationTime?: number;
        id?: string;
        lastUpdated?: number;
        roleArn?: string;
        roleType?: enums.auditmanager.AssessmentRoleType;
        status?: enums.auditmanager.AssessmentDelegationStatus;
    }

    /**
     * The destination in which evidence reports are stored for the specified assessment.
     */
    export interface AssessmentReportsDestination {
        destination?: string;
        destinationType?: enums.auditmanager.AssessmentReportDestinationType;
    }

    /**
     * The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
     */
    export interface AssessmentRole {
        roleArn?: string;
        roleType?: enums.auditmanager.AssessmentRoleType;
    }

    /**
     * The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
     */
    export interface AssessmentScope {
        /**
         * The AWS accounts included in scope.
         */
        awsAccounts?: outputs.auditmanager.AssessmentAwsAccount[];
        /**
         * The AWS services included in scope.
         */
        awsServices?: outputs.auditmanager.AssessmentAwsService[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AssessmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace autoscaling {
    export interface AutoScalingGroupAcceleratorCountRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupAcceleratorTotalMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupBaselineEbsBandwidthMbpsRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupInstanceMaintenancePolicy {
        maxHealthyPercentage?: number;
        minHealthyPercentage?: number;
    }

    export interface AutoScalingGroupInstanceRequirements {
        acceleratorCount?: outputs.autoscaling.AutoScalingGroupAcceleratorCountRequest;
        acceleratorManufacturers?: string[];
        acceleratorNames?: string[];
        acceleratorTotalMemoryMiB?: outputs.autoscaling.AutoScalingGroupAcceleratorTotalMemoryMiBRequest;
        acceleratorTypes?: string[];
        allowedInstanceTypes?: string[];
        bareMetal?: string;
        baselineEbsBandwidthMbps?: outputs.autoscaling.AutoScalingGroupBaselineEbsBandwidthMbpsRequest;
        burstablePerformance?: string;
        cpuManufacturers?: string[];
        excludedInstanceTypes?: string[];
        instanceGenerations?: string[];
        localStorage?: string;
        localStorageTypes?: string[];
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        memoryGiBPerVCpu?: outputs.autoscaling.AutoScalingGroupMemoryGiBPerVCpuRequest;
        memoryMiB: outputs.autoscaling.AutoScalingGroupMemoryMiBRequest;
        networkBandwidthGbps?: outputs.autoscaling.AutoScalingGroupNetworkBandwidthGbpsRequest;
        networkInterfaceCount?: outputs.autoscaling.AutoScalingGroupNetworkInterfaceCountRequest;
        onDemandMaxPricePercentageOverLowestPrice?: number;
        requireHibernateSupport?: boolean;
        spotMaxPricePercentageOverLowestPrice?: number;
        totalLocalStorageGb?: outputs.autoscaling.AutoScalingGroupTotalLocalStorageGbRequest;
        vCpuCount: outputs.autoscaling.AutoScalingGroupVCpuCountRequest;
    }

    export interface AutoScalingGroupInstancesDistribution {
        onDemandAllocationStrategy?: string;
        onDemandBaseCapacity?: number;
        onDemandPercentageAboveBaseCapacity?: number;
        spotAllocationStrategy?: string;
        spotInstancePools?: number;
        spotMaxPrice?: string;
    }

    export interface AutoScalingGroupLaunchTemplate {
        launchTemplateSpecification: outputs.autoscaling.AutoScalingGroupLaunchTemplateSpecification;
        overrides?: outputs.autoscaling.AutoScalingGroupLaunchTemplateOverrides[];
    }

    export interface AutoScalingGroupLaunchTemplateOverrides {
        instanceRequirements?: outputs.autoscaling.AutoScalingGroupInstanceRequirements;
        instanceType?: string;
        launchTemplateSpecification?: outputs.autoscaling.AutoScalingGroupLaunchTemplateSpecification;
        weightedCapacity?: string;
    }

    export interface AutoScalingGroupLaunchTemplateSpecification {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version: string;
    }

    export interface AutoScalingGroupLifecycleHookSpecification {
        defaultResult?: string;
        heartbeatTimeout?: number;
        lifecycleHookName: string;
        lifecycleTransition: string;
        notificationMetadata?: string;
        notificationTargetArn?: string;
        roleArn?: string;
    }

    export interface AutoScalingGroupMemoryGiBPerVCpuRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupMetricsCollection {
        granularity: string;
        metrics?: string[];
    }

    export interface AutoScalingGroupMixedInstancesPolicy {
        instancesDistribution?: outputs.autoscaling.AutoScalingGroupInstancesDistribution;
        launchTemplate: outputs.autoscaling.AutoScalingGroupLaunchTemplate;
    }

    export interface AutoScalingGroupNetworkBandwidthGbpsRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupNetworkInterfaceCountRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupNotificationConfiguration {
        notificationTypes?: string[];
        topicArn: string;
    }

    export interface AutoScalingGroupTagProperty {
        key: string;
        propagateAtLaunch: boolean;
        value: string;
    }

    export interface AutoScalingGroupTotalLocalStorageGbRequest {
        max?: number;
        min?: number;
    }

    export interface AutoScalingGroupVCpuCountRequest {
        max?: number;
        min?: number;
    }

    /**
     * BlockDevice is a subproperty of BlockDeviceMapping that describes an Amazon EBS volume.
     */
    export interface LaunchConfigurationBlockDevice {
        /**
         * Indicates whether the volume is deleted on instance termination. 
         */
        deleteOnTermination?: boolean;
        /**
         * Specifies whether the volume should be encrypted. 
         */
        encrypted?: boolean;
        /**
         * The number of input/output (I/O) operations per second (IOPS) to provision for the volume. 
         */
        iops?: number;
        /**
         * The snapshot ID of the volume to use.
         */
        snapshotId?: string;
        /**
         * The throughput (MiBps) to provision for a gp3 volume.
         */
        throughput?: number;
        /**
         * The volume size, in GiBs.
         */
        volumeSize?: number;
        /**
         * The volume type.
         */
        volumeType?: string;
    }

    /**
     * BlockDeviceMapping is a property of AWS::AutoScaling::LaunchConfiguration that describes a block device mapping for an Auto Scaling group.
     */
    export interface LaunchConfigurationBlockDeviceMapping {
        /**
         * The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). 
         */
        deviceName: string;
        /**
         * Parameters used to automatically set up EBS volumes when an instance is launched.
         */
        ebs?: outputs.autoscaling.LaunchConfigurationBlockDevice;
        /**
         * Setting this value to true suppresses the specified device included in the block device mapping of the AMI.
         */
        noDevice?: boolean;
        /**
         * The name of the virtual device.
         */
        virtualName?: string;
    }

    /**
     * MetadataOptions is a property of AWS::AutoScaling::LaunchConfiguration that describes metadata options for the instances.
     */
    export interface LaunchConfigurationMetadataOptions {
        /**
         * This parameter enables or disables the HTTP metadata endpoint on your instances.
         */
        httpEndpoint?: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests.
         */
        httpPutResponseHopLimit?: number;
        /**
         * The state of token usage for your instance metadata requests.
         */
        httpTokens?: string;
    }

    export interface ScalingPolicyCustomizedMetricSpecification {
        dimensions?: outputs.autoscaling.ScalingPolicyMetricDimension[];
        metricName: string;
        namespace: string;
        statistic: string;
        unit?: string;
    }

    export interface ScalingPolicyMetric {
        dimensions?: outputs.autoscaling.ScalingPolicyMetricDimension[];
        metricName: string;
        namespace: string;
    }

    export interface ScalingPolicyMetricDataQuery {
        expression?: string;
        id: string;
        label?: string;
        metricStat?: outputs.autoscaling.ScalingPolicyMetricStat;
        returnData?: boolean;
    }

    export interface ScalingPolicyMetricDimension {
        name: string;
        value: string;
    }

    export interface ScalingPolicyMetricStat {
        metric: outputs.autoscaling.ScalingPolicyMetric;
        stat: string;
        unit?: string;
    }

    export interface ScalingPolicyPredefinedMetricSpecification {
        predefinedMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingConfiguration {
        maxCapacityBreachBehavior?: string;
        maxCapacityBuffer?: number;
        metricSpecifications: outputs.autoscaling.ScalingPolicyPredictiveScalingMetricSpecification[];
        mode?: string;
        schedulingBufferTime?: number;
    }

    export interface ScalingPolicyPredictiveScalingCustomizedCapacityMetric {
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingCustomizedLoadMetric {
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingCustomizedScalingMetric {
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingMetricSpecification {
        customizedCapacityMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedCapacityMetric;
        customizedLoadMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedLoadMetric;
        customizedScalingMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedScalingMetric;
        predefinedLoadMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedLoadMetric;
        predefinedMetricPairSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedMetricPair;
        predefinedScalingMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedScalingMetric;
        targetValue: number;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedLoadMetric {
        predefinedMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedMetricPair {
        predefinedMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedScalingMetric {
        predefinedMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPolicyStepAdjustment {
        metricIntervalLowerBound?: number;
        metricIntervalUpperBound?: number;
        scalingAdjustment: number;
    }

    export interface ScalingPolicyTargetTrackingConfiguration {
        customizedMetricSpecification?: outputs.autoscaling.ScalingPolicyCustomizedMetricSpecification;
        disableScaleIn?: boolean;
        predefinedMetricSpecification?: outputs.autoscaling.ScalingPolicyPredefinedMetricSpecification;
        targetValue: number;
    }

    export interface WarmPoolInstanceReusePolicy {
        reuseOnScaleIn?: boolean;
    }

}

export namespace autoscalingplans {
    export interface ScalingPlanApplicationSource {
        cloudFormationStackArn?: string;
        tagFilters?: outputs.autoscalingplans.ScalingPlanTagFilter[];
    }

    export interface ScalingPlanCustomizedLoadMetricSpecification {
        dimensions?: outputs.autoscalingplans.ScalingPlanMetricDimension[];
        metricName: string;
        namespace: string;
        statistic: string;
        unit?: string;
    }

    export interface ScalingPlanCustomizedScalingMetricSpecification {
        dimensions?: outputs.autoscalingplans.ScalingPlanMetricDimension[];
        metricName: string;
        namespace: string;
        statistic: string;
        unit?: string;
    }

    export interface ScalingPlanMetricDimension {
        name: string;
        value: string;
    }

    export interface ScalingPlanPredefinedLoadMetricSpecification {
        predefinedLoadMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPlanPredefinedScalingMetricSpecification {
        predefinedScalingMetricType: string;
        resourceLabel?: string;
    }

    export interface ScalingPlanScalingInstruction {
        customizedLoadMetricSpecification?: outputs.autoscalingplans.ScalingPlanCustomizedLoadMetricSpecification;
        disableDynamicScaling?: boolean;
        maxCapacity: number;
        minCapacity: number;
        predefinedLoadMetricSpecification?: outputs.autoscalingplans.ScalingPlanPredefinedLoadMetricSpecification;
        predictiveScalingMaxCapacityBehavior?: string;
        predictiveScalingMaxCapacityBuffer?: number;
        predictiveScalingMode?: string;
        resourceId: string;
        scalableDimension: string;
        scalingPolicyUpdateBehavior?: string;
        scheduledActionBufferTime?: number;
        serviceNamespace: string;
        targetTrackingConfigurations: outputs.autoscalingplans.ScalingPlanTargetTrackingConfiguration[];
    }

    export interface ScalingPlanTagFilter {
        key: string;
        values?: string[];
    }

    export interface ScalingPlanTargetTrackingConfiguration {
        customizedScalingMetricSpecification?: outputs.autoscalingplans.ScalingPlanCustomizedScalingMetricSpecification;
        disableScaleIn?: boolean;
        estimatedInstanceWarmup?: number;
        predefinedScalingMetricSpecification?: outputs.autoscalingplans.ScalingPlanPredefinedScalingMetricSpecification;
        scaleInCooldown?: number;
        scaleOutCooldown?: number;
        targetValue: number;
    }

}

export namespace b2bi {
    export interface CapabilityConfigurationProperties {
        edi: outputs.b2bi.CapabilityEdiConfiguration;
    }

    export interface CapabilityEdiConfiguration {
        inputLocation: outputs.b2bi.CapabilityS3Location;
        outputLocation: outputs.b2bi.CapabilityS3Location;
        transformerId: string;
        type: outputs.b2bi.CapabilityEdiTypeProperties;
    }

    export interface CapabilityEdiTypeProperties {
        x12Details: outputs.b2bi.CapabilityX12Details;
    }

    export interface CapabilityS3Location {
        bucketName?: string;
        key?: string;
    }

    export interface CapabilityTag {
        key: string;
        value: string;
    }

    export interface CapabilityX12Details {
        transactionSet?: enums.b2bi.CapabilityX12TransactionSet;
        version?: enums.b2bi.CapabilityX12Version;
    }

    export interface PartnershipTag {
        key: string;
        value: string;
    }

    export interface ProfileTag {
        key: string;
        value: string;
    }

    export interface TransformerEdiTypeProperties {
        x12Details: outputs.b2bi.TransformerX12Details;
    }

    export interface TransformerTag {
        key: string;
        value: string;
    }

    export interface TransformerX12Details {
        transactionSet?: enums.b2bi.TransformerX12TransactionSet;
        version?: enums.b2bi.TransformerX12Version;
    }

}

export namespace backup {
    export interface BackupPlanAdvancedBackupSettingResourceType {
        backupOptions: any;
        resourceType: string;
    }

    export interface BackupPlanBackupRuleResourceType {
        completionWindowMinutes?: number;
        copyActions?: outputs.backup.BackupPlanCopyActionResourceType[];
        enableContinuousBackup?: boolean;
        lifecycle?: outputs.backup.BackupPlanLifecycleResourceType;
        recoveryPointTags?: {[key: string]: string};
        ruleName: string;
        scheduleExpression?: string;
        scheduleExpressionTimezone?: string;
        startWindowMinutes?: number;
        targetBackupVault: string;
    }

    export interface BackupPlanCopyActionResourceType {
        destinationBackupVaultArn: string;
        lifecycle?: outputs.backup.BackupPlanLifecycleResourceType;
    }

    export interface BackupPlanLifecycleResourceType {
        deleteAfterDays?: number;
        moveToColdStorageAfterDays?: number;
        optInToArchiveForSupportedResources?: boolean;
    }

    export interface BackupPlanResourceType {
        advancedBackupSettings?: outputs.backup.BackupPlanAdvancedBackupSettingResourceType[];
        backupPlanName: string;
        backupPlanRule: outputs.backup.BackupPlanBackupRuleResourceType[];
    }

    export interface BackupSelectionConditionParameter {
        conditionKey?: string;
        conditionValue?: string;
    }

    export interface BackupSelectionConditionResourceType {
        conditionKey: string;
        conditionType: string;
        conditionValue: string;
    }

    export interface BackupSelectionResourceType {
        conditions?: outputs.backup.BackupSelectionResourceTypeConditionsProperties;
        iamRoleArn: string;
        listOfTags?: outputs.backup.BackupSelectionConditionResourceType[];
        notResources?: string[];
        resources?: string[];
        selectionName: string;
    }

    export interface BackupSelectionResourceTypeConditionsProperties {
        stringEquals?: outputs.backup.BackupSelectionConditionParameter[];
        stringLike?: outputs.backup.BackupSelectionConditionParameter[];
        stringNotEquals?: outputs.backup.BackupSelectionConditionParameter[];
        stringNotLike?: outputs.backup.BackupSelectionConditionParameter[];
    }

    export interface BackupVaultLockConfigurationType {
        changeableForDays?: number;
        maxRetentionDays?: number;
        minRetentionDays: number;
    }

    export interface BackupVaultNotificationObjectType {
        backupVaultEvents: string[];
        snsTopicArn: string;
    }

    export interface FrameworkControl {
        /**
         * A list of ParameterName and ParameterValue pairs.
         */
        controlInputParameters?: outputs.backup.FrameworkControlInputParameter[];
        /**
         * The name of a control. This name is between 1 and 256 characters.
         */
        controlName: string;
        /**
         * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
         */
        controlScope?: outputs.backup.FrameworkControlControlScopeProperties;
    }

    /**
     * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
     */
    export interface FrameworkControlControlScopeProperties {
        /**
         * The ID of the only AWS resource that you want your control scope to contain.
         */
        complianceResourceIds?: string[];
        /**
         * Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
         */
        complianceResourceTypes?: string[];
        /**
         * Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
         */
        tags?: outputs.backup.FrameworkTag[];
    }

    export interface FrameworkControlInputParameter {
        parameterName: string;
        parameterValue: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FrameworkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
     */
    export interface ReportDeliveryChannelProperties {
        /**
         * A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
         */
        formats?: string[];
        /**
         * The unique name of the S3 bucket that receives your reports.
         */
        s3BucketName: string;
        /**
         * The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
         */
        s3KeyPrefix?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ReportPlanTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Identifies the report template for the report. Reports are built using a report template.
     */
    export interface ReportSettingProperties {
        /**
         * The list of AWS accounts that a report covers.
         */
        accounts?: string[];
        /**
         * The Amazon Resource Names (ARNs) of the frameworks a report covers.
         */
        frameworkArns?: string[];
        /**
         * The list of AWS organization units that a report covers.
         */
        organizationUnits?: string[];
        /**
         * The list of AWS regions that a report covers.
         */
        regions?: string[];
        /**
         * Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`
         */
        reportTemplate: string;
    }

    export interface RestoreTestingPlanRestoreTestingRecoveryPointSelection {
        algorithm: enums.backup.RestoreTestingPlanRestoreTestingRecoveryPointSelectionAlgorithm;
        excludeVaults?: string[];
        includeVaults: string[];
        recoveryPointTypes: enums.backup.RestoreTestingPlanRestoreTestingRecoveryPointType[];
        selectionWindowDays?: number;
    }

    export interface RestoreTestingPlanTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface RestoreTestingSelectionKeyValue {
        key: string;
        value: string;
    }

    export interface RestoreTestingSelectionProtectedResourceConditions {
        stringEquals?: outputs.backup.RestoreTestingSelectionKeyValue[];
        stringNotEquals?: outputs.backup.RestoreTestingSelectionKeyValue[];
    }

    export interface RestoreTestingSelectionSensitiveStringMap {
    }

}

export namespace backupgateway {
    export interface HypervisorTag {
        key: string;
        value: string;
    }

}

export namespace batch {
    export interface ComputeEnvironmentComputeResources {
        allocationStrategy?: string;
        bidPercentage?: number;
        desiredvCpus?: number;
        ec2Configuration?: outputs.batch.ComputeEnvironmentEc2ConfigurationObject[];
        ec2KeyPair?: string;
        imageId?: string;
        instanceRole?: string;
        instanceTypes?: string[];
        launchTemplate?: outputs.batch.ComputeEnvironmentLaunchTemplateSpecification;
        maxvCpus: number;
        minvCpus?: number;
        placementGroup?: string;
        securityGroupIds?: string[];
        spotIamFleetRole?: string;
        subnets: string[];
        /**
         * A key-value pair to associate with a resource.
         */
        tags?: {[key: string]: string};
        type: string;
        updateToLatestImageVersion?: boolean;
    }

    export interface ComputeEnvironmentEc2ConfigurationObject {
        imageIdOverride?: string;
        imageKubernetesVersion?: string;
        imageType: string;
    }

    export interface ComputeEnvironmentEksConfiguration {
        eksClusterArn: string;
        kubernetesNamespace: string;
    }

    export interface ComputeEnvironmentLaunchTemplateSpecification {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version?: string;
    }

    export interface ComputeEnvironmentUpdatePolicy {
        jobExecutionTimeoutMinutes?: number;
        terminateJobsOnUpdate?: boolean;
    }

    export interface JobDefinitionAuthorizationConfig {
        accessPointId?: string;
        iam?: string;
    }

    export interface JobDefinitionContainerProperties {
        command?: string[];
        environment?: outputs.batch.JobDefinitionEnvironment[];
        ephemeralStorage?: outputs.batch.JobDefinitionEphemeralStorage;
        executionRoleArn?: string;
        fargatePlatformConfiguration?: outputs.batch.JobDefinitionFargatePlatformConfiguration;
        image: string;
        instanceType?: string;
        jobRoleArn?: string;
        linuxParameters?: outputs.batch.JobDefinitionLinuxParameters;
        logConfiguration?: outputs.batch.JobDefinitionLogConfiguration;
        memory?: number;
        mountPoints?: outputs.batch.JobDefinitionMountPoints[];
        networkConfiguration?: outputs.batch.JobDefinitionNetworkConfiguration;
        privileged?: boolean;
        readonlyRootFilesystem?: boolean;
        resourceRequirements?: outputs.batch.JobDefinitionResourceRequirement[];
        runtimePlatform?: outputs.batch.JobDefinitionRuntimePlatform;
        secrets?: outputs.batch.JobDefinitionSecret[];
        ulimits?: outputs.batch.JobDefinitionUlimit[];
        user?: string;
        vcpus?: number;
        volumes?: outputs.batch.JobDefinitionVolumes[];
    }

    export interface JobDefinitionDevice {
        containerPath?: string;
        hostPath?: string;
        permissions?: string[];
    }

    export interface JobDefinitionEfsVolumeConfiguration {
        authorizationConfig?: outputs.batch.JobDefinitionAuthorizationConfig;
        fileSystemId: string;
        rootDirectory?: string;
        transitEncryption?: string;
        transitEncryptionPort?: number;
    }

    export interface JobDefinitionEksContainer {
        args?: string[];
        command?: string[];
        env?: outputs.batch.JobDefinitionEksContainerEnvironmentVariable[];
        image: string;
        imagePullPolicy?: string;
        name?: string;
        resources?: outputs.batch.JobDefinitionEksContainerResourceRequirements;
        securityContext?: outputs.batch.JobDefinitionEksContainerSecurityContext;
        volumeMounts?: outputs.batch.JobDefinitionEksContainerVolumeMount[];
    }

    export interface JobDefinitionEksContainerEnvironmentVariable {
        name: string;
        value?: string;
    }

    export interface JobDefinitionEksContainerResourceRequirements {
        limits?: any;
        requests?: any;
    }

    export interface JobDefinitionEksContainerSecurityContext {
        privileged?: boolean;
        readOnlyRootFilesystem?: boolean;
        runAsGroup?: number;
        runAsNonRoot?: boolean;
        runAsUser?: number;
    }

    export interface JobDefinitionEksContainerVolumeMount {
        mountPath?: string;
        name?: string;
        readOnly?: boolean;
    }

    export interface JobDefinitionEksEmptyDir {
        medium?: string;
        sizeLimit?: string;
    }

    export interface JobDefinitionEksHostPath {
        path?: string;
    }

    export interface JobDefinitionEksProperties {
        podProperties?: outputs.batch.JobDefinitionPodProperties;
    }

    export interface JobDefinitionEksSecret {
        optional?: boolean;
        secretName: string;
    }

    export interface JobDefinitionEksVolume {
        emptyDir?: outputs.batch.JobDefinitionEksEmptyDir;
        hostPath?: outputs.batch.JobDefinitionEksHostPath;
        name: string;
        secret?: outputs.batch.JobDefinitionEksSecret;
    }

    export interface JobDefinitionEnvironment {
        name?: string;
        value?: string;
    }

    export interface JobDefinitionEphemeralStorage {
        sizeInGiB: number;
    }

    export interface JobDefinitionEvaluateOnExit {
        action: string;
        onExitCode?: string;
        onReason?: string;
        onStatusReason?: string;
    }

    export interface JobDefinitionFargatePlatformConfiguration {
        platformVersion?: string;
    }

    export interface JobDefinitionLinuxParameters {
        devices?: outputs.batch.JobDefinitionDevice[];
        initProcessEnabled?: boolean;
        maxSwap?: number;
        sharedMemorySize?: number;
        swappiness?: number;
        tmpfs?: outputs.batch.JobDefinitionTmpfs[];
    }

    export interface JobDefinitionLogConfiguration {
        logDriver: string;
        options?: any;
        secretOptions?: outputs.batch.JobDefinitionSecret[];
    }

    export interface JobDefinitionMetadata {
        labels?: any;
    }

    export interface JobDefinitionMountPoints {
        containerPath?: string;
        readOnly?: boolean;
        sourceVolume?: string;
    }

    export interface JobDefinitionNetworkConfiguration {
        assignPublicIp?: string;
    }

    export interface JobDefinitionNodeProperties {
        mainNode: number;
        nodeRangeProperties: outputs.batch.JobDefinitionNodeRangeProperty[];
        numNodes: number;
    }

    export interface JobDefinitionNodeRangeProperty {
        container?: outputs.batch.JobDefinitionContainerProperties;
        targetNodes: string;
    }

    export interface JobDefinitionPodProperties {
        containers?: outputs.batch.JobDefinitionEksContainer[];
        dnsPolicy?: string;
        hostNetwork?: boolean;
        metadata?: outputs.batch.JobDefinitionMetadata;
        serviceAccountName?: string;
        volumes?: outputs.batch.JobDefinitionEksVolume[];
    }

    export interface JobDefinitionResourceRequirement {
        type?: string;
        value?: string;
    }

    export interface JobDefinitionRetryStrategy {
        attempts?: number;
        evaluateOnExit?: outputs.batch.JobDefinitionEvaluateOnExit[];
    }

    export interface JobDefinitionRuntimePlatform {
        cpuArchitecture?: string;
        operatingSystemFamily?: string;
    }

    export interface JobDefinitionSecret {
        name: string;
        valueFrom: string;
    }

    export interface JobDefinitionTimeout {
        attemptDurationSeconds?: number;
    }

    export interface JobDefinitionTmpfs {
        containerPath: string;
        mountOptions?: string[];
        size: number;
    }

    export interface JobDefinitionUlimit {
        hardLimit: number;
        name: string;
        softLimit: number;
    }

    export interface JobDefinitionVolumes {
        efsVolumeConfiguration?: outputs.batch.JobDefinitionEfsVolumeConfiguration;
        host?: outputs.batch.JobDefinitionVolumesHost;
        name?: string;
    }

    export interface JobDefinitionVolumesHost {
        sourcePath?: string;
    }

    export interface JobQueueComputeEnvironmentOrder {
        computeEnvironment: string;
        order: number;
    }

    /**
     * Fair Share Policy for the Job Queue.
     */
    export interface SchedulingPolicyFairsharePolicy {
        computeReservation?: number;
        shareDecaySeconds?: number;
        /**
         * List of Share Attributes
         */
        shareDistribution?: outputs.batch.SchedulingPolicyShareAttributes[];
    }

    export interface SchedulingPolicyShareAttributes {
        shareIdentifier?: string;
        weightFactor?: number;
    }

}

export namespace billingconductor {
    export interface BillingGroupAccountGrouping {
        autoAssociate?: boolean;
        linkedAccountIds: string[];
    }

    export interface BillingGroupComputationPreference {
        /**
         * ARN of the attached pricing plan
         */
        pricingPlanArn: string;
    }

    export interface BillingGroupTag {
        key: string;
        value: string;
    }

    export interface CustomLineItemBillingPeriodRange {
        exclusiveEndBillingPeriod?: string;
        inclusiveStartBillingPeriod?: string;
    }

    export interface CustomLineItemChargeDetails {
        flat?: outputs.billingconductor.CustomLineItemFlatChargeDetails;
        lineItemFilters?: outputs.billingconductor.CustomLineItemLineItemFilter[];
        percentage?: outputs.billingconductor.CustomLineItemPercentageChargeDetails;
        type: enums.billingconductor.CustomLineItemType;
    }

    export interface CustomLineItemFlatChargeDetails {
        chargeValue: number;
    }

    export interface CustomLineItemLineItemFilter {
        attribute: enums.billingconductor.CustomLineItemLineItemFilterAttribute;
        matchOption: enums.billingconductor.CustomLineItemLineItemFilterMatchOption;
        values: enums.billingconductor.CustomLineItemLineItemFilterValue[];
    }

    export interface CustomLineItemPercentageChargeDetails {
        childAssociatedResources?: string[];
        percentageValue: number;
    }

    export interface CustomLineItemTag {
        key: string;
        value: string;
    }

    export interface PricingPlanTag {
        key: string;
        value: string;
    }

    /**
     * The possible customizable free tier configurations.
     */
    export interface PricingRuleFreeTier {
        activated: boolean;
    }

    export interface PricingRuleTag {
        key: string;
        value: string;
    }

    /**
     * The set of tiering configurations for the pricing rule.
     */
    export interface TieringProperties {
        freeTier?: outputs.billingconductor.PricingRuleFreeTier;
    }

}

export namespace budgets {
    export interface BudgetAutoAdjustData {
        autoAdjustType: string;
        historicalOptions?: outputs.budgets.BudgetHistoricalOptions;
    }

    export interface BudgetCostTypes {
        includeCredit?: boolean;
        includeDiscount?: boolean;
        includeOtherSubscription?: boolean;
        includeRecurring?: boolean;
        includeRefund?: boolean;
        includeSubscription?: boolean;
        includeSupport?: boolean;
        includeTax?: boolean;
        includeUpfront?: boolean;
        useAmortized?: boolean;
        useBlended?: boolean;
    }

    export interface BudgetData {
        autoAdjustData?: outputs.budgets.BudgetAutoAdjustData;
        budgetLimit?: outputs.budgets.BudgetSpend;
        budgetName?: string;
        budgetType: string;
        costFilters?: any;
        costTypes?: outputs.budgets.BudgetCostTypes;
        plannedBudgetLimits?: any;
        timePeriod?: outputs.budgets.BudgetTimePeriod;
        timeUnit: string;
    }

    export interface BudgetHistoricalOptions {
        budgetAdjustmentPeriod: number;
    }

    export interface BudgetNotification {
        comparisonOperator: string;
        notificationType: string;
        threshold: number;
        thresholdType?: string;
    }

    export interface BudgetNotificationWithSubscribers {
        notification: outputs.budgets.BudgetNotification;
        subscribers: outputs.budgets.BudgetSubscriber[];
    }

    export interface BudgetSpend {
        amount: number;
        unit: string;
    }

    export interface BudgetSubscriber {
        address: string;
        subscriptionType: string;
    }

    export interface BudgetTimePeriod {
        end?: string;
        start?: string;
    }

    export interface BudgetsActionActionThreshold {
        type: enums.budgets.BudgetsActionActionThresholdType;
        value: number;
    }

    export interface BudgetsActionDefinition {
        iamActionDefinition?: outputs.budgets.BudgetsActionIamActionDefinition;
        scpActionDefinition?: outputs.budgets.BudgetsActionScpActionDefinition;
        ssmActionDefinition?: outputs.budgets.BudgetsActionSsmActionDefinition;
    }

    export interface BudgetsActionIamActionDefinition {
        groups?: string[];
        policyArn: string;
        roles?: string[];
        users?: string[];
    }

    export interface BudgetsActionScpActionDefinition {
        policyId: string;
        targetIds: string[];
    }

    export interface BudgetsActionSsmActionDefinition {
        instanceIds: string[];
        region: string;
        subtype: enums.budgets.BudgetsActionSsmActionDefinitionSubtype;
    }

    export interface BudgetsActionSubscriber {
        address: string;
        type: enums.budgets.BudgetsActionSubscriberType;
    }

}

export namespace cassandra {
    export interface KeyspaceReplicationSpecification {
        regionList?: enums.cassandra.KeyspaceRegionListItem[];
        replicationStrategy?: enums.cassandra.KeyspaceReplicationSpecificationReplicationStrategy;
    }

    export interface KeyspaceTag {
        key: string;
        value: string;
    }

    /**
     * Represents configuration for auto scaling.
     */
    export interface TableAutoScalingSetting {
        autoScalingDisabled?: boolean;
        maximumUnits?: number;
        minimumUnits?: number;
        scalingPolicy?: outputs.cassandra.TableScalingPolicy;
    }

    /**
     * Represents the read and write settings used for AutoScaling.
     */
    export interface TableAutoScalingSpecification {
        readCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
        writeCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
    }

    export interface TableBillingMode {
        mode: enums.cassandra.TableMode;
        provisionedThroughput?: outputs.cassandra.TableProvisionedThroughput;
    }

    export interface TableClusteringKeyColumn {
        column: outputs.cassandra.TableColumn;
        orderBy?: enums.cassandra.TableClusteringKeyColumnOrderBy;
    }

    export interface TableColumn {
        columnName: string;
        columnType: string;
    }

    /**
     * Represents the settings used to enable server-side encryption
     */
    export interface TableEncryptionSpecification {
        encryptionType: enums.cassandra.TableEncryptionType;
        kmsKeyIdentifier?: string;
    }

    /**
     * Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
     */
    export interface TableProvisionedThroughput {
        readCapacityUnits: number;
        writeCapacityUnits: number;
    }

    /**
     * Represents replica specifications.
     */
    export interface TableReplicaSpecification {
        readCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
        readCapacityUnits?: number;
        region: string;
    }

    /**
     * Represents scaling policy.
     */
    export interface TableScalingPolicy {
        targetTrackingScalingPolicyConfiguration?: outputs.cassandra.TableTargetTrackingScalingPolicyConfiguration;
    }

    /**
     * A key-value pair to apply to the resource
     */
    export interface TableTag {
        key: string;
        value: string;
    }

    /**
     * Represents configuration for target tracking scaling policy.
     */
    export interface TableTargetTrackingScalingPolicyConfiguration {
        disableScaleIn?: boolean;
        scaleInCooldown?: number;
        scaleOutCooldown?: number;
        targetValue: number;
    }

}

export namespace ce {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AnomalyMonitorResourceTag {
        /**
         * The key name for the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AnomalySubscriptionResourceTag {
        /**
         * The key name for the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface AnomalySubscriptionSubscriber {
        address: string;
        status?: enums.ce.AnomalySubscriptionSubscriberStatus;
        type: enums.ce.AnomalySubscriptionSubscriberType;
    }

}

export namespace certificatemanager {
    export interface AccountExpiryEventsConfiguration {
        daysBeforeExpiry?: number;
    }

    export interface CertificateDomainValidationOption {
        domainName: string;
        hostedZoneId?: string;
        validationDomain?: string;
    }

    export interface CertificateTag {
        key: string;
        value: string;
    }

}

export namespace cleanrooms {
    export interface AnalysisTemplateAnalysisParameter {
        defaultValue?: string;
        name: string;
        type: enums.cleanrooms.AnalysisTemplateAnalysisParameterType;
    }

    export interface AnalysisTemplateAnalysisSchema {
        referencedTables: string[];
    }

    export interface AnalysisTemplateAnalysisSource {
        text: string;
    }

    export interface AnalysisTemplateTag {
        key: string;
        value: string;
    }

    export interface CollaborationDataEncryptionMetadata {
        allowCleartext: boolean;
        allowDuplicates: boolean;
        allowJoinsOnColumnsWithDifferentNames: boolean;
        preserveNulls: boolean;
    }

    export interface CollaborationMemberSpecification {
        accountId: string;
        displayName: string;
        memberAbilities: enums.cleanrooms.CollaborationMemberAbility[];
        paymentConfiguration?: outputs.cleanrooms.CollaborationPaymentConfiguration;
    }

    export interface CollaborationPaymentConfiguration {
        queryCompute: outputs.cleanrooms.CollaborationQueryComputePaymentConfig;
    }

    export interface CollaborationQueryComputePaymentConfig {
        isResponsible: boolean;
    }

    export interface CollaborationTag {
        key: string;
        value: string;
    }

    export interface ConfiguredTableAggregateColumn {
        columnNames: string[];
        function: enums.cleanrooms.ConfiguredTableAggregateFunctionName;
    }

    export interface ConfiguredTableAggregationConstraint {
        columnName: string;
        minimum: number;
        type: enums.cleanrooms.ConfiguredTableAggregationType;
    }

    export interface ConfiguredTableAnalysisRule {
        policy: outputs.cleanrooms.ConfiguredTableAnalysisRulePolicy;
        type: enums.cleanrooms.ConfiguredTableAnalysisRuleType;
    }

    export interface ConfiguredTableAnalysisRuleAggregation {
        aggregateColumns: outputs.cleanrooms.ConfiguredTableAggregateColumn[];
        allowedJoinOperators?: enums.cleanrooms.ConfiguredTableJoinOperator[];
        dimensionColumns: string[];
        joinColumns: string[];
        joinRequired?: enums.cleanrooms.ConfiguredTableJoinRequiredOption;
        outputConstraints: outputs.cleanrooms.ConfiguredTableAggregationConstraint[];
        scalarFunctions: enums.cleanrooms.ConfiguredTableScalarFunctions[];
    }

    export interface ConfiguredTableAnalysisRuleCustom {
        allowedAnalyses: string[];
        allowedAnalysisProviders?: string[];
    }

    export interface ConfiguredTableAnalysisRuleList {
        allowedJoinOperators?: enums.cleanrooms.ConfiguredTableJoinOperator[];
        joinColumns: string[];
        listColumns: string[];
    }

    export interface ConfiguredTableAnalysisRulePolicy {
        v1: outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV10Properties | outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV11Properties | outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV12Properties;
    }

    export interface ConfiguredTableAnalysisRulePolicyV10Properties {
        list: outputs.cleanrooms.ConfiguredTableAnalysisRuleList;
    }

    export interface ConfiguredTableAnalysisRulePolicyV11Properties {
        aggregation: outputs.cleanrooms.ConfiguredTableAnalysisRuleAggregation;
    }

    export interface ConfiguredTableAnalysisRulePolicyV12Properties {
        custom: outputs.cleanrooms.ConfiguredTableAnalysisRuleCustom;
    }

    export interface ConfiguredTableAssociationTag {
        key: string;
        value: string;
    }

    export interface ConfiguredTableGlueTableReference {
        databaseName: string;
        tableName: string;
    }

    export interface ConfiguredTableTableReference {
        glue: outputs.cleanrooms.ConfiguredTableGlueTableReference;
    }

    export interface ConfiguredTableTag {
        key: string;
        value: string;
    }

    export interface MembershipPaymentConfiguration {
        queryCompute: outputs.cleanrooms.MembershipQueryComputePaymentConfig;
    }

    export interface MembershipProtectedQueryOutputConfiguration {
        s3: outputs.cleanrooms.MembershipProtectedQueryS3OutputConfiguration;
    }

    export interface MembershipProtectedQueryResultConfiguration {
        outputConfiguration: outputs.cleanrooms.MembershipProtectedQueryOutputConfiguration;
        roleArn?: string;
    }

    export interface MembershipProtectedQueryS3OutputConfiguration {
        bucket: string;
        keyPrefix?: string;
        resultFormat: enums.cleanrooms.MembershipResultFormat;
    }

    export interface MembershipQueryComputePaymentConfig {
        isResponsible: boolean;
    }

    export interface MembershipTag {
        key: string;
        value: string;
    }

}

export namespace cloud9 {
    export interface EnvironmentEc2Repository {
        pathComponent: string;
        repositoryUrl: string;
    }

    export interface EnvironmentEc2Tag {
        key: string;
        value: string;
    }

}

export namespace cloudformation {
    export interface HookVersionLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

    /**
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     */
    export interface ManagedExecutionProperties {
        active?: boolean;
    }

    export interface ResourceVersionLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

    export interface StackOutput {
        description?: string;
        exportName?: string;
        outputKey?: string;
        outputValue?: string;
    }

    export interface StackSetAutoDeployment {
        /**
         * If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
         */
        enabled?: boolean;
        /**
         * If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
         */
        retainStacksOnAccountRemoval?: boolean;
    }

    /**
     *  The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
     */
    export interface StackSetDeploymentTargets {
        /**
         * The filter type you want to apply on organizational units and accounts.
         */
        accountFilterType?: enums.cloudformation.StackSetDeploymentTargetsAccountFilterType;
        /**
         * AWS accounts that you want to create stack instances in the specified Region(s) for.
         */
        accounts?: string[];
        /**
         * Returns the value of the AccountsUrl property.
         */
        accountsUrl?: string;
        /**
         * The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
         */
        organizationalUnitIds?: string[];
    }

    /**
     * The user-specified preferences for how AWS CloudFormation performs a stack set operation.
     */
    export interface StackSetOperationPreferences {
        failureToleranceCount?: number;
        failureTolerancePercentage?: number;
        maxConcurrentCount?: number;
        maxConcurrentPercentage?: number;
        regionConcurrencyType?: enums.cloudformation.StackSetRegionConcurrencyType;
        regionOrder?: string[];
    }

    export interface StackSetParameter {
        /**
         * The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
         */
        parameterKey: string;
        /**
         * The input value associated with the parameter.
         */
        parameterValue: string;
    }

    /**
     * Stack instances in some specific accounts and Regions.
     */
    export interface StackSetStackInstances {
        deploymentTargets: outputs.cloudformation.StackSetDeploymentTargets;
        /**
         * A list of stack set parameters whose values you want to override in the selected stack instances.
         */
        parameterOverrides?: outputs.cloudformation.StackSetParameter[];
        /**
         * The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
         */
        regions: string[];
    }

    /**
     * Tag type enables you to specify a key-value pair that can be used to store information about an AWS CloudFormation StackSet.
     */
    export interface StackSetTag {
        /**
         * A string used to identify this tag. You can specify a maximum of 127 characters for a tag key.
         */
        key: string;
        /**
         * A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.
         */
        value: string;
    }

    export interface StackTag {
        key: string;
        value: string;
    }

    export interface TypeActivationLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

}

export namespace cloudfront {
    export interface CachePolicyConfig {
        comment?: string;
        defaultTtl: number;
        maxTtl: number;
        minTtl: number;
        name: string;
        parametersInCacheKeyAndForwardedToOrigin: outputs.cloudfront.CachePolicyParametersInCacheKeyAndForwardedToOrigin;
    }

    export interface CachePolicyCookiesConfig {
        cookieBehavior: string;
        cookies?: string[];
    }

    export interface CachePolicyHeadersConfig {
        headerBehavior: string;
        headers?: string[];
    }

    export interface CachePolicyParametersInCacheKeyAndForwardedToOrigin {
        cookiesConfig: outputs.cloudfront.CachePolicyCookiesConfig;
        enableAcceptEncodingBrotli?: boolean;
        enableAcceptEncodingGzip: boolean;
        headersConfig: outputs.cloudfront.CachePolicyHeadersConfig;
        queryStringsConfig: outputs.cloudfront.CachePolicyQueryStringsConfig;
    }

    export interface CachePolicyQueryStringsConfig {
        queryStringBehavior: string;
        queryStrings?: string[];
    }

    export interface CloudFrontOriginAccessIdentityConfig {
        comment: string;
    }

    export interface ContinuousDeploymentPolicyConfig {
        enabled: boolean;
        singleHeaderPolicyConfig?: outputs.cloudfront.ContinuousDeploymentPolicyConfigSingleHeaderPolicyConfigProperties;
        singleWeightPolicyConfig?: outputs.cloudfront.ContinuousDeploymentPolicyConfigSingleWeightPolicyConfigProperties;
        stagingDistributionDnsNames: string[];
        trafficConfig?: outputs.cloudfront.ContinuousDeploymentPolicyTrafficConfig;
        type?: enums.cloudfront.ContinuousDeploymentPolicyConfigType;
    }

    export interface ContinuousDeploymentPolicyConfigSingleHeaderPolicyConfigProperties {
        header: string;
        value: string;
    }

    export interface ContinuousDeploymentPolicyConfigSingleWeightPolicyConfigProperties {
        sessionStickinessConfig?: outputs.cloudfront.ContinuousDeploymentPolicySessionStickinessConfig;
        weight: number;
    }

    export interface ContinuousDeploymentPolicySessionStickinessConfig {
        idleTtl: number;
        maximumTtl: number;
    }

    export interface ContinuousDeploymentPolicySingleHeaderConfig {
        header: string;
        value: string;
    }

    export interface ContinuousDeploymentPolicySingleWeightConfig {
        sessionStickinessConfig?: outputs.cloudfront.ContinuousDeploymentPolicySessionStickinessConfig;
        weight: number;
    }

    export interface ContinuousDeploymentPolicyTrafficConfig {
        singleHeaderConfig?: outputs.cloudfront.ContinuousDeploymentPolicySingleHeaderConfig;
        singleWeightConfig?: outputs.cloudfront.ContinuousDeploymentPolicySingleWeightConfig;
        type: enums.cloudfront.ContinuousDeploymentPolicyTrafficConfigType;
    }

    export interface DistributionCacheBehavior {
        allowedMethods?: string[];
        cachePolicyId?: string;
        cachedMethods?: string[];
        compress?: boolean;
        defaultTtl?: number;
        fieldLevelEncryptionId?: string;
        forwardedValues?: outputs.cloudfront.DistributionForwardedValues;
        functionAssociations?: outputs.cloudfront.DistributionFunctionAssociation[];
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionLambdaFunctionAssociation[];
        maxTtl?: number;
        minTtl?: number;
        originRequestPolicyId?: string;
        pathPattern: string;
        realtimeLogConfigArn?: string;
        responseHeadersPolicyId?: string;
        smoothStreaming?: boolean;
        targetOriginId: string;
        trustedKeyGroups?: string[];
        trustedSigners?: string[];
        viewerProtocolPolicy: string;
    }

    export interface DistributionConfig {
        aliases?: string[];
        cacheBehaviors?: outputs.cloudfront.DistributionCacheBehavior[];
        cnames?: string[];
        comment?: string;
        continuousDeploymentPolicyId?: string;
        customErrorResponses?: outputs.cloudfront.DistributionCustomErrorResponse[];
        customOrigin?: outputs.cloudfront.DistributionLegacyCustomOrigin;
        defaultCacheBehavior: outputs.cloudfront.DistributionDefaultCacheBehavior;
        defaultRootObject?: string;
        enabled: boolean;
        httpVersion?: string;
        ipv6Enabled?: boolean;
        logging?: outputs.cloudfront.DistributionLogging;
        originGroups?: outputs.cloudfront.DistributionOriginGroups;
        origins?: outputs.cloudfront.DistributionOrigin[];
        priceClass?: string;
        restrictions?: outputs.cloudfront.DistributionRestrictions;
        s3Origin?: outputs.cloudfront.DistributionLegacyS3Origin;
        staging?: boolean;
        viewerCertificate?: outputs.cloudfront.DistributionViewerCertificate;
        webAclId?: string;
    }

    export interface DistributionCookies {
        forward: string;
        whitelistedNames?: string[];
    }

    export interface DistributionCustomErrorResponse {
        errorCachingMinTtl?: number;
        errorCode: number;
        responseCode?: number;
        responsePagePath?: string;
    }

    export interface DistributionCustomOriginConfig {
        httpPort?: number;
        httpsPort?: number;
        originKeepaliveTimeout?: number;
        originProtocolPolicy: string;
        originReadTimeout?: number;
        originSslProtocols?: string[];
    }

    export interface DistributionDefaultCacheBehavior {
        allowedMethods?: string[];
        cachePolicyId?: string;
        cachedMethods?: string[];
        compress?: boolean;
        defaultTtl?: number;
        fieldLevelEncryptionId?: string;
        forwardedValues?: outputs.cloudfront.DistributionForwardedValues;
        functionAssociations?: outputs.cloudfront.DistributionFunctionAssociation[];
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionLambdaFunctionAssociation[];
        maxTtl?: number;
        minTtl?: number;
        originRequestPolicyId?: string;
        realtimeLogConfigArn?: string;
        responseHeadersPolicyId?: string;
        smoothStreaming?: boolean;
        targetOriginId: string;
        trustedKeyGroups?: string[];
        trustedSigners?: string[];
        viewerProtocolPolicy: string;
    }

    export interface DistributionForwardedValues {
        cookies?: outputs.cloudfront.DistributionCookies;
        headers?: string[];
        queryString: boolean;
        queryStringCacheKeys?: string[];
    }

    export interface DistributionFunctionAssociation {
        eventType?: string;
        functionArn?: string;
    }

    export interface DistributionGeoRestriction {
        locations?: string[];
        restrictionType: string;
    }

    export interface DistributionLambdaFunctionAssociation {
        eventType?: string;
        includeBody?: boolean;
        lambdaFunctionArn?: string;
    }

    export interface DistributionLegacyCustomOrigin {
        dnsName: string;
        httpPort?: number;
        httpsPort?: number;
        originProtocolPolicy: string;
        originSslProtocols: string[];
    }

    export interface DistributionLegacyS3Origin {
        dnsName: string;
        originAccessIdentity?: string;
    }

    export interface DistributionLogging {
        bucket: string;
        includeCookies?: boolean;
        prefix?: string;
    }

    export interface DistributionOrigin {
        connectionAttempts?: number;
        connectionTimeout?: number;
        customOriginConfig?: outputs.cloudfront.DistributionCustomOriginConfig;
        domainName: string;
        id: string;
        originAccessControlId?: string;
        originCustomHeaders?: outputs.cloudfront.DistributionOriginCustomHeader[];
        originPath?: string;
        originShield?: outputs.cloudfront.DistributionOriginShield;
        s3OriginConfig?: outputs.cloudfront.DistributionS3OriginConfig;
    }

    export interface DistributionOriginCustomHeader {
        headerName: string;
        headerValue: string;
    }

    export interface DistributionOriginGroup {
        failoverCriteria: outputs.cloudfront.DistributionOriginGroupFailoverCriteria;
        id: string;
        members: outputs.cloudfront.DistributionOriginGroupMembers;
    }

    export interface DistributionOriginGroupFailoverCriteria {
        statusCodes: outputs.cloudfront.DistributionStatusCodes;
    }

    export interface DistributionOriginGroupMember {
        originId: string;
    }

    export interface DistributionOriginGroupMembers {
        items: outputs.cloudfront.DistributionOriginGroupMember[];
        quantity: number;
    }

    export interface DistributionOriginGroups {
        items?: outputs.cloudfront.DistributionOriginGroup[];
        quantity: number;
    }

    export interface DistributionOriginShield {
        enabled?: boolean;
        originShieldRegion?: string;
    }

    export interface DistributionRestrictions {
        geoRestriction: outputs.cloudfront.DistributionGeoRestriction;
    }

    export interface DistributionS3OriginConfig {
        originAccessIdentity?: string;
    }

    export interface DistributionStatusCodes {
        items: number[];
        quantity: number;
    }

    export interface DistributionTag {
        key: string;
        value: string;
    }

    export interface DistributionViewerCertificate {
        acmCertificateArn?: string;
        cloudFrontDefaultCertificate?: boolean;
        iamCertificateId?: string;
        minimumProtocolVersion?: string;
        sslSupportMethod?: string;
    }

    export interface FunctionConfig {
        comment: string;
        keyValueStoreAssociations?: outputs.cloudfront.FunctionKeyValueStoreAssociation[];
        runtime: string;
    }

    export interface FunctionKeyValueStoreAssociation {
        keyValueStoreArn: string;
    }

    export interface FunctionMetadata {
        functionArn?: string;
    }

    export interface KeyGroupConfig {
        comment?: string;
        items: string[];
        name: string;
    }

    export interface KeyValueStoreImportSource {
        sourceArn: string;
        sourceType: string;
    }

    export interface MonitoringSubscription {
        realtimeMetricsSubscriptionConfig?: outputs.cloudfront.MonitoringSubscriptionRealtimeMetricsSubscriptionConfig;
    }

    export interface MonitoringSubscriptionRealtimeMetricsSubscriptionConfig {
        realtimeMetricsSubscriptionStatus: enums.cloudfront.MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus;
    }

    export interface OriginAccessControlConfig {
        description?: string;
        name: string;
        originAccessControlOriginType: string;
        signingBehavior: string;
        signingProtocol: string;
    }

    export interface OriginRequestPolicyConfig {
        comment?: string;
        cookiesConfig: outputs.cloudfront.OriginRequestPolicyCookiesConfig;
        headersConfig: outputs.cloudfront.OriginRequestPolicyHeadersConfig;
        name: string;
        queryStringsConfig: outputs.cloudfront.OriginRequestPolicyQueryStringsConfig;
    }

    export interface OriginRequestPolicyCookiesConfig {
        cookieBehavior: string;
        cookies?: string[];
    }

    export interface OriginRequestPolicyHeadersConfig {
        headerBehavior: string;
        headers?: string[];
    }

    export interface OriginRequestPolicyQueryStringsConfig {
        queryStringBehavior: string;
        queryStrings?: string[];
    }

    export interface PublicKeyConfig {
        callerReference: string;
        comment?: string;
        encodedKey: string;
        name: string;
    }

    export interface RealtimeLogConfigEndPoint {
        kinesisStreamConfig: outputs.cloudfront.RealtimeLogConfigKinesisStreamConfig;
        streamType: string;
    }

    export interface RealtimeLogConfigKinesisStreamConfig {
        roleArn: string;
        streamArn: string;
    }

    export interface ResponseHeadersPolicyAccessControlAllowHeaders {
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlAllowMethods {
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlAllowOrigins {
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlExposeHeaders {
        items: string[];
    }

    export interface ResponseHeadersPolicyConfig {
        comment?: string;
        corsConfig?: outputs.cloudfront.ResponseHeadersPolicyCorsConfig;
        customHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyCustomHeadersConfig;
        name: string;
        removeHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyRemoveHeadersConfig;
        securityHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicySecurityHeadersConfig;
        serverTimingHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyServerTimingHeadersConfig;
    }

    export interface ResponseHeadersPolicyContentSecurityPolicy {
        contentSecurityPolicy: string;
        override: boolean;
    }

    export interface ResponseHeadersPolicyContentTypeOptions {
        override: boolean;
    }

    export interface ResponseHeadersPolicyCorsConfig {
        accessControlAllowCredentials: boolean;
        accessControlAllowHeaders: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowHeaders;
        accessControlAllowMethods: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowMethods;
        accessControlAllowOrigins: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowOrigins;
        accessControlExposeHeaders?: outputs.cloudfront.ResponseHeadersPolicyAccessControlExposeHeaders;
        accessControlMaxAgeSec?: number;
        originOverride: boolean;
    }

    export interface ResponseHeadersPolicyCustomHeader {
        header: string;
        override: boolean;
        value: string;
    }

    export interface ResponseHeadersPolicyCustomHeadersConfig {
        items: outputs.cloudfront.ResponseHeadersPolicyCustomHeader[];
    }

    export interface ResponseHeadersPolicyFrameOptions {
        frameOption: string;
        override: boolean;
    }

    export interface ResponseHeadersPolicyReferrerPolicy {
        override: boolean;
        referrerPolicy: string;
    }

    export interface ResponseHeadersPolicyRemoveHeader {
        header: string;
    }

    export interface ResponseHeadersPolicyRemoveHeadersConfig {
        items: outputs.cloudfront.ResponseHeadersPolicyRemoveHeader[];
    }

    export interface ResponseHeadersPolicySecurityHeadersConfig {
        contentSecurityPolicy?: outputs.cloudfront.ResponseHeadersPolicyContentSecurityPolicy;
        contentTypeOptions?: outputs.cloudfront.ResponseHeadersPolicyContentTypeOptions;
        frameOptions?: outputs.cloudfront.ResponseHeadersPolicyFrameOptions;
        referrerPolicy?: outputs.cloudfront.ResponseHeadersPolicyReferrerPolicy;
        strictTransportSecurity?: outputs.cloudfront.ResponseHeadersPolicyStrictTransportSecurity;
        xssProtection?: outputs.cloudfront.ResponseHeadersPolicyXssProtection;
    }

    export interface ResponseHeadersPolicyServerTimingHeadersConfig {
        enabled: boolean;
        samplingRate?: number;
    }

    export interface ResponseHeadersPolicyStrictTransportSecurity {
        accessControlMaxAgeSec: number;
        includeSubdomains?: boolean;
        override: boolean;
        preload?: boolean;
    }

    export interface ResponseHeadersPolicyXssProtection {
        modeBlock?: boolean;
        override: boolean;
        protection: boolean;
        reportUri?: string;
    }

    export interface StreamingDistributionConfig {
        aliases?: string[];
        comment: string;
        enabled: boolean;
        logging?: outputs.cloudfront.StreamingDistributionLogging;
        priceClass?: string;
        s3Origin: outputs.cloudfront.StreamingDistributionS3Origin;
        trustedSigners: outputs.cloudfront.StreamingDistributionTrustedSigners;
    }

    export interface StreamingDistributionLogging {
        bucket: string;
        enabled: boolean;
        prefix: string;
    }

    export interface StreamingDistributionS3Origin {
        domainName: string;
        originAccessIdentity: string;
    }

    export interface StreamingDistributionTag {
        key: string;
        value: string;
    }

    export interface StreamingDistributionTrustedSigners {
        awsAccountNumbers?: string[];
        enabled: boolean;
    }

}

export namespace cloudtrail {
    /**
     * The resource that receives events arriving from a channel.
     */
    export interface ChannelDestination {
        /**
         * The ARN of a resource that receives events from a channel.
         */
        location: string;
        /**
         * The type of destination for events arriving from a channel.
         */
        type: enums.cloudtrail.ChannelDestinationType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ChannelTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
     */
    export interface EventDataStoreAdvancedEventSelector {
        /**
         * Contains all selector statements in an advanced event selector.
         */
        fieldSelectors: outputs.cloudtrail.EventDataStoreAdvancedFieldSelector[];
        /**
         * An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
         */
        name?: string;
    }

    /**
     * A single selector statement in an advanced event selector.
     */
    export interface EventDataStoreAdvancedFieldSelector {
        /**
         * An operator that includes events that match the last few characters of the event record field specified as the value of Field.
         */
        endsWith?: string[];
        /**
         * An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
         */
        equals?: string[];
        /**
         * A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
         */
        field: string;
        /**
         * An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
         */
        notEndsWith?: string[];
        /**
         * An operator that excludes events that match the exact value of the event record field specified as the value of Field.
         */
        notEquals?: string[];
        /**
         * An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
         */
        notStartsWith?: string[];
        /**
         * An operator that includes events that match the first few characters of the event record field specified as the value of Field.
         */
        startsWith?: string[];
    }

    /**
     * A string that contains Insights types that are logged on an event data store.
     */
    export interface EventDataStoreInsightSelector {
        /**
         * The type of Insights to log on an event data store.
         */
        insightType?: string;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this event data store.
     */
    export interface EventDataStoreTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
     */
    export interface TrailAdvancedEventSelector {
        /**
         * Contains all selector statements in an advanced event selector.
         */
        fieldSelectors: outputs.cloudtrail.TrailAdvancedFieldSelector[];
        /**
         * An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
         */
        name?: string;
    }

    /**
     * A single selector statement in an advanced event selector.
     */
    export interface TrailAdvancedFieldSelector {
        /**
         * An operator that includes events that match the last few characters of the event record field specified as the value of Field.
         */
        endsWith?: string[];
        /**
         * An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
         */
        equals?: string[];
        /**
         * A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
         */
        field: string;
        /**
         * An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
         */
        notEndsWith?: string[];
        /**
         * An operator that excludes events that match the exact value of the event record field specified as the value of Field.
         */
        notEquals?: string[];
        /**
         * An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
         */
        notStartsWith?: string[];
        /**
         * An operator that includes events that match the first few characters of the event record field specified as the value of Field.
         */
        startsWith?: string[];
    }

    /**
     * CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
     */
    export interface TrailDataResource {
        /**
         * The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
         */
        type: string;
        /**
         * An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
         */
        values?: string[];
    }

    /**
     * The type of email sending events to publish to the event destination.
     */
    export interface TrailEventSelector {
        dataResources?: outputs.cloudtrail.TrailDataResource[];
        /**
         * An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
         */
        excludeManagementEventSources?: string[];
        /**
         * Specify if you want your event selector to include management events for your trail.
         */
        includeManagementEvents?: boolean;
        /**
         * Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
         */
        readWriteType?: enums.cloudtrail.TrailEventSelectorReadWriteType;
    }

    /**
     * A string that contains insight types that are logged on a trail.
     */
    export interface TrailInsightSelector {
        /**
         * The type of insight to log on a trail.
         */
        insightType?: string;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this trail.
     */
    export interface TrailTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace cloudwatch {
    /**
     * Dimensions are arbitrary name/value pairs that can be associated with a CloudWatch metric.
     */
    export interface AlarmDimension {
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The value for the dimension.
         */
        value: string;
    }

    /**
     * The Metric property type represents a specific metric.
     */
    export interface AlarmMetric {
        /**
         * The dimensions for the metric.
         */
        dimensions?: outputs.cloudwatch.AlarmDimension[];
        /**
         * The name of the metric.
         */
        metricName?: string;
        /**
         * The namespace of the metric.
         */
        namespace?: string;
    }

    /**
     * This property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data.
     */
    export interface AlarmMetricDataQuery {
        /**
         * The ID of the account where the metrics are located, if this is a cross-account alarm.
         */
        accountId?: string;
        /**
         * The math expression to be performed on the returned data.
         */
        expression?: string;
        /**
         * A short name used to tie this object to the results in the response.
         */
        id: string;
        /**
         * A human-readable label for this metric or expression.
         */
        label?: string;
        /**
         * The metric to be returned, along with statistics, period, and units.
         */
        metricStat?: outputs.cloudwatch.AlarmMetricStat;
        /**
         * The period in seconds, over which the statistic is applied.
         */
        period?: number;
        /**
         * This option indicates whether to return the timestamps and raw data values of this metric.
         */
        returnData?: boolean;
    }

    /**
     * This structure defines the metric to be returned, along with the statistics, period, and units.
     */
    export interface AlarmMetricStat {
        /**
         * The metric to return, including the metric name, namespace, and dimensions.
         */
        metric: outputs.cloudwatch.AlarmMetric;
        /**
         * The granularity, in seconds, of the returned data points.
         */
        period: number;
        /**
         * The statistic to return.
         */
        stat: string;
        /**
         * The unit to use for the returned data points.
         */
        unit?: string;
    }

    export interface AnomalyDetectorConfiguration {
        excludedTimeRanges?: outputs.cloudwatch.AnomalyDetectorRange[];
        metricTimeZone?: string;
    }

    export interface AnomalyDetectorDimension {
        name: string;
        value: string;
    }

    export interface AnomalyDetectorMetric {
        dimensions?: outputs.cloudwatch.AnomalyDetectorDimension[];
        metricName: string;
        namespace: string;
    }

    export interface AnomalyDetectorMetricDataQuery {
        accountId?: string;
        expression?: string;
        id: string;
        label?: string;
        metricStat?: outputs.cloudwatch.AnomalyDetectorMetricStat;
        period?: number;
        returnData?: boolean;
    }

    export interface AnomalyDetectorMetricMathAnomalyDetector {
        metricDataQueries?: outputs.cloudwatch.AnomalyDetectorMetricDataQuery[];
    }

    export interface AnomalyDetectorMetricStat {
        metric: outputs.cloudwatch.AnomalyDetectorMetric;
        period: number;
        stat: string;
        unit?: string;
    }

    export interface AnomalyDetectorRange {
        endTime: string;
        startTime: string;
    }

    export interface AnomalyDetectorSingleMetricAnomalyDetector {
        dimensions?: outputs.cloudwatch.AnomalyDetectorDimension[];
        metricName?: string;
        namespace?: string;
        stat?: string;
    }

    export interface InsightRuleTags {
    }

    /**
     * This structure defines the metrics that will be streamed.
     */
    export interface MetricStreamFilter {
        /**
         * Only metrics with MetricNames matching these values will be streamed. Must be set together with Namespace.
         */
        metricNames?: string[];
        /**
         * Only metrics with Namespace matching this value will be streamed.
         */
        namespace: string;
    }

    /**
     * This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for. All metrics that match the combination of metric name and namespace will be streamed with the extended statistics, no matter their dimensions.
     */
    export interface MetricStreamStatisticsConfiguration {
        /**
         * The additional statistics to stream for the metrics listed in IncludeMetrics.
         */
        additionalStatistics: string[];
        /**
         * An array that defines the metrics that are to have additional statistics streamed.
         */
        includeMetrics: outputs.cloudwatch.MetricStreamStatisticsMetric[];
    }

    /**
     * A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
     */
    export interface MetricStreamStatisticsMetric {
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
    }

    /**
     * Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
     */
    export interface MetricStreamTag {
        /**
         * A unique identifier for the tag.
         */
        key: string;
        /**
         * String which you can use to describe or define the tag.
         */
        value: string;
    }

}

export namespace codeartifact {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface DomainTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RepositoryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace codebuild {
    export interface FleetTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ProjectArtifacts {
        artifactIdentifier?: string;
        encryptionDisabled?: boolean;
        location?: string;
        name?: string;
        namespaceType?: string;
        overrideArtifactName?: boolean;
        packaging?: string;
        path?: string;
        type: string;
    }

    export interface ProjectBatchRestrictions {
        computeTypesAllowed?: string[];
        maximumBuildsAllowed?: number;
    }

    export interface ProjectBuildBatchConfig {
        batchReportMode?: string;
        combineArtifacts?: boolean;
        restrictions?: outputs.codebuild.ProjectBatchRestrictions;
        serviceRole?: string;
        timeoutInMins?: number;
    }

    export interface ProjectBuildStatusConfig {
        context?: string;
        targetUrl?: string;
    }

    export interface ProjectCache {
        location?: string;
        modes?: string[];
        type: string;
    }

    export interface ProjectCloudWatchLogsConfig {
        groupName?: string;
        status: string;
        streamName?: string;
    }

    export interface ProjectEnvironment {
        certificate?: string;
        computeType: string;
        environmentVariables?: outputs.codebuild.ProjectEnvironmentVariable[];
        fleet?: outputs.codebuild.ProjectFleet;
        image: string;
        imagePullCredentialsType?: string;
        privilegedMode?: boolean;
        registryCredential?: outputs.codebuild.ProjectRegistryCredential;
        type: string;
    }

    export interface ProjectEnvironmentVariable {
        name: string;
        type?: string;
        value: string;
    }

    export interface ProjectFileSystemLocation {
        identifier: string;
        location: string;
        mountOptions?: string;
        mountPoint: string;
        type: string;
    }

    export interface ProjectFilterGroup {
    }

    export interface ProjectFleet {
        fleetArn?: string;
    }

    export interface ProjectGitSubmodulesConfig {
        fetchSubmodules: boolean;
    }

    export interface ProjectLogsConfig {
        cloudWatchLogs?: outputs.codebuild.ProjectCloudWatchLogsConfig;
        s3Logs?: outputs.codebuild.ProjectS3LogsConfig;
    }

    export interface ProjectRegistryCredential {
        credential: string;
        credentialProvider: string;
    }

    export interface ProjectS3LogsConfig {
        encryptionDisabled?: boolean;
        location?: string;
        status: string;
    }

    export interface ProjectSource {
        auth?: outputs.codebuild.ProjectSourceAuth;
        buildSpec?: string;
        buildStatusConfig?: outputs.codebuild.ProjectBuildStatusConfig;
        gitCloneDepth?: number;
        gitSubmodulesConfig?: outputs.codebuild.ProjectGitSubmodulesConfig;
        insecureSsl?: boolean;
        location?: string;
        reportBuildStatus?: boolean;
        sourceIdentifier?: string;
        type: string;
    }

    export interface ProjectSourceAuth {
        resource?: string;
        type: string;
    }

    export interface ProjectSourceVersion {
        sourceIdentifier: string;
        sourceVersion?: string;
    }

    export interface ProjectTag {
        key: string;
        value: string;
    }

    export interface ProjectTriggers {
        buildType?: string;
        filterGroups?: outputs.codebuild.ProjectFilterGroup[];
        webhook?: boolean;
    }

    export interface ProjectVpcConfig {
        securityGroupIds?: string[];
        subnets?: string[];
        vpcId?: string;
    }

    export interface ReportGroupReportExportConfig {
        exportConfigType: string;
        s3Destination?: outputs.codebuild.ReportGroupS3ReportExportConfig;
    }

    export interface ReportGroupS3ReportExportConfig {
        bucket: string;
        bucketOwner?: string;
        encryptionDisabled?: boolean;
        encryptionKey?: string;
        packaging?: string;
        path?: string;
    }

    export interface ReportGroupTag {
        key: string;
        value: string;
    }

}

export namespace codecommit {
    export interface RepositoryCode {
        branchName?: string;
        s3: outputs.codecommit.RepositoryS3;
    }

    export interface RepositoryS3 {
        bucket: string;
        key: string;
        objectVersion?: string;
    }

    export interface RepositoryTag {
        key: string;
        value: string;
    }

    export interface RepositoryTrigger {
        branches?: string[];
        customData?: string;
        destinationArn: string;
        events: string[];
        name: string;
    }

}

export namespace codedeploy {
    export interface ApplicationTag {
        key: string;
        value: string;
    }

    export interface DeploymentConfigMinimumHealthyHosts {
        type: string;
        value: number;
    }

    export interface DeploymentConfigMinimumHealthyHostsPerZone {
        type: string;
        value: number;
    }

    export interface DeploymentConfigTimeBasedCanary {
        canaryInterval: number;
        canaryPercentage: number;
    }

    export interface DeploymentConfigTimeBasedLinear {
        linearInterval: number;
        linearPercentage: number;
    }

    export interface DeploymentConfigTrafficRoutingConfig {
        timeBasedCanary?: outputs.codedeploy.DeploymentConfigTimeBasedCanary;
        timeBasedLinear?: outputs.codedeploy.DeploymentConfigTimeBasedLinear;
        type: string;
    }

    export interface DeploymentConfigZonalConfig {
        firstZoneMonitorDurationInSeconds?: number;
        minimumHealthyHostsPerZone?: outputs.codedeploy.DeploymentConfigMinimumHealthyHostsPerZone;
        monitorDurationInSeconds?: number;
    }

    export interface DeploymentGroupAlarm {
        name?: string;
    }

    export interface DeploymentGroupAlarmConfiguration {
        alarms?: outputs.codedeploy.DeploymentGroupAlarm[];
        enabled?: boolean;
        ignorePollAlarmFailure?: boolean;
    }

    export interface DeploymentGroupAutoRollbackConfiguration {
        enabled?: boolean;
        events?: string[];
    }

    export interface DeploymentGroupBlueGreenDeploymentConfiguration {
        deploymentReadyOption?: outputs.codedeploy.DeploymentGroupDeploymentReadyOption;
        greenFleetProvisioningOption?: outputs.codedeploy.DeploymentGroupGreenFleetProvisioningOption;
        terminateBlueInstancesOnDeploymentSuccess?: outputs.codedeploy.DeploymentGroupBlueInstanceTerminationOption;
    }

    export interface DeploymentGroupBlueInstanceTerminationOption {
        action?: string;
        terminationWaitTimeInMinutes?: number;
    }

    export interface DeploymentGroupDeployment {
        description?: string;
        ignoreApplicationStopFailures?: boolean;
        revision: outputs.codedeploy.DeploymentGroupRevisionLocation;
    }

    export interface DeploymentGroupDeploymentReadyOption {
        actionOnTimeout?: string;
        waitTimeInMinutes?: number;
    }

    export interface DeploymentGroupDeploymentStyle {
        deploymentOption?: string;
        deploymentType?: string;
    }

    export interface DeploymentGroupEc2TagFilter {
        key?: string;
        type?: string;
        value?: string;
    }

    export interface DeploymentGroupEc2TagSet {
        ec2TagSetList?: outputs.codedeploy.DeploymentGroupEc2TagSetListObject[];
    }

    export interface DeploymentGroupEc2TagSetListObject {
        ec2TagGroup?: outputs.codedeploy.DeploymentGroupEc2TagFilter[];
    }

    export interface DeploymentGroupEcsService {
        clusterName: string;
        serviceName: string;
    }

    export interface DeploymentGroupElbInfo {
        name?: string;
    }

    export interface DeploymentGroupGitHubLocation {
        commitId: string;
        repository: string;
    }

    export interface DeploymentGroupGreenFleetProvisioningOption {
        action?: string;
    }

    export interface DeploymentGroupLoadBalancerInfo {
        elbInfoList?: outputs.codedeploy.DeploymentGroupElbInfo[];
        targetGroupInfoList?: outputs.codedeploy.DeploymentGroupTargetGroupInfo[];
        targetGroupPairInfoList?: outputs.codedeploy.DeploymentGroupTargetGroupPairInfo[];
    }

    export interface DeploymentGroupOnPremisesTagSet {
        onPremisesTagSetList?: outputs.codedeploy.DeploymentGroupOnPremisesTagSetListObject[];
    }

    export interface DeploymentGroupOnPremisesTagSetListObject {
        onPremisesTagGroup?: outputs.codedeploy.DeploymentGroupTagFilter[];
    }

    export interface DeploymentGroupRevisionLocation {
        gitHubLocation?: outputs.codedeploy.DeploymentGroupGitHubLocation;
        revisionType?: string;
        s3Location?: outputs.codedeploy.DeploymentGroupS3Location;
    }

    export interface DeploymentGroupS3Location {
        bucket: string;
        bundleType?: string;
        eTag?: string;
        key: string;
        version?: string;
    }

    export interface DeploymentGroupTag {
        key: string;
        value: string;
    }

    export interface DeploymentGroupTagFilter {
        key?: string;
        type?: string;
        value?: string;
    }

    export interface DeploymentGroupTargetGroupInfo {
        name?: string;
    }

    export interface DeploymentGroupTargetGroupPairInfo {
        prodTrafficRoute?: outputs.codedeploy.DeploymentGroupTrafficRoute;
        targetGroups?: outputs.codedeploy.DeploymentGroupTargetGroupInfo[];
        testTrafficRoute?: outputs.codedeploy.DeploymentGroupTrafficRoute;
    }

    export interface DeploymentGroupTrafficRoute {
        listenerArns?: string[];
    }

    export interface DeploymentGroupTriggerConfig {
        triggerEvents?: string[];
        triggerName?: string;
        triggerTargetArn?: string;
    }

}

export namespace codeguruprofiler {
    /**
     * The agent permissions attached to this profiling group.
     */
    export interface AgentPermissionsProperties {
        /**
         * The principals for the agent permissions.
         */
        principals: string[];
    }

    /**
     * Notification medium for users to get alerted for events that occur in application profile. We support SNS topic as a notification channel.
     */
    export interface ProfilingGroupChannel {
        channelId?: string;
        channelUri: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ProfilingGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
         */
        value: string;
    }

}

export namespace codegurureviewer {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface RepositoryAssociationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
         */
        value: string;
    }

}

export namespace codepipeline {
    /**
     * Returns information about the details of an artifact.
     */
    export interface CustomActionTypeArtifactDetails {
        /**
         * The maximum number of artifacts allowed for the action type.
         */
        maximumCount: number;
        /**
         * The minimum number of artifacts allowed for the action type.
         */
        minimumCount: number;
    }

    /**
     * The configuration properties for the custom action.
     */
    export interface CustomActionTypeConfigurationProperties {
        /**
         * The description of the action configuration property that is displayed to users. 
         */
        description?: string;
        /**
         * Whether the configuration property is a key.
         */
        key: boolean;
        /**
         * The name of the action configuration property.
         */
        name: string;
        /**
         * Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens. 
         */
        queryable?: boolean;
        /**
         * Whether the configuration property is a required value.
         */
        required: boolean;
        /**
         * Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
         */
        secret: boolean;
        /**
         * The type of the configuration property.
         */
        type?: string;
    }

    /**
     * Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action. 
     */
    export interface CustomActionTypeSettings {
        /**
         * The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline. 
         */
        entityUrlTemplate?: string;
        /**
         * The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action. 
         */
        executionUrlTemplate?: string;
        /**
         * The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action. 
         */
        revisionUrlTemplate?: string;
        /**
         * The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
         */
        thirdPartyConfigurationUrl?: string;
    }

    export interface CustomActionTypeTag {
        key: string;
        value: string;
    }

    export interface PipelineActionDeclaration {
        actionTypeId: outputs.codepipeline.PipelineActionTypeId;
        configuration?: any;
        inputArtifacts?: outputs.codepipeline.PipelineInputArtifact[];
        name: string;
        namespace?: string;
        outputArtifacts?: outputs.codepipeline.PipelineOutputArtifact[];
        region?: string;
        roleArn?: string;
        runOrder?: number;
    }

    export interface PipelineActionTypeId {
        category: string;
        owner: string;
        provider: string;
        version: string;
    }

    export interface PipelineArtifactStore {
        encryptionKey?: outputs.codepipeline.PipelineEncryptionKey;
        location: string;
        type: string;
    }

    export interface PipelineArtifactStoreMap {
        artifactStore: outputs.codepipeline.PipelineArtifactStore;
        region: string;
    }

    export interface PipelineBlockerDeclaration {
        name: string;
        type: string;
    }

    export interface PipelineEncryptionKey {
        id: string;
        type: string;
    }

    export interface PipelineGitConfiguration {
        push?: outputs.codepipeline.PipelineGitPushFilter[];
        sourceActionName: string;
    }

    export interface PipelineGitPushFilter {
        tags?: outputs.codepipeline.PipelineGitTagFilterCriteria;
    }

    export interface PipelineGitTagFilterCriteria {
        excludes?: string[];
        includes?: string[];
    }

    export interface PipelineInputArtifact {
        name: string;
    }

    export interface PipelineOutputArtifact {
        name: string;
    }

    export interface PipelineStageDeclaration {
        actions: outputs.codepipeline.PipelineActionDeclaration[];
        blockers?: outputs.codepipeline.PipelineBlockerDeclaration[];
        name: string;
    }

    export interface PipelineStageTransition {
        reason: string;
        stageName: string;
    }

    export interface PipelineTag {
        key: string;
        value: string;
    }

    export interface PipelineTriggerDeclaration {
        gitConfiguration?: outputs.codepipeline.PipelineGitConfiguration;
        providerType: string;
    }

    export interface PipelineVariableDeclaration {
        defaultValue?: string;
        description?: string;
        name: string;
    }

    export interface WebhookAuthConfiguration {
        allowedIpRange?: string;
        secretToken?: string;
    }

    export interface WebhookFilterRule {
        jsonPath: string;
        matchEquals?: string;
    }

}

export namespace codestar {
    export interface GitHubRepositoryCode {
        s3: outputs.codestar.GitHubRepositoryS3;
    }

    export interface GitHubRepositoryS3 {
        bucket: string;
        key: string;
        objectVersion?: string;
    }

}

export namespace codestarconnections {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface ConnectionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RepositoryLinkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, , ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace codestarnotifications {
    export interface NotificationRuleTarget {
        targetAddress: string;
        targetType: string;
    }

}

export namespace cognito {
    export interface IdentityPoolCognitoIdentityProvider {
        clientId: string;
        providerName: string;
        serverSideTokenCheck?: boolean;
    }

    export interface IdentityPoolCognitoStreams {
        roleArn?: string;
        streamName?: string;
        streamingStatus?: string;
    }

    export interface IdentityPoolPushSync {
        applicationArns?: string[];
        roleArn?: string;
    }

    export interface IdentityPoolRoleAttachmentMappingRule {
        claim: string;
        matchType: string;
        roleArn: string;
        value: string;
    }

    export interface IdentityPoolRoleAttachmentRoleMapping {
        ambiguousRoleResolution?: string;
        identityProvider?: string;
        rulesConfiguration?: outputs.cognito.IdentityPoolRoleAttachmentRulesConfigurationType;
        type: string;
    }

    export interface IdentityPoolRoleAttachmentRulesConfigurationType {
        rules: outputs.cognito.IdentityPoolRoleAttachmentMappingRule[];
    }

    export interface LogDeliveryConfigurationCloudWatchLogsConfiguration {
        logGroupArn?: string;
    }

    export interface LogDeliveryConfigurationLogConfiguration {
        cloudWatchLogsConfiguration?: outputs.cognito.LogDeliveryConfigurationCloudWatchLogsConfiguration;
        eventSource?: string;
        logLevel?: string;
    }

    export interface UserPoolAccountRecoverySetting {
        recoveryMechanisms?: outputs.cognito.UserPoolRecoveryOption[];
    }

    export interface UserPoolAddOns {
        advancedSecurityMode?: string;
    }

    export interface UserPoolAdminCreateUserConfig {
        allowAdminCreateUserOnly?: boolean;
        inviteMessageTemplate?: outputs.cognito.UserPoolInviteMessageTemplate;
        unusedAccountValidityDays?: number;
    }

    export interface UserPoolClientAnalyticsConfiguration {
        applicationArn?: string;
        applicationId?: string;
        externalId?: string;
        roleArn?: string;
        userDataShared?: boolean;
    }

    export interface UserPoolClientTokenValidityUnits {
        accessToken?: string;
        idToken?: string;
        refreshToken?: string;
    }

    export interface UserPoolCustomEmailSender {
        lambdaArn?: string;
        lambdaVersion?: string;
    }

    export interface UserPoolCustomSmsSender {
        lambdaArn?: string;
        lambdaVersion?: string;
    }

    export interface UserPoolDeviceConfiguration {
        challengeRequiredOnNewDevice?: boolean;
        deviceOnlyRememberedOnUserPrompt?: boolean;
    }

    export interface UserPoolDomainCustomDomainConfigType {
        certificateArn?: string;
    }

    export interface UserPoolEmailConfiguration {
        configurationSet?: string;
        emailSendingAccount?: string;
        from?: string;
        replyToEmailAddress?: string;
        sourceArn?: string;
    }

    export interface UserPoolInviteMessageTemplate {
        emailMessage?: string;
        emailSubject?: string;
        smsMessage?: string;
    }

    export interface UserPoolLambdaConfig {
        createAuthChallenge?: string;
        customEmailSender?: outputs.cognito.UserPoolCustomEmailSender;
        customMessage?: string;
        customSmsSender?: outputs.cognito.UserPoolCustomSmsSender;
        defineAuthChallenge?: string;
        kmsKeyId?: string;
        postAuthentication?: string;
        postConfirmation?: string;
        preAuthentication?: string;
        preSignUp?: string;
        preTokenGeneration?: string;
        preTokenGenerationConfig?: outputs.cognito.UserPoolPreTokenGenerationConfig;
        userMigration?: string;
        verifyAuthChallengeResponse?: string;
    }

    export interface UserPoolNumberAttributeConstraints {
        maxValue?: string;
        minValue?: string;
    }

    export interface UserPoolPasswordPolicy {
        minimumLength?: number;
        requireLowercase?: boolean;
        requireNumbers?: boolean;
        requireSymbols?: boolean;
        requireUppercase?: boolean;
        temporaryPasswordValidityDays?: number;
    }

    export interface UserPoolPolicies {
        passwordPolicy?: outputs.cognito.UserPoolPasswordPolicy;
    }

    export interface UserPoolPreTokenGenerationConfig {
        lambdaArn?: string;
        lambdaVersion?: string;
    }

    export interface UserPoolRecoveryOption {
        name?: string;
        priority?: number;
    }

    export interface UserPoolResourceServerResourceServerScopeType {
        scopeDescription: string;
        scopeName: string;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverActionType {
        eventAction: string;
        notify: boolean;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType {
        highAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
        lowAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
        mediumAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType {
        actions: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType;
        notifyConfiguration?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyConfigurationType;
    }

    export interface UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType {
        eventAction: string;
    }

    export interface UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType {
        actions: outputs.cognito.UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType;
        eventFilter?: string[];
    }

    export interface UserPoolRiskConfigurationAttachmentNotifyConfigurationType {
        blockEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        from?: string;
        mfaEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        noActionEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        replyTo?: string;
        sourceArn: string;
    }

    export interface UserPoolRiskConfigurationAttachmentNotifyEmailType {
        htmlBody?: string;
        subject: string;
        textBody?: string;
    }

    export interface UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType {
        blockedIpRangeList?: string[];
        skippedIpRangeList?: string[];
    }

    export interface UserPoolSchemaAttribute {
        attributeDataType?: string;
        developerOnlyAttribute?: boolean;
        mutable?: boolean;
        name?: string;
        numberAttributeConstraints?: outputs.cognito.UserPoolNumberAttributeConstraints;
        required?: boolean;
        stringAttributeConstraints?: outputs.cognito.UserPoolStringAttributeConstraints;
    }

    export interface UserPoolSmsConfiguration {
        externalId?: string;
        snsCallerArn?: string;
        snsRegion?: string;
    }

    export interface UserPoolStringAttributeConstraints {
        maxLength?: string;
        minLength?: string;
    }

    export interface UserPoolUserAttributeType {
        name?: string;
        value?: string;
    }

    export interface UserPoolUserAttributeUpdateSettings {
        attributesRequireVerificationBeforeUpdate: string[];
    }

    export interface UserPoolUsernameConfiguration {
        caseSensitive?: boolean;
    }

    export interface UserPoolVerificationMessageTemplate {
        defaultEmailOption?: string;
        emailMessage?: string;
        emailMessageByLink?: string;
        emailSubject?: string;
        emailSubjectByLink?: string;
        smsMessage?: string;
    }

}

export namespace comprehend {
    export interface DocumentClassifierAugmentedManifestsListItem {
        attributeNames: string[];
        s3Uri: string;
        split?: enums.comprehend.DocumentClassifierAugmentedManifestsListItemSplit;
    }

    export interface DocumentClassifierDocumentReaderConfig {
        documentReadAction: enums.comprehend.DocumentClassifierDocumentReaderConfigDocumentReadAction;
        documentReadMode?: enums.comprehend.DocumentClassifierDocumentReaderConfigDocumentReadMode;
        featureTypes?: enums.comprehend.DocumentClassifierDocumentReaderConfigFeatureTypesItem[];
    }

    export interface DocumentClassifierDocuments {
        s3Uri: string;
        testS3Uri?: string;
    }

    export interface DocumentClassifierInputDataConfig {
        augmentedManifests?: outputs.comprehend.DocumentClassifierAugmentedManifestsListItem[];
        dataFormat?: enums.comprehend.DocumentClassifierInputDataConfigDataFormat;
        documentReaderConfig?: outputs.comprehend.DocumentClassifierDocumentReaderConfig;
        documentType?: enums.comprehend.DocumentClassifierInputDataConfigDocumentType;
        documents?: outputs.comprehend.DocumentClassifierDocuments;
        labelDelimiter?: string;
        s3Uri?: string;
        testS3Uri?: string;
    }

    export interface DocumentClassifierOutputDataConfig {
        kmsKeyId?: string;
        s3Uri?: string;
    }

    export interface DocumentClassifierTag {
        key: string;
        value: string;
    }

    export interface DocumentClassifierVpcConfig {
        securityGroupIds: string[];
        subnets: string[];
    }

    export interface FlywheelDataSecurityConfig {
        dataLakeKmsKeyId?: string;
        modelKmsKeyId?: string;
        volumeKmsKeyId?: string;
        vpcConfig?: outputs.comprehend.FlywheelVpcConfig;
    }

    export interface FlywheelDocumentClassificationConfig {
        labels?: string[];
        mode: enums.comprehend.FlywheelDocumentClassificationConfigMode;
    }

    export interface FlywheelEntityRecognitionConfig {
        entityTypes?: outputs.comprehend.FlywheelEntityTypesListItem[];
    }

    export interface FlywheelEntityTypesListItem {
        type: string;
    }

    export interface FlywheelTag {
        key: string;
        value: string;
    }

    export interface FlywheelTaskConfig {
        documentClassificationConfig?: outputs.comprehend.FlywheelDocumentClassificationConfig;
        entityRecognitionConfig?: outputs.comprehend.FlywheelEntityRecognitionConfig;
        languageCode: enums.comprehend.FlywheelTaskConfigLanguageCode;
    }

    export interface FlywheelVpcConfig {
        securityGroupIds: string[];
        subnets: string[];
    }

}

export namespace config {
    /**
     * The configuration for a Provider to assume a role.
     */
    export interface AssumeRole {
        /**
         * Number of seconds to restrict the assume role session duration.
         */
        durationSeconds?: number;
        /**
         * External identifier to use when assuming the role.
         */
        externalId?: string;
        /**
         * IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
         */
        policy?: string;
        /**
         * Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the role.
         */
        policyArns?: string[];
        /**
         * Amazon Resource Name (ARN) of the IAM Role to assume.
         */
        roleArn?: string;
        /**
         * Session name to use when assuming the role.
         */
        sessionName?: string;
        /**
         * Map of assume role session tags.
         */
        tags?: {[key: string]: string};
        /**
         * A list of keys for session tags that you want to set as transitive. If you set a tag key as transitive, the corresponding key and value passes to subsequent sessions in a role chain.
         */
        transitiveTagKeys?: string[];
    }

    /**
     * The configuration with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
     */
    export interface DefaultTags {
        /**
         * A group of tags to set across all resources.
         */
        tags?: {[key: string]: string};
    }

    /**
     * The configuration for for customizing service endpoints.
     */
    export interface Endpoints {
        /**
         * Override the default endpoint for AWS CloudControl
         */
        cloudcontrol?: string;
        /**
         * Override the default endpoint for AWS CloudFormation
         */
        cloudformation?: string;
        /**
         * Override the default endpoint for AWS Elastic Compute Cloud (EC2)
         */
        ec2?: string;
        /**
         * Override the default endpoint for AWS Systems Manager
         */
        ssm?: string;
        /**
         * Override the default endpoint for AWS Security Token Service (STS)
         */
        sts?: string;
    }

    /**
     * The configuration with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
     */
    export interface IgnoreTags {
        /**
         * List of exact resource tag keys to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning the tag in any `tags` attributes and displaying any configuration difference for the tag value. If any resource configuration still has this tag key configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
         */
        keyPrefixes?: string[];
        /**
         * List of resource tag key prefixes to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning any tag key matching the prefixes in any `tags` attributes and displaying any configuration difference for those tag values. If any resource configuration still has a tag matching one of the prefixes configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
         */
        keys?: string[];
    }

}

export namespace configuration {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AggregationAuthorizationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Compliance details of the Config rule
     */
    export interface ComplianceProperties {
        /**
         * Compliance type determined by the Config rule
         */
        type?: string;
    }

    /**
     * Custom policy details when rule is custom owned
     */
    export interface ConfigRuleCustomPolicyDetails {
        /**
         * Logging toggle for custom policy rule
         */
        enableDebugLogDelivery?: boolean;
        /**
         * Runtime system for custom policy rule
         */
        policyRuntime?: string;
        /**
         * Policy definition containing logic for custom policy rule
         */
        policyText?: string;
    }

    /**
     * Evaluation mode for the AWS Config rule
     */
    export interface ConfigRuleEvaluationModeConfiguration {
        /**
         * Mode of evaluation of AWS Config rule
         */
        mode?: string;
    }

    /**
     * Scope to constrain which resources can trigger the rule
     */
    export interface ConfigRuleScope {
        /**
         * ID of the only one resource which we want to trigger the rule
         */
        complianceResourceId?: string;
        /**
         * Resource types of resources which we want to trigger the rule
         */
        complianceResourceTypes?: string[];
        /**
         * Tag key applied only to resources which we want to trigger the rule
         */
        tagKey?: string;
        /**
         * Tag value applied only to resources which we want to trigger the rule
         */
        tagValue?: string;
    }

    /**
     * Source of events for the config rule
     */
    export interface ConfigRuleSource {
        /**
         * Custom policy details when rule is custom owned
         */
        customPolicyDetails?: outputs.configuration.ConfigRuleCustomPolicyDetails;
        /**
         * Owner of the config rule
         */
        owner: string;
        /**
         * List of message types that can trigger the rule
         */
        sourceDetails?: outputs.configuration.ConfigRuleSourceDetail[];
        /**
         * Identifier for the source of events
         */
        sourceIdentifier?: string;
    }

    /**
     * Source and message type that can trigger the rule
     */
    export interface ConfigRuleSourceDetail {
        /**
         * Source of event that can trigger the rule
         */
        eventSource: string;
        /**
         * Frequency at which the rule has to be evaluated
         */
        maximumExecutionFrequency?: string;
        /**
         * Notification type that can trigger the rule
         */
        messageType: string;
    }

    export interface ConfigurationAggregatorAccountAggregationSource {
        accountIds: string[];
        allAwsRegions?: boolean;
        awsRegions?: string[];
    }

    export interface ConfigurationAggregatorOrganizationAggregationSource {
        allAwsRegions?: boolean;
        awsRegions?: string[];
        roleArn: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ConfigurationAggregatorTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ConfigurationRecorderExclusionByResourceTypes {
        resourceTypes: string[];
    }

    export interface ConfigurationRecorderRecordingGroup {
        allSupported?: boolean;
        exclusionByResourceTypes?: outputs.configuration.ConfigurationRecorderExclusionByResourceTypes;
        includeGlobalResourceTypes?: boolean;
        recordingStrategy?: outputs.configuration.ConfigurationRecorderRecordingStrategy;
        resourceTypes?: string[];
    }

    export interface ConfigurationRecorderRecordingMode {
        recordingFrequency: string;
        recordingModeOverrides?: outputs.configuration.ConfigurationRecorderRecordingModeOverride[];
    }

    export interface ConfigurationRecorderRecordingModeOverride {
        description?: string;
        recordingFrequency: string;
        resourceTypes: string[];
    }

    export interface ConfigurationRecorderRecordingStrategy {
        useOnly: string;
    }

    /**
     * Input parameters in the form of key-value pairs for the conformance pack.
     */
    export interface ConformancePackInputParameter {
        parameterName: string;
        parameterValue: string;
    }

    export interface DeliveryChannelConfigSnapshotDeliveryProperties {
        deliveryFrequency?: string;
    }

    export interface OrganizationConfigRuleOrganizationCustomPolicyRuleMetadata {
        debugLogDeliveryAccounts?: string[];
        description?: string;
        inputParameters?: string;
        maximumExecutionFrequency?: string;
        organizationConfigRuleTriggerTypes?: string[];
        policyText: string;
        resourceIdScope?: string;
        resourceTypesScope?: string[];
        runtime: string;
        tagKeyScope?: string;
        tagValueScope?: string;
    }

    export interface OrganizationConfigRuleOrganizationCustomRuleMetadata {
        description?: string;
        inputParameters?: string;
        lambdaFunctionArn: string;
        maximumExecutionFrequency?: string;
        organizationConfigRuleTriggerTypes: string[];
        resourceIdScope?: string;
        resourceTypesScope?: string[];
        tagKeyScope?: string;
        tagValueScope?: string;
    }

    export interface OrganizationConfigRuleOrganizationManagedRuleMetadata {
        description?: string;
        inputParameters?: string;
        maximumExecutionFrequency?: string;
        resourceIdScope?: string;
        resourceTypesScope?: string[];
        ruleIdentifier: string;
        tagKeyScope?: string;
        tagValueScope?: string;
    }

    /**
     * Input parameters in the form of key-value pairs for the conformance pack.
     */
    export interface OrganizationConformancePackConformancePackInputParameter {
        parameterName: string;
        parameterValue: string;
    }

    export interface RemediationConfigurationExecutionControls {
        ssmControls?: outputs.configuration.RemediationConfigurationSsmControls;
    }

    export interface RemediationConfigurationSsmControls {
        concurrentExecutionRatePercentage?: number;
        errorPercentage?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface StoredQueryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
     */
    export interface TemplateSsmDocumentDetailsProperties {
        documentName?: string;
        documentVersion?: string;
    }

}

export namespace connect {
    /**
     * The constraints for the task template
     */
    export interface ConstraintsProperties {
        invisibleFields?: outputs.connect.TaskTemplateInvisibleFieldInfo[];
        readOnlyFields?: outputs.connect.TaskTemplateReadOnlyFieldInfo[];
        requiredFields?: outputs.connect.TaskTemplateRequiredFieldInfo[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ContactFlowModuleTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ContactFlowTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The evaluation form base item.
     */
    export interface EvaluationFormBaseItem {
        /**
         * The evaluation form section item
         */
        section: outputs.connect.EvaluationFormSection;
    }

    /**
     * The evaluation form item.
     */
    export interface EvaluationFormItem {
        /**
         * The evaluation form question item
         */
        question?: outputs.connect.EvaluationFormQuestion;
        /**
         * The evaluation form section item
         */
        section?: outputs.connect.EvaluationFormSection;
    }

    /**
     * The automation properties for the numeric question.
     */
    export interface EvaluationFormNumericQuestionAutomation {
        /**
         * The automation property name of the question.
         */
        propertyValue: outputs.connect.EvaluationFormNumericQuestionPropertyValueAutomation;
    }

    /**
     * The option ranges used for scoring in numeric questions.
     */
    export interface EvaluationFormNumericQuestionOption {
        /**
         * The flag to mark the option as automatic fail.
         */
        automaticFail?: boolean;
        /**
         * The maximum value of the option range.
         */
        maxValue: number;
        /**
         * The minimum value of the option range.
         */
        minValue: number;
        /**
         * The score of the option range.
         */
        score?: number;
    }

    /**
     * The properties of the numeric question.
     */
    export interface EvaluationFormNumericQuestionProperties {
        /**
         * The automation properties for the numeric question.
         */
        automation?: outputs.connect.EvaluationFormNumericQuestionAutomation;
        /**
         * The maximum value for answers of the question.
         */
        maxValue: number;
        /**
         * The minimum value for answers of the question.
         */
        minValue: number;
        /**
         * The list of option ranges used for scoring.
         */
        options?: outputs.connect.EvaluationFormNumericQuestionOption[];
    }

    /**
     * The automation property name of the question.
     */
    export interface EvaluationFormNumericQuestionPropertyValueAutomation {
        /**
         * The automation property label.
         */
        label: enums.connect.EvaluationFormNumericQuestionPropertyValueAutomationLabel;
    }

    /**
     * The evaluation form question.
     */
    export interface EvaluationFormQuestion {
        /**
         * The instructions for the question.
         */
        instructions?: string;
        /**
         * The flag to enable not applicable answers to the question.
         */
        notApplicableEnabled?: boolean;
        /**
         * The type of the question.
         */
        questionType: enums.connect.EvaluationFormQuestionQuestionType;
        /**
         * The properties of the question
         */
        questionTypeProperties?: outputs.connect.EvaluationFormQuestionTypeProperties;
        /**
         * The identifier used to reference the question.
         */
        refId: string;
        /**
         * The title of the question.
         */
        title: string;
        /**
         * The question weight used for scoring.
         */
        weight?: number;
    }

    /**
     * The properties of the question.
     */
    export interface EvaluationFormQuestionTypeProperties {
        /**
         * The properties of the numeric question.
         */
        numeric?: outputs.connect.EvaluationFormNumericQuestionProperties;
        /**
         * The properties of the single-select question.
         */
        singleSelect?: outputs.connect.EvaluationFormSingleSelectQuestionProperties;
    }

    /**
     * The scoring strategy.
     */
    export interface EvaluationFormScoringStrategy {
        /**
         * The scoring mode.
         */
        mode: enums.connect.EvaluationFormScoringStrategyMode;
        /**
         * The scoring status.
         */
        status: enums.connect.EvaluationFormScoringStrategyStatus;
    }

    /**
     * The evaluation form section.
     */
    export interface EvaluationFormSection {
        /**
         * The instructions for the section.
         */
        instructions?: string;
        /**
         * The list of section items.
         */
        items?: outputs.connect.EvaluationFormItem[];
        /**
         * The identifier to reference the section.
         */
        refId: string;
        /**
         * The title of the section.
         */
        title: string;
        /**
         * The item weight used for scoring.
         */
        weight?: number;
    }

    /**
     * The automation properties for the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionAutomation {
        /**
         * The option reference identifier of the default answer.
         */
        defaultOptionRefId?: string;
        /**
         * The answer options for the automation.
         */
        options: outputs.connect.EvaluationFormSingleSelectQuestionAutomationOption[];
    }

    /**
     * The automation option for the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionAutomationOption {
        /**
         * The automation option based on Rules categories.
         */
        ruleCategory: outputs.connect.EvaluationFormSingleSelectQuestionRuleCategoryAutomation;
    }

    /**
     * The option for a question.
     */
    export interface EvaluationFormSingleSelectQuestionOption {
        /**
         * The flag to mark the option as automatic fail.
         */
        automaticFail?: boolean;
        /**
         * The identifier used to reference the option.
         */
        refId: string;
        /**
         * The score of the option.
         */
        score?: number;
        /**
         * The title of the option.
         */
        text: string;
    }

    /**
     * The properties of the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionProperties {
        /**
         * The automation properties for the single-select question.
         */
        automation?: outputs.connect.EvaluationFormSingleSelectQuestionAutomation;
        /**
         * The display mode of the single-select question.
         */
        displayAs?: enums.connect.EvaluationFormSingleSelectQuestionPropertiesDisplayAs;
        /**
         * The list of options for the question.
         */
        options: outputs.connect.EvaluationFormSingleSelectQuestionOption[];
    }

    /**
     * The automation option based on Rules categories.
     */
    export interface EvaluationFormSingleSelectQuestionRuleCategoryAutomation {
        /**
         * The category name as defined in Rules.
         */
        category: string;
        /**
         * The automation condition applied on contact categories.
         */
        condition: enums.connect.EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition;
        /**
         * The option identifier referencing the option to be selected when the automation option is triggered.
         */
        optionRefId: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface EvaluationFormTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that's 1 to 256 characters in length.
         */
        value: string;
    }

    /**
     * Contains information about the hours of operation.
     */
    export interface HoursOfOperationConfig {
        /**
         * The day that the hours of operation applies to.
         */
        day: enums.connect.HoursOfOperationConfigDay;
        /**
         * The end time that your contact center closes.
         */
        endTime: outputs.connect.HoursOfOperationTimeSlice;
        /**
         * The start time that your contact center opens.
         */
        startTime: outputs.connect.HoursOfOperationTimeSlice;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface HoursOfOperationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The start time or end time for an hours of operation.
     */
    export interface HoursOfOperationTimeSlice {
        /**
         * The hours.
         */
        hours: number;
        /**
         * The minutes.
         */
        minutes: number;
    }

    export interface InstanceAttributes {
        autoResolveBestVoices?: boolean;
        contactLens?: boolean;
        contactflowLogs?: boolean;
        earlyMedia?: boolean;
        inboundCalls: boolean;
        outboundCalls: boolean;
        useCustomTtsVoices?: boolean;
    }

    export interface InstanceStorageConfigEncryptionConfig {
        encryptionType: enums.connect.InstanceStorageConfigEncryptionType;
        keyId: string;
    }

    export interface InstanceStorageConfigKinesisFirehoseConfig {
        firehoseArn: string;
    }

    export interface InstanceStorageConfigKinesisStreamConfig {
        streamArn: string;
    }

    export interface InstanceStorageConfigKinesisVideoStreamConfig {
        encryptionConfig: outputs.connect.InstanceStorageConfigEncryptionConfig;
        prefix: string;
        retentionPeriodHours: number;
    }

    export interface InstanceStorageConfigS3Config {
        bucketName: string;
        bucketPrefix: string;
        encryptionConfig?: outputs.connect.InstanceStorageConfigEncryptionConfig;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface InstanceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PhoneNumberTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PromptTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The outbound caller ID name, number, and outbound whisper flow.
     */
    export interface QueueOutboundCallerConfig {
        outboundCallerIdName?: string;
        outboundCallerIdNumberArn?: string;
        outboundFlowArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface QueueTag {
        key: string;
        value: string;
    }

    /**
     * Configuration settings for the quick connect.
     */
    export interface QuickConnectConfig {
        phoneConfig?: outputs.connect.QuickConnectPhoneNumberQuickConnectConfig;
        queueConfig?: outputs.connect.QuickConnectQueueQuickConnectConfig;
        quickConnectType: enums.connect.QuickConnectType;
        userConfig?: outputs.connect.QuickConnectUserQuickConnectConfig;
    }

    /**
     * The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
     */
    export interface QuickConnectPhoneNumberQuickConnectConfig {
        phoneNumber: string;
    }

    /**
     * The queue configuration. This is required only if QuickConnectType is QUEUE.
     */
    export interface QuickConnectQueueQuickConnectConfig {
        contactFlowArn: string;
        queueArn: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface QuickConnectTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The user configuration. This is required only if QuickConnectType is USER.
     */
    export interface QuickConnectUserQuickConnectConfig {
        contactFlowArn: string;
        userArn: string;
    }

    /**
     * Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
     */
    export interface RoutingProfileCrossChannelBehavior {
        behaviorType: enums.connect.RoutingProfileBehaviorType;
    }

    /**
     * Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
     */
    export interface RoutingProfileMediaConcurrency {
        channel: enums.connect.RoutingProfileChannel;
        concurrency: number;
        crossChannelBehavior?: outputs.connect.RoutingProfileCrossChannelBehavior;
    }

    /**
     * Contains information about the queue and channel for which priority and delay can be set.
     */
    export interface RoutingProfileQueueConfig {
        delay: number;
        priority: number;
        queueReference: outputs.connect.RoutingProfileQueueReference;
    }

    /**
     * Contains the channel and queue identifier for a routing profile.
     */
    export interface RoutingProfileQueueReference {
        channel: enums.connect.RoutingProfileChannel;
        queueArn: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RoutingProfileTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The list of actions that will be executed when a rule is triggered.
     */
    export interface RuleActions {
        assignContactCategoryActions?: outputs.connect.RuleAssignContactCategoryAction[];
        createCaseActions?: outputs.connect.RuleCreateCaseAction[];
        endAssociatedTasksActions?: outputs.connect.RuleEndAssociatedTasksAction[];
        eventBridgeActions?: outputs.connect.RuleEventBridgeAction[];
        sendNotificationActions?: outputs.connect.RuleSendNotificationAction[];
        taskActions?: outputs.connect.RuleTaskAction[];
        updateCaseActions?: outputs.connect.RuleUpdateCaseAction[];
    }

    /**
     * The definition for assigning contact category action.
     */
    export interface RuleAssignContactCategoryAction {
    }

    /**
     * The definition for create case action.
     */
    export interface RuleCreateCaseAction {
        fields: outputs.connect.RuleField[];
        /**
         * The Id of template.
         */
        templateId: string;
    }

    /**
     * The definition for ending associated task action.
     */
    export interface RuleEndAssociatedTasksAction {
    }

    /**
     * The definition for event bridge action.
     */
    export interface RuleEventBridgeAction {
        /**
         * The name of the event bridge action.
         */
        name: string;
    }

    /**
     * The field of the case.
     */
    export interface RuleField {
        /**
         * The Id of the field
         */
        id: string;
        value: outputs.connect.RuleFieldValue;
    }

    /**
     * The value of the field.
     */
    export interface RuleFieldValue {
        booleanValue?: boolean;
        doubleValue?: number;
        emptyValue?: any;
        stringValue?: string;
    }

    /**
     * The type of notification recipient.
     */
    export interface RuleNotificationRecipientType {
        /**
         * The list of recipients by user arns.
         */
        userArns?: string[];
        /**
         * The collection of recipients who are identified by user tags
         */
        userTags?: any;
    }

    /**
     * The definition for sending notification action.
     */
    export interface RuleSendNotificationAction {
        /**
         * The content of notification.
         */
        content: string;
        /**
         * The type of content.
         */
        contentType: enums.connect.RuleSendNotificationActionContentType;
        /**
         * The means of delivery.
         */
        deliveryMethod: enums.connect.RuleSendNotificationActionDeliveryMethod;
        recipient: outputs.connect.RuleNotificationRecipientType;
        /**
         * The subject of notification.
         */
        subject?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RuleTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that's 1 to 256 characters in length.
         */
        value: string;
    }

    /**
     * The definition of task action.
     */
    export interface RuleTaskAction {
        /**
         * The Amazon Resource Name (ARN) of the contact flow.
         */
        contactFlowArn: string;
        /**
         * The description which appears in the agent's Contact Control Panel (CCP).
         */
        description?: string;
        /**
         * The name which appears in the agent's Contact Control Panel (CCP).
         */
        name: string;
        /**
         * A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
         */
        references?: any;
    }

    /**
     * The event source that will trigger the rule.
     */
    export interface RuleTriggerEventSource {
        /**
         * The name of event source.
         */
        eventSourceName: enums.connect.RuleTriggerEventSourceEventSourceName;
        /**
         * The Amazon Resource Name (ARN) for the AppIntegration association.
         */
        integrationAssociationArn?: string;
    }

    /**
     * The definition for update case action.
     */
    export interface RuleUpdateCaseAction {
        fields: outputs.connect.RuleField[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SecurityProfileTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * the default value for the task template's field
     */
    export interface TaskTemplateDefaultFieldValue {
        defaultValue: string;
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * A task template field object.
     */
    export interface TaskTemplateField {
        /**
         * The description of the task template's field
         */
        description?: string;
        id: outputs.connect.TaskTemplateFieldIdentifier;
        /**
         * list of field options to be used with single select
         */
        singleSelectOptions?: string[];
        type: enums.connect.TaskTemplateFieldType;
    }

    /**
     * the identifier (name) for the task template field
     */
    export interface TaskTemplateFieldIdentifier {
        /**
         * The name of the task template field
         */
        name: string;
    }

    /**
     * Invisible field info
     */
    export interface TaskTemplateInvisibleFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * ReadOnly field info
     */
    export interface TaskTemplateReadOnlyFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * Required field info
     */
    export interface TaskTemplateRequiredFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TaskTemplateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TrafficDistributionGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserHierarchyGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Contains information about the identity of a user.
     */
    export interface UserIdentityInfo {
        email?: string;
        firstName?: string;
        lastName?: string;
        mobile?: string;
        secondaryEmail?: string;
    }

    /**
     * Contains information about the phone configuration settings for a user.
     */
    export interface UserPhoneConfig {
        afterContactWorkTimeLimit?: number;
        autoAccept?: boolean;
        deskPhoneNumber?: string;
        phoneType: enums.connect.UserPhoneType;
    }

    /**
     * Proficiency of a user.
     */
    export interface UserProficiency {
        attributeName: string;
        attributeValue: string;
        level: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The values of a predefined attribute.
     */
    export interface ValuesProperties {
        stringList?: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ViewTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
         */
        key: string;
        /**
         * The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
         */
        value: string;
    }

}

export namespace connectcampaigns {
    /**
     * Agentless Dialer config
     */
    export interface CampaignAgentlessDialerConfig {
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

    /**
     * The configuration used for answering machine detection during outbound calls
     */
    export interface CampaignAnswerMachineDetectionConfig {
        /**
         * Flag to decided whether outbound calls should have answering machine detection enabled or not
         */
        enableAnswerMachineDetection: boolean;
    }

    /**
     * The possible types of dialer config parameters
     */
    export interface CampaignDialerConfig {
        agentlessDialerConfig?: outputs.connectcampaigns.CampaignAgentlessDialerConfig;
        predictiveDialerConfig?: outputs.connectcampaigns.CampaignPredictiveDialerConfig;
        progressiveDialerConfig?: outputs.connectcampaigns.CampaignProgressiveDialerConfig;
    }

    /**
     * The configuration used for outbound calls.
     */
    export interface CampaignOutboundCallConfig {
        answerMachineDetectionConfig?: outputs.connectcampaigns.CampaignAnswerMachineDetectionConfig;
        /**
         * The identifier of the contact flow for the outbound call.
         */
        connectContactFlowArn: string;
        /**
         * The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
         */
        connectQueueArn?: string;
        /**
         * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
         */
        connectSourcePhoneNumber?: string;
    }

    /**
     * Predictive Dialer config
     */
    export interface CampaignPredictiveDialerConfig {
        /**
         * The bandwidth allocation of a queue resource.
         */
        bandwidthAllocation: number;
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

    /**
     * Progressive Dialer config
     */
    export interface CampaignProgressiveDialerConfig {
        /**
         * The bandwidth allocation of a queue resource.
         */
        bandwidthAllocation: number;
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CampaignTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that's 1 to 256 characters in length.
         */
        value: string;
    }

}

export namespace controltower {
    export interface EnabledControlParameter {
        key: string;
        value: (string | number | any | boolean)[] | string | number | any | boolean;
    }

    export interface LandingZoneTag {
        key?: string;
        value?: string;
    }

}

export namespace customerprofiles {
    /**
     * Mathematical expression and a list of attribute items specified in that expression.
     */
    export interface CalculatedAttributeDefinitionAttributeDetails {
        attributes: outputs.customerprofiles.CalculatedAttributeDefinitionAttributeItem[];
        expression: string;
    }

    /**
     * The details of a single attribute item specified in the mathematical expression.
     */
    export interface CalculatedAttributeDefinitionAttributeItem {
        name: string;
    }

    /**
     * The conditions including range, object count, and threshold for the calculated attribute.
     */
    export interface CalculatedAttributeDefinitionConditions {
        objectCount?: number;
        range?: outputs.customerprofiles.CalculatedAttributeDefinitionRange;
        threshold?: outputs.customerprofiles.CalculatedAttributeDefinitionThreshold;
    }

    /**
     * The relative time period over which data is included in the aggregation.
     */
    export interface CalculatedAttributeDefinitionRange {
        unit: enums.customerprofiles.CalculatedAttributeDefinitionRangeUnit;
        value: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CalculatedAttributeDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The threshold for the calculated attribute.
     */
    export interface CalculatedAttributeDefinitionThreshold {
        operator: enums.customerprofiles.CalculatedAttributeDefinitionThresholdOperator;
        value: string;
    }

    /**
     * Details regarding the Kinesis stream.
     */
    export interface DestinationDetailsProperties {
        status: enums.customerprofiles.EventStreamStatus;
        uri: string;
    }

    /**
     * Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
     */
    export interface DomainAttributeTypesSelector {
        /**
         * The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
         */
        address?: string[];
        /**
         * Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
         */
        attributeMatchingModel: enums.customerprofiles.DomainAttributeTypesSelectorAttributeMatchingModel;
        /**
         * The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
         */
        emailAddress?: string[];
        /**
         * The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
         */
        phoneNumber?: string[];
    }

    /**
     * Configuration information about the auto-merging process.
     */
    export interface DomainAutoMerging {
        conflictResolution?: outputs.customerprofiles.DomainConflictResolution;
        consolidation?: outputs.customerprofiles.DomainConsolidation;
        /**
         * The flag that enables the auto-merging of duplicate profiles.
         */
        enabled: boolean;
        /**
         * A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
         */
        minAllowedConfidenceScoreForMerging?: number;
    }

    /**
     * How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used? 
     */
    export interface DomainConflictResolution {
        /**
         * How the auto-merging process should resolve conflicts between different profiles.
         */
        conflictResolvingModel: enums.customerprofiles.DomainConflictResolutionConflictResolvingModel;
        /**
         * The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
         */
        sourceName?: string;
    }

    /**
     * A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
     */
    export interface DomainConsolidation {
        /**
         * A list of matching criteria.
         */
        matchingAttributesList: string[][];
    }

    /**
     * Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
     */
    export interface DomainExportingConfig {
        s3Exporting?: outputs.customerprofiles.DomainS3ExportingConfig;
    }

    /**
     * The day and time when do you want to start the Identity Resolution Job every week.
     */
    export interface DomainJobSchedule {
        /**
         * The day when the Identity Resolution Job should run every week.
         */
        dayOfTheWeek: enums.customerprofiles.DomainJobScheduleDayOfTheWeek;
        /**
         * The time when the Identity Resolution Job should run every week.
         */
        time: string;
    }

    /**
     * The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
     */
    export interface DomainMatching {
        autoMerging?: outputs.customerprofiles.DomainAutoMerging;
        /**
         * The flag that enables the matching process of duplicate profiles.
         */
        enabled: boolean;
        exportingConfig?: outputs.customerprofiles.DomainExportingConfig;
        jobSchedule?: outputs.customerprofiles.DomainJobSchedule;
    }

    /**
     * Specifies how does the rule-based matching process should match profiles.
     */
    export interface DomainMatchingRule {
        rule: string[];
    }

    /**
     * The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
     */
    export interface DomainRuleBasedMatching {
        attributeTypesSelector?: outputs.customerprofiles.DomainAttributeTypesSelector;
        conflictResolution?: outputs.customerprofiles.DomainConflictResolution;
        /**
         * The flag that enables the rule-based matching process of duplicate profiles.
         */
        enabled: boolean;
        exportingConfig?: outputs.customerprofiles.DomainExportingConfig;
        /**
         * Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
         */
        matchingRules?: outputs.customerprofiles.DomainMatchingRule[];
        /**
         * Indicates the maximum allowed rule level for matching.
         */
        maxAllowedRuleLevelForMatching?: number;
        /**
         * Indicates the maximum allowed rule level for merging.
         */
        maxAllowedRuleLevelForMerging?: number;
        status?: enums.customerprofiles.DomainRuleBasedMatchingStatus;
    }

    /**
     * The S3 location where Identity Resolution Jobs write result files.
     */
    export interface DomainS3ExportingConfig {
        /**
         * The name of the S3 bucket where Identity Resolution Jobs write result files.
         */
        s3BucketName: string;
        /**
         * The S3 key name of the location where Identity Resolution Jobs write result files.
         */
        s3KeyName?: string;
    }

    /**
     * Usage-specific statistics about the domain.
     */
    export interface DomainStats {
        /**
         * The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.
         */
        meteringProfileCount?: number;
        /**
         * The total number of objects in domain.
         */
        objectCount?: number;
        /**
         * The total number of profiles currently in the domain.
         */
        profileCount?: number;
        /**
         * The total size, in bytes, of all objects in the domain.
         */
        totalSize?: number;
    }

    export interface DomainTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface EventStreamTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface IntegrationConnectorOperator {
        marketo?: enums.customerprofiles.IntegrationMarketoConnectorOperator;
        s3?: enums.customerprofiles.IntegrationS3ConnectorOperator;
        salesforce?: enums.customerprofiles.IntegrationSalesforceConnectorOperator;
        serviceNow?: enums.customerprofiles.IntegrationServiceNowConnectorOperator;
        zendesk?: enums.customerprofiles.IntegrationZendeskConnectorOperator;
    }

    export interface IntegrationFlowDefinition {
        description?: string;
        flowName: string;
        kmsArn: string;
        sourceFlowConfig: outputs.customerprofiles.IntegrationSourceFlowConfig;
        tasks: outputs.customerprofiles.IntegrationTask[];
        triggerConfig: outputs.customerprofiles.IntegrationTriggerConfig;
    }

    export interface IntegrationIncrementalPullConfig {
        datetimeTypeFieldName?: string;
    }

    export interface IntegrationMarketoSourceProperties {
        object: string;
    }

    export interface IntegrationObjectTypeMapping {
        key: string;
        value: string;
    }

    export interface IntegrationS3SourceProperties {
        bucketName: string;
        bucketPrefix?: string;
    }

    export interface IntegrationSalesforceSourceProperties {
        enableDynamicFieldUpdate?: boolean;
        includeDeletedRecords?: boolean;
        object: string;
    }

    export interface IntegrationScheduledTriggerProperties {
        dataPullMode?: enums.customerprofiles.IntegrationScheduledTriggerPropertiesDataPullMode;
        firstExecutionFrom?: number;
        scheduleEndTime?: number;
        scheduleExpression: string;
        scheduleOffset?: number;
        scheduleStartTime?: number;
        timezone?: string;
    }

    export interface IntegrationServiceNowSourceProperties {
        object: string;
    }

    export interface IntegrationSourceConnectorProperties {
        marketo?: outputs.customerprofiles.IntegrationMarketoSourceProperties;
        s3?: outputs.customerprofiles.IntegrationS3SourceProperties;
        salesforce?: outputs.customerprofiles.IntegrationSalesforceSourceProperties;
        serviceNow?: outputs.customerprofiles.IntegrationServiceNowSourceProperties;
        zendesk?: outputs.customerprofiles.IntegrationZendeskSourceProperties;
    }

    export interface IntegrationSourceFlowConfig {
        connectorProfileName?: string;
        connectorType: enums.customerprofiles.IntegrationConnectorType;
        incrementalPullConfig?: outputs.customerprofiles.IntegrationIncrementalPullConfig;
        sourceConnectorProperties: outputs.customerprofiles.IntegrationSourceConnectorProperties;
    }

    export interface IntegrationTag {
        key: string;
        value: string;
    }

    export interface IntegrationTask {
        connectorOperator?: outputs.customerprofiles.IntegrationConnectorOperator;
        destinationField?: string;
        sourceFields: string[];
        taskProperties?: outputs.customerprofiles.IntegrationTaskPropertiesMap[];
        taskType: enums.customerprofiles.IntegrationTaskType;
    }

    export interface IntegrationTaskPropertiesMap {
        operatorPropertyKey: enums.customerprofiles.IntegrationOperatorPropertiesKeys;
        property: string;
    }

    export interface IntegrationTriggerConfig {
        triggerProperties?: outputs.customerprofiles.IntegrationTriggerProperties;
        triggerType: enums.customerprofiles.IntegrationTriggerType;
    }

    export interface IntegrationTriggerProperties {
        scheduled?: outputs.customerprofiles.IntegrationScheduledTriggerProperties;
    }

    export interface IntegrationZendeskSourceProperties {
        object: string;
    }

    /**
     * Represents a field in a ProfileObjectType.
     */
    export interface ObjectTypeField {
        /**
         * The content type of the field. Used for determining equality when searching.
         */
        contentType?: enums.customerprofiles.ObjectTypeFieldContentType;
        /**
         * A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
         */
        source?: string;
        /**
         * The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
         */
        target?: string;
    }

    export interface ObjectTypeFieldMap {
        name?: string;
        objectTypeField?: outputs.customerprofiles.ObjectTypeField;
    }

    /**
     * An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
     */
    export interface ObjectTypeKey {
        /**
         * The reference for the key name of the fields map. 
         */
        fieldNames?: string[];
        /**
         * The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
         */
        standardIdentifiers?: enums.customerprofiles.ObjectTypeKeyStandardIdentifiersItem[];
    }

    export interface ObjectTypeKeyMap {
        name?: string;
        objectTypeKeyList?: outputs.customerprofiles.ObjectTypeKey[];
    }

    export interface ObjectTypeTag {
        key: string;
        value: string;
    }

}

export namespace databrew {
    /**
     * Csv options
     */
    export interface DatasetCsvOptions {
        delimiter?: string;
        headerRow?: boolean;
    }

    export interface DatasetDataCatalogInputDefinition {
        /**
         * Catalog id
         */
        catalogId?: string;
        /**
         * Database name
         */
        databaseName?: string;
        /**
         * Table name
         */
        tableName?: string;
        tempDirectory?: outputs.databrew.DatasetS3Location;
    }

    export interface DatasetDatabaseInputDefinition {
        /**
         * Database table name
         */
        databaseTableName?: string;
        /**
         * Glue connection name
         */
        glueConnectionName: string;
        /**
         * Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.
         */
        queryString?: string;
        tempDirectory?: outputs.databrew.DatasetS3Location;
    }

    export interface DatasetDatetimeOptions {
        /**
         * Date/time format of a date parameter
         */
        format: string;
        /**
         * Locale code for a date parameter
         */
        localeCode?: string;
        /**
         * Timezone offset
         */
        timezoneOffset?: string;
    }

    export interface DatasetExcelOptions {
        headerRow?: boolean;
        sheetIndexes?: number[];
        sheetNames?: string[];
    }

    export interface DatasetFilesLimit {
        /**
         * Maximum number of files
         */
        maxFiles: number;
        /**
         * Order
         */
        order?: enums.databrew.DatasetFilesLimitOrder;
        /**
         * Ordered by
         */
        orderedBy?: enums.databrew.DatasetFilesLimitOrderedBy;
    }

    export interface DatasetFilterExpression {
        /**
         * Filtering expression for a parameter
         */
        expression: string;
        valuesMap: outputs.databrew.DatasetFilterValue[];
    }

    /**
     * A key-value pair to associate expression variable names with their values
     */
    export interface DatasetFilterValue {
        value: string;
        /**
         * Variable name
         */
        valueReference: string;
    }

    /**
     * Format options for dataset
     */
    export interface DatasetFormatOptions {
        csv?: outputs.databrew.DatasetCsvOptions;
        excel?: outputs.databrew.DatasetExcelOptions;
        json?: outputs.databrew.DatasetJsonOptions;
    }

    /**
     * Input
     */
    export interface DatasetInput {
        dataCatalogInputDefinition?: outputs.databrew.DatasetDataCatalogInputDefinition;
        databaseInputDefinition?: outputs.databrew.DatasetDatabaseInputDefinition;
        metadata?: outputs.databrew.DatasetMetadata;
        s3InputDefinition?: outputs.databrew.DatasetS3Location;
    }

    /**
     * Json options
     */
    export interface DatasetJsonOptions {
        multiLine?: boolean;
    }

    export interface DatasetMetadata {
        /**
         * Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.
         */
        sourceArn?: string;
    }

    export interface DatasetParameter {
        /**
         * Add the value of this parameter as a column in a dataset.
         */
        createColumn?: boolean;
        datetimeOptions?: outputs.databrew.DatasetDatetimeOptions;
        filter?: outputs.databrew.DatasetFilterExpression;
        name: string;
        /**
         * Parameter type
         */
        type: enums.databrew.DatasetParameterType;
    }

    /**
     * Path options for dataset
     */
    export interface DatasetPathOptions {
        filesLimit?: outputs.databrew.DatasetFilesLimit;
        lastModifiedDateCondition?: outputs.databrew.DatasetFilterExpression;
        parameters?: outputs.databrew.DatasetPathParameter[];
    }

    /**
     * A key-value pair to associate dataset parameter name with its definition.
     */
    export interface DatasetPathParameter {
        datasetParameter: outputs.databrew.DatasetParameter;
        pathParameterName: string;
    }

    /**
     * Input location
     */
    export interface DatasetS3Location {
        bucket: string;
        key?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DatasetTag {
        key: string;
        value: string;
    }

    export interface JobAllowedStatistics {
        statistics: string[];
    }

    export interface JobColumnSelector {
        name?: string;
        regex?: string;
    }

    export interface JobColumnStatisticsConfiguration {
        selectors?: outputs.databrew.JobColumnSelector[];
        statistics: outputs.databrew.JobStatisticsConfiguration;
    }

    /**
     * Output Csv options
     */
    export interface JobCsvOutputOptions {
        delimiter?: string;
    }

    export interface JobDataCatalogOutput {
        catalogId?: string;
        databaseName: string;
        databaseOptions?: outputs.databrew.JobDatabaseTableOutputOptions;
        overwrite?: boolean;
        s3Options?: outputs.databrew.JobS3TableOutputOptions;
        tableName: string;
    }

    export interface JobDatabaseOutput {
        databaseOptions: outputs.databrew.JobDatabaseTableOutputOptions;
        /**
         * Database table name
         */
        databaseOutputMode?: enums.databrew.JobDatabaseOutputDatabaseOutputMode;
        /**
         * Glue connection name
         */
        glueConnectionName: string;
    }

    export interface JobDatabaseTableOutputOptions {
        tableName: string;
        tempDirectory?: outputs.databrew.JobS3Location;
    }

    export interface JobEntityDetectorConfiguration {
        allowedStatistics?: outputs.databrew.JobAllowedStatistics;
        entityTypes: string[];
    }

    export interface JobOutput {
        compressionFormat?: enums.databrew.JobOutputCompressionFormat;
        format?: enums.databrew.JobOutputFormat;
        formatOptions?: outputs.databrew.JobOutputFormatOptions;
        location: outputs.databrew.JobS3Location;
        maxOutputFiles?: number;
        overwrite?: boolean;
        partitionColumns?: string[];
    }

    /**
     * Format options for job Output
     */
    export interface JobOutputFormatOptions {
        csv?: outputs.databrew.JobCsvOutputOptions;
    }

    /**
     * Output location
     */
    export interface JobOutputLocation {
        bucket: string;
        bucketOwner?: string;
        key?: string;
    }

    export interface JobParameterMap {
    }

    export interface JobProfileConfiguration {
        columnStatisticsConfigurations?: outputs.databrew.JobColumnStatisticsConfiguration[];
        datasetStatisticsConfiguration?: outputs.databrew.JobStatisticsConfiguration;
        entityDetectorConfiguration?: outputs.databrew.JobEntityDetectorConfiguration;
        profileColumns?: outputs.databrew.JobColumnSelector[];
    }

    export interface JobRecipe {
        /**
         * Recipe name
         */
        name: string;
        /**
         * Recipe version
         */
        version?: string;
    }

    /**
     * S3 Output location
     */
    export interface JobS3Location {
        bucket: string;
        bucketOwner?: string;
        key?: string;
    }

    export interface JobS3TableOutputOptions {
        location: outputs.databrew.JobS3Location;
    }

    /**
     * Job Sample
     */
    export interface JobSample {
        mode?: enums.databrew.JobSampleMode;
        size?: number;
    }

    export interface JobStatisticOverride {
        parameters: outputs.databrew.JobParameterMap;
        statistic: string;
    }

    export interface JobStatisticsConfiguration {
        includedStatistics?: string[];
        overrides?: outputs.databrew.JobStatisticOverride[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface JobTag {
        key: string;
        value: string;
    }

    /**
     * Configuration to attach Rulesets to the job
     */
    export interface JobValidationConfiguration {
        /**
         * Arn of the Ruleset
         */
        rulesetArn: string;
        validationMode?: enums.databrew.JobValidationMode;
    }

    export interface ProjectSample {
        /**
         * Sample size
         */
        size?: number;
        /**
         * Sample type
         */
        type: enums.databrew.ProjectSampleType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ProjectTag {
        key: string;
        value: string;
    }

    export interface RecipeAction {
        /**
         * Step action operation
         */
        operation: string;
        parameters?: outputs.databrew.RecipeParameters | outputs.databrew.RecipeParameterMap;
    }

    /**
     * Condition expressions applied to the step action
     */
    export interface RecipeConditionExpression {
        /**
         * Input condition to be applied to the target column
         */
        condition: string;
        /**
         * Name of the target column
         */
        targetColumn: string;
        /**
         * Value of the condition
         */
        value?: string;
    }

    export interface RecipeDataCatalogInputDefinition {
        /**
         * Catalog id
         */
        catalogId?: string;
        /**
         * Database name
         */
        databaseName?: string;
        /**
         * Table name
         */
        tableName?: string;
        tempDirectory?: outputs.databrew.RecipeS3Location;
    }

    export interface RecipeParameterMap {
    }

    export interface RecipeParameters {
        aggregateFunction?: string;
        base?: string;
        caseStatement?: string;
        categoryMap?: string;
        charsToRemove?: string;
        collapseConsecutiveWhitespace?: string;
        columnDataType?: string;
        columnRange?: string;
        count?: string;
        customCharacters?: string;
        customStopWords?: string;
        customValue?: string;
        datasetsColumns?: string;
        dateAddValue?: string;
        dateTimeFormat?: string;
        dateTimeParameters?: string;
        deleteOtherRows?: string;
        delimiter?: string;
        endPattern?: string;
        endPosition?: string;
        endValue?: string;
        expandContractions?: string;
        exponent?: string;
        falseString?: string;
        groupByAggFunctionOptions?: string;
        groupByColumns?: string;
        hiddenColumns?: string;
        ignoreCase?: string;
        includeInSplit?: string;
        /**
         * Input
         */
        input?: outputs.databrew.RecipeParametersInputProperties;
        interval?: string;
        isText?: string;
        joinKeys?: string;
        joinType?: string;
        leftColumns?: string;
        limit?: string;
        lowerBound?: string;
        mapType?: string;
        modeType?: string;
        multiLine?: boolean;
        numRows?: string;
        numRowsAfter?: string;
        numRowsBefore?: string;
        orderByColumn?: string;
        orderByColumns?: string;
        other?: string;
        pattern?: string;
        patternOption1?: string;
        patternOption2?: string;
        patternOptions?: string;
        period?: string;
        position?: string;
        removeAllPunctuation?: string;
        removeAllQuotes?: string;
        removeAllWhitespace?: string;
        removeCustomCharacters?: string;
        removeCustomValue?: string;
        removeLeadingAndTrailingPunctuation?: string;
        removeLeadingAndTrailingQuotes?: string;
        removeLeadingAndTrailingWhitespace?: string;
        removeLetters?: string;
        removeNumbers?: string;
        removeSourceColumn?: string;
        removeSpecialCharacters?: string;
        rightColumns?: string;
        sampleSize?: string;
        sampleType?: string;
        secondInput?: string;
        secondaryInputs?: outputs.databrew.RecipeSecondaryInput[];
        sheetIndexes?: number[];
        sheetNames?: string[];
        sourceColumn?: string;
        sourceColumn1?: string;
        sourceColumn2?: string;
        sourceColumns?: string;
        startColumnIndex?: string;
        startPattern?: string;
        startPosition?: string;
        startValue?: string;
        stemmingMode?: string;
        stepCount?: string;
        stepIndex?: string;
        stopWordsMode?: string;
        strategy?: string;
        targetColumn?: string;
        targetColumnNames?: string;
        targetDateFormat?: string;
        targetIndex?: string;
        timeZone?: string;
        tokenizerPattern?: string;
        trueString?: string;
        udfLang?: string;
        units?: string;
        unpivotColumn?: string;
        upperBound?: string;
        useNewDataFrame?: string;
        value?: string;
        value1?: string;
        value2?: string;
        valueColumn?: string;
        viewFrame?: string;
    }

    /**
     * Input
     */
    export interface RecipeParametersInputProperties {
        dataCatalogInputDefinition?: outputs.databrew.RecipeDataCatalogInputDefinition;
        s3InputDefinition?: outputs.databrew.RecipeS3Location;
    }

    /**
     * Input location
     */
    export interface RecipeS3Location {
        bucket: string;
        key?: string;
    }

    /**
     * Secondary input
     */
    export interface RecipeSecondaryInput {
        dataCatalogInputDefinition?: outputs.databrew.RecipeDataCatalogInputDefinition;
        s3InputDefinition?: outputs.databrew.RecipeS3Location;
    }

    export interface RecipeStep {
        action: outputs.databrew.RecipeAction;
        /**
         * Condition expressions applied to the step action
         */
        conditionExpressions?: outputs.databrew.RecipeConditionExpression[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RecipeTag {
        key: string;
        value: string;
    }

    /**
     * Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression
     */
    export interface RulesetColumnSelector {
        /**
         * The name of a column from a dataset
         */
        name?: string;
        /**
         * A regular expression for selecting a column from a dataset
         */
        regex?: string;
    }

    /**
     * Data quality rule for a target resource (dataset)
     */
    export interface RulesetRule {
        checkExpression: string;
        columnSelectors?: outputs.databrew.RulesetColumnSelector[];
        disabled?: boolean;
        /**
         * Name of the rule
         */
        name: string;
        substitutionMap?: outputs.databrew.RulesetSubstitutionValue[];
        threshold?: outputs.databrew.RulesetThreshold;
    }

    /**
     * A key-value pair to associate expression's substitution variable names with their values
     */
    export interface RulesetSubstitutionValue {
        /**
         * Value or column name
         */
        value: string;
        /**
         * Variable name
         */
        valueReference: string;
    }

    /**
     * A key-value pair to associate with a resource
     */
    export interface RulesetTag {
        key: string;
        value: string;
    }

    export interface RulesetThreshold {
        type?: enums.databrew.RulesetThresholdType;
        unit?: enums.databrew.RulesetThresholdUnit;
        value: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ScheduleTag {
        key: string;
        value: string;
    }

}

export namespace datapipeline {
    export interface PipelineField {
        /**
         * Specifies the name of a field for a particular object. To view valid values for a particular field, see Pipeline Object Reference in the AWS Data Pipeline Developer Guide.
         */
        key: string;
        /**
         * A field value that you specify as an identifier of another object in the same pipeline definition.
         */
        refValue?: string;
        /**
         * A field value that you specify as a string. To view valid values for a particular field, see Pipeline Object Reference in the AWS Data Pipeline Developer Guide.
         */
        stringValue?: string;
    }

    export interface PipelineObject {
        /**
         * Key-value pairs that define the properties of the object.
         */
        fields: outputs.datapipeline.PipelineField[];
        /**
         * The ID of the object.
         */
        id: string;
        /**
         * The name of the object.
         */
        name: string;
    }

    export interface PipelineParameterAttribute {
        /**
         * The field identifier.
         */
        key: string;
        /**
         * The field value, expressed as a String.
         */
        stringValue: string;
    }

    export interface PipelineParameterObject {
        /**
         * The attributes of the parameter object.
         */
        attributes: outputs.datapipeline.PipelineParameterAttribute[];
        /**
         * The ID of the parameter object.
         */
        id: string;
    }

    export interface PipelineParameterValue {
        /**
         * The ID of the parameter value.
         */
        id: string;
        /**
         * The field value, expressed as a String.
         */
        stringValue: string;
    }

    export interface PipelineTag {
        /**
         * The key name of a tag.
         */
        key: string;
        /**
         * The value to associate with the key name.
         */
        value: string;
    }

}

export namespace datasync {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AgentTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * Specifies the shared access signature (SAS) that DataSync uses to access your Azure Blob Storage container.
     */
    export interface LocationAzureBlobAzureBlobSasConfiguration {
        /**
         * Specifies the shared access signature (SAS) token, which indicates the permissions DataSync needs to access your Azure Blob Storage container.
         */
        azureBlobSasToken: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationAzureBlobTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * The subnet and security group that DataSync uses to access target EFS file system.
     */
    export interface LocationEfsEc2Config {
        /**
         * The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
         */
        securityGroupArns: string[];
        /**
         * The ARN of the subnet that DataSync uses to access the target EFS file system.
         */
        subnetArn: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationEfsTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationFSxLustreTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * NFS protocol configuration for FSx ONTAP file system.
     */
    export interface LocationFSxOntapNfs {
        mountOptions: outputs.datasync.LocationFSxOntapNfsMountOptions;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationFSxOntapNfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationFSxOntapNfsMountOptionsVersion;
    }

    /**
     * Configuration settings for NFS or SMB protocol.
     */
    export interface LocationFSxOntapProtocol {
        nfs?: outputs.datasync.LocationFSxOntapNfs;
        smb?: outputs.datasync.LocationFSxOntapSmb;
    }

    /**
     * SMB protocol configuration for FSx ONTAP file system.
     */
    export interface LocationFSxOntapSmb {
        /**
         * The name of the Windows domain that the SMB server belongs to.
         */
        domain?: string;
        mountOptions: outputs.datasync.LocationFSxOntapSmbMountOptions;
        /**
         * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
         */
        password: string;
        /**
         * The user who can mount the share, has the permissions to access files and folders in the SMB share.
         */
        user: string;
    }

    /**
     * The mount options used by DataSync to access the SMB server.
     */
    export interface LocationFSxOntapSmbMountOptions {
        /**
         * The specific SMB version that you want DataSync to use to mount your SMB share.
         */
        version?: enums.datasync.LocationFSxOntapSmbMountOptionsVersion;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationFSxOntapTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationFSxOpenZfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationFSxOpenZfsMountOptionsVersion;
    }

    /**
     * FSx OpenZFS file system NFS protocol information
     */
    export interface LocationFSxOpenZfsNfs {
        mountOptions: outputs.datasync.LocationFSxOpenZfsMountOptions;
    }

    /**
     * Configuration settings for an NFS or SMB protocol, currently only support NFS
     */
    export interface LocationFSxOpenZfsProtocol {
        nfs?: outputs.datasync.LocationFSxOpenZfsNfs;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationFSxOpenZfsTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationFSxWindowsTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * HDFS Name Node IP and port information.
     */
    export interface LocationHdfsNameNode {
        /**
         * The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
         */
        hostname: string;
        /**
         * The port on which the Name Node is listening on for client requests.
         */
        port: number;
    }

    /**
     * Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
     */
    export interface LocationHdfsQopConfiguration {
        /**
         * Configuration for Data Transfer Protection.
         */
        dataTransferProtection?: enums.datasync.LocationHdfsQopConfigurationDataTransferProtection;
        /**
         * Configuration for RPC Protection.
         */
        rpcProtection?: enums.datasync.LocationHdfsQopConfigurationRpcProtection;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationHdfsTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationNfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationNfsMountOptionsVersion;
    }

    /**
     * Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
     */
    export interface LocationNfsOnPremConfig {
        /**
         * ARN(s) of the agent(s) to use for an NFS location.
         */
        agentArns: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationNfsTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationObjectStorageTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationS3Tag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
     */
    export interface LocationS3s3Config {
        /**
         * The ARN of the IAM role of the Amazon S3 bucket.
         */
        bucketAccessRoleArn: string;
    }

    /**
     * The mount options used by DataSync to access the SMB server.
     */
    export interface LocationSmbMountOptions {
        /**
         * The specific SMB version that you want DataSync to use to mount your SMB share.
         */
        version?: enums.datasync.LocationSmbMountOptionsVersion;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationSmbTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * The server name and network port required to connect with the management interface of the on-premises storage system.
     */
    export interface StorageSystemServerConfiguration {
        /**
         * The domain name or IP address of the storage system's management interface.
         */
        serverHostname: string;
        /**
         * The network port needed to access the system's management interface
         */
        serverPort?: number;
    }

    /**
     * The username and password for accessing your on-premises storage system's management interface.
     */
    export interface StorageSystemServerCredentials {
        /**
         * The password for your storage system's management interface
         */
        password: string;
        /**
         * The username for your storage system's management interface.
         */
        username: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface StorageSystemTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

    /**
     * Specifies which files folders and objects to include or exclude when transferring files from source to destination.
     */
    export interface TaskFilterRule {
        /**
         * The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
         */
        filterType?: enums.datasync.TaskFilterRuleFilterType;
        /**
         * A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
         */
        value?: string;
    }

    /**
     * Represents the options that are available to control the behavior of a StartTaskExecution operation.
     */
    export interface TaskOptions {
        /**
         * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
         */
        atime?: enums.datasync.TaskOptionsAtime;
        /**
         * A value that limits the bandwidth used by AWS DataSync.
         */
        bytesPerSecond?: number;
        /**
         * The group ID (GID) of the file's owners.
         */
        gid?: enums.datasync.TaskOptionsGid;
        /**
         * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
         */
        logLevel?: enums.datasync.TaskOptionsLogLevel;
        /**
         * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
         */
        mtime?: enums.datasync.TaskOptionsMtime;
        /**
         * A value that determines whether object tags should be read from the source object store and written to the destination object store.
         */
        objectTags?: enums.datasync.TaskOptionsObjectTags;
        /**
         * A value that determines whether files at the destination should be overwritten or preserved when copying files.
         */
        overwriteMode?: enums.datasync.TaskOptionsOverwriteMode;
        /**
         * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
         */
        posixPermissions?: enums.datasync.TaskOptionsPosixPermissions;
        /**
         * A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
         */
        preserveDeletedFiles?: enums.datasync.TaskOptionsPreserveDeletedFiles;
        /**
         * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
         */
        preserveDevices?: enums.datasync.TaskOptionsPreserveDevices;
        /**
         * A value that determines which components of the SMB security descriptor are copied during transfer.
         */
        securityDescriptorCopyFlags?: enums.datasync.TaskOptionsSecurityDescriptorCopyFlags;
        /**
         * A value that determines whether tasks should be queued before executing the tasks.
         */
        taskQueueing?: enums.datasync.TaskOptionsTaskQueueing;
        /**
         * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
         */
        transferMode?: enums.datasync.TaskOptionsTransferMode;
        /**
         * The user ID (UID) of the file's owner.
         */
        uid?: enums.datasync.TaskOptionsUid;
        /**
         * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
         */
        verifyMode?: enums.datasync.TaskOptionsVerifyMode;
    }

    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
     */
    export interface TaskReportConfig {
        /**
         * Specifies where DataSync uploads your task report.
         */
        destination: outputs.datasync.TaskReportConfigDestinationProperties;
        /**
         * Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.
         */
        objectVersionIds?: enums.datasync.TaskReportConfigObjectVersionIds;
        /**
         * Specifies the type of task report that you want.
         */
        outputType: enums.datasync.TaskReportConfigOutputType;
        /**
         * Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
         */
        overrides?: outputs.datasync.TaskReportConfigOverridesProperties;
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigReportLevel;
    }

    /**
     * Specifies where DataSync uploads your task report.
     */
    export interface TaskReportConfigDestinationProperties {
        /**
         * Specifies the Amazon S3 bucket where DataSync uploads your task report.
         */
        s3?: outputs.datasync.TaskReportConfigDestinationPropertiesS3Properties;
    }

    /**
     * Specifies the Amazon S3 bucket where DataSync uploads your task report.
     */
    export interface TaskReportConfigDestinationPropertiesS3Properties {
        /**
         * Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.
         */
        bucketAccessRoleArn?: string;
        /**
         * Specifies the ARN of the S3 bucket where Datasync uploads your report.
         */
        s3BucketArn?: string;
        /**
         * Specifies a bucket prefix for your report.
         */
        subdirectory?: string;
    }

    /**
     * Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
     */
    export interface TaskReportConfigOverridesProperties {
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
         */
        deleted?: outputs.datasync.TaskReportConfigOverridesPropertiesDeletedProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
         */
        skipped?: outputs.datasync.TaskReportConfigOverridesPropertiesSkippedProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
         */
        transferred?: outputs.datasync.TaskReportConfigOverridesPropertiesTransferredProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
         */
        verified?: outputs.datasync.TaskReportConfigOverridesPropertiesVerifiedProperties;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
     */
    export interface TaskReportConfigOverridesPropertiesDeletedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
     */
    export interface TaskReportConfigOverridesPropertiesSkippedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
     */
    export interface TaskReportConfigOverridesPropertiesTransferredProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
     */
    export interface TaskReportConfigOverridesPropertiesVerifiedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel;
    }

    /**
     * Specifies the schedule you want your task to use for repeated executions.
     */
    export interface TaskSchedule {
        /**
         * A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
         */
        scheduleExpression: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TaskTag {
        /**
         * The key for an AWS resource tag.
         */
        key: string;
        /**
         * The value for an AWS resource tag.
         */
        value: string;
    }

}

export namespace datazone {
    /**
     * Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
     */
    export interface DataSourceConfigurationInput0Properties {
        glueRunConfiguration?: outputs.datazone.DataSourceGlueRunConfigurationInput;
    }

    /**
     * Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
     */
    export interface DataSourceConfigurationInput1Properties {
        redshiftRunConfiguration?: outputs.datazone.DataSourceRedshiftRunConfigurationInput;
    }

    /**
     * The search filter expression.
     */
    export interface DataSourceFilterExpression {
        expression: string;
        type: enums.datazone.DataSourceFilterExpressionType;
    }

    /**
     * The details of a metadata form.
     */
    export interface DataSourceFormInput {
        /**
         * The content of the metadata form.
         */
        content?: string;
        /**
         * The name of the metadata form.
         */
        formName: string;
        /**
         * The ID of the metadata form type.
         */
        typeIdentifier?: string;
        /**
         * The revision of the metadata form type.
         */
        typeRevision?: string;
    }

    export interface DataSourceGlueRunConfigurationInput {
        /**
         * The data access role included in the configuration details of the AWS Glue data source.
         */
        dataAccessRole?: string;
        /**
         * The relational filter configurations included in the configuration details of the AWS Glue data source.
         */
        relationalFilterConfigurations: outputs.datazone.DataSourceRelationalFilterConfiguration[];
    }

    /**
     * The recommendation to be updated as part of the UpdateDataSource action.
     */
    export interface DataSourceRecommendationConfiguration {
        /**
         * Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
         */
        enableBusinessNameGeneration?: boolean;
    }

    /**
     * The name of an Amazon Redshift cluster.
     */
    export interface DataSourceRedshiftClusterStorage {
        /**
         * The name of an Amazon Redshift cluster.
         */
        clusterName: string;
    }

    /**
     * The ARN of a secret manager for an Amazon Redshift cluster.
     */
    export interface DataSourceRedshiftCredentialConfiguration {
        /**
         * The ARN of a secret manager for an Amazon Redshift cluster.
         */
        secretManagerArn: string;
    }

    /**
     * The configuration details of the Amazon Redshift data source.
     */
    export interface DataSourceRedshiftRunConfigurationInput {
        /**
         * The data access role included in the configuration details of the Amazon Redshift data source.
         */
        dataAccessRole?: string;
        /**
         * The details of the credentials required to access an Amazon Redshift cluster.
         */
        redshiftCredentialConfiguration: outputs.datazone.DataSourceRedshiftCredentialConfiguration;
        /**
         * The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
         */
        redshiftStorage: outputs.datazone.DataSourceRedshiftStorage0Properties | outputs.datazone.DataSourceRedshiftStorage1Properties;
        relationalFilterConfigurations: outputs.datazone.DataSourceRelationalFilterConfiguration[];
    }

    /**
     * The details of the Amazon Redshift Serverless workgroup storage.
     */
    export interface DataSourceRedshiftServerlessStorage {
        /**
         * The name of the Amazon Redshift Serverless workgroup.
         */
        workgroupName: string;
    }

    /**
     * The details of the Amazon Redshift cluster source.
     */
    export interface DataSourceRedshiftStorage0Properties {
        redshiftClusterSource: outputs.datazone.DataSourceRedshiftClusterStorage;
    }

    /**
     * The details of the Amazon Redshift Serverless workgroup source.
     */
    export interface DataSourceRedshiftStorage1Properties {
        redshiftServerlessSource: outputs.datazone.DataSourceRedshiftServerlessStorage;
    }

    /**
     * The relational filter configuration for the data source.
     */
    export interface DataSourceRelationalFilterConfiguration {
        /**
         * The database name specified in the relational filter configuration for the data source.
         */
        databaseName: string;
        /**
         * The filter expressions specified in the relational filter configuration for the data source.
         */
        filterExpressions?: outputs.datazone.DataSourceFilterExpression[];
        /**
         * The schema name specified in the relational filter configuration for the data source.
         */
        schemaName?: string;
    }

    /**
     * The schedule of the data source runs.
     */
    export interface DataSourceScheduleConfiguration {
        /**
         * The schedule of the data source runs.
         */
        schedule?: string;
        /**
         * The timezone of the data source run.
         */
        timezone?: string;
    }

    /**
     * The single-sign on configuration of the Amazon DataZone domain.
     */
    export interface DomainSingleSignOn {
        type?: enums.datazone.DomainAuthType;
        userAssignment?: enums.datazone.DomainUserAssignment;
    }

    /**
     * A key-value pair to associate with the domain.
     */
    export interface DomainTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface EnvironmentBlueprintConfigurationParameter {
    }

    export interface EnvironmentBlueprintConfigurationRegionalParameter {
        parameters?: outputs.datazone.EnvironmentBlueprintConfigurationParameter;
        region?: string;
    }

    /**
     * The parameter details of an environment.
     */
    export interface EnvironmentParameter {
        /**
         * The name of an environment parameter.
         */
        name?: string;
        /**
         * The value of an environment parameter.
         */
        value?: string;
    }

    /**
     * The parameter details of an environment profile.
     */
    export interface EnvironmentProfileEnvironmentParameter {
        /**
         * The name of an environment profile parameter.
         */
        name?: string;
        /**
         * The value of an environment profile parameter.
         */
        value?: string;
    }

    /**
     * The details of the subscription target configuration.
     */
    export interface SubscriptionTargetForm {
        /**
         * The content of the subscription target configuration.
         */
        content: string;
        /**
         * The form name included in the subscription target configuration.
         */
        formName: string;
    }

}

export namespace dax {
    export interface ClusterSseSpecification {
        sseEnabled?: boolean;
    }

}

export namespace detective {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface GraphTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. Valid characters are Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @ 
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. Valid characters are Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @ 
         */
        value?: string;
    }

}

export namespace devicefarm {
    /**
     * Represents a condition for a device pool.
     */
    export interface DevicePoolRule {
        /**
         * The rule's stringified attribute.
         */
        attribute?: enums.devicefarm.DevicePoolRuleAttribute;
        /**
         * Specifies how Device Farm compares the rule's attribute to the value.
         */
        operator?: enums.devicefarm.DevicePoolRuleOperator;
        /**
         * The rule's value.
         */
        value?: string;
    }

    export interface DevicePoolTag {
        key: string;
        value: string;
    }

    export interface InstanceProfileTag {
        key: string;
        value: string;
    }

    export interface NetworkProfileTag {
        key: string;
        value: string;
    }

    export interface ProjectTag {
        key: string;
        value: string;
    }

    /**
     * The VPC security groups and subnets that are attached to a project
     */
    export interface ProjectVpcConfig {
        /**
         * An array of security group Ids in your Amazon VPC
         */
        securityGroupIds: string[];
        /**
         * A array of subnet IDs in your Amazon VPC.
         */
        subnetIds: string[];
        /**
         * The ID of the Amazon VPC
         */
        vpcId: string;
    }

    export interface TestGridProjectTag {
        key: string;
        value: string;
    }

    /**
     * The VPC security groups and subnets that are attached to a TestGrid project.
     */
    export interface TestGridProjectVpcConfig {
        /**
         * A list of VPC security group IDs in your Amazon VPC.
         */
        securityGroupIds: string[];
        /**
         * A list of VPC subnet IDs in your Amazon VPC.
         */
        subnetIds: string[];
        vpcId: string;
    }

    export interface VpceConfigurationTag {
        key: string;
        value: string;
    }

}

export namespace devopsguru {
    /**
     * Information about notification channels you have configured with DevOps Guru.
     */
    export interface NotificationChannelConfig {
        filters?: outputs.devopsguru.NotificationChannelNotificationFilterConfig;
        sns?: outputs.devopsguru.NotificationChannelSnsChannelConfig;
    }

    /**
     * Information about filters of a notification channel configured in DevOpsGuru to filter for insights.
     */
    export interface NotificationChannelNotificationFilterConfig {
        messageTypes?: enums.devopsguru.NotificationChannelNotificationMessageType[];
        severities?: enums.devopsguru.NotificationChannelInsightSeverity[];
    }

    /**
     * Information about a notification channel configured in DevOps Guru to send notifications when insights are created.
     */
    export interface NotificationChannelSnsChannelConfig {
        topicArn?: string;
    }

    /**
     * CloudFormation resource for DevOps Guru to monitor
     */
    export interface ResourceCollectionCloudFormationCollectionFilter {
        /**
         * An array of CloudFormation stack names.
         */
        stackNames?: string[];
    }

    /**
     * Information about a filter used to specify which AWS resources are analyzed for anomalous behavior by DevOps Guru.
     */
    export interface ResourceCollectionFilter {
        cloudFormation?: outputs.devopsguru.ResourceCollectionCloudFormationCollectionFilter;
        tags?: outputs.devopsguru.ResourceCollectionTagCollection[];
    }

    /**
     * Tagged resource for DevOps Guru to monitor
     */
    export interface ResourceCollectionTagCollection {
        /**
         * A Tag key for DevOps Guru app boundary.
         */
        appBoundaryKey?: string;
        /**
         * Tag values of DevOps Guru app boundary.
         */
        tagValues?: string[];
    }

}

export namespace directoryservice {
    export interface MicrosoftAdVpcSettings {
        subnetIds: string[];
        vpcId: string;
    }

    export interface SimpleAdVpcSettings {
        /**
         * The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service specifies a directory server and a DNS server in each of these subnets.
         */
        subnetIds: string[];
        /**
         * The identifier of the VPC in which to create the directory.
         */
        vpcId: string;
    }

}

export namespace dlm {
    export interface LifecyclePolicyAction {
        crossRegionCopy: outputs.dlm.LifecyclePolicyCrossRegionCopyAction[];
        name: string;
    }

    export interface LifecyclePolicyArchiveRetainRule {
        retentionArchiveTier: outputs.dlm.LifecyclePolicyRetentionArchiveTier;
    }

    export interface LifecyclePolicyArchiveRule {
        retainRule: outputs.dlm.LifecyclePolicyArchiveRetainRule;
    }

    export interface LifecyclePolicyCreateRule {
        cronExpression?: string;
        interval?: number;
        intervalUnit?: string;
        location?: string;
        scripts?: outputs.dlm.LifecyclePolicyScript[];
        times?: string[];
    }

    export interface LifecyclePolicyCrossRegionCopyAction {
        encryptionConfiguration: outputs.dlm.LifecyclePolicyEncryptionConfiguration;
        retainRule?: outputs.dlm.LifecyclePolicyCrossRegionCopyRetainRule;
        target: string;
    }

    export interface LifecyclePolicyCrossRegionCopyDeprecateRule {
        interval: number;
        intervalUnit: string;
    }

    export interface LifecyclePolicyCrossRegionCopyRetainRule {
        interval: number;
        intervalUnit: string;
    }

    export interface LifecyclePolicyCrossRegionCopyRule {
        cmkArn?: string;
        copyTags?: boolean;
        deprecateRule?: outputs.dlm.LifecyclePolicyCrossRegionCopyDeprecateRule;
        encrypted: boolean;
        retainRule?: outputs.dlm.LifecyclePolicyCrossRegionCopyRetainRule;
        target?: string;
        targetRegion?: string;
    }

    export interface LifecyclePolicyCrossRegionCopyTargets {
    }

    export interface LifecyclePolicyDeprecateRule {
        count?: number;
        interval?: number;
        intervalUnit?: string;
    }

    export interface LifecyclePolicyEncryptionConfiguration {
        cmkArn?: string;
        encrypted: boolean;
    }

    export interface LifecyclePolicyEventParameters {
        descriptionRegex?: string;
        eventType: string;
        snapshotOwner: string[];
    }

    export interface LifecyclePolicyEventSource {
        parameters?: outputs.dlm.LifecyclePolicyEventParameters;
        type: string;
    }

    export interface LifecyclePolicyExcludeTags {
    }

    export interface LifecyclePolicyExcludeVolumeTypesList {
    }

    export interface LifecyclePolicyExclusions {
        excludeBootVolumes?: boolean;
        excludeTags?: outputs.dlm.LifecyclePolicyExcludeTags;
        excludeVolumeTypes?: outputs.dlm.LifecyclePolicyExcludeVolumeTypesList;
    }

    export interface LifecyclePolicyFastRestoreRule {
        availabilityZones?: string[];
        count?: number;
        interval?: number;
        intervalUnit?: string;
    }

    export interface LifecyclePolicyParameters {
        excludeBootVolume?: boolean;
        excludeDataVolumeTags?: outputs.dlm.LifecyclePolicyTag[];
        noReboot?: boolean;
    }

    export interface LifecyclePolicyPolicyDetails {
        actions?: outputs.dlm.LifecyclePolicyAction[];
        copyTags?: boolean;
        createInterval?: number;
        crossRegionCopyTargets?: outputs.dlm.LifecyclePolicyCrossRegionCopyTargets;
        eventSource?: outputs.dlm.LifecyclePolicyEventSource;
        exclusions?: outputs.dlm.LifecyclePolicyExclusions;
        extendDeletion?: boolean;
        parameters?: outputs.dlm.LifecyclePolicyParameters;
        policyLanguage?: string;
        policyType?: string;
        resourceLocations?: string[];
        resourceType?: string;
        resourceTypes?: string[];
        retainInterval?: number;
        schedules?: outputs.dlm.LifecyclePolicySchedule[];
        targetTags?: outputs.dlm.LifecyclePolicyTag[];
    }

    export interface LifecyclePolicyRetainRule {
        count?: number;
        interval?: number;
        intervalUnit?: string;
    }

    export interface LifecyclePolicyRetentionArchiveTier {
        count?: number;
        interval?: number;
        intervalUnit?: string;
    }

    export interface LifecyclePolicySchedule {
        archiveRule?: outputs.dlm.LifecyclePolicyArchiveRule;
        copyTags?: boolean;
        createRule?: outputs.dlm.LifecyclePolicyCreateRule;
        crossRegionCopyRules?: outputs.dlm.LifecyclePolicyCrossRegionCopyRule[];
        deprecateRule?: outputs.dlm.LifecyclePolicyDeprecateRule;
        fastRestoreRule?: outputs.dlm.LifecyclePolicyFastRestoreRule;
        name?: string;
        retainRule?: outputs.dlm.LifecyclePolicyRetainRule;
        shareRules?: outputs.dlm.LifecyclePolicyShareRule[];
        tagsToAdd?: outputs.dlm.LifecyclePolicyTag[];
        variableTags?: outputs.dlm.LifecyclePolicyTag[];
    }

    export interface LifecyclePolicyScript {
        executeOperationOnScriptFailure?: boolean;
        executionHandler?: string;
        executionHandlerService?: string;
        executionTimeout?: number;
        maximumRetryCount?: number;
        stages?: string[];
    }

    export interface LifecyclePolicyShareRule {
        targetAccounts?: string[];
        unshareInterval?: number;
        unshareIntervalUnit?: string;
    }

    export interface LifecyclePolicyTag {
        key: string;
        value: string;
    }

}

export namespace dms {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface DataProviderTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface EndpointDocDbSettings {
        docsToInvestigate?: number;
        extractDocId?: boolean;
        nestingLevel?: string;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
    }

    export interface EndpointDynamoDbSettings {
        serviceAccessRoleArn?: string;
    }

    export interface EndpointElasticsearchSettings {
        endpointUri?: string;
        errorRetryDuration?: number;
        fullLoadErrorPercentage?: number;
        serviceAccessRoleArn?: string;
    }

    export interface EndpointGcpMySqlSettings {
        afterConnectScript?: string;
        cleanSourceMetadataOnMismatch?: boolean;
        databaseName?: string;
        eventsPollInterval?: number;
        maxFileSize?: number;
        parallelLoadThreads?: number;
        password?: string;
        port?: number;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        serverName?: string;
        serverTimezone?: string;
        username?: string;
    }

    export interface EndpointIbmDb2Settings {
        currentLsn?: string;
        keepCsvFiles?: boolean;
        loadTimeout?: number;
        maxFileSize?: number;
        maxKBytesPerRead?: number;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        setDataCaptureChanges?: boolean;
        writeBufferSize?: number;
    }

    export interface EndpointKafkaSettings {
        broker?: string;
        includeControlDetails?: boolean;
        includeNullAndEmpty?: boolean;
        includePartitionValue?: boolean;
        includeTableAlterOperations?: boolean;
        includeTransactionDetails?: boolean;
        messageFormat?: string;
        messageMaxBytes?: number;
        noHexPrefix?: boolean;
        partitionIncludeSchemaTable?: boolean;
        saslPassword?: string;
        saslUserName?: string;
        securityProtocol?: string;
        sslCaCertificateArn?: string;
        sslClientCertificateArn?: string;
        sslClientKeyArn?: string;
        sslClientKeyPassword?: string;
        topic?: string;
    }

    export interface EndpointKinesisSettings {
        includeControlDetails?: boolean;
        includeNullAndEmpty?: boolean;
        includePartitionValue?: boolean;
        includeTableAlterOperations?: boolean;
        includeTransactionDetails?: boolean;
        messageFormat?: string;
        noHexPrefix?: boolean;
        partitionIncludeSchemaTable?: boolean;
        serviceAccessRoleArn?: string;
        streamArn?: string;
    }

    export interface EndpointMicrosoftSqlServerSettings {
        bcpPacketSize?: number;
        controlTablesFileGroup?: string;
        databaseName?: string;
        forceLobLookup?: boolean;
        password?: string;
        port?: number;
        querySingleAlwaysOnNode?: boolean;
        readBackupOnly?: boolean;
        safeguardPolicy?: string;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        serverName?: string;
        tlogAccessMode?: string;
        trimSpaceInChar?: boolean;
        useBcpFullLoad?: boolean;
        useThirdPartyBackupDevice?: boolean;
        username?: string;
    }

    export interface EndpointMongoDbSettings {
        authMechanism?: string;
        authSource?: string;
        authType?: string;
        databaseName?: string;
        docsToInvestigate?: string;
        extractDocId?: string;
        nestingLevel?: string;
        password?: string;
        port?: number;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        serverName?: string;
        username?: string;
    }

    export interface EndpointMySqlSettings {
        afterConnectScript?: string;
        cleanSourceMetadataOnMismatch?: boolean;
        eventsPollInterval?: number;
        maxFileSize?: number;
        parallelLoadThreads?: number;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        serverTimezone?: string;
        targetDbType?: string;
    }

    export interface EndpointNeptuneSettings {
        errorRetryDuration?: number;
        iamAuthEnabled?: boolean;
        maxFileSize?: number;
        maxRetryCount?: number;
        s3BucketFolder?: string;
        s3BucketName?: string;
        serviceAccessRoleArn?: string;
    }

    export interface EndpointOracleSettings {
        accessAlternateDirectly?: boolean;
        addSupplementalLogging?: boolean;
        additionalArchivedLogDestId?: number;
        allowSelectNestedTables?: boolean;
        archivedLogDestId?: number;
        archivedLogsOnly?: boolean;
        asmPassword?: string;
        asmServer?: string;
        asmUser?: string;
        charLengthSemantics?: string;
        directPathNoLog?: boolean;
        directPathParallelLoad?: boolean;
        enableHomogenousTablespace?: boolean;
        extraArchivedLogDestIds?: number[];
        failTasksOnLobTruncation?: boolean;
        numberDatatypeScale?: number;
        oraclePathPrefix?: string;
        parallelAsmReadThreads?: number;
        readAheadBlocks?: number;
        readTableSpaceName?: boolean;
        replacePathPrefix?: boolean;
        retryInterval?: number;
        secretsManagerAccessRoleArn?: string;
        secretsManagerOracleAsmAccessRoleArn?: string;
        secretsManagerOracleAsmSecretId?: string;
        secretsManagerSecretId?: string;
        securityDbEncryption?: string;
        securityDbEncryptionName?: string;
        spatialDataOptionToGeoJsonFunctionName?: string;
        standbyDelayTime?: number;
        useAlternateFolderForOnline?: boolean;
        useBFile?: boolean;
        useDirectPathFullLoad?: boolean;
        useLogminerReader?: boolean;
        usePathPrefix?: string;
    }

    export interface EndpointPostgreSqlSettings {
        afterConnectScript?: string;
        babelfishDatabaseName?: string;
        captureDdls?: boolean;
        databaseMode?: string;
        ddlArtifactsSchema?: string;
        executeTimeout?: number;
        failTasksOnLobTruncation?: boolean;
        heartbeatEnable?: boolean;
        heartbeatFrequency?: number;
        heartbeatSchema?: string;
        mapBooleanAsBoolean?: boolean;
        maxFileSize?: number;
        pluginName?: string;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        slotName?: string;
    }

    export interface EndpointRedisSettings {
        authPassword?: string;
        authType?: string;
        authUserName?: string;
        port?: number;
        serverName?: string;
        sslCaCertificateArn?: string;
        sslSecurityProtocol?: string;
    }

    export interface EndpointRedshiftSettings {
        acceptAnyDate?: boolean;
        afterConnectScript?: string;
        bucketFolder?: string;
        bucketName?: string;
        caseSensitiveNames?: boolean;
        compUpdate?: boolean;
        connectionTimeout?: number;
        dateFormat?: string;
        emptyAsNull?: boolean;
        encryptionMode?: string;
        explicitIds?: boolean;
        fileTransferUploadStreams?: number;
        loadTimeout?: number;
        mapBooleanAsBoolean?: boolean;
        maxFileSize?: number;
        removeQuotes?: boolean;
        replaceChars?: string;
        replaceInvalidChars?: string;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
        serverSideEncryptionKmsKeyId?: string;
        serviceAccessRoleArn?: string;
        timeFormat?: string;
        trimBlanks?: boolean;
        truncateColumns?: boolean;
        writeBufferSize?: number;
    }

    export interface EndpointS3Settings {
        addColumnName?: boolean;
        addTrailingPaddingCharacter?: boolean;
        bucketFolder?: string;
        bucketName?: string;
        cannedAclForObjects?: string;
        cdcInsertsAndUpdates?: boolean;
        cdcInsertsOnly?: boolean;
        cdcMaxBatchInterval?: number;
        cdcMinFileSize?: number;
        cdcPath?: string;
        compressionType?: string;
        csvDelimiter?: string;
        csvNoSupValue?: string;
        csvNullValue?: string;
        csvRowDelimiter?: string;
        dataFormat?: string;
        dataPageSize?: number;
        datePartitionDelimiter?: string;
        datePartitionEnabled?: boolean;
        datePartitionSequence?: string;
        datePartitionTimezone?: string;
        dictPageSizeLimit?: number;
        enableStatistics?: boolean;
        encodingType?: string;
        encryptionMode?: string;
        expectedBucketOwner?: string;
        externalTableDefinition?: string;
        glueCatalogGeneration?: boolean;
        ignoreHeaderRows?: number;
        includeOpForFullLoad?: boolean;
        maxFileSize?: number;
        parquetTimestampInMillisecond?: boolean;
        parquetVersion?: string;
        preserveTransactions?: boolean;
        rfc4180?: boolean;
        rowGroupLength?: number;
        serverSideEncryptionKmsKeyId?: string;
        serviceAccessRoleArn?: string;
        timestampColumnName?: string;
        useCsvNoSupValue?: boolean;
        useTaskStartTimeForFullLoadTimestamp?: boolean;
    }

    export interface EndpointSybaseSettings {
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
    }

    export interface EndpointTag {
        key: string;
        value: string;
    }

    export interface EventSubscriptionTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface InstanceProfileTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * It is an object that describes Source and Target DataProviders and credentials for connecting to databases that are used in MigrationProject
     */
    export interface MigrationProjectDataProviderDescriptor {
        dataProviderArn?: string;
        dataProviderIdentifier?: string;
        dataProviderName?: string;
        secretsManagerAccessRoleArn?: string;
        secretsManagerSecretId?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MigrationProjectTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, , and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, , and -.
         */
        value: string;
    }

    /**
     * Configuration parameters for provisioning a AWS DMS Serverless replication
     */
    export interface ReplicationConfigComputeConfig {
        availabilityZone?: string;
        dnsNameServers?: string;
        kmsKeyId?: string;
        maxCapacityUnits: number;
        minCapacityUnits?: number;
        multiAz?: boolean;
        preferredMaintenanceWindow?: string;
        replicationSubnetGroupId?: string;
        vpcSecurityGroupIds?: string[];
    }

    /**
     * <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
     *             resource.</p>
     */
    export interface ReplicationConfigTag {
        /**
         * <p>Tag key.</p>
         */
        key: string;
        /**
         * <p>Tag value.</p>
         */
        value: string;
    }

    export interface ReplicationInstanceTag {
        key: string;
        value: string;
    }

    export interface ReplicationSubnetGroupTag {
        key: string;
        value: string;
    }

    export interface ReplicationTaskTag {
        key: string;
        value: string;
    }

    /**
     * The property describes schema conversion application attributes for the migration project.
     */
    export interface SchemaConversionApplicationAttributesProperties {
        s3BucketPath?: string;
        s3BucketRoleArn?: string;
    }

    /**
     * PostgreSqlSettings property identifier.
     */
    export interface Settings0Properties {
        postgreSqlSettings?: outputs.dms.Settings0PropertiesPostgreSqlSettingsProperties;
    }

    export interface Settings0PropertiesPostgreSqlSettingsProperties {
        certificateArn?: string;
        databaseName?: string;
        port?: number;
        serverName?: string;
        sslMode?: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * MySqlSettings property identifier.
     */
    export interface Settings1Properties {
        mySqlSettings?: outputs.dms.Settings1PropertiesMySqlSettingsProperties;
    }

    export interface Settings1PropertiesMySqlSettingsProperties {
        certificateArn?: string;
        port?: number;
        serverName?: string;
        sslMode?: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * OracleSettings property identifier.
     */
    export interface Settings2Properties {
        oracleSettings?: outputs.dms.Settings2PropertiesOracleSettingsProperties;
    }

    export interface Settings2PropertiesOracleSettingsProperties {
        asmServer?: string;
        certificateArn?: string;
        databaseName?: string;
        port?: number;
        secretsManagerOracleAsmAccessRoleArn?: string;
        secretsManagerOracleAsmSecretId?: string;
        secretsManagerSecurityDbEncryptionAccessRoleArn?: string;
        secretsManagerSecurityDbEncryptionSecretId?: string;
        serverName?: string;
        sslMode?: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * MicrosoftSqlServerSettings property identifier.
     */
    export interface Settings3Properties {
        microsoftSqlServerSettings?: outputs.dms.Settings3PropertiesMicrosoftSqlServerSettingsProperties;
    }

    export interface Settings3PropertiesMicrosoftSqlServerSettingsProperties {
        certificateArn?: string;
        databaseName?: string;
        port?: number;
        serverName?: string;
        sslMode?: enums.dms.DataProviderDmsSslModeValue;
    }

}

export namespace docdb {
    export interface DbClusterParameterGroupTag {
        key: string;
        value: string;
    }

    export interface DbClusterTag {
        key: string;
        value: string;
    }

    export interface DbInstanceTag {
        key: string;
        value: string;
    }

    export interface DbSubnetGroupTag {
        key: string;
        value: string;
    }

}

export namespace docdbelastic {
    export interface ClusterTag {
        key: string;
        value: string;
    }

}

export namespace dynamodb {
    export interface GlobalTableAttributeDefinition {
        attributeName: string;
        attributeType: string;
    }

    export interface GlobalTableCapacityAutoScalingSettings {
        maxCapacity: number;
        minCapacity: number;
        seedCapacity?: number;
        targetTrackingScalingPolicyConfiguration: outputs.dynamodb.GlobalTableTargetTrackingScalingPolicyConfiguration;
    }

    export interface GlobalTableContributorInsightsSpecification {
        enabled: boolean;
    }

    export interface GlobalTableGlobalSecondaryIndex {
        indexName: string;
        keySchema: outputs.dynamodb.GlobalTableKeySchema[];
        projection: outputs.dynamodb.GlobalTableProjection;
        writeProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableWriteProvisionedThroughputSettings;
    }

    export interface GlobalTableKeySchema {
        attributeName: string;
        keyType: string;
    }

    export interface GlobalTableKinesisStreamSpecification {
        approximateCreationDateTimePrecision?: enums.dynamodb.GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision;
        streamArn: string;
    }

    export interface GlobalTableLocalSecondaryIndex {
        indexName: string;
        keySchema: outputs.dynamodb.GlobalTableKeySchema[];
        projection: outputs.dynamodb.GlobalTableProjection;
    }

    export interface GlobalTablePointInTimeRecoverySpecification {
        pointInTimeRecoveryEnabled?: boolean;
    }

    export interface GlobalTableProjection {
        nonKeyAttributes?: string[];
        projectionType?: string;
    }

    export interface GlobalTableReadProvisionedThroughputSettings {
        readCapacityAutoScalingSettings?: outputs.dynamodb.GlobalTableCapacityAutoScalingSettings;
        readCapacityUnits?: number;
    }

    export interface GlobalTableReplicaGlobalSecondaryIndexSpecification {
        contributorInsightsSpecification?: outputs.dynamodb.GlobalTableContributorInsightsSpecification;
        indexName: string;
        readProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableReadProvisionedThroughputSettings;
    }

    export interface GlobalTableReplicaSpecification {
        contributorInsightsSpecification?: outputs.dynamodb.GlobalTableContributorInsightsSpecification;
        deletionProtectionEnabled?: boolean;
        globalSecondaryIndexes?: outputs.dynamodb.GlobalTableReplicaGlobalSecondaryIndexSpecification[];
        kinesisStreamSpecification?: outputs.dynamodb.GlobalTableKinesisStreamSpecification;
        pointInTimeRecoverySpecification?: outputs.dynamodb.GlobalTablePointInTimeRecoverySpecification;
        readProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableReadProvisionedThroughputSettings;
        region: string;
        sseSpecification?: outputs.dynamodb.GlobalTableReplicaSseSpecification;
        tableClass?: string;
        tags?: outputs.dynamodb.GlobalTableTag[];
    }

    export interface GlobalTableReplicaSseSpecification {
        kmsMasterKeyId: string;
    }

    export interface GlobalTableSseSpecification {
        sseEnabled: boolean;
        sseType?: string;
    }

    export interface GlobalTableStreamSpecification {
        streamViewType: string;
    }

    export interface GlobalTableTag {
        key: string;
        value: string;
    }

    export interface GlobalTableTargetTrackingScalingPolicyConfiguration {
        disableScaleIn?: boolean;
        scaleInCooldown?: number;
        scaleOutCooldown?: number;
        targetValue: number;
    }

    export interface GlobalTableTimeToLiveSpecification {
        attributeName?: string;
        enabled: boolean;
    }

    export interface GlobalTableWriteProvisionedThroughputSettings {
        writeCapacityAutoScalingSettings?: outputs.dynamodb.GlobalTableCapacityAutoScalingSettings;
    }

    export interface TableAttributeDefinition {
        attributeName: string;
        attributeType: string;
    }

    export interface TableContributorInsightsSpecification {
        enabled: boolean;
    }

    export interface TableCsv {
        delimiter?: string;
        headerList?: string[];
    }

    export interface TableGlobalSecondaryIndex {
        contributorInsightsSpecification?: outputs.dynamodb.TableContributorInsightsSpecification;
        indexName: string;
        keySchema: outputs.dynamodb.TableKeySchema[];
        projection: outputs.dynamodb.TableProjection;
        provisionedThroughput?: outputs.dynamodb.TableProvisionedThroughput;
    }

    export interface TableImportSourceSpecification {
        inputCompressionType?: string;
        inputFormat: string;
        inputFormatOptions?: outputs.dynamodb.TableInputFormatOptions;
        s3BucketSource: outputs.dynamodb.TableS3BucketSource;
    }

    export interface TableInputFormatOptions {
        csv?: outputs.dynamodb.TableCsv;
    }

    export interface TableKeySchema {
        attributeName: string;
        keyType: string;
    }

    export interface TableKinesisStreamSpecification {
        approximateCreationDateTimePrecision?: enums.dynamodb.TableKinesisStreamSpecificationApproximateCreationDateTimePrecision;
        streamArn: string;
    }

    export interface TableLocalSecondaryIndex {
        indexName: string;
        keySchema: outputs.dynamodb.TableKeySchema[];
        projection: outputs.dynamodb.TableProjection;
    }

    export interface TablePointInTimeRecoverySpecification {
        pointInTimeRecoveryEnabled?: boolean;
    }

    export interface TableProjection {
        nonKeyAttributes?: string[];
        projectionType?: string;
    }

    export interface TableProvisionedThroughput {
        readCapacityUnits: number;
        writeCapacityUnits: number;
    }

    export interface TableS3BucketSource {
        s3Bucket: string;
        s3BucketOwner?: string;
        s3KeyPrefix?: string;
    }

    export interface TableSseSpecification {
        kmsMasterKeyId?: string;
        sseEnabled: boolean;
        sseType?: string;
    }

    export interface TableStreamSpecification {
        streamViewType: string;
    }

    export interface TableTag {
        key: string;
        value: string;
    }

    export interface TableTimeToLiveSpecification {
        attributeName?: string;
        enabled: boolean;
    }

}

export namespace ec2 {
    export interface CapacityReservationFleetInstanceTypeSpecification {
        availabilityZone?: string;
        availabilityZoneId?: string;
        ebsOptimized?: boolean;
        instancePlatform?: string;
        instanceType?: string;
        priority?: number;
        weight?: number;
    }

    export interface CapacityReservationFleetTag {
        key: string;
        value: string;
    }

    export interface CapacityReservationFleetTagSpecification {
        resourceType?: string;
        tags?: outputs.ec2.CapacityReservationFleetTag[];
    }

    export interface CapacityReservationTag {
        key: string;
        value: string;
    }

    export interface CapacityReservationTagSpecification {
        resourceType?: string;
        tags?: outputs.ec2.CapacityReservationTag[];
    }

    export interface CarrierGatewayTag {
        key?: string;
        value?: string;
    }

    export interface ClientVpnEndpointCertificateAuthenticationRequest {
        clientRootCertificateChainArn: string;
    }

    export interface ClientVpnEndpointClientAuthenticationRequest {
        activeDirectory?: outputs.ec2.ClientVpnEndpointDirectoryServiceAuthenticationRequest;
        federatedAuthentication?: outputs.ec2.ClientVpnEndpointFederatedAuthenticationRequest;
        mutualAuthentication?: outputs.ec2.ClientVpnEndpointCertificateAuthenticationRequest;
        type: string;
    }

    export interface ClientVpnEndpointClientConnectOptions {
        enabled: boolean;
        lambdaFunctionArn?: string;
    }

    export interface ClientVpnEndpointClientLoginBannerOptions {
        bannerText?: string;
        enabled: boolean;
    }

    export interface ClientVpnEndpointClientRouteMonitoringOptions {
        enabled?: boolean;
    }

    export interface ClientVpnEndpointConnectionLogOptions {
        cloudwatchLogGroup?: string;
        cloudwatchLogStream?: string;
        enabled: boolean;
    }

    export interface ClientVpnEndpointDirectoryServiceAuthenticationRequest {
        directoryId: string;
    }

    export interface ClientVpnEndpointFederatedAuthenticationRequest {
        samlProviderArn: string;
        selfServiceSamlProviderArn?: string;
    }

    export interface ClientVpnEndpointTag {
        key: string;
        value: string;
    }

    export interface ClientVpnEndpointTagSpecification {
        resourceType: string;
        tags: outputs.ec2.ClientVpnEndpointTag[];
    }

    export interface CustomerGatewayTag {
        key: string;
        value: string;
    }

    export interface DestinationOptionsProperties {
        fileFormat: enums.ec2.FlowLogDestinationOptionsPropertiesFileFormat;
        hiveCompatiblePartitions: boolean;
        perHourPartition: boolean;
    }

    export interface DhcpOptionsTag {
        key: string;
        value: string;
    }

    export interface Ec2FleetAcceleratorCountRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetAcceleratorTotalMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetBaselineEbsBandwidthMbpsRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetCapacityRebalance {
        replacementStrategy?: enums.ec2.Ec2FleetCapacityRebalanceReplacementStrategy;
        terminationDelay?: number;
    }

    export interface Ec2FleetCapacityReservationOptionsRequest {
        usageStrategy?: enums.ec2.Ec2FleetCapacityReservationOptionsRequestUsageStrategy;
    }

    export interface Ec2FleetFleetLaunchTemplateConfigRequest {
        launchTemplateSpecification?: outputs.ec2.Ec2FleetFleetLaunchTemplateSpecificationRequest;
        overrides?: outputs.ec2.Ec2FleetFleetLaunchTemplateOverridesRequest[];
    }

    export interface Ec2FleetFleetLaunchTemplateOverridesRequest {
        availabilityZone?: string;
        instanceRequirements?: outputs.ec2.Ec2FleetInstanceRequirementsRequest;
        instanceType?: string;
        maxPrice?: string;
        placement?: outputs.ec2.Ec2FleetPlacement;
        priority?: number;
        subnetId?: string;
        weightedCapacity?: number;
    }

    export interface Ec2FleetFleetLaunchTemplateSpecificationRequest {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version: string;
    }

    export interface Ec2FleetInstanceRequirementsRequest {
        acceleratorCount?: outputs.ec2.Ec2FleetAcceleratorCountRequest;
        acceleratorManufacturers?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem[];
        acceleratorNames?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem[];
        acceleratorTotalMemoryMiB?: outputs.ec2.Ec2FleetAcceleratorTotalMemoryMiBRequest;
        acceleratorTypes?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem[];
        allowedInstanceTypes?: string[];
        bareMetal?: enums.ec2.Ec2FleetInstanceRequirementsRequestBareMetal;
        baselineEbsBandwidthMbps?: outputs.ec2.Ec2FleetBaselineEbsBandwidthMbpsRequest;
        burstablePerformance?: enums.ec2.Ec2FleetInstanceRequirementsRequestBurstablePerformance;
        cpuManufacturers?: enums.ec2.Ec2FleetInstanceRequirementsRequestCpuManufacturersItem[];
        excludedInstanceTypes?: string[];
        instanceGenerations?: enums.ec2.Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem[];
        localStorage?: enums.ec2.Ec2FleetInstanceRequirementsRequestLocalStorage;
        localStorageTypes?: enums.ec2.Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem[];
        memoryGiBPerVCpu?: outputs.ec2.Ec2FleetMemoryGiBPerVCpuRequest;
        memoryMiB?: outputs.ec2.Ec2FleetMemoryMiBRequest;
        networkBandwidthGbps?: outputs.ec2.Ec2FleetNetworkBandwidthGbpsRequest;
        networkInterfaceCount?: outputs.ec2.Ec2FleetNetworkInterfaceCountRequest;
        onDemandMaxPricePercentageOverLowestPrice?: number;
        requireHibernateSupport?: boolean;
        spotMaxPricePercentageOverLowestPrice?: number;
        totalLocalStorageGb?: outputs.ec2.Ec2FleetTotalLocalStorageGbRequest;
        vCpuCount?: outputs.ec2.Ec2FleetVCpuCountRangeRequest;
    }

    export interface Ec2FleetMaintenanceStrategies {
        capacityRebalance?: outputs.ec2.Ec2FleetCapacityRebalance;
    }

    export interface Ec2FleetMemoryGiBPerVCpuRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetNetworkBandwidthGbpsRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetNetworkInterfaceCountRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetOnDemandOptionsRequest {
        allocationStrategy?: string;
        capacityReservationOptions?: outputs.ec2.Ec2FleetCapacityReservationOptionsRequest;
        maxTotalPrice?: string;
        minTargetCapacity?: number;
        singleAvailabilityZone?: boolean;
        singleInstanceType?: boolean;
    }

    export interface Ec2FleetPlacement {
        affinity?: string;
        availabilityZone?: string;
        groupName?: string;
        hostId?: string;
        hostResourceGroupArn?: string;
        partitionNumber?: number;
        spreadDomain?: string;
        tenancy?: string;
    }

    export interface Ec2FleetSpotOptionsRequest {
        allocationStrategy?: enums.ec2.Ec2FleetSpotOptionsRequestAllocationStrategy;
        instanceInterruptionBehavior?: enums.ec2.Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior;
        instancePoolsToUseCount?: number;
        maintenanceStrategies?: outputs.ec2.Ec2FleetMaintenanceStrategies;
        maxTotalPrice?: string;
        minTargetCapacity?: number;
        singleAvailabilityZone?: boolean;
        singleInstanceType?: boolean;
    }

    export interface Ec2FleetTag {
        key: string;
        value: string;
    }

    export interface Ec2FleetTagSpecification {
        resourceType?: enums.ec2.Ec2FleetTagSpecificationResourceType;
        tags?: outputs.ec2.Ec2FleetTag[];
    }

    export interface Ec2FleetTargetCapacitySpecificationRequest {
        defaultTargetCapacityType?: enums.ec2.Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType;
        onDemandTargetCapacity?: number;
        spotTargetCapacity?: number;
        targetCapacityUnitType?: enums.ec2.Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType;
        totalTargetCapacity: number;
    }

    export interface Ec2FleetTotalLocalStorageGbRequest {
        max?: number;
        min?: number;
    }

    export interface Ec2FleetVCpuCountRangeRequest {
        max?: number;
        min?: number;
    }

    export interface EipTag {
        key: string;
        value: string;
    }

    export interface FlowLogTag {
        key: string;
        value: string;
    }

    export interface InstanceAssociationParameter {
        key: string;
        value: string[];
    }

    export interface InstanceBlockDeviceMapping {
        deviceName: string;
        ebs?: outputs.ec2.InstanceEbs;
        noDevice?: outputs.ec2.InstanceNoDevice;
        virtualName?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface InstanceConnectEndpointTag {
        key: string;
        value: string;
    }

    export interface InstanceCpuOptions {
        coreCount?: number;
        threadsPerCore?: number;
    }

    export interface InstanceCreditSpecification {
        cpuCredits?: string;
    }

    export interface InstanceEbs {
        deleteOnTermination?: boolean;
        encrypted?: boolean;
        iops?: number;
        kmsKeyId?: string;
        snapshotId?: string;
        volumeSize?: number;
        volumeType?: string;
    }

    export interface InstanceElasticGpuSpecification {
        type: string;
    }

    export interface InstanceElasticInferenceAccelerator {
        count?: number;
        type: string;
    }

    export interface InstanceEnclaveOptions {
        enabled?: boolean;
    }

    export interface InstanceHibernationOptions {
        configured?: boolean;
    }

    export interface InstanceIpv6Address {
        ipv6Address: string;
    }

    export interface InstanceLaunchTemplateSpecification {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version: string;
    }

    export interface InstanceLicenseSpecification {
        licenseConfigurationArn: string;
    }

    export interface InstanceNetworkInterface {
        associateCarrierIpAddress?: boolean;
        associatePublicIpAddress?: boolean;
        deleteOnTermination?: boolean;
        description?: string;
        deviceIndex: string;
        groupSet?: string[];
        ipv6AddressCount?: number;
        ipv6Addresses?: outputs.ec2.InstanceIpv6Address[];
        networkInterfaceId?: string;
        privateIpAddress?: string;
        privateIpAddresses?: outputs.ec2.InstancePrivateIpAddressSpecification[];
        secondaryPrivateIpAddressCount?: number;
        subnetId?: string;
    }

    export interface InstanceNoDevice {
    }

    export interface InstancePrivateDnsNameOptions {
        enableResourceNameDnsARecord?: boolean;
        enableResourceNameDnsAaaaRecord?: boolean;
        hostnameType?: string;
    }

    export interface InstancePrivateIpAddressSpecification {
        primary: boolean;
        privateIpAddress: string;
    }

    export interface InstanceSsmAssociation {
        associationParameters?: outputs.ec2.InstanceAssociationParameter[];
        documentName: string;
    }

    export interface InstanceTag {
        key: string;
        value: string;
    }

    export interface InstanceVolume {
        device: string;
        volumeId: string;
    }

    export interface InternetGatewayTag {
        key: string;
        value: string;
    }

    /**
     * The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
     */
    export interface IpamOperatingRegion {
        /**
         * The name of the region.
         */
        regionName: string;
    }

    /**
     * An address space to be inserted into this pool. All allocations must be made from this address space.
     */
    export interface IpamPoolProvisionedCidr {
        cidr: string;
    }

    /**
     * The resource associated with this pool's space. Depending on the ResourceType, setting a SourceResource changes which space can be provisioned in this pool and which types of resources can receive allocations
     */
    export interface IpamPoolSourceResource {
        resourceId: string;
        resourceOwner: string;
        resourceRegion: string;
        resourceType: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamPoolTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamResourceDiscoveryAssociationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The regions IPAM Resource Discovery is enabled for. Allows for monitoring.
     */
    export interface IpamResourceDiscoveryIpamOperatingRegion {
        /**
         * The name of the region.
         */
        regionName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamResourceDiscoveryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamScopeTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface KeyPairTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferential chips) on an instance.
     */
    export interface LaunchTemplateAcceleratorCount {
        /**
         * The maximum number of accelerators.
         */
        max?: number;
        /**
         * The minimum number of accelerators.
         */
        min?: number;
    }

    /**
     * The minimum and maximum amount of total accelerator memory, in MiB.
     */
    export interface LaunchTemplateAcceleratorTotalMemoryMiB {
        /**
         * The maximum amount of accelerator memory, in MiB.
         */
        max?: number;
        /**
         * The minimum amount of accelerator memory, in MiB.
         */
        min?: number;
    }

    /**
     * The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps.
     */
    export interface LaunchTemplateBaselineEbsBandwidthMbps {
        /**
         * The maximum baseline bandwidth, in Mbps.
         */
        max?: number;
        /**
         * The minimum baseline bandwidth, in Mbps.
         */
        min?: number;
    }

    /**
     * Information about a block device mapping for an Amazon EC2 launch template.
     */
    export interface LaunchTemplateBlockDeviceMapping {
        /**
         * The user data to make available to the instance.
         */
        deviceName?: string;
        ebs?: outputs.ec2.LaunchTemplateEbs;
        /**
         * To omit the device from the block device mapping, specify an empty string.
         */
        noDevice?: string;
        /**
         * The virtual device name (ephemeralN).
         */
        virtualName?: string;
    }

    /**
     * Specifies an instance's Capacity Reservation targeting option.
     */
    export interface LaunchTemplateCapacityReservationSpecification {
        /**
         * Indicates the instance's Capacity Reservation preferences.
         */
        capacityReservationPreference?: string;
        capacityReservationTarget?: outputs.ec2.LaunchTemplateCapacityReservationTarget;
    }

    /**
     * Specifies a target Capacity Reservation.
     */
    export interface LaunchTemplateCapacityReservationTarget {
        /**
         * The ID of the Capacity Reservation in which to run the instance.
         */
        capacityReservationId?: string;
        /**
         * The ARN of the Capacity Reservation resource group in which to run the instance.
         */
        capacityReservationResourceGroupArn?: string;
    }

    /**
     * Allows customer to specify Connection Tracking options
     */
    export interface LaunchTemplateConnectionTrackingSpecification {
        /**
         * Integer value for TCP Established Timeout
         */
        tcpEstablishedTimeout?: number;
        /**
         * Integer value for UDP Stream Timeout
         */
        udpStreamTimeout?: number;
        /**
         * Integer value for UDP Timeout
         */
        udpTimeout?: number;
    }

    /**
     * specifies the CPU options for an instance.
     */
    export interface LaunchTemplateCpuOptions {
        /**
         * Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only.
         */
        amdSevSnp?: enums.ec2.LaunchTemplateCpuOptionsAmdSevSnp;
        /**
         * The number of CPU cores for the instance.
         */
        coreCount?: number;
        /**
         * The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
         */
        threadsPerCore?: number;
    }

    /**
     * The user data to make available to the instance.
     */
    export interface LaunchTemplateCreditSpecification {
        /**
         * The user data to make available to the instance.
         */
        cpuCredits?: string;
    }

    /**
     * The information for the launch template.
     */
    export interface LaunchTemplateData {
        /**
         * The block device mapping.
         */
        blockDeviceMappings?: outputs.ec2.LaunchTemplateBlockDeviceMapping[];
        capacityReservationSpecification?: outputs.ec2.LaunchTemplateCapacityReservationSpecification;
        cpuOptions?: outputs.ec2.LaunchTemplateCpuOptions;
        creditSpecification?: outputs.ec2.LaunchTemplateCreditSpecification;
        /**
         * Indicates whether to enable the instance for stop protection.
         */
        disableApiStop?: boolean;
        /**
         * If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API.
         */
        disableApiTermination?: boolean;
        /**
         * Indicates whether the instance is optimized for Amazon EBS I/O.
         */
        ebsOptimized?: boolean;
        /**
         * An elastic GPU to associate with the instance.
         */
        elasticGpuSpecifications?: outputs.ec2.LaunchTemplateElasticGpuSpecification[];
        /**
         * The elastic inference accelerator for the instance.
         */
        elasticInferenceAccelerators?: outputs.ec2.LaunchTemplateElasticInferenceAccelerator[];
        enclaveOptions?: outputs.ec2.LaunchTemplateEnclaveOptions;
        hibernationOptions?: outputs.ec2.LaunchTemplateHibernationOptions;
        iamInstanceProfile?: outputs.ec2.LaunchTemplateIamInstanceProfile;
        /**
         * The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
         */
        imageId?: string;
        /**
         * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
         */
        instanceInitiatedShutdownBehavior?: string;
        instanceMarketOptions?: outputs.ec2.LaunchTemplateInstanceMarketOptions;
        instanceRequirements?: outputs.ec2.LaunchTemplateInstanceRequirements;
        instanceType?: string;
        /**
         * The ID of the kernel.
         */
        kernelId?: string;
        /**
         * The name of the EC2 key pair
         */
        keyName?: string;
        /**
         * The license configurations.
         */
        licenseSpecifications?: outputs.ec2.LaunchTemplateLicenseSpecification[];
        maintenanceOptions?: outputs.ec2.LaunchTemplateMaintenanceOptions;
        metadataOptions?: outputs.ec2.LaunchTemplateMetadataOptions;
        monitoring?: outputs.ec2.LaunchTemplateMonitoring;
        /**
         * If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
         */
        networkInterfaces?: outputs.ec2.LaunchTemplateNetworkInterface[];
        placement?: outputs.ec2.LaunchTemplatePlacement;
        privateDnsNameOptions?: outputs.ec2.LaunchTemplatePrivateDnsNameOptions;
        ramDiskId?: string;
        /**
         * One or more security group IDs. 
         */
        securityGroupIds?: string[];
        /**
         * One or more security group names.
         */
        securityGroups?: string[];
        /**
         * The tags to apply to the resources that are created during instance launch.
         */
        tagSpecifications?: outputs.ec2.TagSpecification[];
        /**
         * The user data to make available to the instance.
         */
        userData?: string;
    }

    /**
     * Parameters for a block device for an EBS volume in an Amazon EC2 launch template.
     */
    export interface LaunchTemplateEbs {
        /**
         * Indicates whether the EBS volume is deleted on instance termination.
         */
        deleteOnTermination?: boolean;
        /**
         * Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
         */
        encrypted?: boolean;
        /**
         * The number of I/O operations per second (IOPS).
         */
        iops?: number;
        /**
         * The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.
         */
        kmsKeyId?: string;
        /**
         * The ID of the snapshot.
         */
        snapshotId?: string;
        /**
         * The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.
         */
        throughput?: number;
        /**
         * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.
         */
        volumeSize?: number;
        /**
         * The volume type.
         */
        volumeType?: string;
    }

    /**
     * Specifies a specification for an Elastic GPU for launch template.
     */
    export interface LaunchTemplateElasticGpuSpecification {
        /**
         * The type of Elastic Graphics accelerator.
         */
        type?: string;
    }

    /**
     * Specifies an elastic inference accelerator.
     */
    export interface LaunchTemplateElasticInferenceAccelerator {
        /**
         * The number of elastic inference accelerators to attach to the instance.
         */
        count?: number;
        /**
         * The type of elastic inference accelerator.
         */
        type?: string;
    }

    /**
     * Allows customer to specify ENA-SRD options
     */
    export interface LaunchTemplateEnaSrdSpecification {
        /**
         * Enables TCP ENA-SRD
         */
        enaSrdEnabled?: boolean;
        enaSrdUdpSpecification?: outputs.ec2.LaunchTemplateEnaSrdUdpSpecification;
    }

    /**
     * Allows customer to specify ENA-SRD (UDP) options
     */
    export interface LaunchTemplateEnaSrdUdpSpecification {
        /**
         * Enables UDP ENA-SRD
         */
        enaSrdUdpEnabled?: boolean;
    }

    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    export interface LaunchTemplateEnclaveOptions {
        /**
         * If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
         */
        enabled?: boolean;
    }

    /**
     * Specifies whether your instance is configured for hibernation.
     */
    export interface LaunchTemplateHibernationOptions {
        /**
         * TIf you set this parameter to true, the instance is enabled for hibernation.
         */
        configured?: boolean;
    }

    /**
     * Specifies an IAM instance profile, which is a container for an IAM role for your instance.
     */
    export interface LaunchTemplateIamInstanceProfile {
        /**
         * The Amazon Resource Name (ARN) of the instance profile.
         */
        arn?: string;
        /**
         * The name of the instance profile.
         */
        name?: string;
    }

    /**
     * The market (purchasing) option for the instances.
     */
    export interface LaunchTemplateInstanceMarketOptions {
        /**
         * The market type.
         */
        marketType?: string;
        spotOptions?: outputs.ec2.LaunchTemplateSpotOptions;
    }

    /**
     * The attributes for the instance types.
     */
    export interface LaunchTemplateInstanceRequirements {
        acceleratorCount?: outputs.ec2.LaunchTemplateAcceleratorCount;
        /**
         * Indicates whether instance types must have accelerators by specific manufacturers.
         */
        acceleratorManufacturers?: string[];
        /**
         * The accelerators that must be on the instance type.
         */
        acceleratorNames?: string[];
        acceleratorTotalMemoryMiB?: outputs.ec2.LaunchTemplateAcceleratorTotalMemoryMiB;
        /**
         * The accelerator types that must be on the instance type.
         */
        acceleratorTypes?: string[];
        /**
         * The instance types to apply your specified attributes against.
         */
        allowedInstanceTypes?: string[];
        /**
         * Indicates whether bare metal instance types must be included, excluded, or required.
         */
        bareMetal?: string;
        baselineEbsBandwidthMbps?: outputs.ec2.LaunchTemplateBaselineEbsBandwidthMbps;
        burstablePerformance?: string;
        /**
         * The CPU manufacturers to include.
         */
        cpuManufacturers?: string[];
        /**
         * The instance types to exclude.
         */
        excludedInstanceTypes?: string[];
        /**
         * Indicates whether current or previous generation instance types are included.
         */
        instanceGenerations?: string[];
        /**
         * The user data to make available to the instance.
         */
        localStorage?: string;
        /**
         * The type of local storage that is required.
         */
        localStorageTypes?: string[];
        /**
         * The price protection threshold for Spot Instances.
         */
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        memoryGiBPerVCpu?: outputs.ec2.LaunchTemplateMemoryGiBPerVCpu;
        memoryMiB?: outputs.ec2.LaunchTemplateMemoryMiB;
        networkBandwidthGbps?: outputs.ec2.LaunchTemplateNetworkBandwidthGbps;
        networkInterfaceCount?: outputs.ec2.LaunchTemplateNetworkInterfaceCount;
        /**
         * The price protection threshold for On-Demand Instances.
         */
        onDemandMaxPricePercentageOverLowestPrice?: number;
        /**
         * Indicates whether instance types must support hibernation for On-Demand Instances.
         */
        requireHibernateSupport?: boolean;
        /**
         * The price protection threshold for Spot Instances.
         */
        spotMaxPricePercentageOverLowestPrice?: number;
        totalLocalStorageGb?: outputs.ec2.LaunchTemplateTotalLocalStorageGb;
        vCpuCount?: outputs.ec2.LaunchTemplateVCpuCount;
    }

    /**
     * Specifies an IPv4 prefix for a network interface.
     */
    export interface LaunchTemplateIpv4PrefixSpecification {
        /**
         * The IPv4 prefix.
         */
        ipv4Prefix?: string;
    }

    /**
     * Specifies an IPv6 address.
     */
    export interface LaunchTemplateIpv6Add {
        ipv6Address?: string;
    }

    /**
     * Specifies an IPv6 prefix for a network interface.
     */
    export interface LaunchTemplateIpv6PrefixSpecification {
        ipv6Prefix?: string;
    }

    /**
     * Specifies a license configuration for an instance.
     */
    export interface LaunchTemplateLicenseSpecification {
        /**
         * The Amazon Resource Name (ARN) of the license configuration.
         */
        licenseConfigurationArn?: string;
    }

    /**
     * The maintenance options of your instance.
     */
    export interface LaunchTemplateMaintenanceOptions {
        /**
         * Disables the automatic recovery behavior of your instance or sets it to default.
         */
        autoRecovery?: string;
        /**
         * Disables the automatic reboot-migration behavior of your instance or sets it to default.
         */
        rebootMigration?: string;
    }

    /**
     * The minimum and maximum amount of memory per vCPU, in GiB.
     */
    export interface LaunchTemplateMemoryGiBPerVCpu {
        /**
         * The maximum amount of memory per vCPU, in GiB.
         */
        max?: number;
        /**
         * TThe minimum amount of memory per vCPU, in GiB.
         */
        min?: number;
    }

    /**
     * The minimum and maximum amount of memory, in MiB.
     */
    export interface LaunchTemplateMemoryMiB {
        /**
         * The maximum amount of memory, in MiB.
         */
        max?: number;
        /**
         * The minimum amount of memory, in MiB.
         */
        min?: number;
    }

    /**
     * The metadata options for the instance.
     */
    export interface LaunchTemplateMetadataOptions {
        /**
         * Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.
         */
        httpEndpoint?: string;
        /**
         * Enables or disables the IPv6 endpoint for the instance metadata service.
         */
        httpProtocolIpv6?: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.
         */
        httpPutResponseHopLimit?: number;
        /**
         * IMDSv2 uses token-backed sessions.
         */
        httpTokens?: string;
        /**
         * Set to enabled to allow access to instance tags from the instance metadata.
         */
        instanceMetadataTags?: string;
    }

    /**
     * Specifies whether detailed monitoring is enabled for an instance.
     */
    export interface LaunchTemplateMonitoring {
        /**
         * Specify true to enable detailed monitoring.
         */
        enabled?: boolean;
    }

    /**
     * The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
     */
    export interface LaunchTemplateNetworkBandwidthGbps {
        /**
         * The maximum amount of network bandwidth, in Gbps.
         */
        max?: number;
        /**
         * The minimum amount of network bandwidth, in Gbps.
         */
        min?: number;
    }

    /**
     * Specifies the parameters for a network interface.
     */
    export interface LaunchTemplateNetworkInterface {
        /**
         * Indicates whether to associate a Carrier IP address with eth0 for a new network interface.
         */
        associateCarrierIpAddress?: boolean;
        /**
         * Associates a public IPv4 address with eth0 for a new network interface.
         */
        associatePublicIpAddress?: boolean;
        connectionTrackingSpecification?: outputs.ec2.LaunchTemplateConnectionTrackingSpecification;
        /**
         * Indicates whether the network interface is deleted when the instance is terminated.
         */
        deleteOnTermination?: boolean;
        /**
         * A description for the network interface.
         */
        description?: string;
        /**
         * The device index for the network interface attachment.
         */
        deviceIndex?: number;
        enaSrdSpecification?: outputs.ec2.LaunchTemplateEnaSrdSpecification;
        /**
         * The IDs of one or more security groups.
         */
        groups?: string[];
        /**
         * The type of network interface.
         */
        interfaceType?: string;
        /**
         * The number of IPv4 prefixes to be automatically assigned to the network interface.
         */
        ipv4PrefixCount?: number;
        /**
         * One or more IPv4 prefixes to be assigned to the network interface.
         */
        ipv4Prefixes?: outputs.ec2.LaunchTemplateIpv4PrefixSpecification[];
        /**
         * The number of IPv6 addresses to assign to a network interface.
         */
        ipv6AddressCount?: number;
        /**
         * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.
         */
        ipv6Addresses?: outputs.ec2.LaunchTemplateIpv6Add[];
        /**
         * The number of IPv6 prefixes to be automatically assigned to the network interface.
         */
        ipv6PrefixCount?: number;
        /**
         * One or more IPv6 prefixes to be assigned to the network interface.
         */
        ipv6Prefixes?: outputs.ec2.LaunchTemplateIpv6PrefixSpecification[];
        /**
         * The index of the network card.
         */
        networkCardIndex?: number;
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * Enables the first IPv6 global unique address (GUA) on a dual stack or IPv6-only ENI immutable.
         */
        primaryIpv6?: boolean;
        /**
         * The primary private IPv4 address of the network interface.
         */
        privateIpAddress?: string;
        /**
         * One or more private IPv4 addresses.
         */
        privateIpAddresses?: outputs.ec2.LaunchTemplatePrivateIpAdd[];
        /**
         * The number of secondary private IPv4 addresses to assign to a network interface.
         */
        secondaryPrivateIpAddressCount?: number;
        /**
         * The ID of the subnet for the network interface.
         */
        subnetId?: string;
    }

    /**
     * TThe minimum and maximum number of network interfaces.
     */
    export interface LaunchTemplateNetworkInterfaceCount {
        max?: number;
        min?: number;
    }

    /**
     * Specifies the placement of an instance.
     */
    export interface LaunchTemplatePlacement {
        /**
         * The affinity setting for an instance on a Dedicated Host.
         */
        affinity?: string;
        /**
         * The Availability Zone for the instance.
         */
        availabilityZone?: string;
        /**
         * The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.
         */
        groupId?: string;
        /**
         * The name of the placement group for the instance.
         */
        groupName?: string;
        /**
         * The ID of the Dedicated Host for the instance.
         */
        hostId?: string;
        /**
         * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
         */
        hostResourceGroupArn?: string;
        /**
         * The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
         */
        partitionNumber?: number;
        /**
         * Reserved for future use.
         */
        spreadDomain?: string;
        /**
         * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
         */
        tenancy?: string;
    }

    /**
     * Describes the options for instance hostnames.
     */
    export interface LaunchTemplatePrivateDnsNameOptions {
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        enableResourceNameDnsARecord?: boolean;
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
         */
        enableResourceNameDnsAaaaRecord?: boolean;
        /**
         * The type of hostname for EC2 instances.
         */
        hostnameType?: string;
    }

    /**
     * Specifies a secondary private IPv4 address for a network interface.
     */
    export interface LaunchTemplatePrivateIpAdd {
        /**
         * Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
         */
        primary?: boolean;
        /**
         * The private IPv4 address.
         */
        privateIpAddress?: string;
    }

    /**
     * Specifies options for Spot Instances.
     */
    export interface LaunchTemplateSpotOptions {
        /**
         * Deprecated
         */
        blockDurationMinutes?: number;
        /**
         * The behavior when a Spot Instance is interrupted. The default is terminate.
         */
        instanceInterruptionBehavior?: string;
        /**
         * The maximum hourly price you're willing to pay for the Spot Instances.
         */
        maxPrice?: string;
        /**
         * The Spot Instance request type.
         */
        spotInstanceType?: string;
        /**
         * The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
         */
        validUntil?: string;
    }

    /**
     * The user data to make available to the instance.
     */
    export interface LaunchTemplateTag {
        key: string;
        value: string;
    }

    /**
     * Specifies the tags to apply to the launch template during creation.
     */
    export interface LaunchTemplateTagSpecification {
        /**
         * The type of resource to tag.
         */
        resourceType?: string;
        /**
         * The tags for the resource.
         */
        tags?: outputs.ec2.LaunchTemplateTag[];
    }

    /**
     * The minimum and maximum amount of total local storage, in GB.
     */
    export interface LaunchTemplateTotalLocalStorageGb {
        max?: number;
        min?: number;
    }

    /**
     * The minimum and maximum number of vCPUs.
     */
    export interface LaunchTemplateVCpuCount {
        /**
         * The maximum number of vCPUs.
         */
        max?: number;
        /**
         * The minimum number of vCPUs.
         */
        min?: number;
    }

    export interface LocalGatewayRouteTableTag {
        key?: string;
        value?: string;
    }

    export interface LocalGatewayRouteTableVirtualInterfaceGroupAssociationTag {
        key?: string;
        value?: string;
    }

    export interface LocalGatewayRouteTableVpcAssociationTag {
        key?: string;
        value?: string;
    }

    export interface NatGatewayTag {
        key: string;
        value: string;
    }

    export interface NetworkAclEntryIcmp {
        code?: number;
        type?: number;
    }

    export interface NetworkAclEntryPortRange {
        from?: number;
        to?: number;
    }

    export interface NetworkAclTag {
        key: string;
        value: string;
    }

    export interface NetworkInsightsAccessScopeAccessScopePathRequest {
        destination?: outputs.ec2.NetworkInsightsAccessScopePathStatementRequest;
        source?: outputs.ec2.NetworkInsightsAccessScopePathStatementRequest;
        throughResources?: outputs.ec2.NetworkInsightsAccessScopeThroughResourcesStatementRequest[];
    }

    export interface NetworkInsightsAccessScopeAnalysisTag {
        key: string;
        value?: string;
    }

    export interface NetworkInsightsAccessScopePacketHeaderStatementRequest {
        destinationAddresses?: string[];
        destinationPorts?: string[];
        destinationPrefixLists?: string[];
        protocols?: enums.ec2.NetworkInsightsAccessScopeProtocol[];
        sourceAddresses?: string[];
        sourcePorts?: string[];
        sourcePrefixLists?: string[];
    }

    export interface NetworkInsightsAccessScopePathStatementRequest {
        packetHeaderStatement?: outputs.ec2.NetworkInsightsAccessScopePacketHeaderStatementRequest;
        resourceStatement?: outputs.ec2.NetworkInsightsAccessScopeResourceStatementRequest;
    }

    export interface NetworkInsightsAccessScopeResourceStatementRequest {
        resourceTypes?: string[];
        resources?: string[];
    }

    export interface NetworkInsightsAccessScopeTag {
        key: string;
        value?: string;
    }

    export interface NetworkInsightsAccessScopeThroughResourcesStatementRequest {
        resourceStatement?: outputs.ec2.NetworkInsightsAccessScopeResourceStatementRequest;
    }

    export interface NetworkInsightsAnalysisAdditionalDetail {
        additionalDetailType?: string;
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        loadBalancers?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        serviceName?: string;
    }

    export interface NetworkInsightsAnalysisAlternatePathHint {
        componentArn?: string;
        componentId?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisAclRule {
        cidr?: string;
        egress?: boolean;
        portRange?: outputs.ec2.NetworkInsightsAnalysisPortRange;
        protocol?: string;
        ruleAction?: string;
        ruleNumber?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisComponent {
        arn?: string;
        id?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisLoadBalancerListener {
        instancePort?: number;
        loadBalancerPort?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisLoadBalancerTarget {
        address?: string;
        availabilityZone?: string;
        instance?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        port?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisPacketHeader {
        destinationAddresses?: string[];
        destinationPortRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
        protocol?: string;
        sourceAddresses?: string[];
        sourcePortRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
    }

    export interface NetworkInsightsAnalysisAnalysisRouteTableRoute {
        destinationCidr?: string;
        destinationPrefixListId?: string;
        egressOnlyInternetGatewayId?: string;
        gatewayId?: string;
        instanceId?: string;
        natGatewayId?: string;
        networkInterfaceId?: string;
        origin?: string;
        state?: string;
        transitGatewayId?: string;
        vpcPeeringConnectionId?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisSecurityGroupRule {
        cidr?: string;
        direction?: string;
        portRange?: outputs.ec2.NetworkInsightsAnalysisPortRange;
        prefixListId?: string;
        protocol?: string;
        securityGroupId?: string;
    }

    export interface NetworkInsightsAnalysisExplanation {
        acl?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        aclRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisAclRule;
        address?: string;
        addresses?: string[];
        attachedTo?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        availabilityZones?: string[];
        cidrs?: string[];
        classicLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisLoadBalancerListener;
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        componentAccount?: string;
        componentRegion?: string;
        customerGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        destination?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        destinationVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        direction?: string;
        elasticLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        explanationCode?: string;
        ingressRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        internetGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        loadBalancerArn?: string;
        loadBalancerListenerPort?: number;
        loadBalancerTarget?: outputs.ec2.NetworkInsightsAnalysisAnalysisLoadBalancerTarget;
        loadBalancerTargetGroup?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        loadBalancerTargetGroups?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        loadBalancerTargetPort?: number;
        missingComponent?: string;
        natGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        networkInterface?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        packetField?: string;
        port?: number;
        portRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
        prefixList?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        protocols?: string[];
        routeTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        routeTableRoute?: outputs.ec2.NetworkInsightsAnalysisAnalysisRouteTableRoute;
        securityGroup?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        securityGroupRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisSecurityGroupRule;
        securityGroups?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        sourceVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        state?: string;
        subnet?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        subnetRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGatewayAttachment?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGatewayRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGatewayRouteTableRoute?: outputs.ec2.NetworkInsightsAnalysisTransitGatewayRouteTableRoute;
        vpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        vpcEndpoint?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        vpcPeeringConnection?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        vpnConnection?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        vpnGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
    }

    export interface NetworkInsightsAnalysisPathComponent {
        aclRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisAclRule;
        additionalDetails?: outputs.ec2.NetworkInsightsAnalysisAdditionalDetail[];
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        destinationVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        elasticLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        explanations?: outputs.ec2.NetworkInsightsAnalysisExplanation[];
        inboundHeader?: outputs.ec2.NetworkInsightsAnalysisAnalysisPacketHeader;
        outboundHeader?: outputs.ec2.NetworkInsightsAnalysisAnalysisPacketHeader;
        routeTableRoute?: outputs.ec2.NetworkInsightsAnalysisAnalysisRouteTableRoute;
        securityGroupRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisSecurityGroupRule;
        sequenceNumber?: number;
        serviceName?: string;
        sourceVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        subnet?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        transitGatewayRouteTableRoute?: outputs.ec2.NetworkInsightsAnalysisTransitGatewayRouteTableRoute;
        vpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
    }

    export interface NetworkInsightsAnalysisPortRange {
        from?: number;
        to?: number;
    }

    export interface NetworkInsightsAnalysisTag {
        key: string;
        value?: string;
    }

    export interface NetworkInsightsAnalysisTransitGatewayRouteTableRoute {
        attachmentId?: string;
        destinationCidr?: string;
        prefixListId?: string;
        resourceId?: string;
        resourceType?: string;
        routeOrigin?: string;
        state?: string;
    }

    export interface NetworkInsightsPathFilterPortRange {
        fromPort?: number;
        toPort?: number;
    }

    export interface NetworkInsightsPathPathFilter {
        destinationAddress?: string;
        destinationPortRange?: outputs.ec2.NetworkInsightsPathFilterPortRange;
        sourceAddress?: string;
        sourcePortRange?: outputs.ec2.NetworkInsightsPathFilterPortRange;
    }

    export interface NetworkInsightsPathTag {
        key: string;
        value?: string;
    }

    export interface NetworkInterfaceConnectionTrackingSpecification {
        tcpEstablishedTimeout?: number;
        udpStreamTimeout?: number;
        udpTimeout?: number;
    }

    export interface NetworkInterfaceInstanceIpv6Address {
        ipv6Address: string;
    }

    export interface NetworkInterfaceIpv4PrefixSpecification {
        ipv4Prefix: string;
    }

    export interface NetworkInterfaceIpv6PrefixSpecification {
        ipv6Prefix: string;
    }

    export interface NetworkInterfacePrivateIpAddressSpecification {
        primary: boolean;
        privateIpAddress: string;
    }

    export interface NetworkInterfaceTag {
        key: string;
        value: string;
    }

    /**
     * The options for the transit gateway vpc attachment.
     */
    export interface OptionsProperties {
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        applianceModeSupport?: string;
        /**
         * Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable
         */
        dnsSupport?: string;
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        ipv6Support?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PlacementGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface PrefixListEntry {
        cidr: string;
        description?: string;
    }

    export interface PrefixListTag {
        key: string;
        value?: string;
    }

    export interface PrivateDnsNameOptionsOnLaunchProperties {
        enableResourceNameDnsARecord?: boolean;
        enableResourceNameDnsAaaaRecord?: boolean;
        hostnameType?: string;
    }

    export interface RouteTableTag {
        key: string;
        value: string;
    }

    export interface SecurityGroupEgress {
        cidrIp?: string;
        cidrIpv6?: string;
        description?: string;
        destinationPrefixListId?: string;
        destinationSecurityGroupId?: string;
        fromPort?: number;
        ipProtocol: string;
        toPort?: number;
    }

    export interface SecurityGroupIngress {
        cidrIp?: string;
        cidrIpv6?: string;
        description?: string;
        fromPort?: number;
        ipProtocol: string;
        sourcePrefixListId?: string;
        sourceSecurityGroupId?: string;
        sourceSecurityGroupName?: string;
        sourceSecurityGroupOwnerId?: string;
        toPort?: number;
    }

    export interface SecurityGroupTag {
        key: string;
        value: string;
    }

    export interface SpotFleetAcceleratorCountRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetAcceleratorTotalMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetBaselineEbsBandwidthMbpsRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetBlockDeviceMapping {
        deviceName: string;
        ebs?: outputs.ec2.SpotFleetEbsBlockDevice;
        noDevice?: string;
        virtualName?: string;
    }

    export interface SpotFleetClassicLoadBalancer {
        name: string;
    }

    export interface SpotFleetClassicLoadBalancersConfig {
        classicLoadBalancers: outputs.ec2.SpotFleetClassicLoadBalancer[];
    }

    export interface SpotFleetEbsBlockDevice {
        deleteOnTermination?: boolean;
        encrypted?: boolean;
        iops?: number;
        snapshotId?: string;
        volumeSize?: number;
        volumeType?: enums.ec2.SpotFleetEbsBlockDeviceVolumeType;
    }

    export interface SpotFleetFleetLaunchTemplateSpecification {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version: string;
    }

    export interface SpotFleetGroupIdentifier {
        groupId: string;
    }

    export interface SpotFleetIamInstanceProfileSpecification {
        arn?: string;
    }

    export interface SpotFleetInstanceIpv6Address {
        ipv6Address: string;
    }

    export interface SpotFleetInstanceNetworkInterfaceSpecification {
        associatePublicIpAddress?: boolean;
        deleteOnTermination?: boolean;
        description?: string;
        deviceIndex?: number;
        groups?: string[];
        ipv6AddressCount?: number;
        ipv6Addresses?: outputs.ec2.SpotFleetInstanceIpv6Address[];
        networkInterfaceId?: string;
        privateIpAddresses?: outputs.ec2.SpotFleetPrivateIpAddressSpecification[];
        secondaryPrivateIpAddressCount?: number;
        subnetId?: string;
    }

    export interface SpotFleetInstanceRequirementsRequest {
        acceleratorCount?: outputs.ec2.SpotFleetAcceleratorCountRequest;
        acceleratorManufacturers?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem[];
        acceleratorNames?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorNamesItem[];
        acceleratorTotalMemoryMiB?: outputs.ec2.SpotFleetAcceleratorTotalMemoryMiBRequest;
        acceleratorTypes?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorTypesItem[];
        allowedInstanceTypes?: string[];
        bareMetal?: enums.ec2.SpotFleetInstanceRequirementsRequestBareMetal;
        baselineEbsBandwidthMbps?: outputs.ec2.SpotFleetBaselineEbsBandwidthMbpsRequest;
        burstablePerformance?: enums.ec2.SpotFleetInstanceRequirementsRequestBurstablePerformance;
        cpuManufacturers?: enums.ec2.SpotFleetInstanceRequirementsRequestCpuManufacturersItem[];
        excludedInstanceTypes?: string[];
        instanceGenerations?: enums.ec2.SpotFleetInstanceRequirementsRequestInstanceGenerationsItem[];
        localStorage?: enums.ec2.SpotFleetInstanceRequirementsRequestLocalStorage;
        localStorageTypes?: enums.ec2.SpotFleetInstanceRequirementsRequestLocalStorageTypesItem[];
        memoryGiBPerVCpu?: outputs.ec2.SpotFleetMemoryGiBPerVCpuRequest;
        memoryMiB?: outputs.ec2.SpotFleetMemoryMiBRequest;
        networkBandwidthGbps?: outputs.ec2.SpotFleetNetworkBandwidthGbpsRequest;
        networkInterfaceCount?: outputs.ec2.SpotFleetNetworkInterfaceCountRequest;
        onDemandMaxPricePercentageOverLowestPrice?: number;
        requireHibernateSupport?: boolean;
        spotMaxPricePercentageOverLowestPrice?: number;
        totalLocalStorageGb?: outputs.ec2.SpotFleetTotalLocalStorageGbRequest;
        vCpuCount?: outputs.ec2.SpotFleetVCpuCountRangeRequest;
    }

    export interface SpotFleetLaunchSpecification {
        blockDeviceMappings?: outputs.ec2.SpotFleetBlockDeviceMapping[];
        ebsOptimized?: boolean;
        iamInstanceProfile?: outputs.ec2.SpotFleetIamInstanceProfileSpecification;
        imageId: string;
        instanceRequirements?: outputs.ec2.SpotFleetInstanceRequirementsRequest;
        instanceType?: string;
        kernelId?: string;
        keyName?: string;
        monitoring?: outputs.ec2.SpotFleetMonitoring;
        networkInterfaces?: outputs.ec2.SpotFleetInstanceNetworkInterfaceSpecification[];
        placement?: outputs.ec2.SpotFleetSpotPlacement;
        ramdiskId?: string;
        securityGroups?: outputs.ec2.SpotFleetGroupIdentifier[];
        spotPrice?: string;
        subnetId?: string;
        tagSpecifications?: outputs.ec2.SpotFleetTagSpecification[];
        userData?: string;
        weightedCapacity?: number;
    }

    export interface SpotFleetLaunchTemplateConfig {
        launchTemplateSpecification?: outputs.ec2.SpotFleetFleetLaunchTemplateSpecification;
        overrides?: outputs.ec2.SpotFleetLaunchTemplateOverrides[];
    }

    export interface SpotFleetLaunchTemplateOverrides {
        availabilityZone?: string;
        instanceRequirements?: outputs.ec2.SpotFleetInstanceRequirementsRequest;
        instanceType?: string;
        priority?: number;
        spotPrice?: string;
        subnetId?: string;
        weightedCapacity?: number;
    }

    export interface SpotFleetLoadBalancersConfig {
        classicLoadBalancersConfig?: outputs.ec2.SpotFleetClassicLoadBalancersConfig;
        targetGroupsConfig?: outputs.ec2.SpotFleetTargetGroupsConfig;
    }

    export interface SpotFleetMemoryGiBPerVCpuRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetMemoryMiBRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetMonitoring {
        enabled?: boolean;
    }

    export interface SpotFleetNetworkBandwidthGbpsRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetNetworkInterfaceCountRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetPrivateIpAddressSpecification {
        primary?: boolean;
        privateIpAddress: string;
    }

    export interface SpotFleetRequestConfigData {
        allocationStrategy?: enums.ec2.SpotFleetRequestConfigDataAllocationStrategy;
        context?: string;
        excessCapacityTerminationPolicy?: enums.ec2.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy;
        iamFleetRole: string;
        instanceInterruptionBehavior?: enums.ec2.SpotFleetRequestConfigDataInstanceInterruptionBehavior;
        instancePoolsToUseCount?: number;
        launchSpecifications?: outputs.ec2.SpotFleetLaunchSpecification[];
        launchTemplateConfigs?: outputs.ec2.SpotFleetLaunchTemplateConfig[];
        loadBalancersConfig?: outputs.ec2.SpotFleetLoadBalancersConfig;
        onDemandAllocationStrategy?: string;
        onDemandMaxTotalPrice?: string;
        onDemandTargetCapacity?: number;
        replaceUnhealthyInstances?: boolean;
        spotMaintenanceStrategies?: outputs.ec2.SpotFleetSpotMaintenanceStrategies;
        spotMaxTotalPrice?: string;
        spotPrice?: string;
        tagSpecifications?: outputs.ec2.SpotFleetTagSpecification[];
        targetCapacity: number;
        targetCapacityUnitType?: enums.ec2.SpotFleetRequestConfigDataTargetCapacityUnitType;
        terminateInstancesWithExpiration?: boolean;
        type?: enums.ec2.SpotFleetRequestConfigDataType;
        validFrom?: string;
        validUntil?: string;
    }

    export interface SpotFleetSpotCapacityRebalance {
        replacementStrategy?: enums.ec2.SpotFleetSpotCapacityRebalanceReplacementStrategy;
        terminationDelay?: number;
    }

    export interface SpotFleetSpotMaintenanceStrategies {
        capacityRebalance?: outputs.ec2.SpotFleetSpotCapacityRebalance;
    }

    export interface SpotFleetSpotPlacement {
        availabilityZone?: string;
        groupName?: string;
        tenancy?: enums.ec2.SpotFleetSpotPlacementTenancy;
    }

    export interface SpotFleetTag {
        key: string;
        value: string;
    }

    export interface SpotFleetTagSpecification {
        resourceType?: enums.ec2.SpotFleetTagSpecificationResourceType;
        tags?: outputs.ec2.SpotFleetTag[];
    }

    export interface SpotFleetTargetGroup {
        arn: string;
    }

    export interface SpotFleetTargetGroupsConfig {
        targetGroups: outputs.ec2.SpotFleetTargetGroup[];
    }

    export interface SpotFleetTotalLocalStorageGbRequest {
        max?: number;
        min?: number;
    }

    export interface SpotFleetVCpuCountRangeRequest {
        max?: number;
        min?: number;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface SseSpecificationProperties {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    export interface SubnetTag {
        key: string;
        value: string;
    }

    /**
     * Specifies the tags to apply to a resource when the resource is created for the launch template.
     */
    export interface TagSpecification {
        /**
         * The type of resource to tag.
         */
        resourceType?: string;
        /**
         * The tags for the resource.
         */
        tags?: outputs.ec2.LaunchTemplateTag[];
    }

    export interface TrafficMirrorFilterRuleTrafficMirrorPortRange {
        fromPort: number;
        toPort: number;
    }

    export interface TrafficMirrorFilterTag {
        key: string;
        value: string;
    }

    export interface TrafficMirrorSessionTag {
        key: string;
        value: string;
    }

    export interface TrafficMirrorTargetTag {
        key: string;
        value: string;
    }

    export interface TransitGatewayAttachmentTag {
        key: string;
        value: string;
    }

    export interface TransitGatewayConnectOptions {
        /**
         * The tunnel protocol.
         */
        protocol?: string;
    }

    export interface TransitGatewayConnectTag {
        /**
         * The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
         */
        key?: string;
        /**
         * The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
         */
        value?: string;
    }

    export interface TransitGatewayMulticastDomainTag {
        /**
         * The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
         */
        key?: string;
        /**
         * The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
         */
        value?: string;
    }

    export interface TransitGatewayPeeringAttachmentPeeringAttachmentStatus {
        /**
         * The status code.
         */
        code?: string;
        /**
         * The status message, if applicable.
         */
        message?: string;
    }

    export interface TransitGatewayPeeringAttachmentTag {
        /**
         * The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
         */
        key?: string;
        /**
         * The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
         */
        value?: string;
    }

    export interface TransitGatewayRouteTableTag {
        /**
         * The key of the associated tag key-value pair
         */
        key: string;
        /**
         * The value of the associated tag key-value pair
         */
        value: string;
    }

    export interface TransitGatewayTag {
        key: string;
        value: string;
    }

    export interface TransitGatewayVpcAttachmentTag {
        key: string;
        value: string;
    }

    /**
     * The load balancer details if creating the AWS Verified Access endpoint as load-balancertype.
     */
    export interface VerifiedAccessEndpointLoadBalancerOptions {
        /**
         * The ARN of the load balancer.
         */
        loadBalancerArn?: string;
        /**
         * The IP port number.
         */
        port?: number;
        /**
         * The IP protocol.
         */
        protocol?: string;
        /**
         * The IDs of the subnets.
         */
        subnetIds?: string[];
    }

    /**
     * The options for network-interface type endpoint.
     */
    export interface VerifiedAccessEndpointNetworkInterfaceOptions {
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * The IP port number.
         */
        port?: number;
        /**
         * The IP protocol.
         */
        protocol?: string;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface VerifiedAccessEndpointSseSpecification {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VerifiedAccessEndpointTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface VerifiedAccessGroupSseSpecification {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VerifiedAccessGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VerifiedAccessInstanceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The configuration options for AWS Verified Access instances.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogs {
        /**
         * Sends Verified Access logs to CloudWatch Logs.
         */
        cloudWatchLogs?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsCloudWatchLogsProperties;
        /**
         * Include claims from trust providers in Verified Access logs.
         */
        includeTrustContext?: boolean;
        /**
         * Sends Verified Access logs to Kinesis.
         */
        kinesisDataFirehose?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsKinesisDataFirehoseProperties;
        /**
         * Select log version for Verified Access logs.
         */
        logVersion?: string;
        /**
         * Sends Verified Access logs to Amazon S3.
         */
        s3?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsS3Properties;
    }

    /**
     * Sends Verified Access logs to CloudWatch Logs.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsCloudWatchLogsProperties {
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
        /**
         * The ID of the CloudWatch Logs log group.
         */
        logGroup?: string;
    }

    /**
     * Sends Verified Access logs to Kinesis.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsKinesisDataFirehoseProperties {
        /**
         * The ID of the delivery stream.
         */
        deliveryStream?: string;
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Sends Verified Access logs to Amazon S3.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsS3Properties {
        /**
         * The bucket name.
         */
        bucketName?: string;
        /**
         * The ID of the AWS account that owns the Amazon S3 bucket.
         */
        bucketOwner?: string;
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
        /**
         * The bucket prefix.
         */
        prefix?: string;
    }

    /**
     * A Verified Access Trust Provider.
     */
    export interface VerifiedAccessInstanceVerifiedAccessTrustProvider {
        /**
         * The description of trust provider.
         */
        description?: string;
        /**
         * The type of device-based trust provider.
         */
        deviceTrustProviderType?: string;
        /**
         * The type of trust provider (user- or device-based).
         */
        trustProviderType?: string;
        /**
         * The type of user-based trust provider.
         */
        userTrustProviderType?: string;
        /**
         * The ID of the trust provider.
         */
        verifiedAccessTrustProviderId?: string;
    }

    /**
     * The options for device identity based trust providers.
     */
    export interface VerifiedAccessTrustProviderDeviceOptions {
        /**
         * URL Verified Access will use to verify authenticity of the device tokens.
         */
        publicSigningKeyUrl?: string;
        /**
         * The ID of the tenant application with the device-identity provider.
         */
        tenantId?: string;
    }

    /**
     * The OpenID Connect details for an oidc -type, user-identity based trust provider.
     */
    export interface VerifiedAccessTrustProviderOidcOptions {
        /**
         * The OIDC authorization endpoint.
         */
        authorizationEndpoint?: string;
        /**
         * The client identifier.
         */
        clientId?: string;
        /**
         * The client secret.
         */
        clientSecret?: string;
        /**
         * The OIDC issuer.
         */
        issuer?: string;
        /**
         * OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to details of a user. Each scope returns a specific set of user attributes.
         */
        scope?: string;
        /**
         * The OIDC token endpoint.
         */
        tokenEndpoint?: string;
        /**
         * The OIDC user info endpoint.
         */
        userInfoEndpoint?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VerifiedAccessTrustProviderTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface VolumeTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VpcPeeringConnectionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface VpcTag {
        key: string;
        value: string;
    }

    export interface VpnConnectionTag {
        key: string;
        value: string;
    }

    export interface VpnConnectionVpnTunnelOptionsSpecification {
        preSharedKey?: string;
        tunnelInsideCidr?: string;
    }

    export interface VpnGatewayTag {
        key: string;
        value: string;
    }

}

export namespace ecr {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface PublicRepositoryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * An object representing the replication configuration for a registry.
     */
    export interface ReplicationConfiguration {
        /**
         * An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
         */
        rules: outputs.ecr.ReplicationConfigurationReplicationRule[];
    }

    /**
     * An array of objects representing the details of a replication destination.
     */
    export interface ReplicationConfigurationReplicationDestination {
        region: string;
        registryId: string;
    }

    /**
     * An array of objects representing the details of a replication destination.
     */
    export interface ReplicationConfigurationReplicationRule {
        /**
         * An array of objects representing the details of a replication destination.
         */
        destinations: outputs.ecr.ReplicationConfigurationReplicationDestination[];
        /**
         * An array of objects representing the details of a repository filter.
         */
        repositoryFilters?: outputs.ecr.ReplicationConfigurationRepositoryFilter[];
    }

    /**
     * An array of objects representing the details of a repository filter.
     */
    export interface ReplicationConfigurationRepositoryFilter {
        filter: string;
        filterType: enums.ecr.ReplicationConfigurationFilterType;
    }

    /**
     * The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see <link>
     */
    export interface RepositoryCatalogDataProperties {
        aboutText?: string;
        architectures?: string[];
        operatingSystems?: string[];
        repositoryDescription?: string;
        usageText?: string;
    }

    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
     *
     * By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *
     * For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
     */
    export interface RepositoryEncryptionConfiguration {
        encryptionType: enums.ecr.RepositoryEncryptionType;
        kmsKey?: string;
    }

    /**
     * The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
     */
    export interface RepositoryImageScanningConfiguration {
        scanOnPush?: boolean;
    }

    /**
     * The LifecyclePolicy property type specifies a lifecycle policy. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    export interface RepositoryLifecyclePolicy {
        lifecyclePolicyText?: string;
        registryId?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RepositoryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace ecs {
    export interface CapacityProviderAutoScalingGroupProvider {
        autoScalingGroupArn: string;
        managedDraining?: enums.ecs.CapacityProviderAutoScalingGroupProviderManagedDraining;
        managedScaling?: outputs.ecs.CapacityProviderManagedScaling;
        managedTerminationProtection?: enums.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection;
    }

    /**
     * The managed scaling settings for the Auto Scaling group capacity provider.
     */
    export interface CapacityProviderManagedScaling {
        instanceWarmupPeriod?: number;
        maximumScalingStepSize?: number;
        minimumScalingStepSize?: number;
        status?: enums.ecs.CapacityProviderManagedScalingStatus;
        targetCapacity?: number;
    }

    export interface CapacityProviderTag {
        key?: string;
        value?: string;
    }

    export interface ClusterCapacityProviderAssociationsCapacityProviderStrategy {
        base?: number;
        capacityProvider: enums.ecs.ClusterCapacityProviderAssociationsCapacityProvider | string;
        weight?: number;
    }

    /**
     * A capacity provider strategy consists of one or more capacity providers along with the `base` and `weight` to assign to them. A capacity provider must be associated with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders API is used to associate a capacity provider with a cluster. Only capacity providers with an `ACTIVE` or `UPDATING` status can be used.
     */
    export interface ClusterCapacityProviderStrategyItem {
        base?: number;
        capacityProvider?: string;
        weight?: number;
    }

    /**
     * The configurations to be set at cluster level.
     */
    export interface ClusterConfiguration {
        executeCommandConfiguration?: outputs.ecs.ClusterExecuteCommandConfiguration;
    }

    /**
     * The configuration for ExecuteCommand.
     */
    export interface ClusterExecuteCommandConfiguration {
        kmsKeyId?: string;
        logConfiguration?: outputs.ecs.ClusterExecuteCommandLogConfiguration;
        logging?: string;
    }

    /**
     * The session logging configuration for ExecuteCommand.
     */
    export interface ClusterExecuteCommandLogConfiguration {
        cloudWatchEncryptionEnabled?: boolean;
        cloudWatchLogGroupName?: string;
        s3BucketName?: string;
        s3EncryptionEnabled?: boolean;
        s3KeyPrefix?: string;
    }

    /**
     * Service Connect Configuration default for all services or tasks within this cluster
     */
    export interface ClusterServiceConnectDefaults {
        /**
         * Service Connect Namespace Name or ARN default for all services or tasks within this cluster
         */
        namespace?: string;
    }

    /**
     * The setting to use when creating a cluster. This parameter is used to enable CloudWatch Container Insights for a cluster. If this value is specified, it will override the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
     */
    export interface ClusterSettings {
        name?: string;
        value?: string;
    }

    /**
     * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
     */
    export interface ClusterTag {
        key?: string;
        value?: string;
    }

    export interface ServiceAwsVpcConfiguration {
        assignPublicIp?: enums.ecs.ServiceAwsVpcConfigurationAssignPublicIp;
        securityGroups?: string[];
        subnets?: string[];
    }

    export interface ServiceCapacityProviderStrategyItem {
        base?: number;
        capacityProvider?: string;
        weight?: number;
    }

    export interface ServiceConnectClientAlias {
        dnsName?: string;
        port: number;
    }

    export interface ServiceConnectConfiguration {
        enabled: boolean;
        logConfiguration?: outputs.ecs.ServiceLogConfiguration;
        namespace?: string;
        services?: outputs.ecs.ServiceConnectService[];
    }

    export interface ServiceConnectService {
        clientAliases?: outputs.ecs.ServiceConnectClientAlias[];
        discoveryName?: string;
        ingressPortOverride?: number;
        portName: string;
        timeout?: outputs.ecs.ServiceTimeoutConfiguration;
        tls?: outputs.ecs.ServiceConnectTlsConfiguration;
    }

    export interface ServiceConnectTlsCertificateAuthority {
        awsPcaAuthorityArn?: string;
    }

    export interface ServiceConnectTlsConfiguration {
        issuerCertificateAuthority: outputs.ecs.ServiceConnectTlsCertificateAuthority;
        kmsKey?: string;
        roleArn?: string;
    }

    export interface ServiceDeploymentAlarms {
        alarmNames: string[];
        enable: boolean;
        rollback: boolean;
    }

    export interface ServiceDeploymentCircuitBreaker {
        enable: boolean;
        rollback: boolean;
    }

    export interface ServiceDeploymentConfiguration {
        alarms?: outputs.ecs.ServiceDeploymentAlarms;
        deploymentCircuitBreaker?: outputs.ecs.ServiceDeploymentCircuitBreaker;
        maximumPercent?: number;
        minimumHealthyPercent?: number;
    }

    export interface ServiceDeploymentController {
        type?: enums.ecs.ServiceDeploymentControllerType;
    }

    export interface ServiceEbsTagSpecification {
        propagateTags?: enums.ecs.ServiceEbsTagSpecificationPropagateTags;
        resourceType: string;
        tags?: outputs.ecs.ServiceTag[];
    }

    export interface ServiceLoadBalancer {
        containerName?: string;
        containerPort?: number;
        loadBalancerName?: string;
        targetGroupArn?: string;
    }

    export interface ServiceLogConfiguration {
        logDriver?: string;
        options?: {[key: string]: string};
        secretOptions?: outputs.ecs.ServiceSecret[];
    }

    export interface ServiceManagedEbsVolumeConfiguration {
        encrypted?: boolean;
        filesystemType?: string;
        iops?: number;
        kmsKeyId?: string;
        roleArn: string;
        sizeInGiB?: number;
        snapshotId?: string;
        tagSpecifications?: outputs.ecs.ServiceEbsTagSpecification[];
        throughput?: number;
        volumeType?: string;
    }

    export interface ServiceNetworkConfiguration {
        awsvpcConfiguration?: outputs.ecs.ServiceAwsVpcConfiguration;
    }

    export interface ServicePlacementConstraint {
        expression?: string;
        type: enums.ecs.ServicePlacementConstraintType;
    }

    export interface ServicePlacementStrategy {
        field?: string;
        type: enums.ecs.ServicePlacementStrategyType;
    }

    export interface ServiceRegistry {
        containerName?: string;
        containerPort?: number;
        port?: number;
        registryArn?: string;
    }

    export interface ServiceSecret {
        name: string;
        valueFrom: string;
    }

    export interface ServiceTag {
        key?: string;
        value?: string;
    }

    export interface ServiceTimeoutConfiguration {
        idleTimeoutSeconds?: number;
        perRequestTimeoutSeconds?: number;
    }

    export interface ServiceVolumeConfiguration {
        managedEbsVolume?: outputs.ecs.ServiceManagedEbsVolumeConfiguration;
        name: string;
    }

    export interface TaskDefinitionAuthorizationConfig {
        accessPointId?: string;
        iam?: enums.ecs.TaskDefinitionAuthorizationConfigIam;
    }

    /**
     * List of container definitions that are passed to the Docker daemon on a container instance
     */
    export interface TaskDefinitionContainerDefinition {
        command?: string[];
        cpu?: number;
        credentialSpecs?: string[];
        dependsOn?: outputs.ecs.TaskDefinitionContainerDependency[];
        disableNetworking?: boolean;
        dnsSearchDomains?: string[];
        dnsServers?: string[];
        dockerLabels?: {[key: string]: string};
        dockerSecurityOptions?: string[];
        entryPoint?: string[];
        /**
         * The environment variables to pass to a container
         */
        environment?: outputs.ecs.TaskDefinitionKeyValuePair[];
        /**
         * The list of one or more files that contain the environment variables to pass to a container
         */
        environmentFiles?: outputs.ecs.TaskDefinitionEnvironmentFile[];
        essential?: boolean;
        extraHosts?: outputs.ecs.TaskDefinitionHostEntry[];
        firelensConfiguration?: outputs.ecs.TaskDefinitionFirelensConfiguration;
        healthCheck?: outputs.ecs.TaskDefinitionHealthCheck;
        hostname?: string;
        /**
         * The image used to start a container. This string is passed directly to the Docker daemon.
         */
        image: string;
        interactive?: boolean;
        links?: string[];
        linuxParameters?: outputs.ecs.TaskDefinitionLinuxParameters;
        logConfiguration?: outputs.ecs.TaskDefinitionLogConfiguration;
        /**
         * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
         */
        memory?: number;
        memoryReservation?: number;
        mountPoints?: outputs.ecs.TaskDefinitionMountPoint[];
        /**
         * The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
         */
        name: string;
        /**
         * Port mappings allow containers to access ports on the host container instance to send or receive traffic.
         */
        portMappings?: outputs.ecs.TaskDefinitionPortMapping[];
        privileged?: boolean;
        pseudoTerminal?: boolean;
        readonlyRootFilesystem?: boolean;
        repositoryCredentials?: outputs.ecs.TaskDefinitionRepositoryCredentials;
        resourceRequirements?: outputs.ecs.TaskDefinitionResourceRequirement[];
        secrets?: outputs.ecs.TaskDefinitionSecret[];
        startTimeout?: number;
        stopTimeout?: number;
        systemControls?: outputs.ecs.TaskDefinitionSystemControl[];
        ulimits?: outputs.ecs.TaskDefinitionUlimit[];
        user?: string;
        volumesFrom?: outputs.ecs.TaskDefinitionVolumeFrom[];
        workingDirectory?: string;
    }

    export interface TaskDefinitionContainerDependency {
        condition?: string;
        containerName?: string;
    }

    export interface TaskDefinitionDevice {
        containerPath?: string;
        hostPath?: string;
        permissions?: string[];
    }

    export interface TaskDefinitionDockerVolumeConfiguration {
        autoprovision?: boolean;
        driver?: string;
        driverOpts?: {[key: string]: string};
        labels?: {[key: string]: string};
        scope?: string;
    }

    export interface TaskDefinitionEfsVolumeConfiguration {
        authorizationConfig?: outputs.ecs.TaskDefinitionAuthorizationConfig;
        filesystemId: string;
        rootDirectory?: string;
        transitEncryption?: enums.ecs.TaskDefinitionEfsVolumeConfigurationTransitEncryption;
        transitEncryptionPort?: number;
    }

    export interface TaskDefinitionEnvironmentFile {
        type?: string;
        value?: string;
    }

    export interface TaskDefinitionEphemeralStorage {
        sizeInGiB?: number;
    }

    export interface TaskDefinitionFirelensConfiguration {
        options?: {[key: string]: string};
        type?: string;
    }

    /**
     * The health check command and associated configuration parameters for the container.
     */
    export interface TaskDefinitionHealthCheck {
        /**
         * A string array representing the command that the container runs to determine if it is healthy.
         */
        command?: string[];
        /**
         * The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
         */
        interval?: number;
        /**
         * The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
         */
        retries?: number;
        /**
         * The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
         */
        startPeriod?: number;
        /**
         * The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
         */
        timeout?: number;
    }

    export interface TaskDefinitionHostEntry {
        hostname?: string;
        ipAddress?: string;
    }

    export interface TaskDefinitionHostVolumeProperties {
        sourcePath?: string;
    }

    export interface TaskDefinitionInferenceAccelerator {
        deviceName?: string;
        deviceType?: string;
    }

    export interface TaskDefinitionKernelCapabilities {
        add?: string[];
        drop?: string[];
    }

    export interface TaskDefinitionKeyValuePair {
        name?: string;
        value?: string;
    }

    export interface TaskDefinitionLinuxParameters {
        capabilities?: outputs.ecs.TaskDefinitionKernelCapabilities;
        devices?: outputs.ecs.TaskDefinitionDevice[];
        initProcessEnabled?: boolean;
        maxSwap?: number;
        sharedMemorySize?: number;
        swappiness?: number;
        tmpfs?: outputs.ecs.TaskDefinitionTmpfs[];
    }

    export interface TaskDefinitionLogConfiguration {
        logDriver: string;
        options?: {[key: string]: string};
        secretOptions?: outputs.ecs.TaskDefinitionSecret[];
    }

    export interface TaskDefinitionMountPoint {
        containerPath?: string;
        readOnly?: boolean;
        sourceVolume?: string;
    }

    export interface TaskDefinitionPlacementConstraint {
        expression?: string;
        type: string;
    }

    export interface TaskDefinitionPortMapping {
        appProtocol?: enums.ecs.TaskDefinitionPortMappingAppProtocol;
        containerPort?: number;
        containerPortRange?: string;
        hostPort?: number;
        name?: string;
        protocol?: string;
    }

    export interface TaskDefinitionProxyConfiguration {
        containerName: string;
        proxyConfigurationProperties?: outputs.ecs.TaskDefinitionKeyValuePair[];
        type?: string;
    }

    export interface TaskDefinitionRepositoryCredentials {
        credentialsParameter?: string;
    }

    export interface TaskDefinitionResourceRequirement {
        type: string;
        value: string;
    }

    export interface TaskDefinitionRuntimePlatform {
        cpuArchitecture?: string;
        operatingSystemFamily?: string;
    }

    export interface TaskDefinitionSecret {
        name: string;
        valueFrom: string;
    }

    export interface TaskDefinitionSystemControl {
        namespace?: string;
        value?: string;
    }

    export interface TaskDefinitionTag {
        key?: string;
        value?: string;
    }

    export interface TaskDefinitionTmpfs {
        containerPath?: string;
        mountOptions?: string[];
        size: number;
    }

    export interface TaskDefinitionUlimit {
        hardLimit: number;
        name: string;
        softLimit: number;
    }

    export interface TaskDefinitionVolume {
        configuredAtLaunch?: boolean;
        dockerVolumeConfiguration?: outputs.ecs.TaskDefinitionDockerVolumeConfiguration;
        efsVolumeConfiguration?: outputs.ecs.TaskDefinitionEfsVolumeConfiguration;
        host?: outputs.ecs.TaskDefinitionHostVolumeProperties;
        name?: string;
    }

    export interface TaskDefinitionVolumeFrom {
        readOnly?: boolean;
        sourceContainer?: string;
    }

    /**
     * The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
     */
    export interface TaskSetAwsVpcConfiguration {
        /**
         * Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
         */
        assignPublicIp?: enums.ecs.TaskSetAwsVpcConfigurationAssignPublicIp;
        /**
         * The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
         */
        securityGroups?: string[];
        /**
         * The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
         */
        subnets: string[];
    }

    /**
     * A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer. 
     */
    export interface TaskSetLoadBalancer {
        /**
         * The name of the container (as it appears in a container definition) to associate with the load balancer.
         */
        containerName?: string;
        /**
         * The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
         */
        containerPort?: number;
        /**
         * The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
         */
        targetGroupArn?: string;
    }

    /**
     * An object representing the network configuration for a task or service.
     */
    export interface TaskSetNetworkConfiguration {
        awsVpcConfiguration?: outputs.ecs.TaskSetAwsVpcConfiguration;
    }

    export interface TaskSetScale {
        /**
         * The unit of measure for the scale value.
         */
        unit?: enums.ecs.TaskSetScaleUnit;
        /**
         * The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
         */
        value?: number;
    }

    export interface TaskSetServiceRegistry {
        /**
         * The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
         */
        containerName?: string;
        /**
         * The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
         */
        containerPort?: number;
        /**
         * The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
         */
        port?: number;
        /**
         * The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
         */
        registryArn?: string;
    }

}

export namespace efs {
    export interface AccessPointCreationInfo {
        /**
         * Specifies the POSIX group ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
         */
        ownerGid: string;
        /**
         * Specifies the POSIX user ID to apply to the RootDirectory. Accepts values from 0 to 2^32 (4294967295).
         */
        ownerUid: string;
        /**
         * Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
         */
        permissions: string;
    }

    export interface AccessPointPosixUser {
        /**
         * The POSIX group ID used for all file system operations using this access point.
         */
        gid: string;
        /**
         * Secondary POSIX group IDs used for all file system operations using this access point.
         */
        secondaryGids?: string[];
        /**
         * The POSIX user ID used for all file system operations using this access point.
         */
        uid: string;
    }

    export interface AccessPointRootDirectory {
        /**
         * (Optional) Specifies the POSIX IDs and permissions to apply to the access point's RootDirectory. If the RootDirectory>Path specified does not exist, EFS creates the root directory using the CreationInfo settings when a client connects to an access point. When specifying the CreationInfo, you must provide values for all properties.   If you do not provide CreationInfo and the specified RootDirectory>Path does not exist, attempts to mount the file system using the access point will fail. 
         */
        creationInfo?: outputs.efs.AccessPointCreationInfo;
        /**
         * Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the CreationInfo.
         */
        path?: string;
    }

    export interface AccessPointTag {
        key?: string;
        value?: string;
    }

    export interface FileSystemBackupPolicy {
        status: string;
    }

    export interface FileSystemElasticFileSystemTag {
        key: string;
        value: string;
    }

    export interface FileSystemLifecyclePolicy {
        transitionToArchive?: string;
        transitionToIa?: string;
        transitionToPrimaryStorageClass?: string;
    }

    export interface FileSystemProtection {
        replicationOverwriteProtection?: enums.efs.FileSystemProtectionReplicationOverwriteProtection;
    }

    export interface FileSystemReplicationConfiguration {
        destinations?: outputs.efs.FileSystemReplicationDestination[];
    }

    export interface FileSystemReplicationDestination {
        availabilityZoneName?: string;
        fileSystemId?: string;
        kmsKeyId?: string;
        region?: string;
    }

}

export namespace eks {
    /**
     * An access policy to associate with the current access entry.
     */
    export interface AccessEntryAccessPolicy {
        accessScope: outputs.eks.AccessEntryAccessScope;
        /**
         * The ARN of the access policy to add to the access entry.
         */
        policyArn: string;
    }

    /**
     * The access scope of the access policy.
     */
    export interface AccessEntryAccessScope {
        /**
         * The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
         */
        namespaces?: string[];
        /**
         * The type of the access scope.
         */
        type: enums.eks.AccessEntryAccessScopeType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AccessEntryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AddonTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * An object representing the Access Config to use for the cluster.
     */
    export interface ClusterAccessConfig {
        /**
         * Specify the authentication mode that should be used to create your cluster.
         */
        authenticationMode?: enums.eks.ClusterAccessConfigAuthenticationMode;
        /**
         * Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
         */
        bootstrapClusterCreatorAdminPermissions?: boolean;
    }

    /**
     * Specify the placement group of the control plane machines for your cluster.
     */
    export interface ClusterControlPlanePlacement {
        /**
         * Specify the placement group name of the control place machines for your cluster.
         */
        groupName?: string;
    }

    /**
     * The encryption configuration for the cluster
     */
    export interface ClusterEncryptionConfig {
        /**
         * The encryption provider for the cluster.
         */
        provider?: outputs.eks.ClusterProvider;
        /**
         * Specifies the resources to be encrypted. The only supported value is "secrets".
         */
        resources?: string[];
    }

    /**
     * The Kubernetes network configuration for the cluster.
     */
    export interface ClusterKubernetesNetworkConfig {
        /**
         * Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
         */
        ipFamily?: enums.eks.ClusterKubernetesNetworkConfigIpFamily;
        /**
         * The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. 
         */
        serviceIpv4Cidr?: string;
        /**
         * The CIDR block to assign Kubernetes service IP addresses from.
         */
        serviceIpv6Cidr?: string;
    }

    /**
     * The cluster control plane logging configuration for your cluster. 
     */
    export interface ClusterLoggingEnabledTypes {
        enabledTypes?: outputs.eks.ClusterLoggingTypeConfig[];
    }

    /**
     * Enabled Logging Type
     */
    export interface ClusterLoggingTypeConfig {
        /**
         * name of the log type
         */
        type?: enums.eks.ClusterLoggingTypeConfigType;
    }

    /**
     * An object representing the Outpost configuration to use for AWS EKS outpost cluster.
     */
    export interface ClusterOutpostConfig {
        /**
         * Specify the Instance type of the machines that should be used to create your cluster.
         */
        controlPlaneInstanceType: string;
        /**
         * Specify the placement group of the control plane machines for your cluster.
         */
        controlPlanePlacement?: outputs.eks.ClusterControlPlanePlacement;
        /**
         * Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
         */
        outpostArns: string[];
    }

    export interface ClusterProvider {
        /**
         * Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
         */
        keyArn?: string;
    }

    /**
     * An object representing the VPC configuration to use for an Amazon EKS cluster.
     */
    export interface ClusterResourcesVpcConfig {
        /**
         * Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
         */
        endpointPrivateAccess?: boolean;
        /**
         * Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
         */
        endpointPublicAccess?: boolean;
        /**
         * The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
         */
        publicAccessCidrs?: string[];
        /**
         * Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
         */
        securityGroupIds?: string[];
        /**
         * Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
         */
        subnetIds: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ClusterTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a pod.
     */
    export interface FargateProfileLabel {
        /**
         * The key name of the label.
         */
        key: string;
        /**
         * The value for the label. 
         */
        value: string;
    }

    export interface FargateProfileSelector {
        labels?: outputs.eks.FargateProfileLabel[];
        namespace: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FargateProfileTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * An object representing an OpenID Connect (OIDC) configuration.
     */
    export interface IdentityProviderConfigOidcIdentityProviderConfig {
        /**
         * This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
         */
        clientId: string;
        /**
         * The JWT claim that the provider uses to return your groups.
         */
        groupsClaim?: string;
        /**
         * The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
         */
        groupsPrefix?: string;
        /**
         * The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
         */
        issuerUrl: string;
        requiredClaims?: outputs.eks.IdentityProviderConfigRequiredClaim[];
        /**
         * The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
         */
        usernameClaim?: string;
        /**
         * The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
         */
        usernamePrefix?: string;
    }

    /**
     * The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
     */
    export interface IdentityProviderConfigRequiredClaim {
        /**
         * The key of the requiredClaims.
         */
        key: string;
        /**
         * The value for the requiredClaims.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IdentityProviderConfigTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
     */
    export interface Logging {
        /**
         * The cluster control plane logging configuration for your cluster. 
         */
        clusterLogging?: outputs.eks.ClusterLoggingEnabledTypes;
    }

    /**
     * An object representing a launch template specification for AWS EKS Nodegroup.
     */
    export interface NodegroupLaunchTemplateSpecification {
        id?: string;
        name?: string;
        version?: string;
    }

    /**
     * An object representing a remote access configuration specification for AWS EKS Nodegroup.
     */
    export interface NodegroupRemoteAccess {
        ec2SshKey: string;
        sourceSecurityGroups?: string[];
    }

    /**
     * An object representing a auto scaling group specification for AWS EKS Nodegroup.
     */
    export interface NodegroupScalingConfig {
        desiredSize?: number;
        maxSize?: number;
        minSize?: number;
    }

    /**
     * An object representing a Taint specification for AWS EKS Nodegroup.
     */
    export interface NodegroupTaint {
        effect?: string;
        key?: string;
        value?: string;
    }

    /**
     * The node group update configuration.
     */
    export interface NodegroupUpdateConfig {
        /**
         * The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100. 
         */
        maxUnavailable?: number;
        /**
         * The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
         */
        maxUnavailablePercentage?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PodIdentityAssociationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace elasticache {
    export interface AuthenticationModeProperties {
        /**
         * Passwords used for this user account. You can create up to two passwords for each user.
         */
        passwords?: string[];
        /**
         * Authentication Type
         */
        type: enums.elasticache.UserAuthenticationModePropertiesType;
    }

    export interface CacheClusterCloudWatchLogsDestinationDetails {
        logGroup: string;
    }

    export interface CacheClusterDestinationDetails {
        cloudWatchLogsDetails?: outputs.elasticache.CacheClusterCloudWatchLogsDestinationDetails;
        kinesisFirehoseDetails?: outputs.elasticache.CacheClusterKinesisFirehoseDestinationDetails;
    }

    export interface CacheClusterKinesisFirehoseDestinationDetails {
        deliveryStream: string;
    }

    export interface CacheClusterLogDeliveryConfigurationRequest {
        destinationDetails: outputs.elasticache.CacheClusterDestinationDetails;
        destinationType: string;
        logFormat: string;
        logType: string;
    }

    export interface CacheClusterTag {
        key: string;
        value: string;
    }

    export interface GlobalReplicationGroupMember {
        /**
         * Regionally unique identifier for the member i.e. ReplicationGroupId.
         */
        replicationGroupId?: string;
        /**
         * The AWS region of the Global Datastore member.
         */
        replicationGroupRegion?: string;
        /**
         * Indicates the role of the member, primary or secondary.
         */
        role?: enums.elasticache.GlobalReplicationGroupMemberRole;
    }

    export interface GlobalReplicationGroupRegionalConfiguration {
        /**
         * The replication group id of the Global Datastore member.
         */
        replicationGroupId?: string;
        /**
         * The AWS region of the Global Datastore member.
         */
        replicationGroupRegion?: string;
        /**
         * A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster. 
         */
        reshardingConfigurations?: outputs.elasticache.GlobalReplicationGroupReshardingConfiguration[];
    }

    export interface GlobalReplicationGroupReshardingConfiguration {
        /**
         * Unique identifier for the Node Group. This is either auto-generated by ElastiCache (4-digit id) or a user supplied id.
         */
        nodeGroupId?: string;
        /**
         * A list of preferred availability zones for the nodes of new node groups.
         */
        preferredAvailabilityZones?: string[];
    }

    export interface ParameterGroupTag {
        key: string;
        value: string;
    }

    export interface ReplicationGroupCloudWatchLogsDestinationDetails {
        logGroup: string;
    }

    export interface ReplicationGroupDestinationDetails {
        cloudWatchLogsDetails?: outputs.elasticache.ReplicationGroupCloudWatchLogsDestinationDetails;
        kinesisFirehoseDetails?: outputs.elasticache.ReplicationGroupKinesisFirehoseDestinationDetails;
    }

    export interface ReplicationGroupKinesisFirehoseDestinationDetails {
        deliveryStream: string;
    }

    export interface ReplicationGroupLogDeliveryConfigurationRequest {
        destinationDetails: outputs.elasticache.ReplicationGroupDestinationDetails;
        destinationType: string;
        logFormat: string;
        logType: string;
    }

    export interface ReplicationGroupNodeGroupConfiguration {
        nodeGroupId?: string;
        primaryAvailabilityZone?: string;
        replicaAvailabilityZones?: string[];
        replicaCount?: number;
        slots?: string;
    }

    export interface ReplicationGroupTag {
        key: string;
        value: string;
    }

    export interface SecurityGroupTag {
        key: string;
        value: string;
    }

    /**
     * The cache capacity limit of the Serverless Cache.
     */
    export interface ServerlessCacheCacheUsageLimits {
        dataStorage?: outputs.elasticache.ServerlessCacheDataStorage;
        ecpuPerSecond?: outputs.elasticache.ServerlessCacheEcpuPerSecond;
    }

    /**
     * The cached data capacity of the Serverless Cache.
     */
    export interface ServerlessCacheDataStorage {
        /**
         * The maximum cached data capacity of the Serverless Cache.
         */
        maximum: number;
        /**
         * The unix of cached data capacity of the Serverless Cache.
         */
        unit: enums.elasticache.ServerlessCacheDataStorageUnit;
    }

    /**
     * The ECPU per second of the Serverless Cache.
     */
    export interface ServerlessCacheEcpuPerSecond {
        /**
         * The maximum ECPU per second of the Serverless Cache.
         */
        maximum: number;
    }

    /**
     * The address and the port.
     */
    export interface ServerlessCacheEndpoint {
        /**
         * Endpoint address.
         */
        address?: string;
        /**
         * Endpoint port.
         */
        port?: string;
    }

    /**
     * A key-value pair to associate with Serverless Cache.
     */
    export interface ServerlessCacheTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with 'aws:'. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A tag that can be added to an ElastiCache subnet group. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your subnet groups. A tag with a null Value is permitted.
     */
    export interface SubnetGroupTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with 'aws:'. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with 'aws:'. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

}

export namespace elasticbeanstalk {
    export interface ApplicationMaxAgeRule {
        /**
         * Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
         */
        deleteSourceFromS3?: boolean;
        /**
         * Specify true to apply the rule, or false to disable it.
         */
        enabled?: boolean;
        /**
         * Specify the number of days to retain an application versions.
         */
        maxAgeInDays?: number;
    }

    export interface ApplicationMaxCountRule {
        /**
         * Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
         */
        deleteSourceFromS3?: boolean;
        /**
         * Specify true to apply the rule, or false to disable it.
         */
        enabled?: boolean;
        /**
         * Specify the maximum number of application versions to retain.
         */
        maxCount?: number;
    }

    export interface ApplicationResourceLifecycleConfig {
        /**
         * The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another value.
         */
        serviceRole?: string;
        /**
         * Defines lifecycle settings for application versions.
         */
        versionLifecycleConfig?: outputs.elasticbeanstalk.ApplicationVersionLifecycleConfig;
    }

    export interface ApplicationVersionLifecycleConfig {
        /**
         * Specify a max age rule to restrict the length of time that application versions are retained for an application.
         */
        maxAgeRule?: outputs.elasticbeanstalk.ApplicationMaxAgeRule;
        /**
         * Specify a max count rule to restrict the number of application versions that are retained for an application.
         */
        maxCountRule?: outputs.elasticbeanstalk.ApplicationMaxCountRule;
    }

    export interface ApplicationVersionSourceBundle {
        /**
         * The Amazon S3 bucket where the data is located.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key where the data is located.
         */
        s3Key: string;
    }

    export interface ConfigurationTemplateConfigurationOptionSetting {
        /**
         * A unique namespace that identifies the option's associated AWS resource.
         */
        namespace: string;
        /**
         * The name of the configuration option.
         */
        optionName: string;
        /**
         * A unique resource name for the option setting. Use it for a time–based scaling configuration option. 
         */
        resourceName?: string;
        /**
         * The current value for the configuration option.
         */
        value?: string;
    }

    export interface ConfigurationTemplateSourceConfiguration {
        /**
         * The name of the application associated with the configuration.
         */
        applicationName: string;
        /**
         * The name of the configuration template.
         */
        templateName: string;
    }

    export interface EnvironmentOptionSetting {
        /**
         * A unique namespace that identifies the option's associated AWS resource.
         */
        namespace: string;
        /**
         * The name of the configuration option.
         */
        optionName: string;
        /**
         * A unique resource name for the option setting. Use it for a time–based scaling configuration option.
         */
        resourceName?: string;
        /**
         * The current value for the configuration option.
         */
        value?: string;
    }

    export interface EnvironmentTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface EnvironmentTier {
        /**
         * The name of this environment tier.
         */
        name?: string;
        /**
         * The type of this environment tier.
         */
        type?: string;
        /**
         * The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.
         */
        version?: string;
    }

}

export namespace elasticloadbalancing {
    export interface LoadBalancerAccessLoggingPolicy {
        emitInterval?: number;
        enabled: boolean;
        s3BucketName: string;
        s3BucketPrefix?: string;
    }

    export interface LoadBalancerAppCookieStickinessPolicy {
        cookieName: string;
        policyName: string;
    }

    export interface LoadBalancerConnectionDrainingPolicy {
        enabled: boolean;
        timeout?: number;
    }

    export interface LoadBalancerConnectionSettings {
        idleTimeout: number;
    }

    export interface LoadBalancerHealthCheck {
        healthyThreshold: string;
        interval: string;
        target: string;
        timeout: string;
        unhealthyThreshold: string;
    }

    export interface LoadBalancerLbCookieStickinessPolicy {
        cookieExpirationPeriod?: string;
        policyName?: string;
    }

    export interface LoadBalancerListeners {
        instancePort: string;
        instanceProtocol?: string;
        loadBalancerPort: string;
        policyNames?: string[];
        protocol: string;
        sslCertificateId?: string;
    }

    export interface LoadBalancerPolicies {
        attributes: any[];
        instancePorts?: string[];
        loadBalancerPorts?: string[];
        policyName: string;
        policyType: string;
    }

    export interface LoadBalancerTag {
        key: string;
        value: string;
    }

}

export namespace elasticloadbalancingv2 {
    export interface ListenerAction {
        authenticateCognitoConfig?: outputs.elasticloadbalancingv2.ListenerAuthenticateCognitoConfig;
        authenticateOidcConfig?: outputs.elasticloadbalancingv2.ListenerAuthenticateOidcConfig;
        fixedResponseConfig?: outputs.elasticloadbalancingv2.ListenerFixedResponseConfig;
        forwardConfig?: outputs.elasticloadbalancingv2.ListenerForwardConfig;
        order?: number;
        redirectConfig?: outputs.elasticloadbalancingv2.ListenerRedirectConfig;
        targetGroupArn?: string;
        type: string;
    }

    export interface ListenerAuthenticateCognitoConfig {
        authenticationRequestExtraParams?: any;
        onUnauthenticatedRequest?: string;
        scope?: string;
        sessionCookieName?: string;
        sessionTimeout?: string;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface ListenerAuthenticateOidcConfig {
        authenticationRequestExtraParams?: any;
        authorizationEndpoint: string;
        clientId: string;
        clientSecret?: string;
        issuer: string;
        onUnauthenticatedRequest?: string;
        scope?: string;
        sessionCookieName?: string;
        sessionTimeout?: string;
        tokenEndpoint: string;
        useExistingClientSecret?: boolean;
        userInfoEndpoint: string;
    }

    export interface ListenerCertificate {
        certificateArn?: string;
    }

    export interface ListenerCertificateCertificate {
        certificateArn?: string;
    }

    export interface ListenerFixedResponseConfig {
        contentType?: string;
        messageBody?: string;
        statusCode: string;
    }

    export interface ListenerForwardConfig {
        targetGroupStickinessConfig?: outputs.elasticloadbalancingv2.ListenerTargetGroupStickinessConfig;
        targetGroups?: outputs.elasticloadbalancingv2.ListenerTargetGroupTuple[];
    }

    export interface ListenerMutualAuthentication {
        ignoreClientCertificateExpiry?: boolean;
        mode?: string;
        trustStoreArn?: string;
    }

    export interface ListenerRedirectConfig {
        host?: string;
        path?: string;
        port?: string;
        protocol?: string;
        query?: string;
        statusCode: string;
    }

    export interface ListenerRuleAction {
        authenticateCognitoConfig?: outputs.elasticloadbalancingv2.ListenerRuleAuthenticateCognitoConfig;
        authenticateOidcConfig?: outputs.elasticloadbalancingv2.ListenerRuleAuthenticateOidcConfig;
        fixedResponseConfig?: outputs.elasticloadbalancingv2.ListenerRuleFixedResponseConfig;
        forwardConfig?: outputs.elasticloadbalancingv2.ListenerRuleForwardConfig;
        order?: number;
        redirectConfig?: outputs.elasticloadbalancingv2.ListenerRuleRedirectConfig;
        targetGroupArn?: string;
        type: string;
    }

    export interface ListenerRuleAuthenticateCognitoConfig {
        authenticationRequestExtraParams?: {[key: string]: string};
        onUnauthenticatedRequest?: string;
        scope?: string;
        sessionCookieName?: string;
        sessionTimeout?: number;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface ListenerRuleAuthenticateOidcConfig {
        authenticationRequestExtraParams?: {[key: string]: string};
        authorizationEndpoint: string;
        clientId: string;
        clientSecret?: string;
        issuer: string;
        onUnauthenticatedRequest?: string;
        scope?: string;
        sessionCookieName?: string;
        sessionTimeout?: number;
        tokenEndpoint: string;
        useExistingClientSecret?: boolean;
        userInfoEndpoint: string;
    }

    export interface ListenerRuleFixedResponseConfig {
        contentType?: string;
        messageBody?: string;
        statusCode: string;
    }

    export interface ListenerRuleForwardConfig {
        targetGroupStickinessConfig?: outputs.elasticloadbalancingv2.ListenerRuleTargetGroupStickinessConfig;
        targetGroups?: outputs.elasticloadbalancingv2.ListenerRuleTargetGroupTuple[];
    }

    export interface ListenerRuleHostHeaderConfig {
        values?: string[];
    }

    export interface ListenerRuleHttpHeaderConfig {
        httpHeaderName?: string;
        values?: string[];
    }

    export interface ListenerRuleHttpRequestMethodConfig {
        values?: string[];
    }

    export interface ListenerRulePathPatternConfig {
        values?: string[];
    }

    export interface ListenerRuleQueryStringConfig {
        values?: outputs.elasticloadbalancingv2.ListenerRuleQueryStringKeyValue[];
    }

    export interface ListenerRuleQueryStringKeyValue {
        key?: string;
        value?: string;
    }

    export interface ListenerRuleRedirectConfig {
        host?: string;
        path?: string;
        port?: string;
        protocol?: string;
        query?: string;
        statusCode: string;
    }

    export interface ListenerRuleRuleCondition {
        field?: string;
        hostHeaderConfig?: outputs.elasticloadbalancingv2.ListenerRuleHostHeaderConfig;
        httpHeaderConfig?: outputs.elasticloadbalancingv2.ListenerRuleHttpHeaderConfig;
        httpRequestMethodConfig?: outputs.elasticloadbalancingv2.ListenerRuleHttpRequestMethodConfig;
        pathPatternConfig?: outputs.elasticloadbalancingv2.ListenerRulePathPatternConfig;
        queryStringConfig?: outputs.elasticloadbalancingv2.ListenerRuleQueryStringConfig;
        sourceIpConfig?: outputs.elasticloadbalancingv2.ListenerRuleSourceIpConfig;
        values?: string[];
    }

    export interface ListenerRuleSourceIpConfig {
        values?: string[];
    }

    export interface ListenerRuleTargetGroupStickinessConfig {
        durationSeconds?: number;
        enabled?: boolean;
    }

    export interface ListenerRuleTargetGroupTuple {
        targetGroupArn?: string;
        weight?: number;
    }

    export interface ListenerTargetGroupStickinessConfig {
        durationSeconds?: number;
        enabled?: boolean;
    }

    export interface ListenerTargetGroupTuple {
        targetGroupArn?: string;
        weight?: number;
    }

    export interface LoadBalancerAttribute {
        key?: string;
        value?: string;
    }

    export interface LoadBalancerSubnetMapping {
        allocationId?: string;
        iPv6Address?: string;
        privateIPv4Address?: string;
        subnetId: string;
    }

    export interface LoadBalancerTag {
        key: string;
        value?: string;
    }

    export interface TargetGroupAttribute {
        /**
         * The value of the attribute.
         */
        key?: string;
        /**
         * The name of the attribute.
         */
        value?: string;
    }

    export interface TargetGroupMatcher {
        /**
         * You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
         */
        grpcCode?: string;
        /**
         * For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. 
         */
        httpCode?: string;
    }

    export interface TargetGroupTag {
        /**
         * The value for the tag. 
         */
        key: string;
        /**
         * The key name of the tag. 
         */
        value: string;
    }

    export interface TargetGroupTargetDescription {
        /**
         * An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
         */
        availabilityZone?: string;
        /**
         * The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. 
         */
        id: string;
        /**
         * The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
         */
        port?: number;
    }

    export interface TrustStoreRevocation {
        numberOfRevokedEntries?: number;
        revocationId?: string;
        revocationType?: string;
        trustStoreArn?: string;
    }

    export interface TrustStoreRevocationRevocationContent {
        revocationType?: string;
        s3Bucket?: string;
        s3Key?: string;
        s3ObjectVersion?: string;
    }

    export interface TrustStoreTag {
        key: string;
        value: string;
    }

}

export namespace elasticsearch {
    export interface DomainAdvancedSecurityOptionsInput {
        anonymousAuthEnabled?: boolean;
        enabled?: boolean;
        internalUserDatabaseEnabled?: boolean;
        masterUserOptions?: outputs.elasticsearch.DomainMasterUserOptions;
    }

    export interface DomainCognitoOptions {
        enabled?: boolean;
        identityPoolId?: string;
        roleArn?: string;
        userPoolId?: string;
    }

    export interface DomainColdStorageOptions {
        enabled?: boolean;
    }

    export interface DomainEbsOptions {
        ebsEnabled?: boolean;
        iops?: number;
        volumeSize?: number;
        volumeType?: string;
    }

    export interface DomainElasticsearchClusterConfig {
        coldStorageOptions?: outputs.elasticsearch.DomainColdStorageOptions;
        dedicatedMasterCount?: number;
        dedicatedMasterEnabled?: boolean;
        dedicatedMasterType?: string;
        instanceCount?: number;
        instanceType?: string;
        warmCount?: number;
        warmEnabled?: boolean;
        warmType?: string;
        zoneAwarenessConfig?: outputs.elasticsearch.DomainZoneAwarenessConfig;
        zoneAwarenessEnabled?: boolean;
    }

    export interface DomainEncryptionAtRestOptions {
        enabled?: boolean;
        kmsKeyId?: string;
    }

    export interface DomainEndpointOptions {
        customEndpoint?: string;
        customEndpointCertificateArn?: string;
        customEndpointEnabled?: boolean;
        enforceHttps?: boolean;
        tlsSecurityPolicy?: string;
    }

    export interface DomainMasterUserOptions {
        masterUserArn?: string;
        masterUserName?: string;
        masterUserPassword?: string;
    }

    export interface DomainNodeToNodeEncryptionOptions {
        enabled?: boolean;
    }

    export interface DomainSnapshotOptions {
        automatedSnapshotStartHour?: number;
    }

    export interface DomainTag {
        key: string;
        value: string;
    }

    export interface DomainVpcOptions {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface DomainZoneAwarenessConfig {
        availabilityZoneCount?: number;
    }

}

export namespace emr {
    export interface ClusterApplication {
        additionalInfo?: any;
        args?: string[];
        name?: string;
        version?: string;
    }

    export interface ClusterAutoScalingPolicy {
        constraints: outputs.emr.ClusterScalingConstraints;
        rules: outputs.emr.ClusterScalingRule[];
    }

    export interface ClusterAutoTerminationPolicy {
        idleTimeout?: number;
    }

    export interface ClusterBootstrapActionConfig {
        name: string;
        scriptBootstrapAction: outputs.emr.ClusterScriptBootstrapActionConfig;
    }

    export interface ClusterCloudWatchAlarmDefinition {
        comparisonOperator: string;
        dimensions?: outputs.emr.ClusterMetricDimension[];
        evaluationPeriods?: number;
        metricName: string;
        namespace?: string;
        period: number;
        statistic?: string;
        threshold: number;
        unit?: string;
    }

    export interface ClusterComputeLimits {
        maximumCapacityUnits: number;
        maximumCoreCapacityUnits?: number;
        maximumOnDemandCapacityUnits?: number;
        minimumCapacityUnits: number;
        unitType: string;
    }

    export interface ClusterConfiguration {
        classification?: string;
        configurationProperties?: any;
        configurations?: outputs.emr.ClusterConfiguration[];
    }

    export interface ClusterEbsBlockDeviceConfig {
        volumeSpecification: outputs.emr.ClusterVolumeSpecification;
        volumesPerInstance?: number;
    }

    export interface ClusterEbsConfiguration {
        ebsBlockDeviceConfigs?: outputs.emr.ClusterEbsBlockDeviceConfig[];
        ebsOptimized?: boolean;
    }

    export interface ClusterHadoopJarStepConfig {
        args?: string[];
        jar: string;
        mainClass?: string;
        stepProperties?: outputs.emr.ClusterKeyValue[];
    }

    export interface ClusterInstanceFleetConfig {
        instanceTypeConfigs?: outputs.emr.ClusterInstanceTypeConfig[];
        launchSpecifications?: outputs.emr.ClusterInstanceFleetProvisioningSpecifications;
        name?: string;
        targetOnDemandCapacity?: number;
        targetSpotCapacity?: number;
    }

    export interface ClusterInstanceFleetProvisioningSpecifications {
        onDemandSpecification?: outputs.emr.ClusterOnDemandProvisioningSpecification;
        spotSpecification?: outputs.emr.ClusterSpotProvisioningSpecification;
    }

    export interface ClusterInstanceGroupConfig {
        autoScalingPolicy?: outputs.emr.ClusterAutoScalingPolicy;
        bidPrice?: string;
        configurations?: outputs.emr.ClusterConfiguration[];
        customAmiId?: string;
        ebsConfiguration?: outputs.emr.ClusterEbsConfiguration;
        instanceCount: number;
        instanceType: string;
        market?: string;
        name?: string;
    }

    export interface ClusterInstanceTypeConfig {
        bidPrice?: string;
        bidPriceAsPercentageOfOnDemandPrice?: number;
        configurations?: outputs.emr.ClusterConfiguration[];
        customAmiId?: string;
        ebsConfiguration?: outputs.emr.ClusterEbsConfiguration;
        instanceType: string;
        weightedCapacity?: number;
    }

    export interface ClusterJobFlowInstancesConfig {
        additionalMasterSecurityGroups?: string[];
        additionalSlaveSecurityGroups?: string[];
        coreInstanceFleet?: outputs.emr.ClusterInstanceFleetConfig;
        coreInstanceGroup?: outputs.emr.ClusterInstanceGroupConfig;
        ec2KeyName?: string;
        ec2SubnetId?: string;
        ec2SubnetIds?: string[];
        emrManagedMasterSecurityGroup?: string;
        emrManagedSlaveSecurityGroup?: string;
        hadoopVersion?: string;
        keepJobFlowAliveWhenNoSteps?: boolean;
        masterInstanceFleet?: outputs.emr.ClusterInstanceFleetConfig;
        masterInstanceGroup?: outputs.emr.ClusterInstanceGroupConfig;
        placement?: outputs.emr.ClusterPlacementType;
        serviceAccessSecurityGroup?: string;
        taskInstanceFleets?: outputs.emr.ClusterInstanceFleetConfig[];
        taskInstanceGroups?: outputs.emr.ClusterInstanceGroupConfig[];
        terminationProtected?: boolean;
    }

    export interface ClusterKerberosAttributes {
        adDomainJoinPassword?: string;
        adDomainJoinUser?: string;
        crossRealmTrustPrincipalPassword?: string;
        kdcAdminPassword: string;
        realm: string;
    }

    export interface ClusterKeyValue {
        key?: string;
        value?: string;
    }

    export interface ClusterManagedScalingPolicy {
        computeLimits?: outputs.emr.ClusterComputeLimits;
    }

    export interface ClusterMetricDimension {
        key: string;
        value: string;
    }

    export interface ClusterOnDemandProvisioningSpecification {
        allocationStrategy: string;
    }

    export interface ClusterPlacementGroupConfig {
        instanceRole: string;
        placementStrategy?: string;
    }

    export interface ClusterPlacementType {
        availabilityZone: string;
    }

    export interface ClusterScalingAction {
        market?: string;
        simpleScalingPolicyConfiguration: outputs.emr.ClusterSimpleScalingPolicyConfiguration;
    }

    export interface ClusterScalingConstraints {
        maxCapacity: number;
        minCapacity: number;
    }

    export interface ClusterScalingRule {
        action: outputs.emr.ClusterScalingAction;
        description?: string;
        name: string;
        trigger: outputs.emr.ClusterScalingTrigger;
    }

    export interface ClusterScalingTrigger {
        cloudWatchAlarmDefinition: outputs.emr.ClusterCloudWatchAlarmDefinition;
    }

    export interface ClusterScriptBootstrapActionConfig {
        args?: string[];
        path: string;
    }

    export interface ClusterSimpleScalingPolicyConfiguration {
        adjustmentType?: string;
        coolDown?: number;
        scalingAdjustment: number;
    }

    export interface ClusterSpotProvisioningSpecification {
        allocationStrategy?: string;
        blockDurationMinutes?: number;
        timeoutAction: string;
        timeoutDurationMinutes: number;
    }

    export interface ClusterStepConfig {
        actionOnFailure?: string;
        hadoopJarStep: outputs.emr.ClusterHadoopJarStepConfig;
        name: string;
    }

    export interface ClusterTag {
        key: string;
        value: string;
    }

    export interface ClusterVolumeSpecification {
        iops?: number;
        sizeInGb: number;
        throughput?: number;
        volumeType: string;
    }

    export interface InstanceFleetConfigConfiguration {
        classification?: string;
        configurationProperties?: any;
        configurations?: outputs.emr.InstanceFleetConfigConfiguration[];
    }

    export interface InstanceFleetConfigEbsBlockDeviceConfig {
        volumeSpecification: outputs.emr.InstanceFleetConfigVolumeSpecification;
        volumesPerInstance?: number;
    }

    export interface InstanceFleetConfigEbsConfiguration {
        ebsBlockDeviceConfigs?: outputs.emr.InstanceFleetConfigEbsBlockDeviceConfig[];
        ebsOptimized?: boolean;
    }

    export interface InstanceFleetConfigInstanceFleetProvisioningSpecifications {
        onDemandSpecification?: outputs.emr.InstanceFleetConfigOnDemandProvisioningSpecification;
        spotSpecification?: outputs.emr.InstanceFleetConfigSpotProvisioningSpecification;
    }

    export interface InstanceFleetConfigInstanceTypeConfig {
        bidPrice?: string;
        bidPriceAsPercentageOfOnDemandPrice?: number;
        configurations?: outputs.emr.InstanceFleetConfigConfiguration[];
        customAmiId?: string;
        ebsConfiguration?: outputs.emr.InstanceFleetConfigEbsConfiguration;
        instanceType: string;
        weightedCapacity?: number;
    }

    export interface InstanceFleetConfigOnDemandProvisioningSpecification {
        allocationStrategy: string;
    }

    export interface InstanceFleetConfigSpotProvisioningSpecification {
        allocationStrategy?: string;
        blockDurationMinutes?: number;
        timeoutAction: string;
        timeoutDurationMinutes: number;
    }

    export interface InstanceFleetConfigVolumeSpecification {
        iops?: number;
        sizeInGb: number;
        throughput?: number;
        volumeType: string;
    }

    export interface InstanceGroupConfigAutoScalingPolicy {
        constraints: outputs.emr.InstanceGroupConfigScalingConstraints;
        rules: outputs.emr.InstanceGroupConfigScalingRule[];
    }

    export interface InstanceGroupConfigCloudWatchAlarmDefinition {
        comparisonOperator: string;
        dimensions?: outputs.emr.InstanceGroupConfigMetricDimension[];
        evaluationPeriods?: number;
        metricName: string;
        namespace?: string;
        period: number;
        statistic?: string;
        threshold: number;
        unit?: string;
    }

    export interface InstanceGroupConfigConfiguration {
        classification?: string;
        configurationProperties?: any;
        configurations?: outputs.emr.InstanceGroupConfigConfiguration[];
    }

    export interface InstanceGroupConfigEbsBlockDeviceConfig {
        volumeSpecification: outputs.emr.InstanceGroupConfigVolumeSpecification;
        volumesPerInstance?: number;
    }

    export interface InstanceGroupConfigEbsConfiguration {
        ebsBlockDeviceConfigs?: outputs.emr.InstanceGroupConfigEbsBlockDeviceConfig[];
        ebsOptimized?: boolean;
    }

    export interface InstanceGroupConfigMetricDimension {
        key: string;
        value: string;
    }

    export interface InstanceGroupConfigScalingAction {
        market?: string;
        simpleScalingPolicyConfiguration: outputs.emr.InstanceGroupConfigSimpleScalingPolicyConfiguration;
    }

    export interface InstanceGroupConfigScalingConstraints {
        maxCapacity: number;
        minCapacity: number;
    }

    export interface InstanceGroupConfigScalingRule {
        action: outputs.emr.InstanceGroupConfigScalingAction;
        description?: string;
        name: string;
        trigger: outputs.emr.InstanceGroupConfigScalingTrigger;
    }

    export interface InstanceGroupConfigScalingTrigger {
        cloudWatchAlarmDefinition: outputs.emr.InstanceGroupConfigCloudWatchAlarmDefinition;
    }

    export interface InstanceGroupConfigSimpleScalingPolicyConfiguration {
        adjustmentType?: string;
        coolDown?: number;
        scalingAdjustment: number;
    }

    export interface InstanceGroupConfigVolumeSpecification {
        iops?: number;
        sizeInGb: number;
        throughput?: number;
        volumeType: string;
    }

    export interface StepHadoopJarStepConfig {
        args?: string[];
        jar: string;
        mainClass?: string;
        stepProperties?: outputs.emr.StepKeyValue[];
    }

    export interface StepKeyValue {
        key?: string;
        value?: string;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this EMR Studio.
     */
    export interface StudioTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface WalWorkspaceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace emrcontainers {
    export interface VirtualClusterContainerInfo {
        eksInfo: outputs.emrcontainers.VirtualClusterEksInfo;
    }

    export interface VirtualClusterContainerProvider {
        /**
         * The ID of the container cluster
         */
        id: string;
        info: outputs.emrcontainers.VirtualClusterContainerInfo;
        /**
         * The type of the container provider
         */
        type: string;
    }

    export interface VirtualClusterEksInfo {
        namespace: string;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this virtual cluster.
     */
    export interface VirtualClusterTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace emrserverless {
    /**
     * Configuration for Auto Start of Application
     */
    export interface ApplicationAutoStartConfiguration {
        /**
         * If set to true, the Application will automatically start. Defaults to true.
         */
        enabled?: boolean;
    }

    /**
     * Configuration for Auto Stop of Application
     */
    export interface ApplicationAutoStopConfiguration {
        /**
         * If set to true, the Application will automatically stop after being idle. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The amount of time [in minutes] to wait before auto stopping the Application when idle. Defaults to 15 minutes.
         */
        idleTimeoutMinutes?: number;
    }

    export interface ApplicationCloudWatchLoggingConfiguration {
        /**
         * If set to false, CloudWatch logging will be turned off. Defaults to false.
         */
        enabled?: boolean;
        /**
         * KMS key ARN to encrypt the logs stored in given CloudWatch log-group.
         */
        encryptionKeyArn?: string;
        /**
         * Log-group name to produce log-streams on CloudWatch. If undefined, logs will be produced in a default log-group /aws/emr-serverless
         */
        logGroupName?: string;
        /**
         * Log-stream name prefix by which log-stream names will start in the CloudWatch Log-group.
         */
        logStreamNamePrefix?: string;
        /**
         * The specific log-streams which need to be uploaded to CloudWatch.
         */
        logTypeMap?: outputs.emrserverless.ApplicationLogTypeMapKeyValuePair[];
    }

    /**
     * Configuration for a JobRun.
     */
    export interface ApplicationConfigurationObject {
        /**
         * String with a maximum length of 1024.
         */
        classification: string;
        configurations?: outputs.emrserverless.ApplicationConfigurationObject[];
        properties?: {[key: string]: string};
    }

    /**
     * The image configuration.
     */
    export interface ApplicationImageConfigurationInput {
        /**
         * The URI of an image in the Amazon ECR registry. This field is required when you create a new application. If you leave this field blank in an update, Amazon EMR will remove the image configuration.
         */
        imageUri?: string;
    }

    export interface ApplicationInitialCapacityConfig {
        workerConfiguration: outputs.emrserverless.ApplicationWorkerConfiguration;
        /**
         * Initial count of workers to be initialized when an Application is started. This count will be continued to be maintained until the Application is stopped
         */
        workerCount: number;
    }

    export interface ApplicationInitialCapacityConfigKeyValuePair {
        /**
         * Worker type for an analytics framework.
         */
        key: string;
        value: outputs.emrserverless.ApplicationInitialCapacityConfig;
    }

    export interface ApplicationLogTypeMapKeyValuePair {
        key: string;
        value: string[];
    }

    export interface ApplicationManagedPersistenceMonitoringConfiguration {
        /**
         * If set to false, managed logging will be turned off. Defaults to true.
         */
        enabled?: boolean;
        /**
         * KMS key ARN to encrypt the logs stored in managed persistence
         */
        encryptionKeyArn?: string;
    }

    export interface ApplicationMaximumAllowedResources {
        /**
         * Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.
         */
        cpu: string;
        /**
         * Per worker Disk resource. GB is the only supported unit and specifying GB is optional
         */
        disk?: string;
        /**
         * Per worker memory resource. GB is the only supported unit and specifying GB is optional.
         */
        memory: string;
    }

    /**
     * Monitoring configuration for batch and interactive JobRun.
     */
    export interface ApplicationMonitoringConfiguration {
        /**
         * CloudWatch logging configurations for a JobRun.
         */
        cloudWatchLoggingConfiguration?: outputs.emrserverless.ApplicationCloudWatchLoggingConfiguration;
        /**
         * Managed log persistence configurations for a JobRun.
         */
        managedPersistenceMonitoringConfiguration?: outputs.emrserverless.ApplicationManagedPersistenceMonitoringConfiguration;
        /**
         * S3 monitoring configurations for a JobRun.
         */
        s3MonitoringConfiguration?: outputs.emrserverless.ApplicationS3MonitoringConfiguration;
    }

    export interface ApplicationNetworkConfiguration {
        /**
         * The ID of the security groups in the VPC to which you want to connect your job or application.
         */
        securityGroupIds?: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect your job or application.
         */
        subnetIds?: string[];
    }

    export interface ApplicationS3MonitoringConfiguration {
        /**
         * KMS key ARN to encrypt the logs stored in given s3
         */
        encryptionKeyArn?: string;
        logUri?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ApplicationTag {
        /**
         * The value for the tag. You can specify a value that is 1 to 128 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ApplicationWorkerConfiguration {
        /**
         * Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.
         */
        cpu: string;
        /**
         * Per worker Disk resource. GB is the only supported unit and specifying GB is optional
         */
        disk?: string;
        /**
         * Per worker memory resource. GB is the only supported unit and specifying GB is optional.
         */
        memory: string;
    }

    export interface ApplicationWorkerTypeSpecificationInputMap {
    }

}

export namespace entityresolution {
    export interface IdMappingWorkflowIdMappingTechniques {
        idMappingType?: enums.entityresolution.IdMappingWorkflowIdMappingTechniquesIdMappingType;
        providerProperties?: outputs.entityresolution.IdMappingWorkflowProviderProperties;
    }

    export interface IdMappingWorkflowInputSource {
        /**
         * An Glue table ARN for the input source table
         */
        inputSourceArn: string;
        schemaArn: string;
    }

    export interface IdMappingWorkflowIntermediateSourceConfiguration {
        /**
         * The s3 path that would be used to stage the intermediate data being generated during workflow execution.
         */
        intermediateS3Path: string;
    }

    export interface IdMappingWorkflowOutputSource {
        kmsArn?: string;
        /**
         * The S3 path to which Entity Resolution will write the output table
         */
        outputS3Path: string;
    }

    export interface IdMappingWorkflowProviderProperties {
        intermediateSourceConfiguration?: outputs.entityresolution.IdMappingWorkflowIntermediateSourceConfiguration;
        /**
         * Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
         */
        providerConfiguration?: {[key: string]: string};
        /**
         * Arn of the Provider Service being used.
         */
        providerServiceArn: string;
    }

    /**
     * A key-value pair to associate with a resource
     */
    export interface IdMappingWorkflowTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface MatchingWorkflowInputSource {
        applyNormalization?: boolean;
        /**
         * An Glue table ARN for the input source table
         */
        inputSourceArn: string;
        schemaArn: string;
    }

    export interface MatchingWorkflowIntermediateSourceConfiguration {
        /**
         * The s3 path that would be used to stage the intermediate data being generated during workflow execution.
         */
        intermediateS3Path: string;
    }

    export interface MatchingWorkflowOutputAttribute {
        hashed?: boolean;
        name: string;
    }

    export interface MatchingWorkflowOutputSource {
        applyNormalization?: boolean;
        kmsArn?: string;
        output: outputs.entityresolution.MatchingWorkflowOutputAttribute[];
        /**
         * The S3 path to which Entity Resolution will write the output table
         */
        outputS3Path: string;
    }

    export interface MatchingWorkflowProviderProperties {
        intermediateSourceConfiguration?: outputs.entityresolution.MatchingWorkflowIntermediateSourceConfiguration;
        /**
         * Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
         */
        providerConfiguration?: {[key: string]: string};
        /**
         * Arn of the Provider service being used.
         */
        providerServiceArn: string;
    }

    export interface MatchingWorkflowResolutionTechniques {
        providerProperties?: outputs.entityresolution.MatchingWorkflowProviderProperties;
        resolutionType?: enums.entityresolution.MatchingWorkflowResolutionTechniquesResolutionType;
        ruleBasedProperties?: outputs.entityresolution.MatchingWorkflowRuleBasedProperties;
    }

    export interface MatchingWorkflowRule {
        matchingKeys: string[];
        ruleName: string;
    }

    export interface MatchingWorkflowRuleBasedProperties {
        attributeMatchingModel: enums.entityresolution.MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel;
        rules: outputs.entityresolution.MatchingWorkflowRule[];
    }

    /**
     * A key-value pair to associate with a resource
     */
    export interface MatchingWorkflowTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface SchemaMappingSchemaInputAttribute {
        fieldName: string;
        groupName?: string;
        matchKey?: string;
        /**
         * The subtype of the Attribute. Would be required only when type is PROVIDER_ID
         */
        subType?: string;
        type: enums.entityresolution.SchemaMappingSchemaAttributeType;
    }

    /**
     * A key-value pair to associate with a resource
     */
    export interface SchemaMappingTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace events {
    export interface ConnectionApiKeyAuthParameters {
        apiKeyName: string;
        apiKeyValue: string;
    }

    export interface ConnectionAuthParameters {
        apiKeyAuthParameters?: outputs.events.ConnectionApiKeyAuthParameters;
        basicAuthParameters?: outputs.events.ConnectionBasicAuthParameters;
        invocationHttpParameters?: outputs.events.ConnectionHttpParameters;
        oAuthParameters?: outputs.events.ConnectionOAuthParameters;
    }

    export interface ConnectionBasicAuthParameters {
        password: string;
        username: string;
    }

    export interface ConnectionClientParameters {
        clientId: string;
        clientSecret: string;
    }

    export interface ConnectionHttpParameters {
        bodyParameters?: outputs.events.ConnectionParameter[];
        headerParameters?: outputs.events.ConnectionParameter[];
        queryStringParameters?: outputs.events.ConnectionParameter[];
    }

    export interface ConnectionOAuthParameters {
        authorizationEndpoint: string;
        clientParameters: outputs.events.ConnectionClientParameters;
        httpMethod: enums.events.ConnectionOAuthParametersHttpMethod;
        oAuthHttpParameters?: outputs.events.ConnectionHttpParameters;
    }

    export interface ConnectionParameter {
        isValueSecret?: boolean;
        key: string;
        value: string;
    }

    export interface EndpointEventBus {
        eventBusArn: string;
    }

    export interface EndpointFailoverConfig {
        primary: outputs.events.EndpointPrimary;
        secondary: outputs.events.EndpointSecondary;
    }

    export interface EndpointPrimary {
        healthCheck: string;
    }

    export interface EndpointReplicationConfig {
        state: enums.events.EndpointReplicationState;
    }

    export interface EndpointRoutingConfig {
        failoverConfig: outputs.events.EndpointFailoverConfig;
    }

    export interface EndpointSecondary {
        route: string;
    }

    export interface EventBusPolicyCondition {
        key?: string;
        type?: string;
        value?: string;
    }

    export interface EventBusTag {
        key: string;
        value: string;
    }

    export interface RuleAppSyncParameters {
        graphQlOperation: string;
    }

    export interface RuleAwsVpcConfiguration {
        assignPublicIp?: string;
        securityGroups?: string[];
        subnets: string[];
    }

    export interface RuleBatchArrayProperties {
        size?: number;
    }

    export interface RuleBatchParameters {
        arrayProperties?: outputs.events.RuleBatchArrayProperties;
        jobDefinition: string;
        jobName: string;
        retryStrategy?: outputs.events.RuleBatchRetryStrategy;
    }

    export interface RuleBatchRetryStrategy {
        attempts?: number;
    }

    export interface RuleCapacityProviderStrategyItem {
        base?: number;
        capacityProvider: string;
        weight?: number;
    }

    export interface RuleDeadLetterConfig {
        arn?: string;
    }

    export interface RuleEcsParameters {
        capacityProviderStrategy?: outputs.events.RuleCapacityProviderStrategyItem[];
        enableEcsManagedTags?: boolean;
        enableExecuteCommand?: boolean;
        group?: string;
        launchType?: string;
        networkConfiguration?: outputs.events.RuleNetworkConfiguration;
        placementConstraints?: outputs.events.RulePlacementConstraint[];
        placementStrategies?: outputs.events.RulePlacementStrategy[];
        platformVersion?: string;
        propagateTags?: string;
        referenceId?: string;
        tagList?: outputs.events.RuleTag[];
        taskCount?: number;
        taskDefinitionArn: string;
    }

    export interface RuleHttpParameters {
        headerParameters?: {[key: string]: string};
        pathParameterValues?: string[];
        queryStringParameters?: {[key: string]: string};
    }

    export interface RuleInputTransformer {
        inputPathsMap?: {[key: string]: string};
        inputTemplate: string;
    }

    export interface RuleKinesisParameters {
        partitionKeyPath: string;
    }

    export interface RuleNetworkConfiguration {
        awsVpcConfiguration?: outputs.events.RuleAwsVpcConfiguration;
    }

    export interface RulePlacementConstraint {
        expression?: string;
        type?: string;
    }

    export interface RulePlacementStrategy {
        field?: string;
        type?: string;
    }

    export interface RuleRedshiftDataParameters {
        database: string;
        dbUser?: string;
        secretManagerArn?: string;
        sql?: string;
        sqls?: string[];
        statementName?: string;
        withEvent?: boolean;
    }

    export interface RuleRetryPolicy {
        maximumEventAgeInSeconds?: number;
        maximumRetryAttempts?: number;
    }

    export interface RuleRunCommandParameters {
        runCommandTargets: outputs.events.RuleRunCommandTarget[];
    }

    export interface RuleRunCommandTarget {
        key: string;
        values: string[];
    }

    export interface RuleSageMakerPipelineParameter {
        name: string;
        value: string;
    }

    export interface RuleSageMakerPipelineParameters {
        pipelineParameterList?: outputs.events.RuleSageMakerPipelineParameter[];
    }

    export interface RuleSqsParameters {
        messageGroupId: string;
    }

    export interface RuleTag {
        key?: string;
        value?: string;
    }

    export interface RuleTarget {
        appSyncParameters?: outputs.events.RuleAppSyncParameters;
        arn: string;
        batchParameters?: outputs.events.RuleBatchParameters;
        deadLetterConfig?: outputs.events.RuleDeadLetterConfig;
        ecsParameters?: outputs.events.RuleEcsParameters;
        httpParameters?: outputs.events.RuleHttpParameters;
        id: string;
        input?: string;
        inputPath?: string;
        inputTransformer?: outputs.events.RuleInputTransformer;
        kinesisParameters?: outputs.events.RuleKinesisParameters;
        redshiftDataParameters?: outputs.events.RuleRedshiftDataParameters;
        retryPolicy?: outputs.events.RuleRetryPolicy;
        roleArn?: string;
        runCommandParameters?: outputs.events.RuleRunCommandParameters;
        sageMakerPipelineParameters?: outputs.events.RuleSageMakerPipelineParameters;
        sqsParameters?: outputs.events.RuleSqsParameters;
    }

}

export namespace eventschemas {
    export interface DiscovererTagsEntry {
        key: string;
        value: string;
    }

    export interface RegistryTagsEntry {
        key: string;
        value: string;
    }

    export interface SchemaTagsEntry {
        key: string;
        value: string;
    }

}

export namespace evidently {
    export interface ExperimentMetricGoalObject {
        desiredChange: enums.evidently.ExperimentMetricGoalObjectDesiredChange;
        /**
         * The JSON path to reference the entity id in the event.
         */
        entityIdKey: string;
        /**
         * Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
         */
        eventPattern?: string;
        metricName: string;
        unitLabel?: string;
        /**
         * The JSON path to reference the numerical metric value in the event.
         */
        valueKey: string;
    }

    export interface ExperimentOnlineAbConfigObject {
        controlTreatmentName?: string;
        treatmentWeights?: outputs.evidently.ExperimentTreatmentToWeight[];
    }

    export interface ExperimentRunningStatusObject {
        /**
         * Provide the analysis Completion time for an experiment
         */
        analysisCompleteTime?: string;
        /**
         * Provide CANCELLED or COMPLETED desired state when stopping an experiment
         */
        desiredState?: string;
        /**
         * Reason is a required input for stopping the experiment
         */
        reason?: string;
        /**
         * Provide START or STOP action to apply on an experiment
         */
        status?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ExperimentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ExperimentTreatmentObject {
        description?: string;
        feature: string;
        treatmentName: string;
        variation: string;
    }

    export interface ExperimentTreatmentToWeight {
        splitWeight: number;
        treatment: string;
    }

    export interface FeatureEntityOverride {
        entityId?: string;
        variation?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FeatureTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface FeatureVariationObject {
        booleanValue?: boolean;
        doubleValue?: number;
        longValue?: number;
        stringValue?: string;
        variationName?: string;
    }

    export interface LaunchExecutionStatusObject {
        /**
         * Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
         */
        desiredState?: string;
        /**
         * Provide a reason for stopping the launch. Defaults to empty if not provided.
         */
        reason?: string;
        /**
         * Provide START or STOP action to apply on a launch
         */
        status: string;
    }

    export interface LaunchGroupObject {
        description?: string;
        feature: string;
        groupName: string;
        variation: string;
    }

    export interface LaunchGroupToWeight {
        groupName: string;
        splitWeight: number;
    }

    export interface LaunchMetricDefinitionObject {
        /**
         * The JSON path to reference the entity id in the event.
         */
        entityIdKey: string;
        /**
         * Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
         */
        eventPattern?: string;
        metricName: string;
        unitLabel?: string;
        /**
         * The JSON path to reference the numerical metric value in the event.
         */
        valueKey: string;
    }

    export interface LaunchSegmentOverride {
        evaluationOrder: number;
        segment: string;
        weights: outputs.evidently.LaunchGroupToWeight[];
    }

    export interface LaunchStepConfig {
        groupWeights: outputs.evidently.LaunchGroupToWeight[];
        segmentOverrides?: outputs.evidently.LaunchSegmentOverride[];
        startTime: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LaunchTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ProjectAppConfigResourceObject {
        applicationId: string;
        environmentId: string;
    }

    /**
     * Destinations for data.
     */
    export interface ProjectDataDeliveryObject {
        logGroup?: string;
        s3?: outputs.evidently.ProjectS3Destination;
    }

    export interface ProjectS3Destination {
        bucketName: string;
        prefix?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ProjectTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SegmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace finspace {
    /**
     * Additional parameters to identify Federation mode
     */
    export interface EnvironmentFederationParameters {
        /**
         * SAML metadata URL to link with the Environment
         */
        applicationCallBackUrl?: string;
        /**
         * Attribute map for SAML configuration
         */
        attributeMap?: outputs.finspace.EnvironmentFederationParametersAttributeMapItemProperties[];
        /**
         * Federation provider name to link with the Environment
         */
        federationProviderName?: string;
        /**
         * SAML metadata URL to link with the Environment
         */
        federationUrn?: string;
        /**
         * SAML metadata document to link the federation provider to the Environment
         */
        samlMetadataDocument?: string;
        /**
         * SAML metadata URL to link with the Environment
         */
        samlMetadataUrl?: string;
    }

    export interface EnvironmentFederationParametersAttributeMapItemProperties {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Parameters of the first Superuser for the FinSpace Environment
     */
    export interface EnvironmentSuperuserParameters {
        /**
         * Email address
         */
        emailAddress?: string;
        /**
         * First name
         */
        firstName?: string;
        /**
         * Last name
         */
        lastName?: string;
    }

    /**
     * A list of all tags for a resource.
     */
    export interface EnvironmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace fis {
    /**
     * The actions for the experiment.
     */
    export interface ExperimentTemplateActionMap {
    }

    export interface ExperimentTemplateExperimentOptions {
        /**
         * The account targeting setting for the experiment template.
         */
        accountTargeting?: enums.fis.ExperimentTemplateExperimentOptionsAccountTargeting;
        /**
         * The target resolution failure mode for the experiment template.
         */
        emptyTargetResolutionMode?: enums.fis.ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode;
    }

    export interface ExperimentTemplateLogConfiguration {
        cloudWatchLogsConfiguration?: outputs.fis.ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationProperties;
        logSchemaVersion: number;
        s3Configuration?: outputs.fis.ExperimentTemplateLogConfigurationS3ConfigurationProperties;
    }

    export interface ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationProperties {
        logGroupArn: string;
    }

    export interface ExperimentTemplateLogConfigurationS3ConfigurationProperties {
        bucketName: string;
        prefix?: string;
    }

    export interface ExperimentTemplateStopCondition {
        source: string;
        value?: string;
    }

    /**
     * The targets for the experiment.
     */
    export interface ExperimentTemplateTargetMap {
    }

}

export namespace fms {
    /**
     * An FMS includeMap or excludeMap.
     */
    export interface PolicyIeMap {
        account?: string[];
        orgunit?: string[];
    }

    /**
     * Network firewall policy.
     */
    export interface PolicyNetworkFirewallPolicy {
        firewallDeploymentModel: enums.fms.PolicyFirewallDeploymentModel;
    }

    /**
     * Firewall policy option.
     */
    export interface PolicyOption {
        networkFirewallPolicy?: outputs.fms.PolicyNetworkFirewallPolicy;
        thirdPartyFirewallPolicy?: outputs.fms.PolicyThirdPartyFirewallPolicy;
    }

    /**
     * A resource tag.
     */
    export interface PolicyResourceTag {
        key: string;
        value?: string;
    }

    /**
     * Firewall security service policy data.
     */
    export interface PolicySecurityServicePolicyData {
        managedServiceData?: string;
        policyOption?: outputs.fms.PolicyOption;
        type: enums.fms.PolicyType;
    }

    /**
     * A policy tag.
     */
    export interface PolicyTag {
        key: string;
        value: string;
    }

    /**
     * Third party firewall policy.
     */
    export interface PolicyThirdPartyFirewallPolicy {
        firewallDeploymentModel: enums.fms.PolicyFirewallDeploymentModel;
    }

    /**
     * A tag.
     */
    export interface ResourceSetTag {
        key: string;
        value: string;
    }

}

export namespace forecast {
    export interface DatasetAttributesItemProperties {
        /**
         * Name of the dataset field
         */
        attributeName?: string;
        /**
         * Data type of the field
         */
        attributeType?: enums.forecast.DatasetAttributesItemPropertiesAttributeType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DatasetGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface EncryptionConfigProperties {
        kmsKeyArn?: string;
        roleArn?: string;
    }

    export interface SchemaProperties {
        attributes?: outputs.forecast.DatasetAttributesItemProperties[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TagsItemProperties {
        key: string;
        value: string;
    }

}

export namespace frauddetector {
    export interface DetectorEntityType {
        arn?: string;
        /**
         * The time when the entity type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the entity type was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this entity type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorEventType {
        /**
         * The ARN of the event type.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description of the event type.
         */
        description?: string;
        entityTypes?: outputs.frauddetector.DetectorEntityType[];
        eventVariables?: outputs.frauddetector.DetectorEventVariable[];
        inline?: boolean;
        labels?: outputs.frauddetector.DetectorLabel[];
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The name for the event type
         */
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorEventVariable {
        arn?: string;
        /**
         * The time when the event variable was created.
         */
        createdTime?: string;
        dataSource?: enums.frauddetector.DetectorEventVariableDataSource;
        dataType?: enums.frauddetector.DetectorEventVariableDataType;
        defaultValue?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the event variable was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this event variable.
         */
        tags?: outputs.frauddetector.DetectorTag[];
        variableType?: enums.frauddetector.DetectorEventVariableVariableType;
    }

    export interface DetectorLabel {
        arn?: string;
        /**
         * The time when the label was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the label was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this label.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    /**
     * A model to associate with a detector.
     */
    export interface DetectorModel {
        arn?: string;
    }

    export interface DetectorOutcome {
        arn?: string;
        /**
         * The time when the outcome was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the outcome was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this outcome.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorRule {
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        detectorId?: string;
        expression?: string;
        language?: enums.frauddetector.DetectorRuleLanguage;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        outcomes?: outputs.frauddetector.DetectorOutcome[];
        ruleId?: string;
        ruleVersion?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorTag {
        key: string;
        value: string;
    }

    export interface EntityTypeTag {
        key: string;
        value: string;
    }

    export interface EventTypeEntityType {
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
    }

    export interface EventTypeEventVariable {
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        dataSource?: enums.frauddetector.EventTypeEventVariableDataSource;
        dataType?: enums.frauddetector.EventTypeEventVariableDataType;
        defaultValue?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
        variableType?: enums.frauddetector.EventTypeEventVariableVariableType;
    }

    export interface EventTypeLabel {
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
    }

    export interface EventTypeTag {
        key: string;
        value: string;
    }

    export interface LabelTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ListTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface OutcomeTag {
        key: string;
        value: string;
    }

    export interface VariableTag {
        key: string;
        value: string;
    }

}

export namespace fsx {
    /**
     * Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
     *  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
     */
    export interface DataRepositoryAssociationAutoExportPolicy {
        /**
         * The ``AutoExportPolicy`` can have the following event values:
         *   +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
         *   +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
         *   +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
         *   
         *  You can define any combination of event types for your ``AutoExportPolicy``.
         */
        events: enums.fsx.DataRepositoryAssociationEventType[];
    }

    /**
     * Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
     *  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
     */
    export interface DataRepositoryAssociationAutoImportPolicy {
        /**
         * The ``AutoImportPolicy`` can have the following event values:
         *   +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
         *   +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
         *   +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
         *   
         *  You can define any combination of event types for your ``AutoImportPolicy``.
         */
        events: enums.fsx.DataRepositoryAssociationEventType[];
    }

    /**
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     */
    export interface DataRepositoryAssociationS3 {
        /**
         * Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         *  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
         */
        autoExportPolicy?: outputs.fsx.DataRepositoryAssociationAutoExportPolicy;
        /**
         * Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         *  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
         */
        autoImportPolicy?: outputs.fsx.DataRepositoryAssociationAutoImportPolicy;
    }

    /**
     * Specifies a key-value pair for a resource tag.
     */
    export interface DataRepositoryAssociationTag {
        /**
         * A value that specifies the ``TagKey``, the name of the tag. Tag keys must be unique for the resource to which they are attached.
         */
        key: string;
        /**
         * A value that specifies the ``TagValue``, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of ``finances : April`` and also of ``payroll : April``.
         */
        value: string;
    }

    export interface FileSystemAuditLogConfiguration {
        auditLogDestination?: string;
        fileAccessAuditLogLevel: string;
        fileShareAccessAuditLogLevel: string;
    }

    export interface FileSystemClientConfigurations {
        clients?: string;
        options?: string[];
    }

    export interface FileSystemDiskIopsConfiguration {
        iops?: number;
        mode?: string;
    }

    export interface FileSystemLustreConfiguration {
        autoImportPolicy?: string;
        automaticBackupRetentionDays?: number;
        copyTagsToBackups?: boolean;
        dailyAutomaticBackupStartTime?: string;
        dataCompressionType?: string;
        deploymentType?: string;
        driveCacheType?: string;
        exportPath?: string;
        importPath?: string;
        importedFileChunkSize?: number;
        perUnitStorageThroughput?: number;
        weeklyMaintenanceStartTime?: string;
    }

    export interface FileSystemNfsExports {
        clientConfigurations?: outputs.fsx.FileSystemClientConfigurations[];
    }

    export interface FileSystemOntapConfiguration {
        automaticBackupRetentionDays?: number;
        dailyAutomaticBackupStartTime?: string;
        deploymentType: string;
        diskIopsConfiguration?: outputs.fsx.FileSystemDiskIopsConfiguration;
        endpointIpAddressRange?: string;
        fsxAdminPassword?: string;
        haPairs?: number;
        preferredSubnetId?: string;
        routeTableIds?: string[];
        throughputCapacity?: number;
        throughputCapacityPerHaPair?: number;
        weeklyMaintenanceStartTime?: string;
    }

    export interface FileSystemOpenZfsConfiguration {
        automaticBackupRetentionDays?: number;
        copyTagsToBackups?: boolean;
        copyTagsToVolumes?: boolean;
        dailyAutomaticBackupStartTime?: string;
        deploymentType: string;
        diskIopsConfiguration?: outputs.fsx.FileSystemDiskIopsConfiguration;
        endpointIpAddressRange?: string;
        options?: string[];
        preferredSubnetId?: string;
        rootVolumeConfiguration?: outputs.fsx.FileSystemRootVolumeConfiguration;
        routeTableIds?: string[];
        throughputCapacity?: number;
        weeklyMaintenanceStartTime?: string;
    }

    export interface FileSystemRootVolumeConfiguration {
        copyTagsToSnapshots?: boolean;
        dataCompressionType?: string;
        nfsExports?: outputs.fsx.FileSystemNfsExports[];
        readOnly?: boolean;
        recordSizeKiB?: number;
        userAndGroupQuotas?: outputs.fsx.FileSystemUserAndGroupQuotas[];
    }

    export interface FileSystemSelfManagedActiveDirectoryConfiguration {
        dnsIps?: string[];
        domainName?: string;
        fileSystemAdministratorsGroup?: string;
        organizationalUnitDistinguishedName?: string;
        password?: string;
        userName?: string;
    }

    export interface FileSystemTag {
        key: string;
        value: string;
    }

    export interface FileSystemUserAndGroupQuotas {
        id?: number;
        storageCapacityQuotaGiB?: number;
        type?: string;
    }

    export interface FileSystemWindowsConfiguration {
        activeDirectoryId?: string;
        aliases?: string[];
        auditLogConfiguration?: outputs.fsx.FileSystemAuditLogConfiguration;
        automaticBackupRetentionDays?: number;
        copyTagsToBackups?: boolean;
        dailyAutomaticBackupStartTime?: string;
        deploymentType?: string;
        diskIopsConfiguration?: outputs.fsx.FileSystemDiskIopsConfiguration;
        preferredSubnetId?: string;
        selfManagedActiveDirectoryConfiguration?: outputs.fsx.FileSystemSelfManagedActiveDirectoryConfiguration;
        throughputCapacity: number;
        weeklyMaintenanceStartTime?: string;
    }

    export interface SnapshotTag {
        key: string;
        value: string;
    }

    export interface StorageVirtualMachineActiveDirectoryConfiguration {
        netBiosName?: string;
        selfManagedActiveDirectoryConfiguration?: outputs.fsx.StorageVirtualMachineSelfManagedActiveDirectoryConfiguration;
    }

    export interface StorageVirtualMachineSelfManagedActiveDirectoryConfiguration {
        dnsIps?: string[];
        domainName?: string;
        fileSystemAdministratorsGroup?: string;
        organizationalUnitDistinguishedName?: string;
        password?: string;
        userName?: string;
    }

    export interface StorageVirtualMachineTag {
        key: string;
        value: string;
    }

    export interface VolumeAggregateConfiguration {
        aggregates?: string[];
        constituentsPerAggregate?: number;
    }

    export interface VolumeAutocommitPeriod {
        type: string;
        value?: number;
    }

    export interface VolumeClientConfigurations {
        clients: string;
        options: string[];
    }

    export interface VolumeNfsExports {
        clientConfigurations: outputs.fsx.VolumeClientConfigurations[];
    }

    export interface VolumeOntapConfiguration {
        aggregateConfiguration?: outputs.fsx.VolumeAggregateConfiguration;
        copyTagsToBackups?: string;
        junctionPath?: string;
        ontapVolumeType?: string;
        securityStyle?: string;
        sizeInBytes?: string;
        sizeInMegabytes?: string;
        snaplockConfiguration?: outputs.fsx.VolumeSnaplockConfiguration;
        snapshotPolicy?: string;
        storageEfficiencyEnabled?: string;
        storageVirtualMachineId: string;
        tieringPolicy?: outputs.fsx.VolumeTieringPolicy;
        volumeStyle?: string;
    }

    export interface VolumeOpenZfsConfiguration {
        copyTagsToSnapshots?: boolean;
        dataCompressionType?: string;
        nfsExports?: outputs.fsx.VolumeNfsExports[];
        options?: string[];
        originSnapshot?: outputs.fsx.VolumeOriginSnapshot;
        parentVolumeId: string;
        readOnly?: boolean;
        recordSizeKiB?: number;
        storageCapacityQuotaGiB?: number;
        storageCapacityReservationGiB?: number;
        userAndGroupQuotas?: outputs.fsx.VolumeUserAndGroupQuotas[];
    }

    export interface VolumeOriginSnapshot {
        copyStrategy: string;
        snapshotArn: string;
    }

    export interface VolumeRetentionPeriod {
        type: string;
        value?: number;
    }

    export interface VolumeSnaplockConfiguration {
        auditLogVolume?: string;
        autocommitPeriod?: outputs.fsx.VolumeAutocommitPeriod;
        privilegedDelete?: string;
        retentionPeriod?: outputs.fsx.VolumeSnaplockRetentionPeriod;
        snaplockType: string;
        volumeAppendModeEnabled?: string;
    }

    export interface VolumeSnaplockRetentionPeriod {
        defaultRetention: outputs.fsx.VolumeRetentionPeriod;
        maximumRetention: outputs.fsx.VolumeRetentionPeriod;
        minimumRetention: outputs.fsx.VolumeRetentionPeriod;
    }

    export interface VolumeTag {
        key: string;
        value: string;
    }

    export interface VolumeTieringPolicy {
        coolingPeriod?: number;
        name?: string;
    }

    export interface VolumeUserAndGroupQuotas {
        id: number;
        storageCapacityQuotaGiB: number;
        type: string;
    }

}

export namespace gamelift {
    export interface AliasRoutingStrategy {
        /**
         * A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
         */
        fleetId?: string;
        /**
         * The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
         */
        message?: string;
        /**
         * Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
         */
        type: enums.gamelift.AliasRoutingStrategyType;
    }

    export interface BuildStorageLocation {
        /**
         * An Amazon S3 bucket identifier. This is the name of the S3 bucket.
         */
        bucket: string;
        /**
         * The name of the zip file that contains the build files or script files.
         */
        key: string;
        /**
         * The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from your S3 bucket. To retrieve a specific version of the file, provide an object version. To retrieve the latest version of the file, do not set this parameter.
         */
        objectVersion?: string;
        /**
         * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
         */
        roleArn: string;
    }

    /**
     * Configuration for Anywhere fleet.
     */
    export interface FleetAnywhereConfiguration {
        /**
         * Cost of compute can be specified on Anywhere Fleets to prioritize placement across Queue destinations based on Cost.
         */
        cost: string;
    }

    /**
     * Information about the use of a TLS/SSL certificate for a fleet. TLS certificate generation is enabled at the fleet level, with one certificate generated for the fleet. When this feature is enabled, the certificate can be retrieved using the GameLift Server SDK call GetInstanceCertificate. All instances in a fleet share the same certificate.
     */
    export interface FleetCertificateConfiguration {
        certificateType: enums.gamelift.FleetCertificateConfigurationCertificateType;
    }

    /**
     * A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift hosting resource. New game sessions that are started on the fleet are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. For fleets created with a custom game server, the ranges reflect the server's game session assignments. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP messaging and one for UDP, for use by the Realtime servers.
     */
    export interface FleetIpPermission {
        /**
         * A starting value for a range of allowed port numbers.
         */
        fromPort: number;
        /**
         * A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
         */
        ipRange: string;
        /**
         * The network communication protocol used by the fleet.
         */
        protocol: enums.gamelift.FleetIpPermissionProtocol;
        /**
         * An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
         */
        toPort: number;
    }

    /**
     * Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region.
     */
    export interface FleetLocationCapacity {
        /**
         * The number of EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.
         */
        desiredEc2Instances: number;
        /**
         * The maximum value that is allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.
         */
        maxSize: number;
        /**
         * The minimum value allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.
         */
        minSize: number;
    }

    /**
     * A remote location where a multi-location fleet can deploy EC2 instances for game hosting.
     */
    export interface FleetLocationConfiguration {
        location: string;
        locationCapacity?: outputs.gamelift.FleetLocationCapacity;
    }

    /**
     * A policy that limits the number of game sessions a player can create on the same fleet. This optional policy gives game owners control over how players can consume available game server resources. A resource creation policy makes the following statement: "An individual player can create a maximum number of new game sessions within a specified time period".
     *
     * The policy is evaluated when a player tries to create a new game session. For example, assume you have a policy of 10 new game sessions and a time period of 60 minutes. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than 10 game sessions in the past 60 minutes.
     */
    export interface FleetResourceCreationLimitPolicy {
        /**
         * The maximum number of game sessions that an individual can create during the policy period.
         */
        newGameSessionsPerCreator?: number;
        /**
         * The time span used in evaluating the resource creation limit policy.
         */
        policyPeriodInMinutes?: number;
    }

    /**
     * A collection of server process configurations that describe the processes to run on each instance in a fleet. All fleets must have a runtime configuration. Each instance in the fleet maintains server processes as specified in the runtime configuration, launching new ones as existing processes end. Each instance regularly checks for an updated runtime configuration makes adjustments as called for.
     *
     * The runtime configuration enables the instances in a fleet to run multiple processes simultaneously. Potential scenarios are as follows: (1) Run multiple processes of a single game server executable to maximize usage of your hosting resources. (2) Run one or more processes of different executables, such as your game server and a metrics tracking program. (3) Run multiple processes of a single game server but with different launch parameters, for example to run one process on each instance in debug mode.
     *
     * An Amazon GameLift instance is limited to 50 processes running simultaneously. A runtime configuration must specify fewer than this limit. To calculate the total number of processes specified in a runtime configuration, add the values of the ConcurrentExecutions parameter for each ServerProcess object in the runtime configuration.
     */
    export interface FleetRuntimeConfiguration {
        /**
         * The maximum amount of time (in seconds) that a game session can remain in status ACTIVATING. If the game session is not active before the timeout, activation is terminated and the game session status is changed to TERMINATED.
         */
        gameSessionActivationTimeoutSeconds?: number;
        /**
         * The maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
         */
        maxConcurrentGameSessionActivations?: number;
        /**
         * A collection of server process configurations that describe which server processes to run on each instance in a fleet.
         */
        serverProcesses?: outputs.gamelift.FleetServerProcess[];
    }

    /**
     * Rule that controls how a fleet is scaled. Scaling policies are uniquely identified by the combination of name and fleet ID.
     */
    export interface FleetScalingPolicy {
        /**
         * Comparison operator to use when measuring a metric against the threshold value.
         */
        comparisonOperator?: enums.gamelift.FleetScalingPolicyComparisonOperator;
        /**
         * Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
         */
        evaluationPeriods?: number;
        location?: string;
        /**
         * Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment.
         */
        metricName: enums.gamelift.FleetScalingPolicyMetricName;
        /**
         * A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
         */
        name: string;
        /**
         * The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
         */
        policyType?: enums.gamelift.FleetScalingPolicyPolicyType;
        /**
         * Amount of adjustment to make, based on the scaling adjustment type.
         */
        scalingAdjustment?: number;
        /**
         * The type of adjustment to make to a fleet's instance count.
         */
        scalingAdjustmentType?: enums.gamelift.FleetScalingPolicyScalingAdjustmentType;
        /**
         * Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets. If the policy is suspended for a fleet, the policy status does not change.
         */
        status?: enums.gamelift.FleetScalingPolicyStatus;
        /**
         * An object that contains settings for a target-based scaling policy.
         */
        targetConfiguration?: outputs.gamelift.FleetTargetConfiguration;
        /**
         * Metric value used to trigger a scaling event.
         */
        threshold?: number;
        /**
         * The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
         */
        updateStatus?: enums.gamelift.FleetScalingPolicyUpdateStatus;
    }

    /**
     * A set of instructions for launching server processes on each instance in a fleet. Each instruction set identifies the location of the server executable, optional launch parameters, and the number of server processes with this configuration to maintain concurrently on the instance. Server process configurations make up a fleet's RuntimeConfiguration.
     */
    export interface FleetServerProcess {
        /**
         * The number of server processes that use this configuration to run concurrently on an instance.
         */
        concurrentExecutions: number;
        /**
         * The location of the server executable in a custom game build or the name of the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:
         *
         * Windows (for custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"
         *
         * Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
         */
        launchPath: string;
        /**
         * An optional list of parameters to pass to the server executable or Realtime script on launch.
         */
        parameters?: string;
    }

    /**
     * Settings for a target-based scaling policy. A target-based policy tracks a particular fleet metric specifies a target value for the metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so that the metric returns to the target value. The target configuration specifies settings as needed for the target based policy, including the target value.
     */
    export interface FleetTargetConfiguration {
        /**
         * Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
         */
        targetValue: number;
    }

    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
     */
    export interface GameServerGroupAutoScalingPolicy {
        estimatedInstanceWarmup?: number;
        targetTrackingConfiguration: outputs.gamelift.GameServerGroupTargetTrackingConfiguration;
    }

    /**
     * An allowed instance type for your game server group.
     */
    export interface GameServerGroupInstanceDefinition {
        instanceType: string;
        weightedCapacity?: string;
    }

    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
     */
    export interface GameServerGroupLaunchTemplate {
        launchTemplateId?: string;
        launchTemplateName?: string;
        version?: string;
    }

    export interface GameServerGroupTag {
        /**
         * The key for a developer-defined key:value pair for tagging an AWS resource.
         */
        key?: string;
        /**
         * The value for a developer-defined key:value pair for tagging an AWS resource.
         */
        value?: string;
    }

    /**
     * Settings for a target-based scaling policy applied to Auto Scaling group.
     */
    export interface GameServerGroupTargetTrackingConfiguration {
        targetValue: number;
    }

    /**
     * A fleet or alias designated in a game session queue.
     */
    export interface GameSessionQueueDestination {
        destinationArn?: string;
    }

    export interface GameSessionQueueFilterConfiguration {
        allowedLocations?: string[];
    }

    /**
     * Sets a latency cap for individual players when placing a game session.
     */
    export interface GameSessionQueuePlayerLatencyPolicy {
        /**
         * The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
         */
        maximumIndividualPlayerLatencyMilliseconds?: number;
        /**
         * The length of time, in seconds, that the policy is enforced while placing a new game session.
         */
        policyDurationSeconds?: number;
    }

    export interface GameSessionQueuePriorityConfiguration {
        locationOrder?: string[];
        priorityOrder?: enums.gamelift.GameSessionQueuePriorityOrderItem[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface GameSessionQueueTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LocationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length.
         */
        value: string;
    }

    /**
     * A key-value pair that contains information about a game session.
     */
    export interface MatchmakingConfigurationGameProperty {
        /**
         * The game property identifier.
         */
        key: string;
        /**
         * The game property value.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MatchmakingConfigurationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MatchmakingRuleSetTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length.
         */
        value: string;
    }

    export interface ScriptS3Location {
        /**
         * An Amazon S3 bucket identifier. This is the name of the S3 bucket.
         */
        bucket: string;
        /**
         * The name of the zip file that contains the script files.
         */
        key: string;
        /**
         * The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from your S3 bucket. To retrieve a specific version of the file, provide an object version. To retrieve the latest version of the file, do not set this parameter.
         */
        objectVersion?: string;
        /**
         * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
         */
        roleArn: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ScriptTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length.
         */
        value: string;
    }

}

export namespace globalaccelerator {
    /**
     * Tag is a key-value pair associated with accelerator.
     */
    export interface AcceleratorTag {
        /**
         * Key of the tag. Value can be 1 to 127 characters.
         */
        key: string;
        /**
         * Value for the tag. Value can be 1 to 255 characters.
         */
        value: string;
    }

    /**
     * The configuration for a given endpoint
     */
    export interface EndpointGroupEndpointConfiguration {
        /**
         * Attachment ARN that provides access control to the cross account endpoint. Not required for resources hosted in the same account as the endpoint group.
         */
        attachmentArn?: string;
        /**
         * true if client ip should be preserved
         */
        clientIpPreservationEnabled?: boolean;
        /**
         * Id of the endpoint. For Network/Application Load Balancer this value is the ARN.  For EIP, this value is the allocation ID.  For EC2 instances, this is the EC2 instance ID
         */
        endpointId: string;
        /**
         * The weight for the endpoint.
         */
        weight?: number;
    }

    /**
     * listener to endpoint port mapping.
     */
    export interface EndpointGroupPortOverride {
        endpointPort: number;
        listenerPort: number;
    }

    /**
     * A port range to support for connections from  clients to your accelerator.
     */
    export interface ListenerPortRange {
        fromPort: number;
        toPort: number;
    }

}

export namespace glue {
    export interface ClassifierCsvClassifier {
        allowSingleColumn?: boolean;
        containsCustomDatatype?: string[];
        containsHeader?: string;
        customDatatypeConfigured?: boolean;
        delimiter?: string;
        disableValueTrimming?: boolean;
        header?: string[];
        name?: string;
        quoteSymbol?: string;
    }

    export interface ClassifierGrokClassifier {
        classification: string;
        customPatterns?: string;
        grokPattern: string;
        name?: string;
    }

    export interface ClassifierJsonClassifier {
        jsonPath: string;
        name?: string;
    }

    export interface ClassifierXmlClassifier {
        classification: string;
        name?: string;
        rowTag: string;
    }

    export interface ConnectionInput {
        connectionProperties?: any;
        connectionType: string;
        description?: string;
        matchCriteria?: string[];
        name?: string;
        physicalConnectionRequirements?: outputs.glue.ConnectionPhysicalConnectionRequirements;
    }

    export interface ConnectionPhysicalConnectionRequirements {
        availabilityZone?: string;
        securityGroupIdList?: string[];
        subnetId?: string;
    }

    export interface CrawlerCatalogTarget {
        connectionName?: string;
        databaseName?: string;
        dlqEventQueueArn?: string;
        eventQueueArn?: string;
        tables?: string[];
    }

    export interface CrawlerDeltaTarget {
        connectionName?: string;
        createNativeDeltaTable?: boolean;
        deltaTables?: string[];
        writeManifest?: boolean;
    }

    export interface CrawlerDynamoDbTarget {
        path?: string;
    }

    export interface CrawlerIcebergTarget {
        connectionName?: string;
        exclusions?: string[];
        maximumTraversalDepth?: number;
        paths?: string[];
    }

    export interface CrawlerJdbcTarget {
        connectionName?: string;
        exclusions?: string[];
        path?: string;
    }

    export interface CrawlerMongoDbTarget {
        connectionName?: string;
        path?: string;
    }

    export interface CrawlerRecrawlPolicy {
        recrawlBehavior?: string;
    }

    export interface CrawlerS3Target {
        connectionName?: string;
        dlqEventQueueArn?: string;
        eventQueueArn?: string;
        exclusions?: string[];
        path?: string;
        sampleSize?: number;
    }

    export interface CrawlerSchedule {
        scheduleExpression?: string;
    }

    export interface CrawlerSchemaChangePolicy {
        deleteBehavior?: string;
        updateBehavior?: string;
    }

    export interface CrawlerTargets {
        catalogTargets?: outputs.glue.CrawlerCatalogTarget[];
        deltaTargets?: outputs.glue.CrawlerDeltaTarget[];
        dynamoDbTargets?: outputs.glue.CrawlerDynamoDbTarget[];
        icebergTargets?: outputs.glue.CrawlerIcebergTarget[];
        jdbcTargets?: outputs.glue.CrawlerJdbcTarget[];
        mongoDbTargets?: outputs.glue.CrawlerMongoDbTarget[];
        s3Targets?: outputs.glue.CrawlerS3Target[];
    }

    export interface DataCatalogEncryptionSettings {
        connectionPasswordEncryption?: outputs.glue.DataCatalogEncryptionSettingsConnectionPasswordEncryption;
        encryptionAtRest?: outputs.glue.DataCatalogEncryptionSettingsEncryptionAtRest;
    }

    export interface DataCatalogEncryptionSettingsConnectionPasswordEncryption {
        kmsKeyId?: string;
        returnConnectionPasswordEncrypted?: boolean;
    }

    export interface DataCatalogEncryptionSettingsEncryptionAtRest {
        catalogEncryptionMode?: string;
        sseAwsKmsKeyId?: string;
    }

    export interface DataQualityRulesetDataQualityTargetTable {
        databaseName?: string;
        tableName?: string;
    }

    export interface DatabaseDataLakePrincipal {
        dataLakePrincipalIdentifier?: string;
    }

    export interface DatabaseFederatedDatabase {
        connectionName?: string;
        identifier?: string;
    }

    export interface DatabaseIdentifier {
        catalogId?: string;
        databaseName?: string;
        region?: string;
    }

    export interface DatabaseInput {
        createTableDefaultPermissions?: outputs.glue.DatabasePrincipalPrivileges[];
        description?: string;
        federatedDatabase?: outputs.glue.DatabaseFederatedDatabase;
        locationUri?: string;
        name?: string;
        parameters?: any;
        targetDatabase?: outputs.glue.DatabaseIdentifier;
    }

    export interface DatabasePrincipalPrivileges {
        permissions?: string[];
        principal?: outputs.glue.DatabaseDataLakePrincipal;
    }

    export interface JobCommand {
        name?: string;
        pythonVersion?: string;
        runtime?: string;
        scriptLocation?: string;
    }

    export interface JobConnectionsList {
        connections?: string[];
    }

    export interface JobExecutionProperty {
        maxConcurrentRuns?: number;
    }

    export interface JobNotificationProperty {
        notifyDelayAfter?: number;
    }

    export interface MlTransformFindMatchesParameters {
        accuracyCostTradeoff?: number;
        enforceProvidedLabels?: boolean;
        precisionRecallTradeoff?: number;
        primaryKeyColumnName: string;
    }

    export interface MlTransformGlueTables {
        catalogId?: string;
        connectionName?: string;
        databaseName: string;
        tableName: string;
    }

    export interface MlTransformInputRecordTables {
        glueTables?: outputs.glue.MlTransformGlueTables[];
    }

    export interface MlTransformMlUserDataEncryption {
        kmsKeyId?: string;
        mlUserDataEncryptionMode: string;
    }

    export interface MlTransformTransformEncryption {
        mlUserDataEncryption?: outputs.glue.MlTransformMlUserDataEncryption;
        taskRunSecurityConfigurationName?: string;
    }

    export interface MlTransformTransformParameters {
        findMatchesParameters?: outputs.glue.MlTransformFindMatchesParameters;
        transformType: string;
    }

    export interface PartitionColumn {
        comment?: string;
        name: string;
        type?: string;
    }

    export interface PartitionInput {
        parameters?: any;
        storageDescriptor?: outputs.glue.PartitionStorageDescriptor;
        values: string[];
    }

    export interface PartitionOrder {
        column: string;
        sortOrder?: number;
    }

    export interface PartitionSchemaId {
        registryName?: string;
        schemaArn?: string;
        schemaName?: string;
    }

    export interface PartitionSchemaReference {
        schemaId?: outputs.glue.PartitionSchemaId;
        schemaVersionId?: string;
        schemaVersionNumber?: number;
    }

    export interface PartitionSerdeInfo {
        name?: string;
        parameters?: any;
        serializationLibrary?: string;
    }

    export interface PartitionSkewedInfo {
        skewedColumnNames?: string[];
        skewedColumnValueLocationMaps?: any;
        skewedColumnValues?: string[];
    }

    export interface PartitionStorageDescriptor {
        bucketColumns?: string[];
        columns?: outputs.glue.PartitionColumn[];
        compressed?: boolean;
        inputFormat?: string;
        location?: string;
        numberOfBuckets?: number;
        outputFormat?: string;
        parameters?: any;
        schemaReference?: outputs.glue.PartitionSchemaReference;
        serdeInfo?: outputs.glue.PartitionSerdeInfo;
        skewedInfo?: outputs.glue.PartitionSkewedInfo;
        sortColumns?: outputs.glue.PartitionOrder[];
        storedAsSubDirectories?: boolean;
    }

    export interface RegistryTag {
        /**
         * A key to identify the tag.
         */
        key: string;
        /**
         * Corresponding tag value for the key.
         */
        value: string;
    }

    /**
     * Identifier for the registry which the schema is part of.
     */
    export interface SchemaRegistry {
        /**
         * Amazon Resource Name for the Registry.
         */
        arn?: string;
        /**
         * Name of the registry in which the schema will be created.
         */
        name?: string;
    }

    export interface SchemaTag {
        /**
         * A key to identify the tag.
         */
        key: string;
        /**
         * Corresponding tag value for the key.
         */
        value: string;
    }

    /**
     * Specify checkpoint version for update. This is only required to update the Compatibility.
     */
    export interface SchemaVersion {
        /**
         * Indicates if the latest version needs to be updated.
         */
        isLatest?: boolean;
        /**
         * Indicates the version number in the schema to update.
         */
        versionNumber?: number;
    }

    /**
     * Identifier for the schema where the schema version will be created.
     */
    export interface SchemaVersionSchema {
        /**
         * Name of the registry to identify where the Schema is located.
         */
        registryName?: string;
        /**
         * Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
         */
        schemaArn?: string;
        /**
         * Name of the schema. This parameter requires RegistryName to be provided.
         */
        schemaName?: string;
    }

    export interface SecurityConfigurationCloudWatchEncryption {
        cloudWatchEncryptionMode?: string;
        kmsKeyArn?: string;
    }

    export interface SecurityConfigurationEncryptionConfiguration {
        cloudWatchEncryption?: outputs.glue.SecurityConfigurationCloudWatchEncryption;
        jobBookmarksEncryption?: outputs.glue.SecurityConfigurationJobBookmarksEncryption;
        s3Encryptions?: outputs.glue.SecurityConfigurationS3Encryptions;
    }

    export interface SecurityConfigurationJobBookmarksEncryption {
        jobBookmarksEncryptionMode?: string;
        kmsKeyArn?: string;
    }

    export interface SecurityConfigurationS3Encryptions {
    }

    export interface TableColumn {
        comment?: string;
        name: string;
        type?: string;
    }

    export interface TableIcebergInput {
        metadataOperation?: outputs.glue.TableMetadataOperation;
        version?: string;
    }

    export interface TableIdentifier {
        catalogId?: string;
        databaseName?: string;
        name?: string;
        region?: string;
    }

    export interface TableInput {
        description?: string;
        name?: string;
        owner?: string;
        parameters?: any;
        partitionKeys?: outputs.glue.TableColumn[];
        retention?: number;
        storageDescriptor?: outputs.glue.TableStorageDescriptor;
        tableType?: string;
        targetTable?: outputs.glue.TableIdentifier;
        viewExpandedText?: string;
        viewOriginalText?: string;
    }

    export interface TableMetadataOperation {
    }

    export interface TableOpenTableFormatInput {
        icebergInput?: outputs.glue.TableIcebergInput;
    }

    export interface TableOptimizerConfiguration {
        enabled?: boolean;
        roleArn?: string;
    }

    export interface TableOrder {
        column: string;
        sortOrder: number;
    }

    export interface TableSchemaId {
        registryName?: string;
        schemaArn?: string;
        schemaName?: string;
    }

    export interface TableSchemaReference {
        schemaId?: outputs.glue.TableSchemaId;
        schemaVersionId?: string;
        schemaVersionNumber?: number;
    }

    export interface TableSerdeInfo {
        name?: string;
        parameters?: any;
        serializationLibrary?: string;
    }

    export interface TableSkewedInfo {
        skewedColumnNames?: string[];
        skewedColumnValueLocationMaps?: any;
        skewedColumnValues?: string[];
    }

    export interface TableStorageDescriptor {
        bucketColumns?: string[];
        columns?: outputs.glue.TableColumn[];
        compressed?: boolean;
        inputFormat?: string;
        location?: string;
        numberOfBuckets?: number;
        outputFormat?: string;
        parameters?: any;
        schemaReference?: outputs.glue.TableSchemaReference;
        serdeInfo?: outputs.glue.TableSerdeInfo;
        skewedInfo?: outputs.glue.TableSkewedInfo;
        sortColumns?: outputs.glue.TableOrder[];
        storedAsSubDirectories?: boolean;
    }

    export interface TriggerAction {
        arguments?: any;
        crawlerName?: string;
        jobName?: string;
        notificationProperty?: outputs.glue.TriggerNotificationProperty;
        securityConfiguration?: string;
        timeout?: number;
    }

    export interface TriggerCondition {
        crawlState?: string;
        crawlerName?: string;
        jobName?: string;
        logicalOperator?: string;
        state?: string;
    }

    export interface TriggerEventBatchingCondition {
        batchSize: number;
        batchWindow?: number;
    }

    export interface TriggerNotificationProperty {
        notifyDelayAfter?: number;
    }

    export interface TriggerPredicate {
        conditions?: outputs.glue.TriggerCondition[];
        logical?: string;
    }

}

export namespace grafana {
    /**
     * Maps Grafana friendly names to the IdPs SAML attributes.
     */
    export interface WorkspaceAssertionAttributes {
        /**
         * Name of the attribute within the SAML assert to use as the users email in Grafana.
         */
        email?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users groups in Grafana.
         */
        groups?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users login handle in Grafana.
         */
        login?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users name in Grafana.
         */
        name?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users organizations in Grafana.
         */
        org?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users roles in Grafana.
         */
        role?: string;
    }

    /**
     * IdP Metadata used to configure SAML authentication in Grafana.
     */
    export interface WorkspaceIdpMetadata {
        /**
         * URL that vends the IdPs metadata.
         */
        url?: string;
        /**
         * XML blob of the IdPs metadata.
         */
        xml?: string;
    }

    /**
     * The configuration settings for Network Access Control.
     */
    export interface WorkspaceNetworkAccessControl {
        /**
         * The list of prefix list IDs. A prefix list is a list of CIDR ranges of IP addresses. The IP addresses specified are allowed to access your workspace. If the list is not included in the configuration then no IP addresses will be allowed to access the workspace.
         */
        prefixListIds?: string[];
        /**
         * The list of Amazon VPC endpoint IDs for the workspace. If a NetworkAccessConfiguration is specified then only VPC endpoints specified here will be allowed to access the workspace.
         */
        vpceIds?: string[];
    }

    /**
     * Maps SAML roles to the Grafana Editor and Admin roles.
     */
    export interface WorkspaceRoleValues {
        /**
         * List of SAML roles which will be mapped into the Grafana Admin role.
         */
        admin?: string[];
        /**
         * List of SAML roles which will be mapped into the Grafana Editor role.
         */
        editor?: string[];
    }

    /**
     * SAML configuration data associated with an AMG workspace.
     */
    export interface WorkspaceSamlConfiguration {
        /**
         * List of SAML organizations allowed to access Grafana.
         */
        allowedOrganizations?: string[];
        assertionAttributes?: outputs.grafana.WorkspaceAssertionAttributes;
        idpMetadata: outputs.grafana.WorkspaceIdpMetadata;
        /**
         * The maximum lifetime an authenticated user can be logged in (in minutes) before being required to re-authenticate.
         */
        loginValidityDuration?: number;
        roleValues?: outputs.grafana.WorkspaceRoleValues;
    }

    /**
     * The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
     */
    export interface WorkspaceVpcConfiguration {
        /**
         * The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.
         */
        securityGroupIds: string[];
        /**
         * The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.
         */
        subnetIds: string[];
    }

}

export namespace greengrass {
    export interface ConnectorDefinitionConnector {
        connectorArn: string;
        id: string;
        parameters?: any;
    }

    export interface ConnectorDefinitionVersion {
        connectors: outputs.greengrass.ConnectorDefinitionConnector[];
    }

    export interface ConnectorDefinitionVersionConnector {
        connectorArn: string;
        id: string;
        parameters?: any;
    }

    export interface CoreDefinitionCore {
        certificateArn: string;
        id: string;
        syncShadow?: boolean;
        thingArn: string;
    }

    export interface CoreDefinitionVersion {
        cores: outputs.greengrass.CoreDefinitionCore[];
    }

    export interface CoreDefinitionVersionCore {
        certificateArn: string;
        id: string;
        syncShadow?: boolean;
        thingArn: string;
    }

    export interface DeviceDefinitionDevice {
        certificateArn: string;
        id: string;
        syncShadow?: boolean;
        thingArn: string;
    }

    export interface DeviceDefinitionVersion {
        devices: outputs.greengrass.DeviceDefinitionDevice[];
    }

    export interface DeviceDefinitionVersionDevice {
        certificateArn: string;
        id: string;
        syncShadow?: boolean;
        thingArn: string;
    }

    export interface FunctionDefinitionDefaultConfig {
        execution: outputs.greengrass.FunctionDefinitionExecution;
    }

    export interface FunctionDefinitionEnvironment {
        accessSysfs?: boolean;
        execution?: outputs.greengrass.FunctionDefinitionExecution;
        resourceAccessPolicies?: outputs.greengrass.FunctionDefinitionResourceAccessPolicy[];
        variables?: any;
    }

    export interface FunctionDefinitionExecution {
        isolationMode?: string;
        runAs?: outputs.greengrass.FunctionDefinitionRunAs;
    }

    export interface FunctionDefinitionFunction {
        functionArn: string;
        functionConfiguration: outputs.greengrass.FunctionDefinitionFunctionConfiguration;
        id: string;
    }

    export interface FunctionDefinitionFunctionConfiguration {
        encodingType?: string;
        environment?: outputs.greengrass.FunctionDefinitionEnvironment;
        execArgs?: string;
        executable?: string;
        memorySize?: number;
        pinned?: boolean;
        timeout?: number;
    }

    export interface FunctionDefinitionResourceAccessPolicy {
        permission?: string;
        resourceId: string;
    }

    export interface FunctionDefinitionRunAs {
        gid?: number;
        uid?: number;
    }

    export interface FunctionDefinitionVersion {
        defaultConfig?: outputs.greengrass.FunctionDefinitionDefaultConfig;
        functions: outputs.greengrass.FunctionDefinitionFunction[];
    }

    export interface FunctionDefinitionVersionDefaultConfig {
        execution: outputs.greengrass.FunctionDefinitionVersionExecution;
    }

    export interface FunctionDefinitionVersionEnvironment {
        accessSysfs?: boolean;
        execution?: outputs.greengrass.FunctionDefinitionVersionExecution;
        resourceAccessPolicies?: outputs.greengrass.FunctionDefinitionVersionResourceAccessPolicy[];
        variables?: any;
    }

    export interface FunctionDefinitionVersionExecution {
        isolationMode?: string;
        runAs?: outputs.greengrass.FunctionDefinitionVersionRunAs;
    }

    export interface FunctionDefinitionVersionFunction {
        functionArn: string;
        functionConfiguration: outputs.greengrass.FunctionDefinitionVersionFunctionConfiguration;
        id: string;
    }

    export interface FunctionDefinitionVersionFunctionConfiguration {
        encodingType?: string;
        environment?: outputs.greengrass.FunctionDefinitionVersionEnvironment;
        execArgs?: string;
        executable?: string;
        memorySize?: number;
        pinned?: boolean;
        timeout?: number;
    }

    export interface FunctionDefinitionVersionResourceAccessPolicy {
        permission?: string;
        resourceId: string;
    }

    export interface FunctionDefinitionVersionRunAs {
        gid?: number;
        uid?: number;
    }

    export interface GroupVersion {
        connectorDefinitionVersionArn?: string;
        coreDefinitionVersionArn?: string;
        deviceDefinitionVersionArn?: string;
        functionDefinitionVersionArn?: string;
        loggerDefinitionVersionArn?: string;
        resourceDefinitionVersionArn?: string;
        subscriptionDefinitionVersionArn?: string;
    }

    export interface LoggerDefinitionLogger {
        component: string;
        id: string;
        level: string;
        space?: number;
        type: string;
    }

    export interface LoggerDefinitionVersion {
        loggers: outputs.greengrass.LoggerDefinitionLogger[];
    }

    export interface LoggerDefinitionVersionLogger {
        component: string;
        id: string;
        level: string;
        space?: number;
        type: string;
    }

    export interface ResourceDefinitionGroupOwnerSetting {
        autoAddGroupOwner: boolean;
        groupOwner?: string;
    }

    export interface ResourceDefinitionLocalDeviceResourceData {
        groupOwnerSetting?: outputs.greengrass.ResourceDefinitionGroupOwnerSetting;
        sourcePath: string;
    }

    export interface ResourceDefinitionLocalVolumeResourceData {
        destinationPath: string;
        groupOwnerSetting?: outputs.greengrass.ResourceDefinitionGroupOwnerSetting;
        sourcePath: string;
    }

    export interface ResourceDefinitionResourceDataContainer {
        localDeviceResourceData?: outputs.greengrass.ResourceDefinitionLocalDeviceResourceData;
        localVolumeResourceData?: outputs.greengrass.ResourceDefinitionLocalVolumeResourceData;
        s3MachineLearningModelResourceData?: outputs.greengrass.ResourceDefinitionS3MachineLearningModelResourceData;
        sageMakerMachineLearningModelResourceData?: outputs.greengrass.ResourceDefinitionSageMakerMachineLearningModelResourceData;
        secretsManagerSecretResourceData?: outputs.greengrass.ResourceDefinitionSecretsManagerSecretResourceData;
    }

    export interface ResourceDefinitionResourceDownloadOwnerSetting {
        groupOwner: string;
        groupPermission: string;
    }

    export interface ResourceDefinitionResourceInstance {
        id: string;
        name: string;
        resourceDataContainer: outputs.greengrass.ResourceDefinitionResourceDataContainer;
    }

    export interface ResourceDefinitionS3MachineLearningModelResourceData {
        destinationPath: string;
        ownerSetting?: outputs.greengrass.ResourceDefinitionResourceDownloadOwnerSetting;
        s3Uri: string;
    }

    export interface ResourceDefinitionSageMakerMachineLearningModelResourceData {
        destinationPath: string;
        ownerSetting?: outputs.greengrass.ResourceDefinitionResourceDownloadOwnerSetting;
        sageMakerJobArn: string;
    }

    export interface ResourceDefinitionSecretsManagerSecretResourceData {
        additionalStagingLabelsToDownload?: string[];
        arn: string;
    }

    export interface ResourceDefinitionVersion {
        resources: outputs.greengrass.ResourceDefinitionResourceInstance[];
    }

    export interface ResourceDefinitionVersionGroupOwnerSetting {
        autoAddGroupOwner: boolean;
        groupOwner?: string;
    }

    export interface ResourceDefinitionVersionLocalDeviceResourceData {
        groupOwnerSetting?: outputs.greengrass.ResourceDefinitionVersionGroupOwnerSetting;
        sourcePath: string;
    }

    export interface ResourceDefinitionVersionLocalVolumeResourceData {
        destinationPath: string;
        groupOwnerSetting?: outputs.greengrass.ResourceDefinitionVersionGroupOwnerSetting;
        sourcePath: string;
    }

    export interface ResourceDefinitionVersionResourceDataContainer {
        localDeviceResourceData?: outputs.greengrass.ResourceDefinitionVersionLocalDeviceResourceData;
        localVolumeResourceData?: outputs.greengrass.ResourceDefinitionVersionLocalVolumeResourceData;
        s3MachineLearningModelResourceData?: outputs.greengrass.ResourceDefinitionVersionS3MachineLearningModelResourceData;
        sageMakerMachineLearningModelResourceData?: outputs.greengrass.ResourceDefinitionVersionSageMakerMachineLearningModelResourceData;
        secretsManagerSecretResourceData?: outputs.greengrass.ResourceDefinitionVersionSecretsManagerSecretResourceData;
    }

    export interface ResourceDefinitionVersionResourceDownloadOwnerSetting {
        groupOwner: string;
        groupPermission: string;
    }

    export interface ResourceDefinitionVersionResourceInstance {
        id: string;
        name: string;
        resourceDataContainer: outputs.greengrass.ResourceDefinitionVersionResourceDataContainer;
    }

    export interface ResourceDefinitionVersionS3MachineLearningModelResourceData {
        destinationPath: string;
        ownerSetting?: outputs.greengrass.ResourceDefinitionVersionResourceDownloadOwnerSetting;
        s3Uri: string;
    }

    export interface ResourceDefinitionVersionSageMakerMachineLearningModelResourceData {
        destinationPath: string;
        ownerSetting?: outputs.greengrass.ResourceDefinitionVersionResourceDownloadOwnerSetting;
        sageMakerJobArn: string;
    }

    export interface ResourceDefinitionVersionSecretsManagerSecretResourceData {
        additionalStagingLabelsToDownload?: string[];
        arn: string;
    }

    export interface SubscriptionDefinitionSubscription {
        id: string;
        source: string;
        subject: string;
        target: string;
    }

    export interface SubscriptionDefinitionVersion {
        subscriptions: outputs.greengrass.SubscriptionDefinitionSubscription[];
    }

    export interface SubscriptionDefinitionVersionSubscription {
        id: string;
        source: string;
        subject: string;
        target: string;
    }

}

export namespace greengrassv2 {
    export interface ComponentVersionComponentDependencyRequirement {
        dependencyType?: enums.greengrassv2.ComponentVersionComponentDependencyRequirementDependencyType;
        versionRequirement?: string;
    }

    export interface ComponentVersionComponentPlatform {
        attributes?: {[key: string]: string};
        name?: string;
    }

    export interface ComponentVersionLambdaContainerParams {
        devices?: outputs.greengrassv2.ComponentVersionLambdaDeviceMount[];
        memorySizeInKb?: number;
        mountRoSysfs?: boolean;
        volumes?: outputs.greengrassv2.ComponentVersionLambdaVolumeMount[];
    }

    export interface ComponentVersionLambdaDeviceMount {
        addGroupOwner?: boolean;
        path?: string;
        permission?: enums.greengrassv2.ComponentVersionLambdaFilesystemPermission;
    }

    export interface ComponentVersionLambdaEventSource {
        topic?: string;
        type?: enums.greengrassv2.ComponentVersionLambdaEventSourceType;
    }

    export interface ComponentVersionLambdaExecutionParameters {
        environmentVariables?: {[key: string]: string};
        eventSources?: outputs.greengrassv2.ComponentVersionLambdaEventSource[];
        execArgs?: string[];
        inputPayloadEncodingType?: enums.greengrassv2.ComponentVersionLambdaExecutionParametersInputPayloadEncodingType;
        linuxProcessParams?: outputs.greengrassv2.ComponentVersionLambdaLinuxProcessParams;
        maxIdleTimeInSeconds?: number;
        maxInstancesCount?: number;
        maxQueueSize?: number;
        pinned?: boolean;
        statusTimeoutInSeconds?: number;
        timeoutInSeconds?: number;
    }

    export interface ComponentVersionLambdaFunctionRecipeSource {
        componentDependencies?: {[key: string]: outputs.greengrassv2.ComponentVersionComponentDependencyRequirement};
        componentLambdaParameters?: outputs.greengrassv2.ComponentVersionLambdaExecutionParameters;
        componentName?: string;
        componentPlatforms?: outputs.greengrassv2.ComponentVersionComponentPlatform[];
        componentVersion?: string;
        lambdaArn?: string;
    }

    export interface ComponentVersionLambdaLinuxProcessParams {
        containerParams?: outputs.greengrassv2.ComponentVersionLambdaContainerParams;
        isolationMode?: enums.greengrassv2.ComponentVersionLambdaLinuxProcessParamsIsolationMode;
    }

    export interface ComponentVersionLambdaVolumeMount {
        addGroupOwner?: boolean;
        destinationPath?: string;
        permission?: enums.greengrassv2.ComponentVersionLambdaFilesystemPermission;
        sourcePath?: string;
    }

    export interface DeploymentComponentConfigurationUpdate {
        merge?: string;
        reset?: string[];
    }

    export interface DeploymentComponentDeploymentSpecification {
        componentVersion?: string;
        configurationUpdate?: outputs.greengrassv2.DeploymentComponentConfigurationUpdate;
        runWith?: outputs.greengrassv2.DeploymentComponentRunWith;
    }

    export interface DeploymentComponentRunWith {
        posixUser?: string;
        systemResourceLimits?: outputs.greengrassv2.DeploymentSystemResourceLimits;
        windowsUser?: string;
    }

    export interface DeploymentComponentUpdatePolicy {
        action?: enums.greengrassv2.DeploymentComponentUpdatePolicyAction;
        timeoutInSeconds?: number;
    }

    export interface DeploymentConfigurationValidationPolicy {
        timeoutInSeconds?: number;
    }

    export interface DeploymentIoTJobAbortConfig {
        criteriaList: outputs.greengrassv2.DeploymentIoTJobAbortCriteria[];
    }

    export interface DeploymentIoTJobAbortCriteria {
        action: enums.greengrassv2.DeploymentIoTJobAbortCriteriaAction;
        failureType: enums.greengrassv2.DeploymentIoTJobAbortCriteriaFailureType;
        minNumberOfExecutedThings: number;
        thresholdPercentage: number;
    }

    export interface DeploymentIoTJobConfiguration {
        abortConfig?: outputs.greengrassv2.DeploymentIoTJobAbortConfig;
        jobExecutionsRolloutConfig?: outputs.greengrassv2.DeploymentIoTJobExecutionsRolloutConfig;
        timeoutConfig?: outputs.greengrassv2.DeploymentIoTJobTimeoutConfig;
    }

    export interface DeploymentIoTJobExecutionsRolloutConfig {
        exponentialRate?: outputs.greengrassv2.DeploymentIoTJobExponentialRolloutRate;
        maximumPerMinute?: number;
    }

    export interface DeploymentIoTJobExponentialRolloutRate {
        baseRatePerMinute: number;
        incrementFactor: number;
        rateIncreaseCriteria: outputs.greengrassv2.DeploymentIoTJobRateIncreaseCriteria;
    }

    export interface DeploymentIoTJobRateIncreaseCriteria {
    }

    export interface DeploymentIoTJobTimeoutConfig {
        inProgressTimeoutInMinutes?: number;
    }

    export interface DeploymentPolicies {
        componentUpdatePolicy?: outputs.greengrassv2.DeploymentComponentUpdatePolicy;
        configurationValidationPolicy?: outputs.greengrassv2.DeploymentConfigurationValidationPolicy;
        failureHandlingPolicy?: enums.greengrassv2.DeploymentPoliciesFailureHandlingPolicy;
    }

    export interface DeploymentSystemResourceLimits {
        cpus?: number;
        memory?: number;
    }

}

export namespace groundstation {
    export interface ConfigAntennaDownlinkConfig {
        spectrumConfig?: outputs.groundstation.ConfigSpectrumConfig;
    }

    export interface ConfigAntennaDownlinkDemodDecodeConfig {
        decodeConfig?: outputs.groundstation.ConfigDecodeConfig;
        demodulationConfig?: outputs.groundstation.ConfigDemodulationConfig;
        spectrumConfig?: outputs.groundstation.ConfigSpectrumConfig;
    }

    export interface ConfigAntennaUplinkConfig {
        spectrumConfig?: outputs.groundstation.ConfigUplinkSpectrumConfig;
        targetEirp?: outputs.groundstation.ConfigEirp;
        transmitDisabled?: boolean;
    }

    export interface ConfigData {
        antennaDownlinkConfig?: outputs.groundstation.ConfigAntennaDownlinkConfig;
        antennaDownlinkDemodDecodeConfig?: outputs.groundstation.ConfigAntennaDownlinkDemodDecodeConfig;
        antennaUplinkConfig?: outputs.groundstation.ConfigAntennaUplinkConfig;
        dataflowEndpointConfig?: outputs.groundstation.ConfigDataflowEndpointConfig;
        s3RecordingConfig?: outputs.groundstation.ConfigS3RecordingConfig;
        trackingConfig?: outputs.groundstation.ConfigTrackingConfig;
        uplinkEchoConfig?: outputs.groundstation.ConfigUplinkEchoConfig;
    }

    export interface ConfigDataflowEndpointConfig {
        dataflowEndpointName?: string;
        dataflowEndpointRegion?: string;
    }

    export interface ConfigDecodeConfig {
        unvalidatedJson?: string;
    }

    export interface ConfigDemodulationConfig {
        unvalidatedJson?: string;
    }

    export interface ConfigEirp {
        units?: enums.groundstation.ConfigEirpUnits;
        value?: number;
    }

    export interface ConfigFrequency {
        units?: enums.groundstation.ConfigFrequencyUnits;
        value?: number;
    }

    export interface ConfigFrequencyBandwidth {
        units?: enums.groundstation.ConfigBandwidthUnits;
        value?: number;
    }

    export interface ConfigS3RecordingConfig {
        bucketArn?: string;
        prefix?: string;
        roleArn?: string;
    }

    export interface ConfigSpectrumConfig {
        bandwidth?: outputs.groundstation.ConfigFrequencyBandwidth;
        centerFrequency?: outputs.groundstation.ConfigFrequency;
        polarization?: enums.groundstation.ConfigPolarization;
    }

    export interface ConfigTag {
        key?: string;
        value?: string;
    }

    export interface ConfigTrackingConfig {
        autotrack?: enums.groundstation.ConfigTrackingConfigAutotrack;
    }

    export interface ConfigUplinkEchoConfig {
        antennaUplinkConfigArn?: string;
        enabled?: boolean;
    }

    export interface ConfigUplinkSpectrumConfig {
        centerFrequency?: outputs.groundstation.ConfigFrequency;
        polarization?: enums.groundstation.ConfigPolarization;
    }

    /**
     * Information about AwsGroundStationAgentEndpoint.
     */
    export interface DataflowEndpointGroupAwsGroundStationAgentEndpoint {
        agentStatus?: enums.groundstation.DataflowEndpointGroupAgentStatus;
        auditResults?: enums.groundstation.DataflowEndpointGroupAuditResults;
        egressAddress?: outputs.groundstation.DataflowEndpointGroupConnectionDetails;
        ingressAddress?: outputs.groundstation.DataflowEndpointGroupRangedConnectionDetails;
        name?: string;
    }

    /**
     * Egress address of AgentEndpoint with an optional mtu.
     */
    export interface DataflowEndpointGroupConnectionDetails {
        /**
         * Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
         */
        mtu?: number;
        socketAddress?: outputs.groundstation.DataflowEndpointGroupSocketAddress;
    }

    export interface DataflowEndpointGroupDataflowEndpoint {
        address?: outputs.groundstation.DataflowEndpointGroupSocketAddress;
        mtu?: number;
        name?: string;
    }

    export interface DataflowEndpointGroupEndpointDetails {
        awsGroundStationAgentEndpoint?: outputs.groundstation.DataflowEndpointGroupAwsGroundStationAgentEndpoint;
        endpoint?: outputs.groundstation.DataflowEndpointGroupDataflowEndpoint;
        securityDetails?: outputs.groundstation.DataflowEndpointGroupSecurityDetails;
    }

    /**
     * An integer range that has a minimum and maximum value.
     */
    export interface DataflowEndpointGroupIntegerRange {
        /**
         * A maximum value.
         */
        maximum?: number;
        /**
         * A minimum value.
         */
        minimum?: number;
    }

    /**
     * Ingress address of AgentEndpoint with a port range and an optional mtu.
     */
    export interface DataflowEndpointGroupRangedConnectionDetails {
        /**
         * Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
         */
        mtu?: number;
        socketAddress?: outputs.groundstation.DataflowEndpointGroupRangedSocketAddress;
    }

    /**
     * A socket address with a port range.
     */
    export interface DataflowEndpointGroupRangedSocketAddress {
        /**
         * IPv4 socket address.
         */
        name?: string;
        /**
         * Port range of a socket address.
         */
        portRange?: outputs.groundstation.DataflowEndpointGroupIntegerRange;
    }

    export interface DataflowEndpointGroupSecurityDetails {
        roleArn?: string;
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface DataflowEndpointGroupSocketAddress {
        name?: string;
        port?: number;
    }

    export interface DataflowEndpointGroupTag {
        key: string;
        value: string;
    }

    export interface MissionProfileDataflowEdge {
        destination?: string;
        source?: string;
    }

    export interface MissionProfileStreamsKmsKey {
        kmsAliasArn?: string;
        kmsKeyArn?: string;
    }

    export interface MissionProfileTag {
        key: string;
        value: string;
    }

}

export namespace guardduty {
    export interface DetectorCfnDataSourceConfigurations {
        kubernetes?: outputs.guardduty.DetectorCfnKubernetesConfiguration;
        malwareProtection?: outputs.guardduty.DetectorCfnMalwareProtectionConfiguration;
        s3Logs?: outputs.guardduty.DetectorCfns3LogsConfiguration;
    }

    export interface DetectorCfnFeatureAdditionalConfiguration {
        name?: string;
        status?: string;
    }

    export interface DetectorCfnFeatureConfiguration {
        additionalConfiguration?: outputs.guardduty.DetectorCfnFeatureAdditionalConfiguration[];
        name: string;
        status: enums.guardduty.DetectorCfnFeatureConfigurationStatus;
    }

    export interface DetectorCfnKubernetesAuditLogsConfiguration {
        enable: boolean;
    }

    export interface DetectorCfnKubernetesConfiguration {
        auditLogs: outputs.guardduty.DetectorCfnKubernetesAuditLogsConfiguration;
    }

    export interface DetectorCfnMalwareProtectionConfiguration {
        scanEc2InstanceWithFindings?: outputs.guardduty.DetectorCfnScanEc2InstanceWithFindingsConfiguration;
    }

    export interface DetectorCfnScanEc2InstanceWithFindingsConfiguration {
        ebsVolumes?: boolean;
    }

    export interface DetectorCfns3LogsConfiguration {
        enable: boolean;
    }

    export interface DetectorTagItem {
        key: string;
        value: string;
    }

    export interface FilterCondition {
        eq?: string[];
        equals?: string[];
        greaterThan?: number;
        greaterThanOrEqual?: number;
        gt?: number;
        gte?: number;
        lessThan?: number;
        lessThanOrEqual?: number;
        lt?: number;
        lte?: number;
        neq?: string[];
        notEquals?: string[];
    }

    export interface FilterFindingCriteria {
        criterion?: {[key: string]: outputs.guardduty.FilterCondition};
    }

    export interface FilterTagItem {
        key: string;
        value: string;
    }

    export interface IpSetTagItem {
        key: string;
        value: string;
    }

    export interface ThreatIntelSetTagItem {
        key: string;
        value: string;
    }

}

export namespace healthimaging {
    /**
     * A Map of key value pairs for Tags.
     */
    export interface DatastoreTags {
    }

}

export namespace healthlake {
    /**
     * The time that a Data Store was created.
     */
    export interface FhirDatastoreCreatedAt {
        /**
         * Nanoseconds.
         */
        nanos: number;
        /**
         * Seconds since epoch.
         */
        seconds: string;
    }

    /**
     * The identity provider configuration for the datastore
     */
    export interface FhirDatastoreIdentityProviderConfiguration {
        /**
         * Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
         */
        authorizationStrategy: enums.healthlake.FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy;
        /**
         * Flag to indicate if fine-grained authorization will be enabled for the datastore
         */
        fineGrainedAuthorizationEnabled?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
         */
        idpLambdaArn?: string;
        /**
         * The JSON metadata elements for identity provider configuration.
         */
        metadata?: string;
    }

    /**
     * The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
     */
    export interface FhirDatastoreKmsEncryptionConfig {
        /**
         * The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
         */
        cmkType: enums.healthlake.FhirDatastoreKmsEncryptionConfigCmkType;
        /**
         * The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
         */
        kmsKeyId?: string;
    }

    /**
     * The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
     */
    export interface FhirDatastorePreloadDataConfig {
        /**
         * The type of preloaded data. Only Synthea preloaded data is supported.
         */
        preloadDataType: enums.healthlake.FhirDatastorePreloadDataConfigPreloadDataType;
    }

    /**
     * The server-side encryption key configuration for a customer provided encryption key.
     */
    export interface FhirDatastoreSseConfiguration {
        kmsEncryptionConfig: outputs.healthlake.FhirDatastoreKmsEncryptionConfig;
    }

    /**
     * A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
     */
    export interface FhirDatastoreTag {
        /**
         * The key of the tag.
         */
        key: string;
        /**
         * The value of the tag.
         */
        value: string;
    }

}

export namespace iam {
    export interface GroupPolicy {
        /**
         * The policy document.
         */
        policyDocument: string;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface OidcProviderTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The inline policy document that is embedded in the specified IAM role.
     */
    export interface RolePolicy {
        /**
         * The policy document.
         */
        policyDocument: string;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RoleTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SamlProviderTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ServerCertificateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Contains the user name and password create date for a user.
     */
    export interface UserLoginProfile {
        /**
         * The user's password.
         */
        password: string;
        /**
         * Specifies whether the user is required to set a new password on next sign-in.
         */
        passwordResetRequired?: boolean;
    }

    /**
     * Contains information about an attached policy.
     */
    export interface UserPolicy {
        /**
         * The policy document.
         */
        policyDocument: any;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VirtualMfaDeviceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace identitystore {
    /**
     * An object containing the identifier of a group member.
     */
    export interface GroupMembershipMemberId {
        /**
         * The identifier for a user in the identity store.
         */
        userId: string;
    }

}

export namespace imagebuilder {
    /**
     * Configuration details of the component.
     */
    export interface ContainerRecipeComponentConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        componentArn?: string;
        /**
         * A group of parameter settings that are used to configure the component for a specific recipe.
         */
        parameters?: outputs.imagebuilder.ContainerRecipeComponentParameter[];
    }

    /**
     * Contains a key/value pair that sets the named component parameter.
     */
    export interface ContainerRecipeComponentParameter {
        /**
         * The name of the component parameter to set.
         */
        name: string;
        /**
         * Sets the value for the named component parameter.
         */
        value: string[];
    }

    /**
     * Amazon EBS-specific block device mapping specifications. 
     */
    export interface ContainerRecipeEbsInstanceBlockDeviceSpecification {
        /**
         * Use to configure delete on termination of the associated device.
         */
        deleteOnTermination?: boolean;
        /**
         * Use to configure device encryption.
         */
        encrypted?: boolean;
        /**
         * Use to configure device IOPS.
         */
        iops?: number;
        /**
         * Use to configure the KMS key to use when encrypting the device.
         */
        kmsKeyId?: string;
        /**
         * The snapshot that defines the device contents.
         */
        snapshotId?: string;
        /**
         * For GP3 volumes only - The throughput in MiB/s that the volume supports.
         */
        throughput?: number;
        /**
         * Use to override the device's volume size.
         */
        volumeSize?: number;
        /**
         * Use to override the device's volume type.
         */
        volumeType?: enums.imagebuilder.ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType;
    }

    /**
     * Defines block device mappings for the instance used to configure your image. 
     */
    export interface ContainerRecipeInstanceBlockDeviceMapping {
        /**
         * The device to which these mappings apply.
         */
        deviceName?: string;
        /**
         * Use to manage Amazon EBS-specific configuration for this mapping.
         */
        ebs?: outputs.imagebuilder.ContainerRecipeEbsInstanceBlockDeviceSpecification;
        /**
         * Use to remove a mapping from the parent image.
         */
        noDevice?: string;
        /**
         * Use to manage instance ephemeral devices.
         */
        virtualName?: string;
    }

    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     */
    export interface ContainerRecipeInstanceConfiguration {
        /**
         * Defines the block devices to attach for building an instance from this Image Builder AMI.
         */
        blockDeviceMappings?: outputs.imagebuilder.ContainerRecipeInstanceBlockDeviceMapping[];
        /**
         * The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
         */
        image?: string;
    }

    /**
     * The container repository where the output container image is stored.
     */
    export interface ContainerRecipeTargetContainerRepository {
        /**
         * The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
         */
        repositoryName?: string;
        /**
         * Specifies the service in which this image was registered.
         */
        service?: enums.imagebuilder.ContainerRecipeTargetContainerRepositoryService;
    }

    /**
     * The specific AMI settings (for example, launch permissions, AMI tags).
     */
    export interface DistributionConfigurationAmiDistributionConfiguration {
        /**
         * The tags to apply to AMIs distributed to this Region.
         */
        amiTags?: {[key: string]: string};
        /**
         * The description of the AMI distribution configuration.
         */
        description?: string;
        /**
         * The KMS key identifier used to encrypt the distributed image.
         */
        kmsKeyId?: string;
        launchPermissionConfiguration?: outputs.imagebuilder.DistributionConfigurationLaunchPermissionConfiguration;
        /**
         * The name of the AMI distribution configuration.
         */
        name?: string;
        /**
         * The ID of accounts to which you want to distribute an image.
         */
        targetAccountIds?: string[];
    }

    /**
     * Container distribution settings for encryption, licensing, and sharing in a specific Region.
     */
    export interface DistributionConfigurationContainerDistributionConfiguration {
        /**
         * Tags that are attached to the container distribution configuration.
         */
        containerTags?: string[];
        /**
         * The description of the container distribution configuration.
         */
        description?: string;
        /**
         * The destination repository for the container distribution configuration.
         */
        targetRepository?: outputs.imagebuilder.DistributionConfigurationTargetContainerRepository;
    }

    /**
     * The distributions of the distribution configuration.
     */
    export interface DistributionConfigurationDistribution {
        amiDistributionConfiguration?: outputs.imagebuilder.DistributionConfigurationAmiDistributionConfiguration;
        containerDistributionConfiguration?: outputs.imagebuilder.DistributionConfigurationContainerDistributionConfiguration;
        /**
         * The Windows faster-launching configurations to use for AMI distribution.
         */
        fastLaunchConfigurations?: outputs.imagebuilder.DistributionConfigurationFastLaunchConfiguration[];
        /**
         * A group of launchTemplateConfiguration settings that apply to image distribution.
         */
        launchTemplateConfigurations?: outputs.imagebuilder.DistributionConfigurationLaunchTemplateConfiguration[];
        /**
         * The License Manager Configuration to associate with the AMI in the specified Region.
         */
        licenseConfigurationArns?: string[];
        /**
         * region
         */
        region: string;
    }

    /**
     * The Windows faster-launching configuration to use for AMI distribution.
     */
    export interface DistributionConfigurationFastLaunchConfiguration {
        /**
         * The owner account ID for the fast-launch enabled Windows AMI.
         */
        accountId?: string;
        /**
         * A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
         */
        enabled?: boolean;
        /**
         * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
         */
        launchTemplate?: outputs.imagebuilder.DistributionConfigurationFastLaunchLaunchTemplateSpecification;
        /**
         * The maximum number of parallel instances that are launched for creating resources.
         */
        maxParallelLaunches?: number;
        /**
         * Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
         */
        snapshotConfiguration?: outputs.imagebuilder.DistributionConfigurationFastLaunchSnapshotConfiguration;
    }

    /**
     * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
     */
    export interface DistributionConfigurationFastLaunchLaunchTemplateSpecification {
        /**
         * The ID of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateName?: string;
        /**
         * The version of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateVersion?: string;
    }

    /**
     * Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
     */
    export interface DistributionConfigurationFastLaunchSnapshotConfiguration {
        /**
         * The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
         */
        targetResourceCount?: number;
    }

    /**
     * Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
     */
    export interface DistributionConfigurationLaunchPermissionConfiguration {
        /**
         * The ARN for an Amazon Web Services Organization that you want to share your AMI with.
         */
        organizationArns?: string[];
        /**
         * The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
         */
        organizationalUnitArns?: string[];
        /**
         * The name of the group.
         */
        userGroups?: string[];
        /**
         * The AWS account ID.
         */
        userIds?: string[];
    }

    /**
     * launchTemplateConfiguration settings that apply to image distribution.
     */
    export interface DistributionConfigurationLaunchTemplateConfiguration {
        /**
         * The account ID that this configuration applies to.
         */
        accountId?: string;
        /**
         * Identifies the EC2 launch template to use.
         */
        launchTemplateId?: string;
        /**
         * Set the specified EC2 launch template as the default launch template for the specified account.
         */
        setDefaultVersion?: boolean;
    }

    /**
     * The destination repository for the container image.
     */
    export interface DistributionConfigurationTargetContainerRepository {
        /**
         * The repository name of target container repository.
         */
        repositoryName?: string;
        /**
         * The service of target container repository.
         */
        service?: enums.imagebuilder.DistributionConfigurationTargetContainerRepositoryService;
    }

    /**
     * Settings for Image Builder to configure the ECR repository and output container images that are scanned.
     */
    export interface ImageEcrConfiguration {
        /**
         * Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
         */
        containerTags?: string[];
        /**
         * The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
         */
        repositoryName?: string;
    }

    /**
     * Settings for Image Builder to configure the ECR repository and output container images that are scanned.
     */
    export interface ImagePipelineEcrConfiguration {
        /**
         * Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
         */
        containerTags?: string[];
        /**
         * The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
         */
        repositoryName?: string;
    }

    /**
     * Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
     */
    export interface ImagePipelineImageScanningConfiguration {
        /**
         * Contains ECR settings for vulnerability scans.
         */
        ecrConfiguration?: outputs.imagebuilder.ImagePipelineEcrConfiguration;
        /**
         * This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
         */
        imageScanningEnabled?: boolean;
    }

    /**
     * Image tests configuration.
     */
    export interface ImagePipelineImageTestsConfiguration {
        /**
         * Defines if tests should be executed when building this image.
         */
        imageTestsEnabled?: boolean;
        /**
         * The maximum time in minutes that tests are permitted to run.
         */
        timeoutMinutes?: number;
    }

    /**
     * The schedule of the image pipeline.
     */
    export interface ImagePipelineSchedule {
        /**
         * The condition configures when the pipeline should trigger a new image build.
         */
        pipelineExecutionStartCondition?: enums.imagebuilder.ImagePipelineSchedulePipelineExecutionStartCondition;
        /**
         * The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
         */
        scheduleExpression?: string;
    }

    /**
     * The workflow configuration of the image
     */
    export interface ImagePipelineWorkflowConfiguration {
        /**
         * Define execution decision in case of workflow failure
         */
        onFailure?: enums.imagebuilder.ImagePipelineWorkflowConfigurationOnFailure;
        /**
         * The parallel group name
         */
        parallelGroup?: string;
        /**
         * The parameters associated with the workflow
         */
        parameters?: outputs.imagebuilder.ImagePipelineWorkflowParameter[];
        /**
         * The Amazon Resource Name (ARN) of the workflow
         */
        workflowArn?: string;
    }

    /**
     * A parameter associated with the workflow
     */
    export interface ImagePipelineWorkflowParameter {
        name?: string;
        value?: string[];
    }

    /**
     * Specify additional settings and launch scripts for your build instances.
     */
    export interface ImageRecipeAdditionalInstanceConfiguration {
        /**
         * Contains settings for the SSM agent on your build instance.
         */
        systemsManagerAgent?: outputs.imagebuilder.ImageRecipeSystemsManagerAgent;
        /**
         * Use this property to provide commands or a command script to run when you launch your build instance.
         */
        userDataOverride?: string;
    }

    /**
     * Configuration details of the component.
     */
    export interface ImageRecipeComponentConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        componentArn?: string;
        /**
         * A group of parameter settings that are used to configure the component for a specific recipe.
         */
        parameters?: outputs.imagebuilder.ImageRecipeComponentParameter[];
    }

    /**
     * Contains a key/value pair that sets the named component parameter.
     */
    export interface ImageRecipeComponentParameter {
        /**
         * The name of the component parameter to set.
         */
        name: string;
        /**
         * Sets the value for the named component parameter.
         */
        value: string[];
    }

    /**
     * Amazon EBS-specific block device mapping specifications. 
     */
    export interface ImageRecipeEbsInstanceBlockDeviceSpecification {
        /**
         * Use to configure delete on termination of the associated device.
         */
        deleteOnTermination?: boolean;
        /**
         * Use to configure device encryption.
         */
        encrypted?: boolean;
        /**
         * Use to configure device IOPS.
         */
        iops?: number;
        /**
         * Use to configure the KMS key to use when encrypting the device.
         */
        kmsKeyId?: string;
        /**
         * The snapshot that defines the device contents.
         */
        snapshotId?: string;
        /**
         * For GP3 volumes only - The throughput in MiB/s that the volume supports.
         */
        throughput?: number;
        /**
         * Use to override the device's volume size.
         */
        volumeSize?: number;
        /**
         * Use to override the device's volume type.
         */
        volumeType?: enums.imagebuilder.ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType;
    }

    /**
     * Defines block device mappings for the instance used to configure your image. 
     */
    export interface ImageRecipeInstanceBlockDeviceMapping {
        /**
         * The device to which these mappings apply.
         */
        deviceName?: string;
        /**
         * Use to manage Amazon EBS-specific configuration for this mapping.
         */
        ebs?: outputs.imagebuilder.ImageRecipeEbsInstanceBlockDeviceSpecification;
        /**
         * Use to remove a mapping from the parent image.
         */
        noDevice?: string;
        /**
         * Use to manage instance ephemeral devices.
         */
        virtualName?: string;
    }

    /**
     * Contains settings for the SSM agent on your build instance.
     */
    export interface ImageRecipeSystemsManagerAgent {
        /**
         * Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
         */
        uninstallAfterBuild?: boolean;
    }

    /**
     * Contains settings for Image Builder image resource and container image scans.
     */
    export interface ImageScanningConfiguration {
        /**
         * Contains ECR settings for vulnerability scans.
         */
        ecrConfiguration?: outputs.imagebuilder.ImageEcrConfiguration;
        /**
         * This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
         */
        imageScanningEnabled?: boolean;
    }

    /**
     * The image tests configuration used when creating this image.
     */
    export interface ImageTestsConfiguration {
        /**
         * ImageTestsEnabled
         */
        imageTestsEnabled?: boolean;
        /**
         * TimeoutMinutes
         */
        timeoutMinutes?: number;
    }

    /**
     * The workflow configuration of the image
     */
    export interface ImageWorkflowConfiguration {
        /**
         * Define execution decision in case of workflow failure
         */
        onFailure?: enums.imagebuilder.ImageWorkflowConfigurationOnFailure;
        /**
         * The parallel group name
         */
        parallelGroup?: string;
        /**
         * The parameters associated with the workflow
         */
        parameters?: outputs.imagebuilder.ImageWorkflowParameter[];
        /**
         * The Amazon Resource Name (ARN) of the workflow
         */
        workflowArn?: string;
    }

    /**
     * A parameter associated with the workflow
     */
    export interface ImageWorkflowParameter {
        name?: string;
        value?: string[];
    }

    /**
     * The instance metadata option settings for the infrastructure configuration.
     */
    export interface InfrastructureConfigurationInstanceMetadataOptions {
        /**
         * Limit the number of hops that an instance metadata request can traverse to reach its destination.
         */
        httpPutResponseHopLimit?: number;
        /**
         * Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows: 
         */
        httpTokens?: enums.imagebuilder.InfrastructureConfigurationInstanceMetadataOptionsHttpTokens;
    }

    /**
     * The logging configuration of the infrastructure configuration.
     */
    export interface InfrastructureConfigurationLogging {
        s3Logs?: outputs.imagebuilder.InfrastructureConfigurationS3Logs;
    }

    /**
     * The S3 path in which to store the logs.
     */
    export interface InfrastructureConfigurationS3Logs {
        /**
         * S3BucketName
         */
        s3BucketName?: string;
        /**
         * S3KeyPrefix
         */
        s3KeyPrefix?: string;
    }

    /**
     * The action of the policy detail.
     */
    export interface LifecyclePolicyAction {
        includeResources?: outputs.imagebuilder.LifecyclePolicyIncludeResources;
        /**
         * The action type of the policy detail.
         */
        type: enums.imagebuilder.LifecyclePolicyActionType;
    }

    /**
     * The AMI exclusion rules for the policy detail.
     */
    export interface LifecyclePolicyAmiExclusionRules {
        /**
         * Use to apply lifecycle policy actions on whether the AMI is public.
         */
        isPublic?: boolean;
        /**
         * Use to apply lifecycle policy actions on AMIs launched before a certain time.
         */
        lastLaunched?: outputs.imagebuilder.LifecyclePolicyLastLaunched;
        /**
         * Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
         */
        regions?: string[];
        /**
         * Use to apply lifecycle policy actions on AMIs shared with a set of regions.
         */
        sharedAccounts?: string[];
        /**
         * The AMIs to select by tag.
         */
        tagMap?: {[key: string]: string};
    }

    /**
     * The exclusion rules to apply of the policy detail.
     */
    export interface LifecyclePolicyExclusionRules {
        amis?: outputs.imagebuilder.LifecyclePolicyAmiExclusionRules;
        /**
         * The Image Builder tags to filter on.
         */
        tagMap?: {[key: string]: string};
    }

    /**
     * The filters to apply of the policy detail.
     */
    export interface LifecyclePolicyFilter {
        /**
         * The minimum number of Image Builder resources to retain.
         */
        retainAtLeast?: number;
        /**
         * The filter type.
         */
        type: enums.imagebuilder.LifecyclePolicyFilterType;
        /**
         * The value's time unit.
         */
        unit?: enums.imagebuilder.LifecyclePolicyTimeUnit;
        /**
         * The filter value.
         */
        value: number;
    }

    /**
     * The included resources of the policy detail.
     */
    export interface LifecyclePolicyIncludeResources {
        /**
         * Use to configure lifecycle actions on AMIs.
         */
        amis?: boolean;
        /**
         * Use to configure lifecycle actions on containers.
         */
        containers?: boolean;
        /**
         * Use to configure lifecycle actions on snapshots.
         */
        snapshots?: boolean;
    }

    /**
     * The last launched time of a resource.
     */
    export interface LifecyclePolicyLastLaunched {
        /**
         * The value's time unit.
         */
        unit: enums.imagebuilder.LifecyclePolicyTimeUnit;
        /**
         * The last launched value.
         */
        value: number;
    }

    /**
     * The policy detail of the lifecycle policy.
     */
    export interface LifecyclePolicyPolicyDetail {
        action: outputs.imagebuilder.LifecyclePolicyAction;
        exclusionRules?: outputs.imagebuilder.LifecyclePolicyExclusionRules;
        filter: outputs.imagebuilder.LifecyclePolicyFilter;
    }

    /**
     * The recipe to apply the lifecycle policy for.
     */
    export interface LifecyclePolicyRecipeSelection {
        /**
         * The recipe name.
         */
        name: string;
        /**
         * The recipe version.
         */
        semanticVersion: string;
    }

    /**
     * The resource selection for the lifecycle policy.
     */
    export interface LifecyclePolicyResourceSelection {
        /**
         * The recipes to select.
         */
        recipes?: outputs.imagebuilder.LifecyclePolicyRecipeSelection[];
        /**
         * The Image Builder resources to select by tag.
         */
        tagMap?: {[key: string]: string};
    }

}

export namespace inspector {
    export interface AssessmentTemplateTag {
        key: string;
        value: string;
    }

    export interface ResourceGroupTag {
        key: string;
        value: string;
    }

}

export namespace inspectorv2 {
    export interface CisScanConfigurationCisTagMap {
    }

    export interface CisScanConfigurationCisTargets {
        accountIds: string[];
        targetResourceTags?: outputs.inspectorv2.CisScanConfigurationTargetResourceTags;
    }

    export interface CisScanConfigurationDailySchedule {
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface CisScanConfigurationMonthlySchedule {
        day: enums.inspectorv2.CisScanConfigurationDay;
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface CisScanConfigurationOneTimeSchedule {
    }

    /**
     * Choose a Schedule cadence
     */
    export interface CisScanConfigurationSchedule {
        daily?: outputs.inspectorv2.CisScanConfigurationDailySchedule;
        monthly?: outputs.inspectorv2.CisScanConfigurationMonthlySchedule;
        oneTime?: outputs.inspectorv2.CisScanConfigurationOneTimeSchedule;
        weekly?: outputs.inspectorv2.CisScanConfigurationWeeklySchedule;
    }

    export interface CisScanConfigurationTargetResourceTags {
    }

    export interface CisScanConfigurationTime {
        timeOfDay: string;
        timeZone: string;
    }

    export interface CisScanConfigurationWeeklySchedule {
        days: enums.inspectorv2.CisScanConfigurationDay[];
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface FilterCriteria {
        awsAccountId?: outputs.inspectorv2.FilterStringFilter[];
        componentId?: outputs.inspectorv2.FilterStringFilter[];
        componentType?: outputs.inspectorv2.FilterStringFilter[];
        ec2InstanceImageId?: outputs.inspectorv2.FilterStringFilter[];
        ec2InstanceSubnetId?: outputs.inspectorv2.FilterStringFilter[];
        ec2InstanceVpcId?: outputs.inspectorv2.FilterStringFilter[];
        ecrImageArchitecture?: outputs.inspectorv2.FilterStringFilter[];
        ecrImageHash?: outputs.inspectorv2.FilterStringFilter[];
        ecrImagePushedAt?: outputs.inspectorv2.FilterDateFilter[];
        ecrImageRegistry?: outputs.inspectorv2.FilterStringFilter[];
        ecrImageRepositoryName?: outputs.inspectorv2.FilterStringFilter[];
        ecrImageTags?: outputs.inspectorv2.FilterStringFilter[];
        findingArn?: outputs.inspectorv2.FilterStringFilter[];
        findingStatus?: outputs.inspectorv2.FilterStringFilter[];
        findingType?: outputs.inspectorv2.FilterStringFilter[];
        firstObservedAt?: outputs.inspectorv2.FilterDateFilter[];
        inspectorScore?: outputs.inspectorv2.FilterNumberFilter[];
        lastObservedAt?: outputs.inspectorv2.FilterDateFilter[];
        networkProtocol?: outputs.inspectorv2.FilterStringFilter[];
        portRange?: outputs.inspectorv2.FilterPortRangeFilter[];
        relatedVulnerabilities?: outputs.inspectorv2.FilterStringFilter[];
        resourceId?: outputs.inspectorv2.FilterStringFilter[];
        resourceTags?: outputs.inspectorv2.FilterMapFilter[];
        resourceType?: outputs.inspectorv2.FilterStringFilter[];
        severity?: outputs.inspectorv2.FilterStringFilter[];
        title?: outputs.inspectorv2.FilterStringFilter[];
        updatedAt?: outputs.inspectorv2.FilterDateFilter[];
        vendorSeverity?: outputs.inspectorv2.FilterStringFilter[];
        vulnerabilityId?: outputs.inspectorv2.FilterStringFilter[];
        vulnerabilitySource?: outputs.inspectorv2.FilterStringFilter[];
        vulnerablePackages?: outputs.inspectorv2.FilterPackageFilter[];
    }

    export interface FilterDateFilter {
        endInclusive?: number;
        startInclusive?: number;
    }

    export interface FilterMapFilter {
        comparison: enums.inspectorv2.FilterMapComparison;
        key?: string;
        value?: string;
    }

    export interface FilterNumberFilter {
        lowerInclusive?: number;
        upperInclusive?: number;
    }

    export interface FilterPackageFilter {
        architecture?: outputs.inspectorv2.FilterStringFilter;
        epoch?: outputs.inspectorv2.FilterNumberFilter;
        name?: outputs.inspectorv2.FilterStringFilter;
        release?: outputs.inspectorv2.FilterStringFilter;
        sourceLayerHash?: outputs.inspectorv2.FilterStringFilter;
        version?: outputs.inspectorv2.FilterStringFilter;
    }

    export interface FilterPortRangeFilter {
        beginInclusive?: number;
        endInclusive?: number;
    }

    export interface FilterStringFilter {
        comparison: enums.inspectorv2.FilterStringComparison;
        value: string;
    }

}

export namespace internetmonitor {
    export interface MonitorHealthEventsConfig {
        availabilityLocalHealthEventsConfig?: outputs.internetmonitor.MonitorLocalHealthEventsConfig;
        availabilityScoreThreshold?: number;
        performanceLocalHealthEventsConfig?: outputs.internetmonitor.MonitorLocalHealthEventsConfig;
        performanceScoreThreshold?: number;
    }

    export interface MonitorInternetMeasurementsLogDelivery {
        s3Config?: outputs.internetmonitor.MonitorS3Config;
    }

    export interface MonitorLocalHealthEventsConfig {
        healthScoreThreshold?: number;
        minTrafficImpact?: number;
        status?: enums.internetmonitor.MonitorLocalHealthEventsConfigStatus;
    }

    export interface MonitorS3Config {
        bucketName?: string;
        bucketPrefix?: string;
        logDeliveryStatus?: enums.internetmonitor.MonitorS3ConfigLogDeliveryStatus;
    }

    /**
     * The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
     */
    export interface MonitorTag {
        key?: string;
        value?: string;
    }

}

export namespace iot {
    /**
     * The criteria that determine when and how a job abort takes place.
     */
    export interface AbortConfigProperties {
        criteriaList: outputs.iot.JobTemplateAbortCriteria[];
    }

    /**
     * The configuration for a specific audit check.
     */
    export interface AccountAuditConfigurationAuditCheckConfiguration {
        /**
         * True if the check is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Specifies which audit checks are enabled and disabled for this account.
     */
    export interface AccountAuditConfigurationAuditCheckConfigurations {
        authenticatedCognitoRoleOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        caCertificateExpiringCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        caCertificateKeyQualityCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        conflictingClientIdsCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        deviceCertificateExpiringCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        deviceCertificateKeyQualityCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        deviceCertificateSharedCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        intermediateCaRevokedForActiveDeviceCertificatesCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        ioTPolicyPotentialMisConfigurationCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        iotPolicyOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        iotRoleAliasAllowsAccessToUnusedServicesCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        iotRoleAliasOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        loggingDisabledCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        revokedCaCertificateStillActiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        revokedDeviceCertificateStillActiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        unauthenticatedCognitoRoleOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
    }

    export interface AccountAuditConfigurationAuditNotificationTarget {
        /**
         * True if notifications to the target are enabled.
         */
        enabled?: boolean;
        /**
         * The ARN of the role that grants permission to send notifications to the target.
         */
        roleArn?: string;
        /**
         * The ARN of the target (SNS topic) to which audit notifications are sent.
         */
        targetArn?: string;
    }

    /**
     * Information about the targets to which audit notifications are sent.
     */
    export interface AccountAuditConfigurationAuditNotificationTargetConfigurations {
        sns?: outputs.iot.AccountAuditConfigurationAuditNotificationTarget;
    }

    export interface AuthorizerTag {
        key: string;
        value: string;
    }

    export interface BillingGroupPropertiesProperties {
        billingGroupDescription?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface BillingGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface CaCertificateRegistrationConfig {
        roleArn?: string;
        templateBody?: string;
        templateName?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CaCertificateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CertificateProviderTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CustomMetricTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DimensionTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    export interface DomainConfigurationAuthorizerConfig {
        allowAuthorizerOverride?: boolean;
        defaultAuthorizerName?: string;
    }

    export interface DomainConfigurationServerCertificateConfig {
        enableOcspCheck?: boolean;
    }

    export interface DomainConfigurationServerCertificateSummary {
        serverCertificateArn?: string;
        serverCertificateStatus?: enums.iot.DomainConfigurationServerCertificateSummaryServerCertificateStatus;
        serverCertificateStatusDetail?: string;
    }

    export interface DomainConfigurationTag {
        key: string;
        value: string;
    }

    export interface DomainConfigurationTlsConfig {
        securityPolicy?: string;
    }

    /**
     * Aggregation types supported by Fleet Indexing
     */
    export interface FleetMetricAggregationType {
        /**
         * Fleet Indexing aggregation type names such as Statistics, Percentiles and Cardinality
         */
        name: string;
        /**
         * Fleet Indexing aggregation type values
         */
        values: string[];
    }

    /**
     * A key-value pair to associate with a resource
     */
    export interface FleetMetricTag {
        /**
         * The tag's key
         */
        key: string;
        /**
         * The tag's value
         */
        value: string;
    }

    export interface JobExecutionsRetryConfigProperties {
        retryCriteriaList?: outputs.iot.JobTemplateRetryCriteria[];
    }

    /**
     * Allows you to create a staged rollout of a job.
     */
    export interface JobExecutionsRolloutConfigProperties {
        /**
         * The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.
         */
        exponentialRolloutRate?: outputs.iot.JobTemplateExponentialRolloutRate;
        /**
         * The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.
         */
        maximumPerMinute?: number;
    }

    /**
     * The criteria that determine when and how a job abort takes place.
     */
    export interface JobTemplateAbortCriteria {
        /**
         * The type of job action to take to initiate the job abort.
         */
        action: enums.iot.JobTemplateAction;
        /**
         * The type of job execution failures that can initiate a job abort.
         */
        failureType: enums.iot.JobTemplateFailureType;
        /**
         * The minimum number of things which must receive job execution notifications before the job can be aborted.
         */
        minNumberOfExecutedThings: number;
        /**
         * The minimum percentage of job execution failures that must occur to initiate the job abort.
         */
        thresholdPercentage: number;
    }

    /**
     * Allows you to create an exponential rate of rollout for a job.
     */
    export interface JobTemplateExponentialRolloutRate {
        /**
         * The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
         */
        baseRatePerMinute: number;
        /**
         * The exponential factor to increase the rate of rollout for a job.
         */
        incrementFactor: number;
        /**
         * The criteria to initiate the increase in rate of rollout for a job.
         */
        rateIncreaseCriteria: outputs.iot.JobTemplateRateIncreaseCriteria;
    }

    /**
     * Specifies a start time and duration for a scheduled Job.
     */
    export interface JobTemplateMaintenanceWindow {
        durationInMinutes?: number;
        startTime?: string;
    }

    export interface JobTemplateRateIncreaseCriteria {
        numberOfNotifiedThings?: number;
        numberOfSucceededThings?: number;
    }

    /**
     * Specifies how many times a failure type should be retried.
     */
    export interface JobTemplateRetryCriteria {
        failureType?: enums.iot.JobTemplateJobRetryFailureType;
        numberOfRetries?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface JobTemplateTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * A structure containing the mqtt topic for metrics export.
     */
    export interface MetricsExportConfigProperties {
        /**
         * The topic for metrics export.
         */
        mqttTopic: string;
        /**
         * The ARN of the role that grants permission to publish to mqtt topic.
         */
        roleArn: string;
    }

    /**
     * The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
     */
    export interface MitigationActionActionParams {
        addThingsToThingGroupParams?: outputs.iot.MitigationActionAddThingsToThingGroupParams;
        enableIoTLoggingParams?: outputs.iot.MitigationActionEnableIoTLoggingParams;
        publishFindingToSnsParams?: outputs.iot.MitigationActionPublishFindingToSnsParams;
        replaceDefaultPolicyVersionParams?: outputs.iot.MitigationActionReplaceDefaultPolicyVersionParams;
        updateCaCertificateParams?: outputs.iot.MitigationActionUpdateCaCertificateParams;
        updateDeviceCertificateParams?: outputs.iot.MitigationActionUpdateDeviceCertificateParams;
    }

    /**
     * Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.
     */
    export interface MitigationActionAddThingsToThingGroupParams {
        /**
         * Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
         */
        overrideDynamicGroups?: boolean;
        /**
         * The list of groups to which you want to add the things that triggered the mitigation action.
         */
        thingGroupNames: string[];
    }

    /**
     * Parameters to define a mitigation action that enables AWS IoT logging at a specified level of detail.
     */
    export interface MitigationActionEnableIoTLoggingParams {
        /**
         *  Specifies which types of information are logged.
         */
        logLevel: enums.iot.MitigationActionEnableIoTLoggingParamsLogLevel;
        /**
         *  The ARN of the IAM role used for logging.
         */
        roleArnForLogging: string;
    }

    /**
     * Parameters, to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
     */
    export interface MitigationActionPublishFindingToSnsParams {
        /**
         * The ARN of the topic to which you want to publish the findings.
         */
        topicArn: string;
    }

    /**
     * Parameters to define a mitigation action that adds a blank policy to restrict permissions.
     */
    export interface MitigationActionReplaceDefaultPolicyVersionParams {
        templateName: enums.iot.MitigationActionReplaceDefaultPolicyVersionParamsTemplateName;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MitigationActionTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
     */
    export interface MitigationActionUpdateCaCertificateParams {
        action: enums.iot.MitigationActionUpdateCaCertificateParamsAction;
    }

    /**
     * Parameters to define a mitigation action that changes the state of the device certificate to inactive.
     */
    export interface MitigationActionUpdateDeviceCertificateParams {
        action: enums.iot.MitigationActionUpdateDeviceCertificateParamsAction;
    }

    export interface PolicyTag {
        key: string;
        value: string;
    }

    /**
     * Configuration for pre-signed S3 URLs.
     */
    export interface PresignedUrlConfigProperties {
        expiresInSec?: number;
        roleArn: string;
    }

    export interface ProvisioningTemplateProvisioningHook {
        payloadVersion?: string;
        targetArn?: string;
    }

    export interface ProvisioningTemplateTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RoleAliasTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ScheduledAuditTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * A structure containing the alert target ARN and the role ARN.
     */
    export interface SecurityProfileAlertTarget {
        /**
         * The ARN of the notification target to which alerts are sent.
         */
        alertTargetArn: string;
        /**
         * The ARN of the role that grants permission to send alerts to the notification target.
         */
        roleArn: string;
    }

    /**
     * A security profile behavior.
     */
    export interface SecurityProfileBehavior {
        criteria?: outputs.iot.SecurityProfileBehaviorCriteria;
        exportMetric?: boolean;
        /**
         * What is measured by the behavior.
         */
        metric?: string;
        metricDimension?: outputs.iot.SecurityProfileMetricDimension;
        /**
         * The name for the behavior.
         */
        name: string;
        /**
         * Manage Detect alarm SNS notifications by setting behavior notification to on or suppressed. Detect will continue to performing device behavior evaluations. However, suppressed alarms wouldn't be forwarded for SNS notification.
         */
        suppressAlerts?: boolean;
    }

    /**
     * The criteria by which the behavior is determined to be normal.
     */
    export interface SecurityProfileBehaviorCriteria {
        /**
         * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
         */
        comparisonOperator?: enums.iot.SecurityProfileBehaviorCriteriaComparisonOperator;
        /**
         * If a device is in violation of the behavior for the specified number of consecutive datapoints, an alarm occurs. If not specified, the default is 1.
         */
        consecutiveDatapointsToAlarm?: number;
        /**
         * If an alarm has occurred and the offending device is no longer in violation of the behavior for the specified number of consecutive datapoints, the alarm is cleared. If not specified, the default is 1.
         */
        consecutiveDatapointsToClear?: number;
        /**
         * Use this to specify the time duration over which the behavior is evaluated.
         */
        durationSeconds?: number;
        mlDetectionConfig?: outputs.iot.SecurityProfileMachineLearningDetectionConfig;
        statisticalThreshold?: outputs.iot.SecurityProfileStatisticalThreshold;
        value?: outputs.iot.SecurityProfileMetricValue;
    }

    /**
     * The configuration of an ML Detect Security Profile.
     */
    export interface SecurityProfileMachineLearningDetectionConfig {
        /**
         * The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
         */
        confidenceLevel?: enums.iot.SecurityProfileMachineLearningDetectionConfigConfidenceLevel;
    }

    /**
     * The dimension of a metric.
     */
    export interface SecurityProfileMetricDimension {
        /**
         * A unique identifier for the dimension.
         */
        dimensionName: string;
        /**
         * Defines how the dimensionValues of a dimension are interpreted.
         */
        operator?: enums.iot.SecurityProfileMetricDimensionOperator;
    }

    /**
     * The metric you want to retain. Dimensions are optional.
     */
    export interface SecurityProfileMetricToRetain {
        exportMetric?: boolean;
        /**
         * What is measured by the behavior.
         */
        metric: string;
        metricDimension?: outputs.iot.SecurityProfileMetricDimension;
    }

    /**
     * The value to be compared with the metric.
     */
    export interface SecurityProfileMetricValue {
        /**
         * If the ComparisonOperator calls for a set of CIDRs, use this to specify that set to be compared with the metric.
         */
        cidrs?: string[];
        /**
         * If the ComparisonOperator calls for a numeric value, use this to specify that (integer) numeric value to be compared with the metric.
         */
        count?: string;
        /**
         * The numeral value of a metric.
         */
        number?: number;
        /**
         * The numeral values of a metric.
         */
        numbers?: number[];
        /**
         * If the ComparisonOperator calls for a set of ports, use this to specify that set to be compared with the metric.
         */
        ports?: number[];
        /**
         * The string values of a metric.
         */
        strings?: string[];
    }

    /**
     * A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
     */
    export interface SecurityProfileStatisticalThreshold {
        /**
         * The percentile which resolves to a threshold value by which compliance with a behavior is determined
         */
        statistic?: enums.iot.SecurityProfileStatisticalThresholdStatistic;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SecurityProfileTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SoftwarePackageTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface SoftwarePackageVersionResourceAttributes {
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SoftwarePackageVersionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ThingAttributePayload {
        attributes?: {[key: string]: string};
    }

    export interface ThingGroupAttributePayload {
        attributes?: {[key: string]: string};
    }

    export interface ThingGroupPropertiesProperties {
        attributePayload?: outputs.iot.ThingGroupAttributePayload;
        thingGroupDescription?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ThingGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ThingTypePropertiesProperties {
        searchableAttributes?: string[];
        thingTypeDescription?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ThingTypeTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies the amount of time each device has to finish its execution of the job.
     */
    export interface TimeoutConfigProperties {
        inProgressTimeoutInMinutes: number;
    }

    export interface TopicRuleAction {
        cloudwatchAlarm?: outputs.iot.TopicRuleCloudwatchAlarmAction;
        cloudwatchLogs?: outputs.iot.TopicRuleCloudwatchLogsAction;
        cloudwatchMetric?: outputs.iot.TopicRuleCloudwatchMetricAction;
        dynamoDBv2?: outputs.iot.TopicRuleDynamoDBv2Action;
        dynamoDb?: outputs.iot.TopicRuleDynamoDbAction;
        elasticsearch?: outputs.iot.TopicRuleElasticsearchAction;
        firehose?: outputs.iot.TopicRuleFirehoseAction;
        http?: outputs.iot.TopicRuleHttpAction;
        iotAnalytics?: outputs.iot.TopicRuleIotAnalyticsAction;
        iotEvents?: outputs.iot.TopicRuleIotEventsAction;
        iotSiteWise?: outputs.iot.TopicRuleIotSiteWiseAction;
        kafka?: outputs.iot.TopicRuleKafkaAction;
        kinesis?: outputs.iot.TopicRuleKinesisAction;
        lambda?: outputs.iot.TopicRuleLambdaAction;
        location?: outputs.iot.TopicRuleLocationAction;
        openSearch?: outputs.iot.TopicRuleOpenSearchAction;
        republish?: outputs.iot.TopicRuleRepublishAction;
        s3?: outputs.iot.TopicRuleS3Action;
        sns?: outputs.iot.TopicRuleSnsAction;
        sqs?: outputs.iot.TopicRuleSqsAction;
        stepFunctions?: outputs.iot.TopicRuleStepFunctionsAction;
        timestream?: outputs.iot.TopicRuleTimestreamAction;
    }

    export interface TopicRuleAssetPropertyTimestamp {
        offsetInNanos?: string;
        timeInSeconds: string;
    }

    export interface TopicRuleAssetPropertyValue {
        quality?: string;
        timestamp: outputs.iot.TopicRuleAssetPropertyTimestamp;
        value: outputs.iot.TopicRuleAssetPropertyVariant;
    }

    export interface TopicRuleAssetPropertyVariant {
        booleanValue?: string;
        doubleValue?: string;
        integerValue?: string;
        stringValue?: string;
    }

    export interface TopicRuleCloudwatchAlarmAction {
        alarmName: string;
        roleArn: string;
        stateReason: string;
        stateValue: string;
    }

    export interface TopicRuleCloudwatchLogsAction {
        batchMode?: boolean;
        logGroupName: string;
        roleArn: string;
    }

    export interface TopicRuleCloudwatchMetricAction {
        metricName: string;
        metricNamespace: string;
        metricTimestamp?: string;
        metricUnit: string;
        metricValue: string;
        roleArn: string;
    }

    export interface TopicRuleDestinationHttpUrlDestinationSummary {
        confirmationUrl?: string;
    }

    export interface TopicRuleDestinationVpcDestinationProperties {
        roleArn?: string;
        securityGroups?: string[];
        subnetIds?: string[];
        vpcId?: string;
    }

    export interface TopicRuleDynamoDBv2Action {
        putItem?: outputs.iot.TopicRulePutItemInput;
        roleArn?: string;
    }

    export interface TopicRuleDynamoDbAction {
        hashKeyField: string;
        hashKeyType?: string;
        hashKeyValue: string;
        payloadField?: string;
        rangeKeyField?: string;
        rangeKeyType?: string;
        rangeKeyValue?: string;
        roleArn: string;
        tableName: string;
    }

    export interface TopicRuleElasticsearchAction {
        endpoint: string;
        id: string;
        index: string;
        roleArn: string;
        type: string;
    }

    export interface TopicRuleFirehoseAction {
        batchMode?: boolean;
        deliveryStreamName: string;
        roleArn: string;
        separator?: string;
    }

    export interface TopicRuleHttpAction {
        auth?: outputs.iot.TopicRuleHttpAuthorization;
        confirmationUrl?: string;
        headers?: outputs.iot.TopicRuleHttpActionHeader[];
        url: string;
    }

    export interface TopicRuleHttpActionHeader {
        key: string;
        value: string;
    }

    export interface TopicRuleHttpAuthorization {
        sigv4?: outputs.iot.TopicRuleSigV4Authorization;
    }

    export interface TopicRuleIotAnalyticsAction {
        batchMode?: boolean;
        channelName: string;
        roleArn: string;
    }

    export interface TopicRuleIotEventsAction {
        batchMode?: boolean;
        inputName: string;
        messageId?: string;
        roleArn: string;
    }

    export interface TopicRuleIotSiteWiseAction {
        putAssetPropertyValueEntries: outputs.iot.TopicRulePutAssetPropertyValueEntry[];
        roleArn: string;
    }

    export interface TopicRuleKafkaAction {
        clientProperties: {[key: string]: string};
        destinationArn: string;
        headers?: outputs.iot.TopicRuleKafkaActionHeader[];
        key?: string;
        partition?: string;
        topic: string;
    }

    export interface TopicRuleKafkaActionHeader {
        key: string;
        value: string;
    }

    export interface TopicRuleKinesisAction {
        partitionKey?: string;
        roleArn: string;
        streamName: string;
    }

    export interface TopicRuleLambdaAction {
        functionArn?: string;
    }

    export interface TopicRuleLocationAction {
        deviceId: string;
        latitude: string;
        longitude: string;
        roleArn: string;
        timestamp?: outputs.iot.TopicRuleTimestamp;
        trackerName: string;
    }

    export interface TopicRuleOpenSearchAction {
        endpoint: string;
        id: string;
        index: string;
        roleArn: string;
        type: string;
    }

    export interface TopicRulePayload {
        actions: outputs.iot.TopicRuleAction[];
        awsIotSqlVersion?: string;
        description?: string;
        errorAction?: outputs.iot.TopicRuleAction;
        ruleDisabled?: boolean;
        sql: string;
    }

    export interface TopicRulePutAssetPropertyValueEntry {
        assetId?: string;
        entryId?: string;
        propertyAlias?: string;
        propertyId?: string;
        propertyValues: outputs.iot.TopicRuleAssetPropertyValue[];
    }

    export interface TopicRulePutItemInput {
        tableName: string;
    }

    export interface TopicRuleRepublishAction {
        headers?: outputs.iot.TopicRuleRepublishActionHeaders;
        qos?: number;
        roleArn: string;
        topic: string;
    }

    export interface TopicRuleRepublishActionHeaders {
        contentType?: string;
        correlationData?: string;
        messageExpiry?: string;
        payloadFormatIndicator?: string;
        responseTopic?: string;
        userProperties?: outputs.iot.TopicRuleUserProperty[];
    }

    export interface TopicRuleS3Action {
        bucketName: string;
        cannedAcl?: enums.iot.TopicRuleCannedAccessControlList;
        key: string;
        roleArn: string;
    }

    export interface TopicRuleSigV4Authorization {
        roleArn: string;
        serviceName: string;
        signingRegion: string;
    }

    export interface TopicRuleSnsAction {
        messageFormat?: string;
        roleArn: string;
        targetArn: string;
    }

    export interface TopicRuleSqsAction {
        queueUrl: string;
        roleArn: string;
        useBase64?: boolean;
    }

    export interface TopicRuleStepFunctionsAction {
        executionNamePrefix?: string;
        roleArn: string;
        stateMachineName: string;
    }

    export interface TopicRuleTag {
        key: string;
        value: string;
    }

    export interface TopicRuleTimestamp {
        unit?: string;
        value: string;
    }

    export interface TopicRuleTimestreamAction {
        databaseName: string;
        dimensions: outputs.iot.TopicRuleTimestreamDimension[];
        roleArn: string;
        tableName: string;
        timestamp?: outputs.iot.TopicRuleTimestreamTimestamp;
    }

    export interface TopicRuleTimestreamDimension {
        name: string;
        value: string;
    }

    export interface TopicRuleTimestreamTimestamp {
        unit: string;
        value: string;
    }

    export interface TopicRuleUserProperty {
        key: string;
        value: string;
    }

}

export namespace iot1click {
    export interface ProjectPlacementTemplate {
        defaultAttributes?: any;
        deviceTemplates?: any;
    }

}

export namespace iotanalytics {
    export interface ChannelCustomerManagedS3 {
        bucket: string;
        keyPrefix?: string;
        roleArn: string;
    }

    export interface ChannelRetentionPeriod {
        numberOfDays?: number;
        unlimited?: boolean;
    }

    export interface ChannelServiceManagedS3 {
    }

    export interface ChannelStorage {
        customerManagedS3?: outputs.iotanalytics.ChannelCustomerManagedS3;
        serviceManagedS3?: outputs.iotanalytics.ChannelServiceManagedS3;
    }

    export interface ChannelTag {
        key: string;
        value: string;
    }

    export interface DatasetAction {
        actionName: string;
        containerAction?: outputs.iotanalytics.DatasetContainerAction;
        queryAction?: outputs.iotanalytics.DatasetQueryAction;
    }

    export interface DatasetContainerAction {
        executionRoleArn: string;
        image: string;
        resourceConfiguration: outputs.iotanalytics.DatasetResourceConfiguration;
        variables?: outputs.iotanalytics.DatasetVariable[];
    }

    export interface DatasetContentDeliveryRule {
        destination: outputs.iotanalytics.DatasetContentDeliveryRuleDestination;
        entryName?: string;
    }

    export interface DatasetContentDeliveryRuleDestination {
        iotEventsDestinationConfiguration?: outputs.iotanalytics.DatasetIotEventsDestinationConfiguration;
        s3DestinationConfiguration?: outputs.iotanalytics.DatasetS3DestinationConfiguration;
    }

    export interface DatasetContentVersionValue {
        datasetName: string;
    }

    export interface DatasetDeltaTime {
        offsetSeconds: number;
        timeExpression: string;
    }

    export interface DatasetDeltaTimeSessionWindowConfiguration {
        timeoutInMinutes: number;
    }

    export interface DatasetFilter {
        deltaTime?: outputs.iotanalytics.DatasetDeltaTime;
    }

    export interface DatasetGlueConfiguration {
        databaseName: string;
        tableName: string;
    }

    export interface DatasetIotEventsDestinationConfiguration {
        inputName: string;
        roleArn: string;
    }

    export interface DatasetLateDataRule {
        ruleConfiguration: outputs.iotanalytics.DatasetLateDataRuleConfiguration;
        ruleName?: string;
    }

    export interface DatasetLateDataRuleConfiguration {
        deltaTimeSessionWindowConfiguration?: outputs.iotanalytics.DatasetDeltaTimeSessionWindowConfiguration;
    }

    export interface DatasetOutputFileUriValue {
        fileName: string;
    }

    export interface DatasetQueryAction {
        filters?: outputs.iotanalytics.DatasetFilter[];
        sqlQuery: string;
    }

    export interface DatasetResourceConfiguration {
        computeType: enums.iotanalytics.DatasetResourceConfigurationComputeType;
        volumeSizeInGb: number;
    }

    export interface DatasetRetentionPeriod {
        numberOfDays?: number;
        unlimited?: boolean;
    }

    export interface DatasetS3DestinationConfiguration {
        bucket: string;
        glueConfiguration?: outputs.iotanalytics.DatasetGlueConfiguration;
        key: string;
        roleArn: string;
    }

    export interface DatasetSchedule {
        scheduleExpression: string;
    }

    export interface DatasetTag {
        key: string;
        value: string;
    }

    export interface DatasetTrigger {
        schedule?: outputs.iotanalytics.DatasetSchedule;
        triggeringDataset?: outputs.iotanalytics.DatasetTriggeringDataset;
    }

    export interface DatasetTriggeringDataset {
        datasetName: string;
    }

    export interface DatasetVariable {
        datasetContentVersionValue?: outputs.iotanalytics.DatasetContentVersionValue;
        doubleValue?: number;
        outputFileUriValue?: outputs.iotanalytics.DatasetOutputFileUriValue;
        stringValue?: string;
        variableName: string;
    }

    export interface DatasetVersioningConfiguration {
        maxVersions?: number;
        unlimited?: boolean;
    }

    export interface DatastoreColumn {
        name: string;
        type: string;
    }

    export interface DatastoreCustomerManagedS3 {
        bucket: string;
        keyPrefix?: string;
        roleArn: string;
    }

    export interface DatastoreCustomerManagedS3Storage {
        bucket: string;
        keyPrefix?: string;
    }

    export interface DatastoreFileFormatConfiguration {
        jsonConfiguration?: outputs.iotanalytics.DatastoreJsonConfiguration;
        parquetConfiguration?: outputs.iotanalytics.DatastoreParquetConfiguration;
    }

    export interface DatastoreIotSiteWiseMultiLayerStorage {
        customerManagedS3Storage?: outputs.iotanalytics.DatastoreCustomerManagedS3Storage;
    }

    export interface DatastoreJsonConfiguration {
    }

    export interface DatastoreParquetConfiguration {
        schemaDefinition?: outputs.iotanalytics.DatastoreSchemaDefinition;
    }

    export interface DatastorePartition {
        partition?: outputs.iotanalytics.Partition;
        timestampPartition?: outputs.iotanalytics.DatastoreTimestampPartition;
    }

    export interface DatastorePartitions {
        partitions?: outputs.iotanalytics.DatastorePartition[];
    }

    export interface DatastoreRetentionPeriod {
        numberOfDays?: number;
        unlimited?: boolean;
    }

    export interface DatastoreSchemaDefinition {
        columns?: outputs.iotanalytics.DatastoreColumn[];
    }

    export interface DatastoreServiceManagedS3 {
    }

    export interface DatastoreStorage {
        customerManagedS3?: outputs.iotanalytics.DatastoreCustomerManagedS3;
        iotSiteWiseMultiLayerStorage?: outputs.iotanalytics.DatastoreIotSiteWiseMultiLayerStorage;
        serviceManagedS3?: outputs.iotanalytics.DatastoreServiceManagedS3;
    }

    export interface DatastoreTag {
        key: string;
        value: string;
    }

    export interface DatastoreTimestampPartition {
        attributeName: string;
        timestampFormat?: string;
    }

    export interface Partition {
        attributeName: string;
    }

    export interface PipelineActivity {
        addAttributes?: outputs.iotanalytics.PipelineAddAttributes;
        channel?: outputs.iotanalytics.PipelineChannel;
        datastore?: outputs.iotanalytics.PipelineDatastore;
        deviceRegistryEnrich?: outputs.iotanalytics.PipelineDeviceRegistryEnrich;
        deviceShadowEnrich?: outputs.iotanalytics.PipelineDeviceShadowEnrich;
        filter?: outputs.iotanalytics.PipelineFilter;
        lambda?: outputs.iotanalytics.PipelineLambda;
        math?: outputs.iotanalytics.PipelineMath;
        removeAttributes?: outputs.iotanalytics.PipelineRemoveAttributes;
        selectAttributes?: outputs.iotanalytics.PipelineSelectAttributes;
    }

    export interface PipelineAddAttributes {
        attributes: {[key: string]: string};
        name: string;
        next?: string;
    }

    export interface PipelineChannel {
        channelName: string;
        name: string;
        next?: string;
    }

    export interface PipelineDatastore {
        datastoreName: string;
        name: string;
    }

    export interface PipelineDeviceRegistryEnrich {
        attribute: string;
        name: string;
        next?: string;
        roleArn: string;
        thingName: string;
    }

    export interface PipelineDeviceShadowEnrich {
        attribute: string;
        name: string;
        next?: string;
        roleArn: string;
        thingName: string;
    }

    export interface PipelineFilter {
        filter: string;
        name: string;
        next?: string;
    }

    export interface PipelineLambda {
        batchSize: number;
        lambdaName: string;
        name: string;
        next?: string;
    }

    export interface PipelineMath {
        attribute: string;
        math: string;
        name: string;
        next?: string;
    }

    export interface PipelineRemoveAttributes {
        attributes: string[];
        name: string;
        next?: string;
    }

    export interface PipelineSelectAttributes {
        attributes: string[];
        name: string;
        next?: string;
    }

    export interface PipelineTag {
        key: string;
        value: string;
    }

}

export namespace iotcoredeviceadvisor {
    export interface SuiteDefinitionConfigurationProperties {
        devicePermissionRoleArn: string;
        devices?: outputs.iotcoredeviceadvisor.SuiteDefinitionDeviceUnderTest[];
        intendedForQualification?: boolean;
        rootGroup: string;
        suiteDefinitionName?: string;
    }

    export interface SuiteDefinitionDeviceUnderTest {
        certificateArn?: string;
        thingArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SuiteDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace iotevents {
    /**
     * Specifies whether to get notified for alarm state changes.
     */
    export interface AlarmModelAcknowledgeFlow {
        /**
         * The value must be TRUE or FALSE. If TRUE, you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to NORMAL. If FALSE, you won't receive notifications. The alarm automatically changes to the NORMAL state when the input property value returns to the specified range.
         */
        enabled?: boolean;
    }

    /**
     * The actions to be performed.
     */
    export interface AlarmModelAlarmAction {
        dynamoDBv2?: outputs.iotevents.AlarmModelDynamoDBv2;
        dynamoDb?: outputs.iotevents.AlarmModelDynamoDb;
        firehose?: outputs.iotevents.AlarmModelFirehose;
        iotEvents?: outputs.iotevents.AlarmModelIotEvents;
        iotSiteWise?: outputs.iotevents.AlarmModelIotSiteWise;
        iotTopicPublish?: outputs.iotevents.AlarmModelIotTopicPublish;
        lambda?: outputs.iotevents.AlarmModelLambda;
        sns?: outputs.iotevents.AlarmModelSns;
        sqs?: outputs.iotevents.AlarmModelSqs;
    }

    /**
     * Contains the configuration information of alarm state changes
     */
    export interface AlarmModelAlarmCapabilities {
        acknowledgeFlow?: outputs.iotevents.AlarmModelAcknowledgeFlow;
        initializationConfiguration?: outputs.iotevents.AlarmModelInitializationConfiguration;
    }

    /**
     * Contains information about one or more alarm actions.
     */
    export interface AlarmModelAlarmEventActions {
        alarmActions?: outputs.iotevents.AlarmModelAlarmAction[];
    }

    /**
     * Defines when your alarm is invoked.
     */
    export interface AlarmModelAlarmRule {
        simpleRule?: outputs.iotevents.AlarmModelSimpleRule;
    }

    /**
     * A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyTimestamp {
        /**
         * The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.
         */
        offsetInNanos?: string;
        /**
         * The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.
         */
        timeInSeconds: string;
    }

    /**
     * A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyValue {
        /**
         * The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.
         */
        quality?: string;
        timestamp?: outputs.iotevents.AlarmModelAssetPropertyTimestamp;
        value: outputs.iotevents.AlarmModelAssetPropertyVariant;
    }

    /**
     * A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyVariant {
        /**
         * The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
         */
        booleanValue?: string;
        /**
         * The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
         */
        doubleValue?: string;
        /**
         * The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
         */
        integerValue?: string;
        /**
         * The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
         */
        stringValue?: string;
    }

    /**
     * Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the alarm model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
     *
     * You can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.
     */
    export interface AlarmModelDynamoDBv2 {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the alarm model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
     */
    export interface AlarmModelDynamoDb {
        /**
         * The name of the hash key (also called the partition key).
         */
        hashKeyField: string;
        /**
         * The data type for the hash key (also called the partition key). You can specify the following values:
         *
         * * `STRING` - The hash key is a string.
         *
         * * `NUMBER` - The hash key is a number.
         *
         * If you don't specify `hashKeyType`, the default value is `STRING`.
         */
        hashKeyType?: string;
        /**
         * The value of the hash key (also called the partition key).
         */
        hashKeyValue: string;
        /**
         * The type of operation to perform. You can specify the following values:
         *
         * * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
         *
         * * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
         */
        operation?: string;
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The name of the DynamoDB column that receives the action payload.
         *
         * If you don't specify this parameter, the name of the DynamoDB column is `payload`.
         */
        payloadField?: string;
        /**
         * The name of the range key (also called the sort key).
         */
        rangeKeyField?: string;
        /**
         * The data type for the range key (also called the sort key), You can specify the following values:
         *
         * * `STRING` - The range key is a string.
         *
         * * `NUMBER` - The range key is number.
         *
         * If you don't specify `rangeKeyField`, the default value is `STRING`.
         */
        rangeKeyType?: string;
        /**
         * The value of the range key (also called the sort key).
         */
        rangeKeyValue?: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Sends information about the alarm model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
     */
    export interface AlarmModelFirehose {
        /**
         * The name of the Kinesis Data Firehose delivery stream where the data is written.
         */
        deliveryStreamName: string;
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    /**
     * Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
     */
    export interface AlarmModelInitializationConfiguration {
        /**
         * The value must be TRUE or FALSE. If FALSE, all alarm instances created based on the alarm model are activated. The default value is TRUE.
         */
        disabledOnInitialization: boolean;
    }

    /**
     * Sends an AWS IoT Events input, passing in information about the alarm model instance and the event that triggered the action.
     */
    export interface AlarmModelIotEvents {
        /**
         * The name of the AWS IoT Events input where the data is sent.
         */
        inputName: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    /**
     * Sends information about the alarm model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.
     */
    export interface AlarmModelIotSiteWise {
        /**
         * The ID of the asset that has the specified property. You can specify an expression.
         */
        assetId?: string;
        /**
         * A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
         */
        entryId?: string;
        /**
         * The alias of the asset property. You can also specify an expression.
         */
        propertyAlias?: string;
        /**
         * The ID of the asset property. You can specify an expression.
         */
        propertyId?: string;
        propertyValue?: outputs.iotevents.AlarmModelAssetPropertyValue;
    }

    /**
     * Information required to publish the MQTT message through the AWS IoT message broker.
     */
    export interface AlarmModelIotTopicPublish {
        /**
         * The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.
         */
        mqttTopic: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    export interface AlarmModelLambda {
        /**
         * The ARN of the Lambda function that is executed.
         */
        functionArn: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    /**
     * Information needed to configure the payload.
     *
     * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the alarm model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.
     */
    export interface AlarmModelPayload {
        /**
         * The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.
         */
        contentExpression: string;
        /**
         * The value of the payload type can be either `STRING` or `JSON`.
         */
        type: string;
    }

    /**
     * A rule that compares an input property value to a threshold value with a comparison operator.
     */
    export interface AlarmModelSimpleRule {
        /**
         * The comparison operator.
         */
        comparisonOperator: enums.iotevents.AlarmModelSimpleRuleComparisonOperator;
        /**
         * The value on the left side of the comparison operator. You can specify an AWS IoT Events input attribute as an input property.
         */
        inputProperty: string;
        /**
         * The value on the right side of the comparison operator. You can enter a number or specify an AWS IoT Events input attribute.
         */
        threshold: string;
    }

    /**
     * Information required to publish the Amazon SNS message.
     */
    export interface AlarmModelSns {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The ARN of the Amazon SNS target where the message is sent.
         */
        targetArn: string;
    }

    export interface AlarmModelSqs {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The URL of the SQS queue where the data is written.
         */
        queueUrl: string;
        /**
         * Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         */
        useBase64?: boolean;
    }

    /**
     * Tags to be applied to Input.
     */
    export interface AlarmModelTag {
        /**
         * Key of the Tag.
         */
        key: string;
        /**
         * Value of the Tag.
         */
        value: string;
    }

    /**
     * The actions to be performed.
     */
    export interface DetectorModelAction {
        clearTimer?: outputs.iotevents.DetectorModelClearTimer;
        dynamoDBv2?: outputs.iotevents.DetectorModelDynamoDBv2;
        dynamoDb?: outputs.iotevents.DetectorModelDynamoDb;
        firehose?: outputs.iotevents.DetectorModelFirehose;
        iotEvents?: outputs.iotevents.DetectorModelIotEvents;
        iotSiteWise?: outputs.iotevents.DetectorModelIotSiteWise;
        iotTopicPublish?: outputs.iotevents.DetectorModelIotTopicPublish;
        lambda?: outputs.iotevents.DetectorModelLambda;
        resetTimer?: outputs.iotevents.DetectorModelResetTimer;
        setTimer?: outputs.iotevents.DetectorModelSetTimer;
        setVariable?: outputs.iotevents.DetectorModelSetVariable;
        sns?: outputs.iotevents.DetectorModelSns;
        sqs?: outputs.iotevents.DetectorModelSqs;
    }

    /**
     * A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyTimestamp {
        /**
         * The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.
         */
        offsetInNanos?: string;
        /**
         * The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.
         */
        timeInSeconds: string;
    }

    /**
     * A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyValue {
        /**
         * The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.
         */
        quality?: string;
        timestamp?: outputs.iotevents.DetectorModelAssetPropertyTimestamp;
        value: outputs.iotevents.DetectorModelAssetPropertyVariant;
    }

    /**
     * A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyVariant {
        /**
         * The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
         */
        booleanValue?: string;
        /**
         * The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
         */
        doubleValue?: string;
        /**
         * The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
         */
        integerValue?: string;
        /**
         * The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
         */
        stringValue?: string;
    }

    /**
     * Information needed to clear the timer.
     */
    export interface DetectorModelClearTimer {
        timerName: string;
    }

    /**
     * Information that defines how a detector operates.
     */
    export interface DetectorModelDefinition {
        /**
         * The state that is entered at the creation of each detector (instance).
         */
        initialStateName: string;
        /**
         * Information about the states of the detector.
         */
        states: outputs.iotevents.DetectorModelState[];
    }

    /**
     * Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
     *
     * You can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.
     */
    export interface DetectorModelDynamoDBv2 {
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
     */
    export interface DetectorModelDynamoDb {
        /**
         * The name of the hash key (also called the partition key).
         */
        hashKeyField: string;
        /**
         * The data type for the hash key (also called the partition key). You can specify the following values:
         *
         * * `STRING` - The hash key is a string.
         *
         * * `NUMBER` - The hash key is a number.
         *
         * If you don't specify `hashKeyType`, the default value is `STRING`.
         */
        hashKeyType?: string;
        /**
         * The value of the hash key (also called the partition key).
         */
        hashKeyValue: string;
        /**
         * The type of operation to perform. You can specify the following values:
         *
         * * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
         *
         * * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
         */
        operation?: string;
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The name of the DynamoDB column that receives the action payload.
         *
         * If you don't specify this parameter, the name of the DynamoDB column is `payload`.
         */
        payloadField?: string;
        /**
         * The name of the range key (also called the sort key).
         */
        rangeKeyField?: string;
        /**
         * The data type for the range key (also called the sort key), You can specify the following values:
         *
         * * `STRING` - The range key is a string.
         *
         * * `NUMBER` - The range key is number.
         *
         * If you don't specify `rangeKeyField`, the default value is `STRING`.
         */
        rangeKeyType?: string;
        /**
         * The value of the range key (also called the sort key).
         */
        rangeKeyValue?: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.
     */
    export interface DetectorModelEvent {
        /**
         * The actions to be performed.
         */
        actions?: outputs.iotevents.DetectorModelAction[];
        /**
         * The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
         */
        condition?: string;
        /**
         * The name of the event.
         */
        eventName: string;
    }

    /**
     * Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
     */
    export interface DetectorModelFirehose {
        /**
         * The name of the Kinesis Data Firehose delivery stream where the data is written.
         */
        deliveryStreamName: string;
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    /**
     * Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
     */
    export interface DetectorModelIotEvents {
        /**
         * The name of the AWS IoT Events input where the data is sent.
         */
        inputName: string;
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    /**
     * Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.
     */
    export interface DetectorModelIotSiteWise {
        /**
         * The ID of the asset that has the specified property. You can specify an expression.
         */
        assetId?: string;
        /**
         * A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
         */
        entryId?: string;
        /**
         * The alias of the asset property. You can also specify an expression.
         */
        propertyAlias?: string;
        /**
         * The ID of the asset property. You can specify an expression.
         */
        propertyId?: string;
        propertyValue: outputs.iotevents.DetectorModelAssetPropertyValue;
    }

    /**
     * Information required to publish the MQTT message through the AWS IoT message broker.
     */
    export interface DetectorModelIotTopicPublish {
        /**
         * The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.
         */
        mqttTopic: string;
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    export interface DetectorModelLambda {
        /**
         * The ARN of the Lambda function that is executed.
         */
        functionArn: string;
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    /**
     * When entering this state, perform these `actions` if the `condition` is `TRUE`.
     */
    export interface DetectorModelOnEnter {
        /**
         * Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
    }

    /**
     * When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.
     */
    export interface DetectorModelOnExit {
        /**
         * Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
    }

    /**
     * When an input is received and the `condition` is `TRUE`, perform the specified `actions`.
     */
    export interface DetectorModelOnInput {
        /**
         * Specifies the `actions` performed when the `condition` evaluates to `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
        /**
         * Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.
         */
        transitionEvents?: outputs.iotevents.DetectorModelTransitionEvent[];
    }

    /**
     * Information needed to configure the payload.
     *
     * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.
     */
    export interface DetectorModelPayload {
        /**
         * The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.
         */
        contentExpression: string;
        /**
         * The value of the payload type can be either `STRING` or `JSON`.
         */
        type: string;
    }

    /**
     * Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.
     */
    export interface DetectorModelResetTimer {
        /**
         * The name of the timer to reset.
         */
        timerName: string;
    }

    /**
     * Information needed to set the timer.
     */
    export interface DetectorModelSetTimer {
        /**
         * The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
         */
        durationExpression?: string;
        /**
         * The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
         */
        seconds?: number;
        /**
         * The name of the timer.
         */
        timerName: string;
    }

    /**
     * Information about the variable and its new value.
     */
    export interface DetectorModelSetVariable {
        /**
         * The new value of the variable.
         */
        value: string;
        /**
         * The name of the variable.
         */
        variableName: string;
    }

    /**
     * Information required to publish the Amazon SNS message.
     */
    export interface DetectorModelSns {
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The ARN of the Amazon SNS target where the message is sent.
         */
        targetArn: string;
    }

    export interface DetectorModelSqs {
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The URL of the SQS queue where the data is written.
         */
        queueUrl: string;
        /**
         * Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         */
        useBase64?: boolean;
    }

    /**
     * Information that defines a state of a detector.
     */
    export interface DetectorModelState {
        onEnter?: outputs.iotevents.DetectorModelOnEnter;
        onExit?: outputs.iotevents.DetectorModelOnExit;
        onInput?: outputs.iotevents.DetectorModelOnInput;
        /**
         * The name of the state.
         */
        stateName: string;
    }

    /**
     * Tags to be applied to Input.
     */
    export interface DetectorModelTag {
        /**
         * Key of the Tag.
         */
        key: string;
        /**
         * Value of the Tag.
         */
        value: string;
    }

    /**
     * Specifies the `actions `performed and the next `state` entered when a `condition` evaluates to `TRUE`.
     */
    export interface DetectorModelTransitionEvent {
        /**
         * The actions to be performed.
         */
        actions?: outputs.iotevents.DetectorModelAction[];
        /**
         * A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
         */
        condition: string;
        /**
         * The name of the event.
         */
        eventName: string;
        /**
         * The next state to enter.
         */
        nextState: string;
    }

    /**
     * The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
     */
    export interface InputAttribute {
        /**
         * An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (`BatchPutMessage`). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the `condition` expressions used by detectors.
         *
         * _Syntax_: `<field-name>.<field-name>...`
         */
        jsonPath: string;
    }

    /**
     * The definition of the input.
     */
    export interface InputDefinition {
        /**
         * The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
         */
        attributes: outputs.iotevents.InputAttribute[];
    }

    /**
     * Tags to be applied to Input.
     */
    export interface InputTag {
        /**
         * Key of the Tag.
         */
        key: string;
        /**
         * Value of the Tag.
         */
        value: string;
    }

}

export namespace iotfleethub {
    /**
     * To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted.
     */
    export interface ApplicationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace iotfleetwise {
    export interface CampaignCollectionScheme0Properties {
        timeBasedCollectionScheme: outputs.iotfleetwise.CampaignTimeBasedCollectionScheme;
    }

    export interface CampaignCollectionScheme1Properties {
        conditionBasedCollectionScheme: outputs.iotfleetwise.CampaignConditionBasedCollectionScheme;
    }

    export interface CampaignConditionBasedCollectionScheme {
        conditionLanguageVersion?: number;
        expression: string;
        minimumTriggerIntervalMs?: number;
        triggerMode?: enums.iotfleetwise.CampaignTriggerMode;
    }

    export interface CampaignDataDestinationConfig0Properties {
        s3Config: outputs.iotfleetwise.CampaignS3Config;
    }

    export interface CampaignDataDestinationConfig1Properties {
        timestreamConfig: outputs.iotfleetwise.CampaignTimestreamConfig;
    }

    export interface CampaignS3Config {
        bucketArn: string;
        dataFormat?: enums.iotfleetwise.CampaignDataFormat;
        prefix?: string;
        storageCompressionFormat?: enums.iotfleetwise.CampaignStorageCompressionFormat;
    }

    export interface CampaignSignalInformation {
        maxSampleCount?: number;
        minimumSamplingIntervalMs?: number;
        name: string;
    }

    export interface CampaignTag {
        key: string;
        value: string;
    }

    export interface CampaignTimeBasedCollectionScheme {
        periodMs: number;
    }

    export interface CampaignTimestreamConfig {
        executionRoleArn: string;
        timestreamTableArn: string;
    }

    export interface DecoderManifestCanInterface {
        name: string;
        protocolName?: string;
        protocolVersion?: string;
    }

    export interface DecoderManifestCanNetworkInterface {
        canInterface: outputs.iotfleetwise.DecoderManifestCanInterface;
        interfaceId: string;
        type: enums.iotfleetwise.DecoderManifestCanNetworkInterfaceType;
    }

    export interface DecoderManifestCanSignal {
        factor: number;
        isBigEndian: boolean;
        isSigned: boolean;
        length: number;
        messageId: number;
        name?: string;
        offset: number;
        startBit: number;
    }

    export interface DecoderManifestCanSignalDecoder {
        canSignal: outputs.iotfleetwise.DecoderManifestCanSignal;
        fullyQualifiedName: string;
        interfaceId: string;
        type: enums.iotfleetwise.DecoderManifestCanSignalDecoderType;
    }

    export interface DecoderManifestObdInterface {
        dtcRequestIntervalSeconds?: number;
        hasTransmissionEcu?: boolean;
        name: string;
        obdStandard?: string;
        pidRequestIntervalSeconds?: number;
        requestMessageId: number;
        useExtendedIds?: boolean;
    }

    export interface DecoderManifestObdNetworkInterface {
        interfaceId: string;
        obdInterface: outputs.iotfleetwise.DecoderManifestObdInterface;
        type: enums.iotfleetwise.DecoderManifestObdNetworkInterfaceType;
    }

    export interface DecoderManifestObdSignal {
        bitMaskLength?: number;
        bitRightShift?: number;
        byteLength: number;
        offset: number;
        pid: number;
        pidResponseLength: number;
        scaling: number;
        serviceMode: number;
        startByte: number;
    }

    export interface DecoderManifestObdSignalDecoder {
        fullyQualifiedName: string;
        interfaceId: string;
        obdSignal: outputs.iotfleetwise.DecoderManifestObdSignal;
        type: enums.iotfleetwise.DecoderManifestObdSignalDecoderType;
    }

    export interface DecoderManifestTag {
        key: string;
        value: string;
    }

    export interface FleetTag {
        key: string;
        value: string;
    }

    export interface ModelManifestTag {
        key: string;
        value: string;
    }

    export interface SignalCatalogActuator {
        allowedValues?: string[];
        assignedValue?: string;
        dataType: enums.iotfleetwise.SignalCatalogNodeDataType;
        description?: string;
        fullyQualifiedName: string;
        max?: number;
        min?: number;
        unit?: string;
    }

    export interface SignalCatalogAttribute {
        allowedValues?: string[];
        assignedValue?: string;
        dataType: enums.iotfleetwise.SignalCatalogNodeDataType;
        defaultValue?: string;
        description?: string;
        fullyQualifiedName: string;
        max?: number;
        min?: number;
        unit?: string;
    }

    export interface SignalCatalogBranch {
        description?: string;
        fullyQualifiedName: string;
    }

    export interface SignalCatalogNode0Properties {
        branch?: outputs.iotfleetwise.SignalCatalogBranch;
    }

    export interface SignalCatalogNode1Properties {
        sensor?: outputs.iotfleetwise.SignalCatalogSensor;
    }

    export interface SignalCatalogNode2Properties {
        actuator?: outputs.iotfleetwise.SignalCatalogActuator;
    }

    export interface SignalCatalogNode3Properties {
        attribute?: outputs.iotfleetwise.SignalCatalogAttribute;
    }

    export interface SignalCatalogNodeCounts {
        totalActuators?: number;
        totalAttributes?: number;
        totalBranches?: number;
        totalNodes?: number;
        totalSensors?: number;
    }

    export interface SignalCatalogSensor {
        allowedValues?: string[];
        dataType: enums.iotfleetwise.SignalCatalogNodeDataType;
        description?: string;
        fullyQualifiedName: string;
        max?: number;
        min?: number;
        unit?: string;
    }

    export interface SignalCatalogTag {
        key: string;
        value: string;
    }

    export interface VehicleTag {
        key: string;
        value: string;
    }

    export interface VehicleattributesMap {
    }

}

export namespace iotsitewise {
    /**
     * Contains information for an IAM role identity in an access policy.
     */
    export interface AccessPolicyIamRole {
        /**
         * The ARN of the IAM role.
         */
        arn?: string;
    }

    /**
     * Contains information for an IAM user identity in an access policy.
     */
    export interface AccessPolicyIamUser {
        /**
         * The ARN of the IAM user.
         */
        arn?: string;
    }

    /**
     * The identity for this access policy. Choose either an SSO user or group or an IAM user or role.
     */
    export interface AccessPolicyIdentity {
        iamRole?: outputs.iotsitewise.AccessPolicyIamRole;
        iamUser?: outputs.iotsitewise.AccessPolicyIamUser;
        user?: outputs.iotsitewise.AccessPolicyUser;
    }

    /**
     * A portal resource.
     */
    export interface AccessPolicyPortal {
        /**
         * The ID of the portal.
         */
        id?: string;
    }

    /**
     * A project resource.
     */
    export interface AccessPolicyProject {
        /**
         * The ID of the project.
         */
        id?: string;
    }

    /**
     * The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
     */
    export interface AccessPolicyResource {
        portal?: outputs.iotsitewise.AccessPolicyPortal;
        project?: outputs.iotsitewise.AccessPolicyProject;
    }

    /**
     * Contains information for a user identity in an access policy.
     */
    export interface AccessPolicyUser {
        /**
         * The AWS SSO ID of the user.
         */
        id?: string;
    }

    /**
     * Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range.
     */
    export interface AlarmsProperties {
        /**
         * The ARN of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events.
         */
        alarmRoleArn?: string;
        /**
         * The ARN of the AWS Lambda function that manages alarm notifications. For more information, see Managing alarm notifications in the AWS IoT Events Developer Guide.
         */
        notificationLambdaArn?: string;
    }

    /**
     * A hierarchy specifies allowed parent/child asset relationships.
     */
    export interface AssetHierarchy {
        /**
         * The ID of the child asset to be associated.
         */
        childAssetId: string;
        /**
         * The LogicalID of a hierarchy in the parent asset's model.
         */
        logicalId: string;
    }

    export interface AssetModelAttribute {
        defaultValue?: string;
    }

    /**
     * Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.
     */
    export interface AssetModelCompositeModel {
        /**
         * The property definitions of the asset model. You can specify up to 200 properties per asset model.
         */
        compositeModelProperties?: outputs.iotsitewise.AssetModelProperty[];
        /**
         * A description for the asset composite model.
         */
        description?: string;
        /**
         * A unique, friendly name for the asset composite model.
         */
        name: string;
        /**
         * The type of the composite model. For alarm composite models, this type is AWS/ALARM
         */
        type: string;
    }

    export interface AssetModelExpressionVariable {
        /**
         * The friendly name of the variable to be used in the expression.
         */
        name: string;
        /**
         * The variable that identifies an asset property from which to use values.
         */
        value: outputs.iotsitewise.AssetModelVariableValue;
    }

    /**
     * Contains information about an asset model hierarchy.
     */
    export interface AssetModelHierarchy {
        /**
         * The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.
         */
        childAssetModelId: string;
        /**
         * Customer provided ID for hierarchy.
         */
        logicalId: string;
        /**
         * The name of the asset model hierarchy.
         */
        name: string;
    }

    export interface AssetModelMetric {
        /**
         * The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.
         */
        expression: string;
        /**
         * The list of variables used in the expression.
         */
        variables: outputs.iotsitewise.AssetModelExpressionVariable[];
        /**
         * The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression
         */
        window: outputs.iotsitewise.AssetModelMetricWindow;
    }

    /**
     * Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).
     */
    export interface AssetModelMetricWindow {
        tumbling?: outputs.iotsitewise.AssetModelTumblingWindow;
    }

    /**
     * Contains information about an asset model property.
     */
    export interface AssetModelProperty {
        /**
         * The data type of the asset model property.
         */
        dataType: enums.iotsitewise.AssetModelDataType;
        /**
         * The data type of the structure for this property.
         */
        dataTypeSpec?: enums.iotsitewise.AssetModelDataTypeSpec;
        /**
         * Customer provided ID for property.
         */
        logicalId: string;
        /**
         * The name of the asset model property.
         */
        name: string;
        /**
         * The property type
         */
        type: outputs.iotsitewise.AssetModelPropertyType;
        /**
         * The unit of the asset model property, such as Newtons or RPM.
         */
        unit?: string;
    }

    /**
     * Contains a property type, which can be one of attribute, measurement, metric, or transform.
     */
    export interface AssetModelPropertyType {
        attribute?: outputs.iotsitewise.AssetModelAttribute;
        metric?: outputs.iotsitewise.AssetModelMetric;
        transform?: outputs.iotsitewise.AssetModelTransform;
        typeName: enums.iotsitewise.AssetModelTypeName;
    }

    export interface AssetModelTag {
        key: string;
        value: string;
    }

    export interface AssetModelTransform {
        /**
         * The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
         */
        expression: string;
        /**
         * The list of variables used in the expression.
         */
        variables: outputs.iotsitewise.AssetModelExpressionVariable[];
    }

    /**
     * Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.
     */
    export interface AssetModelTumblingWindow {
        interval: string;
        offset?: string;
    }

    export interface AssetModelVariableValue {
        hierarchyLogicalId?: string;
        propertyLogicalId: string;
    }

    /**
     * The asset property's definition, alias, unit, and notification state.
     */
    export interface AssetProperty {
        /**
         * The property alias that identifies the property.
         */
        alias?: string;
        /**
         * Customer provided ID for property.
         */
        logicalId: string;
        /**
         * The MQTT notification state (ENABLED or DISABLED) for this asset property.
         */
        notificationState?: enums.iotsitewise.AssetPropertyNotificationState;
        /**
         * The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the assetModelProperty in the asset model.
         */
        unit?: string;
    }

    export interface AssetTag {
        key: string;
        value: string;
    }

    /**
     * To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted
     */
    export interface DashboardTag {
        key: string;
        value: string;
    }

    /**
     * Contains a summary of a gateway capability configuration.
     */
    export interface GatewayCapabilitySummary {
        capabilityConfiguration?: string;
        capabilityNamespace: string;
    }

    /**
     * Contains the ARN of AWS IoT Greengrass Group V1 that the gateway runs on.
     */
    export interface GatewayGreengrass {
        /**
         * The ARN of the Greengrass group.
         */
        groupArn: string;
    }

    /**
     * Contains the CoreDeviceThingName of AWS IoT Greengrass Group V2 that the gateway runs on.
     */
    export interface GatewayGreengrassV2 {
        /**
         * The name of the CoreDevice in GreenGrass V2.
         */
        coreDeviceThingName: string;
    }

    /**
     * Contains a gateway's platform information.
     */
    export interface GatewayPlatform {
        /**
         * A gateway that runs on AWS IoT Greengrass V1.
         */
        greengrass?: outputs.iotsitewise.GatewayGreengrass;
        /**
         * A gateway that runs on AWS IoT Greengrass V2.
         */
        greengrassV2?: outputs.iotsitewise.GatewayGreengrassV2;
    }

    /**
     * To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted
     */
    export interface GatewayTag {
        key: string;
        value: string;
    }

    /**
     * To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted.
     */
    export interface PortalTag {
        key: string;
        value: string;
    }

    /**
     * To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted
     */
    export interface ProjectTag {
        key: string;
        value: string;
    }

}

export namespace iotthingsgraph {
    export interface FlowTemplateDefinitionDocument {
        language: string;
        text: string;
    }

}

export namespace iottwinmaker {
    /**
     * An object that sets information about a composite component type.
     */
    export interface ComponentTypeCompositeComponentType {
        /**
         * The id of the composite component type.
         */
        componentTypeId?: string;
    }

    /**
     * The data connector.
     */
    export interface ComponentTypeDataConnector {
        /**
         * A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
         */
        isNative?: boolean;
        /**
         * The Lambda function associated with this data connector.
         */
        lambda?: outputs.iottwinmaker.ComponentTypeLambdaFunction;
    }

    /**
     * An object that specifies the data type of a property.
     */
    export interface ComponentTypeDataType {
        /**
         * The allowed values for this data type.
         */
        allowedValues?: outputs.iottwinmaker.ComponentTypeDataValue[];
        /**
         * The nested type in the data type.
         */
        nestedType?: outputs.iottwinmaker.ComponentTypeDataType;
        /**
         * A relationship that associates a component with another component.
         */
        relationship?: outputs.iottwinmaker.ComponentTypeRelationship;
        /**
         * The underlying type of the data type.
         */
        type: enums.iottwinmaker.ComponentTypeDataTypeType;
        /**
         * The unit of measure used in this data type.
         */
        unitOfMeasure?: string;
    }

    /**
     * An object that specifies a value for a property.
     */
    export interface ComponentTypeDataValue {
        /**
         * A Boolean value.
         */
        booleanValue?: boolean;
        /**
         * A double value.
         */
        doubleValue?: number;
        /**
         * An expression that produces the value.
         */
        expression?: string;
        /**
         * An integer value.
         */
        integerValue?: number;
        /**
         * A list of multiple values.
         */
        listValue?: outputs.iottwinmaker.ComponentTypeDataValue[];
        /**
         * A long value.
         */
        longValue?: number;
        /**
         * An object that maps strings to multiple DataValue objects. 
         */
        mapValue?: {[key: string]: outputs.iottwinmaker.ComponentTypeDataValue};
        /**
         * A value that relates a component to another component.
         */
        relationshipValue?: outputs.iottwinmaker.ComponentTypeDataValueRelationshipValueProperties;
        /**
         * A string value.
         */
        stringValue?: string;
    }

    /**
     * A value that relates a component to another component.
     */
    export interface ComponentTypeDataValueRelationshipValueProperties {
        targetComponentName?: string;
        targetEntityId?: string;
    }

    /**
     * The function of component type.
     */
    export interface ComponentTypeFunction {
        /**
         * The data connector.
         */
        implementedBy?: outputs.iottwinmaker.ComponentTypeDataConnector;
        /**
         * The required properties of the function.
         */
        requiredProperties?: string[];
        /**
         * The scope of the function.
         */
        scope?: enums.iottwinmaker.ComponentTypeFunctionScope;
    }

    export interface ComponentTypeLambdaFunction {
        arn: string;
    }

    /**
     * An object that sets information about a property.
     */
    export interface ComponentTypePropertyDefinition {
        /**
         * An object that specifies information about a property.
         */
        configurations?: {[key: string]: string};
        /**
         * An object that contains information about the data type.
         */
        dataType?: outputs.iottwinmaker.ComponentTypeDataType;
        /**
         * An object that contains the default value.
         */
        defaultValue?: outputs.iottwinmaker.ComponentTypeDataValue;
        /**
         * A Boolean value that specifies whether the property ID comes from an external data store.
         */
        isExternalId?: boolean;
        /**
         * A Boolean value that specifies whether the property is required.
         */
        isRequiredInEntity?: boolean;
        /**
         * A Boolean value that specifies whether the property is stored externally.
         */
        isStoredExternally?: boolean;
        /**
         * A Boolean value that specifies whether the property consists of time series data.
         */
        isTimeSeries?: boolean;
    }

    /**
     * An object that sets information about a property group.
     */
    export interface ComponentTypePropertyGroup {
        /**
         * The type of property group.
         */
        groupType?: enums.iottwinmaker.ComponentTypePropertyGroupGroupType;
        /**
         * The list of property names in the property group.
         */
        propertyNames?: string[];
    }

    /**
     * The type of the relationship.
     */
    export interface ComponentTypeRelationship {
        /**
         * The type of the relationship.
         */
        relationshipType?: string;
        /**
         * The ID of the target component type associated with this relationship.
         */
        targetComponentTypeId?: string;
    }

    export interface ComponentTypeStatus {
        error?: any | outputs.iottwinmaker.ComponentTypeStatusErrorProperties;
        state?: enums.iottwinmaker.ComponentTypeStatusState;
    }

    /**
     * Error object with Message and Code.
     */
    export interface ComponentTypeStatusErrorProperties {
        code?: enums.iottwinmaker.ComponentTypeStatusErrorPropertiesCode;
        message?: string;
    }

    export interface EntityComponent {
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The ID of the component type.
         */
        componentTypeId?: string;
        /**
         * The name of the property definition set in the component.
         */
        definedIn?: string;
        /**
         * The description of the component.
         */
        description?: string;
        /**
         * An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
         */
        properties?: {[key: string]: outputs.iottwinmaker.EntityProperty};
        /**
         * An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
         */
        propertyGroups?: {[key: string]: outputs.iottwinmaker.EntityPropertyGroup};
        /**
         * The current status of the entity.
         */
        status?: outputs.iottwinmaker.EntityStatus;
    }

    export interface EntityCompositeComponent {
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The path of the component.
         */
        componentPath?: string;
        /**
         * The ID of the component type.
         */
        componentTypeId?: string;
        /**
         * The description of the component.
         */
        description?: string;
        /**
         * An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
         */
        properties?: {[key: string]: outputs.iottwinmaker.EntityProperty};
        /**
         * An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
         */
        propertyGroups?: {[key: string]: outputs.iottwinmaker.EntityPropertyGroup};
        /**
         * The current status of the component.
         */
        status?: outputs.iottwinmaker.EntityStatus;
    }

    /**
     * An object that specifies the data type of a property.
     */
    export interface EntityDataType {
        /**
         * The allowed values for this data type.
         */
        allowedValues?: outputs.iottwinmaker.EntityDataValue[];
        /**
         * The nested type in the data type.
         */
        nestedType?: outputs.iottwinmaker.EntityDataType;
        /**
         * A relationship that associates a component with another component.
         */
        relationship?: outputs.iottwinmaker.EntityRelationship;
        /**
         * The underlying type of the data type.
         */
        type?: enums.iottwinmaker.EntityDataTypeType;
        /**
         * The unit of measure used in this data type.
         */
        unitOfMeasure?: string;
    }

    /**
     * An object that specifies a value for a property.
     */
    export interface EntityDataValue {
        /**
         * A Boolean value.
         */
        booleanValue?: boolean;
        /**
         * A double value.
         */
        doubleValue?: number;
        /**
         * An expression that produces the value.
         */
        expression?: string;
        /**
         * An integer value.
         */
        integerValue?: number;
        /**
         * A list of multiple values.
         */
        listValue?: outputs.iottwinmaker.EntityDataValue[];
        /**
         * A long value.
         */
        longValue?: number;
        /**
         * An object that maps strings to multiple DataValue objects.
         */
        mapValue?: {[key: string]: outputs.iottwinmaker.EntityDataValue};
        /**
         * A value that relates a component to another component.
         */
        relationshipValue?: outputs.iottwinmaker.EntityDataValueRelationshipValueProperties;
        /**
         * A string value.
         */
        stringValue?: string;
    }

    /**
     * A value that relates a component to another component.
     */
    export interface EntityDataValueRelationshipValueProperties {
        targetComponentName?: string;
        targetEntityId?: string;
    }

    export interface EntityProperty {
        /**
         * An object that specifies information about a property.
         */
        definition?: outputs.iottwinmaker.EntityPropertyDefinitionProperties;
        /**
         * The value of the property.
         */
        value?: outputs.iottwinmaker.EntityDataValue;
    }

    /**
     * An object that specifies information about a property.
     */
    export interface EntityPropertyDefinitionConfiguration {
    }

    /**
     * An object that specifies information about a property.
     */
    export interface EntityPropertyDefinitionProperties {
        /**
         * An object that specifies information about a property.
         */
        configuration?: outputs.iottwinmaker.EntityPropertyDefinitionConfiguration;
        /**
         * An object that contains information about the data type.
         */
        dataType?: outputs.iottwinmaker.EntityDataType;
        /**
         * An object that contains the default value.
         */
        defaultValue?: outputs.iottwinmaker.EntityDataValue;
        /**
         * A Boolean value that specifies whether the property ID comes from an external data store.
         */
        isExternalId?: boolean;
        /**
         * A Boolean value that specifies whether the property definition can be updated.
         */
        isFinal?: boolean;
        /**
         * A Boolean value that specifies whether the property definition is imported from an external data store.
         */
        isImported?: boolean;
        /**
         * A Boolean value that specifies whether the property definition is inherited from a parent entity.
         */
        isInherited?: boolean;
        /**
         * A Boolean value that specifies whether the property is required.
         */
        isRequiredInEntity?: boolean;
        /**
         * A Boolean value that specifies whether the property is stored externally.
         */
        isStoredExternally?: boolean;
        /**
         * A Boolean value that specifies whether the property consists of time series data.
         */
        isTimeSeries?: boolean;
    }

    /**
     * An object that specifies information about a property group.
     */
    export interface EntityPropertyGroup {
        /**
         * The type of property group.
         */
        groupType?: enums.iottwinmaker.EntityPropertyGroupGroupType;
        /**
         * The list of property names in the property group.
         */
        propertyNames?: string[];
    }

    /**
     * The type of the relationship.
     */
    export interface EntityRelationship {
        /**
         * The type of the relationship.
         */
        relationshipType?: string;
        /**
         * The ID of the target component type associated with this relationship.
         */
        targetComponentTypeId?: string;
    }

    export interface EntityStatus {
        error?: any | outputs.iottwinmaker.EntityStatusErrorProperties;
        state?: enums.iottwinmaker.EntityStatusState;
    }

    /**
     * Error object with Message and Code.
     */
    export interface EntityStatusErrorProperties {
        code?: enums.iottwinmaker.EntityStatusErrorPropertiesCode;
        message?: string;
    }

}

export namespace iotwireless {
    export interface DestinationTag {
        key?: string;
        value?: string;
    }

    export interface DeviceProfileLoRaWanDeviceProfile {
        classBTimeout?: number;
        classCTimeout?: number;
        factoryPresetFreqsList?: number[];
        macVersion?: string;
        maxDutyCycle?: number;
        maxEirp?: number;
        pingSlotDr?: number;
        pingSlotFreq?: number;
        pingSlotPeriod?: number;
        regParamsRevision?: string;
        rfRegion?: string;
        rxDataRate2?: number;
        rxDelay1?: number;
        rxDrOffset1?: number;
        rxFreq2?: number;
        supports32BitFCnt?: boolean;
        supportsClassB?: boolean;
        supportsClassC?: boolean;
        supportsJoin?: boolean;
    }

    export interface DeviceProfileTag {
        key?: string;
        value?: string;
    }

    export interface FuotaTaskLoRaWan {
        /**
         * FUOTA task LoRaWAN RF region
         */
        rfRegion: string;
        /**
         * FUOTA task LoRaWAN start time
         */
        startTime?: string;
    }

    export interface FuotaTaskTag {
        key?: string;
        value?: string;
    }

    export interface MulticastGroupLoRaWan {
        /**
         * Multicast group LoRaWAN DL Class
         */
        dlClass: string;
        /**
         * Multicast group number of devices in group. Returned after successful read.
         */
        numberOfDevicesInGroup?: number;
        /**
         * Multicast group number of devices requested. Returned after successful read.
         */
        numberOfDevicesRequested?: number;
        /**
         * Multicast group LoRaWAN RF region
         */
        rfRegion: string;
    }

    export interface MulticastGroupTag {
        key?: string;
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface NetworkAnalyzerConfigurationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface PartnerAccountSidewalkAccountInfo {
        appServerPrivateKey: string;
    }

    export interface PartnerAccountSidewalkAccountInfoWithFingerprint {
        amazonId?: string;
        arn?: string;
        fingerprint?: string;
    }

    export interface PartnerAccountSidewalkUpdateAccount {
        appServerPrivateKey?: string;
    }

    export interface PartnerAccountTag {
        key?: string;
        value?: string;
    }

    export interface ServiceProfileLoRaWanServiceProfile {
        addGwMetadata?: boolean;
        channelMask?: string;
        devStatusReqFreq?: number;
        dlBucketSize?: number;
        dlRate?: number;
        dlRatePolicy?: string;
        drMax?: number;
        drMin?: number;
        hrAllowed?: boolean;
        minGwDiversity?: number;
        nwkGeoLoc?: boolean;
        prAllowed?: boolean;
        raAllowed?: boolean;
        reportDevStatusBattery?: boolean;
        reportDevStatusMargin?: boolean;
        targetPer?: number;
        ulBucketSize?: number;
        ulRate?: number;
        ulRatePolicy?: string;
    }

    export interface ServiceProfileTag {
        key?: string;
        value?: string;
    }

    /**
     * sidewalk contain file for created device and role
     */
    export interface SidewalkProperties {
        deviceCreationFile?: string;
        deviceCreationFileList?: string[];
        role?: string;
        sidewalkManufacturingSn?: string;
    }

    export interface TaskDefinitionLoRaWanGatewayVersion {
        model?: string;
        packageVersion?: string;
        station?: string;
    }

    export interface TaskDefinitionLoRaWanUpdateGatewayTaskCreate {
        currentVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
        sigKeyCrc?: number;
        updateSignature?: string;
        updateVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
    }

    export interface TaskDefinitionLoRaWanUpdateGatewayTaskEntry {
        currentVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
        updateVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
    }

    export interface TaskDefinitionTag {
        key?: string;
        value?: string;
    }

    export interface TaskDefinitionUpdateWirelessGatewayTaskCreate {
        loRaWan?: outputs.iotwireless.TaskDefinitionLoRaWanUpdateGatewayTaskCreate;
        updateDataRole?: string;
        updateDataSource?: string;
    }

    /**
     * Trace content for your wireless gateway and wireless device resources
     */
    export interface TraceContentProperties {
        logLevel?: enums.iotwireless.NetworkAnalyzerConfigurationLogLevel;
        wirelessDeviceFrameInfo?: enums.iotwireless.NetworkAnalyzerConfigurationWirelessDeviceFrameInfo;
    }

    export interface WirelessDeviceAbpV10x {
        devAddr: string;
        sessionKeys: outputs.iotwireless.WirelessDeviceSessionKeysAbpV10x;
    }

    export interface WirelessDeviceAbpV11 {
        devAddr: string;
        sessionKeys: outputs.iotwireless.WirelessDeviceSessionKeysAbpV11;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface WirelessDeviceImportTaskTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface WirelessDeviceLoRaWanDevice {
        abpV10x?: outputs.iotwireless.WirelessDeviceAbpV10x;
        abpV11?: outputs.iotwireless.WirelessDeviceAbpV11;
        devEui?: string;
        deviceProfileId?: string;
        otaaV10x?: outputs.iotwireless.WirelessDeviceOtaaV10x;
        otaaV11?: outputs.iotwireless.WirelessDeviceOtaaV11;
        serviceProfileId?: string;
    }

    export interface WirelessDeviceOtaaV10x {
        appEui: string;
        appKey: string;
    }

    export interface WirelessDeviceOtaaV11 {
        appKey: string;
        joinEui: string;
        nwkKey: string;
    }

    export interface WirelessDeviceSessionKeysAbpV10x {
        appSKey: string;
        nwkSKey: string;
    }

    export interface WirelessDeviceSessionKeysAbpV11 {
        appSKey: string;
        fNwkSIntKey: string;
        nwkSEncKey: string;
        sNwkSIntKey: string;
    }

    export interface WirelessDeviceTag {
        key?: string;
        value?: string;
    }

    export interface WirelessGatewayLoRaWanGateway {
        gatewayEui: string;
        rfRegion: string;
    }

    export interface WirelessGatewayTag {
        key?: string;
        value?: string;
    }

}

export namespace ivs {
    export interface ChannelTag {
        key: string;
        value: string;
    }

    export interface PlaybackKeyPairTag {
        key: string;
        value: string;
    }

    /**
     * Recording Destination Configuration.
     */
    export interface RecordingConfigurationDestinationConfiguration {
        s3?: outputs.ivs.RecordingConfigurationS3DestinationConfiguration;
    }

    /**
     * Rendition Configuration describes which renditions should be recorded for a stream.
     */
    export interface RecordingConfigurationRenditionConfiguration {
        /**
         * Resolution Selection indicates which set of renditions are recorded for a stream.
         */
        renditionSelection?: enums.ivs.RecordingConfigurationRenditionConfigurationRenditionSelection;
        /**
         * Renditions indicates which renditions are recorded for a stream.
         */
        renditions?: enums.ivs.RecordingConfigurationRenditionConfigurationRenditionsItem[];
    }

    /**
     * Recording S3 Destination Configuration.
     */
    export interface RecordingConfigurationS3DestinationConfiguration {
        bucketName: string;
    }

    export interface RecordingConfigurationTag {
        key: string;
        value: string;
    }

    /**
     * Recording Thumbnail Configuration.
     */
    export interface RecordingConfigurationThumbnailConfiguration {
        /**
         * Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
         */
        recordingMode?: enums.ivs.RecordingConfigurationThumbnailConfigurationRecordingMode;
        /**
         * Resolution indicates the desired resolution of recorded thumbnails.
         */
        resolution?: enums.ivs.RecordingConfigurationThumbnailConfigurationResolution;
        /**
         * Storage indicates the format in which thumbnails are recorded.
         */
        storage?: enums.ivs.RecordingConfigurationThumbnailConfigurationStorageItem[];
        /**
         * Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
         */
        targetIntervalSeconds?: number;
    }

    export interface StageTag {
        key: string;
        value: string;
    }

    export interface StreamKeyTag {
        key: string;
        value: string;
    }

}

export namespace ivschat {
    /**
     * CloudWatch destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationCloudWatchLogsDestinationConfiguration {
        /**
         * Name of the Amazon CloudWatch Logs log group where chat activity will be logged.
         */
        logGroupName: string;
    }

    /**
     * Destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationDestinationConfiguration {
        cloudWatchLogs?: outputs.ivschat.LoggingConfigurationCloudWatchLogsDestinationConfiguration;
        firehose?: outputs.ivschat.LoggingConfigurationFirehoseDestinationConfiguration;
        s3?: outputs.ivschat.LoggingConfigurationS3DestinationConfiguration;
    }

    /**
     * Kinesis Firehose destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationFirehoseDestinationConfiguration {
        /**
         * Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
         */
        deliveryStreamName: string;
    }

    /**
     * S3 destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationS3DestinationConfiguration {
        /**
         * Name of the Amazon S3 bucket where chat activity will be logged.
         */
        bucketName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LoggingConfigurationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Configuration information for optional review of messages.
     */
    export interface RoomMessageReviewHandler {
        /**
         * Specifies the fallback behavior if the handler does not return a valid response, encounters an error, or times out.
         */
        fallbackResult?: enums.ivschat.RoomMessageReviewHandlerFallbackResult;
        /**
         * Identifier of the message review handler.
         */
        uri?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RoomTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace kafkaconnect {
    /**
     * Details of how to connect to an Apache Kafka cluster.
     */
    export interface ConnectorApacheKafkaCluster {
        /**
         * The bootstrap servers string of the Apache Kafka cluster.
         */
        bootstrapServers: string;
        vpc: outputs.kafkaconnect.ConnectorVpc;
    }

    /**
     * Details about auto scaling of a connector.
     */
    export interface ConnectorAutoScaling {
        /**
         * The maximum number of workers for a connector.
         */
        maxWorkerCount: number;
        /**
         * Specifies how many MSK Connect Units (MCU) as the minimum scaling unit.
         */
        mcuCount: number;
        /**
         * The minimum number of workers for a connector.
         */
        minWorkerCount: number;
        scaleInPolicy: outputs.kafkaconnect.ConnectorScaleInPolicy;
        scaleOutPolicy: outputs.kafkaconnect.ConnectorScaleOutPolicy;
    }

    /**
     * Information about the capacity allocated to the connector.
     */
    export interface ConnectorCapacity {
        autoScaling?: outputs.kafkaconnect.ConnectorAutoScaling;
        provisionedCapacity?: outputs.kafkaconnect.ConnectorProvisionedCapacity;
    }

    /**
     * Details about delivering logs to Amazon CloudWatch Logs.
     */
    export interface ConnectorCloudWatchLogsLogDelivery {
        /**
         * Specifies whether the logs get sent to the specified CloudWatch Logs destination.
         */
        enabled: boolean;
        /**
         * The CloudWatch log group that is the destination for log delivery.
         */
        logGroup?: string;
    }

    /**
     * Details about a custom plugin.
     */
    export interface ConnectorCustomPlugin {
        /**
         * The Amazon Resource Name (ARN) of the custom plugin to use.
         */
        customPluginArn: string;
        /**
         * The revision of the custom plugin to use.
         */
        revision: number;
    }

    /**
     * Details about delivering logs to Amazon Kinesis Data Firehose.
     */
    export interface ConnectorFirehoseLogDelivery {
        /**
         * The Kinesis Data Firehose delivery stream that is the destination for log delivery.
         */
        deliveryStream?: string;
        /**
         * Specifies whether the logs get sent to the specified Kinesis Data Firehose delivery stream.
         */
        enabled: boolean;
    }

    /**
     * Details of how to connect to the Kafka cluster.
     */
    export interface ConnectorKafkaCluster {
        apacheKafkaCluster: outputs.kafkaconnect.ConnectorApacheKafkaCluster;
    }

    /**
     * Details of the client authentication used by the Kafka cluster.
     */
    export interface ConnectorKafkaClusterClientAuthentication {
        authenticationType: enums.kafkaconnect.ConnectorKafkaClusterClientAuthenticationType;
    }

    /**
     * Details of encryption in transit to the Kafka cluster.
     */
    export interface ConnectorKafkaClusterEncryptionInTransit {
        encryptionType: enums.kafkaconnect.ConnectorKafkaClusterEncryptionInTransitType;
    }

    /**
     * Details of what logs are delivered and where they are delivered.
     */
    export interface ConnectorLogDelivery {
        workerLogDelivery: outputs.kafkaconnect.ConnectorWorkerLogDelivery;
    }

    /**
     * Details about a Kafka Connect plugin which will be used with the connector.
     */
    export interface ConnectorPlugin {
        customPlugin: outputs.kafkaconnect.ConnectorCustomPlugin;
    }

    /**
     * Details about a fixed capacity allocated to a connector.
     */
    export interface ConnectorProvisionedCapacity {
        /**
         * Specifies how many MSK Connect Units (MCU) are allocated to the connector.
         */
        mcuCount?: number;
        /**
         * Number of workers for a connector.
         */
        workerCount: number;
    }

    /**
     * Details about delivering logs to Amazon S3.
     */
    export interface ConnectorS3LogDelivery {
        /**
         * The name of the S3 bucket that is the destination for log delivery.
         */
        bucket?: string;
        /**
         * Specifies whether the logs get sent to the specified Amazon S3 destination.
         */
        enabled: boolean;
        /**
         * The S3 prefix that is the destination for log delivery.
         */
        prefix?: string;
    }

    /**
     * Information about the scale in policy of the connector.
     */
    export interface ConnectorScaleInPolicy {
        /**
         * Specifies the CPU utilization percentage threshold at which connector scale in should trigger.
         */
        cpuUtilizationPercentage: number;
    }

    /**
     * Information about the scale out policy of the connector.
     */
    export interface ConnectorScaleOutPolicy {
        /**
         * Specifies the CPU utilization percentage threshold at which connector scale out should trigger.
         */
        cpuUtilizationPercentage: number;
    }

    /**
     * Information about a VPC used with the connector.
     */
    export interface ConnectorVpc {
        /**
         * The AWS security groups to associate with the elastic network interfaces in order to specify what the connector has access to.
         */
        securityGroups: string[];
        /**
         * The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
         */
        subnets: string[];
    }

    /**
     * Specifies the worker configuration to use with the connector.
     */
    export interface ConnectorWorkerConfiguration {
        /**
         * The revision of the worker configuration to use.
         */
        revision: number;
        /**
         * The Amazon Resource Name (ARN) of the worker configuration to use.
         */
        workerConfigurationArn: string;
    }

    /**
     * Specifies where worker logs are delivered.
     */
    export interface ConnectorWorkerLogDelivery {
        cloudWatchLogs?: outputs.kafkaconnect.ConnectorCloudWatchLogsLogDelivery;
        firehose?: outputs.kafkaconnect.ConnectorFirehoseLogDelivery;
        s3?: outputs.kafkaconnect.ConnectorS3LogDelivery;
    }

}

export namespace kendra {
    export interface DataSourceAccessControlListConfiguration {
        keyPath?: string;
    }

    export interface DataSourceAclConfiguration {
        allowedGroupsColumnName: string;
    }

    export interface DataSourceColumnConfiguration {
        changeDetectingColumns: string[];
        documentDataColumnName: string;
        documentIdColumnName: string;
        documentTitleColumnName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceConfiguration {
        confluenceConfiguration?: outputs.kendra.DataSourceConfluenceConfiguration;
        databaseConfiguration?: outputs.kendra.DataSourceDatabaseConfiguration;
        googleDriveConfiguration?: outputs.kendra.DataSourceGoogleDriveConfiguration;
        oneDriveConfiguration?: outputs.kendra.DataSourceOneDriveConfiguration;
        s3Configuration?: outputs.kendra.DataSourceS3DataSourceConfiguration;
        salesforceConfiguration?: outputs.kendra.DataSourceSalesforceConfiguration;
        serviceNowConfiguration?: outputs.kendra.DataSourceServiceNowConfiguration;
        sharePointConfiguration?: outputs.kendra.DataSourceSharePointConfiguration;
        webCrawlerConfiguration?: outputs.kendra.DataSourceWebCrawlerConfiguration;
        workDocsConfiguration?: outputs.kendra.DataSourceWorkDocsConfiguration;
    }

    export interface DataSourceConfluenceAttachmentConfiguration {
        attachmentFieldMappings?: outputs.kendra.DataSourceConfluenceAttachmentToIndexFieldMapping[];
        crawlAttachments?: boolean;
    }

    export interface DataSourceConfluenceAttachmentToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceAttachmentFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceBlogConfiguration {
        blogFieldMappings?: outputs.kendra.DataSourceConfluenceBlogToIndexFieldMapping[];
    }

    export interface DataSourceConfluenceBlogToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceBlogFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceConfiguration {
        attachmentConfiguration?: outputs.kendra.DataSourceConfluenceAttachmentConfiguration;
        blogConfiguration?: outputs.kendra.DataSourceConfluenceBlogConfiguration;
        exclusionPatterns?: string[];
        inclusionPatterns?: string[];
        pageConfiguration?: outputs.kendra.DataSourceConfluencePageConfiguration;
        secretArn: string;
        serverUrl: string;
        spaceConfiguration?: outputs.kendra.DataSourceConfluenceSpaceConfiguration;
        version: enums.kendra.DataSourceConfluenceVersion;
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceConfluencePageConfiguration {
        pageFieldMappings?: outputs.kendra.DataSourceConfluencePageToIndexFieldMapping[];
    }

    export interface DataSourceConfluencePageToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluencePageFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceSpaceConfiguration {
        crawlArchivedSpaces?: boolean;
        crawlPersonalSpaces?: boolean;
        excludeSpaces?: string[];
        includeSpaces?: string[];
        spaceFieldMappings?: outputs.kendra.DataSourceConfluenceSpaceToIndexFieldMapping[];
    }

    export interface DataSourceConfluenceSpaceToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceSpaceFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConnectionConfiguration {
        databaseHost: string;
        databaseName: string;
        databasePort: number;
        secretArn: string;
        tableName: string;
    }

    export interface DataSourceCustomDocumentEnrichmentConfiguration {
        inlineConfigurations?: outputs.kendra.DataSourceInlineCustomDocumentEnrichmentConfiguration[];
        postExtractionHookConfiguration?: outputs.kendra.DataSourceHookConfiguration;
        preExtractionHookConfiguration?: outputs.kendra.DataSourceHookConfiguration;
        roleArn?: string;
    }

    export interface DataSourceDatabaseConfiguration {
        aclConfiguration?: outputs.kendra.DataSourceAclConfiguration;
        columnConfiguration: outputs.kendra.DataSourceColumnConfiguration;
        connectionConfiguration: outputs.kendra.DataSourceConnectionConfiguration;
        databaseEngineType: enums.kendra.DataSourceDatabaseEngineType;
        sqlConfiguration?: outputs.kendra.DataSourceSqlConfiguration;
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceDocumentAttributeCondition {
        conditionDocumentAttributeKey: string;
        conditionOnValue?: outputs.kendra.DataSourceDocumentAttributeValue;
        operator: enums.kendra.DataSourceConditionOperator;
    }

    export interface DataSourceDocumentAttributeTarget {
        targetDocumentAttributeKey: string;
        targetDocumentAttributeValue?: outputs.kendra.DataSourceDocumentAttributeValue;
        targetDocumentAttributeValueDeletion?: boolean;
    }

    export interface DataSourceDocumentAttributeValue {
        dateValue?: string;
        longValue?: number;
        stringListValue?: string[];
        stringValue?: string;
    }

    export interface DataSourceDocumentsMetadataConfiguration {
        s3Prefix?: string;
    }

    export interface DataSourceGoogleDriveConfiguration {
        excludeMimeTypes?: string[];
        excludeSharedDrives?: string[];
        excludeUserAccounts?: string[];
        exclusionPatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        inclusionPatterns?: string[];
        secretArn: string;
    }

    export interface DataSourceHookConfiguration {
        invocationCondition?: outputs.kendra.DataSourceDocumentAttributeCondition;
        lambdaArn: string;
        s3Bucket: string;
    }

    export interface DataSourceInlineCustomDocumentEnrichmentConfiguration {
        condition?: outputs.kendra.DataSourceDocumentAttributeCondition;
        documentContentDeletion?: boolean;
        target?: outputs.kendra.DataSourceDocumentAttributeTarget;
    }

    export interface DataSourceOneDriveConfiguration {
        disableLocalGroups?: boolean;
        exclusionPatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        inclusionPatterns?: string[];
        oneDriveUsers: outputs.kendra.DataSourceOneDriveUsers;
        secretArn: string;
        tenantDomain: string;
    }

    export interface DataSourceOneDriveUsers {
        oneDriveUserList?: string[];
        oneDriveUserS3Path?: outputs.kendra.DataSourceS3Path;
    }

    export interface DataSourceProxyConfiguration {
        credentials?: string;
        host: string;
        port: number;
    }

    /**
     * S3 data source configuration
     */
    export interface DataSourceS3DataSourceConfiguration {
        accessControlListConfiguration?: outputs.kendra.DataSourceAccessControlListConfiguration;
        bucketName: string;
        documentsMetadataConfiguration?: outputs.kendra.DataSourceDocumentsMetadataConfiguration;
        exclusionPatterns?: string[];
        inclusionPatterns?: string[];
        inclusionPrefixes?: string[];
    }

    export interface DataSourceS3Path {
        bucket: string;
        key: string;
    }

    export interface DataSourceSalesforceChatterFeedConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        includeFilterTypes?: enums.kendra.DataSourceSalesforceChatterFeedIncludeFilterType[];
    }

    export interface DataSourceSalesforceConfiguration {
        chatterFeedConfiguration?: outputs.kendra.DataSourceSalesforceChatterFeedConfiguration;
        crawlAttachments?: boolean;
        excludeAttachmentFilePatterns?: string[];
        includeAttachmentFilePatterns?: string[];
        knowledgeArticleConfiguration?: outputs.kendra.DataSourceSalesforceKnowledgeArticleConfiguration;
        secretArn: string;
        serverUrl: string;
        standardObjectAttachmentConfiguration?: outputs.kendra.DataSourceSalesforceStandardObjectAttachmentConfiguration;
        standardObjectConfigurations?: outputs.kendra.DataSourceSalesforceStandardObjectConfiguration[];
    }

    export interface DataSourceSalesforceCustomKnowledgeArticleTypeConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        name: string;
    }

    export interface DataSourceSalesforceKnowledgeArticleConfiguration {
        customKnowledgeArticleTypeConfigurations?: outputs.kendra.DataSourceSalesforceCustomKnowledgeArticleTypeConfiguration[];
        includedStates: enums.kendra.DataSourceSalesforceKnowledgeArticleState[];
        standardKnowledgeArticleTypeConfiguration?: outputs.kendra.DataSourceSalesforceStandardKnowledgeArticleTypeConfiguration;
    }

    export interface DataSourceSalesforceStandardKnowledgeArticleTypeConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceSalesforceStandardObjectAttachmentConfiguration {
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceSalesforceStandardObjectConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        name: enums.kendra.DataSourceSalesforceStandardObjectName;
    }

    export interface DataSourceServiceNowConfiguration {
        authenticationType?: enums.kendra.DataSourceServiceNowAuthenticationType;
        hostUrl: string;
        knowledgeArticleConfiguration?: outputs.kendra.DataSourceServiceNowKnowledgeArticleConfiguration;
        secretArn: string;
        serviceCatalogConfiguration?: outputs.kendra.DataSourceServiceNowServiceCatalogConfiguration;
        serviceNowBuildVersion: enums.kendra.DataSourceServiceNowBuildVersionType;
    }

    export interface DataSourceServiceNowKnowledgeArticleConfiguration {
        crawlAttachments?: boolean;
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        excludeAttachmentFilePatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        filterQuery?: string;
        includeAttachmentFilePatterns?: string[];
    }

    export interface DataSourceServiceNowServiceCatalogConfiguration {
        crawlAttachments?: boolean;
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        excludeAttachmentFilePatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        includeAttachmentFilePatterns?: string[];
    }

    /**
     * SharePoint configuration
     */
    export interface DataSourceSharePointConfiguration {
        crawlAttachments?: boolean;
        disableLocalGroups?: boolean;
        documentTitleFieldName?: string;
        exclusionPatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        inclusionPatterns?: string[];
        secretArn: string;
        sharePointVersion: enums.kendra.DataSourceSharePointConfigurationSharePointVersion;
        sslCertificateS3Path?: outputs.kendra.DataSourceS3Path;
        urls: string[];
        useChangeLog?: boolean;
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceSqlConfiguration {
        queryIdentifiersEnclosingOption?: enums.kendra.DataSourceQueryIdentifiersEnclosingOption;
    }

    /**
     * A label for tagging Kendra resources
     */
    export interface DataSourceTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface DataSourceToIndexFieldMapping {
        dataSourceFieldName: string;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceVpcConfiguration {
        securityGroupIds: string[];
        subnetIds: string[];
    }

    export interface DataSourceWebCrawlerAuthenticationConfiguration {
        basicAuthentication?: outputs.kendra.DataSourceWebCrawlerBasicAuthentication[];
    }

    export interface DataSourceWebCrawlerBasicAuthentication {
        credentials: string;
        host: string;
        port: number;
    }

    export interface DataSourceWebCrawlerConfiguration {
        authenticationConfiguration?: outputs.kendra.DataSourceWebCrawlerAuthenticationConfiguration;
        crawlDepth?: number;
        maxContentSizePerPageInMegaBytes?: number;
        maxLinksPerPage?: number;
        maxUrlsPerMinuteCrawlRate?: number;
        proxyConfiguration?: outputs.kendra.DataSourceProxyConfiguration;
        urlExclusionPatterns?: string[];
        urlInclusionPatterns?: string[];
        urls: outputs.kendra.DataSourceWebCrawlerUrls;
    }

    export interface DataSourceWebCrawlerSeedUrlConfiguration {
        seedUrls: string[];
        webCrawlerMode?: enums.kendra.DataSourceWebCrawlerSeedUrlConfigurationWebCrawlerMode;
    }

    export interface DataSourceWebCrawlerSiteMapsConfiguration {
        siteMaps: string[];
    }

    export interface DataSourceWebCrawlerUrls {
        seedUrlConfiguration?: outputs.kendra.DataSourceWebCrawlerSeedUrlConfiguration;
        siteMapsConfiguration?: outputs.kendra.DataSourceWebCrawlerSiteMapsConfiguration;
    }

    export interface DataSourceWorkDocsConfiguration {
        crawlComments?: boolean;
        exclusionPatterns?: string[];
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        inclusionPatterns?: string[];
        organizationId: string;
        useChangeLog?: boolean;
    }

    export interface FaqS3Path {
        bucket: string;
        key: string;
    }

    /**
     * A label for tagging Kendra resources
     */
    export interface FaqTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface IndexCapacityUnitsConfiguration {
        queryCapacityUnits: number;
        storageCapacityUnits: number;
    }

    export interface IndexDocumentMetadataConfiguration {
        name: string;
        relevance?: outputs.kendra.IndexRelevance;
        search?: outputs.kendra.IndexSearch;
        type: enums.kendra.IndexDocumentAttributeValueType;
    }

    export interface IndexJsonTokenTypeConfiguration {
        groupAttributeField: string;
        userNameAttributeField: string;
    }

    export interface IndexJwtTokenTypeConfiguration {
        claimRegex?: string;
        groupAttributeField?: string;
        issuer?: string;
        keyLocation: enums.kendra.IndexKeyLocation;
        secretManagerArn?: string;
        url?: string;
        userNameAttributeField?: string;
    }

    export interface IndexRelevance {
        duration?: string;
        freshness?: boolean;
        importance?: number;
        rankOrder?: enums.kendra.IndexOrder;
        valueImportanceItems?: outputs.kendra.IndexValueImportanceItem[];
    }

    export interface IndexSearch {
        displayable?: boolean;
        facetable?: boolean;
        searchable?: boolean;
        sortable?: boolean;
    }

    export interface IndexServerSideEncryptionConfiguration {
        kmsKeyId?: string;
    }

    /**
     * A label for tagging Kendra resources
     */
    export interface IndexTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface IndexUserTokenConfiguration {
        jsonTokenTypeConfiguration?: outputs.kendra.IndexJsonTokenTypeConfiguration;
        jwtTokenTypeConfiguration?: outputs.kendra.IndexJwtTokenTypeConfiguration;
    }

    export interface IndexValueImportanceItem {
        key?: string;
        value?: number;
    }

}

export namespace kendraranking {
    export interface ExecutionPlanCapacityUnitsConfiguration {
        rescoreCapacityUnits: number;
    }

    /**
     * A label for tagging KendraRanking resources
     */
    export interface ExecutionPlanTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

}

export namespace kinesis {
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
     */
    export interface StreamEncryption {
        /**
         * The encryption type to use. The only valid value is KMS. 
         */
        encryptionType: enums.kinesis.StreamEncryptionEncryptionType;
        /**
         * The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
         */
        keyId: string;
    }

    /**
     * When specified, enables or updates the mode of stream. Default is PROVISIONED.
     */
    export interface StreamModeDetails {
        /**
         * The mode of the stream
         */
        streamMode: enums.kinesis.StreamModeDetailsStreamMode;
    }

    /**
     * An arbitrary set of tags (key-value pairs) to associate with the Kinesis stream.
     */
    export interface StreamTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace kinesisanalytics {
    export interface ApplicationCsvMappingParameters {
        recordColumnDelimiter: string;
        recordRowDelimiter: string;
    }

    export interface ApplicationInput {
        inputParallelism?: outputs.kinesisanalytics.ApplicationInputParallelism;
        inputProcessingConfiguration?: outputs.kinesisanalytics.ApplicationInputProcessingConfiguration;
        inputSchema: outputs.kinesisanalytics.ApplicationInputSchema;
        kinesisFirehoseInput?: outputs.kinesisanalytics.ApplicationKinesisFirehoseInput;
        kinesisStreamsInput?: outputs.kinesisanalytics.ApplicationKinesisStreamsInput;
        namePrefix: string;
    }

    export interface ApplicationInputLambdaProcessor {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationInputParallelism {
        count?: number;
    }

    export interface ApplicationInputProcessingConfiguration {
        inputLambdaProcessor?: outputs.kinesisanalytics.ApplicationInputLambdaProcessor;
    }

    export interface ApplicationInputSchema {
        recordColumns: outputs.kinesisanalytics.ApplicationRecordColumn[];
        recordEncoding?: string;
        recordFormat: outputs.kinesisanalytics.ApplicationRecordFormat;
    }

    export interface ApplicationJsonMappingParameters {
        recordRowPath: string;
    }

    export interface ApplicationKinesisFirehoseInput {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationKinesisStreamsInput {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationMappingParameters {
        csvMappingParameters?: outputs.kinesisanalytics.ApplicationCsvMappingParameters;
        jsonMappingParameters?: outputs.kinesisanalytics.ApplicationJsonMappingParameters;
    }

    export interface ApplicationOutputResourceDestinationSchema {
        recordFormatType?: string;
    }

    export interface ApplicationOutputResourceKinesisFirehoseOutput {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationOutputResourceKinesisStreamsOutput {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationOutputResourceLambdaOutput {
        resourceArn: string;
        roleArn: string;
    }

    export interface ApplicationOutputResourceOutput {
        destinationSchema: outputs.kinesisanalytics.ApplicationOutputResourceDestinationSchema;
        kinesisFirehoseOutput?: outputs.kinesisanalytics.ApplicationOutputResourceKinesisFirehoseOutput;
        kinesisStreamsOutput?: outputs.kinesisanalytics.ApplicationOutputResourceKinesisStreamsOutput;
        lambdaOutput?: outputs.kinesisanalytics.ApplicationOutputResourceLambdaOutput;
        name?: string;
    }

    export interface ApplicationRecordColumn {
        mapping?: string;
        name: string;
        sqlType: string;
    }

    export interface ApplicationRecordFormat {
        mappingParameters?: outputs.kinesisanalytics.ApplicationMappingParameters;
        recordFormatType: string;
    }

    export interface ApplicationReferenceDataSourceCsvMappingParameters {
        recordColumnDelimiter: string;
        recordRowDelimiter: string;
    }

    export interface ApplicationReferenceDataSourceJsonMappingParameters {
        recordRowPath: string;
    }

    export interface ApplicationReferenceDataSourceMappingParameters {
        csvMappingParameters?: outputs.kinesisanalytics.ApplicationReferenceDataSourceCsvMappingParameters;
        jsonMappingParameters?: outputs.kinesisanalytics.ApplicationReferenceDataSourceJsonMappingParameters;
    }

    export interface ApplicationReferenceDataSourceRecordColumn {
        mapping?: string;
        name: string;
        sqlType: string;
    }

    export interface ApplicationReferenceDataSourceRecordFormat {
        mappingParameters?: outputs.kinesisanalytics.ApplicationReferenceDataSourceMappingParameters;
        recordFormatType: string;
    }

    export interface ApplicationReferenceDataSourceReferenceDataSource {
        referenceSchema: outputs.kinesisanalytics.ApplicationReferenceDataSourceReferenceSchema;
        s3ReferenceDataSource?: outputs.kinesisanalytics.ApplicationReferenceDataSourceS3ReferenceDataSource;
        tableName?: string;
    }

    export interface ApplicationReferenceDataSourceReferenceSchema {
        recordColumns: outputs.kinesisanalytics.ApplicationReferenceDataSourceRecordColumn[];
        recordEncoding?: string;
        recordFormat: outputs.kinesisanalytics.ApplicationReferenceDataSourceRecordFormat;
    }

    export interface ApplicationReferenceDataSourceS3ReferenceDataSource {
        bucketArn: string;
        fileKey: string;
        referenceRoleArn: string;
    }

}

export namespace kinesisanalyticsv2 {
    /**
     * The configuration parameters for the default Amazon Glue database. You use this database for SQL queries that you write in a Kinesis Data Analytics Studio notebook.
     */
    export interface ApplicationCatalogConfiguration {
        /**
         * The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
         */
        glueDataCatalogConfiguration?: outputs.kinesisanalyticsv2.ApplicationGlueDataCatalogConfiguration;
    }

    /**
     * Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
     */
    export interface ApplicationCheckpointConfiguration {
        /**
         * Describes the interval in milliseconds between checkpoint operations.
         */
        checkpointInterval?: number;
        /**
         * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
         */
        checkpointingEnabled?: boolean;
        /**
         * Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationCheckpointConfigurationConfigurationType;
        /**
         * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
         */
        minPauseBetweenCheckpoints?: number;
    }

    export interface ApplicationCloudWatchLoggingOptionCloudWatchLoggingOption {
        logStreamArn: string;
    }

    /**
     * Describes code configuration for an application.
     */
    export interface ApplicationCodeConfiguration {
        /**
         * The location and type of the application code.
         */
        codeContent: outputs.kinesisanalyticsv2.ApplicationCodeContent;
        /**
         * Specifies whether the code content is in text or zip format.
         */
        codeContentType: enums.kinesisanalyticsv2.ApplicationCodeConfigurationCodeContentType;
    }

    /**
     * Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationCodeContent {
        /**
         * Information about the Amazon S3 bucket that contains the application code.
         */
        s3ContentLocation?: outputs.kinesisanalyticsv2.ApplicationS3ContentLocation;
        /**
         * The text-format code for a Flink-based Kinesis Data Analytics application.
         */
        textContent?: string;
        /**
         * The zip-format code for a Flink-based Kinesis Data Analytics application.
         */
        zipFileContent?: string;
    }

    /**
     * Specifies the creation parameters for a Kinesis Data Analytics application.
     */
    export interface ApplicationConfiguration {
        /**
         * The code location and type parameters for a Flink-based Kinesis Data Analytics application.
         */
        applicationCodeConfiguration?: outputs.kinesisanalyticsv2.ApplicationCodeConfiguration;
        /**
         * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
         */
        applicationSnapshotConfiguration?: outputs.kinesisanalyticsv2.ApplicationSnapshotConfiguration;
        /**
         * Describes execution properties for a Flink-based Kinesis Data Analytics application.
         */
        environmentProperties?: outputs.kinesisanalyticsv2.ApplicationEnvironmentProperties;
        /**
         * The creation and update parameters for a Flink-based Kinesis Data Analytics application.
         */
        flinkApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationFlinkApplicationConfiguration;
        /**
         * The creation and update parameters for a SQL-based Kinesis Data Analytics application.
         */
        sqlApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationSqlApplicationConfiguration;
        /**
         * The array of descriptions of VPC configurations available to the application.
         */
        vpcConfigurations?: outputs.kinesisanalyticsv2.ApplicationVpcConfiguration[];
        /**
         * The configuration parameters for a Kinesis Data Analytics Studio notebook.
         */
        zeppelinApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationZeppelinApplicationConfiguration;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the '\n' as the row delimiter and a comma (",") as the column delimiter:
     * `"name1", "address1"`
     * `"name2", "address2"`
     */
    export interface ApplicationCsvMappingParameters {
        /**
         * The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
         */
        recordRowDelimiter: string;
    }

    /**
     * The configuration of connectors and user-defined functions.
     */
    export interface ApplicationCustomArtifactConfiguration {
        /**
         * Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
         */
        artifactType: enums.kinesisanalyticsv2.ApplicationCustomArtifactConfigurationArtifactType;
        /**
         * The parameters required to fully specify a Maven reference.
         */
        mavenReference?: outputs.kinesisanalyticsv2.ApplicationMavenReference;
        /**
         * The location of the custom artifacts.
         */
        s3ContentLocation?: outputs.kinesisanalyticsv2.ApplicationS3ContentLocation;
    }

    /**
     * The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
     */
    export interface ApplicationDeployAsApplicationConfiguration {
        /**
         * The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
         */
        s3ContentLocation: outputs.kinesisanalyticsv2.ApplicationS3ContentBaseLocation;
    }

    /**
     * Describes execution properties for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationEnvironmentProperties {
        /**
         * Describes the execution property groups.
         */
        propertyGroups?: outputs.kinesisanalyticsv2.ApplicationPropertyGroup[];
    }

    /**
     * Describes configuration parameters for a Flink-based Kinesis Data Analytics application or a Studio notebook.
     */
    export interface ApplicationFlinkApplicationConfiguration {
        /**
         * Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
         */
        checkpointConfiguration?: outputs.kinesisanalyticsv2.ApplicationCheckpointConfiguration;
        /**
         * Describes configuration parameters for Amazon CloudWatch logging for an application.
         */
        monitoringConfiguration?: outputs.kinesisanalyticsv2.ApplicationMonitoringConfiguration;
        /**
         * Describes parameters for how an application executes multiple tasks simultaneously.
         */
        parallelismConfiguration?: outputs.kinesisanalyticsv2.ApplicationParallelismConfiguration;
    }

    /**
     * Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationFlinkRunConfiguration {
        /**
         * When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
         */
        allowNonRestoredState?: boolean;
    }

    /**
     * The configuration of the Glue Data Catalog that you use for Apache Flink SQL queries and table API transforms that you write in an application.
     */
    export interface ApplicationGlueDataCatalogConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the database.
         */
        databaseArn?: string;
    }

    /**
     * When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
     */
    export interface ApplicationInput {
        /**
         * Describes the number of in-application streams to create.
         */
        inputParallelism?: outputs.kinesisanalyticsv2.ApplicationInputParallelism;
        /**
         * The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
         */
        inputProcessingConfiguration?: outputs.kinesisanalyticsv2.ApplicationInputProcessingConfiguration;
        /**
         * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         */
        inputSchema: outputs.kinesisanalyticsv2.ApplicationInputSchema;
        /**
         * If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
         */
        kinesisFirehoseInput?: outputs.kinesisanalyticsv2.ApplicationKinesisFirehoseInput;
        /**
         * If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
         */
        kinesisStreamsInput?: outputs.kinesisanalyticsv2.ApplicationKinesisStreamsInput;
        /**
         * The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
         */
        namePrefix: string;
    }

    /**
     * An object that contains the Amazon Resource Name (ARN) of the Amazon Lambda function that is used to preprocess records in the stream in a SQL-based Kinesis Data Analytics application.
     */
    export interface ApplicationInputLambdaProcessor {
        /**
         * The ARN of the Amazon Lambda function that operates on records in the stream.
         */
        resourceArn: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the number of in-application streams to create for a given streaming source.
     */
    export interface ApplicationInputParallelism {
        /**
         * The number of in-application streams to create.
         */
        count?: number;
    }

    /**
     * For an SQL-based Amazon Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is Amazon Lambda.
     */
    export interface ApplicationInputProcessingConfiguration {
        /**
         * The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
         */
        inputLambdaProcessor?: outputs.kinesisanalyticsv2.ApplicationInputLambdaProcessor;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
     */
    export interface ApplicationInputSchema {
        /**
         * A list of `RecordColumn` objects.
         */
        recordColumns: outputs.kinesisanalyticsv2.ApplicationRecordColumn[];
        /**
         * Specifies the encoding of the records in the streaming source. For example, UTF-8.
         */
        recordEncoding?: enums.kinesisanalyticsv2.ApplicationInputSchemaRecordEncoding;
        /**
         * Specifies the format of the records on the streaming source.
         */
        recordFormat: outputs.kinesisanalyticsv2.ApplicationRecordFormat;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, provides additional mapping information when JSON is the record format on the streaming source.
     */
    export interface ApplicationJsonMappingParameters {
        /**
         * The path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, identifies a Kinesis Data Firehose delivery stream as the streaming source. You provide the delivery stream's Amazon Resource Name (ARN).
     */
    export interface ApplicationKinesisFirehoseInput {
        /**
         * The Amazon Resource Name (ARN) of the delivery stream.
         */
        resourceArn: string;
    }

    /**
     * Identifies a Kinesis data stream as the streaming source. You provide the stream's Amazon Resource Name (ARN).
     */
    export interface ApplicationKinesisStreamsInput {
        /**
         * The ARN of the input Kinesis data stream to read.
         */
        resourceArn: string;
    }

    /**
     * Describes the maintenance configuration for the application.
     */
    export interface ApplicationMaintenanceConfiguration {
        /**
         * The start time for the maintenance window.
         */
        applicationMaintenanceWindowStartTime: string;
    }

    /**
     * When you configure a SQL-based Kinesis Data Analytics application's input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
     */
    export interface ApplicationMappingParameters {
        /**
         * Provides additional mapping information when the record format uses delimiters (for example, CSV).
         */
        csvMappingParameters?: outputs.kinesisanalyticsv2.ApplicationCsvMappingParameters;
        /**
         * Provides additional mapping information when JSON is the record format on the streaming source.
         */
        jsonMappingParameters?: outputs.kinesisanalyticsv2.ApplicationJsonMappingParameters;
    }

    /**
     * The information required to specify a Maven reference. You can use Maven references to specify dependency JAR files.
     */
    export interface ApplicationMavenReference {
        /**
         * The artifact ID of the Maven reference.
         */
        artifactId: string;
        /**
         * The group ID of the Maven reference.
         */
        groupId: string;
        /**
         * The version of the Maven reference.
         */
        version: string;
    }

    /**
     * Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
     */
    export interface ApplicationMonitoringConfiguration {
        /**
         * Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationConfigurationType;
        /**
         * Describes the verbosity of the CloudWatch Logs for an application.
         */
        logLevel?: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationLogLevel;
        /**
         * Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
         */
        metricsLevel?: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationMetricsLevel;
    }

    export interface ApplicationOutputResourceDestinationSchema {
        recordFormatType?: string;
    }

    export interface ApplicationOutputResourceKinesisFirehoseOutput {
        resourceArn: string;
    }

    export interface ApplicationOutputResourceKinesisStreamsOutput {
        resourceArn: string;
    }

    export interface ApplicationOutputResourceLambdaOutput {
        resourceArn: string;
    }

    export interface ApplicationOutputResourceOutput {
        destinationSchema: outputs.kinesisanalyticsv2.ApplicationOutputResourceDestinationSchema;
        kinesisFirehoseOutput?: outputs.kinesisanalyticsv2.ApplicationOutputResourceKinesisFirehoseOutput;
        kinesisStreamsOutput?: outputs.kinesisanalyticsv2.ApplicationOutputResourceKinesisStreamsOutput;
        lambdaOutput?: outputs.kinesisanalyticsv2.ApplicationOutputResourceLambdaOutput;
        name?: string;
    }

    /**
     * Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see Parallel Execution in the Apache Flink Documentation
     */
    export interface ApplicationParallelismConfiguration {
        /**
         * Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
         */
        autoScalingEnabled?: boolean;
        /**
         * Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationParallelismConfigurationConfigurationType;
        /**
         * Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
         */
        parallelism?: number;
        /**
         * Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
         */
        parallelismPerKpu?: number;
    }

    /**
     * Property key-value pairs passed into an application.
     */
    export interface ApplicationPropertyGroup {
        /**
         * Describes the key of an application execution property key-value pair.
         */
        propertyGroupId?: string;
        /**
         * Describes the value of an application execution property key-value pair.
         */
        propertyMap?: any;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
     * Also used to describe the format of the reference data source.
     */
    export interface ApplicationRecordColumn {
        /**
         * A reference to the data element in the streaming input or the reference data source.
         */
        mapping?: string;
        /**
         * The name of the column that is created in the in-application input stream or reference table.
         */
        name: string;
        /**
         * The type of column created in the in-application input stream or reference table.
         */
        sqlType: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the record format and relevant mapping information that should be applied to schematize the records on the stream.
     */
    export interface ApplicationRecordFormat {
        /**
         * When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
         */
        mappingParameters?: outputs.kinesisanalyticsv2.ApplicationMappingParameters;
        /**
         * The type of record format.
         */
        recordFormatType: enums.kinesisanalyticsv2.ApplicationRecordFormatRecordFormatType;
    }

    export interface ApplicationReferenceDataSourceCsvMappingParameters {
        recordColumnDelimiter: string;
        recordRowDelimiter: string;
    }

    export interface ApplicationReferenceDataSourceJsonMappingParameters {
        recordRowPath: string;
    }

    export interface ApplicationReferenceDataSourceMappingParameters {
        csvMappingParameters?: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceCsvMappingParameters;
        jsonMappingParameters?: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceJsonMappingParameters;
    }

    export interface ApplicationReferenceDataSourceRecordColumn {
        mapping?: string;
        name: string;
        sqlType: string;
    }

    export interface ApplicationReferenceDataSourceRecordFormat {
        mappingParameters?: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceMappingParameters;
        recordFormatType: string;
    }

    export interface ApplicationReferenceDataSourceReferenceDataSource {
        referenceSchema: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceReferenceSchema;
        s3ReferenceDataSource?: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceS3ReferenceDataSource;
        tableName?: string;
    }

    export interface ApplicationReferenceDataSourceReferenceSchema {
        recordColumns: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceRecordColumn[];
        recordEncoding?: string;
        recordFormat: outputs.kinesisanalyticsv2.ApplicationReferenceDataSourceRecordFormat;
    }

    export interface ApplicationReferenceDataSourceS3ReferenceDataSource {
        bucketArn: string;
        fileKey: string;
    }

    /**
     * Describes the restore behavior of a restarting application.
     */
    export interface ApplicationRestoreConfiguration {
        /**
         * Specifies how the application should be restored.
         */
        applicationRestoreType: enums.kinesisanalyticsv2.ApplicationRestoreConfigurationApplicationRestoreType;
        /**
         * The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
         */
        snapshotName?: string;
    }

    /**
     * Identifies the run configuration (start parameters) of a Kinesis Data Analytics application. This section is evaluated only on stack updates for applications in running RUNNING state and has no effect during manual application start.
     */
    export interface ApplicationRunConfiguration {
        /**
         * Describes the restore behavior of a restarting application.
         */
        applicationRestoreConfiguration?: outputs.kinesisanalyticsv2.ApplicationRestoreConfiguration;
        /**
         * Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
         */
        flinkRunConfiguration?: outputs.kinesisanalyticsv2.ApplicationFlinkRunConfiguration;
    }

    /**
     * The base location of the Amazon Data Analytics application.
     */
    export interface ApplicationS3ContentBaseLocation {
        /**
         * The base path for the S3 bucket.
         */
        basePath?: string;
        /**
         * The Amazon Resource Name (ARN) of the S3 bucket.
         */
        bucketArn: string;
    }

    /**
     * The location of an application or a custom artifact.
     */
    export interface ApplicationS3ContentLocation {
        /**
         * The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
         */
        bucketArn: string;
        /**
         * The file key for the object containing the application code.
         */
        fileKey: string;
        /**
         * The version of the object containing the application code.
         */
        objectVersion?: string;
    }

    /**
     * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationSnapshotConfiguration {
        /**
         * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
         */
        snapshotsEnabled: boolean;
    }

    /**
     * Describes the inputs, outputs, and reference data sources for a SQL-based Kinesis Data Analytics application.
     */
    export interface ApplicationSqlApplicationConfiguration {
        /**
         * The array of Input objects describing the input streams used by the application.
         */
        inputs?: outputs.kinesisanalyticsv2.ApplicationInput[];
    }

    /**
     * A key-value pair that identifies an application.
     */
    export interface ApplicationTag {
        /**
         * The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that's 0 to 256 characters in length.
         */
        value: string;
    }

    /**
     * Describes the parameters of a VPC used by the application.
     */
    export interface ApplicationVpcConfiguration {
        /**
         * The array of SecurityGroup IDs used by the VPC configuration.
         */
        securityGroupIds: string[];
        /**
         * The array of Subnet IDs used by the VPC configuration.
         */
        subnetIds: string[];
    }

    /**
     * The configuration of a Kinesis Data Analytics Studio notebook.
     */
    export interface ApplicationZeppelinApplicationConfiguration {
        /**
         * The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
         */
        catalogConfiguration?: outputs.kinesisanalyticsv2.ApplicationCatalogConfiguration;
        /**
         * A list of CustomArtifactConfiguration objects.
         */
        customArtifactsConfiguration?: outputs.kinesisanalyticsv2.ApplicationCustomArtifactConfiguration[];
        /**
         * The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
         */
        deployAsApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationDeployAsApplicationConfiguration;
        /**
         * The monitoring configuration of a Kinesis Data Analytics Studio notebook.
         */
        monitoringConfiguration?: outputs.kinesisanalyticsv2.ApplicationZeppelinMonitoringConfiguration;
    }

    /**
     * Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see Monitoring.
     */
    export interface ApplicationZeppelinMonitoringConfiguration {
        /**
         * The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
         */
        logLevel?: enums.kinesisanalyticsv2.ApplicationZeppelinMonitoringConfigurationLogLevel;
    }

}

export namespace kinesisfirehose {
    export interface DeliveryStreamAmazonOpenSearchServerlessBufferingHints {
        intervalInSeconds?: number;
        sizeInMbs?: number;
    }

    export interface DeliveryStreamAmazonOpenSearchServerlessDestinationConfiguration {
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        collectionEndpoint?: string;
        indexName: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessRetryOptions;
        roleArn: string;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamAmazonOpenSearchServerlessRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamAmazonopensearchserviceBufferingHints {
        intervalInSeconds?: number;
        sizeInMbs?: number;
    }

    export interface DeliveryStreamAmazonopensearchserviceDestinationConfiguration {
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamAmazonopensearchserviceBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        clusterEndpoint?: string;
        documentIdOptions?: outputs.kinesisfirehose.DeliveryStreamDocumentIdOptions;
        domainArn?: string;
        indexName: string;
        indexRotationPeriod?: enums.kinesisfirehose.DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamAmazonopensearchserviceRetryOptions;
        roleArn: string;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        typeName?: string;
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamAmazonopensearchserviceRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamAuthenticationConfiguration {
        connectivity: enums.kinesisfirehose.DeliveryStreamAuthenticationConfigurationConnectivity;
        roleArn: string;
    }

    export interface DeliveryStreamBufferingHints {
        intervalInSeconds?: number;
        sizeInMbs?: number;
    }

    export interface DeliveryStreamCloudWatchLoggingOptions {
        enabled?: boolean;
        logGroupName?: string;
        logStreamName?: string;
    }

    export interface DeliveryStreamCopyCommand {
        copyOptions?: string;
        dataTableColumns?: string;
        dataTableName: string;
    }

    export interface DeliveryStreamDataFormatConversionConfiguration {
        enabled?: boolean;
        inputFormatConfiguration?: outputs.kinesisfirehose.DeliveryStreamInputFormatConfiguration;
        outputFormatConfiguration?: outputs.kinesisfirehose.DeliveryStreamOutputFormatConfiguration;
        schemaConfiguration?: outputs.kinesisfirehose.DeliveryStreamSchemaConfiguration;
    }

    export interface DeliveryStreamDeserializer {
        hiveJsonSerDe?: outputs.kinesisfirehose.DeliveryStreamHiveJsonSerDe;
        openXJsonSerDe?: outputs.kinesisfirehose.DeliveryStreamOpenXJsonSerDe;
    }

    export interface DeliveryStreamDocumentIdOptions {
        defaultDocumentIdFormat: enums.kinesisfirehose.DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat;
    }

    export interface DeliveryStreamDynamicPartitioningConfiguration {
        enabled?: boolean;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRetryOptions;
    }

    export interface DeliveryStreamElasticsearchBufferingHints {
        intervalInSeconds?: number;
        sizeInMbs?: number;
    }

    export interface DeliveryStreamElasticsearchDestinationConfiguration {
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamElasticsearchBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        clusterEndpoint?: string;
        documentIdOptions?: outputs.kinesisfirehose.DeliveryStreamDocumentIdOptions;
        domainArn?: string;
        indexName: string;
        indexRotationPeriod?: enums.kinesisfirehose.DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamElasticsearchRetryOptions;
        roleArn: string;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        typeName?: string;
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamElasticsearchRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamEncryptionConfiguration {
        kmsEncryptionConfig?: outputs.kinesisfirehose.DeliveryStreamKmsEncryptionConfig;
        noEncryptionConfig?: enums.kinesisfirehose.DeliveryStreamEncryptionConfigurationNoEncryptionConfig;
    }

    export interface DeliveryStreamEncryptionConfigurationInput {
        keyArn?: string;
        keyType: enums.kinesisfirehose.DeliveryStreamEncryptionConfigurationInputKeyType;
    }

    export interface DeliveryStreamExtendedS3DestinationConfiguration {
        bucketArn: string;
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        compressionFormat?: enums.kinesisfirehose.DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat;
        dataFormatConversionConfiguration?: outputs.kinesisfirehose.DeliveryStreamDataFormatConversionConfiguration;
        dynamicPartitioningConfiguration?: outputs.kinesisfirehose.DeliveryStreamDynamicPartitioningConfiguration;
        encryptionConfiguration?: outputs.kinesisfirehose.DeliveryStreamEncryptionConfiguration;
        errorOutputPrefix?: string;
        prefix?: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        roleArn: string;
        s3BackupConfiguration?: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode;
    }

    export interface DeliveryStreamHiveJsonSerDe {
        timestampFormats?: string[];
    }

    export interface DeliveryStreamHttpEndpointCommonAttribute {
        attributeName: string;
        attributeValue: string;
    }

    export interface DeliveryStreamHttpEndpointConfiguration {
        accessKey?: string;
        name?: string;
        url: string;
    }

    export interface DeliveryStreamHttpEndpointDestinationConfiguration {
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        endpointConfiguration: outputs.kinesisfirehose.DeliveryStreamHttpEndpointConfiguration;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        requestConfiguration?: outputs.kinesisfirehose.DeliveryStreamHttpEndpointRequestConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRetryOptions;
        roleArn?: string;
        s3BackupMode?: string;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
    }

    export interface DeliveryStreamHttpEndpointRequestConfiguration {
        commonAttributes?: outputs.kinesisfirehose.DeliveryStreamHttpEndpointCommonAttribute[];
        contentEncoding?: enums.kinesisfirehose.DeliveryStreamHttpEndpointRequestConfigurationContentEncoding;
    }

    export interface DeliveryStreamInputFormatConfiguration {
        deserializer?: outputs.kinesisfirehose.DeliveryStreamDeserializer;
    }

    export interface DeliveryStreamKinesisStreamSourceConfiguration {
        kinesisStreamArn: string;
        roleArn: string;
    }

    export interface DeliveryStreamKmsEncryptionConfig {
        awskmsKeyArn: string;
    }

    export interface DeliveryStreamMskSourceConfiguration {
        authenticationConfiguration: outputs.kinesisfirehose.DeliveryStreamAuthenticationConfiguration;
        mskClusterArn: string;
        topicName: string;
    }

    export interface DeliveryStreamOpenXJsonSerDe {
        caseInsensitive?: boolean;
        columnToJsonKeyMappings?: any;
        convertDotsInJsonKeysToUnderscores?: boolean;
    }

    export interface DeliveryStreamOrcSerDe {
        blockSizeBytes?: number;
        bloomFilterColumns?: string[];
        bloomFilterFalsePositiveProbability?: number;
        compression?: string;
        dictionaryKeyThreshold?: number;
        enablePadding?: boolean;
        formatVersion?: string;
        paddingTolerance?: number;
        rowIndexStride?: number;
        stripeSizeBytes?: number;
    }

    export interface DeliveryStreamOutputFormatConfiguration {
        serializer?: outputs.kinesisfirehose.DeliveryStreamSerializer;
    }

    export interface DeliveryStreamParquetSerDe {
        blockSizeBytes?: number;
        compression?: string;
        enableDictionaryCompression?: boolean;
        maxPaddingBytes?: number;
        pageSizeBytes?: number;
        writerVersion?: string;
    }

    export interface DeliveryStreamProcessingConfiguration {
        enabled?: boolean;
        processors?: outputs.kinesisfirehose.DeliveryStreamProcessor[];
    }

    export interface DeliveryStreamProcessor {
        parameters?: outputs.kinesisfirehose.DeliveryStreamProcessorParameter[];
        type: enums.kinesisfirehose.DeliveryStreamProcessorType;
    }

    export interface DeliveryStreamProcessorParameter {
        parameterName: string;
        parameterValue: string;
    }

    export interface DeliveryStreamRedshiftDestinationConfiguration {
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        clusterJdbcurl: string;
        copyCommand: outputs.kinesisfirehose.DeliveryStreamCopyCommand;
        password: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRedshiftRetryOptions;
        roleArn: string;
        s3BackupConfiguration?: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamRedshiftDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        username: string;
    }

    export interface DeliveryStreamRedshiftRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamS3DestinationConfiguration {
        bucketArn: string;
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        compressionFormat?: enums.kinesisfirehose.DeliveryStreamS3DestinationConfigurationCompressionFormat;
        encryptionConfiguration?: outputs.kinesisfirehose.DeliveryStreamEncryptionConfiguration;
        errorOutputPrefix?: string;
        prefix?: string;
        roleArn: string;
    }

    export interface DeliveryStreamSchemaConfiguration {
        catalogId?: string;
        databaseName?: string;
        region?: string;
        roleArn?: string;
        tableName?: string;
        versionId?: string;
    }

    export interface DeliveryStreamSerializer {
        orcSerDe?: outputs.kinesisfirehose.DeliveryStreamOrcSerDe;
        parquetSerDe?: outputs.kinesisfirehose.DeliveryStreamParquetSerDe;
    }

    export interface DeliveryStreamSnowflakeDestinationConfiguration {
        accountUrl: string;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        contentColumnName?: string;
        dataLoadingOption?: enums.kinesisfirehose.DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption;
        database: string;
        keyPassphrase?: string;
        metaDataColumnName?: string;
        privateKey: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamSnowflakeRetryOptions;
        roleArn: string;
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        schema: string;
        snowflakeRoleConfiguration?: outputs.kinesisfirehose.DeliveryStreamSnowflakeRoleConfiguration;
        snowflakeVpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamSnowflakeVpcConfiguration;
        table: string;
        user: string;
    }

    export interface DeliveryStreamSnowflakeRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamSnowflakeRoleConfiguration {
        enabled?: boolean;
        snowflakeRole?: string;
    }

    export interface DeliveryStreamSnowflakeVpcConfiguration {
        privateLinkVpceId: string;
    }

    export interface DeliveryStreamSplunkBufferingHints {
        intervalInSeconds?: number;
        sizeInMbs?: number;
    }

    export interface DeliveryStreamSplunkDestinationConfiguration {
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamSplunkBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        hecAcknowledgmentTimeoutInSeconds?: number;
        hecEndpoint: string;
        hecEndpointType: enums.kinesisfirehose.DeliveryStreamSplunkDestinationConfigurationHecEndpointType;
        hecToken: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamSplunkRetryOptions;
        s3BackupMode?: string;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
    }

    export interface DeliveryStreamSplunkRetryOptions {
        durationInSeconds?: number;
    }

    export interface DeliveryStreamTag {
        key: string;
        value?: string;
    }

    export interface DeliveryStreamVpcConfiguration {
        roleArn: string;
        securityGroupIds: string[];
        subnetIds: string[];
    }

}

export namespace kinesisvideo {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface SignalingChannelTag {
        /**
         * The key name of the tag. Specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. Specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:.  The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associated with the Kinesis Video Stream.
     */
    export interface StreamTag {
        /**
         * The key name of the tag. Specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. Specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. The following characters can be used: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace kms {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface KeyTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ReplicaKeyTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace lakeformation {
    /**
     * An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
     */
    export interface DataCellsFilterColumnWildcard {
        /**
         * A list of column names to be excluded from the Data Cells Filter.
         */
        excludedColumnNames?: string[];
    }

    /**
     * An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
     */
    export interface DataCellsFilterRowFilter {
        /**
         * An empty object representing a row wildcard.
         */
        allRowsWildcard?: any;
        /**
         * A PartiQL predicate.
         */
        filterExpression?: string;
    }

    export interface DataLakeSettingsAdmins {
    }

    export interface DataLakeSettingsCreateDatabaseDefaultPermissions {
    }

    export interface DataLakeSettingsCreateTableDefaultPermissions {
    }

    export interface DataLakeSettingsExternalDataFilteringAllowList {
    }

    export interface PermissionsColumnWildcard {
        excludedColumnNames?: string[];
    }

    export interface PermissionsDataLakePrincipal {
        dataLakePrincipalIdentifier?: string;
    }

    export interface PermissionsDataLocationResource {
        catalogId?: string;
        s3Resource?: string;
    }

    export interface PermissionsDatabaseResource {
        catalogId?: string;
        name?: string;
    }

    export interface PermissionsResource {
        dataLocationResource?: outputs.lakeformation.PermissionsDataLocationResource;
        databaseResource?: outputs.lakeformation.PermissionsDatabaseResource;
        tableResource?: outputs.lakeformation.PermissionsTableResource;
        tableWithColumnsResource?: outputs.lakeformation.PermissionsTableWithColumnsResource;
    }

    export interface PermissionsTableResource {
        catalogId?: string;
        databaseName?: string;
        name?: string;
        tableWildcard?: outputs.lakeformation.PermissionsTableWildcard;
    }

    export interface PermissionsTableWildcard {
    }

    export interface PermissionsTableWithColumnsResource {
        catalogId?: string;
        columnNames?: string[];
        columnWildcard?: outputs.lakeformation.PermissionsColumnWildcard;
        databaseName?: string;
        name?: string;
    }

    export interface PrincipalPermissionsCatalogResource {
    }

    export interface PrincipalPermissionsColumnWildcard {
        excludedColumnNames?: string[];
    }

    export interface PrincipalPermissionsDataCellsFilterResource {
        databaseName: string;
        name: string;
        tableCatalogId: string;
        tableName: string;
    }

    export interface PrincipalPermissionsDataLakePrincipal {
        dataLakePrincipalIdentifier?: string;
    }

    export interface PrincipalPermissionsDataLocationResource {
        catalogId: string;
        resourceArn: string;
    }

    export interface PrincipalPermissionsDatabaseResource {
        catalogId: string;
        name: string;
    }

    export interface PrincipalPermissionsLfTag {
        tagKey?: string;
        tagValues?: string[];
    }

    export interface PrincipalPermissionsLfTagKeyResource {
        catalogId: string;
        tagKey: string;
        tagValues: string[];
    }

    export interface PrincipalPermissionsLfTagPolicyResource {
        catalogId: string;
        expression: outputs.lakeformation.PrincipalPermissionsLfTag[];
        resourceType: enums.lakeformation.PrincipalPermissionsResourceType;
    }

    export interface PrincipalPermissionsResource {
        catalog?: outputs.lakeformation.PrincipalPermissionsCatalogResource;
        dataCellsFilter?: outputs.lakeformation.PrincipalPermissionsDataCellsFilterResource;
        dataLocation?: outputs.lakeformation.PrincipalPermissionsDataLocationResource;
        database?: outputs.lakeformation.PrincipalPermissionsDatabaseResource;
        lfTag?: outputs.lakeformation.PrincipalPermissionsLfTagKeyResource;
        lfTagPolicy?: outputs.lakeformation.PrincipalPermissionsLfTagPolicyResource;
        table?: outputs.lakeformation.PrincipalPermissionsTableResource;
        tableWithColumns?: outputs.lakeformation.PrincipalPermissionsTableWithColumnsResource;
    }

    export interface PrincipalPermissionsTableResource {
        catalogId: string;
        databaseName: string;
        name?: string;
        tableWildcard?: outputs.lakeformation.PrincipalPermissionsTableWildcard;
    }

    export interface PrincipalPermissionsTableWildcard {
    }

    export interface PrincipalPermissionsTableWithColumnsResource {
        catalogId: string;
        columnNames?: string[];
        columnWildcard?: outputs.lakeformation.PrincipalPermissionsColumnWildcard;
        databaseName: string;
        name: string;
    }

    export interface TagAssociationCatalogResource {
    }

    export interface TagAssociationDatabaseResource {
        catalogId: string;
        name: string;
    }

    export interface TagAssociationLfTagPair {
        catalogId: string;
        tagKey: string;
        tagValues: string[];
    }

    export interface TagAssociationResource {
        catalog?: outputs.lakeformation.TagAssociationCatalogResource;
        database?: outputs.lakeformation.TagAssociationDatabaseResource;
        table?: outputs.lakeformation.TagAssociationTableResource;
        tableWithColumns?: outputs.lakeformation.TagAssociationTableWithColumnsResource;
    }

    export interface TagAssociationTableResource {
        catalogId: string;
        databaseName: string;
        name?: string;
        tableWildcard?: outputs.lakeformation.TagAssociationTableWildcard;
    }

    export interface TagAssociationTableWildcard {
    }

    export interface TagAssociationTableWithColumnsResource {
        catalogId: string;
        columnNames: string[];
        databaseName: string;
        name: string;
    }

}

export namespace lambda {
    export interface AliasProvisionedConcurrencyConfiguration {
        provisionedConcurrentExecutions: number;
    }

    export interface AliasRoutingConfiguration {
        additionalVersionWeights: outputs.lambda.AliasVersionWeight[];
    }

    export interface AliasVersionWeight {
        functionVersion: string;
        functionWeight: number;
    }

    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
     */
    export interface CodeSigningConfigAllowedPublishers {
        /**
         * List of Signing profile version Arns
         */
        signingProfileVersionArns: string[];
    }

    /**
     * Policies to control how to act if a signature is invalid
     */
    export interface CodeSigningConfigCodeSigningPolicies {
        /**
         * Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
         */
        untrustedArtifactOnDeployment: enums.lambda.CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment;
    }

    /**
     * A destination for events after they have been sent to a function for processing.
     */
    export interface EventInvokeConfigDestinationConfig {
        onFailure?: outputs.lambda.EventInvokeConfigOnFailure;
        onSuccess?: outputs.lambda.EventInvokeConfigOnSuccess;
    }

    /**
     * The destination configuration for failed invocations.
     */
    export interface EventInvokeConfigOnFailure {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destination: string;
    }

    /**
     * The destination configuration for successful invocations.
     */
    export interface EventInvokeConfigOnSuccess {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destination: string;
    }

    /**
     * Specific configuration settings for an MSK event source.
     */
    export interface EventSourceMappingAmazonManagedKafkaEventSourceConfig {
        /**
         * The identifier for the Kafka Consumer Group to join.
         */
        consumerGroupId?: string;
    }

    /**
     * (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
     */
    export interface EventSourceMappingDestinationConfig {
        /**
         * The destination configuration for failed invocations.
         */
        onFailure?: outputs.lambda.EventSourceMappingOnFailure;
    }

    /**
     * Document db event source config.
     */
    export interface EventSourceMappingDocumentDbEventSourceConfig {
        /**
         * The collection name to connect to.
         */
        collectionName?: string;
        /**
         * The database name to connect to.
         */
        databaseName?: string;
        /**
         * Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
         */
        fullDocument?: enums.lambda.EventSourceMappingDocumentDbEventSourceConfigFullDocument;
    }

    /**
     * The endpoints used by AWS Lambda to access a self-managed event source.
     */
    export interface EventSourceMappingEndpoints {
        /**
         * A list of Kafka server endpoints.
         */
        kafkaBootstrapServers?: string[];
    }

    /**
     * The filter object that defines parameters for ESM filtering.
     */
    export interface EventSourceMappingFilter {
        /**
         * The filter pattern that defines which events should be passed for invocations.
         */
        pattern?: string;
    }

    /**
     * The filter criteria to control event filtering.
     */
    export interface EventSourceMappingFilterCriteria {
        /**
         * List of filters of this FilterCriteria
         */
        filters?: outputs.lambda.EventSourceMappingFilter[];
    }

    /**
     * A destination for events that failed processing.
     */
    export interface EventSourceMappingOnFailure {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destination?: string;
    }

    /**
     * The scaling configuration for the event source.
     */
    export interface EventSourceMappingScalingConfig {
        /**
         * The maximum number of concurrent functions that the event source can invoke.
         */
        maximumConcurrency?: number;
    }

    /**
     * The configuration used by AWS Lambda to access a self-managed event source.
     */
    export interface EventSourceMappingSelfManagedEventSource {
        /**
         * The endpoints for a self-managed event source.
         */
        endpoints?: outputs.lambda.EventSourceMappingEndpoints;
    }

    /**
     * Specific configuration settings for a Self-Managed Apache Kafka event source.
     */
    export interface EventSourceMappingSelfManagedKafkaEventSourceConfig {
        /**
         * The identifier for the Kafka Consumer Group to join.
         */
        consumerGroupId?: string;
    }

    /**
     * The configuration used by AWS Lambda to access event source
     */
    export interface EventSourceMappingSourceAccessConfiguration {
        /**
         * The type of source access configuration.
         */
        type?: enums.lambda.EventSourceMappingSourceAccessConfigurationType;
        /**
         * The URI for the source access configuration resource.
         */
        uri?: string;
    }

    export interface FunctionCode {
        /**
         * ImageUri.
         */
        imageUri?: string;
        /**
         * An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
         */
        s3Bucket?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        s3Key?: string;
        /**
         * For versioned objects, the version of the deployment package object to use.
         */
        s3ObjectVersion?: string;
        /**
         * The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
         */
        zipFile?: string;
    }

    /**
     * The dead-letter queue for failed asynchronous invocations.
     */
    export interface FunctionDeadLetterConfig {
        /**
         * The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
         */
        targetArn?: string;
    }

    /**
     * A function's environment variable settings.
     */
    export interface FunctionEnvironment {
        /**
         * Environment variable key-value pairs.
         */
        variables?: {[key: string]: string};
    }

    /**
     * A function's ephemeral storage settings.
     */
    export interface FunctionEphemeralStorage {
        /**
         * The amount of ephemeral storage that your function has access to.
         */
        size: number;
    }

    export interface FunctionFileSystemConfig {
        /**
         * The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
         */
        arn: string;
        /**
         * The path where the function can access the file system, starting with /mnt/.
         */
        localMountPath: string;
    }

    export interface FunctionImageConfig {
        /**
         * Command.
         */
        command?: string[];
        /**
         * EntryPoint.
         */
        entryPoint?: string[];
        /**
         * WorkingDirectory.
         */
        workingDirectory?: string;
    }

    /**
     * The function's logging configuration.
     */
    export interface FunctionLoggingConfig {
        /**
         * Application log granularity level, can only be used when LogFormat is set to JSON
         */
        applicationLogLevel?: enums.lambda.FunctionLoggingConfigApplicationLogLevel;
        /**
         * Log delivery format for the lambda function
         */
        logFormat?: enums.lambda.FunctionLoggingConfigLogFormat;
        /**
         * The log group name.
         */
        logGroup?: string;
        /**
         * System log granularity level, can only be used when LogFormat is set to JSON
         */
        systemLogLevel?: enums.lambda.FunctionLoggingConfigSystemLogLevel;
    }

    export interface FunctionRuntimeManagementConfig {
        /**
         * Unique identifier for a runtime version arn
         */
        runtimeVersionArn?: string;
        /**
         * Trigger for runtime update
         */
        updateRuntimeOn: enums.lambda.FunctionRuntimeManagementConfigUpdateRuntimeOn;
    }

    /**
     * The function's SnapStart setting. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
     */
    export interface FunctionSnapStart {
        /**
         * Applying SnapStart setting on function resource type.
         */
        applyOn: enums.lambda.FunctionSnapStartApplyOn;
    }

    /**
     * The function's SnapStart Response. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
     */
    export interface FunctionSnapStartResponse {
        /**
         * Applying SnapStart setting on function resource type.
         */
        applyOn?: enums.lambda.FunctionSnapStartResponseApplyOn;
        /**
         * Indicates whether SnapStart is activated for the specified function version.
         */
        optimizationStatus?: enums.lambda.FunctionSnapStartResponseOptimizationStatus;
    }

    export interface FunctionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
     */
    export interface FunctionTracingConfig {
        /**
         * The tracing mode.
         */
        mode?: enums.lambda.FunctionTracingConfigMode;
    }

    /**
     * The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
     */
    export interface FunctionVpcConfig {
        /**
         * A boolean indicating whether IPv6 protocols will be allowed for dual stack subnets
         */
        ipv6AllowedForDualStack?: boolean;
        /**
         * A list of VPC security groups IDs.
         */
        securityGroupIds?: string[];
        /**
         * A list of VPC subnet IDs.
         */
        subnetIds?: string[];
    }

    export interface LayerVersionContent {
        /**
         * The Amazon S3 bucket of the layer archive.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key of the layer archive.
         */
        s3Key: string;
        /**
         * For versioned objects, the version of the layer archive object to use.
         */
        s3ObjectVersion?: string;
    }

    export interface UrlCors {
        /**
         * Specifies whether credentials are included in the CORS request.
         */
        allowCredentials?: boolean;
        /**
         * Represents a collection of allowed headers.
         */
        allowHeaders?: string[];
        /**
         * Represents a collection of allowed HTTP methods.
         */
        allowMethods?: enums.lambda.UrlAllowMethodsItem[];
        /**
         * Represents a collection of allowed origins.
         */
        allowOrigins?: string[];
        /**
         * Represents a collection of exposed headers.
         */
        exposeHeaders?: string[];
        maxAge?: number;
    }

    /**
     * A provisioned concurrency configuration for a function's version.
     */
    export interface VersionProvisionedConcurrencyConfiguration {
        /**
         * The amount of provisioned concurrency to allocate for the version.
         */
        provisionedConcurrentExecutions: number;
    }

    /**
     * Runtime Management Config of a function.
     */
    export interface VersionRuntimePolicy {
        /**
         * The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
         */
        runtimeVersionArn?: string;
        /**
         * The runtime update mode.
         */
        updateRuntimeOn: string;
    }

}

export namespace lex {
    /**
     * Provides settings that enable advanced recognition settings for slot values.
     */
    export interface BotAdvancedRecognitionSetting {
        audioRecognitionStrategy?: enums.lex.BotAudioRecognitionStrategy;
    }

    /**
     * The location of audio log files collected when conversation logging is enabled for a bot.
     */
    export interface BotAliasAudioLogDestination {
        s3Bucket: outputs.lex.BotAliasS3BucketLogDestination;
    }

    /**
     * Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
     */
    export interface BotAliasAudioLogSetting {
        destination: outputs.lex.BotAliasAudioLogDestination;
        enabled: boolean;
    }

    export interface BotAliasCloudWatchLogGroupLogDestination {
        /**
         * A string used to identify the groupArn for the Cloudwatch Log Group
         */
        cloudWatchLogGroupArn: string;
        /**
         * A string containing the value for the Log Prefix
         */
        logPrefix: string;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasCodeHookSpecification {
        lambdaCodeHook: outputs.lex.BotAliasLambdaCodeHook;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasConversationLogSettings {
        audioLogSettings?: outputs.lex.BotAliasAudioLogSetting[];
        textLogSettings?: outputs.lex.BotAliasTextLogSetting[];
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasLambdaCodeHook {
        /**
         * The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
         */
        codeHookInterfaceVersion: string;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function.
         */
        lambdaArn: string;
    }

    /**
     * You can use this parameter to specify a specific Lambda function to run different functions in different locales.
     */
    export interface BotAliasLocaleSettings {
        codeHookSpecification?: outputs.lex.BotAliasCodeHookSpecification;
        /**
         * Whether the Lambda code hook is enabled
         */
        enabled: boolean;
    }

    /**
     * A locale setting in alias
     */
    export interface BotAliasLocaleSettingsItem {
        botAliasLocaleSetting: outputs.lex.BotAliasLocaleSettings;
        /**
         * A string used to identify the locale
         */
        localeId: string;
    }

    /**
     * Specifies an Amazon S3 bucket for logging audio conversations
     */
    export interface BotAliasS3BucketLogDestination {
        /**
         * The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
         */
        kmsKeyArn?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        logPrefix: string;
        /**
         * The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
         */
        s3BucketArn: string;
    }

    /**
     * A label for tagging Lex resources
     */
    export interface BotAliasTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    /**
     * Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
     */
    export interface BotAliasTextLogDestination {
        cloudWatch: outputs.lex.BotAliasCloudWatchLogGroupLogDestination;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasTextLogSetting {
        destination: outputs.lex.BotAliasTextLogDestination;
        enabled: boolean;
    }

    /**
     * Specifies the allowed input types.
     */
    export interface BotAllowedInputTypes {
        /**
         * Indicates whether audio input is allowed.
         */
        allowAudioInput: boolean;
        /**
         * Indicates whether DTMF input is allowed.
         */
        allowDtmfInput: boolean;
    }

    /**
     * Specifies the audio and DTMF input specification.
     */
    export interface BotAudioAndDtmfInputSpecification {
        audioSpecification?: outputs.lex.BotAudioSpecification;
        dtmfSpecification?: outputs.lex.BotDtmfSpecification;
        /**
         * Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
         */
        startTimeoutMs: number;
    }

    /**
     * The location of audio log files collected when conversation logging is enabled for a bot.
     */
    export interface BotAudioLogDestination {
        s3Bucket: outputs.lex.BotS3BucketLogDestination;
    }

    /**
     * Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
     */
    export interface BotAudioLogSetting {
        destination: outputs.lex.BotAudioLogDestination;
        enabled: boolean;
    }

    /**
     * Specifies the audio input specifications.
     */
    export interface BotAudioSpecification {
        /**
         * Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
         */
        endTimeoutMs: number;
        /**
         * Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
         */
        maxLengthMs: number;
    }

    /**
     * A button to use on a response card used to gather slot values from a user.
     */
    export interface BotButton {
        /**
         * The text that appears on the button.
         */
        text: string;
        /**
         * The value returned to Amazon Lex when the user chooses this button.
         */
        value: string;
    }

    export interface BotCloudWatchLogGroupLogDestination {
        /**
         * A string used to identify the groupArn for the Cloudwatch Log Group
         */
        cloudWatchLogGroupArn: string;
        /**
         * A string containing the value for the Log Prefix
         */
        logPrefix: string;
    }

    /**
     * Provides an expression that evaluates to true or false.
     */
    export interface BotCondition {
        /**
         * The expression string that is evaluated.
         */
        expressionString: string;
    }

    /**
     * A set of actions that Amazon Lex should run if the condition is matched.
     */
    export interface BotConditionalBranch {
        /**
         * Contains the expression to evaluate. If the condition is true, the branch's actions are taken.
         */
        condition: outputs.lex.BotCondition;
        /**
         * The name of the branch.
         */
        name: string;
        /**
         * The next step in the conversation.
         */
        nextStep: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        response?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
     */
    export interface BotConditionalSpecification {
        /**
         * A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
         */
        conditionalBranches: outputs.lex.BotConditionalBranch[];
        /**
         * The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
         */
        defaultBranch: outputs.lex.BotDefaultConditionalBranch;
        /**
         * Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.
         */
        isActive: boolean;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotConversationLogSettings {
        audioLogSettings?: outputs.lex.BotAudioLogSetting[];
        textLogSettings?: outputs.lex.BotTextLogSetting[];
    }

    /**
     * A message in a custom format defined by the client application.
     */
    export interface BotCustomPayload {
        /**
         * The string that is sent to your application.
         */
        value: string;
    }

    /**
     * A custom vocabulary is a list of specific phrases that you want Amazon Lex V2 to recognize in the audio input.
     */
    export interface BotCustomVocabulary {
        customVocabularyItems: outputs.lex.BotCustomVocabularyItem[];
    }

    /**
     * A custom vocabulary item that contains the phrase to recognize and a weight to give the boost.
     */
    export interface BotCustomVocabularyItem {
        /**
         * Defines how you want your phrase to look in your transcription output.
         */
        displayAs?: string;
        /**
         * Phrase that should be recognized.
         */
        phrase: string;
        /**
         * The degree to which the phrase recognition is boosted. The weight 0 means that no boosting will be applied and the entry will only be used for performing replacements using the displayAs field.
         */
        weight?: number;
    }

    /**
     * A set of actions that Amazon Lex should run if none of the other conditions are met.
     */
    export interface BotDefaultConditionalBranch {
        /**
         * The next step in the conversation.
         */
        nextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        response?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Defines the action that the bot executes at runtime when the conversation reaches this step.
     */
    export interface BotDialogAction {
        /**
         * If the dialog action is ElicitSlot, defines the slot to elicit from the user.
         */
        slotToElicit?: string;
        /**
         * When true the next message for the intent is not used.
         */
        suppressNextMessage?: boolean;
        /**
         * The action that the bot should execute.
         */
        type: enums.lex.BotDialogActionType;
    }

    /**
     * Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
     */
    export interface BotDialogCodeHookInvocationSetting {
        /**
         * Indicates whether a Lambda function should be invoked for the dialog.
         */
        enableCodeHookInvocation: boolean;
        /**
         * A label that indicates the dialog step from which the dialog code hook is happening.
         */
        invocationLabel?: string;
        /**
         * Determines whether a dialog code hook is used when the intent is activated.
         */
        isActive: boolean;
        /**
         * Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
         */
        postCodeHookSpecification: outputs.lex.BotPostDialogCodeHookInvocationSpecification;
    }

    /**
     * Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
     */
    export interface BotDialogCodeHookSetting {
        enabled: boolean;
    }

    /**
     * The current state of the conversation with the user.
     */
    export interface BotDialogState {
        /**
         * Defines the action that the bot executes at runtime when the conversation reaches this step.
         */
        dialogAction?: outputs.lex.BotDialogAction;
        /**
         * Override settings to configure the intent state.
         */
        intent?: outputs.lex.BotIntentOverride;
        /**
         * List of session attributes to be applied when the conversation reaches this step.
         */
        sessionAttributes?: outputs.lex.BotSessionAttribute[];
    }

    /**
     * Specifies the settings on DTMF input.
     */
    export interface BotDtmfSpecification {
        /**
         * The DTMF character that clears the accumulated DTMF digits and immediately ends the input.
         */
        deletionCharacter: string;
        /**
         * The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
         */
        endCharacter: string;
        /**
         * How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
         */
        endTimeoutMs: number;
        /**
         * The maximum number of DTMF digits allowed in an utterance.
         */
        maxLength: number;
    }

    /**
     * Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
     */
    export interface BotElicitationCodeHookInvocationSetting {
        /**
         * Indicates whether a Lambda function should be invoked for the dialog.
         */
        enableCodeHookInvocation: boolean;
        /**
         * A label that indicates the dialog step from which the dialog code hook is happening.
         */
        invocationLabel?: string;
    }

    /**
     * Provides information about the external source of the slot type's definition.
     */
    export interface BotExternalSourceSetting {
        grammarSlotTypeSetting?: outputs.lex.BotGrammarSlotTypeSetting;
    }

    /**
     * Settings that determine if a Lambda function should be invoked to fulfill a specific intent.
     */
    export interface BotFulfillmentCodeHookSetting {
        enabled: boolean;
        fulfillmentUpdatesSpecification?: outputs.lex.BotFulfillmentUpdatesSpecification;
        /**
         * Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
         */
        isActive?: boolean;
        postFulfillmentStatusSpecification?: outputs.lex.BotPostFulfillmentStatusSpecification;
    }

    /**
     * Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
     */
    export interface BotFulfillmentStartResponseSpecification {
        /**
         * Determines whether the user can interrupt the start message while it is playing.
         */
        allowInterrupt?: boolean;
        /**
         * The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
         */
        delayInSeconds: number;
        messageGroups: outputs.lex.BotMessageGroup[];
    }

    /**
     * Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
     */
    export interface BotFulfillmentUpdateResponseSpecification {
        /**
         * Determines whether the user can interrupt an update message while it is playing.
         */
        allowInterrupt?: boolean;
        /**
         * The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
         */
        frequencyInSeconds: number;
        messageGroups: outputs.lex.BotMessageGroup[];
    }

    /**
     * Provides information for updating the user on the progress of fulfilling an intent.
     */
    export interface BotFulfillmentUpdatesSpecification {
        /**
         * Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.
         */
        active: boolean;
        startResponse?: outputs.lex.BotFulfillmentStartResponseSpecification;
        /**
         * The length of time that the fulfillment Lambda function should run before it times out.
         */
        timeoutInSeconds?: number;
        updateResponse?: outputs.lex.BotFulfillmentUpdateResponseSpecification;
    }

    /**
     * Settings required for a slot type based on a grammar that you provide.
     */
    export interface BotGrammarSlotTypeSetting {
        source?: outputs.lex.BotGrammarSlotTypeSource;
    }

    /**
     * Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
     */
    export interface BotGrammarSlotTypeSource {
        /**
         * The Amazon KMS key required to decrypt the contents of the grammar, if any.
         */
        kmsKeyArn?: string;
        /**
         * The name of the S3 bucket that contains the grammar source.
         */
        s3BucketName: string;
        /**
         * The path to the grammar in the S3 bucket.
         */
        s3ObjectKey: string;
    }

    /**
     * A message that defines a response card that the client application can show to the user.
     */
    export interface BotImageResponseCard {
        /**
         * A list of buttons that should be displayed on the response card.
         */
        buttons?: outputs.lex.BotButton[];
        /**
         * The URL of an image to display on the response card.
         */
        imageUrl?: string;
        /**
         * The subtitle to display on the response card.
         */
        subtitle?: string;
        /**
         * The title to display on the response card.
         */
        title: string;
    }

    /**
     * Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
     */
    export interface BotInitialResponseSetting {
        /**
         * Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
         */
        conditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        initialResponse?: outputs.lex.BotResponseSpecification;
        /**
         * The next step in the conversation.
         */
        nextStep?: outputs.lex.BotDialogState;
    }

    /**
     * InputContext specified for the intent.
     */
    export interface BotInputContext {
        /**
         * The name of the context.
         */
        name: string;
    }

    /**
     * Represents an action that the user wants to perform.
     */
    export interface BotIntent {
        /**
         * Description of thr intent.
         */
        description?: string;
        dialogCodeHook?: outputs.lex.BotDialogCodeHookSetting;
        fulfillmentCodeHook?: outputs.lex.BotFulfillmentCodeHookSetting;
        /**
         * Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
         */
        initialResponseSetting?: outputs.lex.BotInitialResponseSetting;
        inputContexts?: outputs.lex.BotInputContext[];
        intentClosingSetting?: outputs.lex.BotIntentClosingSetting;
        intentConfirmationSetting?: outputs.lex.BotIntentConfirmationSetting;
        kendraConfiguration?: outputs.lex.BotKendraConfiguration;
        /**
         * The name of the intent.
         */
        name: string;
        outputContexts?: outputs.lex.BotOutputContext[];
        parentIntentSignature?: string;
        /**
         * A sample utterance that invokes an intent or respond to a slot elicitation prompt.
         */
        sampleUtterances?: outputs.lex.BotSampleUtterance[];
        slotPriorities?: outputs.lex.BotSlotPriority[];
        /**
         * List of slots
         */
        slots?: outputs.lex.BotSlot[];
    }

    /**
     * Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
     */
    export interface BotIntentClosingSetting {
        /**
         * The response that Amazon Lex sends to the user when the intent is complete.
         */
        closingResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches associated with the intent's closing response. These branches are executed when the nextStep attribute is set to EvalutateConditional.
         */
        conditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
         */
        isActive?: boolean;
        /**
         * Specifies the next step that the bot executes after playing the intent's closing response.
         */
        nextStep?: outputs.lex.BotDialogState;
    }

    /**
     * Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
     */
    export interface BotIntentConfirmationSetting {
        /**
         * The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * A list of conditional branches to evaluate after the intent is closed.
         */
        confirmationConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot executes when the customer confirms the intent.
         */
        confirmationNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        confirmationResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the intent is declined.
         */
        declinationConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot executes when the customer declines the intent.
         */
        declinationNextStep?: outputs.lex.BotDialogState;
        /**
         * When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
         */
        declinationResponse?: outputs.lex.BotResponseSpecification;
        /**
         * The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
         */
        elicitationCodeHook?: outputs.lex.BotElicitationCodeHookInvocationSetting;
        /**
         * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * The next step to take in the conversation if the confirmation step fails.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
         */
        isActive?: boolean;
        /**
         * Prompts the user to confirm the intent. This question should have a yes or no answer.
         */
        promptSpecification: outputs.lex.BotPromptSpecification;
    }

    /**
     * Override settings to configure the intent state.
     */
    export interface BotIntentOverride {
        /**
         * The name of the intent. Only required when you're switching intents.
         */
        name?: string;
        /**
         * A map of all of the slot value overrides for the intent.
         */
        slots?: outputs.lex.BotSlotValueOverrideMap[];
    }

    /**
     * Configuration for searching a Amazon Kendra index specified for the intent.
     */
    export interface BotKendraConfiguration {
        kendraIndex: string;
        queryFilterString?: string;
        /**
         * Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
         */
        queryFilterStringEnabled?: boolean;
    }

    /**
     * A locale in the bot, which contains the intents and slot types that the bot uses in conversations with users in the specified language and locale.
     */
    export interface BotLocale {
        customVocabulary?: outputs.lex.BotCustomVocabulary;
        description?: string;
        /**
         * List of intents
         */
        intents?: outputs.lex.BotIntent[];
        localeId: string;
        nluConfidenceThreshold: number;
        /**
         * List of SlotTypes
         */
        slotTypes?: outputs.lex.BotSlotType[];
        voiceSettings?: outputs.lex.BotVoiceSettings;
    }

    /**
     * The primary message that Amazon Lex should send to the user.
     */
    export interface BotMessage {
        customPayload?: outputs.lex.BotCustomPayload;
        imageResponseCard?: outputs.lex.BotImageResponseCard;
        plainTextMessage?: outputs.lex.BotPlainTextMessage;
        ssmlMessage?: outputs.lex.BotSsmlMessage;
    }

    /**
     * One or more messages that Amazon Lex can send to the user.
     */
    export interface BotMessageGroup {
        message: outputs.lex.BotMessage;
        /**
         * Message variations to send to the user.
         */
        variations?: outputs.lex.BotMessage[];
    }

    /**
     * Indicates whether a slot can return multiple values.
     */
    export interface BotMultipleValuesSetting {
        allowMultipleValues?: boolean;
    }

    /**
     * Determines whether Amazon Lex obscures slot values in conversation logs.
     */
    export interface BotObfuscationSetting {
        /**
         * Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
         */
        obfuscationSettingType: enums.lex.BotObfuscationSettingObfuscationSettingType;
    }

    /**
     * A session context that is activated when an intent is fulfilled.
     */
    export interface BotOutputContext {
        name: string;
        timeToLiveInSeconds: number;
        turnsToLive: number;
    }

    /**
     * A message in plain text format.
     */
    export interface BotPlainTextMessage {
        /**
         * The message to send to the user.
         */
        value: string;
    }

    /**
     * Specifies next steps to run after the dialog code hook finishes.
     */
    export interface BotPostDialogCodeHookInvocationSpecification {
        /**
         * A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the dialog code hook finishes successfully.
         */
        successConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifics the next step the bot runs after the dialog code hook finishes successfully.
         */
        successNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        successResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate if the code hook times out.
         */
        timeoutConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the code hook times out.
         */
        timeoutNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        timeoutResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Provides a setting that determines whether the post-fulfillment response is sent to the user.
     */
    export interface BotPostFulfillmentStatusSpecification {
        /**
         * A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
         */
        successConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
         */
        successNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        successResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate if the fulfillment code hook times out.
         */
        timeoutConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the fulfillment code hook times out.
         */
        timeoutNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        timeoutResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Specifies the settings on a prompt attempt.
     */
    export interface BotPromptAttemptSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt attempt from the bot.
         */
        allowInterrupt?: boolean;
        allowedInputTypes: outputs.lex.BotAllowedInputTypes;
        audioAndDtmfInputSpecification?: outputs.lex.BotAudioAndDtmfInputSpecification;
        textInputSpecification?: outputs.lex.BotTextInputSpecification;
    }

    /**
     * Prompts the user to confirm the intent.
     */
    export interface BotPromptSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        maxRetries: number;
        messageGroupsList: outputs.lex.BotMessageGroup[];
        messageSelectionStrategy?: enums.lex.BotMessageSelectionStrategy;
        /**
         * Specifies the advanced settings on each attempt of the prompt.
         */
        promptAttemptsSpecification?: {[key: string]: outputs.lex.BotPromptAttemptSpecification};
    }

    /**
     * A list of message groups that Amazon Lex uses to respond the user input.
     */
    export interface BotResponseSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        messageGroupsList: outputs.lex.BotMessageGroup[];
    }

    /**
     * Specifies an Amazon S3 bucket for logging audio conversations
     */
    export interface BotS3BucketLogDestination {
        /**
         * The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
         */
        kmsKeyArn?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        logPrefix: string;
        /**
         * The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
         */
        s3BucketArn: string;
    }

    /**
     * S3 location of bot definitions zip file, if it's not defined inline in CloudFormation.
     */
    export interface BotS3Location {
        /**
         * An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        s3ObjectKey: string;
        /**
         * For versioned objects, the version of the deployment package object to use. If not specified, the current object version will be used.
         */
        s3ObjectVersion?: string;
    }

    /**
     * A sample utterance that invokes an intent or respond to a slot elicitation prompt.
     */
    export interface BotSampleUtterance {
        utterance: string;
    }

    /**
     * Defines one of the values for a slot type.
     */
    export interface BotSampleValue {
        /**
         * The value that can be used for a slot type.
         */
        value: string;
    }

    /**
     * Key/value pair representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    export interface BotSessionAttribute {
        key: string;
        value?: string;
    }

    /**
     * A slot is a variable needed to fulfill an intent, where an intent can require zero or more slots.
     */
    export interface BotSlot {
        description?: string;
        multipleValuesSetting?: outputs.lex.BotMultipleValuesSetting;
        name: string;
        obfuscationSetting?: outputs.lex.BotObfuscationSetting;
        slotTypeName: string;
        valueElicitationSetting: outputs.lex.BotSlotValueElicitationSetting;
    }

    /**
     * Settings used when Amazon Lex successfully captures a slot value from a user.
     */
    export interface BotSlotCaptureSetting {
        /**
         * A list of conditional branches to evaluate after the slot value is captured.
         */
        captureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
         */
        captureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        captureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * Code hook called after Amazon Lex successfully captures a slot value.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * Code hook called when Amazon Lex doesn't capture a slot value.
         */
        elicitationCodeHook?: outputs.lex.BotElicitationCodeHookInvocationSetting;
        /**
         * A list of conditional branches to evaluate when the slot value isn't captured.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the slot value code is not recognized.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * The default value to use when a user doesn't provide a value for a slot.
     */
    export interface BotSlotDefaultValue {
        /**
         * The default value to use when a user doesn't provide a value for a slot.
         */
        defaultValue: string;
    }

    /**
     * A list of values that Amazon Lex should use as the default value for a slot.
     */
    export interface BotSlotDefaultValueSpecification {
        /**
         * A list of slot default values
         */
        defaultValueList: outputs.lex.BotSlotDefaultValue[];
    }

    /**
     * The priority that Amazon Lex should use when eliciting slot values from a user.
     */
    export interface BotSlotPriority {
        priority: number;
        /**
         * The name of the slot.
         */
        slotName: string;
    }

    /**
     * A custom, extended built-in or a grammar slot type.
     */
    export interface BotSlotType {
        description?: string;
        externalSourceSetting?: outputs.lex.BotExternalSourceSetting;
        name: string;
        parentSlotTypeSignature?: string;
        slotTypeValues?: outputs.lex.BotSlotTypeValue[];
        valueSelectionSetting?: outputs.lex.BotSlotValueSelectionSetting;
    }

    /**
     * Value that the slot type can take.
     */
    export interface BotSlotTypeValue {
        sampleValue: outputs.lex.BotSampleValue;
        synonyms?: outputs.lex.BotSampleValue[];
    }

    /**
     * The value to set in a slot.
     */
    export interface BotSlotValue {
        /**
         * The value that Amazon Lex determines for the slot.
         */
        interpretedValue?: string;
    }

    /**
     * Settings that you can use for eliciting a slot value.
     */
    export interface BotSlotValueElicitationSetting {
        /**
         * A list of default values for a slot.
         */
        defaultValueSpecification?: outputs.lex.BotSlotDefaultValueSpecification;
        /**
         * The prompt that Amazon Lex uses to elicit the slot value from the user.
         */
        promptSpecification?: outputs.lex.BotPromptSpecification;
        /**
         * If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy.
         */
        sampleUtterances?: outputs.lex.BotSampleUtterance[];
        /**
         * Specifies the next stage in the conversation after capturing the slot.
         */
        slotCaptureSetting?: outputs.lex.BotSlotCaptureSetting;
        /**
         * Specifies whether the slot is required or optional.
         */
        slotConstraint: enums.lex.BotSlotConstraint;
        /**
         * Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
         */
        waitAndContinueSpecification?: outputs.lex.BotWaitAndContinueSpecification;
    }

    /**
     * The slot values that Amazon Lex uses when it sets slot values in a dialog step.
     */
    export interface BotSlotValueOverride {
        /**
         * When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
         */
        shape?: enums.lex.BotSlotShape;
        /**
         * The current value of the slot.
         */
        value?: outputs.lex.BotSlotValue;
        /**
         * A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
         */
        values?: outputs.lex.BotSlotValueOverride[];
    }

    /**
     * A map of slot names and their overridden values.
     */
    export interface BotSlotValueOverrideMap {
        slotName?: string;
        slotValueOverride?: outputs.lex.BotSlotValueOverride;
    }

    /**
     * A regular expression used to validate the value of a slot.
     */
    export interface BotSlotValueRegexFilter {
        /**
         * Regex pattern
         */
        pattern: string;
    }

    /**
     * Contains settings used by Amazon Lex to select a slot value.
     */
    export interface BotSlotValueSelectionSetting {
        advancedRecognitionSetting?: outputs.lex.BotAdvancedRecognitionSetting;
        regexFilter?: outputs.lex.BotSlotValueRegexFilter;
        resolutionStrategy: enums.lex.BotSlotValueResolutionStrategy;
    }

    /**
     * A message in Speech Synthesis Markup Language (SSML).
     */
    export interface BotSsmlMessage {
        /**
         * The SSML text that defines the prompt.
         */
        value: string;
    }

    /**
     * StillWaitingResponseSpecification.
     */
    export interface BotStillWaitingResponseSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        frequencyInSeconds: number;
        messageGroupsList: outputs.lex.BotMessageGroup[];
        timeoutInSeconds: number;
    }

    /**
     * A key-value pair for tagging Lex resources
     */
    export interface BotTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Configuring the test bot alias settings for a given bot
     */
    export interface BotTestBotAliasSettings {
        botAliasLocaleSettings?: outputs.lex.BotAliasLocaleSettingsItem[];
        conversationLogSettings?: outputs.lex.BotConversationLogSettings;
        description?: string;
        /**
         * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
         */
        sentimentAnalysisSettings?: outputs.lex.BotTestBotAliasSettingsSentimentAnalysisSettingsProperties;
    }

    /**
     * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
     */
    export interface BotTestBotAliasSettingsSentimentAnalysisSettingsProperties {
        /**
         * Enable to call Amazon Comprehend for Sentiment natively within Lex
         */
        detectSentiment: boolean;
    }

    /**
     * Specifies the text input specifications.
     */
    export interface BotTextInputSpecification {
        /**
         * Time for which a bot waits before re-prompting a customer for text input.
         */
        startTimeoutMs: number;
    }

    /**
     * Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
     */
    export interface BotTextLogDestination {
        cloudWatch: outputs.lex.BotCloudWatchLogGroupLogDestination;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotTextLogSetting {
        destination: outputs.lex.BotTextLogDestination;
        enabled: boolean;
    }

    /**
     * The version of a bot used for a bot locale.
     */
    export interface BotVersionLocaleDetails {
        sourceBotVersion: string;
    }

    export interface BotVersionLocaleSpecification {
        botVersionLocaleDetails: outputs.lex.BotVersionLocaleDetails;
        localeId: string;
    }

    /**
     * Settings for using an Amazon Polly voice to communicate with a user.
     */
    export interface BotVoiceSettings {
        /**
         * Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the engine parameter of the SynthesizeSpeech operation in the Amazon Polly developer guide.
         */
        engine?: enums.lex.BotVoiceSettingsEngine;
        /**
         * The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
         */
        voiceId: string;
    }

    /**
     * The prompts that Amazon Lex uses while a bot is waiting for customer input.
     */
    export interface BotWaitAndContinueSpecification {
        /**
         * The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
         */
        continueResponse: outputs.lex.BotResponseSpecification;
        /**
         * Specifies whether the bot will wait for a user to respond.
         */
        isActive?: boolean;
        /**
         * The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
         */
        stillWaitingResponse?: outputs.lex.BotStillWaitingResponseSpecification;
        /**
         * The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
         */
        waitingResponse: outputs.lex.BotResponseSpecification;
    }

    /**
     * Data privacy setting of the Bot.
     */
    export interface DataPrivacyProperties {
        childDirected: boolean;
    }

    /**
     * A resource policy to add to the resource. The policy is a JSON structure following the IAM syntax that contains one or more statements that define the policy.
     */
    export interface ResourcePolicyPolicy {
    }

    /**
     * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
     */
    export interface SentimentAnalysisSettingsProperties {
        /**
         * Enable to call Amazon Comprehend for Sentiment natively within Lex
         */
        detectSentiment: boolean;
    }

}

export namespace licensemanager {
    export interface LicenseBorrowConfiguration {
        allowEarlyCheckIn: boolean;
        maxTimeToLiveInMinutes: number;
    }

    export interface LicenseConsumptionConfiguration {
        borrowConfiguration?: outputs.licensemanager.LicenseBorrowConfiguration;
        provisionalConfiguration?: outputs.licensemanager.LicenseProvisionalConfiguration;
        renewType?: string;
    }

    export interface LicenseEntitlement {
        allowCheckIn?: boolean;
        maxCount?: number;
        name: string;
        overage?: boolean;
        unit: string;
        value?: string;
    }

    export interface LicenseIssuerData {
        name: string;
        signKey?: string;
    }

    export interface LicenseMetadata {
        name: string;
        value: string;
    }

    export interface LicenseProvisionalConfiguration {
        maxTimeToLiveInMinutes: number;
    }

    export interface LicenseValidityDateFormat {
        /**
         * Validity begin date for the license.
         */
        begin: string;
        /**
         * Validity begin date for the license.
         */
        end: string;
    }

}

export namespace lightsail {
    /**
     * An object that sets the public accessibility of objects in the specified bucket.
     */
    export interface BucketAccessRules {
        /**
         * A Boolean value that indicates whether the access control list (ACL) permissions that are applied to individual objects override the getObject option that is currently specified.
         */
        allowPublicOverrides?: boolean;
        /**
         * Specifies the anonymous access to all objects in a bucket.
         */
        getObject?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface BucketTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CertificateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Describes the settings of a container that will be launched, or that is launched, to an Amazon Lightsail container service.
     */
    export interface Container {
        /**
         * The launch command for the container.
         */
        command?: string[];
        /**
         * The name of the container.
         */
        containerName?: string;
        /**
         * The environment variables of the container.
         */
        environment?: outputs.lightsail.ContainerEnvironmentVariable[];
        /**
         * The name of the image used for the container.
         */
        image?: string;
        /**
         * The open firewall ports of the container.
         */
        ports?: outputs.lightsail.ContainerPortInfo[];
    }

    export interface ContainerEnvironmentVariable {
        value?: string;
        variable?: string;
    }

    /**
     * Describes the health check configuration of an Amazon Lightsail container service.
     */
    export interface ContainerHealthCheckConfig {
        /**
         * The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
         */
        healthyThreshold?: number;
        /**
         * The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
         */
        intervalSeconds?: number;
        /**
         * The path on the container on which to perform the health check. The default value is /.
         */
        path?: string;
        /**
         * The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
         */
        successCodes?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
         */
        timeoutSeconds?: number;
        /**
         * The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
         */
        unhealthyThreshold?: number;
    }

    export interface ContainerPortInfo {
        port?: string;
        protocol?: string;
    }

    /**
     * An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.
     */
    export interface ContainerPrivateRegistryAccess {
        /**
         * An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
         */
        ecrImagePullerRole?: outputs.lightsail.ContainerPrivateRegistryAccessEcrImagePullerRoleProperties;
    }

    /**
     * An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
     */
    export interface ContainerPrivateRegistryAccessEcrImagePullerRoleProperties {
        /**
         * A Boolean value that indicates whether to activate the role.
         */
        isActive?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the role, if it is activated.
         */
        principalArn?: string;
    }

    /**
     * The public domain name to use with the container service, such as example.com and www.example.com.
     */
    export interface ContainerPublicDomainName {
        certificateName?: string;
        /**
         * An object that describes the configuration for the containers of the deployment.
         */
        domainNames?: string[];
    }

    /**
     * Describes the settings of a public endpoint for an Amazon Lightsail container service.
     */
    export interface ContainerPublicEndpoint {
        /**
         * The name of the container for the endpoint.
         */
        containerName?: string;
        /**
         * The port of the container to which traffic is forwarded to.
         */
        containerPort?: number;
        /**
         * An object that describes the health check configuration of the container.
         */
        healthCheckConfig?: outputs.lightsail.ContainerHealthCheckConfig;
    }

    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     */
    export interface ContainerServiceDeployment {
        /**
         * An object that describes the configuration for the containers of the deployment.
         */
        containers?: outputs.lightsail.Container[];
        /**
         * An object that describes the endpoint of the deployment.
         */
        publicEndpoint?: outputs.lightsail.ContainerPublicEndpoint;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ContainerTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Describes the parameters of the database.
     */
    export interface DatabaseRelationalDatabaseParameter {
        /**
         * Specifies the valid range of values for the parameter.
         */
        allowedValues?: string;
        /**
         * Indicates when parameter updates are applied. Can be immediate or pending-reboot.
         */
        applyMethod?: string;
        /**
         * Specifies the engine-specific parameter type.
         */
        applyType?: string;
        /**
         * Specifies the valid data type for the parameter.
         */
        dataType?: string;
        /**
         * Provides a description of the parameter.
         */
        description?: string;
        /**
         * A Boolean value indicating whether the parameter can be modified.
         */
        isModifiable?: boolean;
        /**
         * Specifies the name of the parameter.
         */
        parameterName?: string;
        /**
         * Specifies the value of the parameter.
         */
        parameterValue?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DatabaseTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A addon associate with a resource.
     */
    export interface DiskAddOn {
        /**
         * The add-on type
         */
        addOnType: string;
        autoSnapshotAddOnRequest?: outputs.lightsail.DiskAutoSnapshotAddOn;
        /**
         * Status of the Addon
         */
        status?: enums.lightsail.DiskAddOnStatus;
    }

    /**
     * An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
     */
    export interface DiskAutoSnapshotAddOn {
        /**
         * The daily time when an automatic snapshot will be created.
         */
        snapshotTimeOfDay?: string;
    }

    /**
     * Location of a resource.
     */
    export interface DiskLocation {
        /**
         * The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
         */
        availabilityZone?: string;
        /**
         * The Region Name in which to create your disk.
         */
        regionName?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DiskTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
     */
    export interface DistributionCacheBehavior {
        /**
         * The cache behavior of the distribution.
         */
        behavior?: string;
    }

    /**
     * Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
     */
    export interface DistributionCacheBehaviorPerPath {
        /**
         * The cache behavior for the specified path.
         */
        behavior?: string;
        /**
         * The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/*), and file types (*.html, *jpg, *js). Directories and file paths are case-sensitive.
         */
        path?: string;
    }

    /**
     * Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution.
     */
    export interface DistributionCacheSettings {
        /**
         * The HTTP methods that are processed and forwarded to the distribution's origin.
         */
        allowedHttpMethods?: string;
        /**
         * The HTTP method responses that are cached by your distribution.
         */
        cachedHttpMethods?: string;
        /**
         * The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
         */
        defaultTtl?: number;
        /**
         * An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded.
         */
        forwardedCookies?: outputs.lightsail.DistributionCookieObject;
        /**
         * An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded.
         */
        forwardedHeaders?: outputs.lightsail.DistributionHeaderObject;
        /**
         * An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded.
         */
        forwardedQueryStrings?: outputs.lightsail.DistributionQueryStringObject;
        /**
         * The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         */
        maximumTtl?: number;
        /**
         * The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
         */
        minimumTtl?: number;
    }

    /**
     * Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards cookies to the origin and, if so, which ones.
     */
    export interface DistributionCookieObject {
        /**
         * The specific cookies to forward to your distribution's origin.
         */
        cookiesAllowList?: string[];
        /**
         * Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
         */
        option?: string;
    }

    /**
     * Describes the request headers that a Lightsail distribution bases caching on.
     */
    export interface DistributionHeaderObject {
        /**
         * The specific headers to forward to your distribution's origin.
         */
        headersAllowList?: string[];
        /**
         * The headers that you want your distribution to forward to your origin and base caching on.
         */
        option?: string;
    }

    /**
     * Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution.
     */
    export interface DistributionInputOrigin {
        /**
         * The name of the origin resource.
         */
        name?: string;
        /**
         * The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
         */
        protocolPolicy?: string;
        /**
         * The AWS Region name of the origin resource.
         */
        regionName?: string;
    }

    /**
     * Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on.
     */
    export interface DistributionQueryStringObject {
        /**
         * Indicates whether the distribution forwards and caches based on query strings.
         */
        option?: boolean;
        /**
         * The specific query strings that the distribution forwards to the origin.
         */
        queryStringsAllowList?: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DistributionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A addon associate with a resource.
     */
    export interface InstanceAddOn {
        /**
         * The add-on type
         */
        addOnType: string;
        autoSnapshotAddOnRequest?: outputs.lightsail.InstanceAutoSnapshotAddOn;
        /**
         * Status of the Addon
         */
        status?: enums.lightsail.InstanceAddOnStatus;
    }

    /**
     * An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
     */
    export interface InstanceAutoSnapshotAddOn {
        /**
         * The daily time when an automatic snapshot will be created.
         */
        snapshotTimeOfDay?: string;
    }

    /**
     * Disk associated with the Instance.
     */
    export interface InstanceDisk {
        /**
         * Instance attached to the disk.
         */
        attachedTo?: string;
        /**
         * Attachment state of the disk.
         */
        attachmentState?: string;
        /**
         * The names to use for your new Lightsail disk.
         */
        diskName: string;
        /**
         * IOPS of disk.
         */
        iops?: number;
        /**
         * Is the Attached disk is the system disk of the Instance.
         */
        isSystemDisk?: boolean;
        /**
         * Path of the disk attached to the instance.
         */
        path: string;
        /**
         * Size of the disk attached to the Instance.
         */
        sizeInGb?: string;
    }

    /**
     * Hardware of the Instance.
     */
    export interface InstanceHardware {
        /**
         * CPU count of the Instance.
         */
        cpuCount?: number;
        /**
         * Disks attached to the Instance.
         */
        disks?: outputs.lightsail.InstanceDisk[];
        /**
         * RAM Size of the Instance.
         */
        ramSizeInGb?: number;
    }

    /**
     * Location of a resource.
     */
    export interface InstanceLocation {
        /**
         * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
         */
        availabilityZone?: string;
        /**
         * The Region Name in which to create your instance.
         */
        regionName?: string;
    }

    /**
     * Monthly Transfer of the Instance.
     */
    export interface InstanceMonthlyTransfer {
        /**
         * GbPerMonthAllocated of the Instance.
         */
        gbPerMonthAllocated?: string;
    }

    /**
     * Networking of the Instance.
     */
    export interface InstanceNetworking {
        monthlyTransfer?: outputs.lightsail.InstanceMonthlyTransfer;
        /**
         * Ports to the Instance.
         */
        ports: outputs.lightsail.InstancePort[];
    }

    /**
     * Port of the Instance.
     */
    export interface InstancePort {
        /**
         * Access Direction for Protocol of the Instance(inbound/outbound).
         */
        accessDirection?: string;
        /**
         * Access From Protocol of the Instance.
         */
        accessFrom?: string;
        /**
         * Access Type Protocol of the Instance.
         */
        accessType?: string;
        cidrListAliases?: string[];
        cidrs?: string[];
        /**
         * CommonName for Protocol of the Instance.
         */
        commonName?: string;
        /**
         * From Port of the Instance.
         */
        fromPort?: number;
        ipv6Cidrs?: string[];
        /**
         * Port Protocol of the Instance.
         */
        protocol?: string;
        /**
         * To Port of the Instance.
         */
        toPort?: number;
    }

    /**
     * Current State of the Instance.
     */
    export interface InstanceState {
        /**
         * Status code of the Instance.
         */
        code?: number;
        /**
         * Status code of the Instance.
         */
        name?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface InstanceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LoadBalancerTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

}

export namespace location {
    export interface ApiKeyRestrictions {
        allowActions: string[];
        allowReferers?: string[];
        allowResources: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ApiKeyTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface GeofenceCollectionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface MapConfiguration {
        customLayers?: string[];
        politicalView?: string;
        style: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MapTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface PlaceIndexDataSourceConfiguration {
        intendedUse?: enums.location.PlaceIndexIntendedUse;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PlaceIndexTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RouteCalculatorTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TrackerTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace logs {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface DeliveryDestinationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DeliverySourceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DeliveryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LogGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.
         */
        value: string;
    }

    /**
     * the key-value pairs that further define a metric.
     */
    export interface MetricFilterDimension {
        /**
         * The key of the dimension. Maximum length of 255.
         */
        key: string;
        /**
         * The value of the dimension. Maximum length of 255.
         */
        value: string;
    }

    export interface MetricFilterMetricTransformation {
        /**
         * The value to emit when a filter pattern does not match a log event. This value can be null.
         */
        defaultValue?: number;
        /**
         * Dimensions are the key-value pairs that further define a metric
         */
        dimensions?: outputs.logs.MetricFilterDimension[];
        /**
         * The name of the CloudWatch metric. Metric name must be in ASCII format.
         */
        metricName: string;
        /**
         * The namespace of the CloudWatch metric.
         */
        metricNamespace: string;
        /**
         * The value to publish to the CloudWatch metric when a filter pattern matches a log event.
         */
        metricValue: string;
        /**
         * The unit to assign to the metric. If you omit this, the unit is set as None.
         */
        unit?: enums.logs.MetricFilterMetricTransformationUnit;
    }

}

export namespace lookoutequipment {
    /**
     * Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location.
     */
    export interface DataInputConfigurationProperties {
        inferenceInputNameConfiguration?: outputs.lookoutequipment.InferenceSchedulerInputNameConfiguration;
        /**
         * Indicates the difference between your time zone and Greenwich Mean Time (GMT).
         */
        inputTimeZoneOffset?: string;
        s3InputConfiguration: outputs.lookoutequipment.InferenceSchedulerS3InputConfiguration;
    }

    /**
     * Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output.
     */
    export interface DataOutputConfigurationProperties {
        /**
         * The ID number for the AWS KMS key used to encrypt the inference output.
         */
        kmsKeyId?: string;
        s3OutputConfiguration: outputs.lookoutequipment.InferenceSchedulerS3OutputConfiguration;
    }

    /**
     * Specifies configuration information for the input data for the inference, including timestamp format and delimiter.
     */
    export interface InferenceSchedulerInputNameConfiguration {
        /**
         * Indicates the delimiter character used between items in the data.
         */
        componentTimestampDelimiter?: string;
        /**
         * The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-).
         */
        timestampFormat?: string;
    }

    /**
     * Specifies configuration information for the input data for the inference, including input data S3 location.
     */
    export interface InferenceSchedulerS3InputConfiguration {
        bucket: string;
        prefix?: string;
    }

    /**
     * Specifies configuration information for the output results from the inference, including output S3 location.
     */
    export interface InferenceSchedulerS3OutputConfiguration {
        bucket: string;
        prefix?: string;
    }

    /**
     * A tag is a key-value pair that can be added to a resource as metadata.
     */
    export interface InferenceSchedulerTag {
        /**
         * The key for the specified tag.
         */
        key: string;
        /**
         * The value for the specified tag.
         */
        value: string;
    }

}

export namespace lookoutmetrics {
    export interface AlertAction {
        lambdaConfiguration?: outputs.lookoutmetrics.AlertLambdaConfiguration;
        snsConfiguration?: outputs.lookoutmetrics.AlertSnsConfiguration;
    }

    /**
     * Configuration options for a Lambda alert action.
     */
    export interface AlertLambdaConfiguration {
        /**
         * ARN of a Lambda to send alert notifications to.
         */
        lambdaArn: string;
        /**
         * ARN of an IAM role that LookoutMetrics should assume to access the Lambda function.
         */
        roleArn: string;
    }

    /**
     * Configuration options for an SNS alert action.
     */
    export interface AlertSnsConfiguration {
        /**
         * ARN of an IAM role that LookoutMetrics should assume to access the SNS topic.
         */
        roleArn: string;
        /**
         * ARN of an SNS topic to send alert notifications to.
         */
        snsTopicArn: string;
    }

    export interface AnomalyDetectorAppFlowConfig {
        flowName: string;
        roleArn: string;
    }

    export interface AnomalyDetectorCloudwatchConfig {
        roleArn: string;
    }

    export interface AnomalyDetectorConfig {
        /**
         * Frequency of anomaly detection
         */
        anomalyDetectorFrequency: enums.lookoutmetrics.AnomalyDetectorFrequency;
    }

    export interface AnomalyDetectorCsvFormatDescriptor {
        charset?: string;
        containsHeader?: boolean;
        delimiter?: string;
        fileCompression?: enums.lookoutmetrics.AnomalyDetectorCsvFormatDescriptorFileCompression;
        headerList?: string[];
        quoteSymbol?: string;
    }

    export interface AnomalyDetectorFileFormatDescriptor {
        csvFormatDescriptor?: outputs.lookoutmetrics.AnomalyDetectorCsvFormatDescriptor;
        jsonFormatDescriptor?: outputs.lookoutmetrics.AnomalyDetectorJsonFormatDescriptor;
    }

    export interface AnomalyDetectorJsonFormatDescriptor {
        charset?: string;
        fileCompression?: enums.lookoutmetrics.AnomalyDetectorJsonFormatDescriptorFileCompression;
    }

    export interface AnomalyDetectorMetric {
        /**
         * Operator used to aggregate metric values
         */
        aggregationFunction: enums.lookoutmetrics.AnomalyDetectorMetricAggregationFunction;
        metricName: string;
        namespace?: string;
    }

    export interface AnomalyDetectorMetricSet {
        /**
         * Dimensions for this MetricSet.
         */
        dimensionList?: string[];
        /**
         * Metrics captured by this MetricSet.
         */
        metricList: outputs.lookoutmetrics.AnomalyDetectorMetric[];
        /**
         * A description for the MetricSet.
         */
        metricSetDescription?: string;
        /**
         * A frequency period to aggregate the data
         */
        metricSetFrequency?: enums.lookoutmetrics.AnomalyDetectorMetricSetMetricSetFrequency;
        /**
         * The name of the MetricSet.
         */
        metricSetName: string;
        metricSource: outputs.lookoutmetrics.AnomalyDetectorMetricSource;
        /**
         * Offset, in seconds, between the frequency interval and the time at which the metrics are available.
         */
        offset?: number;
        timestampColumn?: outputs.lookoutmetrics.AnomalyDetectorTimestampColumn;
        timezone?: string;
    }

    export interface AnomalyDetectorMetricSource {
        appFlowConfig?: outputs.lookoutmetrics.AnomalyDetectorAppFlowConfig;
        cloudwatchConfig?: outputs.lookoutmetrics.AnomalyDetectorCloudwatchConfig;
        rdsSourceConfig?: outputs.lookoutmetrics.AnomalyDetectorRdsSourceConfig;
        redshiftSourceConfig?: outputs.lookoutmetrics.AnomalyDetectorRedshiftSourceConfig;
        s3SourceConfig?: outputs.lookoutmetrics.AnomalyDetectorS3SourceConfig;
    }

    export interface AnomalyDetectorRdsSourceConfig {
        databaseHost: string;
        databaseName: string;
        databasePort: number;
        dbInstanceIdentifier: string;
        roleArn: string;
        secretManagerArn: string;
        tableName: string;
        vpcConfiguration: outputs.lookoutmetrics.AnomalyDetectorVpcConfiguration;
    }

    export interface AnomalyDetectorRedshiftSourceConfig {
        clusterIdentifier: string;
        databaseHost: string;
        databaseName: string;
        databasePort: number;
        roleArn: string;
        secretManagerArn: string;
        tableName: string;
        vpcConfiguration: outputs.lookoutmetrics.AnomalyDetectorVpcConfiguration;
    }

    export interface AnomalyDetectorS3SourceConfig {
        fileFormatDescriptor: outputs.lookoutmetrics.AnomalyDetectorFileFormatDescriptor;
        historicalDataPathList?: string[];
        roleArn: string;
        templatedPathList?: string[];
    }

    export interface AnomalyDetectorTimestampColumn {
        /**
         * A timestamp format for the timestamps in the dataset
         */
        columnFormat?: string;
        columnName?: string;
    }

    export interface AnomalyDetectorVpcConfiguration {
        securityGroupIdList: string[];
        subnetIdList: string[];
    }

}

export namespace m2 {
    export interface ApplicationDefinition0Properties {
        s3Location: string;
    }

    export interface ApplicationDefinition1Properties {
        content: string;
    }

    export interface ApplicationTagMap {
    }

    /**
     * Defines the details of a high availability configuration.
     */
    export interface EnvironmentHighAvailabilityConfig {
        desiredCapacity: number;
    }

    /**
     * Defines the storage configuration for an environment.
     */
    export interface EnvironmentStorageConfiguration {
    }

    /**
     * Defines tags associated to an environment.
     */
    export interface EnvironmentTagMap {
    }

}

export namespace macie {
    /**
     * The regex or s3 object to use for the AllowList.
     */
    export interface AllowListCriteria {
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AllowListTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CustomDataIdentifierTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

    /**
     * Map of filter criteria.
     */
    export interface FindingsFilterCriterion {
    }

    export interface FindingsFilterFindingCriteria {
        criterion?: outputs.macie.FindingsFilterCriterion;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FindingsFilterTag {
        /**
         * The tag's key.
         */
        key: string;
        /**
         * The tag's value.
         */
        value: string;
    }

}

export namespace managedblockchain {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AccessorTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface MemberApprovalThresholdPolicy {
        proposalDurationInHours?: number;
        thresholdComparator?: string;
        thresholdPercentage?: number;
    }

    export interface MemberConfiguration {
        description?: string;
        memberFrameworkConfiguration?: outputs.managedblockchain.MemberFrameworkConfiguration;
        name: string;
    }

    export interface MemberFabricConfiguration {
        adminPassword: string;
        adminUsername: string;
    }

    export interface MemberFrameworkConfiguration {
        memberFabricConfiguration?: outputs.managedblockchain.MemberFabricConfiguration;
    }

    export interface MemberNetworkConfiguration {
        description?: string;
        framework: string;
        frameworkVersion: string;
        name: string;
        networkFrameworkConfiguration?: outputs.managedblockchain.MemberNetworkFrameworkConfiguration;
        votingPolicy: outputs.managedblockchain.MemberVotingPolicy;
    }

    export interface MemberNetworkFabricConfiguration {
        edition: string;
    }

    export interface MemberNetworkFrameworkConfiguration {
        networkFabricConfiguration?: outputs.managedblockchain.MemberNetworkFabricConfiguration;
    }

    export interface MemberVotingPolicy {
        approvalThresholdPolicy?: outputs.managedblockchain.MemberApprovalThresholdPolicy;
    }

    export interface NodeConfiguration {
        availabilityZone: string;
        instanceType: string;
    }

}

export namespace mediaconnect {
    export interface BridgeEgressGatewayBridge {
        /**
         * The maximum expected bitrate of the egress bridge.
         */
        maxBitrate: number;
    }

    /**
     * The settings for source failover.
     */
    export interface BridgeFailoverConfig {
        /**
         * The type of failover you choose for this flow. FAILOVER allows switching between different streams.
         */
        failoverMode: enums.mediaconnect.BridgeFailoverModeEnum;
        /**
         * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
         */
        sourcePriority?: outputs.mediaconnect.BridgeSourcePriority;
        state?: enums.mediaconnect.BridgeFailoverConfigStateEnum;
    }

    /**
     * The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
     */
    export interface BridgeFlowSource {
        /**
         * The ARN of the cloud flow used as a source of this bridge.
         */
        flowArn: string;
        /**
         * The name of the VPC interface attachment to use for this source.
         */
        flowVpcInterfaceAttachment?: outputs.mediaconnect.BridgeVpcInterfaceAttachment;
        /**
         * The name of the flow source.
         */
        name: string;
    }

    export interface BridgeIngressGatewayBridge {
        /**
         * The maximum expected bitrate of the ingress bridge.
         */
        maxBitrate: number;
        /**
         * The maximum number of outputs on the ingress bridge.
         */
        maxOutputs: number;
    }

    /**
     * The output of the bridge. A network output is delivered to your premises.
     */
    export interface BridgeNetworkOutput {
        /**
         * The network output IP Address.
         */
        ipAddress: string;
        /**
         * The network output name.
         */
        name: string;
        /**
         * The network output's gateway network name.
         */
        networkName: string;
        /**
         * The network output port.
         */
        port: number;
        /**
         * The network output protocol.
         */
        protocol: enums.mediaconnect.BridgeProtocolEnum;
        /**
         * The network output TTL.
         */
        ttl: number;
    }

    /**
     * The source of the bridge. A network source originates at your premises.
     */
    export interface BridgeNetworkSource {
        /**
         * The network source multicast IP.
         */
        multicastIp: string;
        /**
         * The name of the network source.
         */
        name: string;
        /**
         * The network source's gateway network name.
         */
        networkName: string;
        /**
         * The network source port.
         */
        port: number;
        /**
         * The network source protocol.
         */
        protocol: enums.mediaconnect.BridgeProtocolEnum;
    }

    /**
     * The output of the bridge.
     */
    export interface BridgeOutput {
        networkOutput?: outputs.mediaconnect.BridgeNetworkOutput;
    }

    /**
     * The output of the bridge. A network output is delivered to your premises.
     */
    export interface BridgeOutputResourceBridgeNetworkOutput {
        /**
         * The network output IP Address.
         */
        ipAddress: string;
        /**
         * The network output's gateway network name.
         */
        networkName: string;
        /**
         * The network output port.
         */
        port: number;
        /**
         * The network output protocol.
         */
        protocol: enums.mediaconnect.BridgeOutputResourceBridgeNetworkOutputProtocol;
        /**
         * The network output TTL.
         */
        ttl: number;
    }

    /**
     * The bridge's source.
     */
    export interface BridgeSource {
        flowSource?: outputs.mediaconnect.BridgeFlowSource;
        networkSource?: outputs.mediaconnect.BridgeNetworkSource;
    }

    /**
     * The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
     */
    export interface BridgeSourceBridgeFlowSource {
        /**
         * The ARN of the cloud flow used as a source of this bridge.
         */
        flowArn: string;
        /**
         * The name of the VPC interface attachment to use for this source.
         */
        flowVpcInterfaceAttachment?: outputs.mediaconnect.BridgeSourceVpcInterfaceAttachment;
    }

    /**
     * The source of the bridge. A network source originates at your premises.
     */
    export interface BridgeSourceBridgeNetworkSource {
        /**
         * The network source multicast IP.
         */
        multicastIp: string;
        /**
         * The network source's gateway network name.
         */
        networkName: string;
        /**
         * The network source port.
         */
        port: number;
        /**
         * The network source protocol.
         */
        protocol: enums.mediaconnect.BridgeSourceProtocolEnum;
    }

    /**
     * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
     */
    export interface BridgeSourcePriority {
        /**
         * The name of the source you choose as the primary source for this flow.
         */
        primarySource?: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface BridgeSourceVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface BridgeVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowEntitlementEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm: enums.mediaconnect.FlowEntitlementEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowEntitlementEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * The settings for source failover
     */
    export interface FlowFailoverConfig {
        /**
         * The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
         */
        failoverMode?: enums.mediaconnect.FlowFailoverConfigFailoverMode;
        /**
         * Search window time to look for dash-7 packets
         */
        recoveryWindow?: number;
        /**
         * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
         */
        sourcePriority?: outputs.mediaconnect.FlowFailoverConfigSourcePriorityProperties;
        state?: enums.mediaconnect.FlowFailoverConfigState;
    }

    /**
     * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
     */
    export interface FlowFailoverConfigSourcePriorityProperties {
        /**
         * The name of the source you choose as the primary source for this flow.
         */
        primarySource: string;
    }

    /**
     * The source configuration for cloud flows receiving a stream from a bridge.
     */
    export interface FlowGatewayBridgeSource {
        /**
         * The ARN of the bridge feeding this flow.
         */
        bridgeArn: string;
        /**
         * The name of the VPC interface attachment to use for this bridge source.
         */
        vpcInterfaceAttachment?: outputs.mediaconnect.FlowVpcInterfaceAttachment;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowOutputEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowOutputEncryptionAlgorithm;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowOutputEncryptionKeyType;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn: string;
    }

    /**
     * The settings for attaching a VPC interface to an output.
     */
    export interface FlowOutputVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this output.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The settings for the source of the flow.
     */
    export interface FlowSource {
        /**
         * The type of decryption that is used on the content ingested from this source.
         */
        decryption?: outputs.mediaconnect.FlowEncryption;
        /**
         * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
         */
        description?: string;
        /**
         * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
         */
        entitlementArn?: string;
        /**
         * The source configuration for cloud flows receiving a stream from a bridge.
         */
        gatewayBridgeSource?: outputs.mediaconnect.FlowGatewayBridgeSource;
        /**
         * The IP address that the flow will be listening on for incoming content.
         */
        ingestIp?: string;
        /**
         * The port that the flow will be listening on for incoming content.
         */
        ingestPort?: number;
        /**
         * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
         */
        maxBitrate?: number;
        /**
         * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
         */
        maxLatency?: number;
        /**
         * The minimum latency in milliseconds.
         */
        minLatency?: number;
        /**
         * The name of the source.
         */
        name?: string;
        /**
         * The protocol that is used by the source.
         */
        protocol?: enums.mediaconnect.FlowSourceProtocol;
        /**
         * The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
         */
        senderControlPort?: number;
        /**
         * The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
         */
        senderIpAddress?: string;
        /**
         * The ARN of the source.
         */
        sourceArn?: string;
        /**
         * The port that the flow will be listening on for incoming content.(ReadOnly)
         */
        sourceIngestPort?: string;
        /**
         * Source IP or domain name for SRT-caller protocol.
         */
        sourceListenerAddress?: string;
        /**
         * Source port for SRT-caller protocol.
         */
        sourceListenerPort?: number;
        /**
         * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
         */
        streamId?: string;
        /**
         * The name of the VPC Interface this Source is configured with.
         */
        vpcInterfaceName?: string;
        /**
         * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
         */
        whitelistCidr?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowSourceEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowSourceEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowSourceEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * The source configuration for cloud flows receiving a stream from a bridge.
     */
    export interface FlowSourceGatewayBridgeSource {
        /**
         * The ARN of the bridge feeding this flow.
         */
        bridgeArn: string;
        /**
         * The name of the VPC interface attachment to use for this bridge source.
         */
        vpcInterfaceAttachment?: outputs.mediaconnect.FlowSourceVpcInterfaceAttachment;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface FlowSourceVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface FlowVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The network settings for a gateway.
     */
    export interface GatewayNetwork {
        /**
         * A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
         */
        cidrBlock: string;
        /**
         * The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
         */
        name: string;
    }

}

export namespace mediaconvert {
    export interface JobTemplateAccelerationSettings {
        mode: string;
    }

    export interface JobTemplateHopDestination {
        priority?: number;
        queue?: string;
        waitMinutes?: number;
    }

}

export namespace medialive {
    export interface ChannelAacSettings {
        bitrate?: number;
        codingMode?: string;
        inputType?: string;
        profile?: string;
        rateControlMode?: string;
        rawFormat?: string;
        sampleRate?: number;
        spec?: string;
        vbrQuality?: string;
    }

    export interface ChannelAc3Settings {
        attenuationControl?: string;
        bitrate?: number;
        bitstreamMode?: string;
        codingMode?: string;
        dialnorm?: number;
        drcProfile?: string;
        lfeFilter?: string;
        metadataControl?: string;
    }

    export interface ChannelAncillarySourceSettings {
        sourceAncillaryChannelNumber?: number;
    }

    export interface ChannelArchiveCdnSettings {
        archiveS3Settings?: outputs.medialive.ChannelArchiveS3Settings;
    }

    export interface ChannelArchiveContainerSettings {
        m2tsSettings?: outputs.medialive.ChannelM2tsSettings;
        rawSettings?: outputs.medialive.ChannelRawSettings;
    }

    export interface ChannelArchiveGroupSettings {
        archiveCdnSettings?: outputs.medialive.ChannelArchiveCdnSettings;
        destination?: outputs.medialive.ChannelOutputLocationRef;
        rolloverInterval?: number;
    }

    export interface ChannelArchiveOutputSettings {
        containerSettings?: outputs.medialive.ChannelArchiveContainerSettings;
        extension?: string;
        nameModifier?: string;
    }

    export interface ChannelArchiveS3Settings {
        cannedAcl?: string;
    }

    export interface ChannelAribDestinationSettings {
    }

    export interface ChannelAribSourceSettings {
    }

    export interface ChannelAudioChannelMapping {
        inputChannelLevels?: outputs.medialive.ChannelInputChannelLevel[];
        outputChannel?: number;
    }

    export interface ChannelAudioCodecSettings {
        aacSettings?: outputs.medialive.ChannelAacSettings;
        ac3Settings?: outputs.medialive.ChannelAc3Settings;
        eac3AtmosSettings?: outputs.medialive.ChannelEac3AtmosSettings;
        eac3Settings?: outputs.medialive.ChannelEac3Settings;
        mp2Settings?: outputs.medialive.ChannelMp2Settings;
        passThroughSettings?: outputs.medialive.ChannelPassThroughSettings;
        wavSettings?: outputs.medialive.ChannelWavSettings;
    }

    export interface ChannelAudioDescription {
        audioNormalizationSettings?: outputs.medialive.ChannelAudioNormalizationSettings;
        audioSelectorName?: string;
        audioType?: string;
        audioTypeControl?: string;
        audioWatermarkingSettings?: outputs.medialive.ChannelAudioWatermarkSettings;
        codecSettings?: outputs.medialive.ChannelAudioCodecSettings;
        languageCode?: string;
        languageCodeControl?: string;
        name?: string;
        remixSettings?: outputs.medialive.ChannelRemixSettings;
        streamName?: string;
    }

    export interface ChannelAudioDolbyEDecode {
        programSelection?: string;
    }

    export interface ChannelAudioHlsRenditionSelection {
        groupId?: string;
        name?: string;
    }

    export interface ChannelAudioLanguageSelection {
        languageCode?: string;
        languageSelectionPolicy?: string;
    }

    export interface ChannelAudioNormalizationSettings {
        algorithm?: string;
        algorithmControl?: string;
        targetLkfs?: number;
    }

    export interface ChannelAudioOnlyHlsSettings {
        audioGroupId?: string;
        audioOnlyImage?: outputs.medialive.ChannelInputLocation;
        audioTrackType?: string;
        segmentType?: string;
    }

    export interface ChannelAudioPidSelection {
        pid?: number;
    }

    export interface ChannelAudioSelector {
        name?: string;
        selectorSettings?: outputs.medialive.ChannelAudioSelectorSettings;
    }

    export interface ChannelAudioSelectorSettings {
        audioHlsRenditionSelection?: outputs.medialive.ChannelAudioHlsRenditionSelection;
        audioLanguageSelection?: outputs.medialive.ChannelAudioLanguageSelection;
        audioPidSelection?: outputs.medialive.ChannelAudioPidSelection;
        audioTrackSelection?: outputs.medialive.ChannelAudioTrackSelection;
    }

    export interface ChannelAudioSilenceFailoverSettings {
        audioSelectorName?: string;
        audioSilenceThresholdMsec?: number;
    }

    export interface ChannelAudioTrack {
        track?: number;
    }

    export interface ChannelAudioTrackSelection {
        dolbyEDecode?: outputs.medialive.ChannelAudioDolbyEDecode;
        tracks?: outputs.medialive.ChannelAudioTrack[];
    }

    export interface ChannelAudioWatermarkSettings {
        nielsenWatermarksSettings?: outputs.medialive.ChannelNielsenWatermarksSettings;
    }

    export interface ChannelAutomaticInputFailoverSettings {
        errorClearTimeMsec?: number;
        failoverConditions?: outputs.medialive.ChannelFailoverCondition[];
        inputPreference?: string;
        secondaryInputId?: string;
    }

    export interface ChannelAvailBlanking {
        availBlankingImage?: outputs.medialive.ChannelInputLocation;
        state?: string;
    }

    export interface ChannelAvailConfiguration {
        availSettings?: outputs.medialive.ChannelAvailSettings;
    }

    export interface ChannelAvailSettings {
        esam?: outputs.medialive.ChannelEsam;
        scte35SpliceInsert?: outputs.medialive.ChannelScte35SpliceInsert;
        scte35TimeSignalApos?: outputs.medialive.ChannelScte35TimeSignalApos;
    }

    export interface ChannelBlackoutSlate {
        blackoutSlateImage?: outputs.medialive.ChannelInputLocation;
        networkEndBlackout?: string;
        networkEndBlackoutImage?: outputs.medialive.ChannelInputLocation;
        networkId?: string;
        state?: string;
    }

    export interface ChannelBurnInDestinationSettings {
        alignment?: string;
        backgroundColor?: string;
        backgroundOpacity?: number;
        font?: outputs.medialive.ChannelInputLocation;
        fontColor?: string;
        fontOpacity?: number;
        fontResolution?: number;
        fontSize?: string;
        outlineColor?: string;
        outlineSize?: number;
        shadowColor?: string;
        shadowOpacity?: number;
        shadowXOffset?: number;
        shadowYOffset?: number;
        teletextGridControl?: string;
        xPosition?: number;
        yPosition?: number;
    }

    export interface ChannelCaptionDescription {
        accessibility?: string;
        captionSelectorName?: string;
        destinationSettings?: outputs.medialive.ChannelCaptionDestinationSettings;
        languageCode?: string;
        languageDescription?: string;
        name?: string;
    }

    export interface ChannelCaptionDestinationSettings {
        aribDestinationSettings?: outputs.medialive.ChannelAribDestinationSettings;
        burnInDestinationSettings?: outputs.medialive.ChannelBurnInDestinationSettings;
        dvbSubDestinationSettings?: outputs.medialive.ChannelDvbSubDestinationSettings;
        ebuTtDDestinationSettings?: outputs.medialive.ChannelEbuTtDDestinationSettings;
        embeddedDestinationSettings?: outputs.medialive.ChannelEmbeddedDestinationSettings;
        embeddedPlusScte20DestinationSettings?: outputs.medialive.ChannelEmbeddedPlusScte20DestinationSettings;
        rtmpCaptionInfoDestinationSettings?: outputs.medialive.ChannelRtmpCaptionInfoDestinationSettings;
        scte20PlusEmbeddedDestinationSettings?: outputs.medialive.ChannelScte20PlusEmbeddedDestinationSettings;
        scte27DestinationSettings?: outputs.medialive.ChannelScte27DestinationSettings;
        smpteTtDestinationSettings?: outputs.medialive.ChannelSmpteTtDestinationSettings;
        teletextDestinationSettings?: outputs.medialive.ChannelTeletextDestinationSettings;
        ttmlDestinationSettings?: outputs.medialive.ChannelTtmlDestinationSettings;
        webvttDestinationSettings?: outputs.medialive.ChannelWebvttDestinationSettings;
    }

    export interface ChannelCaptionLanguageMapping {
        captionChannel?: number;
        languageCode?: string;
        languageDescription?: string;
    }

    export interface ChannelCaptionRectangle {
        height?: number;
        leftOffset?: number;
        topOffset?: number;
        width?: number;
    }

    export interface ChannelCaptionSelector {
        languageCode?: string;
        name?: string;
        selectorSettings?: outputs.medialive.ChannelCaptionSelectorSettings;
    }

    export interface ChannelCaptionSelectorSettings {
        ancillarySourceSettings?: outputs.medialive.ChannelAncillarySourceSettings;
        aribSourceSettings?: outputs.medialive.ChannelAribSourceSettings;
        dvbSubSourceSettings?: outputs.medialive.ChannelDvbSubSourceSettings;
        embeddedSourceSettings?: outputs.medialive.ChannelEmbeddedSourceSettings;
        scte20SourceSettings?: outputs.medialive.ChannelScte20SourceSettings;
        scte27SourceSettings?: outputs.medialive.ChannelScte27SourceSettings;
        teletextSourceSettings?: outputs.medialive.ChannelTeletextSourceSettings;
    }

    export interface ChannelCdiInputSpecification {
        resolution?: string;
    }

    export interface ChannelColorCorrection {
        inputColorSpace?: string;
        outputColorSpace?: string;
        uri?: string;
    }

    export interface ChannelColorCorrectionSettings {
        globalColorCorrections?: outputs.medialive.ChannelColorCorrection[];
    }

    export interface ChannelColorSpacePassthroughSettings {
    }

    export interface ChannelDolbyVision81Settings {
    }

    export interface ChannelDvbNitSettings {
        networkId?: number;
        networkName?: string;
        repInterval?: number;
    }

    export interface ChannelDvbSdtSettings {
        outputSdt?: string;
        repInterval?: number;
        serviceName?: string;
        serviceProviderName?: string;
    }

    export interface ChannelDvbSubDestinationSettings {
        alignment?: string;
        backgroundColor?: string;
        backgroundOpacity?: number;
        font?: outputs.medialive.ChannelInputLocation;
        fontColor?: string;
        fontOpacity?: number;
        fontResolution?: number;
        fontSize?: string;
        outlineColor?: string;
        outlineSize?: number;
        shadowColor?: string;
        shadowOpacity?: number;
        shadowXOffset?: number;
        shadowYOffset?: number;
        teletextGridControl?: string;
        xPosition?: number;
        yPosition?: number;
    }

    export interface ChannelDvbSubSourceSettings {
        ocrLanguage?: string;
        pid?: number;
    }

    export interface ChannelDvbTdtSettings {
        repInterval?: number;
    }

    export interface ChannelEac3AtmosSettings {
        bitrate?: number;
        codingMode?: string;
        dialnorm?: number;
        drcLine?: string;
        drcRf?: string;
        heightTrim?: number;
        surroundTrim?: number;
    }

    export interface ChannelEac3Settings {
        attenuationControl?: string;
        bitrate?: number;
        bitstreamMode?: string;
        codingMode?: string;
        dcFilter?: string;
        dialnorm?: number;
        drcLine?: string;
        drcRf?: string;
        lfeControl?: string;
        lfeFilter?: string;
        loRoCenterMixLevel?: number;
        loRoSurroundMixLevel?: number;
        ltRtCenterMixLevel?: number;
        ltRtSurroundMixLevel?: number;
        metadataControl?: string;
        passthroughControl?: string;
        phaseControl?: string;
        stereoDownmix?: string;
        surroundExMode?: string;
        surroundMode?: string;
    }

    export interface ChannelEbuTtDDestinationSettings {
        copyrightHolder?: string;
        fillLineGap?: string;
        fontFamily?: string;
        styleControl?: string;
    }

    export interface ChannelEmbeddedDestinationSettings {
    }

    export interface ChannelEmbeddedPlusScte20DestinationSettings {
    }

    export interface ChannelEmbeddedSourceSettings {
        convert608To708?: string;
        scte20Detection?: string;
        source608ChannelNumber?: number;
        source608TrackNumber?: number;
    }

    export interface ChannelEncoderSettings {
        audioDescriptions?: outputs.medialive.ChannelAudioDescription[];
        availBlanking?: outputs.medialive.ChannelAvailBlanking;
        availConfiguration?: outputs.medialive.ChannelAvailConfiguration;
        blackoutSlate?: outputs.medialive.ChannelBlackoutSlate;
        captionDescriptions?: outputs.medialive.ChannelCaptionDescription[];
        colorCorrectionSettings?: outputs.medialive.ChannelColorCorrectionSettings;
        featureActivations?: outputs.medialive.ChannelFeatureActivations;
        globalConfiguration?: outputs.medialive.ChannelGlobalConfiguration;
        motionGraphicsConfiguration?: outputs.medialive.ChannelMotionGraphicsConfiguration;
        nielsenConfiguration?: outputs.medialive.ChannelNielsenConfiguration;
        outputGroups?: outputs.medialive.ChannelOutputGroup[];
        thumbnailConfiguration?: outputs.medialive.ChannelThumbnailConfiguration;
        timecodeConfig?: outputs.medialive.ChannelTimecodeConfig;
        videoDescriptions?: outputs.medialive.ChannelVideoDescription[];
    }

    export interface ChannelEpochLockingSettings {
        customEpoch?: string;
        jamSyncTime?: string;
    }

    export interface ChannelEsam {
        acquisitionPointId?: string;
        adAvailOffset?: number;
        passwordParam?: string;
        poisEndpoint?: string;
        username?: string;
        zoneIdentity?: string;
    }

    export interface ChannelFailoverCondition {
        failoverConditionSettings?: outputs.medialive.ChannelFailoverConditionSettings;
    }

    export interface ChannelFailoverConditionSettings {
        audioSilenceSettings?: outputs.medialive.ChannelAudioSilenceFailoverSettings;
        inputLossSettings?: outputs.medialive.ChannelInputLossFailoverSettings;
        videoBlackSettings?: outputs.medialive.ChannelVideoBlackFailoverSettings;
    }

    export interface ChannelFeatureActivations {
        inputPrepareScheduleActions?: string;
        outputStaticImageOverlayScheduleActions?: string;
    }

    export interface ChannelFecOutputSettings {
        columnDepth?: number;
        includeFec?: string;
        rowLength?: number;
    }

    export interface ChannelFmp4HlsSettings {
        audioRenditionSets?: string;
        nielsenId3Behavior?: string;
        timedMetadataBehavior?: string;
    }

    export interface ChannelFrameCaptureCdnSettings {
        frameCaptureS3Settings?: outputs.medialive.ChannelFrameCaptureS3Settings;
    }

    export interface ChannelFrameCaptureGroupSettings {
        destination?: outputs.medialive.ChannelOutputLocationRef;
        frameCaptureCdnSettings?: outputs.medialive.ChannelFrameCaptureCdnSettings;
    }

    export interface ChannelFrameCaptureHlsSettings {
    }

    export interface ChannelFrameCaptureOutputSettings {
        nameModifier?: string;
    }

    export interface ChannelFrameCaptureS3Settings {
        cannedAcl?: string;
    }

    export interface ChannelFrameCaptureSettings {
        captureInterval?: number;
        captureIntervalUnits?: string;
        timecodeBurninSettings?: outputs.medialive.ChannelTimecodeBurninSettings;
    }

    export interface ChannelGlobalConfiguration {
        initialAudioGain?: number;
        inputEndAction?: string;
        inputLossBehavior?: outputs.medialive.ChannelInputLossBehavior;
        outputLockingMode?: string;
        outputLockingSettings?: outputs.medialive.ChannelOutputLockingSettings;
        outputTimingSource?: string;
        supportLowFramerateInputs?: string;
    }

    export interface ChannelH264ColorSpaceSettings {
        colorSpacePassthroughSettings?: outputs.medialive.ChannelColorSpacePassthroughSettings;
        rec601Settings?: outputs.medialive.ChannelRec601Settings;
        rec709Settings?: outputs.medialive.ChannelRec709Settings;
    }

    export interface ChannelH264FilterSettings {
        temporalFilterSettings?: outputs.medialive.ChannelTemporalFilterSettings;
    }

    export interface ChannelH264Settings {
        adaptiveQuantization?: string;
        afdSignaling?: string;
        bitrate?: number;
        bufFillPct?: number;
        bufSize?: number;
        colorMetadata?: string;
        colorSpaceSettings?: outputs.medialive.ChannelH264ColorSpaceSettings;
        entropyEncoding?: string;
        filterSettings?: outputs.medialive.ChannelH264FilterSettings;
        fixedAfd?: string;
        flickerAq?: string;
        forceFieldPictures?: string;
        framerateControl?: string;
        framerateDenominator?: number;
        framerateNumerator?: number;
        gopBReference?: string;
        gopClosedCadence?: number;
        gopNumBFrames?: number;
        gopSize?: number;
        gopSizeUnits?: string;
        level?: string;
        lookAheadRateControl?: string;
        maxBitrate?: number;
        minIInterval?: number;
        numRefFrames?: number;
        parControl?: string;
        parDenominator?: number;
        parNumerator?: number;
        profile?: string;
        qualityLevel?: string;
        qvbrQualityLevel?: number;
        rateControlMode?: string;
        scanType?: string;
        sceneChangeDetect?: string;
        slices?: number;
        softness?: number;
        spatialAq?: string;
        subgopLength?: string;
        syntax?: string;
        temporalAq?: string;
        timecodeBurninSettings?: outputs.medialive.ChannelTimecodeBurninSettings;
        timecodeInsertion?: string;
    }

    export interface ChannelH265ColorSpaceSettings {
        colorSpacePassthroughSettings?: outputs.medialive.ChannelColorSpacePassthroughSettings;
        dolbyVision81Settings?: outputs.medialive.ChannelDolbyVision81Settings;
        hdr10Settings?: outputs.medialive.ChannelHdr10Settings;
        rec601Settings?: outputs.medialive.ChannelRec601Settings;
        rec709Settings?: outputs.medialive.ChannelRec709Settings;
    }

    export interface ChannelH265FilterSettings {
        temporalFilterSettings?: outputs.medialive.ChannelTemporalFilterSettings;
    }

    export interface ChannelH265Settings {
        adaptiveQuantization?: string;
        afdSignaling?: string;
        alternativeTransferFunction?: string;
        bitrate?: number;
        bufSize?: number;
        colorMetadata?: string;
        colorSpaceSettings?: outputs.medialive.ChannelH265ColorSpaceSettings;
        filterSettings?: outputs.medialive.ChannelH265FilterSettings;
        fixedAfd?: string;
        flickerAq?: string;
        framerateDenominator?: number;
        framerateNumerator?: number;
        gopClosedCadence?: number;
        gopSize?: number;
        gopSizeUnits?: string;
        level?: string;
        lookAheadRateControl?: string;
        maxBitrate?: number;
        minIInterval?: number;
        parDenominator?: number;
        parNumerator?: number;
        profile?: string;
        qvbrQualityLevel?: number;
        rateControlMode?: string;
        scanType?: string;
        sceneChangeDetect?: string;
        slices?: number;
        tier?: string;
        timecodeBurninSettings?: outputs.medialive.ChannelTimecodeBurninSettings;
        timecodeInsertion?: string;
    }

    export interface ChannelHdr10Settings {
        maxCll?: number;
        maxFall?: number;
    }

    export interface ChannelHlsAkamaiSettings {
        connectionRetryInterval?: number;
        filecacheDuration?: number;
        httpTransferMode?: string;
        numRetries?: number;
        restartDelay?: number;
        salt?: string;
        token?: string;
    }

    export interface ChannelHlsBasicPutSettings {
        connectionRetryInterval?: number;
        filecacheDuration?: number;
        numRetries?: number;
        restartDelay?: number;
    }

    export interface ChannelHlsCdnSettings {
        hlsAkamaiSettings?: outputs.medialive.ChannelHlsAkamaiSettings;
        hlsBasicPutSettings?: outputs.medialive.ChannelHlsBasicPutSettings;
        hlsMediaStoreSettings?: outputs.medialive.ChannelHlsMediaStoreSettings;
        hlsS3Settings?: outputs.medialive.ChannelHlsS3Settings;
        hlsWebdavSettings?: outputs.medialive.ChannelHlsWebdavSettings;
    }

    export interface ChannelHlsGroupSettings {
        adMarkers?: string[];
        baseUrlContent?: string;
        baseUrlContent1?: string;
        baseUrlManifest?: string;
        baseUrlManifest1?: string;
        captionLanguageMappings?: outputs.medialive.ChannelCaptionLanguageMapping[];
        captionLanguageSetting?: string;
        clientCache?: string;
        codecSpecification?: string;
        constantIv?: string;
        destination?: outputs.medialive.ChannelOutputLocationRef;
        directoryStructure?: string;
        discontinuityTags?: string;
        encryptionType?: string;
        hlsCdnSettings?: outputs.medialive.ChannelHlsCdnSettings;
        hlsId3SegmentTagging?: string;
        iFrameOnlyPlaylists?: string;
        incompleteSegmentBehavior?: string;
        indexNSegments?: number;
        inputLossAction?: string;
        ivInManifest?: string;
        ivSource?: string;
        keepSegments?: number;
        keyFormat?: string;
        keyFormatVersions?: string;
        keyProviderSettings?: outputs.medialive.ChannelKeyProviderSettings;
        manifestCompression?: string;
        manifestDurationFormat?: string;
        minSegmentLength?: number;
        mode?: string;
        outputSelection?: string;
        programDateTime?: string;
        programDateTimeClock?: string;
        programDateTimePeriod?: number;
        redundantManifest?: string;
        segmentLength?: number;
        segmentationMode?: string;
        segmentsPerSubdirectory?: number;
        streamInfResolution?: string;
        timedMetadataId3Frame?: string;
        timedMetadataId3Period?: number;
        timestampDeltaMilliseconds?: number;
        tsFileMode?: string;
    }

    export interface ChannelHlsInputSettings {
        bandwidth?: number;
        bufferSegments?: number;
        retries?: number;
        retryInterval?: number;
        scte35Source?: string;
    }

    export interface ChannelHlsMediaStoreSettings {
        connectionRetryInterval?: number;
        filecacheDuration?: number;
        mediaStoreStorageClass?: string;
        numRetries?: number;
        restartDelay?: number;
    }

    export interface ChannelHlsOutputSettings {
        h265PackagingType?: string;
        hlsSettings?: outputs.medialive.ChannelHlsSettings;
        nameModifier?: string;
        segmentModifier?: string;
    }

    export interface ChannelHlsS3Settings {
        cannedAcl?: string;
    }

    export interface ChannelHlsSettings {
        audioOnlyHlsSettings?: outputs.medialive.ChannelAudioOnlyHlsSettings;
        fmp4HlsSettings?: outputs.medialive.ChannelFmp4HlsSettings;
        frameCaptureHlsSettings?: outputs.medialive.ChannelFrameCaptureHlsSettings;
        standardHlsSettings?: outputs.medialive.ChannelStandardHlsSettings;
    }

    export interface ChannelHlsWebdavSettings {
        connectionRetryInterval?: number;
        filecacheDuration?: number;
        httpTransferMode?: string;
        numRetries?: number;
        restartDelay?: number;
    }

    export interface ChannelHtmlMotionGraphicsSettings {
    }

    export interface ChannelInputAttachment {
        automaticInputFailoverSettings?: outputs.medialive.ChannelAutomaticInputFailoverSettings;
        inputAttachmentName?: string;
        inputId?: string;
        inputSettings?: outputs.medialive.ChannelInputSettings;
    }

    export interface ChannelInputChannelLevel {
        gain?: number;
        inputChannel?: number;
    }

    export interface ChannelInputLocation {
        passwordParam?: string;
        uri?: string;
        username?: string;
    }

    export interface ChannelInputLossBehavior {
        blackFrameMsec?: number;
        inputLossImageColor?: string;
        inputLossImageSlate?: outputs.medialive.ChannelInputLocation;
        inputLossImageType?: string;
        repeatFrameMsec?: number;
    }

    export interface ChannelInputLossFailoverSettings {
        inputLossThresholdMsec?: number;
    }

    export interface ChannelInputSettings {
        audioSelectors?: outputs.medialive.ChannelAudioSelector[];
        captionSelectors?: outputs.medialive.ChannelCaptionSelector[];
        deblockFilter?: string;
        denoiseFilter?: string;
        filterStrength?: number;
        inputFilter?: string;
        networkInputSettings?: outputs.medialive.ChannelNetworkInputSettings;
        scte35Pid?: number;
        smpte2038DataPreference?: string;
        sourceEndBehavior?: string;
        videoSelector?: outputs.medialive.ChannelVideoSelector;
    }

    export interface ChannelInputSpecification {
        codec?: string;
        maximumBitrate?: string;
        resolution?: string;
    }

    export interface ChannelKeyProviderSettings {
        staticKeySettings?: outputs.medialive.ChannelStaticKeySettings;
    }

    export interface ChannelM2tsSettings {
        absentInputAudioBehavior?: string;
        arib?: string;
        aribCaptionsPid?: string;
        aribCaptionsPidControl?: string;
        audioBufferModel?: string;
        audioFramesPerPes?: number;
        audioPids?: string;
        audioStreamType?: string;
        bitrate?: number;
        bufferModel?: string;
        ccDescriptor?: string;
        dvbNitSettings?: outputs.medialive.ChannelDvbNitSettings;
        dvbSdtSettings?: outputs.medialive.ChannelDvbSdtSettings;
        dvbSubPids?: string;
        dvbTdtSettings?: outputs.medialive.ChannelDvbTdtSettings;
        dvbTeletextPid?: string;
        ebif?: string;
        ebpAudioInterval?: string;
        ebpLookaheadMs?: number;
        ebpPlacement?: string;
        ecmPid?: string;
        esRateInPes?: string;
        etvPlatformPid?: string;
        etvSignalPid?: string;
        fragmentTime?: number;
        klv?: string;
        klvDataPids?: string;
        nielsenId3Behavior?: string;
        nullPacketBitrate?: number;
        patInterval?: number;
        pcrControl?: string;
        pcrPeriod?: number;
        pcrPid?: string;
        pmtInterval?: number;
        pmtPid?: string;
        programNum?: number;
        rateMode?: string;
        scte27Pids?: string;
        scte35Control?: string;
        scte35Pid?: string;
        scte35PrerollPullupMilliseconds?: number;
        segmentationMarkers?: string;
        segmentationStyle?: string;
        segmentationTime?: number;
        timedMetadataBehavior?: string;
        timedMetadataPid?: string;
        transportStreamId?: number;
        videoPid?: string;
    }

    export interface ChannelM3u8Settings {
        audioFramesPerPes?: number;
        audioPids?: string;
        ecmPid?: string;
        klvBehavior?: string;
        klvDataPids?: string;
        nielsenId3Behavior?: string;
        patInterval?: number;
        pcrControl?: string;
        pcrPeriod?: number;
        pcrPid?: string;
        pmtInterval?: number;
        pmtPid?: string;
        programNum?: number;
        scte35Behavior?: string;
        scte35Pid?: string;
        timedMetadataBehavior?: string;
        timedMetadataPid?: string;
        transportStreamId?: number;
        videoPid?: string;
    }

    export interface ChannelMaintenanceCreateSettings {
        maintenanceDay?: string;
        maintenanceStartTime?: string;
    }

    export interface ChannelMediaPackageGroupSettings {
        destination?: outputs.medialive.ChannelOutputLocationRef;
    }

    export interface ChannelMediaPackageOutputDestinationSettings {
        channelId?: string;
    }

    export interface ChannelMediaPackageOutputSettings {
    }

    export interface ChannelMotionGraphicsConfiguration {
        motionGraphicsInsertion?: string;
        motionGraphicsSettings?: outputs.medialive.ChannelMotionGraphicsSettings;
    }

    export interface ChannelMotionGraphicsSettings {
        htmlMotionGraphicsSettings?: outputs.medialive.ChannelHtmlMotionGraphicsSettings;
    }

    export interface ChannelMp2Settings {
        bitrate?: number;
        codingMode?: string;
        sampleRate?: number;
    }

    export interface ChannelMpeg2FilterSettings {
        temporalFilterSettings?: outputs.medialive.ChannelTemporalFilterSettings;
    }

    export interface ChannelMpeg2Settings {
        adaptiveQuantization?: string;
        afdSignaling?: string;
        colorMetadata?: string;
        colorSpace?: string;
        displayAspectRatio?: string;
        filterSettings?: outputs.medialive.ChannelMpeg2FilterSettings;
        fixedAfd?: string;
        framerateDenominator?: number;
        framerateNumerator?: number;
        gopClosedCadence?: number;
        gopNumBFrames?: number;
        gopSize?: number;
        gopSizeUnits?: string;
        scanType?: string;
        subgopLength?: string;
        timecodeBurninSettings?: outputs.medialive.ChannelTimecodeBurninSettings;
        timecodeInsertion?: string;
    }

    export interface ChannelMsSmoothGroupSettings {
        acquisitionPointId?: string;
        audioOnlyTimecodeControl?: string;
        certificateMode?: string;
        connectionRetryInterval?: number;
        destination?: outputs.medialive.ChannelOutputLocationRef;
        eventId?: string;
        eventIdMode?: string;
        eventStopBehavior?: string;
        filecacheDuration?: number;
        fragmentLength?: number;
        inputLossAction?: string;
        numRetries?: number;
        restartDelay?: number;
        segmentationMode?: string;
        sendDelayMs?: number;
        sparseTrackType?: string;
        streamManifestBehavior?: string;
        timestampOffset?: string;
        timestampOffsetMode?: string;
    }

    export interface ChannelMsSmoothOutputSettings {
        h265PackagingType?: string;
        nameModifier?: string;
    }

    export interface ChannelMultiplexGroupSettings {
    }

    export interface ChannelMultiplexOutputSettings {
        destination?: outputs.medialive.ChannelOutputLocationRef;
    }

    export interface ChannelMultiplexProgramChannelDestinationSettings {
        multiplexId?: string;
        programName?: string;
    }

    export interface ChannelNetworkInputSettings {
        hlsInputSettings?: outputs.medialive.ChannelHlsInputSettings;
        serverValidation?: string;
    }

    export interface ChannelNielsenCbet {
        cbetCheckDigitString?: string;
        cbetStepaside?: string;
        csid?: string;
    }

    export interface ChannelNielsenConfiguration {
        distributorId?: string;
        nielsenPcmToId3Tagging?: string;
    }

    export interface ChannelNielsenNaesIiNw {
        checkDigitString?: string;
        sid?: number;
        timezone?: string;
    }

    export interface ChannelNielsenWatermarksSettings {
        nielsenCbetSettings?: outputs.medialive.ChannelNielsenCbet;
        nielsenDistributionType?: string;
        nielsenNaesIiNwSettings?: outputs.medialive.ChannelNielsenNaesIiNw;
    }

    export interface ChannelOutput {
        audioDescriptionNames?: string[];
        captionDescriptionNames?: string[];
        outputName?: string;
        outputSettings?: outputs.medialive.ChannelOutputSettings;
        videoDescriptionName?: string;
    }

    export interface ChannelOutputDestination {
        id?: string;
        mediaPackageSettings?: outputs.medialive.ChannelMediaPackageOutputDestinationSettings[];
        multiplexSettings?: outputs.medialive.ChannelMultiplexProgramChannelDestinationSettings;
        settings?: outputs.medialive.ChannelOutputDestinationSettings[];
    }

    export interface ChannelOutputDestinationSettings {
        passwordParam?: string;
        streamName?: string;
        url?: string;
        username?: string;
    }

    export interface ChannelOutputGroup {
        name?: string;
        outputGroupSettings?: outputs.medialive.ChannelOutputGroupSettings;
        outputs?: outputs.medialive.ChannelOutput[];
    }

    export interface ChannelOutputGroupSettings {
        archiveGroupSettings?: outputs.medialive.ChannelArchiveGroupSettings;
        frameCaptureGroupSettings?: outputs.medialive.ChannelFrameCaptureGroupSettings;
        hlsGroupSettings?: outputs.medialive.ChannelHlsGroupSettings;
        mediaPackageGroupSettings?: outputs.medialive.ChannelMediaPackageGroupSettings;
        msSmoothGroupSettings?: outputs.medialive.ChannelMsSmoothGroupSettings;
        multiplexGroupSettings?: outputs.medialive.ChannelMultiplexGroupSettings;
        rtmpGroupSettings?: outputs.medialive.ChannelRtmpGroupSettings;
        udpGroupSettings?: outputs.medialive.ChannelUdpGroupSettings;
    }

    export interface ChannelOutputLocationRef {
        destinationRefId?: string;
    }

    export interface ChannelOutputLockingSettings {
        epochLockingSettings?: outputs.medialive.ChannelEpochLockingSettings;
        pipelineLockingSettings?: outputs.medialive.ChannelPipelineLockingSettings;
    }

    export interface ChannelOutputSettings {
        archiveOutputSettings?: outputs.medialive.ChannelArchiveOutputSettings;
        frameCaptureOutputSettings?: outputs.medialive.ChannelFrameCaptureOutputSettings;
        hlsOutputSettings?: outputs.medialive.ChannelHlsOutputSettings;
        mediaPackageOutputSettings?: outputs.medialive.ChannelMediaPackageOutputSettings;
        msSmoothOutputSettings?: outputs.medialive.ChannelMsSmoothOutputSettings;
        multiplexOutputSettings?: outputs.medialive.ChannelMultiplexOutputSettings;
        rtmpOutputSettings?: outputs.medialive.ChannelRtmpOutputSettings;
        udpOutputSettings?: outputs.medialive.ChannelUdpOutputSettings;
    }

    export interface ChannelPassThroughSettings {
    }

    export interface ChannelPipelineLockingSettings {
    }

    export interface ChannelRawSettings {
    }

    export interface ChannelRec601Settings {
    }

    export interface ChannelRec709Settings {
    }

    export interface ChannelRemixSettings {
        channelMappings?: outputs.medialive.ChannelAudioChannelMapping[];
        channelsIn?: number;
        channelsOut?: number;
    }

    export interface ChannelRtmpCaptionInfoDestinationSettings {
    }

    export interface ChannelRtmpGroupSettings {
        adMarkers?: string[];
        authenticationScheme?: string;
        cacheFullBehavior?: string;
        cacheLength?: number;
        captionData?: string;
        includeFillerNalUnits?: string;
        inputLossAction?: string;
        restartDelay?: number;
    }

    export interface ChannelRtmpOutputSettings {
        certificateMode?: string;
        connectionRetryInterval?: number;
        destination?: outputs.medialive.ChannelOutputLocationRef;
        numRetries?: number;
    }

    export interface ChannelScte20PlusEmbeddedDestinationSettings {
    }

    export interface ChannelScte20SourceSettings {
        convert608To708?: string;
        source608ChannelNumber?: number;
    }

    export interface ChannelScte27DestinationSettings {
    }

    export interface ChannelScte27SourceSettings {
        ocrLanguage?: string;
        pid?: number;
    }

    export interface ChannelScte35SpliceInsert {
        adAvailOffset?: number;
        noRegionalBlackoutFlag?: string;
        webDeliveryAllowedFlag?: string;
    }

    export interface ChannelScte35TimeSignalApos {
        adAvailOffset?: number;
        noRegionalBlackoutFlag?: string;
        webDeliveryAllowedFlag?: string;
    }

    export interface ChannelSmpteTtDestinationSettings {
    }

    export interface ChannelStandardHlsSettings {
        audioRenditionSets?: string;
        m3u8Settings?: outputs.medialive.ChannelM3u8Settings;
    }

    export interface ChannelStaticKeySettings {
        keyProviderServer?: outputs.medialive.ChannelInputLocation;
        staticKeyValue?: string;
    }

    export interface ChannelTeletextDestinationSettings {
    }

    export interface ChannelTeletextSourceSettings {
        outputRectangle?: outputs.medialive.ChannelCaptionRectangle;
        pageNumber?: string;
    }

    export interface ChannelTemporalFilterSettings {
        postFilterSharpening?: string;
        strength?: string;
    }

    export interface ChannelThumbnailConfiguration {
        state?: string;
    }

    export interface ChannelTimecodeBurninSettings {
        fontSize?: string;
        position?: string;
        prefix?: string;
    }

    export interface ChannelTimecodeConfig {
        source?: string;
        syncThreshold?: number;
    }

    export interface ChannelTtmlDestinationSettings {
        styleControl?: string;
    }

    export interface ChannelUdpContainerSettings {
        m2tsSettings?: outputs.medialive.ChannelM2tsSettings;
    }

    export interface ChannelUdpGroupSettings {
        inputLossAction?: string;
        timedMetadataId3Frame?: string;
        timedMetadataId3Period?: number;
    }

    export interface ChannelUdpOutputSettings {
        bufferMsec?: number;
        containerSettings?: outputs.medialive.ChannelUdpContainerSettings;
        destination?: outputs.medialive.ChannelOutputLocationRef;
        fecOutputSettings?: outputs.medialive.ChannelFecOutputSettings;
    }

    export interface ChannelVideoBlackFailoverSettings {
        blackDetectThreshold?: number;
        videoBlackThresholdMsec?: number;
    }

    export interface ChannelVideoCodecSettings {
        frameCaptureSettings?: outputs.medialive.ChannelFrameCaptureSettings;
        h264Settings?: outputs.medialive.ChannelH264Settings;
        h265Settings?: outputs.medialive.ChannelH265Settings;
        mpeg2Settings?: outputs.medialive.ChannelMpeg2Settings;
    }

    export interface ChannelVideoDescription {
        codecSettings?: outputs.medialive.ChannelVideoCodecSettings;
        height?: number;
        name?: string;
        respondToAfd?: string;
        scalingBehavior?: string;
        sharpness?: number;
        width?: number;
    }

    export interface ChannelVideoSelector {
        colorSpace?: string;
        colorSpaceSettings?: outputs.medialive.ChannelVideoSelectorColorSpaceSettings;
        colorSpaceUsage?: string;
        selectorSettings?: outputs.medialive.ChannelVideoSelectorSettings;
    }

    export interface ChannelVideoSelectorColorSpaceSettings {
        hdr10Settings?: outputs.medialive.ChannelHdr10Settings;
    }

    export interface ChannelVideoSelectorPid {
        pid?: number;
    }

    export interface ChannelVideoSelectorProgramId {
        programId?: number;
    }

    export interface ChannelVideoSelectorSettings {
        videoSelectorPid?: outputs.medialive.ChannelVideoSelectorPid;
        videoSelectorProgramId?: outputs.medialive.ChannelVideoSelectorProgramId;
    }

    export interface ChannelVpcOutputSettings {
        publicAddressAllocationIds?: string[];
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface ChannelWavSettings {
        bitDepth?: number;
        codingMode?: string;
        sampleRate?: number;
    }

    export interface ChannelWebvttDestinationSettings {
        styleControl?: string;
    }

    export interface InputDestinationRequest {
        streamName?: string;
    }

    export interface InputDeviceSettings {
        id?: string;
    }

    export interface InputMediaConnectFlowRequest {
        flowArn?: string;
    }

    export interface InputSecurityGroupInputWhitelistRuleCidr {
        cidr?: string;
    }

    export interface InputSourceRequest {
        passwordParam?: string;
        url?: string;
        username?: string;
    }

    export interface InputVpcRequest {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    /**
     * Multiplex MediaConnect output destination settings.
     */
    export interface MultiplexOutputDestination {
        /**
         * Multiplex MediaConnect output destination settings.
         */
        multiplexMediaConnectOutputDestinationSettings?: outputs.medialive.MultiplexOutputDestinationMultiplexMediaConnectOutputDestinationSettingsProperties;
    }

    /**
     * Multiplex MediaConnect output destination settings.
     */
    export interface MultiplexOutputDestinationMultiplexMediaConnectOutputDestinationSettingsProperties {
        /**
         * The MediaConnect entitlement ARN available as a Flow source.
         */
        entitlementArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MultiplexSettings {
        /**
         * Maximum video buffer delay in milliseconds.
         */
        maximumVideoBufferDelayMilliseconds?: number;
        /**
         * Transport stream bit rate.
         */
        transportStreamBitrate: number;
        /**
         * Transport stream ID.
         */
        transportStreamId: number;
        /**
         * Transport stream reserved bit rate.
         */
        transportStreamReservedBitrate?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MultiplexTags {
        key?: string;
        value?: string;
    }

    /**
     * Packet identifiers map for a given Multiplex program.
     */
    export interface MultiplexprogramMultiplexProgramPacketIdentifiersMap {
        audioPids?: number[];
        dvbSubPids?: number[];
        dvbTeletextPid?: number;
        etvPlatformPid?: number;
        etvSignalPid?: number;
        klvDataPids?: number[];
        pcrPid?: number;
        pmtPid?: number;
        privateMetadataPid?: number;
        scte27Pids?: number[];
        scte35Pid?: number;
        timedMetadataPid?: number;
        videoPid?: number;
    }

    /**
     * The current source for one of the pipelines in the multiplex.
     */
    export interface MultiplexprogramMultiplexProgramPipelineDetail {
        /**
         * Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
         */
        activeChannelPipeline?: string;
        /**
         * Identifies a specific pipeline in the multiplex.
         */
        pipelineId?: string;
    }

    /**
     * Transport stream service descriptor configuration for the Multiplex program.
     */
    export interface MultiplexprogramMultiplexProgramServiceDescriptor {
        /**
         * Name of the provider.
         */
        providerName: string;
        /**
         * Name of the service.
         */
        serviceName: string;
    }

    /**
     * Multiplex Program settings configuration.
     */
    export interface MultiplexprogramMultiplexProgramSettings {
        preferredChannelPipeline?: enums.medialive.MultiplexprogramPreferredChannelPipeline;
        /**
         * Unique program number.
         */
        programNumber: number;
        /**
         * Transport stream service descriptor configuration for the Multiplex program.
         */
        serviceDescriptor?: outputs.medialive.MultiplexprogramMultiplexProgramServiceDescriptor;
        /**
         * Program video settings configuration.
         */
        videoSettings?: outputs.medialive.MultiplexprogramMultiplexVideoSettings;
    }

    /**
     * The video configuration for each program in a multiplex.
     */
    export interface MultiplexprogramMultiplexVideoSettings {
    }

}

export namespace mediapackage {
    /**
     * The endpoint URL used to access an Asset using one PackagingConfiguration.
     */
    export interface AssetEgressEndpoint {
        /**
         * The ID of the PackagingConfiguration being applied to the Asset.
         */
        packagingConfigurationId: string;
        /**
         * The URL of the parent manifest for the repackaged Asset.
         */
        url: string;
    }

    export interface AssetTag {
        key: string;
        value: string;
    }

    /**
     * An HTTP Live Streaming (HLS) ingest resource configuration.
     */
    export interface ChannelHlsIngest {
        /**
         * A list of endpoints to which the source stream should be sent.
         */
        ingestEndpoints?: outputs.mediapackage.ChannelIngestEndpoint[];
    }

    /**
     * An endpoint for ingesting source content for a Channel.
     */
    export interface ChannelIngestEndpoint {
        /**
         * The system generated unique identifier for the IngestEndpoint
         */
        id: string;
        /**
         * The system generated password for ingest authentication.
         */
        password: string;
        /**
         * The ingest URL to which the source stream should be sent.
         */
        url: string;
        /**
         * The system generated username for ingest authentication.
         */
        username: string;
    }

    export interface ChannelLogConfiguration {
        /**
         * Sets a custom AWS CloudWatch log group name for access logs. If a log group name isn't specified, the defaults are used: /aws/MediaPackage/EgressAccessLogs for egress access logs and /aws/MediaPackage/IngressAccessLogs for ingress access logs.
         */
        logGroupName?: string;
    }

    export interface ChannelTag {
        key: string;
        value: string;
    }

    /**
     * CDN Authorization credentials
     */
    export interface OriginEndpointAuthorization {
        /**
         * The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.
         */
        cdnIdentifierSecret: string;
        /**
         * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
         */
        secretsRoleArn: string;
    }

    /**
     * A Common Media Application Format (CMAF) encryption configuration.
     */
    export interface OriginEndpointCmafEncryption {
        /**
         * An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
         */
        constantInitializationVector?: string;
        /**
         * The encryption method used
         */
        encryptionMethod?: enums.mediapackage.OriginEndpointCmafEncryptionEncryptionMethod;
        /**
         * Time (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Common Media Application Format (CMAF) packaging configuration.
     */
    export interface OriginEndpointCmafPackage {
        encryption?: outputs.mediapackage.OriginEndpointCmafEncryption;
        /**
         * A list of HLS manifest configurations
         */
        hlsManifests?: outputs.mediapackage.OriginEndpointHlsManifest[];
        /**
         * Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
         */
        segmentPrefix?: string;
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
     */
    export interface OriginEndpointDashEncryption {
        /**
         * Time (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
     */
    export interface OriginEndpointDashPackage {
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointDashPackageAdTriggersItem[];
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        encryption?: outputs.mediapackage.OriginEndpointDashEncryption;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         */
        manifestLayout?: enums.mediapackage.OriginEndpointDashPackageManifestLayout;
        /**
         * Time window (in seconds) contained in each manifest.
         */
        manifestWindowSeconds?: number;
        /**
         * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         */
        minBufferTimeSeconds?: number;
        /**
         * Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
         */
        minUpdatePeriodSeconds?: number;
        /**
         * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
         */
        periodTriggers?: enums.mediapackage.OriginEndpointDashPackagePeriodTriggersItem[];
        /**
         * The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
         */
        profile?: enums.mediapackage.OriginEndpointDashPackageProfile;
        /**
         * Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         */
        segmentTemplateFormat?: enums.mediapackage.OriginEndpointDashPackageSegmentTemplateFormat;
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
        /**
         * Duration (in seconds) to delay live content before presentation.
         */
        suggestedPresentationDelaySeconds?: number;
        /**
         * Determines the type of UTCTiming included in the Media Presentation Description (MPD)
         */
        utcTiming?: enums.mediapackage.OriginEndpointDashPackageUtcTiming;
        /**
         * Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
         */
        utcTimingUri?: string;
    }

    /**
     * The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
     */
    export interface OriginEndpointEncryptionContractConfiguration {
        /**
         * A collection of audio encryption presets.
         */
        presetSpeke20Audio: enums.mediapackage.OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio;
        /**
         * A collection of video encryption presets.
         */
        presetSpeke20Video: enums.mediapackage.OriginEndpointEncryptionContractConfigurationPresetSpeke20Video;
    }

    /**
     * An HTTP Live Streaming (HLS) encryption configuration.
     */
    export interface OriginEndpointHlsEncryption {
        /**
         * A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
         */
        constantInitializationVector?: string;
        /**
         * The encryption method to use.
         */
        encryptionMethod?: enums.mediapackage.OriginEndpointHlsEncryptionEncryptionMethod;
        /**
         * Interval (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        /**
         * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
         */
        repeatExtXKey?: boolean;
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A HTTP Live Streaming (HLS) manifest configuration.
     */
    export interface OriginEndpointHlsManifest {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         */
        adMarkers?: enums.mediapackage.OriginEndpointHlsManifestAdMarkers;
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointHlsManifestAdTriggersItem[];
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        /**
         * The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
         */
        id: string;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
         */
        manifestName?: string;
        /**
         * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         */
        playlistType?: enums.mediapackage.OriginEndpointHlsManifestPlaylistType;
        /**
         * Time window (in seconds) contained in each parent manifest.
         */
        playlistWindowSeconds?: number;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * The URL of the packaged OriginEndpoint for consumption.
         */
        url?: string;
    }

    /**
     * An HTTP Live Streaming (HLS) packaging configuration.
     */
    export interface OriginEndpointHlsPackage {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         */
        adMarkers?: enums.mediapackage.OriginEndpointHlsPackageAdMarkers;
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointHlsPackageAdTriggersItem[];
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        encryption?: outputs.mediapackage.OriginEndpointHlsEncryption;
        /**
         * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
         */
        includeDvbSubtitles?: boolean;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         */
        playlistType?: enums.mediapackage.OriginEndpointHlsPackagePlaylistType;
        /**
         * Time window (in seconds) contained in each parent manifest.
         */
        playlistWindowSeconds?: number;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
         */
        segmentDurationSeconds?: number;
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
        /**
         * When enabled, audio streams will be placed in rendition groups in the output.
         */
        useAudioRenditionGroup?: boolean;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) encryption configuration.
     */
    export interface OriginEndpointMssEncryption {
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) packaging configuration.
     */
    export interface OriginEndpointMssPackage {
        encryption?: outputs.mediapackage.OriginEndpointMssEncryption;
        /**
         * The time window (in seconds) contained in each manifest.
         */
        manifestWindowSeconds?: number;
        /**
         * The duration (in seconds) of each segment.
         */
        segmentDurationSeconds?: number;
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
    }

    /**
     * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
     */
    export interface OriginEndpointSpekeKeyProvider {
        /**
         * An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.
         */
        certificateArn?: string;
        encryptionContractConfiguration?: outputs.mediapackage.OriginEndpointEncryptionContractConfiguration;
        /**
         * The resource ID to include in key requests.
         */
        resourceId: string;
        /**
         * An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
         */
        roleArn: string;
        /**
         * The system IDs to include in key requests.
         */
        systemIds: string[];
        /**
         * The URL of the external key provider service.
         */
        url: string;
    }

    /**
     * A StreamSelection configuration.
     */
    export interface OriginEndpointStreamSelection {
        /**
         * The maximum video bitrate (bps) to include in output.
         */
        maxVideoBitsPerSecond?: number;
        /**
         * The minimum video bitrate (bps) to include in output.
         */
        minVideoBitsPerSecond?: number;
        /**
         * A directive that determines the order of streams in the output.
         */
        streamOrder?: enums.mediapackage.OriginEndpointStreamSelectionStreamOrder;
    }

    export interface OriginEndpointTag {
        key: string;
        value: string;
    }

    /**
     * A CMAF encryption configuration.
     */
    export interface PackagingConfigurationCmafEncryption {
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A CMAF packaging configuration.
     */
    export interface PackagingConfigurationCmafPackage {
        encryption?: outputs.mediapackage.PackagingConfigurationCmafEncryption;
        /**
         * A list of HLS manifest configurations.
         */
        hlsManifests: outputs.mediapackage.PackagingConfigurationHlsManifest[];
        /**
         * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         */
        includeEncoderConfigurationInSegments?: boolean;
        segmentDurationSeconds?: number;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
     */
    export interface PackagingConfigurationDashEncryption {
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A DASH manifest configuration.
     */
    export interface PackagingConfigurationDashManifest {
        /**
         * Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         */
        manifestLayout?: enums.mediapackage.PackagingConfigurationDashManifestManifestLayout;
        manifestName?: string;
        /**
         * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         */
        minBufferTimeSeconds?: number;
        /**
         * The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
         */
        profile?: enums.mediapackage.PackagingConfigurationDashManifestProfile;
        /**
         * The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
         */
        scteMarkersSource?: enums.mediapackage.PackagingConfigurationDashManifestScteMarkersSource;
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
     */
    export interface PackagingConfigurationDashPackage {
        /**
         * A list of DASH manifest configurations.
         */
        dashManifests: outputs.mediapackage.PackagingConfigurationDashManifest[];
        encryption?: outputs.mediapackage.PackagingConfigurationDashEncryption;
        /**
         * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         */
        includeEncoderConfigurationInSegments?: boolean;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Asset contains SCTE-35 ad markers.
         */
        periodTriggers?: enums.mediapackage.PackagingConfigurationDashPackagePeriodTriggersItem[];
        segmentDurationSeconds?: number;
        /**
         * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         */
        segmentTemplateFormat?: enums.mediapackage.PackagingConfigurationDashPackageSegmentTemplateFormat;
    }

    /**
     * The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
     */
    export interface PackagingConfigurationEncryptionContractConfiguration {
        /**
         * A collection of audio encryption presets.
         */
        presetSpeke20Audio: enums.mediapackage.PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio;
        /**
         * A collection of video encryption presets.
         */
        presetSpeke20Video: enums.mediapackage.PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video;
    }

    /**
     * An HTTP Live Streaming (HLS) encryption configuration.
     */
    export interface PackagingConfigurationHlsEncryption {
        /**
         * An HTTP Live Streaming (HLS) encryption configuration.
         */
        constantInitializationVector?: string;
        /**
         * The encryption method to use.
         */
        encryptionMethod?: enums.mediapackage.PackagingConfigurationHlsEncryptionEncryptionMethod;
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * An HTTP Live Streaming (HLS) manifest configuration.
     */
    export interface PackagingConfigurationHlsManifest {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
         */
        adMarkers?: enums.mediapackage.PackagingConfigurationHlsManifestAdMarkers;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        manifestName?: string;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
         */
        repeatExtXKey?: boolean;
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * An HTTP Live Streaming (HLS) packaging configuration.
     */
    export interface PackagingConfigurationHlsPackage {
        encryption?: outputs.mediapackage.PackagingConfigurationHlsEncryption;
        /**
         * A list of HLS manifest configurations.
         */
        hlsManifests: outputs.mediapackage.PackagingConfigurationHlsManifest[];
        /**
         * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
         */
        includeDvbSubtitles?: boolean;
        segmentDurationSeconds?: number;
        /**
         * When enabled, audio streams will be placed in rendition groups in the output.
         */
        useAudioRenditionGroup?: boolean;
    }

    /**
     * A CMAF encryption configuration.
     */
    export interface PackagingConfigurationMssEncryption {
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) manifest configuration.
     */
    export interface PackagingConfigurationMssManifest {
        manifestName?: string;
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
     */
    export interface PackagingConfigurationMssPackage {
        encryption?: outputs.mediapackage.PackagingConfigurationMssEncryption;
        /**
         * A list of MSS manifest configurations.
         */
        mssManifests: outputs.mediapackage.PackagingConfigurationMssManifest[];
        segmentDurationSeconds?: number;
    }

    /**
     * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
     */
    export interface PackagingConfigurationSpekeKeyProvider {
        encryptionContractConfiguration?: outputs.mediapackage.PackagingConfigurationEncryptionContractConfiguration;
        roleArn: string;
        /**
         * The system IDs to include in key requests.
         */
        systemIds: string[];
        /**
         * The URL of the external key provider service.
         */
        url: string;
    }

    /**
     * A StreamSelection configuration.
     */
    export interface PackagingConfigurationStreamSelection {
        /**
         * The maximum video bitrate (bps) to include in output.
         */
        maxVideoBitsPerSecond?: number;
        /**
         * The minimum video bitrate (bps) to include in output.
         */
        minVideoBitsPerSecond?: number;
        /**
         * A directive that determines the order of streams in the output.
         */
        streamOrder?: enums.mediapackage.PackagingConfigurationStreamSelectionStreamOrder;
    }

    export interface PackagingConfigurationTag {
        key: string;
        value: string;
    }

    export interface PackagingGroupAuthorization {
        /**
         * The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
         */
        cdnIdentifierSecret: string;
        /**
         * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
         */
        secretsRoleArn: string;
    }

    export interface PackagingGroupLogConfiguration {
        /**
         * Sets a custom AWS CloudWatch log group name for egress logs. If a log group name isn't specified, the default name is used: /aws/MediaPackage/VodEgressAccessLogs.
         */
        logGroupName?: string;
    }

    export interface PackagingGroupTag {
        key: string;
        value: string;
    }

}

export namespace mediapackagev2 {
    export interface ChannelGroupTag {
        key?: string;
        value?: string;
    }

    export interface ChannelIngestEndpoint {
        id?: string;
        url?: string;
    }

    export interface ChannelTag {
        key?: string;
        value?: string;
    }

    /**
     * <p>The parameters for encrypting content.</p>
     */
    export interface OriginEndpointEncryption {
        /**
         * <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
         */
        constantInitializationVector?: string;
        encryptionMethod: outputs.mediapackagev2.OriginEndpointEncryptionMethod;
        /**
         * <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
         *          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
         *          </p>
         */
        keyRotationIntervalSeconds?: number;
        spekeKeyProvider: outputs.mediapackagev2.OriginEndpointSpekeKeyProvider;
    }

    /**
     * <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
     */
    export interface OriginEndpointEncryptionContractConfiguration {
        presetSpeke20Audio: enums.mediapackagev2.OriginEndpointPresetSpeke20Audio;
        presetSpeke20Video: enums.mediapackagev2.OriginEndpointPresetSpeke20Video;
    }

    /**
     * <p>The encryption type.</p>
     */
    export interface OriginEndpointEncryptionMethod {
        cmafEncryptionMethod?: enums.mediapackagev2.OriginEndpointCmafEncryptionMethod;
        tsEncryptionMethod?: enums.mediapackagev2.OriginEndpointTsEncryptionMethod;
    }

    /**
     * <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
     */
    export interface OriginEndpointFilterConfiguration {
        /**
         * <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
         */
        end?: string;
        /**
         * <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
         */
        manifestFilter?: string;
        /**
         * <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
         */
        start?: string;
        /**
         * <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
         */
        timeDelaySeconds?: number;
    }

    /**
     * <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
     */
    export interface OriginEndpointHlsManifestConfiguration {
        /**
         * <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        childManifestName?: string;
        filterConfiguration?: outputs.mediapackagev2.OriginEndpointFilterConfiguration;
        /**
         * <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        manifestName: string;
        /**
         * <p>The total duration (in seconds) of the manifest's content.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
         *          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
         *          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
         *          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
         *          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
         */
        programDateTimeIntervalSeconds?: number;
        scteHls?: outputs.mediapackagev2.OriginEndpointScteHls;
        /**
         * <p>The egress domain URL for stream delivery from MediaPackage.</p>
         */
        url?: string;
    }

    /**
     * <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
     */
    export interface OriginEndpointLowLatencyHlsManifestConfiguration {
        /**
         * <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        childManifestName?: string;
        filterConfiguration?: outputs.mediapackagev2.OriginEndpointFilterConfiguration;
        /**
         * <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        manifestName: string;
        /**
         * <p>The total duration (in seconds) of the manifest's content.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
         *          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
         *          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
         *          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
         *          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
         */
        programDateTimeIntervalSeconds?: number;
        scteHls?: outputs.mediapackagev2.OriginEndpointScteHls;
        /**
         * <p>The egress domain URL for stream delivery from MediaPackage.</p>
         */
        url?: string;
    }

    /**
     * <p>The SCTE configuration.</p>
     */
    export interface OriginEndpointScte {
        /**
         * <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
         */
        scteFilter?: enums.mediapackagev2.OriginEndpointScteFilter[];
    }

    /**
     * <p>The SCTE configuration.</p>
     */
    export interface OriginEndpointScteHls {
        adMarkerHls?: enums.mediapackagev2.OriginEndpointAdMarkerHls;
    }

    /**
     * <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
     */
    export interface OriginEndpointSegment {
        encryption?: outputs.mediapackagev2.OriginEndpointEncryption;
        /**
         * <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
         */
        includeIframeOnlyStreams?: boolean;
        scte?: outputs.mediapackagev2.OriginEndpointScte;
        /**
         * <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
         */
        segmentDurationSeconds?: number;
        /**
         * <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
         */
        segmentName?: string;
        /**
         * <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
         */
        tsIncludeDvbSubtitles?: boolean;
        /**
         * <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
         */
        tsUseAudioRenditionGroup?: boolean;
    }

    /**
     * <p>The parameters for the SPEKE key provider.</p>
     */
    export interface OriginEndpointSpekeKeyProvider {
        /**
         * <p>The DRM solution provider you're using to protect your content during distribution.</p>
         */
        drmSystems: enums.mediapackagev2.OriginEndpointDrmSystem[];
        encryptionContractConfiguration: outputs.mediapackagev2.OriginEndpointEncryptionContractConfiguration;
        /**
         * <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
         *          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
         *          </p>
         */
        resourceId: string;
        /**
         * <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
         *          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
         *          </p>
         */
        roleArn: string;
        /**
         * <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
         *          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
         *          </p>
         */
        url: string;
    }

    export interface OriginEndpointTag {
        key?: string;
        value?: string;
    }

}

export namespace mediastore {
    export interface ContainerCorsRule {
        allowedHeaders?: string[];
        allowedMethods?: string[];
        allowedOrigins?: string[];
        exposeHeaders?: string[];
        maxAgeSeconds?: number;
    }

    export interface ContainerMetricPolicy {
        containerLevelMetrics: string;
        metricPolicyRules?: outputs.mediastore.ContainerMetricPolicyRule[];
    }

    export interface ContainerMetricPolicyRule {
        objectGroup: string;
        objectGroupName: string;
    }

    export interface ContainerTag {
        key: string;
        value: string;
    }

}

export namespace mediatailor {
    /**
     * <p>Dash manifest configuration parameters.</p>
     */
    export interface ChannelDashPlaylistSettings {
        /**
         * <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        minBufferTimeSeconds?: number;
        /**
         * <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        minUpdatePeriodSeconds?: number;
        /**
         * <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        suggestedPresentationDelaySeconds?: number;
    }

    /**
     * <p>HLS playlist configuration parameters.</p>
     */
    export interface ChannelHlsPlaylistSettings {
        /**
         * <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
         */
        adMarkupType?: enums.mediatailor.ChannelAdMarkupType[];
        /**
         * <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
         */
        manifestWindowSeconds?: number;
    }

    /**
     * <p>The log configuration for the channel.</p>
     */
    export interface ChannelLogConfigurationForChannel {
        /**
         * <p>The log types.</p>
         */
        logTypes?: enums.mediatailor.ChannelLogType[];
    }

    /**
     * <p>The output configuration for this channel.</p>
     */
    export interface ChannelRequestOutputItem {
        dashPlaylistSettings?: outputs.mediatailor.ChannelDashPlaylistSettings;
        hlsPlaylistSettings?: outputs.mediatailor.ChannelHlsPlaylistSettings;
        /**
         * <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
         */
        manifestName: string;
        /**
         * <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
         */
        sourceGroup: string;
    }

    /**
     * <p>Slate VOD source configuration.</p>
     */
    export interface ChannelSlateSource {
        /**
         * <p>The name of the source location where the slate VOD source is stored.</p>
         */
        sourceLocationName?: string;
        /**
         * <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
         */
        vodSourceName?: string;
    }

    export interface ChannelTag {
        key: string;
        value: string;
    }

    /**
     * <p>The configuration for time-shifted viewing.</p>
     */
    export interface ChannelTimeShiftConfiguration {
        /**
         * <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
         */
        maxTimeDelaySeconds: number;
    }

    /**
     * <p>The HTTP package configuration properties for the requested VOD source.</p>
     */
    export interface LiveSourceHttpPackageConfiguration {
        /**
         * <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
         */
        path: string;
        /**
         * <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
         */
        sourceGroup: string;
        type: enums.mediatailor.LiveSourceType;
    }

    export interface LiveSourceTag {
        key: string;
        value: string;
    }

    /**
     * For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
     */
    export interface PlaybackConfigurationAdMarkerPassthrough {
        /**
         * Enables ad marker passthrough for your configuration.
         */
        enabled?: boolean;
    }

    /**
     * The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
     */
    export interface PlaybackConfigurationAvailSuppression {
        /**
         * Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
         */
        mode?: enums.mediatailor.PlaybackConfigurationAvailSuppressionMode;
        /**
         * A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
         */
        value?: string;
    }

    /**
     * The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
     */
    export interface PlaybackConfigurationBumper {
        /**
         * The URL for the end bumper asset.
         */
        endUrl?: string;
        /**
         * The URL for the start bumper asset.
         */
        startUrl?: string;
    }

    /**
     * The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
     */
    export interface PlaybackConfigurationCdnConfiguration {
        /**
         * A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
         */
        adSegmentUrlPrefix?: string;
        /**
         * A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
         */
        contentSegmentUrlPrefix?: string;
    }

    /**
     * The configuration for DASH PUT operations.
     */
    export interface PlaybackConfigurationDashConfiguration {
        /**
         * The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
         */
        manifestEndpointPrefix?: string;
        /**
         * The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
         */
        mpdLocation?: string;
        /**
         * The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
         */
        originManifestType?: enums.mediatailor.PlaybackConfigurationDashConfigurationOriginManifestType;
    }

    export interface PlaybackConfigurationHlsConfiguration {
        /**
         * The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
         */
        manifestEndpointPrefix?: string;
    }

    /**
     * The configuration for pre-roll ad insertion.
     */
    export interface PlaybackConfigurationLivePreRollConfiguration {
        /**
         * The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
         */
        adDecisionServerUrl?: string;
        /**
         * The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
         */
        maxDurationSeconds?: number;
    }

    /**
     * The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
     */
    export interface PlaybackConfigurationManifestProcessingRules {
        /**
         * For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
         */
        adMarkerPassthrough?: outputs.mediatailor.PlaybackConfigurationAdMarkerPassthrough;
    }

    export interface PlaybackConfigurationTag {
        key: string;
        value: string;
    }

    /**
     * <p>Access configuration parameters.</p>
     */
    export interface SourceLocationAccessConfiguration {
        accessType?: enums.mediatailor.SourceLocationAccessType;
        secretsManagerAccessTokenConfiguration?: outputs.mediatailor.SourceLocationSecretsManagerAccessTokenConfiguration;
    }

    /**
     * <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
     */
    export interface SourceLocationDefaultSegmentDeliveryConfiguration {
        /**
         * <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
         */
        baseUrl?: string;
    }

    /**
     * <p>The HTTP configuration for the source location.</p>
     */
    export interface SourceLocationHttpConfiguration {
        /**
         * <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
         */
        baseUrl: string;
    }

    /**
     * <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
     */
    export interface SourceLocationSecretsManagerAccessTokenConfiguration {
        /**
         * <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
         */
        headerName?: string;
        /**
         * <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
         */
        secretArn?: string;
        /**
         * <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
         */
        secretStringKey?: string;
    }

    /**
     * <p>The segment delivery configuration settings.</p>
     */
    export interface SourceLocationSegmentDeliveryConfiguration {
        /**
         * <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
         */
        baseUrl?: string;
        /**
         * <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
         */
        name?: string;
    }

    export interface SourceLocationTag {
        key: string;
        value: string;
    }

    /**
     * <p>The HTTP package configuration properties for the requested VOD source.</p>
     */
    export interface VodSourceHttpPackageConfiguration {
        /**
         * <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
         */
        path: string;
        /**
         * <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
         */
        sourceGroup: string;
        type: enums.mediatailor.VodSourceType;
    }

    export interface VodSourceTag {
        key: string;
        value: string;
    }

}

export namespace memorydb {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AclTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with 'aws:'. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    export interface AuthenticationModeProperties {
        /**
         * Passwords used for this user account. You can create up to two passwords for each user.
         */
        passwords?: string[];
        /**
         * Type of authentication strategy for this user.
         */
        type?: enums.memorydb.UserAuthenticationModePropertiesType;
    }

    export interface ClusterEndpoint {
        /**
         * The DNS address of the primary read-write node.
         */
        address?: string;
        /**
         * The port number that the engine is listening on. 
         */
        port?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ClusterTag {
        /**
         * The key for the tag. May not be null.
         */
        key: string;
        /**
         * The tag's value. May be null.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ParameterGroupTag {
        /**
         * The key for the tag. May not be null.
         */
        key: string;
        /**
         * The tag's value. May be null.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SubnetGroupTag {
        /**
         * The key for the tag. May not be null.
         */
        key: string;
        /**
         * The tag's value. May be null.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface UserTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with 'aws:'. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

}

export namespace msk {
    export interface ClusterBrokerLogs {
        cloudWatchLogs?: outputs.msk.ClusterCloudWatchLogs;
        firehose?: outputs.msk.ClusterFirehose;
        s3?: outputs.msk.ClusterS3;
    }

    export interface ClusterBrokerNodeGroupInfo {
        brokerAzDistribution?: string;
        clientSubnets: string[];
        connectivityInfo?: outputs.msk.ClusterConnectivityInfo;
        instanceType: string;
        securityGroups?: string[];
        storageInfo?: outputs.msk.ClusterStorageInfo;
    }

    export interface ClusterClientAuthentication {
        sasl?: outputs.msk.ClusterSasl;
        tls?: outputs.msk.ClusterTls;
        unauthenticated?: outputs.msk.ClusterUnauthenticated;
    }

    export interface ClusterCloudWatchLogs {
        enabled: boolean;
        logGroup?: string;
    }

    export interface ClusterConfigurationInfo {
        arn: string;
        revision: number;
    }

    export interface ClusterConnectivityInfo {
        publicAccess?: outputs.msk.ClusterPublicAccess;
        vpcConnectivity?: outputs.msk.ClusterVpcConnectivity;
    }

    export interface ClusterEbsStorageInfo {
        provisionedThroughput?: outputs.msk.ClusterProvisionedThroughput;
        volumeSize?: number;
    }

    export interface ClusterEncryptionAtRest {
        dataVolumeKmsKeyId: string;
    }

    export interface ClusterEncryptionInTransit {
        clientBroker?: enums.msk.ClusterEncryptionInTransitClientBroker;
        inCluster?: boolean;
    }

    export interface ClusterEncryptionInfo {
        encryptionAtRest?: outputs.msk.ClusterEncryptionAtRest;
        encryptionInTransit?: outputs.msk.ClusterEncryptionInTransit;
    }

    export interface ClusterFirehose {
        deliveryStream?: string;
        enabled: boolean;
    }

    export interface ClusterIam {
        enabled: boolean;
    }

    export interface ClusterJmxExporter {
        enabledInBroker: boolean;
    }

    export interface ClusterLoggingInfo {
        brokerLogs: outputs.msk.ClusterBrokerLogs;
    }

    export interface ClusterNodeExporter {
        enabledInBroker: boolean;
    }

    export interface ClusterOpenMonitoring {
        prometheus: outputs.msk.ClusterPrometheus;
    }

    export interface ClusterPrometheus {
        jmxExporter?: outputs.msk.ClusterJmxExporter;
        nodeExporter?: outputs.msk.ClusterNodeExporter;
    }

    export interface ClusterProvisionedThroughput {
        enabled?: boolean;
        volumeThroughput?: number;
    }

    export interface ClusterPublicAccess {
        type?: string;
    }

    export interface ClusterS3 {
        bucket?: string;
        enabled: boolean;
        prefix?: string;
    }

    export interface ClusterSasl {
        iam?: outputs.msk.ClusterIam;
        scram?: outputs.msk.ClusterScram;
    }

    export interface ClusterScram {
        enabled: boolean;
    }

    export interface ClusterStorageInfo {
        ebsStorageInfo?: outputs.msk.ClusterEbsStorageInfo;
    }

    export interface ClusterTls {
        certificateAuthorityArnList?: string[];
        enabled?: boolean;
    }

    export interface ClusterUnauthenticated {
        enabled: boolean;
    }

    export interface ClusterVpcConnectivity {
        clientAuthentication?: outputs.msk.ClusterVpcConnectivityClientAuthentication;
    }

    export interface ClusterVpcConnectivityClientAuthentication {
        sasl?: outputs.msk.ClusterVpcConnectivitySasl;
        tls?: outputs.msk.ClusterVpcConnectivityTls;
    }

    export interface ClusterVpcConnectivityIam {
        enabled: boolean;
    }

    export interface ClusterVpcConnectivitySasl {
        iam?: outputs.msk.ClusterVpcConnectivityIam;
        scram?: outputs.msk.ClusterVpcConnectivityScram;
    }

    export interface ClusterVpcConnectivityScram {
        enabled: boolean;
    }

    export interface ClusterVpcConnectivityTls {
        enabled: boolean;
    }

    export interface ConfigurationLatestRevision {
        creationTime?: string;
        description?: string;
        revision?: number;
    }

    /**
     * Details of an Amazon MSK cluster.
     */
    export interface ReplicatorAmazonMskCluster {
        /**
         * The ARN of an Amazon MSK cluster.
         */
        mskClusterArn: string;
    }

    /**
     * Configuration relating to consumer group replication.
     */
    export interface ReplicatorConsumerGroupReplication {
        /**
         * List of regular expression patterns indicating the consumer groups that should not be replicated.
         */
        consumerGroupsToExclude?: string[];
        /**
         * List of regular expression patterns indicating the consumer groups to copy.
         */
        consumerGroupsToReplicate: string[];
        /**
         * Whether to periodically check for new consumer groups.
         */
        detectAndCopyNewConsumerGroups?: boolean;
        /**
         * Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
         */
        synchroniseConsumerGroupOffsets?: boolean;
    }

    /**
     * Details of a Kafka cluster for replication.
     */
    export interface ReplicatorKafkaCluster {
        /**
         * Details of an Amazon MSK cluster. Exactly one of AmazonMskCluster is required.
         */
        amazonMskCluster: outputs.msk.ReplicatorAmazonMskCluster;
        /**
         * Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
         */
        vpcConfig: outputs.msk.ReplicatorKafkaClusterClientVpcConfig;
    }

    /**
     * Details of an Amazon VPC which has network connectivity to the Kafka cluster.
     */
    export interface ReplicatorKafkaClusterClientVpcConfig {
        /**
         * The AWS security groups to associate with the elastic network interfaces in order to specify what the replicator has access to. If a security group is not specified, the default security group associated with the VPC is used.
         */
        securityGroupIds?: string[];
        /**
         * The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
         */
        subnetIds: string[];
    }

    /**
     * Specifies configuration for replication between a source and target Kafka cluster.
     */
    export interface ReplicatorReplicationInfo {
        /**
         * Configuration relating to consumer group replication.
         */
        consumerGroupReplication: outputs.msk.ReplicatorConsumerGroupReplication;
        /**
         * Amazon Resource Name of the source Kafka cluster.
         */
        sourceKafkaClusterArn: string;
        /**
         * The type of compression to use writing records to target Kafka cluster.
         */
        targetCompressionType: enums.msk.ReplicatorReplicationInfoTargetCompressionType;
        /**
         * Amazon Resource Name of the target Kafka cluster.
         */
        targetKafkaClusterArn: string;
        /**
         * Configuration relating to topic replication.
         */
        topicReplication: outputs.msk.ReplicatorTopicReplication;
    }

    export interface ReplicatorTag {
        key: string;
        value: string;
    }

    export interface ReplicatorTopicReplication {
        /**
         * Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
         */
        copyAccessControlListsForTopics?: boolean;
        /**
         * Whether to periodically configure remote topics to match their corresponding upstream topics.
         */
        copyTopicConfigurations?: boolean;
        /**
         * Whether to periodically check for new topics and partitions.
         */
        detectAndCopyNewTopics?: boolean;
        /**
         * List of regular expression patterns indicating the topics that should not be replicated.
         */
        topicsToExclude?: string[];
        /**
         * List of regular expression patterns indicating the topics to copy.
         */
        topicsToReplicate: string[];
    }

    export interface ServerlessClusterClientAuthentication {
        sasl: outputs.msk.ServerlessClusterSasl;
    }

    export interface ServerlessClusterIam {
        enabled: boolean;
    }

    export interface ServerlessClusterSasl {
        iam: outputs.msk.ServerlessClusterIam;
    }

    export interface ServerlessClusterVpcConfig {
        securityGroups?: string[];
        subnetIds: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VpcConnectionTags {
    }

}

export namespace mwaa {
    /**
     * Logging configuration for the environment.
     */
    export interface EnvironmentLoggingConfiguration {
        dagProcessingLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        schedulerLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        taskLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        webserverLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        workerLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
    }

    /**
     * Logging configuration for a specific airflow component.
     */
    export interface EnvironmentModuleLoggingConfiguration {
        cloudWatchLogGroupArn?: string;
        enabled?: boolean;
        logLevel?: enums.mwaa.EnvironmentLoggingLevel;
    }

    /**
     * Configures the network resources of the environment.
     */
    export interface EnvironmentNetworkConfiguration {
        /**
         * A list of security groups to use for the environment.
         */
        securityGroupIds?: string[];
        /**
         * A list of subnets to use for the environment. These must be private subnets, in the same VPC, in two different availability zones.
         */
        subnetIds?: string[];
    }

}

export namespace neptune {
    /**
     * Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
     */
    export interface DbClusterDbClusterRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon Neptune API Reference.
         */
        featureName?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
         */
        roleArn: string;
    }

    export interface DbClusterParameterGroupTag {
        key: string;
        value: string;
    }

    /**
     * Contains the scaling configuration of an Neptune Serverless DB cluster.
     */
    export interface DbClusterServerlessScalingConfiguration {
        /**
         * The maximum number of Neptune capacity units (NCUs) for a DB instance in an Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 40, 40.5, 41, and so on. The smallest value you can use is 2.5, whereas the largest is 128.
         */
        maxCapacity: number;
        /**
         * The minimum number of Neptune capacity units (NCUs) for a DB instance in an Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value you can use is 1, whereas the largest is 128.
         */
        minCapacity: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbClusterTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    export interface DbInstanceTag {
        key: string;
        value: string;
    }

    export interface DbParameterGroupTag {
        key: string;
        value: string;
    }

    export interface DbSubnetGroupTag {
        key: string;
        value: string;
    }

}

export namespace neptunegraph {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface GraphTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    /**
     * The vector search configuration.
     */
    export interface GraphVectorSearchConfiguration {
        /**
         * The vector search dimension
         */
        vectorSearchDimension: number;
    }

}

export namespace networkfirewall {
    export interface FirewallPolicy {
        policyVariables?: outputs.networkfirewall.FirewallPolicyPolicyVariablesProperties;
        statefulDefaultActions?: string[];
        statefulEngineOptions?: outputs.networkfirewall.FirewallPolicyStatefulEngineOptions;
        statefulRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyStatefulRuleGroupReference[];
        statelessCustomActions?: outputs.networkfirewall.FirewallPolicyCustomAction[];
        statelessDefaultActions: string[];
        statelessFragmentDefaultActions: string[];
        statelessRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyStatelessRuleGroupReference[];
        tlsInspectionConfigurationArn?: string;
    }

    export interface FirewallPolicyActionDefinition {
        publishMetricAction?: outputs.networkfirewall.FirewallPolicyPublishMetricAction;
    }

    export interface FirewallPolicyCustomAction {
        actionDefinition: outputs.networkfirewall.FirewallPolicyActionDefinition;
        actionName: string;
    }

    export interface FirewallPolicyDimension {
        value: string;
    }

    export interface FirewallPolicyPolicyVariablesProperties {
        ruleVariables?: outputs.networkfirewall.FirewallPolicyRuleVariables;
    }

    export interface FirewallPolicyPublishMetricAction {
        dimensions: outputs.networkfirewall.FirewallPolicyDimension[];
    }

    export interface FirewallPolicyRuleVariables {
    }

    export interface FirewallPolicyStatefulEngineOptions {
        ruleOrder?: enums.networkfirewall.FirewallPolicyRuleOrder;
        streamExceptionPolicy?: enums.networkfirewall.FirewallPolicyStreamExceptionPolicy;
    }

    export interface FirewallPolicyStatefulRuleGroupOverride {
        action?: enums.networkfirewall.FirewallPolicyOverrideAction;
    }

    export interface FirewallPolicyStatefulRuleGroupReference {
        override?: outputs.networkfirewall.FirewallPolicyStatefulRuleGroupOverride;
        priority?: number;
        resourceArn: string;
    }

    export interface FirewallPolicyStatelessRuleGroupReference {
        priority: number;
        resourceArn: string;
    }

    export interface FirewallPolicyTag {
        key: string;
        value: string;
    }

    export interface FirewallSubnetMapping {
        /**
         * A IPAddressType
         */
        ipAddressType?: string;
        /**
         * A SubnetId.
         */
        subnetId: string;
    }

    export interface FirewallTag {
        key: string;
        value: string;
    }

    export interface LoggingConfiguration {
        logDestinationConfigs: outputs.networkfirewall.LoggingConfigurationLogDestinationConfig[];
    }

    export interface LoggingConfigurationLogDestinationConfig {
        /**
         * A key-value pair to configure the logDestinations.
         */
        logDestination: {[key: string]: string};
        logDestinationType: enums.networkfirewall.LoggingConfigurationLogDestinationConfigLogDestinationType;
        logType: enums.networkfirewall.LoggingConfigurationLogDestinationConfigLogType;
    }

    export interface RuleGroup {
        referenceSets?: outputs.networkfirewall.RuleGroupReferenceSets;
        ruleVariables?: outputs.networkfirewall.RuleGroupRuleVariables;
        rulesSource: outputs.networkfirewall.RuleGroupRulesSource;
        statefulRuleOptions?: outputs.networkfirewall.RuleGroupStatefulRuleOptions;
    }

    export interface RuleGroupActionDefinition {
        publishMetricAction?: outputs.networkfirewall.RuleGroupPublishMetricAction;
    }

    export interface RuleGroupAddress {
        addressDefinition: string;
    }

    export interface RuleGroupCustomAction {
        actionDefinition: outputs.networkfirewall.RuleGroupActionDefinition;
        actionName: string;
    }

    export interface RuleGroupDimension {
        value: string;
    }

    export interface RuleGroupHeader {
        destination: string;
        destinationPort: string;
        direction: enums.networkfirewall.RuleGroupHeaderDirection;
        protocol: enums.networkfirewall.RuleGroupHeaderProtocol;
        source: string;
        sourcePort: string;
    }

    export interface RuleGroupIpSet {
        definition?: string[];
    }

    export interface RuleGroupIpSetReference {
        referenceArn?: string;
    }

    export interface RuleGroupMatchAttributes {
        destinationPorts?: outputs.networkfirewall.RuleGroupPortRange[];
        destinations?: outputs.networkfirewall.RuleGroupAddress[];
        protocols?: number[];
        sourcePorts?: outputs.networkfirewall.RuleGroupPortRange[];
        sources?: outputs.networkfirewall.RuleGroupAddress[];
        tcpFlags?: outputs.networkfirewall.RuleGroupTcpFlagField[];
    }

    export interface RuleGroupPortRange {
        fromPort: number;
        toPort: number;
    }

    export interface RuleGroupPortSet {
        definition?: string[];
    }

    export interface RuleGroupPublishMetricAction {
        dimensions: outputs.networkfirewall.RuleGroupDimension[];
    }

    export interface RuleGroupReferenceSets {
        ipSetReferences?: {[key: string]: outputs.networkfirewall.RuleGroupIpSetReference};
    }

    export interface RuleGroupRuleDefinition {
        actions: string[];
        matchAttributes: outputs.networkfirewall.RuleGroupMatchAttributes;
    }

    export interface RuleGroupRuleOption {
        keyword: string;
        settings?: string[];
    }

    export interface RuleGroupRuleVariables {
        ipSets?: {[key: string]: outputs.networkfirewall.RuleGroupIpSet};
        portSets?: {[key: string]: outputs.networkfirewall.RuleGroupPortSet};
    }

    export interface RuleGroupRulesSource {
        rulesSourceList?: outputs.networkfirewall.RuleGroupRulesSourceList;
        rulesString?: string;
        statefulRules?: outputs.networkfirewall.RuleGroupStatefulRule[];
        statelessRulesAndCustomActions?: outputs.networkfirewall.RuleGroupStatelessRulesAndCustomActions;
    }

    export interface RuleGroupRulesSourceList {
        generatedRulesType: enums.networkfirewall.RuleGroupGeneratedRulesType;
        targetTypes: enums.networkfirewall.RuleGroupTargetType[];
        targets: string[];
    }

    export interface RuleGroupStatefulRule {
        action: enums.networkfirewall.RuleGroupStatefulRuleAction;
        header: outputs.networkfirewall.RuleGroupHeader;
        ruleOptions: outputs.networkfirewall.RuleGroupRuleOption[];
    }

    export interface RuleGroupStatefulRuleOptions {
        ruleOrder?: enums.networkfirewall.RuleGroupRuleOrder;
    }

    export interface RuleGroupStatelessRule {
        priority: number;
        ruleDefinition: outputs.networkfirewall.RuleGroupRuleDefinition;
    }

    export interface RuleGroupStatelessRulesAndCustomActions {
        customActions?: outputs.networkfirewall.RuleGroupCustomAction[];
        statelessRules: outputs.networkfirewall.RuleGroupStatelessRule[];
    }

    export interface RuleGroupTag {
        key: string;
        value: string;
    }

    export interface RuleGroupTcpFlagField {
        flags: enums.networkfirewall.RuleGroupTcpFlag[];
        masks?: enums.networkfirewall.RuleGroupTcpFlag[];
    }

    export interface TlsInspectionConfigurationAddress {
        addressDefinition: string;
    }

    export interface TlsInspectionConfigurationPortRange {
        fromPort: number;
        toPort: number;
    }

    export interface TlsInspectionConfigurationServerCertificate {
        resourceArn?: string;
    }

    export interface TlsInspectionConfigurationServerCertificateConfiguration {
        certificateAuthorityArn?: string;
        checkCertificateRevocationStatus?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusProperties;
        scopes?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateScope[];
        serverCertificates?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificate[];
    }

    export interface TlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusProperties {
        revokedStatusAction?: enums.networkfirewall.TlsInspectionConfigurationRevokedStatusAction;
        unknownStatusAction?: enums.networkfirewall.TlsInspectionConfigurationUnknownStatusAction;
    }

    export interface TlsInspectionConfigurationServerCertificateScope {
        destinationPorts?: outputs.networkfirewall.TlsInspectionConfigurationPortRange[];
        destinations?: outputs.networkfirewall.TlsInspectionConfigurationAddress[];
        protocols?: number[];
        sourcePorts?: outputs.networkfirewall.TlsInspectionConfigurationPortRange[];
        sources?: outputs.networkfirewall.TlsInspectionConfigurationAddress[];
    }

    export interface TlsInspectionConfigurationTag {
        key: string;
        value: string;
    }

    export interface TlsInspectionConfigurationTlsInspectionConfiguration {
        serverCertificateConfigurations?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateConfiguration[];
    }

}

export namespace networkmanager {
    /**
     * Connect attachment options for protocol
     */
    export interface ConnectAttachmentOptions {
        /**
         * Tunnel protocol for connect attachment
         */
        protocol?: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface ConnectAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The list of key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.ConnectAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ConnectAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Bgp configuration for connect peer
     */
    export interface ConnectPeerBgpConfiguration {
        /**
         * The address of a core network.
         */
        coreNetworkAddress?: string;
        /**
         * The ASN of the Coret Network.
         */
        coreNetworkAsn?: number;
        /**
         * The address of a core network Connect peer.
         */
        peerAddress?: string;
        /**
         * The ASN of the Connect peer.
         */
        peerAsn?: number;
    }

    /**
     * Bgp options
     */
    export interface ConnectPeerBgpOptions {
        peerAsn?: number;
    }

    export interface ConnectPeerConfiguration {
        bgpConfigurations?: outputs.networkmanager.ConnectPeerBgpConfiguration[];
        /**
         * The IP address of a core network.
         */
        coreNetworkAddress?: string;
        /**
         * The inside IP addresses used for a Connect peer configuration.
         */
        insideCidrBlocks?: string[];
        /**
         * The IP address of the Connect peer.
         */
        peerAddress?: string;
        protocol?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ConnectPeerTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface CoreNetworkEdge {
        /**
         * The ASN of a core network edge.
         */
        asn?: number;
        /**
         * The Region where a core network edge is located.
         */
        edgeLocation?: string;
        insideCidrBlocks?: string[];
    }

    export interface CoreNetworkSegment {
        edgeLocations?: string[];
        /**
         * Name of segment
         */
        name?: string;
        sharedSegments?: string[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CoreNetworkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The Amazon Web Services location of the device, if applicable.
     */
    export interface DeviceAwsLocation {
        /**
         * The Amazon Resource Name (ARN) of the subnet that the device is located in.
         */
        subnetArn?: string;
        /**
         * The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
         */
        zone?: string;
    }

    /**
     * The site location.
     */
    export interface DeviceLocation {
        /**
         * The physical address.
         */
        address?: string;
        /**
         * The latitude.
         */
        latitude?: string;
        /**
         * The longitude.
         */
        longitude?: string;
    }

    /**
     * A key-value pair to associate with a device resource.
     */
    export interface DeviceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a global network resource.
     */
    export interface GlobalNetworkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The bandwidth for the link.
     */
    export interface LinkBandwidth {
        /**
         * Download speed in Mbps.
         */
        downloadSpeed?: number;
        /**
         * Upload speed in Mbps.
         */
        uploadSpeed?: number;
    }

    /**
     * A key-value pair to associate with a link resource.
     */
    export interface LinkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The location of the site
     */
    export interface SiteLocation {
        /**
         * The physical address.
         */
        address?: string;
        /**
         * The latitude.
         */
        latitude?: string;
        /**
         * The longitude.
         */
        longitude?: string;
    }

    /**
     * A key-value pair to associate with a site resource.
     */
    export interface SiteTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface SiteToSiteVpnAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.SiteToSiteVpnAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SiteToSiteVpnAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TransitGatewayPeeringTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface TransitGatewayRouteTableAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.TransitGatewayRouteTableAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TransitGatewayRouteTableAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface VpcAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.VpcAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VpcAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Vpc options of the attachment.
     */
    export interface VpcAttachmentVpcOptions {
        /**
         * Indicates whether to enable ApplianceModeSupport Support for Vpc Attachment. Valid Values: true | false
         */
        applianceModeSupport?: boolean;
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        ipv6Support?: boolean;
    }

}

export namespace nimblestudio {
    /**
     * <p>A configuration for a streaming session.</p>
     */
    export interface LaunchProfileStreamConfiguration {
        automaticTerminationMode?: enums.nimblestudio.LaunchProfileAutomaticTerminationMode;
        clipboardMode: enums.nimblestudio.LaunchProfileStreamingClipboardMode;
        /**
         * <p>The EC2 instance types that users can select from when launching a streaming session
         *             with this launch profile.</p>
         */
        ec2InstanceTypes: enums.nimblestudio.LaunchProfileStreamingInstanceType[];
        /**
         * <p>The length of time, in minutes, that a streaming session can be active before it is
         *             stopped or terminated. After this point, Nimble Studio automatically terminates or
         *             stops the session. The default length of time is 690 minutes, and the maximum length of
         *             time is 30 days.</p>
         */
        maxSessionLengthInMinutes?: number;
        /**
         * <p>Integer that determines if you can start and stop your sessions and how long a session
         *             can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
         *             5760.</p>
         *          <p>This field is allowed only when <code>sessionPersistenceMode</code> is
         *                 <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
         *                 <code>ACTIVATED</code>.</p>
         *          <p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
         *             call <code>StopStreamingSession</code>, the session fails. If the time that a session
         *             stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
         *             value, the session will automatically be terminated (instead of
         *             <code>STOPPED</code>).</p>
         *          <p>If the value is set to a positive number, the session can be stopped. You can call
         *                 <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
         *             If the time that a session stays in the <code>READY</code> state exceeds the
         *                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
         *             stopped (instead of terminated).</p>
         */
        maxStoppedSessionLengthInMinutes?: number;
        sessionBackup?: outputs.nimblestudio.LaunchProfileStreamConfigurationSessionBackup;
        sessionPersistenceMode?: enums.nimblestudio.LaunchProfileSessionPersistenceMode;
        sessionStorage?: outputs.nimblestudio.LaunchProfileStreamConfigurationSessionStorage;
        /**
         * <p>The streaming images that users can select from when launching a streaming session
         *             with this launch profile.</p>
         */
        streamingImageIds: string[];
        volumeConfiguration?: outputs.nimblestudio.LaunchProfileVolumeConfiguration;
    }

    /**
     * <p>Configures how streaming sessions are backed up when launched from this launch
     *             profile.</p>
     */
    export interface LaunchProfileStreamConfigurationSessionBackup {
        /**
         * <p>The maximum number of backups that each streaming session created from this launch
         *             profile can have.</p>
         */
        maxBackupsToRetain?: number;
        mode?: enums.nimblestudio.LaunchProfileSessionBackupMode;
    }

    /**
     * <p>The configuration for a streaming session’s upload storage.</p>
     */
    export interface LaunchProfileStreamConfigurationSessionStorage {
        /**
         * <p>Allows artists to upload files to their workstations. The only valid option is
         *                 <code>UPLOAD</code>.</p>
         */
        mode: enums.nimblestudio.LaunchProfileStreamingSessionStorageMode[];
        root?: outputs.nimblestudio.LaunchProfileStreamingSessionStorageRoot;
    }

    /**
     * <p>The upload storage root location (folder) on streaming workstations where files are
     *             uploaded.</p>
     */
    export interface LaunchProfileStreamingSessionStorageRoot {
        /**
         * <p>The folder path in Linux workstations where files are uploaded.</p>
         */
        linux?: string;
        /**
         * <p>The folder path in Windows workstations where files are uploaded.</p>
         */
        windows?: string;
    }

    export interface LaunchProfileTags {
    }

    /**
     * <p>Custom volume configuration for the root volumes that are attached to streaming
     *             sessions.</p>
     *          <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
     *                 <code>ACTIVATED</code>.</p>
     */
    export interface LaunchProfileVolumeConfiguration {
        /**
         * <p>The number of I/O operations per second for the root volume that is attached to
         *             streaming session.</p>
         */
        iops?: number;
        /**
         * <p>The size of the root volume that is attached to the streaming session. The root volume
         *             size is measured in GiBs.</p>
         */
        size?: number;
        /**
         * <p>The throughput to provision for the root volume that is attached to the streaming
         *             session. The throughput is measured in MiB/s.</p>
         */
        throughput?: number;
    }

    /**
     * <p>TODO</p>
     */
    export interface StreamingImageEncryptionConfiguration {
        /**
         * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
         */
        keyArn?: string;
        keyType: enums.nimblestudio.StreamingImageEncryptionConfigurationKeyType;
    }

    export interface StreamingImageTags {
    }

    /**
     * <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
     *             pair.</p>
     */
    export interface StudioComponentActiveDirectoryComputerAttribute {
        /**
         * <p>The name for the LDAP attribute.</p>
         */
        name?: string;
        /**
         * <p>The value for the LDAP attribute.</p>
         */
        value?: string;
    }

    /**
     * <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
     *             resource.</p>
     */
    export interface StudioComponentActiveDirectoryConfiguration {
        /**
         * <p>A collection of custom attributes for an Active Directory computer.</p>
         */
        computerAttributes?: outputs.nimblestudio.StudioComponentActiveDirectoryComputerAttribute[];
        /**
         * <p>The directory ID of the Directory Service for Microsoft Active Directory to access
         *             using this studio component.</p>
         */
        directoryId?: string;
        /**
         * <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
         *             computer.</p>
         */
        organizationalUnitDistinguishedName?: string;
    }

    /**
     * <p>The configuration for a render farm that is associated with a studio resource.</p>
     */
    export interface StudioComponentComputeFarmConfiguration {
        /**
         * <p>The name of an Active Directory user that is used on ComputeFarm worker
         *             instances.</p>
         */
        activeDirectoryUser?: string;
        /**
         * <p>The endpoint of the ComputeFarm that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration0Properties {
        activeDirectoryConfiguration: outputs.nimblestudio.StudioComponentActiveDirectoryConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration1Properties {
        computeFarmConfiguration: outputs.nimblestudio.StudioComponentComputeFarmConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration2Properties {
        licenseServiceConfiguration: outputs.nimblestudio.StudioComponentLicenseServiceConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration3Properties {
        sharedFileSystemConfiguration: outputs.nimblestudio.StudioComponentSharedFileSystemConfiguration;
    }

    /**
     * <p>Initialization scripts for studio components.</p>
     */
    export interface StudioComponentInitializationScript {
        /**
         * <p>The version number of the protocol that is used by the launch profile. The only valid
         *             version is "2021-03-31".</p>
         */
        launchProfileProtocolVersion?: string;
        platform?: enums.nimblestudio.StudioComponentLaunchProfilePlatform;
        runContext?: enums.nimblestudio.StudioComponentInitializationScriptRunContext;
        /**
         * <p>The initialization script.</p>
         */
        script?: string;
    }

    /**
     * <p>The configuration for a license service that is associated with a studio
     *             resource.</p>
     */
    export interface StudioComponentLicenseServiceConfiguration {
        /**
         * <p>The endpoint of the license service that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
    }

    /**
     * <p>A parameter for a studio component script, in the form of a key:value pair.</p>
     */
    export interface StudioComponentScriptParameterKeyValue {
        /**
         * <p>A script parameter key.</p>
         */
        key?: string;
        /**
         * <p>A script parameter value.</p>
         */
        value?: string;
    }

    /**
     * <p>The configuration for a shared file storage system that is associated with a studio
     *             resource.</p>
     */
    export interface StudioComponentSharedFileSystemConfiguration {
        /**
         * <p>The endpoint of the shared file system that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
        /**
         * <p>The unique identifier for a file system.</p>
         */
        fileSystemId?: string;
        /**
         * <p>The mount location for a shared file system on a Linux virtual workstation.</p>
         */
        linuxMountPoint?: string;
        /**
         * <p>The name of the file share.</p>
         */
        shareName?: string;
        /**
         * <p>The mount location for a shared file system on a Windows virtual workstation.</p>
         */
        windowsMountDrive?: string;
    }

    export interface StudioComponentTags {
    }

    /**
     * <p>Configuration of the encryption method that is used for the studio.</p>
     */
    export interface StudioEncryptionConfiguration {
        /**
         * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
         */
        keyArn?: string;
        keyType: enums.nimblestudio.StudioEncryptionConfigurationKeyType;
    }

    export interface StudioTags {
    }

}

export namespace omics {
    export interface AnnotationStoreFormatToHeader {
    }

    export interface AnnotationStoreReferenceItem {
        referenceArn: string;
    }

    export interface AnnotationStoreSchemaItem {
    }

    export interface AnnotationStoreSseConfig {
        keyArn?: string;
        type: enums.omics.AnnotationStoreEncryptionType;
    }

    export interface AnnotationStoreStoreOptionsProperties {
        tsvStoreOptions: outputs.omics.AnnotationStoreTsvStoreOptions;
    }

    export interface AnnotationStoreTagMap {
    }

    export interface AnnotationStoreTsvStoreOptions {
        annotationType?: enums.omics.AnnotationStoreAnnotationType;
        formatToHeader?: outputs.omics.AnnotationStoreFormatToHeader;
        schema?: outputs.omics.AnnotationStoreSchemaItem[];
    }

    /**
     * Server-side encryption (SSE) settings for a store.
     */
    export interface ReferenceStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        type: enums.omics.ReferenceStoreEncryptionType;
    }

    export interface ReferenceStoreTagMap {
    }

    /**
     * A map of resource tags
     */
    export interface RunGroupTagMap {
    }

    /**
     * Server-side encryption (SSE) settings for a store.
     */
    export interface SequenceStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        type: enums.omics.SequenceStoreEncryptionType;
    }

    export interface SequenceStoreTagMap {
    }

    export interface VariantStoreReferenceItem {
        referenceArn: string;
    }

    export interface VariantStoreSseConfig {
        keyArn?: string;
        type: enums.omics.VariantStoreEncryptionType;
    }

    export interface VariantStoreTagMap {
    }

    export interface WorkflowParameterTemplate {
    }

    /**
     * A map of resource tags
     */
    export interface WorkflowTagMap {
    }

}

export namespace opensearchserverless {
    /**
     * A key-value pair metadata associated with resource
     */
    export interface CollectionTag {
        /**
         * The key in the key-value pair
         */
        key: string;
        /**
         * The value in the key-value pair
         */
        value: string;
    }

    /**
     * Describes saml options in form of key value map
     */
    export interface SecurityConfigSamlConfigOptions {
        /**
         * Group attribute for this saml integration
         */
        groupAttribute?: string;
        /**
         * The XML saml provider metadata document that you want to use
         */
        metadata: string;
        /**
         * Defines the session timeout in minutes
         */
        sessionTimeout?: number;
        /**
         * Custom attribute for this saml integration
         */
        userAttribute?: string;
    }

}

export namespace opensearchservice {
    export interface DomainAdvancedSecurityOptionsInput {
        anonymousAuthDisableDate?: string;
        anonymousAuthEnabled?: boolean;
        enabled?: boolean;
        internalUserDatabaseEnabled?: boolean;
        masterUserOptions?: outputs.opensearchservice.DomainMasterUserOptions;
        samlOptions?: outputs.opensearchservice.DomainSamlOptions;
    }

    export interface DomainClusterConfig {
        coldStorageOptions?: outputs.opensearchservice.DomainColdStorageOptions;
        dedicatedMasterCount?: number;
        dedicatedMasterEnabled?: boolean;
        dedicatedMasterType?: string;
        instanceCount?: number;
        instanceType?: string;
        multiAzWithStandbyEnabled?: boolean;
        warmCount?: number;
        warmEnabled?: boolean;
        warmType?: string;
        zoneAwarenessConfig?: outputs.opensearchservice.DomainZoneAwarenessConfig;
        zoneAwarenessEnabled?: boolean;
    }

    export interface DomainCognitoOptions {
        enabled?: boolean;
        identityPoolId?: string;
        roleArn?: string;
        userPoolId?: string;
    }

    export interface DomainColdStorageOptions {
        enabled?: boolean;
    }

    export interface DomainEbsOptions {
        ebsEnabled?: boolean;
        iops?: number;
        throughput?: number;
        volumeSize?: number;
        volumeType?: string;
    }

    export interface DomainEncryptionAtRestOptions {
        enabled?: boolean;
        kmsKeyId?: string;
    }

    export interface DomainEndpointOptions {
        customEndpoint?: string;
        customEndpointCertificateArn?: string;
        customEndpointEnabled?: boolean;
        enforceHttps?: boolean;
        tlsSecurityPolicy?: string;
    }

    export interface DomainIdp {
        entityId: string;
        metadataContent: string;
    }

    export interface DomainLogPublishingOption {
        cloudWatchLogsLogGroupArn?: string;
        enabled?: boolean;
    }

    export interface DomainMasterUserOptions {
        masterUserArn?: string;
        masterUserName?: string;
        masterUserPassword?: string;
    }

    export interface DomainNodeToNodeEncryptionOptions {
        enabled?: boolean;
    }

    export interface DomainOffPeakWindow {
        windowStartTime?: outputs.opensearchservice.DomainWindowStartTime;
    }

    export interface DomainOffPeakWindowOptions {
        enabled?: boolean;
        offPeakWindow?: outputs.opensearchservice.DomainOffPeakWindow;
    }

    export interface DomainSamlOptions {
        enabled?: boolean;
        idp?: outputs.opensearchservice.DomainIdp;
        masterBackendRole?: string;
        masterUserName?: string;
        rolesKey?: string;
        sessionTimeoutMinutes?: number;
        subjectKey?: string;
    }

    export interface DomainServiceSoftwareOptions {
        automatedUpdateDate?: string;
        cancellable?: boolean;
        currentVersion?: string;
        description?: string;
        newVersion?: string;
        optionalDeployment?: boolean;
        updateAvailable?: boolean;
        updateStatus?: string;
    }

    export interface DomainSnapshotOptions {
        automatedSnapshotStartHour?: number;
    }

    export interface DomainSoftwareUpdateOptions {
        autoSoftwareUpdateEnabled?: boolean;
    }

    export interface DomainTag {
        /**
         * The value of the tag.
         */
        key: string;
        /**
         * The key of the tag.
         */
        value: string;
    }

    export interface DomainVpcOptions {
        securityGroupIds?: string[];
        subnetIds?: string[];
    }

    export interface DomainWindowStartTime {
        hours: number;
        minutes: number;
    }

    export interface DomainZoneAwarenessConfig {
        availabilityZoneCount?: number;
    }

}

export namespace opsworks {
    export interface AppDataSource {
        arn?: string;
        databaseName?: string;
        type?: string;
    }

    export interface AppEnvironmentVariable {
        key: string;
        secure?: boolean;
        value: string;
    }

    export interface AppSource {
        password?: string;
        revision?: string;
        sshKey?: string;
        type?: string;
        url?: string;
        username?: string;
    }

    export interface AppSslConfiguration {
        certificate?: string;
        chain?: string;
        privateKey?: string;
    }

    export interface InstanceBlockDeviceMapping {
        deviceName?: string;
        ebs?: outputs.opsworks.InstanceEbsBlockDevice;
        noDevice?: string;
        virtualName?: string;
    }

    export interface InstanceEbsBlockDevice {
        deleteOnTermination?: boolean;
        iops?: number;
        snapshotId?: string;
        volumeSize?: number;
        volumeType?: string;
    }

    export interface InstanceTimeBasedAutoScaling {
        friday?: any;
        monday?: any;
        saturday?: any;
        sunday?: any;
        thursday?: any;
        tuesday?: any;
        wednesday?: any;
    }

    export interface LayerAutoScalingThresholds {
        cpuThreshold?: number;
        ignoreMetricsTime?: number;
        instanceCount?: number;
        loadThreshold?: number;
        memoryThreshold?: number;
        thresholdsWaitTime?: number;
    }

    export interface LayerLifecycleEventConfiguration {
        shutdownEventConfiguration?: outputs.opsworks.LayerShutdownEventConfiguration;
    }

    export interface LayerLoadBasedAutoScaling {
        downScaling?: outputs.opsworks.LayerAutoScalingThresholds;
        enable?: boolean;
        upScaling?: outputs.opsworks.LayerAutoScalingThresholds;
    }

    export interface LayerRecipes {
        configure?: string[];
        deploy?: string[];
        setup?: string[];
        shutdown?: string[];
        undeploy?: string[];
    }

    export interface LayerShutdownEventConfiguration {
        delayUntilElbConnectionsDrained?: boolean;
        executionTimeout?: number;
    }

    export interface LayerTag {
        key: string;
        value: string;
    }

    export interface LayerVolumeConfiguration {
        encrypted?: boolean;
        iops?: number;
        mountPoint?: string;
        numberOfDisks?: number;
        raidLevel?: number;
        size?: number;
        volumeType?: string;
    }

    export interface StackChefConfiguration {
        berkshelfVersion?: string;
        manageBerkshelf?: boolean;
    }

    export interface StackConfigurationManager {
        name?: string;
        version?: string;
    }

    export interface StackElasticIp {
        ip: string;
        name?: string;
    }

    export interface StackRdsDbInstance {
        dbPassword: string;
        dbUser: string;
        rdsDbInstanceArn: string;
    }

    export interface StackSource {
        password?: string;
        revision?: string;
        sshKey?: string;
        type?: string;
        url?: string;
        username?: string;
    }

    export interface StackTag {
        key: string;
        value: string;
    }

}

export namespace opsworkscm {
    export interface ServerEngineAttribute {
        name?: string;
        value?: string;
    }

    export interface ServerTag {
        key: string;
        value: string;
    }

}

export namespace organizations {
    /**
     * A custom key-value pair associated with a resource within your organization.
     */
    export interface AccountTag {
        /**
         * The key identifier, or name, of the tag.
         */
        key: string;
        /**
         * The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
         */
        value: string;
    }

    /**
     * A custom key-value pair associated with a resource within your organization.
     */
    export interface OrganizationalUnitTag {
        /**
         * The key identifier, or name, of the tag.
         */
        key: string;
        /**
         * The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
         */
        value: string;
    }

    /**
     * A custom key-value pair associated with a resource within your organization.
     */
    export interface PolicyTag {
        /**
         * The key identifier, or name, of the tag.
         */
        key: string;
        /**
         * The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
         */
        value: string;
    }

    /**
     * A custom key-value pair associated with a resource within your organization.
     */
    export interface ResourcePolicyTag {
        /**
         * The key identifier, or name, of the tag.
         */
        key: string;
        /**
         * The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
         */
        value: string;
    }

}

export namespace osis {
    /**
     * Key-value pairs to configure buffering.
     */
    export interface PipelineBufferOptions {
        /**
         * Whether persistent buffering should be enabled.
         */
        persistentBufferEnabled: boolean;
    }

    /**
     * Key-value pairs to configure encryption at rest.
     */
    export interface PipelineEncryptionAtRestOptions {
        /**
         * The KMS key to use for encrypting data. By default an AWS owned key is used
         */
        kmsKeyArn: string;
    }

    /**
     * Key-value pairs to configure log publishing.
     */
    export interface PipelineLogPublishingOptions {
        /**
         * The destination for OpenSearch Ingestion Service logs sent to Amazon CloudWatch.
         */
        cloudWatchLogDestination?: outputs.osis.PipelineLogPublishingOptionsCloudWatchLogDestinationProperties;
        /**
         * Whether logs should be published.
         */
        isLoggingEnabled?: boolean;
    }

    /**
     * The destination for OpenSearch Ingestion Service logs sent to Amazon CloudWatch.
     */
    export interface PipelineLogPublishingOptionsCloudWatchLogDestinationProperties {
        logGroup: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface PipelineTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * An OpenSearch Ingestion Service-managed VPC endpoint that will access one or more pipelines.
     */
    export interface PipelineVpcEndpoint {
        /**
         * The unique identifier of the endpoint.
         */
        vpcEndpointId?: string;
        /**
         * The ID for your VPC. AWS Privatelink generates this value when you create a VPC.
         */
        vpcId?: string;
        vpcOptions?: outputs.osis.PipelineVpcOptions;
    }

    /**
     * Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion Service creates the pipeline with a public endpoint.
     */
    export interface PipelineVpcOptions {
        /**
         * A list of security groups associated with the VPC endpoint.
         */
        securityGroupIds?: string[];
        /**
         * A list of subnet IDs associated with the VPC endpoint.
         */
        subnetIds: string[];
    }

}

export namespace panorama {
    export interface ApplicationInstanceManifestOverridesPayload {
        payloadData?: string;
    }

    export interface ApplicationInstanceManifestPayload {
        payloadData?: string;
    }

    export interface ApplicationInstanceTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface PackageStorageLocation {
        binaryPrefixLocation?: string;
        bucket?: string;
        generatedPrefixLocation?: string;
        manifestPrefixLocation?: string;
        repoPrefixLocation?: string;
    }

    export interface PackageTag {
        key: string;
        value: string;
    }

}

export namespace pcaconnectorad {
    export interface ConnectorTags {
    }

    export interface ConnectorVpcInformation {
        securityGroupIds: string[];
    }

    export interface DirectoryRegistrationTags {
    }

    export interface TemplateApplicationPolicies {
        critical?: boolean;
        policies: (outputs.pcaconnectorad.TemplateApplicationPolicy0Properties | outputs.pcaconnectorad.TemplateApplicationPolicy1Properties)[];
    }

    export interface TemplateApplicationPolicy0Properties {
        policyType: enums.pcaconnectorad.TemplateApplicationPolicyType;
    }

    export interface TemplateApplicationPolicy1Properties {
        policyObjectIdentifier: string;
    }

    export interface TemplateCertificateValidity {
        renewalPeriod: outputs.pcaconnectorad.TemplateValidityPeriod;
        validityPeriod: outputs.pcaconnectorad.TemplateValidityPeriod;
    }

    export interface TemplateDefinition0Properties {
        templateV2: outputs.pcaconnectorad.TemplateV2;
    }

    export interface TemplateDefinition1Properties {
        templateV3: outputs.pcaconnectorad.TemplateV3;
    }

    export interface TemplateDefinition2Properties {
        templateV4: outputs.pcaconnectorad.TemplateV4;
    }

    export interface TemplateEnrollmentFlagsV2 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateEnrollmentFlagsV3 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateEnrollmentFlagsV4 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateExtensionsV2 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateExtensionsV3 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateExtensionsV4 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateGeneralFlagsV2 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGeneralFlagsV3 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGeneralFlagsV4 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGroupAccessControlEntryAccessRights {
        autoEnroll?: enums.pcaconnectorad.TemplateGroupAccessControlEntryAccessRight;
        enroll?: enums.pcaconnectorad.TemplateGroupAccessControlEntryAccessRight;
    }

    export interface TemplateKeyUsage {
        critical?: boolean;
        usageFlags: outputs.pcaconnectorad.TemplateKeyUsageFlags;
    }

    export interface TemplateKeyUsageFlags {
        dataEncipherment?: boolean;
        digitalSignature?: boolean;
        keyAgreement?: boolean;
        keyEncipherment?: boolean;
        nonRepudiation?: boolean;
    }

    export interface TemplateKeyUsageProperty0Properties {
        propertyType: enums.pcaconnectorad.TemplateKeyUsagePropertyType;
    }

    export interface TemplateKeyUsageProperty1Properties {
        propertyFlags: outputs.pcaconnectorad.TemplateKeyUsagePropertyFlags;
    }

    export interface TemplateKeyUsagePropertyFlags {
        decrypt?: boolean;
        keyAgreement?: boolean;
        sign?: boolean;
    }

    export interface TemplatePrivateKeyAttributesV2 {
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyAttributesV3 {
        algorithm: enums.pcaconnectorad.TemplatePrivateKeyAlgorithm;
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        keyUsageProperty: outputs.pcaconnectorad.TemplateKeyUsageProperty0Properties | outputs.pcaconnectorad.TemplateKeyUsageProperty1Properties;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyAttributesV4 {
        algorithm?: enums.pcaconnectorad.TemplatePrivateKeyAlgorithm;
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        keyUsageProperty?: outputs.pcaconnectorad.TemplateKeyUsageProperty0Properties | outputs.pcaconnectorad.TemplateKeyUsageProperty1Properties;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyFlagsV2 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV2;
        exportableKey?: boolean;
        strongKeyProtectionRequired?: boolean;
    }

    export interface TemplatePrivateKeyFlagsV3 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV3;
        exportableKey?: boolean;
        requireAlternateSignatureAlgorithm?: boolean;
        strongKeyProtectionRequired?: boolean;
    }

    export interface TemplatePrivateKeyFlagsV4 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV4;
        exportableKey?: boolean;
        requireAlternateSignatureAlgorithm?: boolean;
        requireSameKeyRenewal?: boolean;
        strongKeyProtectionRequired?: boolean;
        useLegacyProvider?: boolean;
    }

    export interface TemplateSubjectNameFlagsV2 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateSubjectNameFlagsV3 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateSubjectNameFlagsV4 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateTags {
    }

    export interface TemplateV2 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV2;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV2;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV2;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV2;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV2;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV2;
        supersededTemplates?: string[];
    }

    export interface TemplateV3 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV3;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV3;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV3;
        hashAlgorithm: enums.pcaconnectorad.TemplateHashAlgorithm;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV3;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV3;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV3;
        supersededTemplates?: string[];
    }

    export interface TemplateV4 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV4;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV4;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV4;
        hashAlgorithm?: enums.pcaconnectorad.TemplateHashAlgorithm;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV4;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV4;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV4;
        supersededTemplates?: string[];
    }

    export interface TemplateValidityPeriod {
        period: number;
        periodType: enums.pcaconnectorad.TemplateValidityPeriodType;
    }

}

export namespace personalize {
    /**
     * Initial DatasetImportJob for the created dataset
     */
    export interface DatasetImportJob {
        /**
         * The Amazon S3 bucket that contains the training data to import.
         */
        dataSource?: outputs.personalize.DatasetImportJobDataSourceProperties;
        /**
         * The ARN of the dataset that receives the imported data
         */
        datasetArn?: string;
        /**
         * The ARN of the dataset import job
         */
        datasetImportJobArn?: string;
        /**
         * The name for the dataset import job.
         */
        jobName?: string;
        /**
         * The ARN of the IAM role that has permissions to read from the Amazon S3 data source.
         */
        roleArn?: string;
    }

    /**
     * The Amazon S3 bucket that contains the training data to import.
     */
    export interface DatasetImportJobDataSourceProperties {
        /**
         * The path to the Amazon S3 bucket where the data that you want to upload to your dataset is stored.
         */
        dataLocation?: string;
    }

    /**
     * Provides the name and values of a Categorical hyperparameter.
     */
    export interface SolutionCategoricalHyperParameterRange {
        /**
         * The name of the hyperparameter.
         */
        name?: string;
        /**
         * A list of the categories for the hyperparameter.
         */
        values?: string[];
    }

    /**
     * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the autoMLConfig section of the solution configuration.
     */
    export interface SolutionConfig {
        /**
         * Lists the hyperparameter names and ranges.
         */
        algorithmHyperParameters?: {[key: string]: string};
        /**
         * The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
         */
        autoMlConfig?: outputs.personalize.SolutionConfigAutoMlConfigProperties;
        /**
         * Only events with a value greater than or equal to this threshold are used for training a model.
         */
        eventValueThreshold?: string;
        /**
         * Lists the feature transformation parameters.
         */
        featureTransformationParameters?: {[key: string]: string};
        /**
         * Describes the properties for hyperparameter optimization (HPO)
         */
        hpoConfig?: outputs.personalize.SolutionConfigHpoConfigProperties;
    }

    /**
     * The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
     */
    export interface SolutionConfigAutoMlConfigProperties {
        /**
         * The metric to optimize.
         */
        metricName?: string;
        /**
         * The list of candidate recipes.
         */
        recipeList?: string[];
    }

    /**
     * Describes the properties for hyperparameter optimization (HPO)
     */
    export interface SolutionConfigHpoConfigProperties {
        /**
         * The hyperparameters and their allowable ranges
         */
        algorithmHyperParameterRanges?: outputs.personalize.SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesProperties;
        /**
         * The metric to optimize during HPO.
         */
        hpoObjective?: outputs.personalize.SolutionConfigHpoConfigPropertiesHpoObjectiveProperties;
        /**
         * Describes the resource configuration for hyperparameter optimization (HPO).
         */
        hpoResourceConfig?: outputs.personalize.SolutionConfigHpoConfigPropertiesHpoResourceConfigProperties;
    }

    /**
     * The hyperparameters and their allowable ranges
     */
    export interface SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesProperties {
        /**
         * The categorical hyperparameters and their ranges.
         */
        categoricalHyperParameterRanges?: outputs.personalize.SolutionCategoricalHyperParameterRange[];
        /**
         * The continuous hyperparameters and their ranges.
         */
        continuousHyperParameterRanges?: outputs.personalize.SolutionContinuousHyperParameterRange[];
        /**
         * The integer hyperparameters and their ranges.
         */
        integerHyperParameterRanges?: outputs.personalize.SolutionIntegerHyperParameterRange[];
    }

    /**
     * The metric to optimize during HPO.
     */
    export interface SolutionConfigHpoConfigPropertiesHpoObjectiveProperties {
        /**
         * The name of the metric
         */
        metricName?: string;
        /**
         * A regular expression for finding the metric in the training job logs.
         */
        metricRegex?: string;
        /**
         * The type of the metric. Valid values are Maximize and Minimize.
         */
        type?: enums.personalize.SolutionConfigHpoConfigPropertiesHpoObjectivePropertiesType;
    }

    /**
     * Describes the resource configuration for hyperparameter optimization (HPO).
     */
    export interface SolutionConfigHpoConfigPropertiesHpoResourceConfigProperties {
        /**
         * The maximum number of training jobs when you create a solution version. The maximum value for maxNumberOfTrainingJobs is 40.
         */
        maxNumberOfTrainingJobs?: string;
        /**
         * The maximum number of parallel training jobs when you create a solution version. The maximum value for maxParallelTrainingJobs is 10.
         */
        maxParallelTrainingJobs?: string;
    }

    /**
     * Provides the name and range of a continuous hyperparameter.
     */
    export interface SolutionContinuousHyperParameterRange {
        /**
         * The maximum allowable value for the hyperparameter.
         */
        maxValue?: number;
        /**
         * The minimum allowable value for the hyperparameter.
         */
        minValue?: number;
        /**
         * The name of the hyperparameter.
         */
        name?: string;
    }

    /**
     * Provides the name and range of an integer-valued hyperparameter.
     */
    export interface SolutionIntegerHyperParameterRange {
        /**
         * The maximum allowable value for the hyperparameter.
         */
        maxValue?: number;
        /**
         * The minimum allowable value for the hyperparameter.
         */
        minValue?: number;
        /**
         * The name of the hyperparameter.
         */
        name?: string;
    }

}

export namespace pinpoint {
    export interface ApplicationSettingsCampaignHook {
        lambdaFunctionName?: string;
        mode?: string;
        webUrl?: string;
    }

    export interface ApplicationSettingsLimits {
        daily?: number;
        maximumDuration?: number;
        messagesPerSecond?: number;
        total?: number;
    }

    export interface ApplicationSettingsQuietTime {
        end: string;
        start: string;
    }

    export interface CampaignCustomDeliveryConfiguration {
        deliveryUri?: string;
        endpointTypes?: string[];
    }

    export interface CampaignCustomMessage {
        data?: string;
    }

    export interface CampaignDefaultButtonConfiguration {
        backgroundColor?: string;
        borderRadius?: number;
        buttonAction?: string;
        link?: string;
        text?: string;
        textColor?: string;
    }

    export interface CampaignEmailMessage {
        body?: string;
        fromAddress?: string;
        htmlBody?: string;
        title?: string;
    }

    export interface CampaignEventDimensions {
        attributes?: any;
        eventType?: outputs.pinpoint.CampaignSetDimension;
        metrics?: any;
    }

    export interface CampaignEventFilter {
        dimensions?: outputs.pinpoint.CampaignEventDimensions;
        filterType?: string;
    }

    export interface CampaignHook {
        lambdaFunctionName?: string;
        mode?: string;
        webUrl?: string;
    }

    export interface CampaignInAppMessage {
        content?: outputs.pinpoint.CampaignInAppMessageContent[];
        customConfig?: any;
        layout?: string;
    }

    export interface CampaignInAppMessageBodyConfig {
        alignment?: string;
        body?: string;
        textColor?: string;
    }

    export interface CampaignInAppMessageButton {
        android?: outputs.pinpoint.CampaignOverrideButtonConfiguration;
        defaultConfig?: outputs.pinpoint.CampaignDefaultButtonConfiguration;
        ios?: outputs.pinpoint.CampaignOverrideButtonConfiguration;
        web?: outputs.pinpoint.CampaignOverrideButtonConfiguration;
    }

    export interface CampaignInAppMessageContent {
        backgroundColor?: string;
        bodyConfig?: outputs.pinpoint.CampaignInAppMessageBodyConfig;
        headerConfig?: outputs.pinpoint.CampaignInAppMessageHeaderConfig;
        imageUrl?: string;
        primaryBtn?: outputs.pinpoint.CampaignInAppMessageButton;
        secondaryBtn?: outputs.pinpoint.CampaignInAppMessageButton;
    }

    export interface CampaignInAppMessageHeaderConfig {
        alignment?: string;
        header?: string;
        textColor?: string;
    }

    export interface CampaignLimits {
        daily?: number;
        maximumDuration?: number;
        messagesPerSecond?: number;
        session?: number;
        total?: number;
    }

    export interface CampaignMessage {
        action?: string;
        body?: string;
        imageIconUrl?: string;
        imageSmallIconUrl?: string;
        imageUrl?: string;
        jsonBody?: string;
        mediaUrl?: string;
        rawContent?: string;
        silentPush?: boolean;
        timeToLive?: number;
        title?: string;
        url?: string;
    }

    export interface CampaignMessageConfiguration {
        admMessage?: outputs.pinpoint.CampaignMessage;
        apnsMessage?: outputs.pinpoint.CampaignMessage;
        baiduMessage?: outputs.pinpoint.CampaignMessage;
        customMessage?: outputs.pinpoint.CampaignCustomMessage;
        defaultMessage?: outputs.pinpoint.CampaignMessage;
        emailMessage?: outputs.pinpoint.CampaignEmailMessage;
        gcmMessage?: outputs.pinpoint.CampaignMessage;
        inAppMessage?: outputs.pinpoint.CampaignInAppMessage;
        smsMessage?: outputs.pinpoint.CampaignSmsMessage;
    }

    export interface CampaignOverrideButtonConfiguration {
        buttonAction?: string;
        link?: string;
    }

    export interface CampaignQuietTime {
        end: string;
        start: string;
    }

    export interface CampaignSchedule {
        endTime?: string;
        eventFilter?: outputs.pinpoint.CampaignEventFilter;
        frequency?: string;
        isLocalTime?: boolean;
        quietTime?: outputs.pinpoint.CampaignQuietTime;
        startTime?: string;
        timeZone?: string;
    }

    export interface CampaignSetDimension {
        dimensionType?: string;
        values?: string[];
    }

    export interface CampaignSmsMessage {
        body?: string;
        entityId?: string;
        messageType?: string;
        originationNumber?: string;
        senderId?: string;
        templateId?: string;
    }

    export interface CampaignTemplate {
        name?: string;
        version?: string;
    }

    export interface CampaignTemplateConfiguration {
        emailTemplate?: outputs.pinpoint.CampaignTemplate;
        pushTemplate?: outputs.pinpoint.CampaignTemplate;
        smsTemplate?: outputs.pinpoint.CampaignTemplate;
        voiceTemplate?: outputs.pinpoint.CampaignTemplate;
    }

    export interface CampaignWriteTreatmentResource {
        customDeliveryConfiguration?: outputs.pinpoint.CampaignCustomDeliveryConfiguration;
        messageConfiguration?: outputs.pinpoint.CampaignMessageConfiguration;
        schedule?: outputs.pinpoint.CampaignSchedule;
        sizePercent?: number;
        templateConfiguration?: outputs.pinpoint.CampaignTemplateConfiguration;
        treatmentDescription?: string;
        treatmentName?: string;
    }

    export interface Groups {
        dimensions?: outputs.pinpoint.SegmentDimensions[];
        sourceSegments?: outputs.pinpoint.SegmentSourceSegments[];
        sourceType?: string;
        type?: string;
    }

    export interface InAppTemplateBodyConfig {
        alignment?: enums.pinpoint.InAppTemplateAlignment;
        body?: string;
        textColor?: string;
    }

    export interface InAppTemplateButtonConfig {
        android?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
        defaultConfig?: outputs.pinpoint.InAppTemplateDefaultButtonConfiguration;
        ios?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
        web?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
    }

    export interface InAppTemplateDefaultButtonConfiguration {
        backgroundColor?: string;
        borderRadius?: number;
        buttonAction?: enums.pinpoint.InAppTemplateButtonAction;
        link?: string;
        text?: string;
        textColor?: string;
    }

    export interface InAppTemplateHeaderConfig {
        alignment?: enums.pinpoint.InAppTemplateAlignment;
        header?: string;
        textColor?: string;
    }

    export interface InAppTemplateInAppMessageContent {
        backgroundColor?: string;
        bodyConfig?: outputs.pinpoint.InAppTemplateBodyConfig;
        headerConfig?: outputs.pinpoint.InAppTemplateHeaderConfig;
        imageUrl?: string;
        primaryBtn?: outputs.pinpoint.InAppTemplateButtonConfig;
        secondaryBtn?: outputs.pinpoint.InAppTemplateButtonConfig;
    }

    export interface InAppTemplateOverrideButtonConfiguration {
        buttonAction?: enums.pinpoint.InAppTemplateButtonAction;
        link?: string;
    }

    export interface PushTemplateAndroidPushNotificationTemplate {
        action?: string;
        body?: string;
        imageIconUrl?: string;
        imageUrl?: string;
        smallImageIconUrl?: string;
        sound?: string;
        title?: string;
        url?: string;
    }

    export interface PushTemplateApnsPushNotificationTemplate {
        action?: string;
        body?: string;
        mediaUrl?: string;
        sound?: string;
        title?: string;
        url?: string;
    }

    export interface PushTemplateDefaultPushNotificationTemplate {
        action?: string;
        body?: string;
        sound?: string;
        title?: string;
        url?: string;
    }

    export interface SegmentBehavior {
        recency?: outputs.pinpoint.SegmentRecency;
    }

    export interface SegmentCoordinates {
        latitude: number;
        longitude: number;
    }

    export interface SegmentDemographic {
        appVersion?: outputs.pinpoint.SegmentSetDimension;
        channel?: outputs.pinpoint.SegmentSetDimension;
        deviceType?: outputs.pinpoint.SegmentSetDimension;
        make?: outputs.pinpoint.SegmentSetDimension;
        model?: outputs.pinpoint.SegmentSetDimension;
        platform?: outputs.pinpoint.SegmentSetDimension;
    }

    export interface SegmentDimensions {
        attributes?: any;
        behavior?: outputs.pinpoint.SegmentBehavior;
        demographic?: outputs.pinpoint.SegmentDemographic;
        location?: outputs.pinpoint.SegmentLocation;
        metrics?: any;
        userAttributes?: any;
    }

    export interface SegmentGpsPoint {
        coordinates: outputs.pinpoint.SegmentCoordinates;
        rangeInKilometers: number;
    }

    export interface SegmentGroups {
        groups?: outputs.pinpoint.Groups[];
        include?: string;
    }

    export interface SegmentLocation {
        country?: outputs.pinpoint.SegmentSetDimension;
        gpsPoint?: outputs.pinpoint.SegmentGpsPoint;
    }

    export interface SegmentRecency {
        duration: string;
        recencyType: string;
    }

    export interface SegmentSetDimension {
        dimensionType?: string;
        values?: string[];
    }

    export interface SegmentSourceSegments {
        id: string;
        version?: number;
    }

}

export namespace pinpointemail {
    export interface ConfigurationSetDeliveryOptions {
        sendingPoolName?: string;
    }

    export interface ConfigurationSetEventDestinationCloudWatchDestination {
        dimensionConfigurations?: outputs.pinpointemail.ConfigurationSetEventDestinationDimensionConfiguration[];
    }

    export interface ConfigurationSetEventDestinationDimensionConfiguration {
        defaultDimensionValue: string;
        dimensionName: string;
        dimensionValueSource: string;
    }

    export interface ConfigurationSetEventDestinationEventDestination {
        cloudWatchDestination?: outputs.pinpointemail.ConfigurationSetEventDestinationCloudWatchDestination;
        enabled?: boolean;
        kinesisFirehoseDestination?: outputs.pinpointemail.ConfigurationSetEventDestinationKinesisFirehoseDestination;
        matchingEventTypes: string[];
        pinpointDestination?: outputs.pinpointemail.ConfigurationSetEventDestinationPinpointDestination;
        snsDestination?: outputs.pinpointemail.ConfigurationSetEventDestinationSnsDestination;
    }

    export interface ConfigurationSetEventDestinationKinesisFirehoseDestination {
        deliveryStreamArn: string;
        iamRoleArn: string;
    }

    export interface ConfigurationSetEventDestinationPinpointDestination {
        applicationArn?: string;
    }

    export interface ConfigurationSetEventDestinationSnsDestination {
        topicArn: string;
    }

    export interface ConfigurationSetReputationOptions {
        reputationMetricsEnabled?: boolean;
    }

    export interface ConfigurationSetSendingOptions {
        sendingEnabled?: boolean;
    }

    export interface ConfigurationSetTags {
        key?: string;
        value?: string;
    }

    export interface ConfigurationSetTrackingOptions {
        customRedirectDomain?: string;
    }

    export interface DedicatedIpPoolTags {
        key?: string;
        value?: string;
    }

    export interface IdentityMailFromAttributes {
        behaviorOnMxFailure?: string;
        mailFromDomain?: string;
    }

    export interface IdentityTags {
        key?: string;
        value?: string;
    }

}

export namespace pipes {
    export interface PipeAwsVpcConfiguration {
        assignPublicIp?: enums.pipes.PipeAssignPublicIp;
        securityGroups?: string[];
        subnets: string[];
    }

    export interface PipeBatchArrayProperties {
        size?: number;
    }

    export interface PipeBatchContainerOverrides {
        command?: string[];
        environment?: outputs.pipes.PipeBatchEnvironmentVariable[];
        instanceType?: string;
        resourceRequirements?: outputs.pipes.PipeBatchResourceRequirement[];
    }

    export interface PipeBatchEnvironmentVariable {
        name?: string;
        value?: string;
    }

    export interface PipeBatchJobDependency {
        jobId?: string;
        type?: enums.pipes.PipeBatchJobDependencyType;
    }

    export interface PipeBatchParametersMap {
    }

    export interface PipeBatchResourceRequirement {
        type: enums.pipes.PipeBatchResourceRequirementType;
        value: string;
    }

    export interface PipeBatchRetryStrategy {
        attempts?: number;
    }

    export interface PipeCapacityProviderStrategyItem {
        base?: number;
        capacityProvider: string;
        weight?: number;
    }

    export interface PipeCloudwatchLogsLogDestination {
        logGroupArn?: string;
    }

    export interface PipeDeadLetterConfig {
        arn?: string;
    }

    export interface PipeEcsContainerOverride {
        command?: string[];
        cpu?: number;
        environment?: outputs.pipes.PipeEcsEnvironmentVariable[];
        environmentFiles?: outputs.pipes.PipeEcsEnvironmentFile[];
        memory?: number;
        memoryReservation?: number;
        name?: string;
        resourceRequirements?: outputs.pipes.PipeEcsResourceRequirement[];
    }

    export interface PipeEcsEnvironmentFile {
        type: enums.pipes.PipeEcsEnvironmentFileType;
        value: string;
    }

    export interface PipeEcsEnvironmentVariable {
        name?: string;
        value?: string;
    }

    export interface PipeEcsEphemeralStorage {
        sizeInGiB: number;
    }

    export interface PipeEcsInferenceAcceleratorOverride {
        deviceName?: string;
        deviceType?: string;
    }

    export interface PipeEcsResourceRequirement {
        type: enums.pipes.PipeEcsResourceRequirementType;
        value: string;
    }

    export interface PipeEcsTaskOverride {
        containerOverrides?: outputs.pipes.PipeEcsContainerOverride[];
        cpu?: string;
        ephemeralStorage?: outputs.pipes.PipeEcsEphemeralStorage;
        executionRoleArn?: string;
        inferenceAcceleratorOverrides?: outputs.pipes.PipeEcsInferenceAcceleratorOverride[];
        memory?: string;
        taskRoleArn?: string;
    }

    export interface PipeEnrichmentHttpParameters {
        headerParameters?: outputs.pipes.PipeHeaderParametersMap;
        pathParameterValues?: string[];
        queryStringParameters?: outputs.pipes.PipeQueryStringParametersMap;
    }

    export interface PipeEnrichmentParameters {
        httpParameters?: outputs.pipes.PipeEnrichmentHttpParameters;
        inputTemplate?: string;
    }

    export interface PipeFilter {
        pattern?: string;
    }

    export interface PipeFilterCriteria {
        filters?: outputs.pipes.PipeFilter[];
    }

    export interface PipeFirehoseLogDestination {
        deliveryStreamArn?: string;
    }

    export interface PipeHeaderParametersMap {
    }

    export interface PipeLogConfiguration {
        cloudwatchLogsLogDestination?: outputs.pipes.PipeCloudwatchLogsLogDestination;
        firehoseLogDestination?: outputs.pipes.PipeFirehoseLogDestination;
        includeExecutionData?: enums.pipes.PipeIncludeExecutionDataOption[];
        level?: enums.pipes.PipeLogLevel;
        s3LogDestination?: outputs.pipes.PipeS3LogDestination;
    }

    export interface PipeMqBrokerAccessCredentialsProperties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        basicAuth: string;
    }

    export interface PipeMskAccessCredentials0Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram512Auth: string;
    }

    export interface PipeMskAccessCredentials1Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        clientCertificateTlsAuth: string;
    }

    export interface PipeNetworkConfiguration {
        awsvpcConfiguration?: outputs.pipes.PipeAwsVpcConfiguration;
    }

    export interface PipePlacementConstraint {
        expression?: string;
        type?: enums.pipes.PipePlacementConstraintType;
    }

    export interface PipePlacementStrategy {
        field?: string;
        type?: enums.pipes.PipePlacementStrategyType;
    }

    export interface PipeQueryStringParametersMap {
    }

    export interface PipeS3LogDestination {
        bucketName?: string;
        bucketOwner?: string;
        outputFormat?: enums.pipes.PipeS3OutputFormat;
        prefix?: string;
    }

    export interface PipeSageMakerPipelineParameter {
        name: string;
        value: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials0Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        basicAuth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials1Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram512Auth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials2Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram256Auth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials3Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        clientCertificateTlsAuth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationVpc {
        /**
         * List of SecurityGroupId.
         */
        securityGroup?: string[];
        /**
         * List of SubnetId.
         */
        subnets?: string[];
    }

    export interface PipeSourceActiveMqBrokerParameters {
        batchSize?: number;
        credentials: outputs.pipes.PipeMqBrokerAccessCredentialsProperties;
        maximumBatchingWindowInSeconds?: number;
        queueName: string;
    }

    export interface PipeSourceDynamoDbStreamParameters {
        batchSize?: number;
        deadLetterConfig?: outputs.pipes.PipeDeadLetterConfig;
        maximumBatchingWindowInSeconds?: number;
        maximumRecordAgeInSeconds?: number;
        maximumRetryAttempts?: number;
        onPartialBatchItemFailure?: enums.pipes.PipeOnPartialBatchItemFailureStreams;
        parallelizationFactor?: number;
        startingPosition: enums.pipes.PipeDynamoDbStreamStartPosition;
    }

    export interface PipeSourceKinesisStreamParameters {
        batchSize?: number;
        deadLetterConfig?: outputs.pipes.PipeDeadLetterConfig;
        maximumBatchingWindowInSeconds?: number;
        maximumRecordAgeInSeconds?: number;
        maximumRetryAttempts?: number;
        onPartialBatchItemFailure?: enums.pipes.PipeOnPartialBatchItemFailureStreams;
        parallelizationFactor?: number;
        startingPosition: enums.pipes.PipeKinesisStreamStartPosition;
        startingPositionTimestamp?: string;
    }

    export interface PipeSourceManagedStreamingKafkaParameters {
        batchSize?: number;
        consumerGroupId?: string;
        credentials?: outputs.pipes.PipeMskAccessCredentials0Properties | outputs.pipes.PipeMskAccessCredentials1Properties;
        maximumBatchingWindowInSeconds?: number;
        startingPosition?: enums.pipes.PipeMskStartPosition;
        topicName: string;
    }

    export interface PipeSourceParameters {
        activeMqBrokerParameters?: outputs.pipes.PipeSourceActiveMqBrokerParameters;
        dynamoDbStreamParameters?: outputs.pipes.PipeSourceDynamoDbStreamParameters;
        filterCriteria?: outputs.pipes.PipeFilterCriteria;
        kinesisStreamParameters?: outputs.pipes.PipeSourceKinesisStreamParameters;
        managedStreamingKafkaParameters?: outputs.pipes.PipeSourceManagedStreamingKafkaParameters;
        rabbitMqBrokerParameters?: outputs.pipes.PipeSourceRabbitMqBrokerParameters;
        selfManagedKafkaParameters?: outputs.pipes.PipeSourceSelfManagedKafkaParameters;
        sqsQueueParameters?: outputs.pipes.PipeSourceSqsQueueParameters;
    }

    export interface PipeSourceRabbitMqBrokerParameters {
        batchSize?: number;
        credentials: outputs.pipes.PipeMqBrokerAccessCredentialsProperties;
        maximumBatchingWindowInSeconds?: number;
        queueName: string;
        virtualHost?: string;
    }

    export interface PipeSourceSelfManagedKafkaParameters {
        additionalBootstrapServers?: string[];
        batchSize?: number;
        consumerGroupId?: string;
        credentials?: outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials0Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials1Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials2Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials3Properties;
        maximumBatchingWindowInSeconds?: number;
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        serverRootCaCertificate?: string;
        startingPosition?: enums.pipes.PipeSelfManagedKafkaStartPosition;
        topicName: string;
        vpc?: outputs.pipes.PipeSelfManagedKafkaAccessConfigurationVpc;
    }

    export interface PipeSourceSqsQueueParameters {
        batchSize?: number;
        maximumBatchingWindowInSeconds?: number;
    }

    export interface PipeTag {
        key: string;
        value: string;
    }

    export interface PipeTagMap {
    }

    export interface PipeTargetBatchJobParameters {
        arrayProperties?: outputs.pipes.PipeBatchArrayProperties;
        containerOverrides?: outputs.pipes.PipeBatchContainerOverrides;
        dependsOn?: outputs.pipes.PipeBatchJobDependency[];
        jobDefinition: string;
        jobName: string;
        parameters?: outputs.pipes.PipeBatchParametersMap;
        retryStrategy?: outputs.pipes.PipeBatchRetryStrategy;
    }

    export interface PipeTargetCloudWatchLogsParameters {
        logStreamName?: string;
        timestamp?: string;
    }

    export interface PipeTargetEcsTaskParameters {
        capacityProviderStrategy?: outputs.pipes.PipeCapacityProviderStrategyItem[];
        enableEcsManagedTags?: boolean;
        enableExecuteCommand?: boolean;
        group?: string;
        launchType?: enums.pipes.PipeLaunchType;
        networkConfiguration?: outputs.pipes.PipeNetworkConfiguration;
        overrides?: outputs.pipes.PipeEcsTaskOverride;
        placementConstraints?: outputs.pipes.PipePlacementConstraint[];
        placementStrategy?: outputs.pipes.PipePlacementStrategy[];
        platformVersion?: string;
        propagateTags?: enums.pipes.PipePropagateTags;
        referenceId?: string;
        tags?: outputs.pipes.PipeTag[];
        taskCount?: number;
        taskDefinitionArn: string;
    }

    export interface PipeTargetEventBridgeEventBusParameters {
        detailType?: string;
        endpointId?: string;
        resources?: string[];
        source?: string;
        time?: string;
    }

    export interface PipeTargetHttpParameters {
        headerParameters?: outputs.pipes.PipeHeaderParametersMap;
        pathParameterValues?: string[];
        queryStringParameters?: outputs.pipes.PipeQueryStringParametersMap;
    }

    export interface PipeTargetKinesisStreamParameters {
        partitionKey: string;
    }

    export interface PipeTargetLambdaFunctionParameters {
        invocationType?: enums.pipes.PipeTargetInvocationType;
    }

    export interface PipeTargetParameters {
        batchJobParameters?: outputs.pipes.PipeTargetBatchJobParameters;
        cloudWatchLogsParameters?: outputs.pipes.PipeTargetCloudWatchLogsParameters;
        ecsTaskParameters?: outputs.pipes.PipeTargetEcsTaskParameters;
        eventBridgeEventBusParameters?: outputs.pipes.PipeTargetEventBridgeEventBusParameters;
        httpParameters?: outputs.pipes.PipeTargetHttpParameters;
        inputTemplate?: string;
        kinesisStreamParameters?: outputs.pipes.PipeTargetKinesisStreamParameters;
        lambdaFunctionParameters?: outputs.pipes.PipeTargetLambdaFunctionParameters;
        redshiftDataParameters?: outputs.pipes.PipeTargetRedshiftDataParameters;
        sageMakerPipelineParameters?: outputs.pipes.PipeTargetSageMakerPipelineParameters;
        sqsQueueParameters?: outputs.pipes.PipeTargetSqsQueueParameters;
        stepFunctionStateMachineParameters?: outputs.pipes.PipeTargetStateMachineParameters;
    }

    export interface PipeTargetRedshiftDataParameters {
        /**
         * Redshift Database
         */
        database: string;
        /**
         * Database user name
         */
        dbUser?: string;
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        secretManagerArn?: string;
        /**
         * A list of SQLs.
         */
        sqls: string[];
        /**
         * A name for Redshift DataAPI statement which can be used as filter of ListStatement.
         */
        statementName?: string;
        withEvent?: boolean;
    }

    export interface PipeTargetSageMakerPipelineParameters {
        pipelineParameterList?: outputs.pipes.PipeSageMakerPipelineParameter[];
    }

    export interface PipeTargetSqsQueueParameters {
        messageDeduplicationId?: string;
        messageGroupId?: string;
    }

    export interface PipeTargetStateMachineParameters {
        invocationType?: enums.pipes.PipeTargetInvocationType;
    }

}

export namespace proton {
    /**
     * <p>A description of a resource tag.</p>
     */
    export interface EnvironmentAccountConnectionTag {
        /**
         * <p>The key of the resource tag.</p>
         */
        key: string;
        /**
         * <p>The value of the resource tag.</p>
         */
        value: string;
    }

    /**
     * <p>A description of a resource tag.</p>
     */
    export interface EnvironmentTemplateTag {
        /**
         * <p>The key of the resource tag.</p>
         */
        key: string;
        /**
         * <p>The value of the resource tag.</p>
         */
        value: string;
    }

    /**
     * <p>A description of a resource tag.</p>
     */
    export interface ServiceTemplateTag {
        /**
         * <p>The key of the resource tag.</p>
         */
        key: string;
        /**
         * <p>The value of the resource tag.</p>
         */
        value: string;
    }

}

export namespace qldb {
    export interface LedgerTag {
        key: string;
        value: string;
    }

    export interface StreamKinesisConfiguration {
        aggregationEnabled?: boolean;
        streamArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface StreamTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace quicksight {
    export interface AnalysisAggregationFunction {
        attributeAggregationFunction?: outputs.quicksight.AnalysisAttributeAggregationFunction;
        categoricalAggregationFunction?: enums.quicksight.AnalysisCategoricalAggregationFunction;
        dateAggregationFunction?: enums.quicksight.AnalysisDateAggregationFunction;
        numericalAggregationFunction?: outputs.quicksight.AnalysisNumericalAggregationFunction;
    }

    export interface AnalysisAggregationSortConfiguration {
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        sortDirection: enums.quicksight.AnalysisSortDirection;
    }

    export interface AnalysisAllSheetsFilterScopeConfiguration {
    }

    export interface AnalysisAnchorDateConfiguration {
        anchorOption?: enums.quicksight.AnalysisAnchorOption;
        parameterName?: string;
    }

    export interface AnalysisArcAxisConfiguration {
        range?: outputs.quicksight.AnalysisArcAxisDisplayRange;
        reserveRange?: number;
    }

    export interface AnalysisArcAxisDisplayRange {
        max?: number;
        min?: number;
    }

    export interface AnalysisArcConfiguration {
        arcAngle?: number;
        arcThickness?: enums.quicksight.AnalysisArcThicknessOptions;
    }

    export interface AnalysisArcOptions {
        arcThickness?: enums.quicksight.AnalysisArcThickness;
    }

    export interface AnalysisAssetOptions {
        timezone?: string;
        weekStart?: enums.quicksight.AnalysisDayOfTheWeek;
    }

    export interface AnalysisAttributeAggregationFunction {
        simpleAttributeAggregation?: enums.quicksight.AnalysisSimpleAttributeAggregationFunction;
        valueForMultipleValues?: string;
    }

    export interface AnalysisAxisDataOptions {
        dateAxisOptions?: outputs.quicksight.AnalysisDateAxisOptions;
        numericAxisOptions?: outputs.quicksight.AnalysisNumericAxisOptions;
    }

    export interface AnalysisAxisDisplayDataDrivenRange {
    }

    export interface AnalysisAxisDisplayMinMaxRange {
        maximum?: number;
        minimum?: number;
    }

    export interface AnalysisAxisDisplayOptions {
        axisLineVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        dataOptions?: outputs.quicksight.AnalysisAxisDataOptions;
        gridLineVisibility?: enums.quicksight.AnalysisVisibility;
        scrollbarOptions?: outputs.quicksight.AnalysisScrollBarOptions;
        tickLabelOptions?: outputs.quicksight.AnalysisAxisTickLabelOptions;
    }

    export interface AnalysisAxisDisplayRange {
        dataDriven?: outputs.quicksight.AnalysisAxisDisplayDataDrivenRange;
        minMax?: outputs.quicksight.AnalysisAxisDisplayMinMaxRange;
    }

    export interface AnalysisAxisLabelOptions {
        applyTo?: outputs.quicksight.AnalysisAxisLabelReferenceOptions;
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
    }

    export interface AnalysisAxisLabelReferenceOptions {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
    }

    export interface AnalysisAxisLinearScale {
        stepCount?: number;
        stepSize?: number;
    }

    export interface AnalysisAxisLogarithmicScale {
        base?: number;
    }

    export interface AnalysisAxisScale {
        linear?: outputs.quicksight.AnalysisAxisLinearScale;
        logarithmic?: outputs.quicksight.AnalysisAxisLogarithmicScale;
    }

    export interface AnalysisAxisTickLabelOptions {
        labelOptions?: outputs.quicksight.AnalysisLabelOptions;
        rotationAngle?: number;
    }

    export interface AnalysisBarChartAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        colors?: outputs.quicksight.AnalysisDimensionField[];
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisBarChartConfiguration {
        barsArrangement?: enums.quicksight.AnalysisBarsArrangement;
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisBarChartFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        orientation?: enums.quicksight.AnalysisBarChartOrientation;
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.AnalysisBarChartSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        valueAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisBarChartFieldWells {
        barChartAggregatedFieldWells?: outputs.quicksight.AnalysisBarChartAggregatedFieldWells;
    }

    export interface AnalysisBarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisBarChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisBarChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisBinCountOptions {
        value?: number;
    }

    export interface AnalysisBinWidthOptions {
        binCountLimit?: number;
        value?: number;
    }

    export interface AnalysisBodySectionConfiguration {
        content: outputs.quicksight.AnalysisBodySectionContent;
        pageBreakConfiguration?: outputs.quicksight.AnalysisSectionPageBreakConfiguration;
        sectionId: string;
        style?: outputs.quicksight.AnalysisSectionStyle;
    }

    export interface AnalysisBodySectionContent {
        layout?: outputs.quicksight.AnalysisSectionLayoutConfiguration;
    }

    export interface AnalysisBoxPlotAggregatedFieldWells {
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisBoxPlotChartConfiguration {
        boxPlotOptions?: outputs.quicksight.AnalysisBoxPlotOptions;
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisBoxPlotFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        sortConfiguration?: outputs.quicksight.AnalysisBoxPlotSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisBoxPlotFieldWells {
        boxPlotAggregatedFieldWells?: outputs.quicksight.AnalysisBoxPlotAggregatedFieldWells;
    }

    export interface AnalysisBoxPlotOptions {
        allDataPointsVisibility?: enums.quicksight.AnalysisVisibility;
        outlierVisibility?: enums.quicksight.AnalysisVisibility;
        styleOptions?: outputs.quicksight.AnalysisBoxPlotStyleOptions;
    }

    export interface AnalysisBoxPlotSortConfiguration {
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        paginationConfiguration?: outputs.quicksight.AnalysisPaginationConfiguration;
    }

    export interface AnalysisBoxPlotStyleOptions {
        fillStyle?: enums.quicksight.AnalysisBoxPlotFillStyle;
    }

    export interface AnalysisBoxPlotVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisBoxPlotChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisCalculatedField {
        dataSetIdentifier: string;
        expression: string;
        name: string;
    }

    export interface AnalysisCalculatedMeasureField {
        expression: string;
        fieldId: string;
    }

    export interface AnalysisCascadingControlConfiguration {
        sourceControls?: outputs.quicksight.AnalysisCascadingControlSource[];
    }

    export interface AnalysisCascadingControlSource {
        columnToMatch?: outputs.quicksight.AnalysisColumnIdentifier;
        sourceSheetControlId?: string;
    }

    export interface AnalysisCategoricalDimensionField {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
        hierarchyId?: string;
    }

    export interface AnalysisCategoricalMeasureField {
        aggregationFunction?: enums.quicksight.AnalysisCategoricalAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
    }

    export interface AnalysisCategoryDrillDownFilter {
        categoryValues: string[];
        column: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisCategoryFilter {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        configuration: outputs.quicksight.AnalysisCategoryFilterConfiguration;
        filterId: string;
    }

    export interface AnalysisCategoryFilterConfiguration {
        customFilterConfiguration?: outputs.quicksight.AnalysisCustomFilterConfiguration;
        customFilterListConfiguration?: outputs.quicksight.AnalysisCustomFilterListConfiguration;
        filterListConfiguration?: outputs.quicksight.AnalysisFilterListConfiguration;
    }

    export interface AnalysisChartAxisLabelOptions {
        axisLabelOptions?: outputs.quicksight.AnalysisAxisLabelOptions[];
        sortIconVisibility?: enums.quicksight.AnalysisVisibility;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisClusterMarker {
        simpleClusterMarker?: outputs.quicksight.AnalysisSimpleClusterMarker;
    }

    export interface AnalysisClusterMarkerConfiguration {
        clusterMarker?: outputs.quicksight.AnalysisClusterMarker;
    }

    export interface AnalysisColorScale {
        colorFillType: enums.quicksight.AnalysisColorFillType;
        colors: outputs.quicksight.AnalysisDataColor[];
        nullValueColor?: outputs.quicksight.AnalysisDataColor;
    }

    export interface AnalysisColorsConfiguration {
        customColors?: outputs.quicksight.AnalysisCustomColor[];
    }

    export interface AnalysisColumnConfiguration {
        colorsConfiguration?: outputs.quicksight.AnalysisColorsConfiguration;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        formatConfiguration?: outputs.quicksight.AnalysisFormatConfiguration;
        role?: enums.quicksight.AnalysisColumnRole;
    }

    export interface AnalysisColumnHierarchy {
        dateTimeHierarchy?: outputs.quicksight.AnalysisDateTimeHierarchy;
        explicitHierarchy?: outputs.quicksight.AnalysisExplicitHierarchy;
        predefinedHierarchy?: outputs.quicksight.AnalysisPredefinedHierarchy;
    }

    export interface AnalysisColumnIdentifier {
        columnName: string;
        dataSetIdentifier: string;
    }

    export interface AnalysisColumnSort {
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        direction: enums.quicksight.AnalysisSortDirection;
        sortBy: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisColumnTooltipItem {
        aggregation?: outputs.quicksight.AnalysisAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        label?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisComboChartAggregatedFieldWells {
        barValues?: outputs.quicksight.AnalysisMeasureField[];
        category?: outputs.quicksight.AnalysisDimensionField[];
        colors?: outputs.quicksight.AnalysisDimensionField[];
        lineValues?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisComboChartConfiguration {
        barDataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        barsArrangement?: enums.quicksight.AnalysisBarsArrangement;
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisComboChartFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        lineDataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.AnalysisComboChartSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisComboChartFieldWells {
        comboChartAggregatedFieldWells?: outputs.quicksight.AnalysisComboChartAggregatedFieldWells;
    }

    export interface AnalysisComboChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisComboChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisComboChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisComparisonConfiguration {
        comparisonFormat?: outputs.quicksight.AnalysisComparisonFormatConfiguration;
        comparisonMethod?: enums.quicksight.AnalysisComparisonMethod;
    }

    export interface AnalysisComparisonFormatConfiguration {
        numberDisplayFormatConfiguration?: outputs.quicksight.AnalysisNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.AnalysisPercentageDisplayFormatConfiguration;
    }

    export interface AnalysisComputation {
        forecast?: outputs.quicksight.AnalysisForecastComputation;
        growthRate?: outputs.quicksight.AnalysisGrowthRateComputation;
        maximumMinimum?: outputs.quicksight.AnalysisMaximumMinimumComputation;
        metricComparison?: outputs.quicksight.AnalysisMetricComparisonComputation;
        periodOverPeriod?: outputs.quicksight.AnalysisPeriodOverPeriodComputation;
        periodToDate?: outputs.quicksight.AnalysisPeriodToDateComputation;
        topBottomMovers?: outputs.quicksight.AnalysisTopBottomMoversComputation;
        topBottomRanked?: outputs.quicksight.AnalysisTopBottomRankedComputation;
        totalAggregation?: outputs.quicksight.AnalysisTotalAggregationComputation;
        uniqueValues?: outputs.quicksight.AnalysisUniqueValuesComputation;
    }

    export interface AnalysisConditionalFormattingColor {
        gradient?: outputs.quicksight.AnalysisConditionalFormattingGradientColor;
        solid?: outputs.quicksight.AnalysisConditionalFormattingSolidColor;
    }

    export interface AnalysisConditionalFormattingCustomIconCondition {
        color?: string;
        displayConfiguration?: outputs.quicksight.AnalysisConditionalFormattingIconDisplayConfiguration;
        expression: string;
        iconOptions: outputs.quicksight.AnalysisConditionalFormattingCustomIconOptions;
    }

    export interface AnalysisConditionalFormattingCustomIconOptions {
        icon?: enums.quicksight.AnalysisIcon;
        unicodeIcon?: string;
    }

    export interface AnalysisConditionalFormattingGradientColor {
        color: outputs.quicksight.AnalysisGradientColor;
        expression: string;
    }

    export interface AnalysisConditionalFormattingIcon {
        customCondition?: outputs.quicksight.AnalysisConditionalFormattingCustomIconCondition;
        iconSet?: outputs.quicksight.AnalysisConditionalFormattingIconSet;
    }

    export interface AnalysisConditionalFormattingIconDisplayConfiguration {
        iconDisplayOption?: enums.quicksight.AnalysisConditionalFormattingIconDisplayOption;
    }

    export interface AnalysisConditionalFormattingIconSet {
        expression: string;
        iconSetType?: enums.quicksight.AnalysisConditionalFormattingIconSetType;
    }

    export interface AnalysisConditionalFormattingSolidColor {
        color?: string;
        expression: string;
    }

    export interface AnalysisContributionAnalysisDefault {
        contributorDimensions: outputs.quicksight.AnalysisColumnIdentifier[];
        measureFieldId: string;
    }

    export interface AnalysisCurrencyDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        numberScale?: enums.quicksight.AnalysisNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        suffix?: string;
        symbol?: string;
    }

    export interface AnalysisCustomActionFilterOperation {
        selectedFieldsConfiguration: outputs.quicksight.AnalysisFilterOperationSelectedFieldsConfiguration;
        targetVisualsConfiguration: outputs.quicksight.AnalysisFilterOperationTargetVisualsConfiguration;
    }

    export interface AnalysisCustomActionNavigationOperation {
        localNavigationConfiguration?: outputs.quicksight.AnalysisLocalNavigationConfiguration;
    }

    export interface AnalysisCustomActionSetParametersOperation {
        parameterValueConfigurations: outputs.quicksight.AnalysisSetParameterValueConfiguration[];
    }

    export interface AnalysisCustomActionUrlOperation {
        urlTarget: enums.quicksight.AnalysisUrlTargetConfiguration;
        urlTemplate: string;
    }

    export interface AnalysisCustomColor {
        color: string;
        fieldValue?: string;
        specialValue?: enums.quicksight.AnalysisSpecialValue;
    }

    export interface AnalysisCustomContentConfiguration {
        contentType?: enums.quicksight.AnalysisCustomContentType;
        contentUrl?: string;
        imageScaling?: enums.quicksight.AnalysisCustomContentImageScalingConfiguration;
    }

    export interface AnalysisCustomContentVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisCustomContentConfiguration;
        dataSetIdentifier: string;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisCustomFilterConfiguration {
        categoryValue?: string;
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisCustomFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisCustomNarrativeOptions {
        narrative: string;
    }

    export interface AnalysisCustomParameterValues {
        dateTimeValues?: string[];
        decimalValues?: number[];
        integerValues?: number[];
        stringValues?: string[];
    }

    export interface AnalysisCustomValuesConfiguration {
        customValues: outputs.quicksight.AnalysisCustomParameterValues;
        includeNullValue?: boolean;
    }

    export interface AnalysisDataBarsOptions {
        fieldId: string;
        negativeColor?: string;
        positiveColor?: string;
    }

    export interface AnalysisDataColor {
        color?: string;
        dataValue?: number;
    }

    export interface AnalysisDataFieldSeriesItem {
        axisBinding: enums.quicksight.AnalysisAxisBinding;
        fieldId: string;
        fieldValue?: string;
        settings?: outputs.quicksight.AnalysisLineChartSeriesSettings;
    }

    export interface AnalysisDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.AnalysisVisibility;
        dataLabelTypes?: outputs.quicksight.AnalysisDataLabelType[];
        labelColor?: string;
        labelContent?: enums.quicksight.AnalysisDataLabelContent;
        labelFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        measureLabelVisibility?: enums.quicksight.AnalysisVisibility;
        overlap?: enums.quicksight.AnalysisDataLabelOverlap;
        position?: enums.quicksight.AnalysisDataLabelPosition;
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDataLabelType {
        dataPathLabelType?: outputs.quicksight.AnalysisDataPathLabelType;
        fieldLabelType?: outputs.quicksight.AnalysisFieldLabelType;
        maximumLabelType?: outputs.quicksight.AnalysisMaximumLabelType;
        minimumLabelType?: outputs.quicksight.AnalysisMinimumLabelType;
        rangeEndsLabelType?: outputs.quicksight.AnalysisRangeEndsLabelType;
    }

    export interface AnalysisDataPathColor {
        color: string;
        element: outputs.quicksight.AnalysisDataPathValue;
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisDataPathLabelType {
        fieldId?: string;
        fieldValue?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDataPathSort {
        direction: enums.quicksight.AnalysisSortDirection;
        sortPaths: outputs.quicksight.AnalysisDataPathValue[];
    }

    export interface AnalysisDataPathType {
        pivotTableDataPathType?: enums.quicksight.AnalysisPivotTableDataPathType;
    }

    export interface AnalysisDataPathValue {
        dataPathType?: outputs.quicksight.AnalysisDataPathType;
        fieldId?: string;
        fieldValue?: string;
    }

    export interface AnalysisDataSetIdentifierDeclaration {
        dataSetArn: string;
        identifier: string;
    }

    export interface AnalysisDataSetReference {
        dataSetArn: string;
        dataSetPlaceholder: string;
    }

    export interface AnalysisDateAxisOptions {
        missingDateVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDateDimensionField {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        dateGranularity?: enums.quicksight.AnalysisTimeGranularity;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
        hierarchyId?: string;
    }

    export interface AnalysisDateMeasureField {
        aggregationFunction?: enums.quicksight.AnalysisDateAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
    }

    export interface AnalysisDateTimeDefaultValues {
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        staticValues?: string[];
    }

    export interface AnalysisDateTimeFormatConfiguration {
        dateTimeFormat?: string;
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    export interface AnalysisDateTimeHierarchy {
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        hierarchyId: string;
    }

    export interface AnalysisDateTimeParameter {
        name: string;
        values: string[];
    }

    export interface AnalysisDateTimeParameterDeclaration {
        defaultValues?: outputs.quicksight.AnalysisDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        name: string;
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        valueWhenUnset?: outputs.quicksight.AnalysisDateTimeValueWhenUnsetConfiguration;
    }

    export interface AnalysisDateTimePickerControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisDateTimeValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisDecimalDefaultValues {
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface AnalysisDecimalParameter {
        name: string;
        values: number[];
    }

    export interface AnalysisDecimalParameterDeclaration {
        defaultValues?: outputs.quicksight.AnalysisDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        valueWhenUnset?: outputs.quicksight.AnalysisDecimalValueWhenUnsetConfiguration;
    }

    export interface AnalysisDecimalPlacesConfiguration {
        decimalPlaces: number;
    }

    export interface AnalysisDecimalValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisDefaultFreeFormLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.AnalysisFreeFormLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaultGridLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.AnalysisGridLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaultInteractiveLayoutConfiguration {
        freeForm?: outputs.quicksight.AnalysisDefaultFreeFormLayoutConfiguration;
        grid?: outputs.quicksight.AnalysisDefaultGridLayoutConfiguration;
    }

    export interface AnalysisDefaultNewSheetConfiguration {
        interactiveLayoutConfiguration?: outputs.quicksight.AnalysisDefaultInteractiveLayoutConfiguration;
        paginatedLayoutConfiguration?: outputs.quicksight.AnalysisDefaultPaginatedLayoutConfiguration;
        sheetContentType?: enums.quicksight.AnalysisSheetContentType;
    }

    export interface AnalysisDefaultPaginatedLayoutConfiguration {
        sectionBased?: outputs.quicksight.AnalysisDefaultSectionBasedLayoutConfiguration;
    }

    export interface AnalysisDefaultSectionBasedLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.AnalysisSectionBasedLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaults {
        defaultNewSheetConfiguration: outputs.quicksight.AnalysisDefaultNewSheetConfiguration;
    }

    export interface AnalysisDefinition {
        analysisDefaults?: outputs.quicksight.AnalysisDefaults;
        calculatedFields?: outputs.quicksight.AnalysisCalculatedField[];
        columnConfigurations?: outputs.quicksight.AnalysisColumnConfiguration[];
        dataSetIdentifierDeclarations: outputs.quicksight.AnalysisDataSetIdentifierDeclaration[];
        filterGroups?: outputs.quicksight.AnalysisFilterGroup[];
        options?: outputs.quicksight.AnalysisAssetOptions;
        parameterDeclarations?: outputs.quicksight.AnalysisParameterDeclaration[];
        sheets?: outputs.quicksight.AnalysisSheetDefinition[];
    }

    export interface AnalysisDestinationParameterValueConfiguration {
        customValuesConfiguration?: outputs.quicksight.AnalysisCustomValuesConfiguration;
        selectAllValueOptions?: enums.quicksight.AnalysisSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        sourceField?: string;
        sourceParameterName?: string;
    }

    export interface AnalysisDimensionField {
        categoricalDimensionField?: outputs.quicksight.AnalysisCategoricalDimensionField;
        dateDimensionField?: outputs.quicksight.AnalysisDateDimensionField;
        numericalDimensionField?: outputs.quicksight.AnalysisNumericalDimensionField;
    }

    export interface AnalysisDonutCenterOptions {
        labelVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDonutOptions {
        arcOptions?: outputs.quicksight.AnalysisArcOptions;
        donutCenterOptions?: outputs.quicksight.AnalysisDonutCenterOptions;
    }

    export interface AnalysisDrillDownFilter {
        categoryFilter?: outputs.quicksight.AnalysisCategoryDrillDownFilter;
        numericEqualityFilter?: outputs.quicksight.AnalysisNumericEqualityDrillDownFilter;
        timeRangeFilter?: outputs.quicksight.AnalysisTimeRangeDrillDownFilter;
    }

    export interface AnalysisDropDownControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        selectAllOptions?: outputs.quicksight.AnalysisListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisDynamicDefaultValue {
        defaultValueColumn: outputs.quicksight.AnalysisColumnIdentifier;
        groupNameColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        userNameColumn?: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisEmptyVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        dataSetIdentifier: string;
        visualId: string;
    }

    export interface AnalysisEntity {
        path?: string;
    }

    export interface AnalysisError {
        message?: string;
        type?: enums.quicksight.AnalysisErrorType;
        violatedEntities?: outputs.quicksight.AnalysisEntity[];
    }

    export interface AnalysisExcludePeriodConfiguration {
        amount: number;
        granularity: enums.quicksight.AnalysisTimeGranularity;
        status?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisExplicitHierarchy {
        columns: outputs.quicksight.AnalysisColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        hierarchyId: string;
    }

    export interface AnalysisFieldBasedTooltip {
        aggregationVisibility?: enums.quicksight.AnalysisVisibility;
        tooltipFields?: outputs.quicksight.AnalysisTooltipItem[];
        tooltipTitleType?: enums.quicksight.AnalysisTooltipTitleType;
    }

    export interface AnalysisFieldLabelType {
        fieldId?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFieldSeriesItem {
        axisBinding: enums.quicksight.AnalysisAxisBinding;
        fieldId: string;
        settings?: outputs.quicksight.AnalysisLineChartSeriesSettings;
    }

    export interface AnalysisFieldSort {
        direction: enums.quicksight.AnalysisSortDirection;
        fieldId: string;
    }

    export interface AnalysisFieldSortOptions {
        columnSort?: outputs.quicksight.AnalysisColumnSort;
        fieldSort?: outputs.quicksight.AnalysisFieldSort;
    }

    export interface AnalysisFieldTooltipItem {
        fieldId: string;
        label?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFilledMapAggregatedFieldWells {
        geospatial?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisFilledMapConditionalFormatting {
        conditionalFormattingOptions: outputs.quicksight.AnalysisFilledMapConditionalFormattingOption[];
    }

    export interface AnalysisFilledMapConditionalFormattingOption {
        shape: outputs.quicksight.AnalysisFilledMapShapeConditionalFormatting;
    }

    export interface AnalysisFilledMapConfiguration {
        fieldWells?: outputs.quicksight.AnalysisFilledMapFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        mapStyleOptions?: outputs.quicksight.AnalysisGeospatialMapStyleOptions;
        sortConfiguration?: outputs.quicksight.AnalysisFilledMapSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        windowOptions?: outputs.quicksight.AnalysisGeospatialWindowOptions;
    }

    export interface AnalysisFilledMapFieldWells {
        filledMapAggregatedFieldWells?: outputs.quicksight.AnalysisFilledMapAggregatedFieldWells;
    }

    export interface AnalysisFilledMapShapeConditionalFormatting {
        fieldId: string;
        format?: outputs.quicksight.AnalysisShapeConditionalFormat;
    }

    export interface AnalysisFilledMapSortConfiguration {
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisFilledMapVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisFilledMapConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.AnalysisFilledMapConditionalFormatting;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisFilter {
        categoryFilter?: outputs.quicksight.AnalysisCategoryFilter;
        numericEqualityFilter?: outputs.quicksight.AnalysisNumericEqualityFilter;
        numericRangeFilter?: outputs.quicksight.AnalysisNumericRangeFilter;
        relativeDatesFilter?: outputs.quicksight.AnalysisRelativeDatesFilter;
        timeEqualityFilter?: outputs.quicksight.AnalysisTimeEqualityFilter;
        timeRangeFilter?: outputs.quicksight.AnalysisTimeRangeFilter;
        topBottomFilter?: outputs.quicksight.AnalysisTopBottomFilter;
    }

    export interface AnalysisFilterControl {
        dateTimePicker?: outputs.quicksight.AnalysisFilterDateTimePickerControl;
        dropdown?: outputs.quicksight.AnalysisFilterDropDownControl;
        list?: outputs.quicksight.AnalysisFilterListControl;
        relativeDateTime?: outputs.quicksight.AnalysisFilterRelativeDateTimeControl;
        slider?: outputs.quicksight.AnalysisFilterSliderControl;
        textArea?: outputs.quicksight.AnalysisFilterTextAreaControl;
        textField?: outputs.quicksight.AnalysisFilterTextFieldControl;
    }

    export interface AnalysisFilterDateTimePickerControl {
        displayOptions?: outputs.quicksight.AnalysisDateTimePickerControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlDateTimePickerType;
    }

    export interface AnalysisFilterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.AnalysisDropDownControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisFilterGroup {
        crossDataset: enums.quicksight.AnalysisCrossDatasetTypes;
        filterGroupId: string;
        filters: outputs.quicksight.AnalysisFilter[];
        scopeConfiguration: outputs.quicksight.AnalysisFilterScopeConfiguration;
        status?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        nullOption?: enums.quicksight.AnalysisFilterNullOption;
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisFilterListControl {
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.AnalysisListControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisFilterOperationSelectedFieldsConfiguration {
        selectedColumns?: outputs.quicksight.AnalysisColumnIdentifier[];
        selectedFieldOptions?: enums.quicksight.AnalysisSelectedFieldOptions;
        selectedFields?: string[];
    }

    export interface AnalysisFilterOperationTargetVisualsConfiguration {
        sameSheetTargetVisualConfiguration?: outputs.quicksight.AnalysisSameSheetTargetVisualConfiguration;
    }

    export interface AnalysisFilterRelativeDateTimeControl {
        displayOptions?: outputs.quicksight.AnalysisRelativeDateTimeControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface AnalysisFilterScopeConfiguration {
        allSheets?: outputs.quicksight.AnalysisAllSheetsFilterScopeConfiguration;
        selectedSheets?: outputs.quicksight.AnalysisSelectedSheetsFilterScopeConfiguration;
    }

    export interface AnalysisFilterSelectableValues {
        values?: string[];
    }

    export interface AnalysisFilterSliderControl {
        displayOptions?: outputs.quicksight.AnalysisSliderControlDisplayOptions;
        filterControlId: string;
        maximumValue: number;
        minimumValue: number;
        sourceFilterId: string;
        stepSize: number;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlSliderType;
    }

    export interface AnalysisFilterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.AnalysisTextAreaControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface AnalysisFilterTextFieldControl {
        displayOptions?: outputs.quicksight.AnalysisTextFieldControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface AnalysisFontConfiguration {
        fontColor?: string;
        fontDecoration?: enums.quicksight.AnalysisFontDecoration;
        fontSize?: outputs.quicksight.AnalysisFontSize;
        fontStyle?: enums.quicksight.AnalysisFontStyle;
        fontWeight?: outputs.quicksight.AnalysisFontWeight;
    }

    export interface AnalysisFontSize {
        relative?: enums.quicksight.AnalysisRelativeFontSize;
    }

    export interface AnalysisFontWeight {
        name?: enums.quicksight.AnalysisFontWeightName;
    }

    export interface AnalysisForecastComputation {
        computationId: string;
        customSeasonalityValue?: number;
        lowerBoundary?: number;
        name?: string;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: enums.quicksight.AnalysisForecastComputationSeasonality;
        time?: outputs.quicksight.AnalysisDimensionField;
        upperBoundary?: number;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisForecastConfiguration {
        forecastProperties?: outputs.quicksight.AnalysisTimeBasedForecastProperties;
        scenario?: outputs.quicksight.AnalysisForecastScenario;
    }

    export interface AnalysisForecastScenario {
        whatIfPointScenario?: outputs.quicksight.AnalysisWhatIfPointScenario;
        whatIfRangeScenario?: outputs.quicksight.AnalysisWhatIfRangeScenario;
    }

    export interface AnalysisFormatConfiguration {
        dateTimeFormatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
        numberFormatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
        stringFormatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
    }

    export interface AnalysisFreeFormLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.AnalysisFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface AnalysisFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.AnalysisFreeFormLayoutCanvasSizeOptions;
        elements: outputs.quicksight.AnalysisFreeFormLayoutElement[];
    }

    export interface AnalysisFreeFormLayoutElement {
        backgroundStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBackgroundStyle;
        borderStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBorderStyle;
        elementId: string;
        elementType: enums.quicksight.AnalysisLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        loadingAnimation?: outputs.quicksight.AnalysisLoadingAnimation;
        renderingRules?: outputs.quicksight.AnalysisSheetElementRenderingRule[];
        selectedBorderStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBorderStyle;
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface AnalysisFreeFormLayoutElementBackgroundStyle {
        color?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFreeFormLayoutElementBorderStyle {
        color?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface AnalysisFreeFormSectionLayoutConfiguration {
        elements: outputs.quicksight.AnalysisFreeFormLayoutElement[];
    }

    export interface AnalysisFunnelChartAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisFunnelChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        dataLabelOptions?: outputs.quicksight.AnalysisFunnelChartDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisFunnelChartFieldWells;
        sortConfiguration?: outputs.quicksight.AnalysisFunnelChartSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisFunnelChartDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.AnalysisVisibility;
        labelColor?: string;
        labelFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        measureDataLabelStyle?: enums.quicksight.AnalysisFunnelChartMeasureDataLabelStyle;
        measureLabelVisibility?: enums.quicksight.AnalysisVisibility;
        position?: enums.quicksight.AnalysisDataLabelPosition;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFunnelChartFieldWells {
        funnelChartAggregatedFieldWells?: outputs.quicksight.AnalysisFunnelChartAggregatedFieldWells;
    }

    export interface AnalysisFunnelChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisFunnelChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisFunnelChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisGaugeChartArcConditionalFormatting {
        foregroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisGaugeChartConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.AnalysisGaugeChartConditionalFormattingOption[];
    }

    export interface AnalysisGaugeChartConditionalFormattingOption {
        arc?: outputs.quicksight.AnalysisGaugeChartArcConditionalFormatting;
        primaryValue?: outputs.quicksight.AnalysisGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface AnalysisGaugeChartConfiguration {
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisGaugeChartFieldWells;
        gaugeChartOptions?: outputs.quicksight.AnalysisGaugeChartOptions;
        tooltipOptions?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisGaugeChartFieldWells {
        targetValues?: outputs.quicksight.AnalysisMeasureField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisGaugeChartOptions {
        arc?: outputs.quicksight.AnalysisArcConfiguration;
        arcAxis?: outputs.quicksight.AnalysisArcAxisConfiguration;
        comparison?: outputs.quicksight.AnalysisComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.AnalysisPrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
    }

    export interface AnalysisGaugeChartPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisGaugeChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisGaugeChartConfiguration;
        conditionalFormatting?: outputs.quicksight.AnalysisGaugeChartConditionalFormatting;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisGeospatialCoordinateBounds {
        east: number;
        north: number;
        south: number;
        west: number;
    }

    export interface AnalysisGeospatialHeatmapColorScale {
        colors?: outputs.quicksight.AnalysisGeospatialHeatmapDataColor[];
    }

    export interface AnalysisGeospatialHeatmapConfiguration {
        heatmapColor?: outputs.quicksight.AnalysisGeospatialHeatmapColorScale;
    }

    export interface AnalysisGeospatialHeatmapDataColor {
        color: string;
    }

    export interface AnalysisGeospatialMapAggregatedFieldWells {
        colors?: outputs.quicksight.AnalysisDimensionField[];
        geospatial?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisGeospatialMapConfiguration {
        fieldWells?: outputs.quicksight.AnalysisGeospatialMapFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        mapStyleOptions?: outputs.quicksight.AnalysisGeospatialMapStyleOptions;
        pointStyleOptions?: outputs.quicksight.AnalysisGeospatialPointStyleOptions;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        windowOptions?: outputs.quicksight.AnalysisGeospatialWindowOptions;
    }

    export interface AnalysisGeospatialMapFieldWells {
        geospatialMapAggregatedFieldWells?: outputs.quicksight.AnalysisGeospatialMapAggregatedFieldWells;
    }

    export interface AnalysisGeospatialMapStyleOptions {
        baseMapStyle?: enums.quicksight.AnalysisBaseMapStyleType;
    }

    export interface AnalysisGeospatialMapVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisGeospatialMapConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisGeospatialPointStyleOptions {
        clusterMarkerConfiguration?: outputs.quicksight.AnalysisClusterMarkerConfiguration;
        heatmapConfiguration?: outputs.quicksight.AnalysisGeospatialHeatmapConfiguration;
        selectedPointStyle?: enums.quicksight.AnalysisGeospatialSelectedPointStyle;
    }

    export interface AnalysisGeospatialWindowOptions {
        bounds?: outputs.quicksight.AnalysisGeospatialCoordinateBounds;
        mapZoomMode?: enums.quicksight.AnalysisMapZoomMode;
    }

    export interface AnalysisGlobalTableBorderOptions {
        sideSpecificBorder?: outputs.quicksight.AnalysisTableSideBorderOptions;
        uniformBorder?: outputs.quicksight.AnalysisTableBorderOptions;
    }

    export interface AnalysisGradientColor {
        stops?: outputs.quicksight.AnalysisGradientStop[];
    }

    export interface AnalysisGradientStop {
        color?: string;
        dataValue?: number;
        gradientOffset: number;
    }

    export interface AnalysisGridLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.AnalysisGridLayoutScreenCanvasSizeOptions;
    }

    export interface AnalysisGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.AnalysisGridLayoutCanvasSizeOptions;
        elements: outputs.quicksight.AnalysisGridLayoutElement[];
    }

    export interface AnalysisGridLayoutElement {
        columnIndex?: number;
        columnSpan: number;
        elementId: string;
        elementType: enums.quicksight.AnalysisLayoutElementType;
        rowIndex?: number;
        rowSpan: number;
    }

    export interface AnalysisGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        resizeOption: enums.quicksight.AnalysisResizeOption;
    }

    export interface AnalysisGrowthRateComputation {
        computationId: string;
        name?: string;
        periodSize?: number;
        time?: outputs.quicksight.AnalysisDimensionField;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisHeaderFooterSectionConfiguration {
        layout: outputs.quicksight.AnalysisSectionLayoutConfiguration;
        sectionId: string;
        style?: outputs.quicksight.AnalysisSectionStyle;
    }

    export interface AnalysisHeatMapAggregatedFieldWells {
        columns?: outputs.quicksight.AnalysisDimensionField[];
        rows?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisHeatMapConfiguration {
        colorScale?: outputs.quicksight.AnalysisColorScale;
        columnLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisHeatMapFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        rowLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.AnalysisHeatMapSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
    }

    export interface AnalysisHeatMapFieldWells {
        heatMapAggregatedFieldWells?: outputs.quicksight.AnalysisHeatMapAggregatedFieldWells;
    }

    export interface AnalysisHeatMapSortConfiguration {
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        heatMapColumnSort?: outputs.quicksight.AnalysisFieldSortOptions[];
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        heatMapRowSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisHeatMapVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisHeatMapConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisHistogramAggregatedFieldWells {
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisHistogramBinOptions {
        binCount?: outputs.quicksight.AnalysisBinCountOptions;
        binWidth?: outputs.quicksight.AnalysisBinWidthOptions;
        selectedBinType?: enums.quicksight.AnalysisHistogramBinType;
        startValue?: number;
    }

    export interface AnalysisHistogramConfiguration {
        binOptions?: outputs.quicksight.AnalysisHistogramBinOptions;
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisHistogramFieldWells;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
    }

    export interface AnalysisHistogramFieldWells {
        histogramAggregatedFieldWells?: outputs.quicksight.AnalysisHistogramAggregatedFieldWells;
    }

    export interface AnalysisHistogramVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisHistogramConfiguration;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisInsightConfiguration {
        computations?: outputs.quicksight.AnalysisComputation[];
        customNarrative?: outputs.quicksight.AnalysisCustomNarrativeOptions;
    }

    export interface AnalysisInsightVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        dataSetIdentifier: string;
        insightConfiguration?: outputs.quicksight.AnalysisInsightConfiguration;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisIntegerDefaultValues {
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface AnalysisIntegerParameter {
        name: string;
        values: number[];
    }

    export interface AnalysisIntegerParameterDeclaration {
        defaultValues?: outputs.quicksight.AnalysisIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        valueWhenUnset?: outputs.quicksight.AnalysisIntegerValueWhenUnsetConfiguration;
    }

    export interface AnalysisIntegerValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisItemsLimitConfiguration {
        itemsLimit?: number;
        otherCategories?: enums.quicksight.AnalysisOtherCategories;
    }

    export interface AnalysisKpiActualValueConditionalFormatting {
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiComparisonValueConditionalFormatting {
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.AnalysisKpiConditionalFormattingOption[];
    }

    export interface AnalysisKpiConditionalFormattingOption {
        actualValue?: outputs.quicksight.AnalysisKpiActualValueConditionalFormatting;
        comparisonValue?: outputs.quicksight.AnalysisKpiComparisonValueConditionalFormatting;
        primaryValue?: outputs.quicksight.AnalysisKpiPrimaryValueConditionalFormatting;
        progressBar?: outputs.quicksight.AnalysisKpiProgressBarConditionalFormatting;
    }

    export interface AnalysisKpiConfiguration {
        fieldWells?: outputs.quicksight.AnalysisKpiFieldWells;
        kpiOptions?: outputs.quicksight.AnalysisKpiOptions;
        sortConfiguration?: outputs.quicksight.AnalysisKpiSortConfiguration;
    }

    export interface AnalysisKpiFieldWells {
        targetValues?: outputs.quicksight.AnalysisMeasureField[];
        trendGroups?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisKpiOptions {
        comparison?: outputs.quicksight.AnalysisComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.AnalysisPrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        progressBar?: outputs.quicksight.AnalysisProgressBarOptions;
        secondaryValue?: outputs.quicksight.AnalysisSecondaryValueOptions;
        secondaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        sparkline?: outputs.quicksight.AnalysisKpiSparklineOptions;
        trendArrows?: outputs.quicksight.AnalysisTrendArrowOptions;
        visualLayoutOptions?: outputs.quicksight.AnalysisKpiVisualLayoutOptions;
    }

    export interface AnalysisKpiPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiProgressBarConditionalFormatting {
        foregroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiSortConfiguration {
        trendGroupSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisKpiSparklineOptions {
        color?: string;
        tooltipVisibility?: enums.quicksight.AnalysisVisibility;
        type: enums.quicksight.AnalysisKpiSparklineType;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisKpiVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisKpiConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.AnalysisKpiConditionalFormatting;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisKpiVisualLayoutOptions {
        standardLayout?: outputs.quicksight.AnalysisKpiVisualStandardLayout;
    }

    export interface AnalysisKpiVisualStandardLayout {
        type: enums.quicksight.AnalysisKpiVisualStandardLayoutType;
    }

    export interface AnalysisLabelOptions {
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLayout {
        configuration: outputs.quicksight.AnalysisLayoutConfiguration;
    }

    export interface AnalysisLayoutConfiguration {
        freeFormLayout?: outputs.quicksight.AnalysisFreeFormLayoutConfiguration;
        gridLayout?: outputs.quicksight.AnalysisGridLayoutConfiguration;
        sectionBasedLayout?: outputs.quicksight.AnalysisSectionBasedLayoutConfiguration;
    }

    export interface AnalysisLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        position?: enums.quicksight.AnalysisLegendPosition;
        title?: outputs.quicksight.AnalysisLabelOptions;
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisLineChartAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        colors?: outputs.quicksight.AnalysisDimensionField[];
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisLineChartConfiguration {
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        defaultSeriesSettings?: outputs.quicksight.AnalysisLineChartDefaultSeriesSettings;
        fieldWells?: outputs.quicksight.AnalysisLineChartFieldWells;
        forecastConfigurations?: outputs.quicksight.AnalysisForecastConfiguration[];
        legend?: outputs.quicksight.AnalysisLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisLineSeriesAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.AnalysisLineSeriesAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        series?: outputs.quicksight.AnalysisSeriesItem[];
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.AnalysisLineChartSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        type?: enums.quicksight.AnalysisLineChartType;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
    }

    export interface AnalysisLineChartDefaultSeriesSettings {
        axisBinding?: enums.quicksight.AnalysisAxisBinding;
        lineStyleSettings?: outputs.quicksight.AnalysisLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.AnalysisLineChartMarkerStyleSettings;
    }

    export interface AnalysisLineChartFieldWells {
        lineChartAggregatedFieldWells?: outputs.quicksight.AnalysisLineChartAggregatedFieldWells;
    }

    export interface AnalysisLineChartLineStyleSettings {
        lineInterpolation?: enums.quicksight.AnalysisLineInterpolation;
        lineStyle?: enums.quicksight.AnalysisLineChartLineStyle;
        lineVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface AnalysisLineChartMarkerStyleSettings {
        markerColor?: string;
        markerShape?: enums.quicksight.AnalysisLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        markerVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLineChartSeriesSettings {
        lineStyleSettings?: outputs.quicksight.AnalysisLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.AnalysisLineChartMarkerStyleSettings;
    }

    export interface AnalysisLineChartSortConfiguration {
        categoryItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        colorItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisLineChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisLineChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisLineSeriesAxisDisplayOptions {
        axisOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        missingDataConfigurations?: outputs.quicksight.AnalysisMissingDataConfiguration[];
    }

    export interface AnalysisListControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        searchOptions?: outputs.quicksight.AnalysisListControlSearchOptions;
        selectAllOptions?: outputs.quicksight.AnalysisListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisListControlSearchOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisListControlSelectAllOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLoadingAnimation {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLocalNavigationConfiguration {
        targetSheetId: string;
    }

    export interface AnalysisLongFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface AnalysisMappedDataSetParameter {
        dataSetIdentifier: string;
        dataSetParameterName: string;
    }

    export interface AnalysisMaximumLabelType {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisMaximumMinimumComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.AnalysisDimensionField;
        type: enums.quicksight.AnalysisMaximumMinimumComputationType;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisMeasureField {
        calculatedMeasureField?: outputs.quicksight.AnalysisCalculatedMeasureField;
        categoricalMeasureField?: outputs.quicksight.AnalysisCategoricalMeasureField;
        dateMeasureField?: outputs.quicksight.AnalysisDateMeasureField;
        numericalMeasureField?: outputs.quicksight.AnalysisNumericalMeasureField;
    }

    export interface AnalysisMetricComparisonComputation {
        computationId: string;
        fromValue?: outputs.quicksight.AnalysisMeasureField;
        name?: string;
        targetValue?: outputs.quicksight.AnalysisMeasureField;
        time?: outputs.quicksight.AnalysisDimensionField;
    }

    export interface AnalysisMinimumLabelType {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisMissingDataConfiguration {
        treatmentOption?: enums.quicksight.AnalysisMissingDataTreatmentOption;
    }

    export interface AnalysisNegativeValueConfiguration {
        displayMode: enums.quicksight.AnalysisNegativeValueDisplayMode;
    }

    export interface AnalysisNullValueFormatConfiguration {
        nullString: string;
    }

    export interface AnalysisNumberDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        numberScale?: enums.quicksight.AnalysisNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface AnalysisNumberFormatConfiguration {
        formatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    export interface AnalysisNumericAxisOptions {
        range?: outputs.quicksight.AnalysisAxisDisplayRange;
        scale?: outputs.quicksight.AnalysisAxisScale;
    }

    export interface AnalysisNumericEqualityDrillDownFilter {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        value: number;
    }

    export interface AnalysisNumericEqualityFilter {
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        filterId: string;
        matchOperator: enums.quicksight.AnalysisNumericEqualityMatchOperator;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.AnalysisNumericFilterSelectAllOptions;
        value?: number;
    }

    export interface AnalysisNumericFormatConfiguration {
        currencyDisplayFormatConfiguration?: outputs.quicksight.AnalysisCurrencyDisplayFormatConfiguration;
        numberDisplayFormatConfiguration?: outputs.quicksight.AnalysisNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.AnalysisPercentageDisplayFormatConfiguration;
    }

    export interface AnalysisNumericRangeFilter {
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        rangeMaximum?: outputs.quicksight.AnalysisNumericRangeFilterValue;
        rangeMinimum?: outputs.quicksight.AnalysisNumericRangeFilterValue;
        selectAllOptions?: enums.quicksight.AnalysisNumericFilterSelectAllOptions;
    }

    export interface AnalysisNumericRangeFilterValue {
        parameter?: string;
        staticValue?: number;
    }

    export interface AnalysisNumericSeparatorConfiguration {
        decimalSeparator?: enums.quicksight.AnalysisNumericSeparatorSymbol;
        thousandsSeparator?: outputs.quicksight.AnalysisThousandSeparatorOptions;
    }

    export interface AnalysisNumericalAggregationFunction {
        percentileAggregation?: outputs.quicksight.AnalysisPercentileAggregation;
        simpleNumericalAggregation?: enums.quicksight.AnalysisSimpleNumericalAggregationFunction;
    }

    export interface AnalysisNumericalDimensionField {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
        hierarchyId?: string;
    }

    export interface AnalysisNumericalMeasureField {
        aggregationFunction?: outputs.quicksight.AnalysisNumericalAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
    }

    export interface AnalysisPaginationConfiguration {
        pageNumber: number;
        pageSize: number;
    }

    export interface AnalysisPanelConfiguration {
        backgroundColor?: string;
        backgroundVisibility?: enums.quicksight.AnalysisVisibility;
        borderColor?: string;
        borderStyle?: enums.quicksight.AnalysisPanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        borderVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        gutterVisibility?: enums.quicksight.AnalysisVisibility;
        title?: outputs.quicksight.AnalysisPanelTitleOptions;
    }

    export interface AnalysisPanelTitleOptions {
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        horizontalTextAlignment?: enums.quicksight.AnalysisHorizontalTextAlignment;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisParameterControl {
        dateTimePicker?: outputs.quicksight.AnalysisParameterDateTimePickerControl;
        dropdown?: outputs.quicksight.AnalysisParameterDropDownControl;
        list?: outputs.quicksight.AnalysisParameterListControl;
        slider?: outputs.quicksight.AnalysisParameterSliderControl;
        textArea?: outputs.quicksight.AnalysisParameterTextAreaControl;
        textField?: outputs.quicksight.AnalysisParameterTextFieldControl;
    }

    export interface AnalysisParameterDateTimePickerControl {
        displayOptions?: outputs.quicksight.AnalysisDateTimePickerControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface AnalysisParameterDeclaration {
        dateTimeParameterDeclaration?: outputs.quicksight.AnalysisDateTimeParameterDeclaration;
        decimalParameterDeclaration?: outputs.quicksight.AnalysisDecimalParameterDeclaration;
        integerParameterDeclaration?: outputs.quicksight.AnalysisIntegerParameterDeclaration;
        stringParameterDeclaration?: outputs.quicksight.AnalysisStringParameterDeclaration;
    }

    export interface AnalysisParameterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.AnalysisDropDownControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.AnalysisParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisParameterListControl {
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.AnalysisListControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.AnalysisParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisParameterSelectableValues {
        linkToDataSetColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        values?: string[];
    }

    export interface AnalysisParameterSliderControl {
        displayOptions?: outputs.quicksight.AnalysisSliderControlDisplayOptions;
        maximumValue: number;
        minimumValue: number;
        parameterControlId: string;
        sourceParameterName: string;
        stepSize: number;
        title: string;
    }

    export interface AnalysisParameterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.AnalysisTextAreaControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface AnalysisParameterTextFieldControl {
        displayOptions?: outputs.quicksight.AnalysisTextFieldControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface AnalysisParameters {
        dateTimeParameters?: outputs.quicksight.AnalysisDateTimeParameter[];
        decimalParameters?: outputs.quicksight.AnalysisDecimalParameter[];
        integerParameters?: outputs.quicksight.AnalysisIntegerParameter[];
        stringParameters?: outputs.quicksight.AnalysisStringParameter[];
    }

    export interface AnalysisPercentVisibleRange {
        from?: number;
        to?: number;
    }

    export interface AnalysisPercentageDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface AnalysisPercentileAggregation {
        percentileValue?: number;
    }

    export interface AnalysisPeriodOverPeriodComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.AnalysisDimensionField;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisPeriodToDateComputation {
        computationId: string;
        name?: string;
        periodTimeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        time?: outputs.quicksight.AnalysisDimensionField;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisPieChartAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisPieChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        donutOptions?: outputs.quicksight.AnalysisDonutOptions;
        fieldWells?: outputs.quicksight.AnalysisPieChartFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.AnalysisPieChartSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisPieChartFieldWells {
        pieChartAggregatedFieldWells?: outputs.quicksight.AnalysisPieChartAggregatedFieldWells;
    }

    export interface AnalysisPieChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisPieChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisPieChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisPivotFieldSortOptions {
        fieldId: string;
        sortBy: outputs.quicksight.AnalysisPivotTableSortBy;
    }

    export interface AnalysisPivotTableAggregatedFieldWells {
        columns?: outputs.quicksight.AnalysisDimensionField[];
        rows?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisPivotTableCellConditionalFormatting {
        fieldId: string;
        scope?: outputs.quicksight.AnalysisPivotTableConditionalFormattingScope;
        scopes?: outputs.quicksight.AnalysisPivotTableConditionalFormattingScope[];
        textFormat?: outputs.quicksight.AnalysisTextConditionalFormat;
    }

    export interface AnalysisPivotTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.AnalysisPivotTableConditionalFormattingOption[];
    }

    export interface AnalysisPivotTableConditionalFormattingOption {
        cell?: outputs.quicksight.AnalysisPivotTableCellConditionalFormatting;
    }

    export interface AnalysisPivotTableConditionalFormattingScope {
        role?: enums.quicksight.AnalysisPivotTableConditionalFormattingScopeRole;
    }

    export interface AnalysisPivotTableConfiguration {
        fieldOptions?: outputs.quicksight.AnalysisPivotTableFieldOptions;
        fieldWells?: outputs.quicksight.AnalysisPivotTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.AnalysisPivotTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.AnalysisPivotTableSortConfiguration;
        tableOptions?: outputs.quicksight.AnalysisPivotTableOptions;
        totalOptions?: outputs.quicksight.AnalysisPivotTableTotalOptions;
    }

    export interface AnalysisPivotTableDataPathOption {
        dataPathList: outputs.quicksight.AnalysisDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisPivotTableFieldCollapseStateOption {
        state?: enums.quicksight.AnalysisPivotTableFieldCollapseState;
        target: outputs.quicksight.AnalysisPivotTableFieldCollapseStateTarget;
    }

    export interface AnalysisPivotTableFieldCollapseStateTarget {
        fieldDataPathValues?: outputs.quicksight.AnalysisDataPathValue[];
        fieldId?: string;
    }

    export interface AnalysisPivotTableFieldOption {
        customLabel?: string;
        fieldId: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableFieldOptions {
        collapseStateOptions?: outputs.quicksight.AnalysisPivotTableFieldCollapseStateOption[];
        dataPathOptions?: outputs.quicksight.AnalysisPivotTableDataPathOption[];
        selectedFieldOptions?: outputs.quicksight.AnalysisPivotTableFieldOption[];
    }

    export interface AnalysisPivotTableFieldSubtotalOptions {
        fieldId?: string;
    }

    export interface AnalysisPivotTableFieldWells {
        pivotTableAggregatedFieldWells?: outputs.quicksight.AnalysisPivotTableAggregatedFieldWells;
    }

    export interface AnalysisPivotTableOptions {
        cellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        collapsedRowDimensionsVisibility?: enums.quicksight.AnalysisVisibility;
        columnHeaderStyle?: outputs.quicksight.AnalysisTableCellStyle;
        columnNamesVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        metricPlacement?: enums.quicksight.AnalysisPivotTableMetricPlacement;
        rowAlternateColorOptions?: outputs.quicksight.AnalysisRowAlternateColorOptions;
        rowFieldNamesStyle?: outputs.quicksight.AnalysisTableCellStyle;
        rowHeaderStyle?: outputs.quicksight.AnalysisTableCellStyle;
        rowsLabelOptions?: outputs.quicksight.AnalysisPivotTableRowsLabelOptions;
        rowsLayout?: enums.quicksight.AnalysisPivotTableRowsLayout;
        singleMetricVisibility?: enums.quicksight.AnalysisVisibility;
        toggleButtonsVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.AnalysisVisibility;
        verticalOverflowVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableRowsLabelOptions {
        customLabel?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableSortBy {
        column?: outputs.quicksight.AnalysisColumnSort;
        dataPath?: outputs.quicksight.AnalysisDataPathSort;
        field?: outputs.quicksight.AnalysisFieldSort;
    }

    export interface AnalysisPivotTableSortConfiguration {
        fieldSortOptions?: outputs.quicksight.AnalysisPivotFieldSortOptions[];
    }

    export interface AnalysisPivotTableTotalOptions {
        columnSubtotalOptions?: outputs.quicksight.AnalysisSubtotalOptions;
        columnTotalOptions?: outputs.quicksight.AnalysisPivotTotalOptions;
        rowSubtotalOptions?: outputs.quicksight.AnalysisSubtotalOptions;
        rowTotalOptions?: outputs.quicksight.AnalysisPivotTotalOptions;
    }

    export interface AnalysisPivotTableVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisPivotTableConfiguration;
        conditionalFormatting?: outputs.quicksight.AnalysisPivotTableConditionalFormatting;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisPivotTotalOptions {
        customLabel?: string;
        metricHeaderCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        placement?: enums.quicksight.AnalysisTableTotalsPlacement;
        scrollStatus?: enums.quicksight.AnalysisTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.AnalysisTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        valueCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
    }

    export interface AnalysisPredefinedHierarchy {
        columns: outputs.quicksight.AnalysisColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        hierarchyId: string;
    }

    export interface AnalysisProgressBarOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisRadarChartAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        color?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisRadarChartAreaStyleSettings {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisRadarChartConfiguration {
        alternateBandColorsVisibility?: enums.quicksight.AnalysisVisibility;
        alternateBandEvenColor?: string;
        alternateBandOddColor?: string;
        axesRangeScale?: enums.quicksight.AnalysisRadarChartAxesRangeScale;
        baseSeriesSettings?: outputs.quicksight.AnalysisRadarChartSeriesSettings;
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        colorAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisRadarChartFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        shape?: enums.quicksight.AnalysisRadarChartShape;
        sortConfiguration?: outputs.quicksight.AnalysisRadarChartSortConfiguration;
        startAngle?: number;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisRadarChartFieldWells {
        radarChartAggregatedFieldWells?: outputs.quicksight.AnalysisRadarChartAggregatedFieldWells;
    }

    export interface AnalysisRadarChartSeriesSettings {
        areaStyleSettings?: outputs.quicksight.AnalysisRadarChartAreaStyleSettings;
    }

    export interface AnalysisRadarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisRadarChartVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisRadarChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisRangeEndsLabelType {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisReferenceLine {
        dataConfiguration: outputs.quicksight.AnalysisReferenceLineDataConfiguration;
        labelConfiguration?: outputs.quicksight.AnalysisReferenceLineLabelConfiguration;
        status?: enums.quicksight.AnalysisWidgetStatus;
        styleConfiguration?: outputs.quicksight.AnalysisReferenceLineStyleConfiguration;
    }

    export interface AnalysisReferenceLineCustomLabelConfiguration {
        customLabel: string;
    }

    export interface AnalysisReferenceLineDataConfiguration {
        axisBinding?: enums.quicksight.AnalysisAxisBinding;
        dynamicConfiguration?: outputs.quicksight.AnalysisReferenceLineDynamicDataConfiguration;
        seriesType?: enums.quicksight.AnalysisReferenceLineSeriesType;
        staticConfiguration?: outputs.quicksight.AnalysisReferenceLineStaticDataConfiguration;
    }

    export interface AnalysisReferenceLineDynamicDataConfiguration {
        calculation: outputs.quicksight.AnalysisNumericalAggregationFunction;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        measureAggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
    }

    export interface AnalysisReferenceLineLabelConfiguration {
        customLabelConfiguration?: outputs.quicksight.AnalysisReferenceLineCustomLabelConfiguration;
        fontColor?: string;
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        horizontalPosition?: enums.quicksight.AnalysisReferenceLineLabelHorizontalPosition;
        valueLabelConfiguration?: outputs.quicksight.AnalysisReferenceLineValueLabelConfiguration;
        verticalPosition?: enums.quicksight.AnalysisReferenceLineLabelVerticalPosition;
    }

    export interface AnalysisReferenceLineStaticDataConfiguration {
        value: number;
    }

    export interface AnalysisReferenceLineStyleConfiguration {
        color?: string;
        pattern?: enums.quicksight.AnalysisReferenceLinePatternType;
    }

    export interface AnalysisReferenceLineValueLabelConfiguration {
        formatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
        relativePosition?: enums.quicksight.AnalysisReferenceLineValueLabelRelativePosition;
    }

    export interface AnalysisRelativeDateTimeControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisRelativeDatesFilter {
        anchorDateConfiguration: outputs.quicksight.AnalysisAnchorDateConfiguration;
        column: outputs.quicksight.AnalysisColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.AnalysisExcludePeriodConfiguration;
        filterId: string;
        minimumGranularity?: enums.quicksight.AnalysisTimeGranularity;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        parameterName?: string;
        relativeDateType: enums.quicksight.AnalysisRelativeDateType;
        relativeDateValue?: number;
        timeGranularity: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisResourcePermission {
        actions: string[];
        principal: string;
    }

    export interface AnalysisRollingDateConfiguration {
        dataSetIdentifier?: string;
        expression: string;
    }

    export interface AnalysisRowAlternateColorOptions {
        rowAlternateColors?: string[];
        status?: enums.quicksight.AnalysisWidgetStatus;
        usePrimaryBackgroundColor?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisSameSheetTargetVisualConfiguration {
        targetVisualOptions?: enums.quicksight.AnalysisTargetVisualOptions;
        targetVisuals?: string[];
    }

    export interface AnalysisSankeyDiagramAggregatedFieldWells {
        destination?: outputs.quicksight.AnalysisDimensionField[];
        source?: outputs.quicksight.AnalysisDimensionField[];
        weight?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisSankeyDiagramChartConfiguration {
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisSankeyDiagramFieldWells;
        sortConfiguration?: outputs.quicksight.AnalysisSankeyDiagramSortConfiguration;
    }

    export interface AnalysisSankeyDiagramFieldWells {
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.AnalysisSankeyDiagramAggregatedFieldWells;
    }

    export interface AnalysisSankeyDiagramSortConfiguration {
        destinationItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        sourceItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        weightSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisSankeyDiagramVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisSankeyDiagramChartConfiguration;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisScatterPlotCategoricallyAggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        label?: outputs.quicksight.AnalysisDimensionField[];
        size?: outputs.quicksight.AnalysisMeasureField[];
        xAxis?: outputs.quicksight.AnalysisMeasureField[];
        yAxis?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisScatterPlotConfiguration {
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisScatterPlotFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        yAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
    }

    export interface AnalysisScatterPlotFieldWells {
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.AnalysisScatterPlotCategoricallyAggregatedFieldWells;
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.AnalysisScatterPlotUnaggregatedFieldWells;
    }

    export interface AnalysisScatterPlotUnaggregatedFieldWells {
        category?: outputs.quicksight.AnalysisDimensionField[];
        label?: outputs.quicksight.AnalysisDimensionField[];
        size?: outputs.quicksight.AnalysisMeasureField[];
        xAxis?: outputs.quicksight.AnalysisDimensionField[];
        yAxis?: outputs.quicksight.AnalysisDimensionField[];
    }

    export interface AnalysisScatterPlotVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisScatterPlotConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisScrollBarOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
        visibleRange?: outputs.quicksight.AnalysisVisibleRangeOptions;
    }

    export interface AnalysisSecondaryValueOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSectionAfterPageBreak {
        status?: enums.quicksight.AnalysisSectionPageBreakStatus;
    }

    export interface AnalysisSectionBasedLayoutCanvasSizeOptions {
        paperCanvasSizeOptions?: outputs.quicksight.AnalysisSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface AnalysisSectionBasedLayoutConfiguration {
        bodySections: outputs.quicksight.AnalysisBodySectionConfiguration[];
        canvasSizeOptions: outputs.quicksight.AnalysisSectionBasedLayoutCanvasSizeOptions;
        footerSections: outputs.quicksight.AnalysisHeaderFooterSectionConfiguration[];
        headerSections: outputs.quicksight.AnalysisHeaderFooterSectionConfiguration[];
    }

    export interface AnalysisSectionBasedLayoutPaperCanvasSizeOptions {
        paperMargin?: outputs.quicksight.AnalysisSpacing;
        paperOrientation?: enums.quicksight.AnalysisPaperOrientation;
        paperSize?: enums.quicksight.AnalysisPaperSize;
    }

    export interface AnalysisSectionLayoutConfiguration {
        freeFormLayout: outputs.quicksight.AnalysisFreeFormSectionLayoutConfiguration;
    }

    export interface AnalysisSectionPageBreakConfiguration {
        after?: outputs.quicksight.AnalysisSectionAfterPageBreak;
    }

    export interface AnalysisSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        padding?: outputs.quicksight.AnalysisSpacing;
    }

    export interface AnalysisSelectedSheetsFilterScopeConfiguration {
        sheetVisualScopingConfigurations?: outputs.quicksight.AnalysisSheetVisualScopingConfiguration[];
    }

    export interface AnalysisSeriesItem {
        dataFieldSeriesItem?: outputs.quicksight.AnalysisDataFieldSeriesItem;
        fieldSeriesItem?: outputs.quicksight.AnalysisFieldSeriesItem;
    }

    export interface AnalysisSetParameterValueConfiguration {
        destinationParameterName: string;
        value: outputs.quicksight.AnalysisDestinationParameterValueConfiguration;
    }

    export interface AnalysisShapeConditionalFormat {
        backgroundColor: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisSheet {
        name?: string;
        sheetId?: string;
    }

    export interface AnalysisSheetControlInfoIconLabelOptions {
        infoIconText?: string;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSheetControlLayout {
        configuration: outputs.quicksight.AnalysisSheetControlLayoutConfiguration;
    }

    export interface AnalysisSheetControlLayoutConfiguration {
        gridLayout?: outputs.quicksight.AnalysisGridLayoutConfiguration;
    }

    export interface AnalysisSheetDefinition {
        contentType?: enums.quicksight.AnalysisSheetContentType;
        description?: string;
        filterControls?: outputs.quicksight.AnalysisFilterControl[];
        layouts?: outputs.quicksight.AnalysisLayout[];
        name?: string;
        parameterControls?: outputs.quicksight.AnalysisParameterControl[];
        sheetControlLayouts?: outputs.quicksight.AnalysisSheetControlLayout[];
        sheetId: string;
        textBoxes?: outputs.quicksight.AnalysisSheetTextBox[];
        title?: string;
        visuals?: outputs.quicksight.AnalysisVisual[];
    }

    export interface AnalysisSheetElementConfigurationOverrides {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSheetElementRenderingRule {
        configurationOverrides: outputs.quicksight.AnalysisSheetElementConfigurationOverrides;
        expression: string;
    }

    export interface AnalysisSheetTextBox {
        content?: string;
        sheetTextBoxId: string;
    }

    export interface AnalysisSheetVisualScopingConfiguration {
        scope: enums.quicksight.AnalysisFilterVisualScope;
        sheetId: string;
        visualIds?: string[];
    }

    export interface AnalysisShortFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface AnalysisSimpleClusterMarker {
        color?: string;
    }

    export interface AnalysisSliderControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisSmallMultiplesAxisProperties {
        placement?: enums.quicksight.AnalysisSmallMultiplesAxisPlacement;
        scale?: enums.quicksight.AnalysisSmallMultiplesAxisScale;
    }

    export interface AnalysisSmallMultiplesOptions {
        maxVisibleColumns?: number;
        maxVisibleRows?: number;
        panelConfiguration?: outputs.quicksight.AnalysisPanelConfiguration;
        xAxis?: outputs.quicksight.AnalysisSmallMultiplesAxisProperties;
        yAxis?: outputs.quicksight.AnalysisSmallMultiplesAxisProperties;
    }

    export interface AnalysisSourceEntity {
        sourceTemplate?: outputs.quicksight.AnalysisSourceTemplate;
    }

    export interface AnalysisSourceTemplate {
        arn: string;
        dataSetReferences: outputs.quicksight.AnalysisDataSetReference[];
    }

    export interface AnalysisSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface AnalysisStringDefaultValues {
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        staticValues?: string[];
    }

    export interface AnalysisStringFormatConfiguration {
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    export interface AnalysisStringParameter {
        name: string;
        values: string[];
    }

    export interface AnalysisStringParameterDeclaration {
        defaultValues?: outputs.quicksight.AnalysisStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        valueWhenUnset?: outputs.quicksight.AnalysisStringValueWhenUnsetConfiguration;
    }

    export interface AnalysisStringValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisSubtotalOptions {
        customLabel?: string;
        fieldLevel?: enums.quicksight.AnalysisPivotTableSubtotalLevel;
        fieldLevelOptions?: outputs.quicksight.AnalysisPivotTableFieldSubtotalOptions[];
        metricHeaderCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        styleTargets?: outputs.quicksight.AnalysisTableStyleTarget[];
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        valueCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
    }

    export interface AnalysisTableAggregatedFieldWells {
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisTableBorderOptions {
        color?: string;
        style?: enums.quicksight.AnalysisTableBorderStyle;
        thickness?: number;
    }

    export interface AnalysisTableCellConditionalFormatting {
        fieldId: string;
        textFormat?: outputs.quicksight.AnalysisTextConditionalFormat;
    }

    export interface AnalysisTableCellImageSizingConfiguration {
        tableCellImageScalingConfiguration?: enums.quicksight.AnalysisTableCellImageScalingConfiguration;
    }

    export interface AnalysisTableCellStyle {
        backgroundColor?: string;
        border?: outputs.quicksight.AnalysisGlobalTableBorderOptions;
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        height?: number;
        horizontalTextAlignment?: enums.quicksight.AnalysisHorizontalTextAlignment;
        textWrap?: enums.quicksight.AnalysisTextWrap;
        verticalTextAlignment?: enums.quicksight.AnalysisVerticalTextAlignment;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.AnalysisTableConditionalFormattingOption[];
    }

    export interface AnalysisTableConditionalFormattingOption {
        cell?: outputs.quicksight.AnalysisTableCellConditionalFormatting;
        row?: outputs.quicksight.AnalysisTableRowConditionalFormatting;
    }

    export interface AnalysisTableConfiguration {
        fieldOptions?: outputs.quicksight.AnalysisTableFieldOptions;
        fieldWells?: outputs.quicksight.AnalysisTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.AnalysisTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.AnalysisTableSortConfiguration;
        tableInlineVisualizations?: outputs.quicksight.AnalysisTableInlineVisualization[];
        tableOptions?: outputs.quicksight.AnalysisTableOptions;
        totalOptions?: outputs.quicksight.AnalysisTotalOptions;
    }

    export interface AnalysisTableFieldCustomIconContent {
        icon?: enums.quicksight.AnalysisTableFieldIconSetType;
    }

    export interface AnalysisTableFieldCustomTextContent {
        fontConfiguration: outputs.quicksight.AnalysisFontConfiguration;
        value?: string;
    }

    export interface AnalysisTableFieldImageConfiguration {
        sizingOptions?: outputs.quicksight.AnalysisTableCellImageSizingConfiguration;
    }

    export interface AnalysisTableFieldLinkConfiguration {
        content: outputs.quicksight.AnalysisTableFieldLinkContentConfiguration;
        target: enums.quicksight.AnalysisUrlTargetConfiguration;
    }

    export interface AnalysisTableFieldLinkContentConfiguration {
        customIconContent?: outputs.quicksight.AnalysisTableFieldCustomIconContent;
        customTextContent?: outputs.quicksight.AnalysisTableFieldCustomTextContent;
    }

    export interface AnalysisTableFieldOption {
        customLabel?: string;
        fieldId: string;
        urlStyling?: outputs.quicksight.AnalysisTableFieldUrlConfiguration;
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisTableFieldOptions {
        order?: string[];
        pinnedFieldOptions?: outputs.quicksight.AnalysisTablePinnedFieldOptions;
        selectedFieldOptions?: outputs.quicksight.AnalysisTableFieldOption[];
    }

    export interface AnalysisTableFieldUrlConfiguration {
        imageConfiguration?: outputs.quicksight.AnalysisTableFieldImageConfiguration;
        linkConfiguration?: outputs.quicksight.AnalysisTableFieldLinkConfiguration;
    }

    export interface AnalysisTableFieldWells {
        tableAggregatedFieldWells?: outputs.quicksight.AnalysisTableAggregatedFieldWells;
        tableUnaggregatedFieldWells?: outputs.quicksight.AnalysisTableUnaggregatedFieldWells;
    }

    export interface AnalysisTableInlineVisualization {
        dataBars?: outputs.quicksight.AnalysisDataBarsOptions;
    }

    export interface AnalysisTableOptions {
        cellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        headerStyle?: outputs.quicksight.AnalysisTableCellStyle;
        orientation?: enums.quicksight.AnalysisTableOrientation;
        rowAlternateColorOptions?: outputs.quicksight.AnalysisRowAlternateColorOptions;
    }

    export interface AnalysisTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.AnalysisVisibility;
        verticalOverflowVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTablePinnedFieldOptions {
        pinnedLeftFields?: string[];
    }

    export interface AnalysisTableRowConditionalFormatting {
        backgroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisTableSideBorderOptions {
        bottom?: outputs.quicksight.AnalysisTableBorderOptions;
        innerHorizontal?: outputs.quicksight.AnalysisTableBorderOptions;
        innerVertical?: outputs.quicksight.AnalysisTableBorderOptions;
        left?: outputs.quicksight.AnalysisTableBorderOptions;
        right?: outputs.quicksight.AnalysisTableBorderOptions;
        top?: outputs.quicksight.AnalysisTableBorderOptions;
    }

    export interface AnalysisTableSortConfiguration {
        paginationConfiguration?: outputs.quicksight.AnalysisPaginationConfiguration;
        rowSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisTableStyleTarget {
        cellType: enums.quicksight.AnalysisStyledCellType;
    }

    export interface AnalysisTableUnaggregatedFieldWells {
        values?: outputs.quicksight.AnalysisUnaggregatedField[];
    }

    export interface AnalysisTableVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisTableConfiguration;
        conditionalFormatting?: outputs.quicksight.AnalysisTableConditionalFormatting;
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisTag {
        key: string;
        value: string;
    }

    export interface AnalysisTextAreaControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.AnalysisTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisTextConditionalFormat {
        backgroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisTextControlPlaceholderOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTextFieldControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.AnalysisTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisThousandSeparatorOptions {
        symbol?: enums.quicksight.AnalysisNumericSeparatorSymbol;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTimeBasedForecastProperties {
        lowerBoundary?: number;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: number;
        upperBoundary?: number;
    }

    export interface AnalysisTimeEqualityFilter {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        filterId: string;
        parameterName?: string;
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        value?: string;
    }

    export interface AnalysisTimeRangeDrillDownFilter {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        rangeMaximum: string;
        rangeMinimum: string;
        timeGranularity: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTimeRangeFilter {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.AnalysisExcludePeriodConfiguration;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        rangeMaximumValue?: outputs.quicksight.AnalysisTimeRangeFilterValue;
        rangeMinimumValue?: outputs.quicksight.AnalysisTimeRangeFilterValue;
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTimeRangeFilterValue {
        parameter?: string;
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        staticValue?: string;
    }

    export interface AnalysisTooltipItem {
        columnTooltipItem?: outputs.quicksight.AnalysisColumnTooltipItem;
        fieldTooltipItem?: outputs.quicksight.AnalysisFieldTooltipItem;
    }

    export interface AnalysisTooltipOptions {
        fieldBasedTooltip?: outputs.quicksight.AnalysisFieldBasedTooltip;
        selectedTooltipType?: enums.quicksight.AnalysisSelectedTooltipType;
        tooltipVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTopBottomFilter {
        aggregationSortConfigurations: outputs.quicksight.AnalysisAggregationSortConfiguration[];
        column: outputs.quicksight.AnalysisColumnIdentifier;
        filterId: string;
        limit?: number;
        parameterName?: string;
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTopBottomMoversComputation {
        category?: outputs.quicksight.AnalysisDimensionField;
        computationId: string;
        moverSize?: number;
        name?: string;
        sortOrder?: enums.quicksight.AnalysisTopBottomSortOrder;
        time?: outputs.quicksight.AnalysisDimensionField;
        type: enums.quicksight.AnalysisTopBottomComputationType;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTopBottomRankedComputation {
        category?: outputs.quicksight.AnalysisDimensionField;
        computationId: string;
        name?: string;
        resultSize?: number;
        type: enums.quicksight.AnalysisTopBottomComputationType;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTotalAggregationComputation {
        computationId: string;
        name?: string;
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTotalAggregationFunction {
        simpleTotalAggregationFunction?: enums.quicksight.AnalysisSimpleTotalAggregationFunction;
    }

    export interface AnalysisTotalAggregationOption {
        fieldId: string;
        totalAggregationFunction: outputs.quicksight.AnalysisTotalAggregationFunction;
    }

    export interface AnalysisTotalOptions {
        customLabel?: string;
        placement?: enums.quicksight.AnalysisTableTotalsPlacement;
        scrollStatus?: enums.quicksight.AnalysisTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.AnalysisTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTreeMapAggregatedFieldWells {
        colors?: outputs.quicksight.AnalysisMeasureField[];
        groups?: outputs.quicksight.AnalysisDimensionField[];
        sizes?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisTreeMapConfiguration {
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        colorScale?: outputs.quicksight.AnalysisColorScale;
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisTreeMapFieldWells;
        groupLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        sizeLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.AnalysisTreeMapSortConfiguration;
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
    }

    export interface AnalysisTreeMapFieldWells {
        treeMapAggregatedFieldWells?: outputs.quicksight.AnalysisTreeMapAggregatedFieldWells;
    }

    export interface AnalysisTreeMapSortConfiguration {
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        treeMapSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisTreeMapVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisTreeMapConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisTrendArrowOptions {
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisUnaggregatedField {
        column: outputs.quicksight.AnalysisColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.AnalysisFormatConfiguration;
    }

    export interface AnalysisUniqueValuesComputation {
        category?: outputs.quicksight.AnalysisDimensionField;
        computationId: string;
        name?: string;
    }

    export interface AnalysisValidationStrategy {
        mode: enums.quicksight.AnalysisValidationStrategyMode;
    }

    export interface AnalysisVisibleRangeOptions {
        percentRange?: outputs.quicksight.AnalysisPercentVisibleRange;
    }

    export interface AnalysisVisual {
        barChartVisual?: outputs.quicksight.AnalysisBarChartVisual;
        boxPlotVisual?: outputs.quicksight.AnalysisBoxPlotVisual;
        comboChartVisual?: outputs.quicksight.AnalysisComboChartVisual;
        customContentVisual?: outputs.quicksight.AnalysisCustomContentVisual;
        emptyVisual?: outputs.quicksight.AnalysisEmptyVisual;
        filledMapVisual?: outputs.quicksight.AnalysisFilledMapVisual;
        funnelChartVisual?: outputs.quicksight.AnalysisFunnelChartVisual;
        gaugeChartVisual?: outputs.quicksight.AnalysisGaugeChartVisual;
        geospatialMapVisual?: outputs.quicksight.AnalysisGeospatialMapVisual;
        heatMapVisual?: outputs.quicksight.AnalysisHeatMapVisual;
        histogramVisual?: outputs.quicksight.AnalysisHistogramVisual;
        insightVisual?: outputs.quicksight.AnalysisInsightVisual;
        kpiVisual?: outputs.quicksight.AnalysisKpiVisual;
        lineChartVisual?: outputs.quicksight.AnalysisLineChartVisual;
        pieChartVisual?: outputs.quicksight.AnalysisPieChartVisual;
        pivotTableVisual?: outputs.quicksight.AnalysisPivotTableVisual;
        radarChartVisual?: outputs.quicksight.AnalysisRadarChartVisual;
        sankeyDiagramVisual?: outputs.quicksight.AnalysisSankeyDiagramVisual;
        scatterPlotVisual?: outputs.quicksight.AnalysisScatterPlotVisual;
        tableVisual?: outputs.quicksight.AnalysisTableVisual;
        treeMapVisual?: outputs.quicksight.AnalysisTreeMapVisual;
        waterfallVisual?: outputs.quicksight.AnalysisWaterfallVisual;
        wordCloudVisual?: outputs.quicksight.AnalysisWordCloudVisual;
    }

    export interface AnalysisVisualCustomAction {
        actionOperations: outputs.quicksight.AnalysisVisualCustomActionOperation[];
        customActionId: string;
        name: string;
        status?: enums.quicksight.AnalysisWidgetStatus;
        trigger: enums.quicksight.AnalysisVisualCustomActionTrigger;
    }

    export interface AnalysisVisualCustomActionOperation {
        filterOperation?: outputs.quicksight.AnalysisCustomActionFilterOperation;
        navigationOperation?: outputs.quicksight.AnalysisCustomActionNavigationOperation;
        setParametersOperation?: outputs.quicksight.AnalysisCustomActionSetParametersOperation;
        urlOperation?: outputs.quicksight.AnalysisCustomActionUrlOperation;
    }

    export interface AnalysisVisualPalette {
        chartColor?: string;
        colorMap?: outputs.quicksight.AnalysisDataPathColor[];
    }

    export interface AnalysisVisualSubtitleLabelOptions {
        formatText?: outputs.quicksight.AnalysisLongFormatText;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisVisualTitleLabelOptions {
        formatText?: outputs.quicksight.AnalysisShortFormatText;
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisWaterfallChartAggregatedFieldWells {
        breakdowns?: outputs.quicksight.AnalysisDimensionField[];
        categories?: outputs.quicksight.AnalysisDimensionField[];
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisWaterfallChartConfiguration {
        categoryAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        categoryAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisWaterfallChartFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.AnalysisWaterfallChartSortConfiguration;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        waterfallChartOptions?: outputs.quicksight.AnalysisWaterfallChartOptions;
    }

    export interface AnalysisWaterfallChartFieldWells {
        waterfallChartAggregatedFieldWells?: outputs.quicksight.AnalysisWaterfallChartAggregatedFieldWells;
    }

    export interface AnalysisWaterfallChartOptions {
        totalBarLabel?: string;
    }

    export interface AnalysisWaterfallChartSortConfiguration {
        breakdownItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisWaterfallVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisWaterfallChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface AnalysisWhatIfPointScenario {
        date: string;
        value: number;
    }

    export interface AnalysisWhatIfRangeScenario {
        endDate: string;
        startDate: string;
        value: number;
    }

    export interface AnalysisWordCloudAggregatedFieldWells {
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        size?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisWordCloudChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.AnalysisWordCloudFieldWells;
        sortConfiguration?: outputs.quicksight.AnalysisWordCloudSortConfiguration;
        wordCloudOptions?: outputs.quicksight.AnalysisWordCloudOptions;
    }

    export interface AnalysisWordCloudFieldWells {
        wordCloudAggregatedFieldWells?: outputs.quicksight.AnalysisWordCloudAggregatedFieldWells;
    }

    export interface AnalysisWordCloudOptions {
        cloudLayout?: enums.quicksight.AnalysisWordCloudCloudLayout;
        maximumStringLength?: number;
        wordCasing?: enums.quicksight.AnalysisWordCloudWordCasing;
        wordOrientation?: enums.quicksight.AnalysisWordCloudWordOrientation;
        wordPadding?: enums.quicksight.AnalysisWordCloudWordPadding;
        wordScaling?: enums.quicksight.AnalysisWordCloudWordScaling;
    }

    export interface AnalysisWordCloudSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisWordCloudVisual {
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.AnalysisWordCloudChartConfiguration;
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardAdHocFilteringOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardAggregationFunction {
        attributeAggregationFunction?: outputs.quicksight.DashboardAttributeAggregationFunction;
        categoricalAggregationFunction?: enums.quicksight.DashboardCategoricalAggregationFunction;
        dateAggregationFunction?: enums.quicksight.DashboardDateAggregationFunction;
        numericalAggregationFunction?: outputs.quicksight.DashboardNumericalAggregationFunction;
    }

    export interface DashboardAggregationSortConfiguration {
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        sortDirection: enums.quicksight.DashboardSortDirection;
    }

    export interface DashboardAllSheetsFilterScopeConfiguration {
    }

    export interface DashboardAnalysisDefaults {
        defaultNewSheetConfiguration: outputs.quicksight.DashboardDefaultNewSheetConfiguration;
    }

    export interface DashboardAnchorDateConfiguration {
        anchorOption?: enums.quicksight.DashboardAnchorOption;
        parameterName?: string;
    }

    export interface DashboardArcAxisConfiguration {
        range?: outputs.quicksight.DashboardArcAxisDisplayRange;
        reserveRange?: number;
    }

    export interface DashboardArcAxisDisplayRange {
        max?: number;
        min?: number;
    }

    export interface DashboardArcConfiguration {
        arcAngle?: number;
        arcThickness?: enums.quicksight.DashboardArcThicknessOptions;
    }

    export interface DashboardArcOptions {
        arcThickness?: enums.quicksight.DashboardArcThickness;
    }

    export interface DashboardAssetOptions {
        timezone?: string;
        weekStart?: enums.quicksight.DashboardDayOfTheWeek;
    }

    export interface DashboardAttributeAggregationFunction {
        simpleAttributeAggregation?: enums.quicksight.DashboardSimpleAttributeAggregationFunction;
        valueForMultipleValues?: string;
    }

    export interface DashboardAxisDataOptions {
        dateAxisOptions?: outputs.quicksight.DashboardDateAxisOptions;
        numericAxisOptions?: outputs.quicksight.DashboardNumericAxisOptions;
    }

    export interface DashboardAxisDisplayDataDrivenRange {
    }

    export interface DashboardAxisDisplayMinMaxRange {
        maximum?: number;
        minimum?: number;
    }

    export interface DashboardAxisDisplayOptions {
        axisLineVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        dataOptions?: outputs.quicksight.DashboardAxisDataOptions;
        gridLineVisibility?: enums.quicksight.DashboardVisibility;
        scrollbarOptions?: outputs.quicksight.DashboardScrollBarOptions;
        tickLabelOptions?: outputs.quicksight.DashboardAxisTickLabelOptions;
    }

    export interface DashboardAxisDisplayRange {
        dataDriven?: outputs.quicksight.DashboardAxisDisplayDataDrivenRange;
        minMax?: outputs.quicksight.DashboardAxisDisplayMinMaxRange;
    }

    export interface DashboardAxisLabelOptions {
        applyTo?: outputs.quicksight.DashboardAxisLabelReferenceOptions;
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
    }

    export interface DashboardAxisLabelReferenceOptions {
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
    }

    export interface DashboardAxisLinearScale {
        stepCount?: number;
        stepSize?: number;
    }

    export interface DashboardAxisLogarithmicScale {
        base?: number;
    }

    export interface DashboardAxisScale {
        linear?: outputs.quicksight.DashboardAxisLinearScale;
        logarithmic?: outputs.quicksight.DashboardAxisLogarithmicScale;
    }

    export interface DashboardAxisTickLabelOptions {
        labelOptions?: outputs.quicksight.DashboardLabelOptions;
        rotationAngle?: number;
    }

    export interface DashboardBarChartAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        colors?: outputs.quicksight.DashboardDimensionField[];
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardBarChartConfiguration {
        barsArrangement?: enums.quicksight.DashboardBarsArrangement;
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardBarChartFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        orientation?: enums.quicksight.DashboardBarChartOrientation;
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.DashboardBarChartSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        valueAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardBarChartFieldWells {
        barChartAggregatedFieldWells?: outputs.quicksight.DashboardBarChartAggregatedFieldWells;
    }

    export interface DashboardBarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardBarChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardBarChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardBinCountOptions {
        value?: number;
    }

    export interface DashboardBinWidthOptions {
        binCountLimit?: number;
        value?: number;
    }

    export interface DashboardBodySectionConfiguration {
        content: outputs.quicksight.DashboardBodySectionContent;
        pageBreakConfiguration?: outputs.quicksight.DashboardSectionPageBreakConfiguration;
        sectionId: string;
        style?: outputs.quicksight.DashboardSectionStyle;
    }

    export interface DashboardBodySectionContent {
        layout?: outputs.quicksight.DashboardSectionLayoutConfiguration;
    }

    export interface DashboardBoxPlotAggregatedFieldWells {
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardBoxPlotChartConfiguration {
        boxPlotOptions?: outputs.quicksight.DashboardBoxPlotOptions;
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.DashboardBoxPlotFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        sortConfiguration?: outputs.quicksight.DashboardBoxPlotSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardBoxPlotFieldWells {
        boxPlotAggregatedFieldWells?: outputs.quicksight.DashboardBoxPlotAggregatedFieldWells;
    }

    export interface DashboardBoxPlotOptions {
        allDataPointsVisibility?: enums.quicksight.DashboardVisibility;
        outlierVisibility?: enums.quicksight.DashboardVisibility;
        styleOptions?: outputs.quicksight.DashboardBoxPlotStyleOptions;
    }

    export interface DashboardBoxPlotSortConfiguration {
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        paginationConfiguration?: outputs.quicksight.DashboardPaginationConfiguration;
    }

    export interface DashboardBoxPlotStyleOptions {
        fillStyle?: enums.quicksight.DashboardBoxPlotFillStyle;
    }

    export interface DashboardBoxPlotVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardBoxPlotChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardCalculatedField {
        dataSetIdentifier: string;
        expression: string;
        name: string;
    }

    export interface DashboardCalculatedMeasureField {
        expression: string;
        fieldId: string;
    }

    export interface DashboardCascadingControlConfiguration {
        sourceControls?: outputs.quicksight.DashboardCascadingControlSource[];
    }

    export interface DashboardCascadingControlSource {
        columnToMatch?: outputs.quicksight.DashboardColumnIdentifier;
        sourceSheetControlId?: string;
    }

    export interface DashboardCategoricalDimensionField {
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
        hierarchyId?: string;
    }

    export interface DashboardCategoricalMeasureField {
        aggregationFunction?: enums.quicksight.DashboardCategoricalAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
    }

    export interface DashboardCategoryDrillDownFilter {
        categoryValues: string[];
        column: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardCategoryFilter {
        column: outputs.quicksight.DashboardColumnIdentifier;
        configuration: outputs.quicksight.DashboardCategoryFilterConfiguration;
        filterId: string;
    }

    export interface DashboardCategoryFilterConfiguration {
        customFilterConfiguration?: outputs.quicksight.DashboardCustomFilterConfiguration;
        customFilterListConfiguration?: outputs.quicksight.DashboardCustomFilterListConfiguration;
        filterListConfiguration?: outputs.quicksight.DashboardFilterListConfiguration;
    }

    export interface DashboardChartAxisLabelOptions {
        axisLabelOptions?: outputs.quicksight.DashboardAxisLabelOptions[];
        sortIconVisibility?: enums.quicksight.DashboardVisibility;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardClusterMarker {
        simpleClusterMarker?: outputs.quicksight.DashboardSimpleClusterMarker;
    }

    export interface DashboardClusterMarkerConfiguration {
        clusterMarker?: outputs.quicksight.DashboardClusterMarker;
    }

    export interface DashboardColorScale {
        colorFillType: enums.quicksight.DashboardColorFillType;
        colors: outputs.quicksight.DashboardDataColor[];
        nullValueColor?: outputs.quicksight.DashboardDataColor;
    }

    export interface DashboardColorsConfiguration {
        customColors?: outputs.quicksight.DashboardCustomColor[];
    }

    export interface DashboardColumnConfiguration {
        colorsConfiguration?: outputs.quicksight.DashboardColorsConfiguration;
        column: outputs.quicksight.DashboardColumnIdentifier;
        formatConfiguration?: outputs.quicksight.DashboardFormatConfiguration;
        role?: enums.quicksight.DashboardColumnRole;
    }

    export interface DashboardColumnHierarchy {
        dateTimeHierarchy?: outputs.quicksight.DashboardDateTimeHierarchy;
        explicitHierarchy?: outputs.quicksight.DashboardExplicitHierarchy;
        predefinedHierarchy?: outputs.quicksight.DashboardPredefinedHierarchy;
    }

    export interface DashboardColumnIdentifier {
        columnName: string;
        dataSetIdentifier: string;
    }

    export interface DashboardColumnSort {
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        direction: enums.quicksight.DashboardSortDirection;
        sortBy: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardColumnTooltipItem {
        aggregation?: outputs.quicksight.DashboardAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        label?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardComboChartAggregatedFieldWells {
        barValues?: outputs.quicksight.DashboardMeasureField[];
        category?: outputs.quicksight.DashboardDimensionField[];
        colors?: outputs.quicksight.DashboardDimensionField[];
        lineValues?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardComboChartConfiguration {
        barDataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        barsArrangement?: enums.quicksight.DashboardBarsArrangement;
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.DashboardComboChartFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        lineDataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.DashboardComboChartSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardComboChartFieldWells {
        comboChartAggregatedFieldWells?: outputs.quicksight.DashboardComboChartAggregatedFieldWells;
    }

    export interface DashboardComboChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardComboChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardComboChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardComparisonConfiguration {
        comparisonFormat?: outputs.quicksight.DashboardComparisonFormatConfiguration;
        comparisonMethod?: enums.quicksight.DashboardComparisonMethod;
    }

    export interface DashboardComparisonFormatConfiguration {
        numberDisplayFormatConfiguration?: outputs.quicksight.DashboardNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.DashboardPercentageDisplayFormatConfiguration;
    }

    export interface DashboardComputation {
        forecast?: outputs.quicksight.DashboardForecastComputation;
        growthRate?: outputs.quicksight.DashboardGrowthRateComputation;
        maximumMinimum?: outputs.quicksight.DashboardMaximumMinimumComputation;
        metricComparison?: outputs.quicksight.DashboardMetricComparisonComputation;
        periodOverPeriod?: outputs.quicksight.DashboardPeriodOverPeriodComputation;
        periodToDate?: outputs.quicksight.DashboardPeriodToDateComputation;
        topBottomMovers?: outputs.quicksight.DashboardTopBottomMoversComputation;
        topBottomRanked?: outputs.quicksight.DashboardTopBottomRankedComputation;
        totalAggregation?: outputs.quicksight.DashboardTotalAggregationComputation;
        uniqueValues?: outputs.quicksight.DashboardUniqueValuesComputation;
    }

    export interface DashboardConditionalFormattingColor {
        gradient?: outputs.quicksight.DashboardConditionalFormattingGradientColor;
        solid?: outputs.quicksight.DashboardConditionalFormattingSolidColor;
    }

    export interface DashboardConditionalFormattingCustomIconCondition {
        color?: string;
        displayConfiguration?: outputs.quicksight.DashboardConditionalFormattingIconDisplayConfiguration;
        expression: string;
        iconOptions: outputs.quicksight.DashboardConditionalFormattingCustomIconOptions;
    }

    export interface DashboardConditionalFormattingCustomIconOptions {
        icon?: enums.quicksight.DashboardIcon;
        unicodeIcon?: string;
    }

    export interface DashboardConditionalFormattingGradientColor {
        color: outputs.quicksight.DashboardGradientColor;
        expression: string;
    }

    export interface DashboardConditionalFormattingIcon {
        customCondition?: outputs.quicksight.DashboardConditionalFormattingCustomIconCondition;
        iconSet?: outputs.quicksight.DashboardConditionalFormattingIconSet;
    }

    export interface DashboardConditionalFormattingIconDisplayConfiguration {
        iconDisplayOption?: enums.quicksight.DashboardConditionalFormattingIconDisplayOption;
    }

    export interface DashboardConditionalFormattingIconSet {
        expression: string;
        iconSetType?: enums.quicksight.DashboardConditionalFormattingIconSetType;
    }

    export interface DashboardConditionalFormattingSolidColor {
        color?: string;
        expression: string;
    }

    export interface DashboardContributionAnalysisDefault {
        contributorDimensions: outputs.quicksight.DashboardColumnIdentifier[];
        measureFieldId: string;
    }

    export interface DashboardCurrencyDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        numberScale?: enums.quicksight.DashboardNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        suffix?: string;
        symbol?: string;
    }

    export interface DashboardCustomActionFilterOperation {
        selectedFieldsConfiguration: outputs.quicksight.DashboardFilterOperationSelectedFieldsConfiguration;
        targetVisualsConfiguration: outputs.quicksight.DashboardFilterOperationTargetVisualsConfiguration;
    }

    export interface DashboardCustomActionNavigationOperation {
        localNavigationConfiguration?: outputs.quicksight.DashboardLocalNavigationConfiguration;
    }

    export interface DashboardCustomActionSetParametersOperation {
        parameterValueConfigurations: outputs.quicksight.DashboardSetParameterValueConfiguration[];
    }

    export interface DashboardCustomActionUrlOperation {
        urlTarget: enums.quicksight.DashboardUrlTargetConfiguration;
        urlTemplate: string;
    }

    export interface DashboardCustomColor {
        color: string;
        fieldValue?: string;
        specialValue?: enums.quicksight.DashboardSpecialValue;
    }

    export interface DashboardCustomContentConfiguration {
        contentType?: enums.quicksight.DashboardCustomContentType;
        contentUrl?: string;
        imageScaling?: enums.quicksight.DashboardCustomContentImageScalingConfiguration;
    }

    export interface DashboardCustomContentVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardCustomContentConfiguration;
        dataSetIdentifier: string;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardCustomFilterConfiguration {
        categoryValue?: string;
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardCustomFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardCustomNarrativeOptions {
        narrative: string;
    }

    export interface DashboardCustomParameterValues {
        dateTimeValues?: string[];
        decimalValues?: number[];
        integerValues?: number[];
        stringValues?: string[];
    }

    export interface DashboardCustomValuesConfiguration {
        customValues: outputs.quicksight.DashboardCustomParameterValues;
        includeNullValue?: boolean;
    }

    export interface DashboardDataBarsOptions {
        fieldId: string;
        negativeColor?: string;
        positiveColor?: string;
    }

    export interface DashboardDataColor {
        color?: string;
        dataValue?: number;
    }

    export interface DashboardDataFieldSeriesItem {
        axisBinding: enums.quicksight.DashboardAxisBinding;
        fieldId: string;
        fieldValue?: string;
        settings?: outputs.quicksight.DashboardLineChartSeriesSettings;
    }

    export interface DashboardDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.DashboardVisibility;
        dataLabelTypes?: outputs.quicksight.DashboardDataLabelType[];
        labelColor?: string;
        labelContent?: enums.quicksight.DashboardDataLabelContent;
        labelFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        measureLabelVisibility?: enums.quicksight.DashboardVisibility;
        overlap?: enums.quicksight.DashboardDataLabelOverlap;
        position?: enums.quicksight.DashboardDataLabelPosition;
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDataLabelType {
        dataPathLabelType?: outputs.quicksight.DashboardDataPathLabelType;
        fieldLabelType?: outputs.quicksight.DashboardFieldLabelType;
        maximumLabelType?: outputs.quicksight.DashboardMaximumLabelType;
        minimumLabelType?: outputs.quicksight.DashboardMinimumLabelType;
        rangeEndsLabelType?: outputs.quicksight.DashboardRangeEndsLabelType;
    }

    export interface DashboardDataPathColor {
        color: string;
        element: outputs.quicksight.DashboardDataPathValue;
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardDataPathLabelType {
        fieldId?: string;
        fieldValue?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDataPathSort {
        direction: enums.quicksight.DashboardSortDirection;
        sortPaths: outputs.quicksight.DashboardDataPathValue[];
    }

    export interface DashboardDataPathType {
        pivotTableDataPathType?: enums.quicksight.DashboardPivotTableDataPathType;
    }

    export interface DashboardDataPathValue {
        dataPathType?: outputs.quicksight.DashboardDataPathType;
        fieldId?: string;
        fieldValue?: string;
    }

    export interface DashboardDataPointDrillUpDownOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardDataPointMenuLabelOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardDataPointTooltipOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardDataSetIdentifierDeclaration {
        dataSetArn: string;
        identifier: string;
    }

    export interface DashboardDataSetReference {
        dataSetArn: string;
        dataSetPlaceholder: string;
    }

    export interface DashboardDateAxisOptions {
        missingDateVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDateDimensionField {
        column: outputs.quicksight.DashboardColumnIdentifier;
        dateGranularity?: enums.quicksight.DashboardTimeGranularity;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
        hierarchyId?: string;
    }

    export interface DashboardDateMeasureField {
        aggregationFunction?: enums.quicksight.DashboardDateAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
    }

    export interface DashboardDateTimeDefaultValues {
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        staticValues?: string[];
    }

    export interface DashboardDateTimeFormatConfiguration {
        dateTimeFormat?: string;
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    export interface DashboardDateTimeHierarchy {
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        hierarchyId: string;
    }

    export interface DashboardDateTimeParameter {
        name: string;
        values: string[];
    }

    export interface DashboardDateTimeParameterDeclaration {
        defaultValues?: outputs.quicksight.DashboardDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        name: string;
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
        valueWhenUnset?: outputs.quicksight.DashboardDateTimeValueWhenUnsetConfiguration;
    }

    export interface DashboardDateTimePickerControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardDateTimeValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardDecimalDefaultValues {
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface DashboardDecimalParameter {
        name: string;
        values: number[];
    }

    export interface DashboardDecimalParameterDeclaration {
        defaultValues?: outputs.quicksight.DashboardDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        valueWhenUnset?: outputs.quicksight.DashboardDecimalValueWhenUnsetConfiguration;
    }

    export interface DashboardDecimalPlacesConfiguration {
        decimalPlaces: number;
    }

    export interface DashboardDecimalValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardDefaultFreeFormLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.DashboardFreeFormLayoutCanvasSizeOptions;
    }

    export interface DashboardDefaultGridLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.DashboardGridLayoutCanvasSizeOptions;
    }

    export interface DashboardDefaultInteractiveLayoutConfiguration {
        freeForm?: outputs.quicksight.DashboardDefaultFreeFormLayoutConfiguration;
        grid?: outputs.quicksight.DashboardDefaultGridLayoutConfiguration;
    }

    export interface DashboardDefaultNewSheetConfiguration {
        interactiveLayoutConfiguration?: outputs.quicksight.DashboardDefaultInteractiveLayoutConfiguration;
        paginatedLayoutConfiguration?: outputs.quicksight.DashboardDefaultPaginatedLayoutConfiguration;
        sheetContentType?: enums.quicksight.DashboardSheetContentType;
    }

    export interface DashboardDefaultPaginatedLayoutConfiguration {
        sectionBased?: outputs.quicksight.DashboardDefaultSectionBasedLayoutConfiguration;
    }

    export interface DashboardDefaultSectionBasedLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.DashboardSectionBasedLayoutCanvasSizeOptions;
    }

    export interface DashboardDestinationParameterValueConfiguration {
        customValuesConfiguration?: outputs.quicksight.DashboardCustomValuesConfiguration;
        selectAllValueOptions?: enums.quicksight.DashboardSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.DashboardColumnIdentifier;
        sourceField?: string;
        sourceParameterName?: string;
    }

    export interface DashboardDimensionField {
        categoricalDimensionField?: outputs.quicksight.DashboardCategoricalDimensionField;
        dateDimensionField?: outputs.quicksight.DashboardDateDimensionField;
        numericalDimensionField?: outputs.quicksight.DashboardNumericalDimensionField;
    }

    export interface DashboardDonutCenterOptions {
        labelVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDonutOptions {
        arcOptions?: outputs.quicksight.DashboardArcOptions;
        donutCenterOptions?: outputs.quicksight.DashboardDonutCenterOptions;
    }

    export interface DashboardDrillDownFilter {
        categoryFilter?: outputs.quicksight.DashboardCategoryDrillDownFilter;
        numericEqualityFilter?: outputs.quicksight.DashboardNumericEqualityDrillDownFilter;
        timeRangeFilter?: outputs.quicksight.DashboardTimeRangeDrillDownFilter;
    }

    export interface DashboardDropDownControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        selectAllOptions?: outputs.quicksight.DashboardListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardDynamicDefaultValue {
        defaultValueColumn: outputs.quicksight.DashboardColumnIdentifier;
        groupNameColumn?: outputs.quicksight.DashboardColumnIdentifier;
        userNameColumn?: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardEmptyVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        dataSetIdentifier: string;
        visualId: string;
    }

    export interface DashboardEntity {
        path?: string;
    }

    export interface DashboardError {
        message?: string;
        type?: enums.quicksight.DashboardErrorType;
        violatedEntities?: outputs.quicksight.DashboardEntity[];
    }

    export interface DashboardExcludePeriodConfiguration {
        amount: number;
        granularity: enums.quicksight.DashboardTimeGranularity;
        status?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardExplicitHierarchy {
        columns: outputs.quicksight.DashboardColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        hierarchyId: string;
    }

    export interface DashboardExportHiddenFieldsOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardExportToCsvOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardExportWithHiddenFieldsOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardFieldBasedTooltip {
        aggregationVisibility?: enums.quicksight.DashboardVisibility;
        tooltipFields?: outputs.quicksight.DashboardTooltipItem[];
        tooltipTitleType?: enums.quicksight.DashboardTooltipTitleType;
    }

    export interface DashboardFieldLabelType {
        fieldId?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFieldSeriesItem {
        axisBinding: enums.quicksight.DashboardAxisBinding;
        fieldId: string;
        settings?: outputs.quicksight.DashboardLineChartSeriesSettings;
    }

    export interface DashboardFieldSort {
        direction: enums.quicksight.DashboardSortDirection;
        fieldId: string;
    }

    export interface DashboardFieldSortOptions {
        columnSort?: outputs.quicksight.DashboardColumnSort;
        fieldSort?: outputs.quicksight.DashboardFieldSort;
    }

    export interface DashboardFieldTooltipItem {
        fieldId: string;
        label?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFilledMapAggregatedFieldWells {
        geospatial?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardFilledMapConditionalFormatting {
        conditionalFormattingOptions: outputs.quicksight.DashboardFilledMapConditionalFormattingOption[];
    }

    export interface DashboardFilledMapConditionalFormattingOption {
        shape: outputs.quicksight.DashboardFilledMapShapeConditionalFormatting;
    }

    export interface DashboardFilledMapConfiguration {
        fieldWells?: outputs.quicksight.DashboardFilledMapFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        mapStyleOptions?: outputs.quicksight.DashboardGeospatialMapStyleOptions;
        sortConfiguration?: outputs.quicksight.DashboardFilledMapSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        windowOptions?: outputs.quicksight.DashboardGeospatialWindowOptions;
    }

    export interface DashboardFilledMapFieldWells {
        filledMapAggregatedFieldWells?: outputs.quicksight.DashboardFilledMapAggregatedFieldWells;
    }

    export interface DashboardFilledMapShapeConditionalFormatting {
        fieldId: string;
        format?: outputs.quicksight.DashboardShapeConditionalFormat;
    }

    export interface DashboardFilledMapSortConfiguration {
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardFilledMapVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardFilledMapConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.DashboardFilledMapConditionalFormatting;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardFilter {
        categoryFilter?: outputs.quicksight.DashboardCategoryFilter;
        numericEqualityFilter?: outputs.quicksight.DashboardNumericEqualityFilter;
        numericRangeFilter?: outputs.quicksight.DashboardNumericRangeFilter;
        relativeDatesFilter?: outputs.quicksight.DashboardRelativeDatesFilter;
        timeEqualityFilter?: outputs.quicksight.DashboardTimeEqualityFilter;
        timeRangeFilter?: outputs.quicksight.DashboardTimeRangeFilter;
        topBottomFilter?: outputs.quicksight.DashboardTopBottomFilter;
    }

    export interface DashboardFilterControl {
        dateTimePicker?: outputs.quicksight.DashboardFilterDateTimePickerControl;
        dropdown?: outputs.quicksight.DashboardFilterDropDownControl;
        list?: outputs.quicksight.DashboardFilterListControl;
        relativeDateTime?: outputs.quicksight.DashboardFilterRelativeDateTimeControl;
        slider?: outputs.quicksight.DashboardFilterSliderControl;
        textArea?: outputs.quicksight.DashboardFilterTextAreaControl;
        textField?: outputs.quicksight.DashboardFilterTextFieldControl;
    }

    export interface DashboardFilterDateTimePickerControl {
        displayOptions?: outputs.quicksight.DashboardDateTimePickerControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.DashboardSheetControlDateTimePickerType;
    }

    export interface DashboardFilterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.DashboardDropDownControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardFilterGroup {
        crossDataset: enums.quicksight.DashboardCrossDatasetTypes;
        filterGroupId: string;
        filters: outputs.quicksight.DashboardFilter[];
        scopeConfiguration: outputs.quicksight.DashboardFilterScopeConfiguration;
        status?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        nullOption?: enums.quicksight.DashboardFilterNullOption;
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardFilterListControl {
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.DashboardListControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardFilterOperationSelectedFieldsConfiguration {
        selectedColumns?: outputs.quicksight.DashboardColumnIdentifier[];
        selectedFieldOptions?: enums.quicksight.DashboardSelectedFieldOptions;
        selectedFields?: string[];
    }

    export interface DashboardFilterOperationTargetVisualsConfiguration {
        sameSheetTargetVisualConfiguration?: outputs.quicksight.DashboardSameSheetTargetVisualConfiguration;
    }

    export interface DashboardFilterRelativeDateTimeControl {
        displayOptions?: outputs.quicksight.DashboardRelativeDateTimeControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface DashboardFilterScopeConfiguration {
        allSheets?: outputs.quicksight.DashboardAllSheetsFilterScopeConfiguration;
        selectedSheets?: outputs.quicksight.DashboardSelectedSheetsFilterScopeConfiguration;
    }

    export interface DashboardFilterSelectableValues {
        values?: string[];
    }

    export interface DashboardFilterSliderControl {
        displayOptions?: outputs.quicksight.DashboardSliderControlDisplayOptions;
        filterControlId: string;
        maximumValue: number;
        minimumValue: number;
        sourceFilterId: string;
        stepSize: number;
        title: string;
        type?: enums.quicksight.DashboardSheetControlSliderType;
    }

    export interface DashboardFilterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.DashboardTextAreaControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface DashboardFilterTextFieldControl {
        displayOptions?: outputs.quicksight.DashboardTextFieldControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface DashboardFontConfiguration {
        fontColor?: string;
        fontDecoration?: enums.quicksight.DashboardFontDecoration;
        fontSize?: outputs.quicksight.DashboardFontSize;
        fontStyle?: enums.quicksight.DashboardFontStyle;
        fontWeight?: outputs.quicksight.DashboardFontWeight;
    }

    export interface DashboardFontSize {
        relative?: enums.quicksight.DashboardRelativeFontSize;
    }

    export interface DashboardFontWeight {
        name?: enums.quicksight.DashboardFontWeightName;
    }

    export interface DashboardForecastComputation {
        computationId: string;
        customSeasonalityValue?: number;
        lowerBoundary?: number;
        name?: string;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: enums.quicksight.DashboardForecastComputationSeasonality;
        time?: outputs.quicksight.DashboardDimensionField;
        upperBoundary?: number;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardForecastConfiguration {
        forecastProperties?: outputs.quicksight.DashboardTimeBasedForecastProperties;
        scenario?: outputs.quicksight.DashboardForecastScenario;
    }

    export interface DashboardForecastScenario {
        whatIfPointScenario?: outputs.quicksight.DashboardWhatIfPointScenario;
        whatIfRangeScenario?: outputs.quicksight.DashboardWhatIfRangeScenario;
    }

    export interface DashboardFormatConfiguration {
        dateTimeFormatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
        numberFormatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
        stringFormatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
    }

    export interface DashboardFreeFormLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.DashboardFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface DashboardFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.DashboardFreeFormLayoutCanvasSizeOptions;
        elements: outputs.quicksight.DashboardFreeFormLayoutElement[];
    }

    export interface DashboardFreeFormLayoutElement {
        backgroundStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBackgroundStyle;
        borderStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBorderStyle;
        elementId: string;
        elementType: enums.quicksight.DashboardLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        loadingAnimation?: outputs.quicksight.DashboardLoadingAnimation;
        renderingRules?: outputs.quicksight.DashboardSheetElementRenderingRule[];
        selectedBorderStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBorderStyle;
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface DashboardFreeFormLayoutElementBackgroundStyle {
        color?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFreeFormLayoutElementBorderStyle {
        color?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface DashboardFreeFormSectionLayoutConfiguration {
        elements: outputs.quicksight.DashboardFreeFormLayoutElement[];
    }

    export interface DashboardFunnelChartAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardFunnelChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        dataLabelOptions?: outputs.quicksight.DashboardFunnelChartDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardFunnelChartFieldWells;
        sortConfiguration?: outputs.quicksight.DashboardFunnelChartSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardFunnelChartDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.DashboardVisibility;
        labelColor?: string;
        labelFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        measureDataLabelStyle?: enums.quicksight.DashboardFunnelChartMeasureDataLabelStyle;
        measureLabelVisibility?: enums.quicksight.DashboardVisibility;
        position?: enums.quicksight.DashboardDataLabelPosition;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFunnelChartFieldWells {
        funnelChartAggregatedFieldWells?: outputs.quicksight.DashboardFunnelChartAggregatedFieldWells;
    }

    export interface DashboardFunnelChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardFunnelChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardFunnelChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardGaugeChartArcConditionalFormatting {
        foregroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardGaugeChartConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.DashboardGaugeChartConditionalFormattingOption[];
    }

    export interface DashboardGaugeChartConditionalFormattingOption {
        arc?: outputs.quicksight.DashboardGaugeChartArcConditionalFormatting;
        primaryValue?: outputs.quicksight.DashboardGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface DashboardGaugeChartConfiguration {
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardGaugeChartFieldWells;
        gaugeChartOptions?: outputs.quicksight.DashboardGaugeChartOptions;
        tooltipOptions?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardGaugeChartFieldWells {
        targetValues?: outputs.quicksight.DashboardMeasureField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardGaugeChartOptions {
        arc?: outputs.quicksight.DashboardArcConfiguration;
        arcAxis?: outputs.quicksight.DashboardArcAxisConfiguration;
        comparison?: outputs.quicksight.DashboardComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.DashboardPrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
    }

    export interface DashboardGaugeChartPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardGaugeChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardGaugeChartConfiguration;
        conditionalFormatting?: outputs.quicksight.DashboardGaugeChartConditionalFormatting;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardGeospatialCoordinateBounds {
        east: number;
        north: number;
        south: number;
        west: number;
    }

    export interface DashboardGeospatialHeatmapColorScale {
        colors?: outputs.quicksight.DashboardGeospatialHeatmapDataColor[];
    }

    export interface DashboardGeospatialHeatmapConfiguration {
        heatmapColor?: outputs.quicksight.DashboardGeospatialHeatmapColorScale;
    }

    export interface DashboardGeospatialHeatmapDataColor {
        color: string;
    }

    export interface DashboardGeospatialMapAggregatedFieldWells {
        colors?: outputs.quicksight.DashboardDimensionField[];
        geospatial?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardGeospatialMapConfiguration {
        fieldWells?: outputs.quicksight.DashboardGeospatialMapFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        mapStyleOptions?: outputs.quicksight.DashboardGeospatialMapStyleOptions;
        pointStyleOptions?: outputs.quicksight.DashboardGeospatialPointStyleOptions;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        windowOptions?: outputs.quicksight.DashboardGeospatialWindowOptions;
    }

    export interface DashboardGeospatialMapFieldWells {
        geospatialMapAggregatedFieldWells?: outputs.quicksight.DashboardGeospatialMapAggregatedFieldWells;
    }

    export interface DashboardGeospatialMapStyleOptions {
        baseMapStyle?: enums.quicksight.DashboardBaseMapStyleType;
    }

    export interface DashboardGeospatialMapVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardGeospatialMapConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardGeospatialPointStyleOptions {
        clusterMarkerConfiguration?: outputs.quicksight.DashboardClusterMarkerConfiguration;
        heatmapConfiguration?: outputs.quicksight.DashboardGeospatialHeatmapConfiguration;
        selectedPointStyle?: enums.quicksight.DashboardGeospatialSelectedPointStyle;
    }

    export interface DashboardGeospatialWindowOptions {
        bounds?: outputs.quicksight.DashboardGeospatialCoordinateBounds;
        mapZoomMode?: enums.quicksight.DashboardMapZoomMode;
    }

    export interface DashboardGlobalTableBorderOptions {
        sideSpecificBorder?: outputs.quicksight.DashboardTableSideBorderOptions;
        uniformBorder?: outputs.quicksight.DashboardTableBorderOptions;
    }

    export interface DashboardGradientColor {
        stops?: outputs.quicksight.DashboardGradientStop[];
    }

    export interface DashboardGradientStop {
        color?: string;
        dataValue?: number;
        gradientOffset: number;
    }

    export interface DashboardGridLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.DashboardGridLayoutScreenCanvasSizeOptions;
    }

    export interface DashboardGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.DashboardGridLayoutCanvasSizeOptions;
        elements: outputs.quicksight.DashboardGridLayoutElement[];
    }

    export interface DashboardGridLayoutElement {
        columnIndex?: number;
        columnSpan: number;
        elementId: string;
        elementType: enums.quicksight.DashboardLayoutElementType;
        rowIndex?: number;
        rowSpan: number;
    }

    export interface DashboardGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        resizeOption: enums.quicksight.DashboardResizeOption;
    }

    export interface DashboardGrowthRateComputation {
        computationId: string;
        name?: string;
        periodSize?: number;
        time?: outputs.quicksight.DashboardDimensionField;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardHeaderFooterSectionConfiguration {
        layout: outputs.quicksight.DashboardSectionLayoutConfiguration;
        sectionId: string;
        style?: outputs.quicksight.DashboardSectionStyle;
    }

    export interface DashboardHeatMapAggregatedFieldWells {
        columns?: outputs.quicksight.DashboardDimensionField[];
        rows?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardHeatMapConfiguration {
        colorScale?: outputs.quicksight.DashboardColorScale;
        columnLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardHeatMapFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        rowLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.DashboardHeatMapSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
    }

    export interface DashboardHeatMapFieldWells {
        heatMapAggregatedFieldWells?: outputs.quicksight.DashboardHeatMapAggregatedFieldWells;
    }

    export interface DashboardHeatMapSortConfiguration {
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        heatMapColumnSort?: outputs.quicksight.DashboardFieldSortOptions[];
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        heatMapRowSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardHeatMapVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardHeatMapConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardHistogramAggregatedFieldWells {
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardHistogramBinOptions {
        binCount?: outputs.quicksight.DashboardBinCountOptions;
        binWidth?: outputs.quicksight.DashboardBinWidthOptions;
        selectedBinType?: enums.quicksight.DashboardHistogramBinType;
        startValue?: number;
    }

    export interface DashboardHistogramConfiguration {
        binOptions?: outputs.quicksight.DashboardHistogramBinOptions;
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardHistogramFieldWells;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
    }

    export interface DashboardHistogramFieldWells {
        histogramAggregatedFieldWells?: outputs.quicksight.DashboardHistogramAggregatedFieldWells;
    }

    export interface DashboardHistogramVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardHistogramConfiguration;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardInsightConfiguration {
        computations?: outputs.quicksight.DashboardComputation[];
        customNarrative?: outputs.quicksight.DashboardCustomNarrativeOptions;
    }

    export interface DashboardInsightVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        dataSetIdentifier: string;
        insightConfiguration?: outputs.quicksight.DashboardInsightConfiguration;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardIntegerDefaultValues {
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface DashboardIntegerParameter {
        name: string;
        values: number[];
    }

    export interface DashboardIntegerParameterDeclaration {
        defaultValues?: outputs.quicksight.DashboardIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        valueWhenUnset?: outputs.quicksight.DashboardIntegerValueWhenUnsetConfiguration;
    }

    export interface DashboardIntegerValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardItemsLimitConfiguration {
        itemsLimit?: number;
        otherCategories?: enums.quicksight.DashboardOtherCategories;
    }

    export interface DashboardKpiActualValueConditionalFormatting {
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiComparisonValueConditionalFormatting {
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.DashboardKpiConditionalFormattingOption[];
    }

    export interface DashboardKpiConditionalFormattingOption {
        actualValue?: outputs.quicksight.DashboardKpiActualValueConditionalFormatting;
        comparisonValue?: outputs.quicksight.DashboardKpiComparisonValueConditionalFormatting;
        primaryValue?: outputs.quicksight.DashboardKpiPrimaryValueConditionalFormatting;
        progressBar?: outputs.quicksight.DashboardKpiProgressBarConditionalFormatting;
    }

    export interface DashboardKpiConfiguration {
        fieldWells?: outputs.quicksight.DashboardKpiFieldWells;
        kpiOptions?: outputs.quicksight.DashboardKpiOptions;
        sortConfiguration?: outputs.quicksight.DashboardKpiSortConfiguration;
    }

    export interface DashboardKpiFieldWells {
        targetValues?: outputs.quicksight.DashboardMeasureField[];
        trendGroups?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardKpiOptions {
        comparison?: outputs.quicksight.DashboardComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.DashboardPrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        progressBar?: outputs.quicksight.DashboardProgressBarOptions;
        secondaryValue?: outputs.quicksight.DashboardSecondaryValueOptions;
        secondaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        sparkline?: outputs.quicksight.DashboardKpiSparklineOptions;
        trendArrows?: outputs.quicksight.DashboardTrendArrowOptions;
        visualLayoutOptions?: outputs.quicksight.DashboardKpiVisualLayoutOptions;
    }

    export interface DashboardKpiPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiProgressBarConditionalFormatting {
        foregroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiSortConfiguration {
        trendGroupSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardKpiSparklineOptions {
        color?: string;
        tooltipVisibility?: enums.quicksight.DashboardVisibility;
        type: enums.quicksight.DashboardKpiSparklineType;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardKpiVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardKpiConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.DashboardKpiConditionalFormatting;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardKpiVisualLayoutOptions {
        standardLayout?: outputs.quicksight.DashboardKpiVisualStandardLayout;
    }

    export interface DashboardKpiVisualStandardLayout {
        type: enums.quicksight.DashboardKpiVisualStandardLayoutType;
    }

    export interface DashboardLabelOptions {
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLayout {
        configuration: outputs.quicksight.DashboardLayoutConfiguration;
    }

    export interface DashboardLayoutConfiguration {
        freeFormLayout?: outputs.quicksight.DashboardFreeFormLayoutConfiguration;
        gridLayout?: outputs.quicksight.DashboardGridLayoutConfiguration;
        sectionBasedLayout?: outputs.quicksight.DashboardSectionBasedLayoutConfiguration;
    }

    export interface DashboardLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        position?: enums.quicksight.DashboardLegendPosition;
        title?: outputs.quicksight.DashboardLabelOptions;
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardLineChartAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        colors?: outputs.quicksight.DashboardDimensionField[];
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardLineChartConfiguration {
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        defaultSeriesSettings?: outputs.quicksight.DashboardLineChartDefaultSeriesSettings;
        fieldWells?: outputs.quicksight.DashboardLineChartFieldWells;
        forecastConfigurations?: outputs.quicksight.DashboardForecastConfiguration[];
        legend?: outputs.quicksight.DashboardLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardLineSeriesAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.DashboardLineSeriesAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        series?: outputs.quicksight.DashboardSeriesItem[];
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.DashboardLineChartSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        type?: enums.quicksight.DashboardLineChartType;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
    }

    export interface DashboardLineChartDefaultSeriesSettings {
        axisBinding?: enums.quicksight.DashboardAxisBinding;
        lineStyleSettings?: outputs.quicksight.DashboardLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.DashboardLineChartMarkerStyleSettings;
    }

    export interface DashboardLineChartFieldWells {
        lineChartAggregatedFieldWells?: outputs.quicksight.DashboardLineChartAggregatedFieldWells;
    }

    export interface DashboardLineChartLineStyleSettings {
        lineInterpolation?: enums.quicksight.DashboardLineInterpolation;
        lineStyle?: enums.quicksight.DashboardLineChartLineStyle;
        lineVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface DashboardLineChartMarkerStyleSettings {
        markerColor?: string;
        markerShape?: enums.quicksight.DashboardLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        markerVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLineChartSeriesSettings {
        lineStyleSettings?: outputs.quicksight.DashboardLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.DashboardLineChartMarkerStyleSettings;
    }

    export interface DashboardLineChartSortConfiguration {
        categoryItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        colorItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardLineChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardLineChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardLineSeriesAxisDisplayOptions {
        axisOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        missingDataConfigurations?: outputs.quicksight.DashboardMissingDataConfiguration[];
    }

    export interface DashboardLinkSharingConfiguration {
        permissions?: outputs.quicksight.DashboardResourcePermission[];
    }

    export interface DashboardListControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        searchOptions?: outputs.quicksight.DashboardListControlSearchOptions;
        selectAllOptions?: outputs.quicksight.DashboardListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardListControlSearchOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardListControlSelectAllOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLoadingAnimation {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLocalNavigationConfiguration {
        targetSheetId: string;
    }

    export interface DashboardLongFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface DashboardMappedDataSetParameter {
        dataSetIdentifier: string;
        dataSetParameterName: string;
    }

    export interface DashboardMaximumLabelType {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardMaximumMinimumComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.DashboardDimensionField;
        type: enums.quicksight.DashboardMaximumMinimumComputationType;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardMeasureField {
        calculatedMeasureField?: outputs.quicksight.DashboardCalculatedMeasureField;
        categoricalMeasureField?: outputs.quicksight.DashboardCategoricalMeasureField;
        dateMeasureField?: outputs.quicksight.DashboardDateMeasureField;
        numericalMeasureField?: outputs.quicksight.DashboardNumericalMeasureField;
    }

    export interface DashboardMetricComparisonComputation {
        computationId: string;
        fromValue?: outputs.quicksight.DashboardMeasureField;
        name?: string;
        targetValue?: outputs.quicksight.DashboardMeasureField;
        time?: outputs.quicksight.DashboardDimensionField;
    }

    export interface DashboardMinimumLabelType {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardMissingDataConfiguration {
        treatmentOption?: enums.quicksight.DashboardMissingDataTreatmentOption;
    }

    export interface DashboardNegativeValueConfiguration {
        displayMode: enums.quicksight.DashboardNegativeValueDisplayMode;
    }

    export interface DashboardNullValueFormatConfiguration {
        nullString: string;
    }

    export interface DashboardNumberDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        numberScale?: enums.quicksight.DashboardNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface DashboardNumberFormatConfiguration {
        formatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    export interface DashboardNumericAxisOptions {
        range?: outputs.quicksight.DashboardAxisDisplayRange;
        scale?: outputs.quicksight.DashboardAxisScale;
    }

    export interface DashboardNumericEqualityDrillDownFilter {
        column: outputs.quicksight.DashboardColumnIdentifier;
        value: number;
    }

    export interface DashboardNumericEqualityFilter {
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        filterId: string;
        matchOperator: enums.quicksight.DashboardNumericEqualityMatchOperator;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.DashboardNumericFilterSelectAllOptions;
        value?: number;
    }

    export interface DashboardNumericFormatConfiguration {
        currencyDisplayFormatConfiguration?: outputs.quicksight.DashboardCurrencyDisplayFormatConfiguration;
        numberDisplayFormatConfiguration?: outputs.quicksight.DashboardNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.DashboardPercentageDisplayFormatConfiguration;
    }

    export interface DashboardNumericRangeFilter {
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        rangeMaximum?: outputs.quicksight.DashboardNumericRangeFilterValue;
        rangeMinimum?: outputs.quicksight.DashboardNumericRangeFilterValue;
        selectAllOptions?: enums.quicksight.DashboardNumericFilterSelectAllOptions;
    }

    export interface DashboardNumericRangeFilterValue {
        parameter?: string;
        staticValue?: number;
    }

    export interface DashboardNumericSeparatorConfiguration {
        decimalSeparator?: enums.quicksight.DashboardNumericSeparatorSymbol;
        thousandsSeparator?: outputs.quicksight.DashboardThousandSeparatorOptions;
    }

    export interface DashboardNumericalAggregationFunction {
        percentileAggregation?: outputs.quicksight.DashboardPercentileAggregation;
        simpleNumericalAggregation?: enums.quicksight.DashboardSimpleNumericalAggregationFunction;
    }

    export interface DashboardNumericalDimensionField {
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
        hierarchyId?: string;
    }

    export interface DashboardNumericalMeasureField {
        aggregationFunction?: outputs.quicksight.DashboardNumericalAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
    }

    export interface DashboardPaginationConfiguration {
        pageNumber: number;
        pageSize: number;
    }

    export interface DashboardPanelConfiguration {
        backgroundColor?: string;
        backgroundVisibility?: enums.quicksight.DashboardVisibility;
        borderColor?: string;
        borderStyle?: enums.quicksight.DashboardPanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        borderVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        gutterVisibility?: enums.quicksight.DashboardVisibility;
        title?: outputs.quicksight.DashboardPanelTitleOptions;
    }

    export interface DashboardPanelTitleOptions {
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        horizontalTextAlignment?: enums.quicksight.DashboardHorizontalTextAlignment;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardParameterControl {
        dateTimePicker?: outputs.quicksight.DashboardParameterDateTimePickerControl;
        dropdown?: outputs.quicksight.DashboardParameterDropDownControl;
        list?: outputs.quicksight.DashboardParameterListControl;
        slider?: outputs.quicksight.DashboardParameterSliderControl;
        textArea?: outputs.quicksight.DashboardParameterTextAreaControl;
        textField?: outputs.quicksight.DashboardParameterTextFieldControl;
    }

    export interface DashboardParameterDateTimePickerControl {
        displayOptions?: outputs.quicksight.DashboardDateTimePickerControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface DashboardParameterDeclaration {
        dateTimeParameterDeclaration?: outputs.quicksight.DashboardDateTimeParameterDeclaration;
        decimalParameterDeclaration?: outputs.quicksight.DashboardDecimalParameterDeclaration;
        integerParameterDeclaration?: outputs.quicksight.DashboardIntegerParameterDeclaration;
        stringParameterDeclaration?: outputs.quicksight.DashboardStringParameterDeclaration;
    }

    export interface DashboardParameterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.DashboardDropDownControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.DashboardParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardParameterListControl {
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.DashboardListControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.DashboardParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardParameterSelectableValues {
        linkToDataSetColumn?: outputs.quicksight.DashboardColumnIdentifier;
        values?: string[];
    }

    export interface DashboardParameterSliderControl {
        displayOptions?: outputs.quicksight.DashboardSliderControlDisplayOptions;
        maximumValue: number;
        minimumValue: number;
        parameterControlId: string;
        sourceParameterName: string;
        stepSize: number;
        title: string;
    }

    export interface DashboardParameterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.DashboardTextAreaControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface DashboardParameterTextFieldControl {
        displayOptions?: outputs.quicksight.DashboardTextFieldControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface DashboardParameters {
        dateTimeParameters?: outputs.quicksight.DashboardDateTimeParameter[];
        decimalParameters?: outputs.quicksight.DashboardDecimalParameter[];
        integerParameters?: outputs.quicksight.DashboardIntegerParameter[];
        stringParameters?: outputs.quicksight.DashboardStringParameter[];
    }

    export interface DashboardPercentVisibleRange {
        from?: number;
        to?: number;
    }

    export interface DashboardPercentageDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface DashboardPercentileAggregation {
        percentileValue?: number;
    }

    export interface DashboardPeriodOverPeriodComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.DashboardDimensionField;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardPeriodToDateComputation {
        computationId: string;
        name?: string;
        periodTimeGranularity?: enums.quicksight.DashboardTimeGranularity;
        time?: outputs.quicksight.DashboardDimensionField;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardPieChartAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardPieChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        donutOptions?: outputs.quicksight.DashboardDonutOptions;
        fieldWells?: outputs.quicksight.DashboardPieChartFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.DashboardPieChartSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardPieChartFieldWells {
        pieChartAggregatedFieldWells?: outputs.quicksight.DashboardPieChartAggregatedFieldWells;
    }

    export interface DashboardPieChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardPieChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardPieChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardPivotFieldSortOptions {
        fieldId: string;
        sortBy: outputs.quicksight.DashboardPivotTableSortBy;
    }

    export interface DashboardPivotTableAggregatedFieldWells {
        columns?: outputs.quicksight.DashboardDimensionField[];
        rows?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardPivotTableCellConditionalFormatting {
        fieldId: string;
        scope?: outputs.quicksight.DashboardPivotTableConditionalFormattingScope;
        scopes?: outputs.quicksight.DashboardPivotTableConditionalFormattingScope[];
        textFormat?: outputs.quicksight.DashboardTextConditionalFormat;
    }

    export interface DashboardPivotTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.DashboardPivotTableConditionalFormattingOption[];
    }

    export interface DashboardPivotTableConditionalFormattingOption {
        cell?: outputs.quicksight.DashboardPivotTableCellConditionalFormatting;
    }

    export interface DashboardPivotTableConditionalFormattingScope {
        role?: enums.quicksight.DashboardPivotTableConditionalFormattingScopeRole;
    }

    export interface DashboardPivotTableConfiguration {
        fieldOptions?: outputs.quicksight.DashboardPivotTableFieldOptions;
        fieldWells?: outputs.quicksight.DashboardPivotTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.DashboardPivotTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.DashboardPivotTableSortConfiguration;
        tableOptions?: outputs.quicksight.DashboardPivotTableOptions;
        totalOptions?: outputs.quicksight.DashboardPivotTableTotalOptions;
    }

    export interface DashboardPivotTableDataPathOption {
        dataPathList: outputs.quicksight.DashboardDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardPivotTableFieldCollapseStateOption {
        state?: enums.quicksight.DashboardPivotTableFieldCollapseState;
        target: outputs.quicksight.DashboardPivotTableFieldCollapseStateTarget;
    }

    export interface DashboardPivotTableFieldCollapseStateTarget {
        fieldDataPathValues?: outputs.quicksight.DashboardDataPathValue[];
        fieldId?: string;
    }

    export interface DashboardPivotTableFieldOption {
        customLabel?: string;
        fieldId: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableFieldOptions {
        collapseStateOptions?: outputs.quicksight.DashboardPivotTableFieldCollapseStateOption[];
        dataPathOptions?: outputs.quicksight.DashboardPivotTableDataPathOption[];
        selectedFieldOptions?: outputs.quicksight.DashboardPivotTableFieldOption[];
    }

    export interface DashboardPivotTableFieldSubtotalOptions {
        fieldId?: string;
    }

    export interface DashboardPivotTableFieldWells {
        pivotTableAggregatedFieldWells?: outputs.quicksight.DashboardPivotTableAggregatedFieldWells;
    }

    export interface DashboardPivotTableOptions {
        cellStyle?: outputs.quicksight.DashboardTableCellStyle;
        collapsedRowDimensionsVisibility?: enums.quicksight.DashboardVisibility;
        columnHeaderStyle?: outputs.quicksight.DashboardTableCellStyle;
        columnNamesVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        metricPlacement?: enums.quicksight.DashboardPivotTableMetricPlacement;
        rowAlternateColorOptions?: outputs.quicksight.DashboardRowAlternateColorOptions;
        rowFieldNamesStyle?: outputs.quicksight.DashboardTableCellStyle;
        rowHeaderStyle?: outputs.quicksight.DashboardTableCellStyle;
        rowsLabelOptions?: outputs.quicksight.DashboardPivotTableRowsLabelOptions;
        rowsLayout?: enums.quicksight.DashboardPivotTableRowsLayout;
        singleMetricVisibility?: enums.quicksight.DashboardVisibility;
        toggleButtonsVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.DashboardVisibility;
        verticalOverflowVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableRowsLabelOptions {
        customLabel?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableSortBy {
        column?: outputs.quicksight.DashboardColumnSort;
        dataPath?: outputs.quicksight.DashboardDataPathSort;
        field?: outputs.quicksight.DashboardFieldSort;
    }

    export interface DashboardPivotTableSortConfiguration {
        fieldSortOptions?: outputs.quicksight.DashboardPivotFieldSortOptions[];
    }

    export interface DashboardPivotTableTotalOptions {
        columnSubtotalOptions?: outputs.quicksight.DashboardSubtotalOptions;
        columnTotalOptions?: outputs.quicksight.DashboardPivotTotalOptions;
        rowSubtotalOptions?: outputs.quicksight.DashboardSubtotalOptions;
        rowTotalOptions?: outputs.quicksight.DashboardPivotTotalOptions;
    }

    export interface DashboardPivotTableVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardPivotTableConfiguration;
        conditionalFormatting?: outputs.quicksight.DashboardPivotTableConditionalFormatting;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardPivotTotalOptions {
        customLabel?: string;
        metricHeaderCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        placement?: enums.quicksight.DashboardTableTotalsPlacement;
        scrollStatus?: enums.quicksight.DashboardTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.DashboardTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        valueCellStyle?: outputs.quicksight.DashboardTableCellStyle;
    }

    export interface DashboardPredefinedHierarchy {
        columns: outputs.quicksight.DashboardColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        hierarchyId: string;
    }

    export interface DashboardProgressBarOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPublishOptions {
        adHocFilteringOption?: outputs.quicksight.DashboardAdHocFilteringOption;
        dataPointDrillUpDownOption?: outputs.quicksight.DashboardDataPointDrillUpDownOption;
        dataPointMenuLabelOption?: outputs.quicksight.DashboardDataPointMenuLabelOption;
        dataPointTooltipOption?: outputs.quicksight.DashboardDataPointTooltipOption;
        exportToCsvOption?: outputs.quicksight.DashboardExportToCsvOption;
        exportWithHiddenFieldsOption?: outputs.quicksight.DashboardExportWithHiddenFieldsOption;
        sheetControlsOption?: outputs.quicksight.DashboardSheetControlsOption;
        sheetLayoutElementMaximizationOption?: outputs.quicksight.DashboardSheetLayoutElementMaximizationOption;
        visualAxisSortOption?: outputs.quicksight.DashboardVisualAxisSortOption;
        visualMenuOption?: outputs.quicksight.DashboardVisualMenuOption;
        visualPublishOptions?: outputs.quicksight.DashboardVisualPublishOptions;
    }

    export interface DashboardRadarChartAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        color?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardRadarChartAreaStyleSettings {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardRadarChartConfiguration {
        alternateBandColorsVisibility?: enums.quicksight.DashboardVisibility;
        alternateBandEvenColor?: string;
        alternateBandOddColor?: string;
        axesRangeScale?: enums.quicksight.DashboardRadarChartAxesRangeScale;
        baseSeriesSettings?: outputs.quicksight.DashboardRadarChartSeriesSettings;
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        colorAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.DashboardRadarChartFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        shape?: enums.quicksight.DashboardRadarChartShape;
        sortConfiguration?: outputs.quicksight.DashboardRadarChartSortConfiguration;
        startAngle?: number;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardRadarChartFieldWells {
        radarChartAggregatedFieldWells?: outputs.quicksight.DashboardRadarChartAggregatedFieldWells;
    }

    export interface DashboardRadarChartSeriesSettings {
        areaStyleSettings?: outputs.quicksight.DashboardRadarChartAreaStyleSettings;
    }

    export interface DashboardRadarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardRadarChartVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardRadarChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardRangeEndsLabelType {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardReferenceLine {
        dataConfiguration: outputs.quicksight.DashboardReferenceLineDataConfiguration;
        labelConfiguration?: outputs.quicksight.DashboardReferenceLineLabelConfiguration;
        status?: enums.quicksight.DashboardWidgetStatus;
        styleConfiguration?: outputs.quicksight.DashboardReferenceLineStyleConfiguration;
    }

    export interface DashboardReferenceLineCustomLabelConfiguration {
        customLabel: string;
    }

    export interface DashboardReferenceLineDataConfiguration {
        axisBinding?: enums.quicksight.DashboardAxisBinding;
        dynamicConfiguration?: outputs.quicksight.DashboardReferenceLineDynamicDataConfiguration;
        seriesType?: enums.quicksight.DashboardReferenceLineSeriesType;
        staticConfiguration?: outputs.quicksight.DashboardReferenceLineStaticDataConfiguration;
    }

    export interface DashboardReferenceLineDynamicDataConfiguration {
        calculation: outputs.quicksight.DashboardNumericalAggregationFunction;
        column: outputs.quicksight.DashboardColumnIdentifier;
        measureAggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
    }

    export interface DashboardReferenceLineLabelConfiguration {
        customLabelConfiguration?: outputs.quicksight.DashboardReferenceLineCustomLabelConfiguration;
        fontColor?: string;
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        horizontalPosition?: enums.quicksight.DashboardReferenceLineLabelHorizontalPosition;
        valueLabelConfiguration?: outputs.quicksight.DashboardReferenceLineValueLabelConfiguration;
        verticalPosition?: enums.quicksight.DashboardReferenceLineLabelVerticalPosition;
    }

    export interface DashboardReferenceLineStaticDataConfiguration {
        value: number;
    }

    export interface DashboardReferenceLineStyleConfiguration {
        color?: string;
        pattern?: enums.quicksight.DashboardReferenceLinePatternType;
    }

    export interface DashboardReferenceLineValueLabelConfiguration {
        formatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
        relativePosition?: enums.quicksight.DashboardReferenceLineValueLabelRelativePosition;
    }

    export interface DashboardRelativeDateTimeControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardRelativeDatesFilter {
        anchorDateConfiguration: outputs.quicksight.DashboardAnchorDateConfiguration;
        column: outputs.quicksight.DashboardColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.DashboardExcludePeriodConfiguration;
        filterId: string;
        minimumGranularity?: enums.quicksight.DashboardTimeGranularity;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        parameterName?: string;
        relativeDateType: enums.quicksight.DashboardRelativeDateType;
        relativeDateValue?: number;
        timeGranularity: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardResourcePermission {
        actions: string[];
        principal: string;
    }

    export interface DashboardRollingDateConfiguration {
        dataSetIdentifier?: string;
        expression: string;
    }

    export interface DashboardRowAlternateColorOptions {
        rowAlternateColors?: string[];
        status?: enums.quicksight.DashboardWidgetStatus;
        usePrimaryBackgroundColor?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardSameSheetTargetVisualConfiguration {
        targetVisualOptions?: enums.quicksight.DashboardTargetVisualOptions;
        targetVisuals?: string[];
    }

    export interface DashboardSankeyDiagramAggregatedFieldWells {
        destination?: outputs.quicksight.DashboardDimensionField[];
        source?: outputs.quicksight.DashboardDimensionField[];
        weight?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardSankeyDiagramChartConfiguration {
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardSankeyDiagramFieldWells;
        sortConfiguration?: outputs.quicksight.DashboardSankeyDiagramSortConfiguration;
    }

    export interface DashboardSankeyDiagramFieldWells {
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.DashboardSankeyDiagramAggregatedFieldWells;
    }

    export interface DashboardSankeyDiagramSortConfiguration {
        destinationItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        sourceItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        weightSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardSankeyDiagramVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardSankeyDiagramChartConfiguration;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardScatterPlotCategoricallyAggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        label?: outputs.quicksight.DashboardDimensionField[];
        size?: outputs.quicksight.DashboardMeasureField[];
        xAxis?: outputs.quicksight.DashboardMeasureField[];
        yAxis?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardScatterPlotConfiguration {
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardScatterPlotFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        yAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
    }

    export interface DashboardScatterPlotFieldWells {
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.DashboardScatterPlotCategoricallyAggregatedFieldWells;
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.DashboardScatterPlotUnaggregatedFieldWells;
    }

    export interface DashboardScatterPlotUnaggregatedFieldWells {
        category?: outputs.quicksight.DashboardDimensionField[];
        label?: outputs.quicksight.DashboardDimensionField[];
        size?: outputs.quicksight.DashboardMeasureField[];
        xAxis?: outputs.quicksight.DashboardDimensionField[];
        yAxis?: outputs.quicksight.DashboardDimensionField[];
    }

    export interface DashboardScatterPlotVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardScatterPlotConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardScrollBarOptions {
        visibility?: enums.quicksight.DashboardVisibility;
        visibleRange?: outputs.quicksight.DashboardVisibleRangeOptions;
    }

    export interface DashboardSecondaryValueOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSectionAfterPageBreak {
        status?: enums.quicksight.DashboardSectionPageBreakStatus;
    }

    export interface DashboardSectionBasedLayoutCanvasSizeOptions {
        paperCanvasSizeOptions?: outputs.quicksight.DashboardSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface DashboardSectionBasedLayoutConfiguration {
        bodySections: outputs.quicksight.DashboardBodySectionConfiguration[];
        canvasSizeOptions: outputs.quicksight.DashboardSectionBasedLayoutCanvasSizeOptions;
        footerSections: outputs.quicksight.DashboardHeaderFooterSectionConfiguration[];
        headerSections: outputs.quicksight.DashboardHeaderFooterSectionConfiguration[];
    }

    export interface DashboardSectionBasedLayoutPaperCanvasSizeOptions {
        paperMargin?: outputs.quicksight.DashboardSpacing;
        paperOrientation?: enums.quicksight.DashboardPaperOrientation;
        paperSize?: enums.quicksight.DashboardPaperSize;
    }

    export interface DashboardSectionLayoutConfiguration {
        freeFormLayout: outputs.quicksight.DashboardFreeFormSectionLayoutConfiguration;
    }

    export interface DashboardSectionPageBreakConfiguration {
        after?: outputs.quicksight.DashboardSectionAfterPageBreak;
    }

    export interface DashboardSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        padding?: outputs.quicksight.DashboardSpacing;
    }

    export interface DashboardSelectedSheetsFilterScopeConfiguration {
        sheetVisualScopingConfigurations?: outputs.quicksight.DashboardSheetVisualScopingConfiguration[];
    }

    export interface DashboardSeriesItem {
        dataFieldSeriesItem?: outputs.quicksight.DashboardDataFieldSeriesItem;
        fieldSeriesItem?: outputs.quicksight.DashboardFieldSeriesItem;
    }

    export interface DashboardSetParameterValueConfiguration {
        destinationParameterName: string;
        value: outputs.quicksight.DashboardDestinationParameterValueConfiguration;
    }

    export interface DashboardShapeConditionalFormat {
        backgroundColor: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardSheet {
        name?: string;
        sheetId?: string;
    }

    export interface DashboardSheetControlInfoIconLabelOptions {
        infoIconText?: string;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSheetControlLayout {
        configuration: outputs.quicksight.DashboardSheetControlLayoutConfiguration;
    }

    export interface DashboardSheetControlLayoutConfiguration {
        gridLayout?: outputs.quicksight.DashboardGridLayoutConfiguration;
    }

    export interface DashboardSheetControlsOption {
        visibilityState?: enums.quicksight.DashboardUiState;
    }

    export interface DashboardSheetDefinition {
        contentType?: enums.quicksight.DashboardSheetContentType;
        description?: string;
        filterControls?: outputs.quicksight.DashboardFilterControl[];
        layouts?: outputs.quicksight.DashboardLayout[];
        name?: string;
        parameterControls?: outputs.quicksight.DashboardParameterControl[];
        sheetControlLayouts?: outputs.quicksight.DashboardSheetControlLayout[];
        sheetId: string;
        textBoxes?: outputs.quicksight.DashboardSheetTextBox[];
        title?: string;
        visuals?: outputs.quicksight.DashboardVisual[];
    }

    export interface DashboardSheetElementConfigurationOverrides {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSheetElementRenderingRule {
        configurationOverrides: outputs.quicksight.DashboardSheetElementConfigurationOverrides;
        expression: string;
    }

    export interface DashboardSheetLayoutElementMaximizationOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardSheetTextBox {
        content?: string;
        sheetTextBoxId: string;
    }

    export interface DashboardSheetVisualScopingConfiguration {
        scope: enums.quicksight.DashboardFilterVisualScope;
        sheetId: string;
        visualIds?: string[];
    }

    export interface DashboardShortFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface DashboardSimpleClusterMarker {
        color?: string;
    }

    export interface DashboardSliderControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardSmallMultiplesAxisProperties {
        placement?: enums.quicksight.DashboardSmallMultiplesAxisPlacement;
        scale?: enums.quicksight.DashboardSmallMultiplesAxisScale;
    }

    export interface DashboardSmallMultiplesOptions {
        maxVisibleColumns?: number;
        maxVisibleRows?: number;
        panelConfiguration?: outputs.quicksight.DashboardPanelConfiguration;
        xAxis?: outputs.quicksight.DashboardSmallMultiplesAxisProperties;
        yAxis?: outputs.quicksight.DashboardSmallMultiplesAxisProperties;
    }

    export interface DashboardSourceEntity {
        sourceTemplate?: outputs.quicksight.DashboardSourceTemplate;
    }

    export interface DashboardSourceTemplate {
        arn: string;
        dataSetReferences: outputs.quicksight.DashboardDataSetReference[];
    }

    export interface DashboardSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface DashboardStringDefaultValues {
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        staticValues?: string[];
    }

    export interface DashboardStringFormatConfiguration {
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    export interface DashboardStringParameter {
        name: string;
        values: string[];
    }

    export interface DashboardStringParameterDeclaration {
        defaultValues?: outputs.quicksight.DashboardStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        valueWhenUnset?: outputs.quicksight.DashboardStringValueWhenUnsetConfiguration;
    }

    export interface DashboardStringValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardSubtotalOptions {
        customLabel?: string;
        fieldLevel?: enums.quicksight.DashboardPivotTableSubtotalLevel;
        fieldLevelOptions?: outputs.quicksight.DashboardPivotTableFieldSubtotalOptions[];
        metricHeaderCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        styleTargets?: outputs.quicksight.DashboardTableStyleTarget[];
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        valueCellStyle?: outputs.quicksight.DashboardTableCellStyle;
    }

    export interface DashboardTableAggregatedFieldWells {
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardTableBorderOptions {
        color?: string;
        style?: enums.quicksight.DashboardTableBorderStyle;
        thickness?: number;
    }

    export interface DashboardTableCellConditionalFormatting {
        fieldId: string;
        textFormat?: outputs.quicksight.DashboardTextConditionalFormat;
    }

    export interface DashboardTableCellImageSizingConfiguration {
        tableCellImageScalingConfiguration?: enums.quicksight.DashboardTableCellImageScalingConfiguration;
    }

    export interface DashboardTableCellStyle {
        backgroundColor?: string;
        border?: outputs.quicksight.DashboardGlobalTableBorderOptions;
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        height?: number;
        horizontalTextAlignment?: enums.quicksight.DashboardHorizontalTextAlignment;
        textWrap?: enums.quicksight.DashboardTextWrap;
        verticalTextAlignment?: enums.quicksight.DashboardVerticalTextAlignment;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.DashboardTableConditionalFormattingOption[];
    }

    export interface DashboardTableConditionalFormattingOption {
        cell?: outputs.quicksight.DashboardTableCellConditionalFormatting;
        row?: outputs.quicksight.DashboardTableRowConditionalFormatting;
    }

    export interface DashboardTableConfiguration {
        fieldOptions?: outputs.quicksight.DashboardTableFieldOptions;
        fieldWells?: outputs.quicksight.DashboardTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.DashboardTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.DashboardTableSortConfiguration;
        tableInlineVisualizations?: outputs.quicksight.DashboardTableInlineVisualization[];
        tableOptions?: outputs.quicksight.DashboardTableOptions;
        totalOptions?: outputs.quicksight.DashboardTotalOptions;
    }

    export interface DashboardTableFieldCustomIconContent {
        icon?: enums.quicksight.DashboardTableFieldIconSetType;
    }

    export interface DashboardTableFieldCustomTextContent {
        fontConfiguration: outputs.quicksight.DashboardFontConfiguration;
        value?: string;
    }

    export interface DashboardTableFieldImageConfiguration {
        sizingOptions?: outputs.quicksight.DashboardTableCellImageSizingConfiguration;
    }

    export interface DashboardTableFieldLinkConfiguration {
        content: outputs.quicksight.DashboardTableFieldLinkContentConfiguration;
        target: enums.quicksight.DashboardUrlTargetConfiguration;
    }

    export interface DashboardTableFieldLinkContentConfiguration {
        customIconContent?: outputs.quicksight.DashboardTableFieldCustomIconContent;
        customTextContent?: outputs.quicksight.DashboardTableFieldCustomTextContent;
    }

    export interface DashboardTableFieldOption {
        customLabel?: string;
        fieldId: string;
        urlStyling?: outputs.quicksight.DashboardTableFieldUrlConfiguration;
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardTableFieldOptions {
        order?: string[];
        pinnedFieldOptions?: outputs.quicksight.DashboardTablePinnedFieldOptions;
        selectedFieldOptions?: outputs.quicksight.DashboardTableFieldOption[];
    }

    export interface DashboardTableFieldUrlConfiguration {
        imageConfiguration?: outputs.quicksight.DashboardTableFieldImageConfiguration;
        linkConfiguration?: outputs.quicksight.DashboardTableFieldLinkConfiguration;
    }

    export interface DashboardTableFieldWells {
        tableAggregatedFieldWells?: outputs.quicksight.DashboardTableAggregatedFieldWells;
        tableUnaggregatedFieldWells?: outputs.quicksight.DashboardTableUnaggregatedFieldWells;
    }

    export interface DashboardTableInlineVisualization {
        dataBars?: outputs.quicksight.DashboardDataBarsOptions;
    }

    export interface DashboardTableOptions {
        cellStyle?: outputs.quicksight.DashboardTableCellStyle;
        headerStyle?: outputs.quicksight.DashboardTableCellStyle;
        orientation?: enums.quicksight.DashboardTableOrientation;
        rowAlternateColorOptions?: outputs.quicksight.DashboardRowAlternateColorOptions;
    }

    export interface DashboardTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.DashboardVisibility;
        verticalOverflowVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTablePinnedFieldOptions {
        pinnedLeftFields?: string[];
    }

    export interface DashboardTableRowConditionalFormatting {
        backgroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardTableSideBorderOptions {
        bottom?: outputs.quicksight.DashboardTableBorderOptions;
        innerHorizontal?: outputs.quicksight.DashboardTableBorderOptions;
        innerVertical?: outputs.quicksight.DashboardTableBorderOptions;
        left?: outputs.quicksight.DashboardTableBorderOptions;
        right?: outputs.quicksight.DashboardTableBorderOptions;
        top?: outputs.quicksight.DashboardTableBorderOptions;
    }

    export interface DashboardTableSortConfiguration {
        paginationConfiguration?: outputs.quicksight.DashboardPaginationConfiguration;
        rowSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardTableStyleTarget {
        cellType: enums.quicksight.DashboardStyledCellType;
    }

    export interface DashboardTableUnaggregatedFieldWells {
        values?: outputs.quicksight.DashboardUnaggregatedField[];
    }

    export interface DashboardTableVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardTableConfiguration;
        conditionalFormatting?: outputs.quicksight.DashboardTableConditionalFormatting;
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardTag {
        key: string;
        value: string;
    }

    export interface DashboardTextAreaControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.DashboardTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardTextConditionalFormat {
        backgroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardTextControlPlaceholderOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTextFieldControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.DashboardTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardThousandSeparatorOptions {
        symbol?: enums.quicksight.DashboardNumericSeparatorSymbol;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTimeBasedForecastProperties {
        lowerBoundary?: number;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: number;
        upperBoundary?: number;
    }

    export interface DashboardTimeEqualityFilter {
        column: outputs.quicksight.DashboardColumnIdentifier;
        filterId: string;
        parameterName?: string;
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
        value?: string;
    }

    export interface DashboardTimeRangeDrillDownFilter {
        column: outputs.quicksight.DashboardColumnIdentifier;
        rangeMaximum: string;
        rangeMinimum: string;
        timeGranularity: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTimeRangeFilter {
        column: outputs.quicksight.DashboardColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.DashboardExcludePeriodConfiguration;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.DashboardFilterNullOption;
        rangeMaximumValue?: outputs.quicksight.DashboardTimeRangeFilterValue;
        rangeMinimumValue?: outputs.quicksight.DashboardTimeRangeFilterValue;
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTimeRangeFilterValue {
        parameter?: string;
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        staticValue?: string;
    }

    export interface DashboardTooltipItem {
        columnTooltipItem?: outputs.quicksight.DashboardColumnTooltipItem;
        fieldTooltipItem?: outputs.quicksight.DashboardFieldTooltipItem;
    }

    export interface DashboardTooltipOptions {
        fieldBasedTooltip?: outputs.quicksight.DashboardFieldBasedTooltip;
        selectedTooltipType?: enums.quicksight.DashboardSelectedTooltipType;
        tooltipVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTopBottomFilter {
        aggregationSortConfigurations: outputs.quicksight.DashboardAggregationSortConfiguration[];
        column: outputs.quicksight.DashboardColumnIdentifier;
        filterId: string;
        limit?: number;
        parameterName?: string;
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTopBottomMoversComputation {
        category?: outputs.quicksight.DashboardDimensionField;
        computationId: string;
        moverSize?: number;
        name?: string;
        sortOrder?: enums.quicksight.DashboardTopBottomSortOrder;
        time?: outputs.quicksight.DashboardDimensionField;
        type: enums.quicksight.DashboardTopBottomComputationType;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTopBottomRankedComputation {
        category?: outputs.quicksight.DashboardDimensionField;
        computationId: string;
        name?: string;
        resultSize?: number;
        type: enums.quicksight.DashboardTopBottomComputationType;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTotalAggregationComputation {
        computationId: string;
        name?: string;
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTotalAggregationFunction {
        simpleTotalAggregationFunction?: enums.quicksight.DashboardSimpleTotalAggregationFunction;
    }

    export interface DashboardTotalAggregationOption {
        fieldId: string;
        totalAggregationFunction: outputs.quicksight.DashboardTotalAggregationFunction;
    }

    export interface DashboardTotalOptions {
        customLabel?: string;
        placement?: enums.quicksight.DashboardTableTotalsPlacement;
        scrollStatus?: enums.quicksight.DashboardTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.DashboardTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        totalsVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTreeMapAggregatedFieldWells {
        colors?: outputs.quicksight.DashboardMeasureField[];
        groups?: outputs.quicksight.DashboardDimensionField[];
        sizes?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardTreeMapConfiguration {
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        colorScale?: outputs.quicksight.DashboardColorScale;
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardTreeMapFieldWells;
        groupLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        legend?: outputs.quicksight.DashboardLegendOptions;
        sizeLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.DashboardTreeMapSortConfiguration;
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
    }

    export interface DashboardTreeMapFieldWells {
        treeMapAggregatedFieldWells?: outputs.quicksight.DashboardTreeMapAggregatedFieldWells;
    }

    export interface DashboardTreeMapSortConfiguration {
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        treeMapSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardTreeMapVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardTreeMapConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardTrendArrowOptions {
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardUnaggregatedField {
        column: outputs.quicksight.DashboardColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.DashboardFormatConfiguration;
    }

    export interface DashboardUniqueValuesComputation {
        category?: outputs.quicksight.DashboardDimensionField;
        computationId: string;
        name?: string;
    }

    export interface DashboardValidationStrategy {
        mode: enums.quicksight.DashboardValidationStrategyMode;
    }

    export interface DashboardVersion {
        arn?: string;
        createdTime?: string;
        dataSetArns?: string[];
        description?: string;
        errors?: outputs.quicksight.DashboardError[];
        sheets?: outputs.quicksight.DashboardSheet[];
        sourceEntityArn?: string;
        status?: enums.quicksight.DashboardResourceStatus;
        themeArn?: string;
        versionNumber?: number;
    }

    export interface DashboardVersionDefinition {
        analysisDefaults?: outputs.quicksight.DashboardAnalysisDefaults;
        calculatedFields?: outputs.quicksight.DashboardCalculatedField[];
        columnConfigurations?: outputs.quicksight.DashboardColumnConfiguration[];
        dataSetIdentifierDeclarations: outputs.quicksight.DashboardDataSetIdentifierDeclaration[];
        filterGroups?: outputs.quicksight.DashboardFilterGroup[];
        options?: outputs.quicksight.DashboardAssetOptions;
        parameterDeclarations?: outputs.quicksight.DashboardParameterDeclaration[];
        sheets?: outputs.quicksight.DashboardSheetDefinition[];
    }

    export interface DashboardVisibleRangeOptions {
        percentRange?: outputs.quicksight.DashboardPercentVisibleRange;
    }

    export interface DashboardVisual {
        barChartVisual?: outputs.quicksight.DashboardBarChartVisual;
        boxPlotVisual?: outputs.quicksight.DashboardBoxPlotVisual;
        comboChartVisual?: outputs.quicksight.DashboardComboChartVisual;
        customContentVisual?: outputs.quicksight.DashboardCustomContentVisual;
        emptyVisual?: outputs.quicksight.DashboardEmptyVisual;
        filledMapVisual?: outputs.quicksight.DashboardFilledMapVisual;
        funnelChartVisual?: outputs.quicksight.DashboardFunnelChartVisual;
        gaugeChartVisual?: outputs.quicksight.DashboardGaugeChartVisual;
        geospatialMapVisual?: outputs.quicksight.DashboardGeospatialMapVisual;
        heatMapVisual?: outputs.quicksight.DashboardHeatMapVisual;
        histogramVisual?: outputs.quicksight.DashboardHistogramVisual;
        insightVisual?: outputs.quicksight.DashboardInsightVisual;
        kpiVisual?: outputs.quicksight.DashboardKpiVisual;
        lineChartVisual?: outputs.quicksight.DashboardLineChartVisual;
        pieChartVisual?: outputs.quicksight.DashboardPieChartVisual;
        pivotTableVisual?: outputs.quicksight.DashboardPivotTableVisual;
        radarChartVisual?: outputs.quicksight.DashboardRadarChartVisual;
        sankeyDiagramVisual?: outputs.quicksight.DashboardSankeyDiagramVisual;
        scatterPlotVisual?: outputs.quicksight.DashboardScatterPlotVisual;
        tableVisual?: outputs.quicksight.DashboardTableVisual;
        treeMapVisual?: outputs.quicksight.DashboardTreeMapVisual;
        waterfallVisual?: outputs.quicksight.DashboardWaterfallVisual;
        wordCloudVisual?: outputs.quicksight.DashboardWordCloudVisual;
    }

    export interface DashboardVisualAxisSortOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardVisualCustomAction {
        actionOperations: outputs.quicksight.DashboardVisualCustomActionOperation[];
        customActionId: string;
        name: string;
        status?: enums.quicksight.DashboardWidgetStatus;
        trigger: enums.quicksight.DashboardVisualCustomActionTrigger;
    }

    export interface DashboardVisualCustomActionOperation {
        filterOperation?: outputs.quicksight.DashboardCustomActionFilterOperation;
        navigationOperation?: outputs.quicksight.DashboardCustomActionNavigationOperation;
        setParametersOperation?: outputs.quicksight.DashboardCustomActionSetParametersOperation;
        urlOperation?: outputs.quicksight.DashboardCustomActionUrlOperation;
    }

    export interface DashboardVisualMenuOption {
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardVisualPalette {
        chartColor?: string;
        colorMap?: outputs.quicksight.DashboardDataPathColor[];
    }

    export interface DashboardVisualPublishOptions {
        exportHiddenFieldsOption?: outputs.quicksight.DashboardExportHiddenFieldsOption;
    }

    export interface DashboardVisualSubtitleLabelOptions {
        formatText?: outputs.quicksight.DashboardLongFormatText;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardVisualTitleLabelOptions {
        formatText?: outputs.quicksight.DashboardShortFormatText;
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardWaterfallChartAggregatedFieldWells {
        breakdowns?: outputs.quicksight.DashboardDimensionField[];
        categories?: outputs.quicksight.DashboardDimensionField[];
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardWaterfallChartConfiguration {
        categoryAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        categoryAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        fieldWells?: outputs.quicksight.DashboardWaterfallChartFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.DashboardWaterfallChartSortConfiguration;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        waterfallChartOptions?: outputs.quicksight.DashboardWaterfallChartOptions;
    }

    export interface DashboardWaterfallChartFieldWells {
        waterfallChartAggregatedFieldWells?: outputs.quicksight.DashboardWaterfallChartAggregatedFieldWells;
    }

    export interface DashboardWaterfallChartOptions {
        totalBarLabel?: string;
    }

    export interface DashboardWaterfallChartSortConfiguration {
        breakdownItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardWaterfallVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardWaterfallChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    export interface DashboardWhatIfPointScenario {
        date: string;
        value: number;
    }

    export interface DashboardWhatIfRangeScenario {
        endDate: string;
        startDate: string;
        value: number;
    }

    export interface DashboardWordCloudAggregatedFieldWells {
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        size?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardWordCloudChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.DashboardWordCloudFieldWells;
        sortConfiguration?: outputs.quicksight.DashboardWordCloudSortConfiguration;
        wordCloudOptions?: outputs.quicksight.DashboardWordCloudOptions;
    }

    export interface DashboardWordCloudFieldWells {
        wordCloudAggregatedFieldWells?: outputs.quicksight.DashboardWordCloudAggregatedFieldWells;
    }

    export interface DashboardWordCloudOptions {
        cloudLayout?: enums.quicksight.DashboardWordCloudCloudLayout;
        maximumStringLength?: number;
        wordCasing?: enums.quicksight.DashboardWordCloudWordCasing;
        wordOrientation?: enums.quicksight.DashboardWordCloudWordOrientation;
        wordPadding?: enums.quicksight.DashboardWordCloudWordPadding;
        wordScaling?: enums.quicksight.DashboardWordCloudWordScaling;
    }

    export interface DashboardWordCloudSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardWordCloudVisual {
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.DashboardWordCloudChartConfiguration;
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        visualId: string;
    }

    /**
     * <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
     *             a variant type structure. For this structure to be valid, only one of the attributes can
     *             be non-null.</p>
     */
    export interface DataSetColumnGroup {
        geoSpatialColumnGroup?: outputs.quicksight.DataSetGeoSpatialColumnGroup;
    }

    export interface DataSetColumnLevelPermissionRule {
        columnNames?: string[];
        principals?: string[];
    }

    /**
     * <p>A parameter created in the dataset that could be of any one data type such as string, integer, decimal or datetime.</p>
     */
    export interface DataSetDatasetParameter {
        dateTimeDatasetParameter?: outputs.quicksight.DataSetDateTimeDatasetParameter;
        decimalDatasetParameter?: outputs.quicksight.DataSetDecimalDatasetParameter;
        integerDatasetParameter?: outputs.quicksight.DataSetIntegerDatasetParameter;
        stringDatasetParameter?: outputs.quicksight.DataSetStringDatasetParameter;
    }

    /**
     * <p>A parameter created in the dataset of date time data type.</p>
     */
    export interface DataSetDateTimeDatasetParameter {
        defaultValues?: outputs.quicksight.DataSetDateTimeDatasetParameterDefaultValues;
        id: string;
        name: string;
        timeGranularity?: enums.quicksight.DataSetTimeGranularity;
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>List of default values defined for a given string date time parameter type. Currently only static values are supported.</p>
     */
    export interface DataSetDateTimeDatasetParameterDefaultValues {
        /**
         * <p>List of static default values defined for a given string date time parameter type.</p>
         */
        staticValues?: string[];
    }

    /**
     * <p>A parameter created in the dataset of decimal data type.</p>
     */
    export interface DataSetDecimalDatasetParameter {
        defaultValues?: outputs.quicksight.DataSetDecimalDatasetParameterDefaultValues;
        id: string;
        name: string;
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>List of default values defined for a given decimal dataset parameter type. Currently only static values are supported.</p>
     */
    export interface DataSetDecimalDatasetParameterDefaultValues {
        /**
         * <p>List of static default values defined for a given decimal dataset parameter type.</p>
         */
        staticValues?: number[];
    }

    export interface DataSetFieldFolderMap {
    }

    /**
     * <p>Geospatial column group that denotes a hierarchy.</p>
     */
    export interface DataSetGeoSpatialColumnGroup {
        /**
         * <p>Columns in this hierarchy.</p>
         */
        columns: string[];
        countryCode?: enums.quicksight.DataSetGeoSpatialCountryCode;
        /**
         * <p>A display name for the hierarchy.</p>
         */
        name: string;
    }

    /**
     * <p>Incremental Refresh</p>
     */
    export interface DataSetIncrementalRefresh {
        lookbackWindow?: outputs.quicksight.DataSetLookbackWindow;
    }

    /**
     * <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
     */
    export interface DataSetIngestionWaitPolicy {
        /**
         * <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
         *  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
         */
        ingestionWaitTimeInHours?: number;
        /**
         * <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
         *   Applicable only when DataSetImportMode mode is set to SPICE.</p>
         */
        waitForSpiceIngestion?: boolean;
    }

    /**
     * <p>A parameter created in the dataset of integer data type.</p>
     */
    export interface DataSetIntegerDatasetParameter {
        defaultValues?: outputs.quicksight.DataSetIntegerDatasetParameterDefaultValues;
        id: string;
        name: string;
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>List of default values defined for a given integer dataset parameter type. Currently only static values are supported.</p>
     */
    export interface DataSetIntegerDatasetParameterDefaultValues {
        /**
         * <p>List of static default values defined for a given integer dataset parameter type.</p>
         */
        staticValues?: number[];
    }

    export interface DataSetLogicalTableMap {
    }

    export interface DataSetLookbackWindow {
        /**
         * <p>Column Name</p>
         */
        columnName?: string;
        /**
         * <p>Size</p>
         */
        size?: number;
        sizeUnit?: enums.quicksight.DataSetSizeUnit;
    }

    /**
     * <p>Output column.</p>
     */
    export interface DataSetOutputColumn {
        /**
         * <p>A description for a column.</p>
         */
        description?: string;
        /**
         * <p>A display name for the dataset.</p>
         */
        name?: string;
        subType?: enums.quicksight.DataSetColumnSubDataType;
        type?: enums.quicksight.DataSetColumnDataType;
    }

    export interface DataSetPhysicalTableMap {
    }

    /**
     * <p> Refresh Configuration.</p>
     */
    export interface DataSetRefreshConfiguration {
        incrementalRefresh?: outputs.quicksight.DataSetIncrementalRefresh;
    }

    /**
     * <p>The dataset refresh properties for the dataset.</p>
     */
    export interface DataSetRefreshProperties {
        refreshConfiguration?: outputs.quicksight.DataSetRefreshConfiguration;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DataSetResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *         <ul>
         *             <li>
         *                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across AWS accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    /**
     * <p>The row-level security configuration for the dataset.</p>
     */
    export interface DataSetRowLevelPermissionDataSet {
        /**
         * <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
         */
        arn: string;
        formatVersion?: enums.quicksight.DataSetRowLevelPermissionFormatVersion;
        /**
         * <p>The namespace associated with the row-level permissions dataset.</p>
         */
        namespace?: string;
        permissionPolicy: enums.quicksight.DataSetRowLevelPermissionPolicy;
        status?: enums.quicksight.DataSetStatus;
    }

    /**
     * <p>The configuration of tags on a dataset to set row-level security.</p>
     */
    export interface DataSetRowLevelPermissionTagConfiguration {
        status?: enums.quicksight.DataSetStatus;
        /**
         * <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
         */
        tagRuleConfigurations?: string[][];
        /**
         * <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
         */
        tagRules: outputs.quicksight.DataSetRowLevelPermissionTagRule[];
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DataSetRowLevelPermissionTagRule {
        /**
         * <p>The column name that a tag key is assigned to.</p>
         */
        columnName: string;
        /**
         * <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
         */
        matchAllValue?: string;
        /**
         * <p>The unique key for a tag.</p>
         */
        tagKey: string;
        /**
         * <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
         */
        tagMultiValueDelimiter?: string;
    }

    /**
     * <p>A parameter created in the dataset of string data type.</p>
     */
    export interface DataSetStringDatasetParameter {
        defaultValues?: outputs.quicksight.DataSetStringDatasetParameterDefaultValues;
        id: string;
        name: string;
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>List of default values defined for a given string dataset parameter type. Currently only static values are supported.</p>
     */
    export interface DataSetStringDatasetParameterDefaultValues {
        /**
         * <p>List of static default values defined for a given string dataset parameter type.</p>
         */
        staticValues?: string[];
    }

    /**
     * <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
     *             resource.</p>
     */
    export interface DataSetTag {
        /**
         * <p>Tag key.</p>
         */
        key: string;
        /**
         * <p>Tag value.</p>
         */
        value: string;
    }

    /**
     * <p>The dataset usage configuration for the dataset.</p>
     */
    export interface DataSetUsageConfiguration {
        disableUseAsDirectQuerySource?: boolean;
        disableUseAsImportedSource?: boolean;
    }

    /**
     * <p>Amazon Elasticsearch Service parameters.</p>
     */
    export interface DataSourceAmazonElasticsearchParameters {
        /**
         * <p>The Amazon Elasticsearch Service domain.</p>
         */
        domain: string;
    }

    /**
     * <p>Amazon OpenSearch Service parameters.</p>
     */
    export interface DataSourceAmazonOpenSearchParameters {
        /**
         * <p>The Amazon OpenSearch Service domain.</p>
         */
        domain: string;
    }

    /**
     * <p>Amazon Athena parameters.</p>
     */
    export interface DataSourceAthenaParameters {
        /**
         * <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
         */
        roleArn?: string;
        /**
         * <p>The workgroup that Amazon Athena uses.</p>
         */
        workGroup?: string;
    }

    /**
     * <p>Amazon Aurora parameters.</p>
     */
    export interface DataSourceAuroraParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
     */
    export interface DataSourceAuroraPostgreSqlParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The combination of user name and password that are used as credentials.</p>
     */
    export interface DataSourceCredentialPair {
        /**
         * <p>A set of alternate data source parameters that you want to share for these
         *             credentials. The credentials are applied in tandem with the data source parameters when
         *             you copy a data source by using a create or update request. The API operation compares
         *             the <code>DataSourceParameters</code> structure that's in the request with the
         *             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
         *             structures are an exact match, the request is allowed to use the new data source with
         *             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
         *             null, the <code>DataSourceParameters</code> originally used with these
         *                 <code>Credentials</code> is automatically allowed.</p>
         */
        alternateDataSourceParameters?: outputs.quicksight.DataSourceParameters[];
        /**
         * <p>Password.</p>
         */
        password: string;
        /**
         * <p>User name.</p>
         */
        username: string;
    }

    /**
     * <p>Data source credentials. This is a variant type structure. For this structure to be
     *             valid, only one of the attributes can be non-null.</p>
     */
    export interface DataSourceCredentials {
        /**
         * <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
         *             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
         *             data source in the ARN is used as the credentials for the
         *             <code>DataSourceCredentials</code> structure.</p>
         */
        copySourceArn?: string;
        credentialPair?: outputs.quicksight.DataSourceCredentialPair;
        /**
         * <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
         */
        secretArn?: string;
    }

    /**
     * <p>Databricks parameters.</p>
     */
    export interface DataSourceDatabricksParameters {
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
        /**
         * <p>The HTTP Path of the Databricks data source.</p>
         */
        sqlEndpointPath: string;
    }

    /**
     * <p>Error information for the data source creation or update.</p>
     */
    export interface DataSourceErrorInfo {
        /**
         * <p>Error message.</p>
         */
        message?: string;
        type?: enums.quicksight.DataSourceErrorInfoType;
    }

    /**
     * <p>Amazon S3 manifest file location.</p>
     */
    export interface DataSourceManifestFileLocation {
        /**
         * <p>Amazon S3 bucket.</p>
         */
        bucket: string;
        /**
         * <p>Amazon S3 key that identifies an object.</p>
         */
        key: string;
    }

    /**
     * <p>MariaDB parameters.</p>
     */
    export interface DataSourceMariaDbParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>MySQL parameters.</p>
     */
    export interface DataSourceMySqlParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    export interface DataSourceOracleParameters {
        database: string;
        host: string;
        port: number;
    }

    /**
     * <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
     *             This is a variant type structure. For this structure to be valid, only one of the
     *             attributes can be non-null.</p>
     */
    export interface DataSourceParameters {
        amazonElasticsearchParameters?: outputs.quicksight.DataSourceAmazonElasticsearchParameters;
        amazonOpenSearchParameters?: outputs.quicksight.DataSourceAmazonOpenSearchParameters;
        athenaParameters?: outputs.quicksight.DataSourceAthenaParameters;
        auroraParameters?: outputs.quicksight.DataSourceAuroraParameters;
        auroraPostgreSqlParameters?: outputs.quicksight.DataSourceAuroraPostgreSqlParameters;
        databricksParameters?: outputs.quicksight.DataSourceDatabricksParameters;
        mariaDbParameters?: outputs.quicksight.DataSourceMariaDbParameters;
        mySqlParameters?: outputs.quicksight.DataSourceMySqlParameters;
        oracleParameters?: outputs.quicksight.DataSourceOracleParameters;
        postgreSqlParameters?: outputs.quicksight.DataSourcePostgreSqlParameters;
        prestoParameters?: outputs.quicksight.DataSourcePrestoParameters;
        rdsParameters?: outputs.quicksight.DataSourceRdsParameters;
        redshiftParameters?: outputs.quicksight.DataSourceRedshiftParameters;
        s3Parameters?: outputs.quicksight.DataSourceS3Parameters;
        snowflakeParameters?: outputs.quicksight.DataSourceSnowflakeParameters;
        sparkParameters?: outputs.quicksight.DataSourceSparkParameters;
        sqlServerParameters?: outputs.quicksight.DataSourceSqlServerParameters;
        starburstParameters?: outputs.quicksight.DataSourceStarburstParameters;
        teradataParameters?: outputs.quicksight.DataSourceTeradataParameters;
        trinoParameters?: outputs.quicksight.DataSourceTrinoParameters;
    }

    /**
     * <p>PostgreSQL parameters.</p>
     */
    export interface DataSourcePostgreSqlParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Presto parameters.</p>
     */
    export interface DataSourcePrestoParameters {
        /**
         * <p>Catalog.</p>
         */
        catalog: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Amazon RDS parameters.</p>
     */
    export interface DataSourceRdsParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Instance ID.</p>
         */
        instanceId: string;
    }

    /**
     * <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
     *             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
     *             <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
     */
    export interface DataSourceRedshiftParameters {
        /**
         * <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
         *             provided.</p>
         */
        clusterId?: string;
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
         */
        host?: string;
        /**
         * <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
         */
        port?: number;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DataSourceResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *         <ul>
         *             <li>
         *                 <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                 <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                 <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across AWS accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    /**
     * <p>S3 parameters.</p>
     */
    export interface DataSourceS3Parameters {
        manifestFileLocation: outputs.quicksight.DataSourceManifestFileLocation;
        /**
         * <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
         */
        roleArn?: string;
    }

    /**
     * <p>Snowflake parameters.</p>
     */
    export interface DataSourceSnowflakeParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Warehouse.</p>
         */
        warehouse: string;
    }

    /**
     * <p>Spark parameters.</p>
     */
    export interface DataSourceSparkParameters {
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>SQL Server parameters.</p>
     */
    export interface DataSourceSqlServerParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
     *             underlying data source.</p>
     */
    export interface DataSourceSslProperties {
        /**
         * <p>A Boolean option to control whether SSL should be disabled.</p>
         */
        disableSsl?: boolean;
    }

    /**
     * <p>Starburst parameters.</p>
     */
    export interface DataSourceStarburstParameters {
        /**
         * <p>Catalog.</p>
         */
        catalog: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
        productType?: enums.quicksight.DataSourceStarburstProductType;
    }

    /**
     * <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
     *             resource.</p>
     */
    export interface DataSourceTag {
        /**
         * <p>Tag key.</p>
         */
        key: string;
        /**
         * <p>Tag value.</p>
         */
        value: string;
    }

    /**
     * <p>Teradata parameters.</p>
     */
    export interface DataSourceTeradataParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Trino parameters.</p>
     */
    export interface DataSourceTrinoParameters {
        /**
         * <p>Catalog.</p>
         */
        catalog: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>VPC connection properties.</p>
     */
    export interface DataSourceVpcConnectionProperties {
        /**
         * <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
         */
        vpcConnectionArn: string;
    }

    export interface RefreshScheduleMap {
        refreshType?: enums.quicksight.RefreshScheduleMapRefreshType;
        /**
         * <p>Information about the schedule frequency.</p>
         */
        scheduleFrequency?: outputs.quicksight.RefreshScheduleMapScheduleFrequencyProperties;
        /**
         * <p>An unique identifier for the refresh schedule.</p>
         */
        scheduleId?: string;
        /**
         * <p>The date time after which refresh is to be scheduled</p>
         */
        startAfterDateTime?: string;
    }

    /**
     * <p>Information about the schedule frequency.</p>
     */
    export interface RefreshScheduleMapScheduleFrequencyProperties {
        interval?: enums.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesInterval;
        /**
         * <p>The day scheduled for refresh.</p>
         */
        refreshOnDay?: outputs.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties;
        /**
         * <p>The time of the day for scheduled refresh.</p>
         */
        timeOfTheDay?: string;
        /**
         * <p>The timezone for scheduled refresh.</p>
         */
        timeZone?: string;
    }

    /**
     * <p>The day scheduled for refresh.</p>
     */
    export interface RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
        /**
         * <p>The Day Of Month for scheduled refresh.</p>
         */
        dayOfMonth?: string;
        dayOfWeek?: enums.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek;
    }

    export interface TemplateAggregationFunction {
        attributeAggregationFunction?: outputs.quicksight.TemplateAttributeAggregationFunction;
        categoricalAggregationFunction?: enums.quicksight.TemplateCategoricalAggregationFunction;
        dateAggregationFunction?: enums.quicksight.TemplateDateAggregationFunction;
        numericalAggregationFunction?: outputs.quicksight.TemplateNumericalAggregationFunction;
    }

    export interface TemplateAggregationSortConfiguration {
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        sortDirection: enums.quicksight.TemplateSortDirection;
    }

    export interface TemplateAllSheetsFilterScopeConfiguration {
    }

    export interface TemplateAnalysisDefaults {
        defaultNewSheetConfiguration: outputs.quicksight.TemplateDefaultNewSheetConfiguration;
    }

    export interface TemplateAnchorDateConfiguration {
        anchorOption?: enums.quicksight.TemplateAnchorOption;
        parameterName?: string;
    }

    export interface TemplateArcAxisConfiguration {
        range?: outputs.quicksight.TemplateArcAxisDisplayRange;
        reserveRange?: number;
    }

    export interface TemplateArcAxisDisplayRange {
        max?: number;
        min?: number;
    }

    export interface TemplateArcConfiguration {
        arcAngle?: number;
        arcThickness?: enums.quicksight.TemplateArcThicknessOptions;
    }

    export interface TemplateArcOptions {
        arcThickness?: enums.quicksight.TemplateArcThickness;
    }

    export interface TemplateAssetOptions {
        timezone?: string;
        weekStart?: enums.quicksight.TemplateDayOfTheWeek;
    }

    export interface TemplateAttributeAggregationFunction {
        simpleAttributeAggregation?: enums.quicksight.TemplateSimpleAttributeAggregationFunction;
        valueForMultipleValues?: string;
    }

    export interface TemplateAxisDataOptions {
        dateAxisOptions?: outputs.quicksight.TemplateDateAxisOptions;
        numericAxisOptions?: outputs.quicksight.TemplateNumericAxisOptions;
    }

    export interface TemplateAxisDisplayDataDrivenRange {
    }

    export interface TemplateAxisDisplayMinMaxRange {
        maximum?: number;
        minimum?: number;
    }

    export interface TemplateAxisDisplayOptions {
        axisLineVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        dataOptions?: outputs.quicksight.TemplateAxisDataOptions;
        gridLineVisibility?: enums.quicksight.TemplateVisibility;
        scrollbarOptions?: outputs.quicksight.TemplateScrollBarOptions;
        tickLabelOptions?: outputs.quicksight.TemplateAxisTickLabelOptions;
    }

    export interface TemplateAxisDisplayRange {
        dataDriven?: outputs.quicksight.TemplateAxisDisplayDataDrivenRange;
        minMax?: outputs.quicksight.TemplateAxisDisplayMinMaxRange;
    }

    export interface TemplateAxisLabelOptions {
        applyTo?: outputs.quicksight.TemplateAxisLabelReferenceOptions;
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
    }

    export interface TemplateAxisLabelReferenceOptions {
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
    }

    export interface TemplateAxisLinearScale {
        stepCount?: number;
        stepSize?: number;
    }

    export interface TemplateAxisLogarithmicScale {
        base?: number;
    }

    export interface TemplateAxisScale {
        linear?: outputs.quicksight.TemplateAxisLinearScale;
        logarithmic?: outputs.quicksight.TemplateAxisLogarithmicScale;
    }

    export interface TemplateAxisTickLabelOptions {
        labelOptions?: outputs.quicksight.TemplateLabelOptions;
        rotationAngle?: number;
    }

    export interface TemplateBarChartAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        colors?: outputs.quicksight.TemplateDimensionField[];
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateBarChartConfiguration {
        barsArrangement?: enums.quicksight.TemplateBarsArrangement;
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateBarChartFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        orientation?: enums.quicksight.TemplateBarChartOrientation;
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.TemplateBarChartSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        valueAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateBarChartFieldWells {
        barChartAggregatedFieldWells?: outputs.quicksight.TemplateBarChartAggregatedFieldWells;
    }

    export interface TemplateBarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateBarChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateBarChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateBinCountOptions {
        value?: number;
    }

    export interface TemplateBinWidthOptions {
        binCountLimit?: number;
        value?: number;
    }

    export interface TemplateBodySectionConfiguration {
        content: outputs.quicksight.TemplateBodySectionContent;
        pageBreakConfiguration?: outputs.quicksight.TemplateSectionPageBreakConfiguration;
        sectionId: string;
        style?: outputs.quicksight.TemplateSectionStyle;
    }

    export interface TemplateBodySectionContent {
        layout?: outputs.quicksight.TemplateSectionLayoutConfiguration;
    }

    export interface TemplateBoxPlotAggregatedFieldWells {
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateBoxPlotChartConfiguration {
        boxPlotOptions?: outputs.quicksight.TemplateBoxPlotOptions;
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.TemplateBoxPlotFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        sortConfiguration?: outputs.quicksight.TemplateBoxPlotSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateBoxPlotFieldWells {
        boxPlotAggregatedFieldWells?: outputs.quicksight.TemplateBoxPlotAggregatedFieldWells;
    }

    export interface TemplateBoxPlotOptions {
        allDataPointsVisibility?: enums.quicksight.TemplateVisibility;
        outlierVisibility?: enums.quicksight.TemplateVisibility;
        styleOptions?: outputs.quicksight.TemplateBoxPlotStyleOptions;
    }

    export interface TemplateBoxPlotSortConfiguration {
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        paginationConfiguration?: outputs.quicksight.TemplatePaginationConfiguration;
    }

    export interface TemplateBoxPlotStyleOptions {
        fillStyle?: enums.quicksight.TemplateBoxPlotFillStyle;
    }

    export interface TemplateBoxPlotVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateBoxPlotChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateCalculatedField {
        dataSetIdentifier: string;
        expression: string;
        name: string;
    }

    export interface TemplateCalculatedMeasureField {
        expression: string;
        fieldId: string;
    }

    export interface TemplateCascadingControlConfiguration {
        sourceControls?: outputs.quicksight.TemplateCascadingControlSource[];
    }

    export interface TemplateCascadingControlSource {
        columnToMatch?: outputs.quicksight.TemplateColumnIdentifier;
        sourceSheetControlId?: string;
    }

    export interface TemplateCategoricalDimensionField {
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
        hierarchyId?: string;
    }

    export interface TemplateCategoricalMeasureField {
        aggregationFunction?: enums.quicksight.TemplateCategoricalAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
    }

    export interface TemplateCategoryDrillDownFilter {
        categoryValues: string[];
        column: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateCategoryFilter {
        column: outputs.quicksight.TemplateColumnIdentifier;
        configuration: outputs.quicksight.TemplateCategoryFilterConfiguration;
        filterId: string;
    }

    export interface TemplateCategoryFilterConfiguration {
        customFilterConfiguration?: outputs.quicksight.TemplateCustomFilterConfiguration;
        customFilterListConfiguration?: outputs.quicksight.TemplateCustomFilterListConfiguration;
        filterListConfiguration?: outputs.quicksight.TemplateFilterListConfiguration;
    }

    export interface TemplateChartAxisLabelOptions {
        axisLabelOptions?: outputs.quicksight.TemplateAxisLabelOptions[];
        sortIconVisibility?: enums.quicksight.TemplateVisibility;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateClusterMarker {
        simpleClusterMarker?: outputs.quicksight.TemplateSimpleClusterMarker;
    }

    export interface TemplateClusterMarkerConfiguration {
        clusterMarker?: outputs.quicksight.TemplateClusterMarker;
    }

    export interface TemplateColorScale {
        colorFillType: enums.quicksight.TemplateColorFillType;
        colors: outputs.quicksight.TemplateDataColor[];
        nullValueColor?: outputs.quicksight.TemplateDataColor;
    }

    export interface TemplateColorsConfiguration {
        customColors?: outputs.quicksight.TemplateCustomColor[];
    }

    export interface TemplateColumnConfiguration {
        colorsConfiguration?: outputs.quicksight.TemplateColorsConfiguration;
        column: outputs.quicksight.TemplateColumnIdentifier;
        formatConfiguration?: outputs.quicksight.TemplateFormatConfiguration;
        role?: enums.quicksight.TemplateColumnRole;
    }

    export interface TemplateColumnGroupColumnSchema {
        name?: string;
    }

    export interface TemplateColumnGroupSchema {
        columnGroupColumnSchemaList?: outputs.quicksight.TemplateColumnGroupColumnSchema[];
        name?: string;
    }

    export interface TemplateColumnHierarchy {
        dateTimeHierarchy?: outputs.quicksight.TemplateDateTimeHierarchy;
        explicitHierarchy?: outputs.quicksight.TemplateExplicitHierarchy;
        predefinedHierarchy?: outputs.quicksight.TemplatePredefinedHierarchy;
    }

    export interface TemplateColumnIdentifier {
        columnName: string;
        dataSetIdentifier: string;
    }

    export interface TemplateColumnSchema {
        dataType?: string;
        geographicRole?: string;
        name?: string;
    }

    export interface TemplateColumnSort {
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        direction: enums.quicksight.TemplateSortDirection;
        sortBy: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateColumnTooltipItem {
        aggregation?: outputs.quicksight.TemplateAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        label?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateComboChartAggregatedFieldWells {
        barValues?: outputs.quicksight.TemplateMeasureField[];
        category?: outputs.quicksight.TemplateDimensionField[];
        colors?: outputs.quicksight.TemplateDimensionField[];
        lineValues?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateComboChartConfiguration {
        barDataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        barsArrangement?: enums.quicksight.TemplateBarsArrangement;
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.TemplateComboChartFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        lineDataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.TemplateComboChartSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateComboChartFieldWells {
        comboChartAggregatedFieldWells?: outputs.quicksight.TemplateComboChartAggregatedFieldWells;
    }

    export interface TemplateComboChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateComboChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateComboChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateComparisonConfiguration {
        comparisonFormat?: outputs.quicksight.TemplateComparisonFormatConfiguration;
        comparisonMethod?: enums.quicksight.TemplateComparisonMethod;
    }

    export interface TemplateComparisonFormatConfiguration {
        numberDisplayFormatConfiguration?: outputs.quicksight.TemplateNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.TemplatePercentageDisplayFormatConfiguration;
    }

    export interface TemplateComputation {
        forecast?: outputs.quicksight.TemplateForecastComputation;
        growthRate?: outputs.quicksight.TemplateGrowthRateComputation;
        maximumMinimum?: outputs.quicksight.TemplateMaximumMinimumComputation;
        metricComparison?: outputs.quicksight.TemplateMetricComparisonComputation;
        periodOverPeriod?: outputs.quicksight.TemplatePeriodOverPeriodComputation;
        periodToDate?: outputs.quicksight.TemplatePeriodToDateComputation;
        topBottomMovers?: outputs.quicksight.TemplateTopBottomMoversComputation;
        topBottomRanked?: outputs.quicksight.TemplateTopBottomRankedComputation;
        totalAggregation?: outputs.quicksight.TemplateTotalAggregationComputation;
        uniqueValues?: outputs.quicksight.TemplateUniqueValuesComputation;
    }

    export interface TemplateConditionalFormattingColor {
        gradient?: outputs.quicksight.TemplateConditionalFormattingGradientColor;
        solid?: outputs.quicksight.TemplateConditionalFormattingSolidColor;
    }

    export interface TemplateConditionalFormattingCustomIconCondition {
        color?: string;
        displayConfiguration?: outputs.quicksight.TemplateConditionalFormattingIconDisplayConfiguration;
        expression: string;
        iconOptions: outputs.quicksight.TemplateConditionalFormattingCustomIconOptions;
    }

    export interface TemplateConditionalFormattingCustomIconOptions {
        icon?: enums.quicksight.TemplateIcon;
        unicodeIcon?: string;
    }

    export interface TemplateConditionalFormattingGradientColor {
        color: outputs.quicksight.TemplateGradientColor;
        expression: string;
    }

    export interface TemplateConditionalFormattingIcon {
        customCondition?: outputs.quicksight.TemplateConditionalFormattingCustomIconCondition;
        iconSet?: outputs.quicksight.TemplateConditionalFormattingIconSet;
    }

    export interface TemplateConditionalFormattingIconDisplayConfiguration {
        iconDisplayOption?: enums.quicksight.TemplateConditionalFormattingIconDisplayOption;
    }

    export interface TemplateConditionalFormattingIconSet {
        expression: string;
        iconSetType?: enums.quicksight.TemplateConditionalFormattingIconSetType;
    }

    export interface TemplateConditionalFormattingSolidColor {
        color?: string;
        expression: string;
    }

    export interface TemplateContributionAnalysisDefault {
        contributorDimensions: outputs.quicksight.TemplateColumnIdentifier[];
        measureFieldId: string;
    }

    export interface TemplateCurrencyDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        numberScale?: enums.quicksight.TemplateNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        suffix?: string;
        symbol?: string;
    }

    export interface TemplateCustomActionFilterOperation {
        selectedFieldsConfiguration: outputs.quicksight.TemplateFilterOperationSelectedFieldsConfiguration;
        targetVisualsConfiguration: outputs.quicksight.TemplateFilterOperationTargetVisualsConfiguration;
    }

    export interface TemplateCustomActionNavigationOperation {
        localNavigationConfiguration?: outputs.quicksight.TemplateLocalNavigationConfiguration;
    }

    export interface TemplateCustomActionSetParametersOperation {
        parameterValueConfigurations: outputs.quicksight.TemplateSetParameterValueConfiguration[];
    }

    export interface TemplateCustomActionUrlOperation {
        urlTarget: enums.quicksight.TemplateUrlTargetConfiguration;
        urlTemplate: string;
    }

    export interface TemplateCustomColor {
        color: string;
        fieldValue?: string;
        specialValue?: enums.quicksight.TemplateSpecialValue;
    }

    export interface TemplateCustomContentConfiguration {
        contentType?: enums.quicksight.TemplateCustomContentType;
        contentUrl?: string;
        imageScaling?: enums.quicksight.TemplateCustomContentImageScalingConfiguration;
    }

    export interface TemplateCustomContentVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateCustomContentConfiguration;
        dataSetIdentifier: string;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateCustomFilterConfiguration {
        categoryValue?: string;
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateCustomFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateCustomNarrativeOptions {
        narrative: string;
    }

    export interface TemplateCustomParameterValues {
        dateTimeValues?: string[];
        decimalValues?: number[];
        integerValues?: number[];
        stringValues?: string[];
    }

    export interface TemplateCustomValuesConfiguration {
        customValues: outputs.quicksight.TemplateCustomParameterValues;
        includeNullValue?: boolean;
    }

    export interface TemplateDataBarsOptions {
        fieldId: string;
        negativeColor?: string;
        positiveColor?: string;
    }

    export interface TemplateDataColor {
        color?: string;
        dataValue?: number;
    }

    export interface TemplateDataFieldSeriesItem {
        axisBinding: enums.quicksight.TemplateAxisBinding;
        fieldId: string;
        fieldValue?: string;
        settings?: outputs.quicksight.TemplateLineChartSeriesSettings;
    }

    export interface TemplateDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.TemplateVisibility;
        dataLabelTypes?: outputs.quicksight.TemplateDataLabelType[];
        labelColor?: string;
        labelContent?: enums.quicksight.TemplateDataLabelContent;
        labelFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        measureLabelVisibility?: enums.quicksight.TemplateVisibility;
        overlap?: enums.quicksight.TemplateDataLabelOverlap;
        position?: enums.quicksight.TemplateDataLabelPosition;
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDataLabelType {
        dataPathLabelType?: outputs.quicksight.TemplateDataPathLabelType;
        fieldLabelType?: outputs.quicksight.TemplateFieldLabelType;
        maximumLabelType?: outputs.quicksight.TemplateMaximumLabelType;
        minimumLabelType?: outputs.quicksight.TemplateMinimumLabelType;
        rangeEndsLabelType?: outputs.quicksight.TemplateRangeEndsLabelType;
    }

    export interface TemplateDataPathColor {
        color: string;
        element: outputs.quicksight.TemplateDataPathValue;
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateDataPathLabelType {
        fieldId?: string;
        fieldValue?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDataPathSort {
        direction: enums.quicksight.TemplateSortDirection;
        sortPaths: outputs.quicksight.TemplateDataPathValue[];
    }

    export interface TemplateDataPathType {
        pivotTableDataPathType?: enums.quicksight.TemplatePivotTableDataPathType;
    }

    export interface TemplateDataPathValue {
        dataPathType?: outputs.quicksight.TemplateDataPathType;
        fieldId?: string;
        fieldValue?: string;
    }

    export interface TemplateDataSetConfiguration {
        columnGroupSchemaList?: outputs.quicksight.TemplateColumnGroupSchema[];
        dataSetSchema?: outputs.quicksight.TemplateDataSetSchema;
        placeholder?: string;
    }

    export interface TemplateDataSetReference {
        dataSetArn: string;
        dataSetPlaceholder: string;
    }

    export interface TemplateDataSetSchema {
        columnSchemaList?: outputs.quicksight.TemplateColumnSchema[];
    }

    export interface TemplateDateAxisOptions {
        missingDateVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDateDimensionField {
        column: outputs.quicksight.TemplateColumnIdentifier;
        dateGranularity?: enums.quicksight.TemplateTimeGranularity;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
        hierarchyId?: string;
    }

    export interface TemplateDateMeasureField {
        aggregationFunction?: enums.quicksight.TemplateDateAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
    }

    export interface TemplateDateTimeDefaultValues {
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        staticValues?: string[];
    }

    export interface TemplateDateTimeFormatConfiguration {
        dateTimeFormat?: string;
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateDateTimeHierarchy {
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        hierarchyId: string;
    }

    export interface TemplateDateTimeParameterDeclaration {
        defaultValues?: outputs.quicksight.TemplateDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        name: string;
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
        valueWhenUnset?: outputs.quicksight.TemplateDateTimeValueWhenUnsetConfiguration;
    }

    export interface TemplateDateTimePickerControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateDateTimeValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateDecimalDefaultValues {
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface TemplateDecimalParameterDeclaration {
        defaultValues?: outputs.quicksight.TemplateDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        valueWhenUnset?: outputs.quicksight.TemplateDecimalValueWhenUnsetConfiguration;
    }

    export interface TemplateDecimalPlacesConfiguration {
        decimalPlaces: number;
    }

    export interface TemplateDecimalValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateDefaultFreeFormLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.TemplateFreeFormLayoutCanvasSizeOptions;
    }

    export interface TemplateDefaultGridLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.TemplateGridLayoutCanvasSizeOptions;
    }

    export interface TemplateDefaultInteractiveLayoutConfiguration {
        freeForm?: outputs.quicksight.TemplateDefaultFreeFormLayoutConfiguration;
        grid?: outputs.quicksight.TemplateDefaultGridLayoutConfiguration;
    }

    export interface TemplateDefaultNewSheetConfiguration {
        interactiveLayoutConfiguration?: outputs.quicksight.TemplateDefaultInteractiveLayoutConfiguration;
        paginatedLayoutConfiguration?: outputs.quicksight.TemplateDefaultPaginatedLayoutConfiguration;
        sheetContentType?: enums.quicksight.TemplateSheetContentType;
    }

    export interface TemplateDefaultPaginatedLayoutConfiguration {
        sectionBased?: outputs.quicksight.TemplateDefaultSectionBasedLayoutConfiguration;
    }

    export interface TemplateDefaultSectionBasedLayoutConfiguration {
        canvasSizeOptions: outputs.quicksight.TemplateSectionBasedLayoutCanvasSizeOptions;
    }

    export interface TemplateDestinationParameterValueConfiguration {
        customValuesConfiguration?: outputs.quicksight.TemplateCustomValuesConfiguration;
        selectAllValueOptions?: enums.quicksight.TemplateSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.TemplateColumnIdentifier;
        sourceField?: string;
        sourceParameterName?: string;
    }

    export interface TemplateDimensionField {
        categoricalDimensionField?: outputs.quicksight.TemplateCategoricalDimensionField;
        dateDimensionField?: outputs.quicksight.TemplateDateDimensionField;
        numericalDimensionField?: outputs.quicksight.TemplateNumericalDimensionField;
    }

    export interface TemplateDonutCenterOptions {
        labelVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDonutOptions {
        arcOptions?: outputs.quicksight.TemplateArcOptions;
        donutCenterOptions?: outputs.quicksight.TemplateDonutCenterOptions;
    }

    export interface TemplateDrillDownFilter {
        categoryFilter?: outputs.quicksight.TemplateCategoryDrillDownFilter;
        numericEqualityFilter?: outputs.quicksight.TemplateNumericEqualityDrillDownFilter;
        timeRangeFilter?: outputs.quicksight.TemplateTimeRangeDrillDownFilter;
    }

    export interface TemplateDropDownControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        selectAllOptions?: outputs.quicksight.TemplateListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateDynamicDefaultValue {
        defaultValueColumn: outputs.quicksight.TemplateColumnIdentifier;
        groupNameColumn?: outputs.quicksight.TemplateColumnIdentifier;
        userNameColumn?: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateEmptyVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        dataSetIdentifier: string;
        visualId: string;
    }

    export interface TemplateEntity {
        path?: string;
    }

    export interface TemplateError {
        message?: string;
        type?: enums.quicksight.TemplateErrorType;
        violatedEntities?: outputs.quicksight.TemplateEntity[];
    }

    export interface TemplateExcludePeriodConfiguration {
        amount: number;
        granularity: enums.quicksight.TemplateTimeGranularity;
        status?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateExplicitHierarchy {
        columns: outputs.quicksight.TemplateColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        hierarchyId: string;
    }

    export interface TemplateFieldBasedTooltip {
        aggregationVisibility?: enums.quicksight.TemplateVisibility;
        tooltipFields?: outputs.quicksight.TemplateTooltipItem[];
        tooltipTitleType?: enums.quicksight.TemplateTooltipTitleType;
    }

    export interface TemplateFieldLabelType {
        fieldId?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFieldSeriesItem {
        axisBinding: enums.quicksight.TemplateAxisBinding;
        fieldId: string;
        settings?: outputs.quicksight.TemplateLineChartSeriesSettings;
    }

    export interface TemplateFieldSort {
        direction: enums.quicksight.TemplateSortDirection;
        fieldId: string;
    }

    export interface TemplateFieldSortOptions {
        columnSort?: outputs.quicksight.TemplateColumnSort;
        fieldSort?: outputs.quicksight.TemplateFieldSort;
    }

    export interface TemplateFieldTooltipItem {
        fieldId: string;
        label?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFilledMapAggregatedFieldWells {
        geospatial?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateFilledMapConditionalFormatting {
        conditionalFormattingOptions: outputs.quicksight.TemplateFilledMapConditionalFormattingOption[];
    }

    export interface TemplateFilledMapConditionalFormattingOption {
        shape: outputs.quicksight.TemplateFilledMapShapeConditionalFormatting;
    }

    export interface TemplateFilledMapConfiguration {
        fieldWells?: outputs.quicksight.TemplateFilledMapFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        mapStyleOptions?: outputs.quicksight.TemplateGeospatialMapStyleOptions;
        sortConfiguration?: outputs.quicksight.TemplateFilledMapSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        windowOptions?: outputs.quicksight.TemplateGeospatialWindowOptions;
    }

    export interface TemplateFilledMapFieldWells {
        filledMapAggregatedFieldWells?: outputs.quicksight.TemplateFilledMapAggregatedFieldWells;
    }

    export interface TemplateFilledMapShapeConditionalFormatting {
        fieldId: string;
        format?: outputs.quicksight.TemplateShapeConditionalFormat;
    }

    export interface TemplateFilledMapSortConfiguration {
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateFilledMapVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateFilledMapConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.TemplateFilledMapConditionalFormatting;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateFilter {
        categoryFilter?: outputs.quicksight.TemplateCategoryFilter;
        numericEqualityFilter?: outputs.quicksight.TemplateNumericEqualityFilter;
        numericRangeFilter?: outputs.quicksight.TemplateNumericRangeFilter;
        relativeDatesFilter?: outputs.quicksight.TemplateRelativeDatesFilter;
        timeEqualityFilter?: outputs.quicksight.TemplateTimeEqualityFilter;
        timeRangeFilter?: outputs.quicksight.TemplateTimeRangeFilter;
        topBottomFilter?: outputs.quicksight.TemplateTopBottomFilter;
    }

    export interface TemplateFilterControl {
        dateTimePicker?: outputs.quicksight.TemplateFilterDateTimePickerControl;
        dropdown?: outputs.quicksight.TemplateFilterDropDownControl;
        list?: outputs.quicksight.TemplateFilterListControl;
        relativeDateTime?: outputs.quicksight.TemplateFilterRelativeDateTimeControl;
        slider?: outputs.quicksight.TemplateFilterSliderControl;
        textArea?: outputs.quicksight.TemplateFilterTextAreaControl;
        textField?: outputs.quicksight.TemplateFilterTextFieldControl;
    }

    export interface TemplateFilterDateTimePickerControl {
        displayOptions?: outputs.quicksight.TemplateDateTimePickerControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.TemplateSheetControlDateTimePickerType;
    }

    export interface TemplateFilterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.TemplateDropDownControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateFilterGroup {
        crossDataset: enums.quicksight.TemplateCrossDatasetTypes;
        filterGroupId: string;
        filters: outputs.quicksight.TemplateFilter[];
        scopeConfiguration: outputs.quicksight.TemplateFilterScopeConfiguration;
        status?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateFilterListConfiguration {
        categoryValues?: string[];
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        nullOption?: enums.quicksight.TemplateFilterNullOption;
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateFilterListControl {
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.TemplateListControlDisplayOptions;
        filterControlId: string;
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        sourceFilterId: string;
        title: string;
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateFilterOperationSelectedFieldsConfiguration {
        selectedColumns?: outputs.quicksight.TemplateColumnIdentifier[];
        selectedFieldOptions?: enums.quicksight.TemplateSelectedFieldOptions;
        selectedFields?: string[];
    }

    export interface TemplateFilterOperationTargetVisualsConfiguration {
        sameSheetTargetVisualConfiguration?: outputs.quicksight.TemplateSameSheetTargetVisualConfiguration;
    }

    export interface TemplateFilterRelativeDateTimeControl {
        displayOptions?: outputs.quicksight.TemplateRelativeDateTimeControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface TemplateFilterScopeConfiguration {
        allSheets?: outputs.quicksight.TemplateAllSheetsFilterScopeConfiguration;
        selectedSheets?: outputs.quicksight.TemplateSelectedSheetsFilterScopeConfiguration;
    }

    export interface TemplateFilterSelectableValues {
        values?: string[];
    }

    export interface TemplateFilterSliderControl {
        displayOptions?: outputs.quicksight.TemplateSliderControlDisplayOptions;
        filterControlId: string;
        maximumValue: number;
        minimumValue: number;
        sourceFilterId: string;
        stepSize: number;
        title: string;
        type?: enums.quicksight.TemplateSheetControlSliderType;
    }

    export interface TemplateFilterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.TemplateTextAreaControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface TemplateFilterTextFieldControl {
        displayOptions?: outputs.quicksight.TemplateTextFieldControlDisplayOptions;
        filterControlId: string;
        sourceFilterId: string;
        title: string;
    }

    export interface TemplateFontConfiguration {
        fontColor?: string;
        fontDecoration?: enums.quicksight.TemplateFontDecoration;
        fontSize?: outputs.quicksight.TemplateFontSize;
        fontStyle?: enums.quicksight.TemplateFontStyle;
        fontWeight?: outputs.quicksight.TemplateFontWeight;
    }

    export interface TemplateFontSize {
        relative?: enums.quicksight.TemplateRelativeFontSize;
    }

    export interface TemplateFontWeight {
        name?: enums.quicksight.TemplateFontWeightName;
    }

    export interface TemplateForecastComputation {
        computationId: string;
        customSeasonalityValue?: number;
        lowerBoundary?: number;
        name?: string;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: enums.quicksight.TemplateForecastComputationSeasonality;
        time?: outputs.quicksight.TemplateDimensionField;
        upperBoundary?: number;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateForecastConfiguration {
        forecastProperties?: outputs.quicksight.TemplateTimeBasedForecastProperties;
        scenario?: outputs.quicksight.TemplateForecastScenario;
    }

    export interface TemplateForecastScenario {
        whatIfPointScenario?: outputs.quicksight.TemplateWhatIfPointScenario;
        whatIfRangeScenario?: outputs.quicksight.TemplateWhatIfRangeScenario;
    }

    export interface TemplateFormatConfiguration {
        dateTimeFormatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
        numberFormatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
        stringFormatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
    }

    export interface TemplateFreeFormLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.TemplateFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface TemplateFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.TemplateFreeFormLayoutCanvasSizeOptions;
        elements: outputs.quicksight.TemplateFreeFormLayoutElement[];
    }

    export interface TemplateFreeFormLayoutElement {
        backgroundStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBackgroundStyle;
        borderStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBorderStyle;
        elementId: string;
        elementType: enums.quicksight.TemplateLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        loadingAnimation?: outputs.quicksight.TemplateLoadingAnimation;
        renderingRules?: outputs.quicksight.TemplateSheetElementRenderingRule[];
        selectedBorderStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBorderStyle;
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface TemplateFreeFormLayoutElementBackgroundStyle {
        color?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFreeFormLayoutElementBorderStyle {
        color?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface TemplateFreeFormSectionLayoutConfiguration {
        elements: outputs.quicksight.TemplateFreeFormLayoutElement[];
    }

    export interface TemplateFunnelChartAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateFunnelChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        dataLabelOptions?: outputs.quicksight.TemplateFunnelChartDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateFunnelChartFieldWells;
        sortConfiguration?: outputs.quicksight.TemplateFunnelChartSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateFunnelChartDataLabelOptions {
        categoryLabelVisibility?: enums.quicksight.TemplateVisibility;
        labelColor?: string;
        labelFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        measureDataLabelStyle?: enums.quicksight.TemplateFunnelChartMeasureDataLabelStyle;
        measureLabelVisibility?: enums.quicksight.TemplateVisibility;
        position?: enums.quicksight.TemplateDataLabelPosition;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFunnelChartFieldWells {
        funnelChartAggregatedFieldWells?: outputs.quicksight.TemplateFunnelChartAggregatedFieldWells;
    }

    export interface TemplateFunnelChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateFunnelChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateFunnelChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateGaugeChartArcConditionalFormatting {
        foregroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateGaugeChartConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.TemplateGaugeChartConditionalFormattingOption[];
    }

    export interface TemplateGaugeChartConditionalFormattingOption {
        arc?: outputs.quicksight.TemplateGaugeChartArcConditionalFormatting;
        primaryValue?: outputs.quicksight.TemplateGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface TemplateGaugeChartConfiguration {
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateGaugeChartFieldWells;
        gaugeChartOptions?: outputs.quicksight.TemplateGaugeChartOptions;
        tooltipOptions?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateGaugeChartFieldWells {
        targetValues?: outputs.quicksight.TemplateMeasureField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateGaugeChartOptions {
        arc?: outputs.quicksight.TemplateArcConfiguration;
        arcAxis?: outputs.quicksight.TemplateArcAxisConfiguration;
        comparison?: outputs.quicksight.TemplateComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.TemplatePrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
    }

    export interface TemplateGaugeChartPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateGaugeChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateGaugeChartConfiguration;
        conditionalFormatting?: outputs.quicksight.TemplateGaugeChartConditionalFormatting;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateGeospatialCoordinateBounds {
        east: number;
        north: number;
        south: number;
        west: number;
    }

    export interface TemplateGeospatialHeatmapColorScale {
        colors?: outputs.quicksight.TemplateGeospatialHeatmapDataColor[];
    }

    export interface TemplateGeospatialHeatmapConfiguration {
        heatmapColor?: outputs.quicksight.TemplateGeospatialHeatmapColorScale;
    }

    export interface TemplateGeospatialHeatmapDataColor {
        color: string;
    }

    export interface TemplateGeospatialMapAggregatedFieldWells {
        colors?: outputs.quicksight.TemplateDimensionField[];
        geospatial?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateGeospatialMapConfiguration {
        fieldWells?: outputs.quicksight.TemplateGeospatialMapFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        mapStyleOptions?: outputs.quicksight.TemplateGeospatialMapStyleOptions;
        pointStyleOptions?: outputs.quicksight.TemplateGeospatialPointStyleOptions;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        windowOptions?: outputs.quicksight.TemplateGeospatialWindowOptions;
    }

    export interface TemplateGeospatialMapFieldWells {
        geospatialMapAggregatedFieldWells?: outputs.quicksight.TemplateGeospatialMapAggregatedFieldWells;
    }

    export interface TemplateGeospatialMapStyleOptions {
        baseMapStyle?: enums.quicksight.TemplateBaseMapStyleType;
    }

    export interface TemplateGeospatialMapVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateGeospatialMapConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateGeospatialPointStyleOptions {
        clusterMarkerConfiguration?: outputs.quicksight.TemplateClusterMarkerConfiguration;
        heatmapConfiguration?: outputs.quicksight.TemplateGeospatialHeatmapConfiguration;
        selectedPointStyle?: enums.quicksight.TemplateGeospatialSelectedPointStyle;
    }

    export interface TemplateGeospatialWindowOptions {
        bounds?: outputs.quicksight.TemplateGeospatialCoordinateBounds;
        mapZoomMode?: enums.quicksight.TemplateMapZoomMode;
    }

    export interface TemplateGlobalTableBorderOptions {
        sideSpecificBorder?: outputs.quicksight.TemplateTableSideBorderOptions;
        uniformBorder?: outputs.quicksight.TemplateTableBorderOptions;
    }

    export interface TemplateGradientColor {
        stops?: outputs.quicksight.TemplateGradientStop[];
    }

    export interface TemplateGradientStop {
        color?: string;
        dataValue?: number;
        gradientOffset: number;
    }

    export interface TemplateGridLayoutCanvasSizeOptions {
        screenCanvasSizeOptions?: outputs.quicksight.TemplateGridLayoutScreenCanvasSizeOptions;
    }

    export interface TemplateGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.TemplateGridLayoutCanvasSizeOptions;
        elements: outputs.quicksight.TemplateGridLayoutElement[];
    }

    export interface TemplateGridLayoutElement {
        columnIndex?: number;
        columnSpan: number;
        elementId: string;
        elementType: enums.quicksight.TemplateLayoutElementType;
        rowIndex?: number;
        rowSpan: number;
    }

    export interface TemplateGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        resizeOption: enums.quicksight.TemplateResizeOption;
    }

    export interface TemplateGrowthRateComputation {
        computationId: string;
        name?: string;
        periodSize?: number;
        time?: outputs.quicksight.TemplateDimensionField;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateHeaderFooterSectionConfiguration {
        layout: outputs.quicksight.TemplateSectionLayoutConfiguration;
        sectionId: string;
        style?: outputs.quicksight.TemplateSectionStyle;
    }

    export interface TemplateHeatMapAggregatedFieldWells {
        columns?: outputs.quicksight.TemplateDimensionField[];
        rows?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateHeatMapConfiguration {
        colorScale?: outputs.quicksight.TemplateColorScale;
        columnLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateHeatMapFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        rowLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.TemplateHeatMapSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
    }

    export interface TemplateHeatMapFieldWells {
        heatMapAggregatedFieldWells?: outputs.quicksight.TemplateHeatMapAggregatedFieldWells;
    }

    export interface TemplateHeatMapSortConfiguration {
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        heatMapColumnSort?: outputs.quicksight.TemplateFieldSortOptions[];
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        heatMapRowSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateHeatMapVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateHeatMapConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateHistogramAggregatedFieldWells {
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateHistogramBinOptions {
        binCount?: outputs.quicksight.TemplateBinCountOptions;
        binWidth?: outputs.quicksight.TemplateBinWidthOptions;
        selectedBinType?: enums.quicksight.TemplateHistogramBinType;
        startValue?: number;
    }

    export interface TemplateHistogramConfiguration {
        binOptions?: outputs.quicksight.TemplateHistogramBinOptions;
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateHistogramFieldWells;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
    }

    export interface TemplateHistogramFieldWells {
        histogramAggregatedFieldWells?: outputs.quicksight.TemplateHistogramAggregatedFieldWells;
    }

    export interface TemplateHistogramVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateHistogramConfiguration;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateInsightConfiguration {
        computations?: outputs.quicksight.TemplateComputation[];
        customNarrative?: outputs.quicksight.TemplateCustomNarrativeOptions;
    }

    export interface TemplateInsightVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        dataSetIdentifier: string;
        insightConfiguration?: outputs.quicksight.TemplateInsightConfiguration;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateIntegerDefaultValues {
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        staticValues?: number[];
    }

    export interface TemplateIntegerParameterDeclaration {
        defaultValues?: outputs.quicksight.TemplateIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        valueWhenUnset?: outputs.quicksight.TemplateIntegerValueWhenUnsetConfiguration;
    }

    export interface TemplateIntegerValueWhenUnsetConfiguration {
        customValue?: number;
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateItemsLimitConfiguration {
        itemsLimit?: number;
        otherCategories?: enums.quicksight.TemplateOtherCategories;
    }

    export interface TemplateKpiActualValueConditionalFormatting {
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiComparisonValueConditionalFormatting {
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.TemplateKpiConditionalFormattingOption[];
    }

    export interface TemplateKpiConditionalFormattingOption {
        actualValue?: outputs.quicksight.TemplateKpiActualValueConditionalFormatting;
        comparisonValue?: outputs.quicksight.TemplateKpiComparisonValueConditionalFormatting;
        primaryValue?: outputs.quicksight.TemplateKpiPrimaryValueConditionalFormatting;
        progressBar?: outputs.quicksight.TemplateKpiProgressBarConditionalFormatting;
    }

    export interface TemplateKpiConfiguration {
        fieldWells?: outputs.quicksight.TemplateKpiFieldWells;
        kpiOptions?: outputs.quicksight.TemplateKpiOptions;
        sortConfiguration?: outputs.quicksight.TemplateKpiSortConfiguration;
    }

    export interface TemplateKpiFieldWells {
        targetValues?: outputs.quicksight.TemplateMeasureField[];
        trendGroups?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateKpiOptions {
        comparison?: outputs.quicksight.TemplateComparisonConfiguration;
        primaryValueDisplayType?: enums.quicksight.TemplatePrimaryValueDisplayType;
        primaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        progressBar?: outputs.quicksight.TemplateProgressBarOptions;
        secondaryValue?: outputs.quicksight.TemplateSecondaryValueOptions;
        secondaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        sparkline?: outputs.quicksight.TemplateKpiSparklineOptions;
        trendArrows?: outputs.quicksight.TemplateTrendArrowOptions;
        visualLayoutOptions?: outputs.quicksight.TemplateKpiVisualLayoutOptions;
    }

    export interface TemplateKpiPrimaryValueConditionalFormatting {
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiProgressBarConditionalFormatting {
        foregroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiSortConfiguration {
        trendGroupSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateKpiSparklineOptions {
        color?: string;
        tooltipVisibility?: enums.quicksight.TemplateVisibility;
        type: enums.quicksight.TemplateKpiSparklineType;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateKpiVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateKpiConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        conditionalFormatting?: outputs.quicksight.TemplateKpiConditionalFormatting;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateKpiVisualLayoutOptions {
        standardLayout?: outputs.quicksight.TemplateKpiVisualStandardLayout;
    }

    export interface TemplateKpiVisualStandardLayout {
        type: enums.quicksight.TemplateKpiVisualStandardLayoutType;
    }

    export interface TemplateLabelOptions {
        customLabel?: string;
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLayout {
        configuration: outputs.quicksight.TemplateLayoutConfiguration;
    }

    export interface TemplateLayoutConfiguration {
        freeFormLayout?: outputs.quicksight.TemplateFreeFormLayoutConfiguration;
        gridLayout?: outputs.quicksight.TemplateGridLayoutConfiguration;
        sectionBasedLayout?: outputs.quicksight.TemplateSectionBasedLayoutConfiguration;
    }

    export interface TemplateLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        position?: enums.quicksight.TemplateLegendPosition;
        title?: outputs.quicksight.TemplateLabelOptions;
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplateLineChartAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        colors?: outputs.quicksight.TemplateDimensionField[];
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateLineChartConfiguration {
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        defaultSeriesSettings?: outputs.quicksight.TemplateLineChartDefaultSeriesSettings;
        fieldWells?: outputs.quicksight.TemplateLineChartFieldWells;
        forecastConfigurations?: outputs.quicksight.TemplateForecastConfiguration[];
        legend?: outputs.quicksight.TemplateLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateLineSeriesAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        secondaryYAxisDisplayOptions?: outputs.quicksight.TemplateLineSeriesAxisDisplayOptions;
        secondaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        series?: outputs.quicksight.TemplateSeriesItem[];
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.TemplateLineChartSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        type?: enums.quicksight.TemplateLineChartType;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
    }

    export interface TemplateLineChartDefaultSeriesSettings {
        axisBinding?: enums.quicksight.TemplateAxisBinding;
        lineStyleSettings?: outputs.quicksight.TemplateLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.TemplateLineChartMarkerStyleSettings;
    }

    export interface TemplateLineChartFieldWells {
        lineChartAggregatedFieldWells?: outputs.quicksight.TemplateLineChartAggregatedFieldWells;
    }

    export interface TemplateLineChartLineStyleSettings {
        lineInterpolation?: enums.quicksight.TemplateLineInterpolation;
        lineStyle?: enums.quicksight.TemplateLineChartLineStyle;
        lineVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface TemplateLineChartMarkerStyleSettings {
        markerColor?: string;
        markerShape?: enums.quicksight.TemplateLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        markerVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLineChartSeriesSettings {
        lineStyleSettings?: outputs.quicksight.TemplateLineChartLineStyleSettings;
        markerStyleSettings?: outputs.quicksight.TemplateLineChartMarkerStyleSettings;
    }

    export interface TemplateLineChartSortConfiguration {
        categoryItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        colorItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateLineChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateLineChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateLineSeriesAxisDisplayOptions {
        axisOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        missingDataConfigurations?: outputs.quicksight.TemplateMissingDataConfiguration[];
    }

    export interface TemplateListControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        searchOptions?: outputs.quicksight.TemplateListControlSearchOptions;
        selectAllOptions?: outputs.quicksight.TemplateListControlSelectAllOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateListControlSearchOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateListControlSelectAllOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLoadingAnimation {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLocalNavigationConfiguration {
        targetSheetId: string;
    }

    export interface TemplateLongFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface TemplateMappedDataSetParameter {
        dataSetIdentifier: string;
        dataSetParameterName: string;
    }

    export interface TemplateMaximumLabelType {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateMaximumMinimumComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.TemplateDimensionField;
        type: enums.quicksight.TemplateMaximumMinimumComputationType;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateMeasureField {
        calculatedMeasureField?: outputs.quicksight.TemplateCalculatedMeasureField;
        categoricalMeasureField?: outputs.quicksight.TemplateCategoricalMeasureField;
        dateMeasureField?: outputs.quicksight.TemplateDateMeasureField;
        numericalMeasureField?: outputs.quicksight.TemplateNumericalMeasureField;
    }

    export interface TemplateMetricComparisonComputation {
        computationId: string;
        fromValue?: outputs.quicksight.TemplateMeasureField;
        name?: string;
        targetValue?: outputs.quicksight.TemplateMeasureField;
        time?: outputs.quicksight.TemplateDimensionField;
    }

    export interface TemplateMinimumLabelType {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateMissingDataConfiguration {
        treatmentOption?: enums.quicksight.TemplateMissingDataTreatmentOption;
    }

    export interface TemplateNegativeValueConfiguration {
        displayMode: enums.quicksight.TemplateNegativeValueDisplayMode;
    }

    export interface TemplateNullValueFormatConfiguration {
        nullString: string;
    }

    export interface TemplateNumberDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        numberScale?: enums.quicksight.TemplateNumberScale;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface TemplateNumberFormatConfiguration {
        formatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateNumericAxisOptions {
        range?: outputs.quicksight.TemplateAxisDisplayRange;
        scale?: outputs.quicksight.TemplateAxisScale;
    }

    export interface TemplateNumericEqualityDrillDownFilter {
        column: outputs.quicksight.TemplateColumnIdentifier;
        value: number;
    }

    export interface TemplateNumericEqualityFilter {
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        filterId: string;
        matchOperator: enums.quicksight.TemplateNumericEqualityMatchOperator;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        parameterName?: string;
        selectAllOptions?: enums.quicksight.TemplateNumericFilterSelectAllOptions;
        value?: number;
    }

    export interface TemplateNumericFormatConfiguration {
        currencyDisplayFormatConfiguration?: outputs.quicksight.TemplateCurrencyDisplayFormatConfiguration;
        numberDisplayFormatConfiguration?: outputs.quicksight.TemplateNumberDisplayFormatConfiguration;
        percentageDisplayFormatConfiguration?: outputs.quicksight.TemplatePercentageDisplayFormatConfiguration;
    }

    export interface TemplateNumericRangeFilter {
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        rangeMaximum?: outputs.quicksight.TemplateNumericRangeFilterValue;
        rangeMinimum?: outputs.quicksight.TemplateNumericRangeFilterValue;
        selectAllOptions?: enums.quicksight.TemplateNumericFilterSelectAllOptions;
    }

    export interface TemplateNumericRangeFilterValue {
        parameter?: string;
        staticValue?: number;
    }

    export interface TemplateNumericSeparatorConfiguration {
        decimalSeparator?: enums.quicksight.TemplateNumericSeparatorSymbol;
        thousandsSeparator?: outputs.quicksight.TemplateThousandSeparatorOptions;
    }

    export interface TemplateNumericalAggregationFunction {
        percentileAggregation?: outputs.quicksight.TemplatePercentileAggregation;
        simpleNumericalAggregation?: enums.quicksight.TemplateSimpleNumericalAggregationFunction;
    }

    export interface TemplateNumericalDimensionField {
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
        hierarchyId?: string;
    }

    export interface TemplateNumericalMeasureField {
        aggregationFunction?: outputs.quicksight.TemplateNumericalAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
    }

    export interface TemplatePaginationConfiguration {
        pageNumber: number;
        pageSize: number;
    }

    export interface TemplatePanelConfiguration {
        backgroundColor?: string;
        backgroundVisibility?: enums.quicksight.TemplateVisibility;
        borderColor?: string;
        borderStyle?: enums.quicksight.TemplatePanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        borderVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        gutterVisibility?: enums.quicksight.TemplateVisibility;
        title?: outputs.quicksight.TemplatePanelTitleOptions;
    }

    export interface TemplatePanelTitleOptions {
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        horizontalTextAlignment?: enums.quicksight.TemplateHorizontalTextAlignment;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateParameterControl {
        dateTimePicker?: outputs.quicksight.TemplateParameterDateTimePickerControl;
        dropdown?: outputs.quicksight.TemplateParameterDropDownControl;
        list?: outputs.quicksight.TemplateParameterListControl;
        slider?: outputs.quicksight.TemplateParameterSliderControl;
        textArea?: outputs.quicksight.TemplateParameterTextAreaControl;
        textField?: outputs.quicksight.TemplateParameterTextFieldControl;
    }

    export interface TemplateParameterDateTimePickerControl {
        displayOptions?: outputs.quicksight.TemplateDateTimePickerControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface TemplateParameterDeclaration {
        dateTimeParameterDeclaration?: outputs.quicksight.TemplateDateTimeParameterDeclaration;
        decimalParameterDeclaration?: outputs.quicksight.TemplateDecimalParameterDeclaration;
        integerParameterDeclaration?: outputs.quicksight.TemplateIntegerParameterDeclaration;
        stringParameterDeclaration?: outputs.quicksight.TemplateStringParameterDeclaration;
    }

    export interface TemplateParameterDropDownControl {
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.TemplateDropDownControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.TemplateParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateParameterListControl {
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        displayOptions?: outputs.quicksight.TemplateListControlDisplayOptions;
        parameterControlId: string;
        selectableValues?: outputs.quicksight.TemplateParameterSelectableValues;
        sourceParameterName: string;
        title: string;
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateParameterSelectableValues {
        linkToDataSetColumn?: outputs.quicksight.TemplateColumnIdentifier;
        values?: string[];
    }

    export interface TemplateParameterSliderControl {
        displayOptions?: outputs.quicksight.TemplateSliderControlDisplayOptions;
        maximumValue: number;
        minimumValue: number;
        parameterControlId: string;
        sourceParameterName: string;
        stepSize: number;
        title: string;
    }

    export interface TemplateParameterTextAreaControl {
        delimiter?: string;
        displayOptions?: outputs.quicksight.TemplateTextAreaControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface TemplateParameterTextFieldControl {
        displayOptions?: outputs.quicksight.TemplateTextFieldControlDisplayOptions;
        parameterControlId: string;
        sourceParameterName: string;
        title: string;
    }

    export interface TemplatePercentVisibleRange {
        from?: number;
        to?: number;
    }

    export interface TemplatePercentageDisplayFormatConfiguration {
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        prefix?: string;
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        suffix?: string;
    }

    export interface TemplatePercentileAggregation {
        percentileValue?: number;
    }

    export interface TemplatePeriodOverPeriodComputation {
        computationId: string;
        name?: string;
        time?: outputs.quicksight.TemplateDimensionField;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplatePeriodToDateComputation {
        computationId: string;
        name?: string;
        periodTimeGranularity?: enums.quicksight.TemplateTimeGranularity;
        time?: outputs.quicksight.TemplateDimensionField;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplatePieChartAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplatePieChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        donutOptions?: outputs.quicksight.TemplateDonutOptions;
        fieldWells?: outputs.quicksight.TemplatePieChartFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        sortConfiguration?: outputs.quicksight.TemplatePieChartSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplatePieChartFieldWells {
        pieChartAggregatedFieldWells?: outputs.quicksight.TemplatePieChartAggregatedFieldWells;
    }

    export interface TemplatePieChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplatePieChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplatePieChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplatePivotFieldSortOptions {
        fieldId: string;
        sortBy: outputs.quicksight.TemplatePivotTableSortBy;
    }

    export interface TemplatePivotTableAggregatedFieldWells {
        columns?: outputs.quicksight.TemplateDimensionField[];
        rows?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplatePivotTableCellConditionalFormatting {
        fieldId: string;
        scope?: outputs.quicksight.TemplatePivotTableConditionalFormattingScope;
        scopes?: outputs.quicksight.TemplatePivotTableConditionalFormattingScope[];
        textFormat?: outputs.quicksight.TemplateTextConditionalFormat;
    }

    export interface TemplatePivotTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.TemplatePivotTableConditionalFormattingOption[];
    }

    export interface TemplatePivotTableConditionalFormattingOption {
        cell?: outputs.quicksight.TemplatePivotTableCellConditionalFormatting;
    }

    export interface TemplatePivotTableConditionalFormattingScope {
        role?: enums.quicksight.TemplatePivotTableConditionalFormattingScopeRole;
    }

    export interface TemplatePivotTableConfiguration {
        fieldOptions?: outputs.quicksight.TemplatePivotTableFieldOptions;
        fieldWells?: outputs.quicksight.TemplatePivotTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.TemplatePivotTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.TemplatePivotTableSortConfiguration;
        tableOptions?: outputs.quicksight.TemplatePivotTableOptions;
        totalOptions?: outputs.quicksight.TemplatePivotTableTotalOptions;
    }

    export interface TemplatePivotTableDataPathOption {
        dataPathList: outputs.quicksight.TemplateDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplatePivotTableFieldCollapseStateOption {
        state?: enums.quicksight.TemplatePivotTableFieldCollapseState;
        target: outputs.quicksight.TemplatePivotTableFieldCollapseStateTarget;
    }

    export interface TemplatePivotTableFieldCollapseStateTarget {
        fieldDataPathValues?: outputs.quicksight.TemplateDataPathValue[];
        fieldId?: string;
    }

    export interface TemplatePivotTableFieldOption {
        customLabel?: string;
        fieldId: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableFieldOptions {
        collapseStateOptions?: outputs.quicksight.TemplatePivotTableFieldCollapseStateOption[];
        dataPathOptions?: outputs.quicksight.TemplatePivotTableDataPathOption[];
        selectedFieldOptions?: outputs.quicksight.TemplatePivotTableFieldOption[];
    }

    export interface TemplatePivotTableFieldSubtotalOptions {
        fieldId?: string;
    }

    export interface TemplatePivotTableFieldWells {
        pivotTableAggregatedFieldWells?: outputs.quicksight.TemplatePivotTableAggregatedFieldWells;
    }

    export interface TemplatePivotTableOptions {
        cellStyle?: outputs.quicksight.TemplateTableCellStyle;
        collapsedRowDimensionsVisibility?: enums.quicksight.TemplateVisibility;
        columnHeaderStyle?: outputs.quicksight.TemplateTableCellStyle;
        columnNamesVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        metricPlacement?: enums.quicksight.TemplatePivotTableMetricPlacement;
        rowAlternateColorOptions?: outputs.quicksight.TemplateRowAlternateColorOptions;
        rowFieldNamesStyle?: outputs.quicksight.TemplateTableCellStyle;
        rowHeaderStyle?: outputs.quicksight.TemplateTableCellStyle;
        rowsLabelOptions?: outputs.quicksight.TemplatePivotTableRowsLabelOptions;
        rowsLayout?: enums.quicksight.TemplatePivotTableRowsLayout;
        singleMetricVisibility?: enums.quicksight.TemplateVisibility;
        toggleButtonsVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.TemplateVisibility;
        verticalOverflowVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableRowsLabelOptions {
        customLabel?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableSortBy {
        column?: outputs.quicksight.TemplateColumnSort;
        dataPath?: outputs.quicksight.TemplateDataPathSort;
        field?: outputs.quicksight.TemplateFieldSort;
    }

    export interface TemplatePivotTableSortConfiguration {
        fieldSortOptions?: outputs.quicksight.TemplatePivotFieldSortOptions[];
    }

    export interface TemplatePivotTableTotalOptions {
        columnSubtotalOptions?: outputs.quicksight.TemplateSubtotalOptions;
        columnTotalOptions?: outputs.quicksight.TemplatePivotTotalOptions;
        rowSubtotalOptions?: outputs.quicksight.TemplateSubtotalOptions;
        rowTotalOptions?: outputs.quicksight.TemplatePivotTotalOptions;
    }

    export interface TemplatePivotTableVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplatePivotTableConfiguration;
        conditionalFormatting?: outputs.quicksight.TemplatePivotTableConditionalFormatting;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplatePivotTotalOptions {
        customLabel?: string;
        metricHeaderCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        placement?: enums.quicksight.TemplateTableTotalsPlacement;
        scrollStatus?: enums.quicksight.TemplateTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.TemplateTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        valueCellStyle?: outputs.quicksight.TemplateTableCellStyle;
    }

    export interface TemplatePredefinedHierarchy {
        columns: outputs.quicksight.TemplateColumnIdentifier[];
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        hierarchyId: string;
    }

    export interface TemplateProgressBarOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateRadarChartAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        color?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateRadarChartAreaStyleSettings {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateRadarChartConfiguration {
        alternateBandColorsVisibility?: enums.quicksight.TemplateVisibility;
        alternateBandEvenColor?: string;
        alternateBandOddColor?: string;
        axesRangeScale?: enums.quicksight.TemplateRadarChartAxesRangeScale;
        baseSeriesSettings?: outputs.quicksight.TemplateRadarChartSeriesSettings;
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        colorAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.TemplateRadarChartFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        shape?: enums.quicksight.TemplateRadarChartShape;
        sortConfiguration?: outputs.quicksight.TemplateRadarChartSortConfiguration;
        startAngle?: number;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateRadarChartFieldWells {
        radarChartAggregatedFieldWells?: outputs.quicksight.TemplateRadarChartAggregatedFieldWells;
    }

    export interface TemplateRadarChartSeriesSettings {
        areaStyleSettings?: outputs.quicksight.TemplateRadarChartAreaStyleSettings;
    }

    export interface TemplateRadarChartSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateRadarChartVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateRadarChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateRangeEndsLabelType {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateReferenceLine {
        dataConfiguration: outputs.quicksight.TemplateReferenceLineDataConfiguration;
        labelConfiguration?: outputs.quicksight.TemplateReferenceLineLabelConfiguration;
        status?: enums.quicksight.TemplateWidgetStatus;
        styleConfiguration?: outputs.quicksight.TemplateReferenceLineStyleConfiguration;
    }

    export interface TemplateReferenceLineCustomLabelConfiguration {
        customLabel: string;
    }

    export interface TemplateReferenceLineDataConfiguration {
        axisBinding?: enums.quicksight.TemplateAxisBinding;
        dynamicConfiguration?: outputs.quicksight.TemplateReferenceLineDynamicDataConfiguration;
        seriesType?: enums.quicksight.TemplateReferenceLineSeriesType;
        staticConfiguration?: outputs.quicksight.TemplateReferenceLineStaticDataConfiguration;
    }

    export interface TemplateReferenceLineDynamicDataConfiguration {
        calculation: outputs.quicksight.TemplateNumericalAggregationFunction;
        column: outputs.quicksight.TemplateColumnIdentifier;
        measureAggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
    }

    export interface TemplateReferenceLineLabelConfiguration {
        customLabelConfiguration?: outputs.quicksight.TemplateReferenceLineCustomLabelConfiguration;
        fontColor?: string;
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        horizontalPosition?: enums.quicksight.TemplateReferenceLineLabelHorizontalPosition;
        valueLabelConfiguration?: outputs.quicksight.TemplateReferenceLineValueLabelConfiguration;
        verticalPosition?: enums.quicksight.TemplateReferenceLineLabelVerticalPosition;
    }

    export interface TemplateReferenceLineStaticDataConfiguration {
        value: number;
    }

    export interface TemplateReferenceLineStyleConfiguration {
        color?: string;
        pattern?: enums.quicksight.TemplateReferenceLinePatternType;
    }

    export interface TemplateReferenceLineValueLabelConfiguration {
        formatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
        relativePosition?: enums.quicksight.TemplateReferenceLineValueLabelRelativePosition;
    }

    export interface TemplateRelativeDateTimeControlDisplayOptions {
        dateTimeFormat?: string;
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateRelativeDatesFilter {
        anchorDateConfiguration: outputs.quicksight.TemplateAnchorDateConfiguration;
        column: outputs.quicksight.TemplateColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.TemplateExcludePeriodConfiguration;
        filterId: string;
        minimumGranularity?: enums.quicksight.TemplateTimeGranularity;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        parameterName?: string;
        relativeDateType: enums.quicksight.TemplateRelativeDateType;
        relativeDateValue?: number;
        timeGranularity: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateResourcePermission {
        actions: string[];
        principal: string;
    }

    export interface TemplateRollingDateConfiguration {
        dataSetIdentifier?: string;
        expression: string;
    }

    export interface TemplateRowAlternateColorOptions {
        rowAlternateColors?: string[];
        status?: enums.quicksight.TemplateWidgetStatus;
        usePrimaryBackgroundColor?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateSameSheetTargetVisualConfiguration {
        targetVisualOptions?: enums.quicksight.TemplateTargetVisualOptions;
        targetVisuals?: string[];
    }

    export interface TemplateSankeyDiagramAggregatedFieldWells {
        destination?: outputs.quicksight.TemplateDimensionField[];
        source?: outputs.quicksight.TemplateDimensionField[];
        weight?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateSankeyDiagramChartConfiguration {
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateSankeyDiagramFieldWells;
        sortConfiguration?: outputs.quicksight.TemplateSankeyDiagramSortConfiguration;
    }

    export interface TemplateSankeyDiagramFieldWells {
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.TemplateSankeyDiagramAggregatedFieldWells;
    }

    export interface TemplateSankeyDiagramSortConfiguration {
        destinationItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        sourceItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        weightSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateSankeyDiagramVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateSankeyDiagramChartConfiguration;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateScatterPlotCategoricallyAggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        label?: outputs.quicksight.TemplateDimensionField[];
        size?: outputs.quicksight.TemplateMeasureField[];
        xAxis?: outputs.quicksight.TemplateMeasureField[];
        yAxis?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateScatterPlotConfiguration {
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateScatterPlotFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        yAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        yAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
    }

    export interface TemplateScatterPlotFieldWells {
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.TemplateScatterPlotCategoricallyAggregatedFieldWells;
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.TemplateScatterPlotUnaggregatedFieldWells;
    }

    export interface TemplateScatterPlotUnaggregatedFieldWells {
        category?: outputs.quicksight.TemplateDimensionField[];
        label?: outputs.quicksight.TemplateDimensionField[];
        size?: outputs.quicksight.TemplateMeasureField[];
        xAxis?: outputs.quicksight.TemplateDimensionField[];
        yAxis?: outputs.quicksight.TemplateDimensionField[];
    }

    export interface TemplateScatterPlotVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateScatterPlotConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateScrollBarOptions {
        visibility?: enums.quicksight.TemplateVisibility;
        visibleRange?: outputs.quicksight.TemplateVisibleRangeOptions;
    }

    export interface TemplateSecondaryValueOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSectionAfterPageBreak {
        status?: enums.quicksight.TemplateSectionPageBreakStatus;
    }

    export interface TemplateSectionBasedLayoutCanvasSizeOptions {
        paperCanvasSizeOptions?: outputs.quicksight.TemplateSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface TemplateSectionBasedLayoutConfiguration {
        bodySections: outputs.quicksight.TemplateBodySectionConfiguration[];
        canvasSizeOptions: outputs.quicksight.TemplateSectionBasedLayoutCanvasSizeOptions;
        footerSections: outputs.quicksight.TemplateHeaderFooterSectionConfiguration[];
        headerSections: outputs.quicksight.TemplateHeaderFooterSectionConfiguration[];
    }

    export interface TemplateSectionBasedLayoutPaperCanvasSizeOptions {
        paperMargin?: outputs.quicksight.TemplateSpacing;
        paperOrientation?: enums.quicksight.TemplatePaperOrientation;
        paperSize?: enums.quicksight.TemplatePaperSize;
    }

    export interface TemplateSectionLayoutConfiguration {
        freeFormLayout: outputs.quicksight.TemplateFreeFormSectionLayoutConfiguration;
    }

    export interface TemplateSectionPageBreakConfiguration {
        after?: outputs.quicksight.TemplateSectionAfterPageBreak;
    }

    export interface TemplateSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        padding?: outputs.quicksight.TemplateSpacing;
    }

    export interface TemplateSelectedSheetsFilterScopeConfiguration {
        sheetVisualScopingConfigurations?: outputs.quicksight.TemplateSheetVisualScopingConfiguration[];
    }

    export interface TemplateSeriesItem {
        dataFieldSeriesItem?: outputs.quicksight.TemplateDataFieldSeriesItem;
        fieldSeriesItem?: outputs.quicksight.TemplateFieldSeriesItem;
    }

    export interface TemplateSetParameterValueConfiguration {
        destinationParameterName: string;
        value: outputs.quicksight.TemplateDestinationParameterValueConfiguration;
    }

    export interface TemplateShapeConditionalFormat {
        backgroundColor: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateSheet {
        name?: string;
        sheetId?: string;
    }

    export interface TemplateSheetControlInfoIconLabelOptions {
        infoIconText?: string;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSheetControlLayout {
        configuration: outputs.quicksight.TemplateSheetControlLayoutConfiguration;
    }

    export interface TemplateSheetControlLayoutConfiguration {
        gridLayout?: outputs.quicksight.TemplateGridLayoutConfiguration;
    }

    export interface TemplateSheetDefinition {
        contentType?: enums.quicksight.TemplateSheetContentType;
        description?: string;
        filterControls?: outputs.quicksight.TemplateFilterControl[];
        layouts?: outputs.quicksight.TemplateLayout[];
        name?: string;
        parameterControls?: outputs.quicksight.TemplateParameterControl[];
        sheetControlLayouts?: outputs.quicksight.TemplateSheetControlLayout[];
        sheetId: string;
        textBoxes?: outputs.quicksight.TemplateSheetTextBox[];
        title?: string;
        visuals?: outputs.quicksight.TemplateVisual[];
    }

    export interface TemplateSheetElementConfigurationOverrides {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSheetElementRenderingRule {
        configurationOverrides: outputs.quicksight.TemplateSheetElementConfigurationOverrides;
        expression: string;
    }

    export interface TemplateSheetTextBox {
        content?: string;
        sheetTextBoxId: string;
    }

    export interface TemplateSheetVisualScopingConfiguration {
        scope: enums.quicksight.TemplateFilterVisualScope;
        sheetId: string;
        visualIds?: string[];
    }

    export interface TemplateShortFormatText {
        plainText?: string;
        richText?: string;
    }

    export interface TemplateSimpleClusterMarker {
        color?: string;
    }

    export interface TemplateSliderControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateSmallMultiplesAxisProperties {
        placement?: enums.quicksight.TemplateSmallMultiplesAxisPlacement;
        scale?: enums.quicksight.TemplateSmallMultiplesAxisScale;
    }

    export interface TemplateSmallMultiplesOptions {
        maxVisibleColumns?: number;
        maxVisibleRows?: number;
        panelConfiguration?: outputs.quicksight.TemplatePanelConfiguration;
        xAxis?: outputs.quicksight.TemplateSmallMultiplesAxisProperties;
        yAxis?: outputs.quicksight.TemplateSmallMultiplesAxisProperties;
    }

    export interface TemplateSourceAnalysis {
        arn: string;
        dataSetReferences: outputs.quicksight.TemplateDataSetReference[];
    }

    export interface TemplateSourceEntity {
        sourceAnalysis?: outputs.quicksight.TemplateSourceAnalysis;
        sourceTemplate?: outputs.quicksight.TemplateSourceTemplate;
    }

    export interface TemplateSourceTemplate {
        arn: string;
    }

    export interface TemplateSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface TemplateStringDefaultValues {
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        staticValues?: string[];
    }

    export interface TemplateStringFormatConfiguration {
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        numericFormatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateStringParameterDeclaration {
        defaultValues?: outputs.quicksight.TemplateStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        name: string;
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        valueWhenUnset?: outputs.quicksight.TemplateStringValueWhenUnsetConfiguration;
    }

    export interface TemplateStringValueWhenUnsetConfiguration {
        customValue?: string;
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateSubtotalOptions {
        customLabel?: string;
        fieldLevel?: enums.quicksight.TemplatePivotTableSubtotalLevel;
        fieldLevelOptions?: outputs.quicksight.TemplatePivotTableFieldSubtotalOptions[];
        metricHeaderCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        styleTargets?: outputs.quicksight.TemplateTableStyleTarget[];
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        valueCellStyle?: outputs.quicksight.TemplateTableCellStyle;
    }

    export interface TemplateTableAggregatedFieldWells {
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateTableBorderOptions {
        color?: string;
        style?: enums.quicksight.TemplateTableBorderStyle;
        thickness?: number;
    }

    export interface TemplateTableCellConditionalFormatting {
        fieldId: string;
        textFormat?: outputs.quicksight.TemplateTextConditionalFormat;
    }

    export interface TemplateTableCellImageSizingConfiguration {
        tableCellImageScalingConfiguration?: enums.quicksight.TemplateTableCellImageScalingConfiguration;
    }

    export interface TemplateTableCellStyle {
        backgroundColor?: string;
        border?: outputs.quicksight.TemplateGlobalTableBorderOptions;
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        height?: number;
        horizontalTextAlignment?: enums.quicksight.TemplateHorizontalTextAlignment;
        textWrap?: enums.quicksight.TemplateTextWrap;
        verticalTextAlignment?: enums.quicksight.TemplateVerticalTextAlignment;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTableConditionalFormatting {
        conditionalFormattingOptions?: outputs.quicksight.TemplateTableConditionalFormattingOption[];
    }

    export interface TemplateTableConditionalFormattingOption {
        cell?: outputs.quicksight.TemplateTableCellConditionalFormatting;
        row?: outputs.quicksight.TemplateTableRowConditionalFormatting;
    }

    export interface TemplateTableConfiguration {
        fieldOptions?: outputs.quicksight.TemplateTableFieldOptions;
        fieldWells?: outputs.quicksight.TemplateTableFieldWells;
        paginatedReportOptions?: outputs.quicksight.TemplateTablePaginatedReportOptions;
        sortConfiguration?: outputs.quicksight.TemplateTableSortConfiguration;
        tableInlineVisualizations?: outputs.quicksight.TemplateTableInlineVisualization[];
        tableOptions?: outputs.quicksight.TemplateTableOptions;
        totalOptions?: outputs.quicksight.TemplateTotalOptions;
    }

    export interface TemplateTableFieldCustomIconContent {
        icon?: enums.quicksight.TemplateTableFieldIconSetType;
    }

    export interface TemplateTableFieldCustomTextContent {
        fontConfiguration: outputs.quicksight.TemplateFontConfiguration;
        value?: string;
    }

    export interface TemplateTableFieldImageConfiguration {
        sizingOptions?: outputs.quicksight.TemplateTableCellImageSizingConfiguration;
    }

    export interface TemplateTableFieldLinkConfiguration {
        content: outputs.quicksight.TemplateTableFieldLinkContentConfiguration;
        target: enums.quicksight.TemplateUrlTargetConfiguration;
    }

    export interface TemplateTableFieldLinkContentConfiguration {
        customIconContent?: outputs.quicksight.TemplateTableFieldCustomIconContent;
        customTextContent?: outputs.quicksight.TemplateTableFieldCustomTextContent;
    }

    export interface TemplateTableFieldOption {
        customLabel?: string;
        fieldId: string;
        urlStyling?: outputs.quicksight.TemplateTableFieldUrlConfiguration;
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplateTableFieldOptions {
        order?: string[];
        pinnedFieldOptions?: outputs.quicksight.TemplateTablePinnedFieldOptions;
        selectedFieldOptions?: outputs.quicksight.TemplateTableFieldOption[];
    }

    export interface TemplateTableFieldUrlConfiguration {
        imageConfiguration?: outputs.quicksight.TemplateTableFieldImageConfiguration;
        linkConfiguration?: outputs.quicksight.TemplateTableFieldLinkConfiguration;
    }

    export interface TemplateTableFieldWells {
        tableAggregatedFieldWells?: outputs.quicksight.TemplateTableAggregatedFieldWells;
        tableUnaggregatedFieldWells?: outputs.quicksight.TemplateTableUnaggregatedFieldWells;
    }

    export interface TemplateTableInlineVisualization {
        dataBars?: outputs.quicksight.TemplateDataBarsOptions;
    }

    export interface TemplateTableOptions {
        cellStyle?: outputs.quicksight.TemplateTableCellStyle;
        headerStyle?: outputs.quicksight.TemplateTableCellStyle;
        orientation?: enums.quicksight.TemplateTableOrientation;
        rowAlternateColorOptions?: outputs.quicksight.TemplateRowAlternateColorOptions;
    }

    export interface TemplateTablePaginatedReportOptions {
        overflowColumnHeaderVisibility?: enums.quicksight.TemplateVisibility;
        verticalOverflowVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTablePinnedFieldOptions {
        pinnedLeftFields?: string[];
    }

    export interface TemplateTableRowConditionalFormatting {
        backgroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateTableSideBorderOptions {
        bottom?: outputs.quicksight.TemplateTableBorderOptions;
        innerHorizontal?: outputs.quicksight.TemplateTableBorderOptions;
        innerVertical?: outputs.quicksight.TemplateTableBorderOptions;
        left?: outputs.quicksight.TemplateTableBorderOptions;
        right?: outputs.quicksight.TemplateTableBorderOptions;
        top?: outputs.quicksight.TemplateTableBorderOptions;
    }

    export interface TemplateTableSortConfiguration {
        paginationConfiguration?: outputs.quicksight.TemplatePaginationConfiguration;
        rowSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateTableStyleTarget {
        cellType: enums.quicksight.TemplateStyledCellType;
    }

    export interface TemplateTableUnaggregatedFieldWells {
        values?: outputs.quicksight.TemplateUnaggregatedField[];
    }

    export interface TemplateTableVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateTableConfiguration;
        conditionalFormatting?: outputs.quicksight.TemplateTableConditionalFormatting;
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateTag {
        key: string;
        value: string;
    }

    export interface TemplateTextAreaControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.TemplateTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateTextConditionalFormat {
        backgroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateTextControlPlaceholderOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTextFieldControlDisplayOptions {
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        placeholderOptions?: outputs.quicksight.TemplateTextControlPlaceholderOptions;
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateThousandSeparatorOptions {
        symbol?: enums.quicksight.TemplateNumericSeparatorSymbol;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTimeBasedForecastProperties {
        lowerBoundary?: number;
        periodsBackward?: number;
        periodsForward?: number;
        predictionInterval?: number;
        seasonality?: number;
        upperBoundary?: number;
    }

    export interface TemplateTimeEqualityFilter {
        column: outputs.quicksight.TemplateColumnIdentifier;
        filterId: string;
        parameterName?: string;
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
        value?: string;
    }

    export interface TemplateTimeRangeDrillDownFilter {
        column: outputs.quicksight.TemplateColumnIdentifier;
        rangeMaximum: string;
        rangeMinimum: string;
        timeGranularity: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTimeRangeFilter {
        column: outputs.quicksight.TemplateColumnIdentifier;
        excludePeriodConfiguration?: outputs.quicksight.TemplateExcludePeriodConfiguration;
        filterId: string;
        includeMaximum?: boolean;
        includeMinimum?: boolean;
        nullOption: enums.quicksight.TemplateFilterNullOption;
        rangeMaximumValue?: outputs.quicksight.TemplateTimeRangeFilterValue;
        rangeMinimumValue?: outputs.quicksight.TemplateTimeRangeFilterValue;
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTimeRangeFilterValue {
        parameter?: string;
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        staticValue?: string;
    }

    export interface TemplateTooltipItem {
        columnTooltipItem?: outputs.quicksight.TemplateColumnTooltipItem;
        fieldTooltipItem?: outputs.quicksight.TemplateFieldTooltipItem;
    }

    export interface TemplateTooltipOptions {
        fieldBasedTooltip?: outputs.quicksight.TemplateFieldBasedTooltip;
        selectedTooltipType?: enums.quicksight.TemplateSelectedTooltipType;
        tooltipVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTopBottomFilter {
        aggregationSortConfigurations: outputs.quicksight.TemplateAggregationSortConfiguration[];
        column: outputs.quicksight.TemplateColumnIdentifier;
        filterId: string;
        limit?: number;
        parameterName?: string;
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTopBottomMoversComputation {
        category?: outputs.quicksight.TemplateDimensionField;
        computationId: string;
        moverSize?: number;
        name?: string;
        sortOrder?: enums.quicksight.TemplateTopBottomSortOrder;
        time?: outputs.quicksight.TemplateDimensionField;
        type: enums.quicksight.TemplateTopBottomComputationType;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTopBottomRankedComputation {
        category?: outputs.quicksight.TemplateDimensionField;
        computationId: string;
        name?: string;
        resultSize?: number;
        type: enums.quicksight.TemplateTopBottomComputationType;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTotalAggregationComputation {
        computationId: string;
        name?: string;
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTotalAggregationFunction {
        simpleTotalAggregationFunction?: enums.quicksight.TemplateSimpleTotalAggregationFunction;
    }

    export interface TemplateTotalAggregationOption {
        fieldId: string;
        totalAggregationFunction: outputs.quicksight.TemplateTotalAggregationFunction;
    }

    export interface TemplateTotalOptions {
        customLabel?: string;
        placement?: enums.quicksight.TemplateTableTotalsPlacement;
        scrollStatus?: enums.quicksight.TemplateTableTotalsScrollStatus;
        totalAggregationOptions?: outputs.quicksight.TemplateTotalAggregationOption[];
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        totalsVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTreeMapAggregatedFieldWells {
        colors?: outputs.quicksight.TemplateMeasureField[];
        groups?: outputs.quicksight.TemplateDimensionField[];
        sizes?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateTreeMapConfiguration {
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        colorScale?: outputs.quicksight.TemplateColorScale;
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateTreeMapFieldWells;
        groupLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        legend?: outputs.quicksight.TemplateLegendOptions;
        sizeLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.TemplateTreeMapSortConfiguration;
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
    }

    export interface TemplateTreeMapFieldWells {
        treeMapAggregatedFieldWells?: outputs.quicksight.TemplateTreeMapAggregatedFieldWells;
    }

    export interface TemplateTreeMapSortConfiguration {
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        treeMapSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateTreeMapVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateTreeMapConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateTrendArrowOptions {
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateUnaggregatedField {
        column: outputs.quicksight.TemplateColumnIdentifier;
        fieldId: string;
        formatConfiguration?: outputs.quicksight.TemplateFormatConfiguration;
    }

    export interface TemplateUniqueValuesComputation {
        category?: outputs.quicksight.TemplateDimensionField;
        computationId: string;
        name?: string;
    }

    export interface TemplateValidationStrategy {
        mode: enums.quicksight.TemplateValidationStrategyMode;
    }

    export interface TemplateVersion {
        createdTime?: string;
        dataSetConfigurations?: outputs.quicksight.TemplateDataSetConfiguration[];
        description?: string;
        errors?: outputs.quicksight.TemplateError[];
        sheets?: outputs.quicksight.TemplateSheet[];
        sourceEntityArn?: string;
        status?: enums.quicksight.TemplateResourceStatus;
        themeArn?: string;
        versionNumber?: number;
    }

    export interface TemplateVersionDefinition {
        analysisDefaults?: outputs.quicksight.TemplateAnalysisDefaults;
        calculatedFields?: outputs.quicksight.TemplateCalculatedField[];
        columnConfigurations?: outputs.quicksight.TemplateColumnConfiguration[];
        dataSetConfigurations: outputs.quicksight.TemplateDataSetConfiguration[];
        filterGroups?: outputs.quicksight.TemplateFilterGroup[];
        options?: outputs.quicksight.TemplateAssetOptions;
        parameterDeclarations?: outputs.quicksight.TemplateParameterDeclaration[];
        sheets?: outputs.quicksight.TemplateSheetDefinition[];
    }

    export interface TemplateVisibleRangeOptions {
        percentRange?: outputs.quicksight.TemplatePercentVisibleRange;
    }

    export interface TemplateVisual {
        barChartVisual?: outputs.quicksight.TemplateBarChartVisual;
        boxPlotVisual?: outputs.quicksight.TemplateBoxPlotVisual;
        comboChartVisual?: outputs.quicksight.TemplateComboChartVisual;
        customContentVisual?: outputs.quicksight.TemplateCustomContentVisual;
        emptyVisual?: outputs.quicksight.TemplateEmptyVisual;
        filledMapVisual?: outputs.quicksight.TemplateFilledMapVisual;
        funnelChartVisual?: outputs.quicksight.TemplateFunnelChartVisual;
        gaugeChartVisual?: outputs.quicksight.TemplateGaugeChartVisual;
        geospatialMapVisual?: outputs.quicksight.TemplateGeospatialMapVisual;
        heatMapVisual?: outputs.quicksight.TemplateHeatMapVisual;
        histogramVisual?: outputs.quicksight.TemplateHistogramVisual;
        insightVisual?: outputs.quicksight.TemplateInsightVisual;
        kpiVisual?: outputs.quicksight.TemplateKpiVisual;
        lineChartVisual?: outputs.quicksight.TemplateLineChartVisual;
        pieChartVisual?: outputs.quicksight.TemplatePieChartVisual;
        pivotTableVisual?: outputs.quicksight.TemplatePivotTableVisual;
        radarChartVisual?: outputs.quicksight.TemplateRadarChartVisual;
        sankeyDiagramVisual?: outputs.quicksight.TemplateSankeyDiagramVisual;
        scatterPlotVisual?: outputs.quicksight.TemplateScatterPlotVisual;
        tableVisual?: outputs.quicksight.TemplateTableVisual;
        treeMapVisual?: outputs.quicksight.TemplateTreeMapVisual;
        waterfallVisual?: outputs.quicksight.TemplateWaterfallVisual;
        wordCloudVisual?: outputs.quicksight.TemplateWordCloudVisual;
    }

    export interface TemplateVisualCustomAction {
        actionOperations: outputs.quicksight.TemplateVisualCustomActionOperation[];
        customActionId: string;
        name: string;
        status?: enums.quicksight.TemplateWidgetStatus;
        trigger: enums.quicksight.TemplateVisualCustomActionTrigger;
    }

    export interface TemplateVisualCustomActionOperation {
        filterOperation?: outputs.quicksight.TemplateCustomActionFilterOperation;
        navigationOperation?: outputs.quicksight.TemplateCustomActionNavigationOperation;
        setParametersOperation?: outputs.quicksight.TemplateCustomActionSetParametersOperation;
        urlOperation?: outputs.quicksight.TemplateCustomActionUrlOperation;
    }

    export interface TemplateVisualPalette {
        chartColor?: string;
        colorMap?: outputs.quicksight.TemplateDataPathColor[];
    }

    export interface TemplateVisualSubtitleLabelOptions {
        formatText?: outputs.quicksight.TemplateLongFormatText;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateVisualTitleLabelOptions {
        formatText?: outputs.quicksight.TemplateShortFormatText;
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateWaterfallChartAggregatedFieldWells {
        breakdowns?: outputs.quicksight.TemplateDimensionField[];
        categories?: outputs.quicksight.TemplateDimensionField[];
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateWaterfallChartConfiguration {
        categoryAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        categoryAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        fieldWells?: outputs.quicksight.TemplateWaterfallChartFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        sortConfiguration?: outputs.quicksight.TemplateWaterfallChartSortConfiguration;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        waterfallChartOptions?: outputs.quicksight.TemplateWaterfallChartOptions;
    }

    export interface TemplateWaterfallChartFieldWells {
        waterfallChartAggregatedFieldWells?: outputs.quicksight.TemplateWaterfallChartAggregatedFieldWells;
    }

    export interface TemplateWaterfallChartOptions {
        totalBarLabel?: string;
    }

    export interface TemplateWaterfallChartSortConfiguration {
        breakdownItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateWaterfallVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateWaterfallChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface TemplateWhatIfPointScenario {
        date: string;
        value: number;
    }

    export interface TemplateWhatIfRangeScenario {
        endDate: string;
        startDate: string;
        value: number;
    }

    export interface TemplateWordCloudAggregatedFieldWells {
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        size?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateWordCloudChartConfiguration {
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        fieldWells?: outputs.quicksight.TemplateWordCloudFieldWells;
        sortConfiguration?: outputs.quicksight.TemplateWordCloudSortConfiguration;
        wordCloudOptions?: outputs.quicksight.TemplateWordCloudOptions;
    }

    export interface TemplateWordCloudFieldWells {
        wordCloudAggregatedFieldWells?: outputs.quicksight.TemplateWordCloudAggregatedFieldWells;
    }

    export interface TemplateWordCloudOptions {
        cloudLayout?: enums.quicksight.TemplateWordCloudCloudLayout;
        maximumStringLength?: number;
        wordCasing?: enums.quicksight.TemplateWordCloudWordCasing;
        wordOrientation?: enums.quicksight.TemplateWordCloudWordOrientation;
        wordPadding?: enums.quicksight.TemplateWordCloudWordPadding;
        wordScaling?: enums.quicksight.TemplateWordCloudWordScaling;
    }

    export interface TemplateWordCloudSortConfiguration {
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateWordCloudVisual {
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        chartConfiguration?: outputs.quicksight.TemplateWordCloudChartConfiguration;
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        visualId: string;
    }

    export interface ThemeBorderStyle {
        show?: boolean;
    }

    export interface ThemeConfiguration {
        dataColorPalette?: outputs.quicksight.ThemeDataColorPalette;
        sheet?: outputs.quicksight.ThemeSheetStyle;
        typography?: outputs.quicksight.ThemeTypography;
        uiColorPalette?: outputs.quicksight.ThemeUiColorPalette;
    }

    export interface ThemeDataColorPalette {
        colors?: string[];
        emptyFillColor?: string;
        minMaxGradient?: string[];
    }

    export interface ThemeError {
        message?: string;
        type?: enums.quicksight.ThemeErrorType;
    }

    export interface ThemeFont {
        fontFamily?: string;
    }

    export interface ThemeGutterStyle {
        show?: boolean;
    }

    export interface ThemeMarginStyle {
        show?: boolean;
    }

    export interface ThemeResourcePermission {
        actions: string[];
        principal: string;
    }

    export interface ThemeSheetStyle {
        tile?: outputs.quicksight.ThemeTileStyle;
        tileLayout?: outputs.quicksight.ThemeTileLayoutStyle;
    }

    export interface ThemeTag {
        key: string;
        value: string;
    }

    export interface ThemeTileLayoutStyle {
        gutter?: outputs.quicksight.ThemeGutterStyle;
        margin?: outputs.quicksight.ThemeMarginStyle;
    }

    export interface ThemeTileStyle {
        border?: outputs.quicksight.ThemeBorderStyle;
    }

    export interface ThemeTypography {
        fontFamilies?: outputs.quicksight.ThemeFont[];
    }

    export interface ThemeUiColorPalette {
        accent?: string;
        accentForeground?: string;
        danger?: string;
        dangerForeground?: string;
        dimension?: string;
        dimensionForeground?: string;
        measure?: string;
        measureForeground?: string;
        primaryBackground?: string;
        primaryForeground?: string;
        secondaryBackground?: string;
        secondaryForeground?: string;
        success?: string;
        successForeground?: string;
        warning?: string;
        warningForeground?: string;
    }

    export interface ThemeVersion {
        arn?: string;
        baseThemeId?: string;
        configuration?: outputs.quicksight.ThemeConfiguration;
        createdTime?: string;
        description?: string;
        errors?: outputs.quicksight.ThemeError[];
        status?: enums.quicksight.ThemeResourceStatus;
        versionNumber?: number;
    }

    export interface TopicAggregationFunctionParameters {
    }

    export interface TopicCalculatedField {
        aggregation?: enums.quicksight.TopicDefaultAggregation;
        allowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        calculatedFieldDescription?: string;
        calculatedFieldName: string;
        calculatedFieldSynonyms?: string[];
        cellValueSynonyms?: outputs.quicksight.TopicCellValueSynonym[];
        columnDataRole?: enums.quicksight.TopicColumnDataRole;
        comparativeOrder?: outputs.quicksight.TopicComparativeOrder;
        defaultFormatting?: outputs.quicksight.TopicDefaultFormatting;
        expression: string;
        isIncludedInTopic?: boolean;
        neverAggregateInFilter?: boolean;
        nonAdditive?: boolean;
        notAllowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        semanticType?: outputs.quicksight.TopicSemanticType;
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicCategoryFilter {
        categoryFilterFunction?: enums.quicksight.TopicCategoryFilterFunction;
        categoryFilterType?: enums.quicksight.TopicCategoryFilterType;
        constant?: outputs.quicksight.TopicCategoryFilterConstant;
        inverse?: boolean;
    }

    export interface TopicCategoryFilterConstant {
        collectiveConstant?: outputs.quicksight.TopicCollectiveConstant;
        constantType?: enums.quicksight.TopicConstantType;
        singularConstant?: string;
    }

    export interface TopicCellValueSynonym {
        cellValue?: string;
        synonyms?: string[];
    }

    export interface TopicCollectiveConstant {
        valueList?: string[];
    }

    export interface TopicColumn {
        aggregation?: enums.quicksight.TopicDefaultAggregation;
        allowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        cellValueSynonyms?: outputs.quicksight.TopicCellValueSynonym[];
        columnDataRole?: enums.quicksight.TopicColumnDataRole;
        columnDescription?: string;
        columnFriendlyName?: string;
        columnName: string;
        columnSynonyms?: string[];
        comparativeOrder?: outputs.quicksight.TopicComparativeOrder;
        defaultFormatting?: outputs.quicksight.TopicDefaultFormatting;
        isIncludedInTopic?: boolean;
        neverAggregateInFilter?: boolean;
        nonAdditive?: boolean;
        notAllowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        semanticType?: outputs.quicksight.TopicSemanticType;
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicComparativeOrder {
        specifedOrder?: string[];
        treatUndefinedSpecifiedValues?: enums.quicksight.TopicUndefinedSpecifiedValueType;
        useOrdering?: enums.quicksight.TopicColumnOrderingType;
    }

    export interface TopicDataAggregation {
        datasetRowDateGranularity?: enums.quicksight.TopicTimeGranularity;
        defaultDateColumnName?: string;
    }

    export interface TopicDatasetMetadata {
        calculatedFields?: outputs.quicksight.TopicCalculatedField[];
        columns?: outputs.quicksight.TopicColumn[];
        dataAggregation?: outputs.quicksight.TopicDataAggregation;
        datasetArn: string;
        datasetDescription?: string;
        datasetName?: string;
        filters?: outputs.quicksight.TopicFilter[];
        namedEntities?: outputs.quicksight.TopicNamedEntity[];
    }

    export interface TopicDateRangeFilter {
        constant?: outputs.quicksight.TopicRangeFilterConstant;
        inclusive?: boolean;
    }

    export interface TopicDefaultFormatting {
        displayFormat?: enums.quicksight.TopicDisplayFormat;
        displayFormatOptions?: outputs.quicksight.TopicDisplayFormatOptions;
    }

    export interface TopicDisplayFormatOptions {
        blankCellFormat?: string;
        currencySymbol?: string;
        dateFormat?: string;
        decimalSeparator?: enums.quicksight.TopicNumericSeparatorSymbol;
        fractionDigits?: number;
        groupingSeparator?: string;
        negativeFormat?: outputs.quicksight.TopicNegativeFormat;
        prefix?: string;
        suffix?: string;
        unitScaler?: enums.quicksight.TopicNumberScale;
        useBlankCellFormat?: boolean;
        useGrouping?: boolean;
    }

    export interface TopicFilter {
        categoryFilter?: outputs.quicksight.TopicCategoryFilter;
        dateRangeFilter?: outputs.quicksight.TopicDateRangeFilter;
        filterClass?: enums.quicksight.TopicFilterClass;
        filterDescription?: string;
        filterName: string;
        filterSynonyms?: string[];
        filterType?: enums.quicksight.TopicNamedFilterType;
        numericEqualityFilter?: outputs.quicksight.TopicNumericEqualityFilter;
        numericRangeFilter?: outputs.quicksight.TopicNumericRangeFilter;
        operandFieldName: string;
        relativeDateFilter?: outputs.quicksight.TopicRelativeDateFilter;
    }

    export interface TopicNamedEntity {
        definition?: outputs.quicksight.TopicNamedEntityDefinition[];
        entityDescription?: string;
        entityName: string;
        entitySynonyms?: string[];
        semanticEntityType?: outputs.quicksight.TopicSemanticEntityType;
    }

    export interface TopicNamedEntityDefinition {
        fieldName?: string;
        metric?: outputs.quicksight.TopicNamedEntityDefinitionMetric;
        propertyName?: string;
        propertyRole?: enums.quicksight.TopicPropertyRole;
        propertyUsage?: enums.quicksight.TopicPropertyUsage;
    }

    export interface TopicNamedEntityDefinitionMetric {
        aggregation?: enums.quicksight.TopicNamedEntityAggType;
        aggregationFunctionParameters?: outputs.quicksight.TopicAggregationFunctionParameters;
    }

    export interface TopicNegativeFormat {
        prefix?: string;
        suffix?: string;
    }

    export interface TopicNumericEqualityFilter {
        aggregation?: enums.quicksight.TopicNamedFilterAggType;
        constant?: outputs.quicksight.TopicSingularFilterConstant;
    }

    export interface TopicNumericRangeFilter {
        aggregation?: enums.quicksight.TopicNamedFilterAggType;
        constant?: outputs.quicksight.TopicRangeFilterConstant;
        inclusive?: boolean;
    }

    export interface TopicRangeConstant {
        maximum?: string;
        minimum?: string;
    }

    export interface TopicRangeFilterConstant {
        constantType?: enums.quicksight.TopicConstantType;
        rangeConstant?: outputs.quicksight.TopicRangeConstant;
    }

    export interface TopicRelativeDateFilter {
        constant?: outputs.quicksight.TopicSingularFilterConstant;
        relativeDateFilterFunction?: enums.quicksight.TopicRelativeDateFilterFunction;
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicSemanticEntityType {
        subTypeName?: string;
        typeName?: string;
        typeParameters?: outputs.quicksight.TopicTypeParameters;
    }

    export interface TopicSemanticType {
        falseyCellValue?: string;
        falseyCellValueSynonyms?: string[];
        subTypeName?: string;
        truthyCellValue?: string;
        truthyCellValueSynonyms?: string[];
        typeName?: string;
        typeParameters?: outputs.quicksight.TopicTypeParameters;
    }

    export interface TopicSingularFilterConstant {
        constantType?: enums.quicksight.TopicConstantType;
        singularConstant?: string;
    }

    export interface TopicTypeParameters {
    }

    export interface VpcConnectionNetworkInterface {
        availabilityZone?: string;
        errorMessage?: string;
        networkInterfaceId?: string;
        status?: enums.quicksight.VpcConnectionNetworkInterfaceStatus;
        subnetId?: string;
    }

    export interface VpcConnectionTag {
        key: string;
        value: string;
    }

}

export namespace ram {
    export interface PermissionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ResourceShareTag {
        key: string;
        value: string;
    }

}

export namespace rds {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface CustomDbEngineVersionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
     */
    export interface DbClusterDbClusterRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon RDS API Reference.
         */
        featureName?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
         */
        roleArn: string;
    }

    export interface DbClusterEndpoint {
        /**
         * The connection endpoint for the DB cluster.
         */
        address?: string;
        /**
         * The port number that will accept connections on this DB cluster.
         */
        port?: string;
    }

    export interface DbClusterMasterUserSecret {
        /**
         * The AWS KMS key identifier that is used to encrypt the secret.
         */
        kmsKeyId?: string;
        /**
         * The Amazon Resource Name (ARN) of the secret.
         */
        secretArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbClusterParameterGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    export interface DbClusterReadEndpoint {
        /**
         * The reader endpoint for the DB cluster.
         */
        address?: string;
    }

    /**
     * The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
     */
    export interface DbClusterScalingConfiguration {
        /**
         * A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).
         */
        autoPause?: boolean;
        /**
         * The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
         * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
         * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
         * The maximum capacity must be greater than or equal to the minimum capacity.
         */
        maxCapacity?: number;
        /**
         * The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
         * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
         * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
         * The minimum capacity must be less than or equal to the maximum capacity.
         */
        minCapacity?: number;
        /**
         * The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action.
         * The default is 300.
         */
        secondsBeforeTimeout?: number;
        /**
         * The time, in seconds, before an Aurora DB cluster in serverless mode is paused.
         */
        secondsUntilAutoPause?: number;
        /**
         * The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.
         * ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.
         * RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.
         *
         * For more information, see Autoscaling for Aurora Serverless v1 in the Amazon Aurora User Guide.
         */
        timeoutAction?: string;
    }

    /**
     * Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
     */
    export interface DbClusterServerlessV2ScalingConfiguration {
        /**
         * The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
         */
        maxCapacity?: number;
        /**
         * The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
         */
        minCapacity?: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbClusterTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    export interface DbInstanceCertificateDetails {
        /**
         * The CA identifier of the CA certificate used for the DB instance's server certificate.
         */
        caIdentifier?: string;
        /**
         * The expiration date of the DB instance’s server certificate.
         */
        validTill?: string;
    }

    export interface DbInstanceDbInstanceRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. IAM roles that are associated with a DB instance grant permission for the DB instance to access other AWS services on your behalf.
         */
        featureName: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
         */
        roleArn: string;
    }

    export interface DbInstanceEndpoint {
        /**
         * Specifies the DNS address of the DB instance.
         */
        address?: string;
        /**
         * Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
         */
        hostedZoneId?: string;
        /**
         * Specifies the port that the database engine is listening on.
         */
        port?: string;
    }

    export interface DbInstanceMasterUserSecret {
        /**
         * The AWS KMS key identifier that is used to encrypt the secret.
         */
        kmsKeyId?: string;
        /**
         * The Amazon Resource Name (ARN) of the secret.
         */
        secretArn?: string;
    }

    export interface DbInstanceProcessorFeature {
        /**
         * The name of the processor feature. Valid names are coreCount and threadsPerCore.
         */
        name?: enums.rds.DbInstanceProcessorFeatureName;
        /**
         * The value of a processor feature name.
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbInstanceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbParameterGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    export interface DbProxyAuthFormat {
        /**
         * The type of authentication that the proxy uses for connections from the proxy to the underlying database. 
         */
        authScheme?: enums.rds.DbProxyAuthFormatAuthScheme;
        /**
         * The type of authentication the proxy uses for connections from clients.
         */
        clientPasswordAuthType?: enums.rds.DbProxyAuthFormatClientPasswordAuthType;
        /**
         * A user-specified description about the authentication used by a proxy to log in as a specific database user. 
         */
        description?: string;
        /**
         * Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
         */
        iamAuth?: enums.rds.DbProxyAuthFormatIamAuth;
        /**
         * The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager. 
         */
        secretArn?: string;
    }

    export interface DbProxyEndpointTagFormat {
        key?: string;
        value?: string;
    }

    export interface DbProxyTagFormat {
        key?: string;
        value?: string;
    }

    export interface DbProxyTargetGroupConnectionPoolConfigurationInfoFormat {
        /**
         * The number of seconds for a proxy to wait for a connection to become available in the connection pool.
         */
        connectionBorrowTimeout?: number;
        /**
         * One or more SQL statements for the proxy to run when opening each new database connection.
         */
        initQuery?: string;
        /**
         * The maximum size of the connection pool for each target in a target group.
         */
        maxConnectionsPercent?: number;
        /**
         * Controls how actively the proxy closes idle database connections in the connection pool.
         */
        maxIdleConnectionsPercent?: number;
        /**
         * Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.
         */
        sessionPinningFilters?: string[];
    }

    export interface DbSecurityGroupIngress {
        cidrip?: string;
        ec2SecurityGroupId?: string;
        ec2SecurityGroupName?: string;
        ec2SecurityGroupOwnerId?: string;
    }

    export interface DbSecurityGroupTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DbSubnetGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface EventSubscriptionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * An optional set of non-secret key–value pairs that contains additional contextual information about the data.
     */
    export interface IntegrationEncryptionContextMap {
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IntegrationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

    /**
     * The OptionConfiguration property type specifies an individual option, and its settings, within an AWS::RDS::OptionGroup resource.
     */
    export interface OptionGroupOptionConfiguration {
        /**
         * A list of DBSecurityGroupMembership name strings used for this option.
         */
        dbSecurityGroupMemberships?: string[];
        /**
         * The configuration of options to include in a group.
         */
        optionName: string;
        /**
         * The option settings to include in an option group.
         */
        optionSettings?: outputs.rds.OptionGroupOptionSetting[];
        /**
         * The version for the option.
         */
        optionVersion?: string;
        /**
         * The optional port for the option.
         */
        port?: number;
        /**
         * A list of VpcSecurityGroupMembership name strings used for this option.
         */
        vpcSecurityGroupMemberships?: string[];
    }

    /**
     * The OptionSetting property type specifies the value for an option within an OptionSetting property.
     */
    export interface OptionGroupOptionSetting {
        /**
         * The name of the option that has settings that you can set.
         */
        name?: string;
        /**
         * The current value of the option setting.
         */
        value?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface OptionGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value?: string;
    }

}

export namespace redshift {
    export interface ClusterEndpoint {
        address?: string;
        port?: string;
    }

    export interface ClusterLoggingProperties {
        bucketName?: string;
        s3KeyPrefix?: string;
    }

    export interface ClusterParameterGroupParameter {
        /**
         * The name of the parameter.
         */
        parameterName: string;
        /**
         * The value of the parameter. If `ParameterName` is `wlm_json_configuration`, then the maximum size of `ParameterValue` is 8000 characters.
         */
        parameterValue: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ClusterParameterGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ClusterSecurityGroupTag {
        key: string;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ClusterSubnetGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ClusterTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Describes a network interface.
     */
    export interface EndpointAccessNetworkInterface {
        /**
         * The Availability Zone.
         */
        availabilityZone?: string;
        /**
         * The network interface identifier.
         */
        networkInterfaceId?: string;
        /**
         * The IPv4 address of the network interface within the subnet.
         */
        privateIpAddress?: string;
        /**
         * The subnet identifier.
         */
        subnetId?: string;
    }

    /**
     * Describes the members of a VPC security group.
     */
    export interface EndpointAccessVpcSecurityGroup {
        /**
         * The status of the VPC security group.
         */
        status?: string;
        /**
         * The identifier of the VPC security group.
         */
        vpcSecurityGroupId?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface EventSubscriptionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ScheduledActionType {
    }

    /**
     * The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
     */
    export interface VpcEndpointProperties {
        /**
         * One or more network interfaces of the endpoint. Also known as an interface endpoint.
         */
        networkInterfaces?: outputs.redshift.EndpointAccessNetworkInterface[];
        /**
         * The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
         */
        vpcEndpointId?: string;
        /**
         * The VPC identifier that the endpoint is associated.
         */
        vpcId?: string;
    }

}

export namespace redshiftserverless {
    export interface Namespace {
        adminUsername?: string;
        creationDate?: string;
        dbName?: string;
        defaultIamRoleArn?: string;
        iamRoles?: string[];
        kmsKeyId?: string;
        logExports?: enums.redshiftserverless.NamespaceLogExport[];
        namespaceArn?: string;
        namespaceId?: string;
        namespaceName?: string;
        status?: enums.redshiftserverless.NamespaceStatus;
    }

    export interface NamespaceTag {
        key: string;
        value: string;
    }

    export interface Workgroup {
        baseCapacity?: number;
        configParameters?: outputs.redshiftserverless.WorkgroupConfigParameter[];
        creationDate?: string;
        endpoint?: outputs.redshiftserverless.WorkgroupEndpoint;
        enhancedVpcRouting?: boolean;
        namespaceName?: string;
        publiclyAccessible?: boolean;
        securityGroupIds?: string[];
        status?: enums.redshiftserverless.WorkgroupStatus;
        subnetIds?: string[];
        workgroupArn?: string;
        workgroupId?: string;
        workgroupName?: string;
    }

    export interface WorkgroupConfigParameter {
        parameterKey?: string;
        parameterValue?: string;
    }

    export interface WorkgroupEndpoint {
        address?: string;
        port?: number;
        vpcEndpoints?: outputs.redshiftserverless.WorkgroupVpcEndpoint[];
    }

    export interface WorkgroupNetworkInterface {
        availabilityZone?: string;
        networkInterfaceId?: string;
        privateIpAddress?: string;
        subnetId?: string;
    }

    export interface WorkgroupTag {
        key: string;
        value: string;
    }

    export interface WorkgroupVpcEndpoint {
        networkInterfaces?: outputs.redshiftserverless.WorkgroupNetworkInterface[];
        vpcEndpointId?: string;
        vpcId?: string;
    }

}

export namespace refactorspaces {
    export interface ApplicationApiGatewayProxyInput {
        endpointType?: enums.refactorspaces.ApplicationApiGatewayEndpointType;
        stageName?: string;
    }

    /**
     * A label for tagging Environment resource
     */
    export interface ApplicationTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    /**
     * A label for tagging Environment resource
     */
    export interface EnvironmentTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface RouteDefaultRouteInput {
        activationState: enums.refactorspaces.RouteActivationState;
    }

    /**
     * A label for tagging Environment resource
     */
    export interface RouteTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface RouteUriPathRouteInput {
        activationState: enums.refactorspaces.RouteActivationState;
        appendSourcePath?: boolean;
        includeChildPaths?: boolean;
        methods?: enums.refactorspaces.RouteMethod[];
        sourcePath?: string;
    }

    export interface ServiceLambdaEndpointInput {
        arn: string;
    }

    /**
     * A label for tagging Environment resource
     */
    export interface ServiceTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    export interface ServiceUrlEndpointInput {
        healthUrl?: string;
        url: string;
    }

}

export namespace rekognition {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface CollectionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A bounding box denoting a region of interest in the frame to be analyzed.
     */
    export interface StreamProcessorBoundingBox {
        height: number;
        left: number;
        top: number;
        width: number;
    }

    /**
     * Connected home settings to use on a streaming video. Note that either ConnectedHomeSettings or FaceSearchSettings should be set. Not both
     */
    export interface StreamProcessorConnectedHomeSettings {
        labels: string[];
        /**
         * Minimum object class match confidence score that must be met to return a result for a recognized object.
         */
        minConfidence?: number;
    }

    /**
     * Indicates whether Rekognition is allowed to store the video stream data for model-training.
     */
    export interface StreamProcessorDataSharingPreference {
        /**
         * Flag to enable data-sharing
         */
        optIn: boolean;
    }

    /**
     * Face search settings to use on a streaming video. Note that either FaceSearchSettings or ConnectedHomeSettings should be set. Not both
     */
    export interface StreamProcessorFaceSearchSettings {
        /**
         * The ID of a collection that contains faces that you want to search for.
         */
        collectionId: string;
        /**
         * Minimum face match confidence score percentage that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted.
         */
        faceMatchThreshold?: number;
    }

    /**
     * The Amazon Kinesis Data Stream stream to which the Amazon Rekognition stream processor streams the analysis results, as part of face search feature.
     */
    export interface StreamProcessorKinesisDataStream {
        /**
         * ARN of the Kinesis Data Stream stream.
         */
        arn: string;
    }

    /**
     * The Kinesis Video Stream that streams the source video.
     */
    export interface StreamProcessorKinesisVideoStream {
        /**
         * ARN of the Kinesis Video Stream that streams the source video.
         */
        arn: string;
    }

    /**
     * The ARN of the SNS notification channel where events of interests are published, as part of connected home feature.
     */
    export interface StreamProcessorNotificationChannel {
        /**
         * ARN of the SNS topic.
         */
        arn: string;
    }

    /**
     * An (X, Y) cartesian coordinate denoting a point on the frame
     */
    export interface StreamProcessorPoint {
        /**
         * The X coordinate of the point.
         */
        x: number;
        /**
         * The Y coordinate of the point.
         */
        y: number;
    }

    /**
     * The S3 location in customer's account where inference output & artifacts are stored, as part of connected home feature.
     */
    export interface StreamProcessorS3Destination {
        /**
         * Name of the S3 bucket.
         */
        bucketName: string;
        /**
         * The object key prefix path where the results will be stored. Default is no prefix path
         */
        objectKeyPrefix?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface StreamProcessorTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace resiliencehub {
    /**
     * Indicates an event you would like to subscribe and get notification for.
     */
    export interface AppEventSubscription {
        /**
         * The type of event you would like to subscribe and get notification for.
         */
        eventType: enums.resiliencehub.AppEventSubscriptionEventType;
        /**
         * Unique name to identify an event subscription.
         */
        name: string;
        /**
         * Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
         */
        snsTopicArn?: string;
    }

    /**
     * Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
     */
    export interface AppPermissionModel {
        /**
         * Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
         */
        crossAccountRoleArns?: string[];
        /**
         * Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
         */
        invokerRoleName?: string;
        /**
         * Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
         */
        type: enums.resiliencehub.AppPermissionModelType;
    }

    export interface AppPhysicalResourceId {
        awsAccountId?: string;
        awsRegion?: string;
        identifier: string;
        type: string;
    }

    /**
     * Resource mapping is used to map logical resources from template to physical resource
     */
    export interface AppResourceMapping {
        eksSourceName?: string;
        logicalStackName?: string;
        mappingType: string;
        physicalResourceId: outputs.resiliencehub.AppPhysicalResourceId;
        resourceName?: string;
        terraformSourceName?: string;
    }

    export interface AppTagMap {
    }

    export interface ResiliencyPolicyPolicyMap {
    }

    export interface ResiliencyPolicyTagMap {
    }

}

export namespace resourceexplorer2 {
    export interface IndexTagMap {
    }

    export interface ViewIncludedProperty {
        name: string;
    }

    export interface ViewSearchFilter {
        filterString: string;
    }

    export interface ViewTagMap {
    }

}

export namespace resourcegroups {
    export interface GroupConfigurationItem {
        parameters?: outputs.resourcegroups.GroupConfigurationParameter[];
        type?: string;
    }

    export interface GroupConfigurationParameter {
        name?: string;
        values?: string[];
    }

    export interface GroupQuery {
        resourceTypeFilters?: string[];
        stackIdentifier?: string;
        tagFilters?: outputs.resourcegroups.GroupTagFilter[];
    }

    export interface GroupResourceQuery {
        query?: outputs.resourcegroups.GroupQuery;
        type?: enums.resourcegroups.GroupResourceQueryType;
    }

    export interface GroupTag {
        key?: string;
        value?: string;
    }

    export interface GroupTagFilter {
        key?: string;
        values?: string[];
    }

}

export namespace robomaker {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface FleetTags {
    }

    /**
     * The robot software suite used by the robot application.
     */
    export interface RobotApplicationRobotSoftwareSuite {
        /**
         * The name of robot software suite.
         */
        name: enums.robomaker.RobotApplicationRobotSoftwareSuiteName;
        /**
         * The version of robot software suite.
         */
        version?: enums.robomaker.RobotApplicationRobotSoftwareSuiteVersion;
    }

    export interface RobotApplicationSourceConfig {
        /**
         * The architecture of robot application.
         */
        architecture: enums.robomaker.RobotApplicationSourceConfigArchitecture;
        /**
         * The Arn of the S3Bucket that stores the robot application source.
         */
        s3Bucket: string;
        /**
         * The s3 key of robot application source.
         */
        s3Key: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RobotApplicationTags {
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RobotTags {
    }

    /**
     * Information about a rendering engine.
     */
    export interface SimulationApplicationRenderingEngine {
        /**
         * The name of the rendering engine.
         */
        name: enums.robomaker.SimulationApplicationRenderingEngineName;
        /**
         * The version of the rendering engine.
         */
        version: string;
    }

    /**
     * Information about a robot software suite.
     */
    export interface SimulationApplicationRobotSoftwareSuite {
        /**
         * The name of the robot software suite.
         */
        name: enums.robomaker.SimulationApplicationRobotSoftwareSuiteName;
        /**
         * The version of the robot software suite.
         */
        version?: enums.robomaker.SimulationApplicationRobotSoftwareSuiteVersion;
    }

    /**
     * Information about a simulation software suite.
     */
    export interface SimulationApplicationSimulationSoftwareSuite {
        /**
         * The name of the simulation software suite.
         */
        name: enums.robomaker.SimulationApplicationSimulationSoftwareSuiteName;
        /**
         * The version of the simulation software suite.
         */
        version?: enums.robomaker.SimulationApplicationSimulationSoftwareSuiteVersion;
    }

    /**
     * Information about a source configuration.
     */
    export interface SimulationApplicationSourceConfig {
        /**
         * The target processor architecture for the application.
         */
        architecture: enums.robomaker.SimulationApplicationSourceConfigArchitecture;
        /**
         * The Amazon S3 bucket name.
         */
        s3Bucket: string;
        /**
         * The s3 object key.
         */
        s3Key: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SimulationApplicationTags {
    }

}

export namespace rolesanywhere {
    export interface CrlTag {
        key: string;
        value: string;
    }

    export interface ProfileTag {
        key: string;
        value: string;
    }

    export interface TrustAnchorNotificationSetting {
        channel?: enums.rolesanywhere.TrustAnchorNotificationChannel;
        enabled: boolean;
        event: enums.rolesanywhere.TrustAnchorNotificationEvent;
        threshold?: number;
    }

    export interface TrustAnchorSource {
        sourceData?: outputs.rolesanywhere.TrustAnchorSourceData0Properties | outputs.rolesanywhere.TrustAnchorSourceData1Properties;
        sourceType?: enums.rolesanywhere.TrustAnchorType;
    }

    export interface TrustAnchorSourceData0Properties {
        x509CertificateData: string;
    }

    export interface TrustAnchorSourceData1Properties {
        acmPcaArn: string;
    }

    export interface TrustAnchorTag {
        key: string;
        value: string;
    }

}

export namespace route53 {
    export interface CidrCollectionLocation {
        /**
         * A list of CIDR blocks.
         */
        cidrList: string[];
        /**
         * The name of the location that is associated with the CIDR collection.
         */
        locationName: string;
    }

    /**
     * A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
     */
    export interface HealthCheckAlarmIdentifier {
        /**
         * The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
         */
        name: string;
        /**
         * For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy, the region that the alarm was created in.
         */
        region: string;
    }

    /**
     * A complex type that contains information about the health check.
     */
    export interface HealthCheckConfigProperties {
        alarmIdentifier?: outputs.route53.HealthCheckAlarmIdentifier;
        childHealthChecks?: string[];
        enableSni?: boolean;
        failureThreshold?: number;
        fullyQualifiedDomainName?: string;
        healthThreshold?: number;
        insufficientDataHealthStatus?: enums.route53.HealthCheckConfigPropertiesInsufficientDataHealthStatus;
        inverted?: boolean;
        ipAddress?: string;
        measureLatency?: boolean;
        port?: number;
        regions?: string[];
        requestInterval?: number;
        resourcePath?: string;
        routingControlArn?: string;
        searchString?: string;
        type: enums.route53.HealthCheckConfigPropertiesType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface HealthCheckTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * A complex type that contains an optional comment.
     *
     * If you don't want to specify a comment, omit the HostedZoneConfig and Comment elements.
     */
    export interface HostedZoneConfig {
        /**
         * Any comments that you want to include about the hosted zone.
         */
        comment?: string;
    }

    /**
     * A complex type that contains information about a configuration for DNS query logging.
     */
    export interface HostedZoneQueryLoggingConfig {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
         */
        cloudWatchLogsLogGroupArn: string;
    }

    /**
     * A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
     */
    export interface HostedZoneTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC.
     */
    export interface HostedZoneVpc {
        /**
         * The ID of an Amazon VPC.
         */
        vpcId: string;
        /**
         * The region that an Amazon VPC was created in. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a list of up to date regions.
         */
        vpcRegion: string;
    }

    export interface RecordSetAliasTarget {
        dnsName: string;
        evaluateTargetHealth?: boolean;
        hostedZoneId: string;
    }

    export interface RecordSetCidrRoutingConfig {
        collectionId: string;
        locationName: string;
    }

    export interface RecordSetGeoLocation {
        continentCode?: string;
        countryCode?: string;
        subdivisionCode?: string;
    }

    export interface RecordSetGroupAliasTarget {
        dnsName: string;
        evaluateTargetHealth?: boolean;
        hostedZoneId: string;
    }

    export interface RecordSetGroupCidrRoutingConfig {
        collectionId: string;
        locationName: string;
    }

    export interface RecordSetGroupGeoLocation {
        continentCode?: string;
        countryCode?: string;
        subdivisionCode?: string;
    }

    export interface RecordSetGroupRecordSet {
        aliasTarget?: outputs.route53.RecordSetGroupAliasTarget;
        cidrRoutingConfig?: outputs.route53.RecordSetGroupCidrRoutingConfig;
        failover?: string;
        geoLocation?: outputs.route53.RecordSetGroupGeoLocation;
        healthCheckId?: string;
        hostedZoneId?: string;
        hostedZoneName?: string;
        multiValueAnswer?: boolean;
        name: string;
        region?: string;
        resourceRecords?: string[];
        setIdentifier?: string;
        ttl?: string;
        type: string;
        weight?: number;
    }

}

export namespace route53recoverycontrol {
    export interface ClusterEndpoint {
        endpoint?: string;
        region?: string;
    }

    export interface ClusterTag {
        key: string;
        value: string;
    }

    export interface ControlPanelTag {
        key: string;
        value: string;
    }

    /**
     * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
     */
    export interface SafetyRuleAssertionRule {
        /**
         * The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
         */
        assertedControls: string[];
        /**
         * An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
         */
        waitPeriodMs: number;
    }

    /**
     * A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
     */
    export interface SafetyRuleGatingRule {
        /**
         * The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
         */
        gatingControls: string[];
        /**
         * Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. 
         * In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
         */
        targetControls: string[];
        /**
         * An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
         */
        waitPeriodMs: number;
    }

    /**
     * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a transaction completes.
     */
    export interface SafetyRuleRuleConfig {
        /**
         * Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
         */
        inverted: boolean;
        /**
         * The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
         */
        threshold: number;
        type: enums.route53recoverycontrol.SafetyRuleRuleType;
    }

    export interface SafetyRuleTag {
        key: string;
        value: string;
    }

}

export namespace route53recoveryreadiness {
    export interface CellTag {
        key: string;
        value: string;
    }

    export interface ReadinessCheckTag {
        key: string;
        value: string;
    }

    export interface RecoveryGroupTag {
        key: string;
        value: string;
    }

    /**
     * A component for DNS/routing control readiness checks.
     */
    export interface ResourceSetDnsTargetResource {
        /**
         * The domain name that acts as an ingress point to a portion of the customer application.
         */
        domainName?: string;
        /**
         * The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
         */
        hostedZoneArn?: string;
        /**
         * The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
         */
        recordSetId?: string;
        /**
         * The type of DNS record of the target resource.
         */
        recordType?: string;
        targetResource?: outputs.route53recoveryreadiness.ResourceSetTargetResource;
    }

    /**
     * The Network Load Balancer resource that a DNS target resource points to.
     */
    export interface ResourceSetNlbResource {
        /**
         * A Network Load Balancer resource Amazon Resource Name (ARN).
         */
        arn?: string;
    }

    /**
     * The Route 53 resource that a DNS target resource record points to.
     */
    export interface ResourceSetR53ResourceRecord {
        /**
         * The DNS target domain name.
         */
        domainName?: string;
        /**
         * The Resource Record set id.
         */
        recordSetId?: string;
    }

    /**
     * The resource element of a ResourceSet
     */
    export interface ResourceSetResource {
        /**
         * The component identifier of the resource, generated when DNS target resource is used.
         */
        componentId?: string;
        dnsTargetResource?: outputs.route53recoveryreadiness.ResourceSetDnsTargetResource;
        /**
         * A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
         */
        readinessScopes?: string[];
        /**
         * The Amazon Resource Name (ARN) of the AWS resource.
         */
        resourceArn?: string;
    }

    export interface ResourceSetTag {
        key: string;
        value: string;
    }

    /**
     * The target resource that the Route 53 record points to.
     */
    export interface ResourceSetTargetResource {
        nlbResource?: outputs.route53recoveryreadiness.ResourceSetNlbResource;
        r53Resource?: outputs.route53recoveryreadiness.ResourceSetR53ResourceRecord;
    }

}

export namespace route53resolver {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface FirewallDomainListTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FirewallRuleGroupAssociationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Firewall Rule associating the Rule Group to a Domain List
     */
    export interface FirewallRuleGroupFirewallRule {
        /**
         * Rule Action
         */
        action: enums.route53resolver.FirewallRuleGroupFirewallRuleAction;
        /**
         * BlockOverrideDnsType
         */
        blockOverrideDnsType?: enums.route53resolver.FirewallRuleGroupFirewallRuleBlockOverrideDnsType;
        /**
         * BlockOverrideDomain
         */
        blockOverrideDomain?: string;
        /**
         * BlockOverrideTtl
         */
        blockOverrideTtl?: number;
        /**
         * BlockResponse
         */
        blockResponse?: enums.route53resolver.FirewallRuleGroupFirewallRuleBlockResponse;
        /**
         * ResourceId
         */
        firewallDomainListId: string;
        /**
         * Rule Priority
         */
        priority: number;
        /**
         * Qtype
         */
        qtype?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FirewallRuleGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface OutpostResolverTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ResolverEndpointIpAddressRequest {
        ip?: string;
        ipv6?: string;
        subnetId: string;
    }

    export interface ResolverEndpointTag {
        key: string;
        value: string;
    }

    export interface ResolverRuleTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    export interface ResolverRuleTargetAddress {
        /**
         * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses. 
         */
        ip?: string;
        /**
         * One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses. 
         */
        ipv6?: string;
        /**
         * The port at Ip that you want to forward DNS queries to. 
         */
        port?: string;
        /**
         * The protocol that you want to use to forward DNS queries. 
         */
        protocol?: enums.route53resolver.ResolverRuleTargetAddressProtocol;
    }

}

export namespace rum {
    /**
     * AppMonitor configuration
     */
    export interface AppMonitorConfiguration {
        /**
         * If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
         */
        allowCookies?: boolean;
        /**
         * If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
         */
        enableXRay?: boolean;
        /**
         * A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
         */
        excludedPages?: string[];
        /**
         * A list of pages in the RUM console that are to be displayed with a favorite icon.
         */
        favoritePages?: string[];
        /**
         * The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
         */
        guestRoleArn?: string;
        /**
         * The ID of the identity pool that is used to authorize the sending of data to RUM.
         */
        identityPoolId?: string;
        /**
         * If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
         */
        includedPages?: string[];
        /**
         * An array of structures which define the destinations and the metrics that you want to send.
         */
        metricDestinations?: outputs.rum.AppMonitorMetricDestination[];
        /**
         * Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
         */
        sessionSampleRate?: number;
        /**
         * An array that lists the types of telemetry data that this app monitor is to collect.
         */
        telemetries?: enums.rum.AppMonitorTelemetry[];
    }

    /**
     * AppMonitor custom events configuration
     */
    export interface AppMonitorCustomEvents {
        /**
         * Indicates whether AppMonitor accepts custom events.
         */
        status?: enums.rum.AppMonitorCustomEventsStatus;
    }

    /**
     * A single metric definition
     */
    export interface AppMonitorMetricDefinition {
        /**
         * Use this field only if you are sending the metric to CloudWatch.
         *
         * This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
         *
         * "metadata.pageId": "PageId"
         *
         * "metadata.browserName": "BrowserName"
         *
         * "metadata.deviceType": "DeviceType"
         *
         * "metadata.osName": "OSName"
         *
         * "metadata.countryCode": "CountryCode"
         *
         * "event_details.fileType": "FileType"
         *
         * All dimensions listed in this field must also be included in EventPattern.
         */
        dimensionKeys?: any;
        /**
         * The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
         *
         * When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
         *
         * Example event patterns:
         *
         * '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
         *
         * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
         *
         * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
         *
         * If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
         */
        eventPattern?: string;
        /**
         * The name for the metric that is defined in this structure. For extended metrics, valid values are the following:
         *
         * PerformanceNavigationDuration
         *
         * PerformanceResourceDuration
         *
         * NavigationSatisfiedTransaction
         *
         * NavigationToleratedTransaction
         *
         * NavigationFrustratedTransaction
         *
         * WebVitalsCumulativeLayoutShift
         *
         * WebVitalsFirstInputDelay
         *
         * WebVitalsLargestContentfulPaint
         *
         * JsErrorCount
         *
         * HttpErrorCount
         *
         * SessionCount
         */
        name: string;
        /**
         * The namespace used by CloudWatch Metrics for the metric that is defined in this structure
         */
        namespace?: string;
        /**
         * The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
         */
        unitLabel?: string;
        /**
         * The field within the event object that the metric value is sourced from.
         *
         * If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
         *
         * If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
         */
        valueKey?: string;
    }

    /**
     * An structure which defines the destination and the metrics that you want to send.
     */
    export interface AppMonitorMetricDestination {
        /**
         * Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
         */
        destination: enums.rum.AppMonitorMetricDestinationDestination;
        /**
         * Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
         */
        destinationArn?: string;
        /**
         * This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
         *
         * This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
         */
        iamRoleArn?: string;
        /**
         * An array of structures which define the metrics that you want to send.
         */
        metricDefinitions?: outputs.rum.AppMonitorMetricDefinition[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AppMonitorTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace s3 {
    export interface AccessGrantGrantee {
        /**
         * The unique identifier of the Grantee
         */
        granteeIdentifier: string;
        /**
         * Configures the transfer acceleration state for an Amazon S3 bucket.
         */
        granteeType: enums.s3.AccessGrantGranteeGranteeType;
    }

    export interface AccessGrantTag {
        key: string;
        value: string;
    }

    export interface AccessGrantsInstanceTag {
        key: string;
        value: string;
    }

    export interface AccessGrantsLocationConfiguration {
        /**
         * The S3 sub prefix of a registered location in your S3 Access Grants instance
         */
        s3SubPrefix: string;
    }

    export interface AccessGrantsLocationTag {
        key: string;
        value: string;
    }

    export interface AccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * The Virtual Private Cloud (VPC) configuration for a bucket access point.
     */
    export interface AccessPointVpcConfiguration {
        /**
         * If this field is specified, this access point will only allow connections from the specified VPC ID.
         */
        vpcId?: string;
    }

    /**
     * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload.
     */
    export interface BucketAbortIncompleteMultipartUpload {
        /**
         * Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload.
         */
        daysAfterInitiation: number;
    }

    export interface BucketAccelerateConfiguration {
        /**
         * Configures the transfer acceleration state for an Amazon S3 bucket.
         */
        accelerationStatus: enums.s3.BucketAccelerateConfigurationAccelerationStatus;
    }

    /**
     * Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS account that owns the source object.
     */
    export interface BucketAccessControlTranslation {
        owner: string;
    }

    /**
     * Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     */
    export interface BucketAnalyticsConfiguration {
        /**
         * The ID that identifies the analytics configuration.
         */
        id: string;
        /**
         * The prefix that an object must have to be included in the analytics results.
         */
        prefix?: string;
        storageClassAnalysis: outputs.s3.BucketStorageClassAnalysis;
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    export interface BucketCorsConfiguration {
        corsRules: outputs.s3.BucketCorsRule[];
    }

    /**
     * A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
     */
    export interface BucketCorsRule {
        /**
         * Headers that are specified in the Access-Control-Request-Headers header.
         */
        allowedHeaders?: string[];
        /**
         * An HTTP method that you allow the origin to execute.
         */
        allowedMethods: enums.s3.BucketCorsRuleAllowedMethodsItem[];
        /**
         * One or more origins you want customers to be able to access the bucket from.
         */
        allowedOrigins: string[];
        /**
         * One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).
         */
        exposedHeaders?: string[];
        /**
         * A unique identifier for this rule.
         */
        id?: string;
        /**
         * The time in seconds that your browser is to cache the preflight response for the specified resource.
         */
        maxAge?: number;
    }

    /**
     * Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
     */
    export interface BucketDataExport {
        destination: outputs.s3.BucketDestination;
        /**
         * The version of the output schema to use when exporting data.
         */
        outputSchemaVersion: string;
    }

    /**
     * The default retention period that you want to apply to new objects placed in the specified bucket.
     */
    export interface BucketDefaultRetention {
        days?: number;
        mode?: enums.s3.BucketDefaultRetentionMode;
        years?: number;
    }

    export interface BucketDeleteMarkerReplication {
        status?: enums.s3.BucketDeleteMarkerReplicationStatus;
    }

    /**
     * Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
     */
    export interface BucketDestination {
        /**
         * The account ID that owns the destination S3 bucket. 
         */
        bucketAccountId?: string;
        /**
         * The Amazon Resource Name (ARN) of the bucket to which data is exported.
         */
        bucketArn: string;
        /**
         * Specifies the file format used when exporting data to Amazon S3.
         */
        format: enums.s3.BucketDestinationFormat;
        /**
         * The prefix to use when exporting data. The prefix is prepended to all results.
         */
        prefix?: string;
    }

    /**
     * Specifies default encryption for a bucket using server-side encryption with either Amazon S3-managed keys (SSE-S3) or AWS KMS-managed keys (SSE-KMS).
     */
    export interface BucketEncryption {
        /**
         * Specifies the default server-side-encryption configuration.
         */
        serverSideEncryptionConfiguration: outputs.s3.BucketServerSideEncryptionRule[];
    }

    /**
     * Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
     */
    export interface BucketEncryptionConfiguration {
        /**
         * Specifies the ID (Key ARN or Alias ARN) of the customer managed customer master key (CMK) stored in AWS Key Management Service (KMS) for the destination bucket.
         */
        replicaKmsKeyId: string;
    }

    /**
     * Describes the Amazon EventBridge notification configuration for an Amazon S3 bucket.
     */
    export interface BucketEventBridgeConfiguration {
        /**
         * Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket.
         */
        eventBridgeEnabled: boolean;
    }

    /**
     * Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
     */
    export interface BucketFilterRule {
        name: string;
        value: string;
    }

    export interface BucketIntelligentTieringConfiguration {
        /**
         * The ID used to identify the S3 Intelligent-Tiering configuration.
         */
        id: string;
        /**
         * An object key name prefix that identifies the subset of objects to which the rule applies.
         */
        prefix?: string;
        /**
         * Specifies the status of the configuration.
         */
        status: enums.s3.BucketIntelligentTieringConfigurationStatus;
        /**
         * A container for a key-value pair.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
        /**
         * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
         */
        tierings: outputs.s3.BucketTiering[];
    }

    export interface BucketInventoryConfiguration {
        destination: outputs.s3.BucketDestination;
        /**
         * Specifies whether the inventory is enabled or disabled.
         */
        enabled: boolean;
        /**
         * The ID used to identify the inventory configuration.
         */
        id: string;
        /**
         * Object versions to include in the inventory list.
         */
        includedObjectVersions: enums.s3.BucketInventoryConfigurationIncludedObjectVersions;
        /**
         * Contains the optional fields that are included in the inventory results.
         */
        optionalFields?: enums.s3.BucketInventoryConfigurationOptionalFieldsItem[];
        /**
         * The prefix that is prepended to all inventory results.
         */
        prefix?: string;
        /**
         * Specifies the schedule for generating inventory results.
         */
        scheduleFrequency: enums.s3.BucketInventoryConfigurationScheduleFrequency;
    }

    /**
     * Describes the AWS Lambda functions to invoke and the events for which to invoke them.
     */
    export interface BucketLambdaConfiguration {
        /**
         * The Amazon S3 bucket event for which to invoke the AWS Lambda function.
         */
        event: string;
        /**
         * The filtering rules that determine which objects invoke the AWS Lambda function.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon S3 invokes when the specified event type occurs.
         */
        function: string;
    }

    export interface BucketLifecycleConfiguration {
        /**
         * A lifecycle rule for individual objects in an Amazon S3 bucket.
         */
        rules: outputs.s3.BucketRule[];
    }

    export interface BucketLoggingConfiguration {
        /**
         * The name of an Amazon S3 bucket where Amazon S3 store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the LoggingConfiguration property is defined.
         */
        destinationBucketName?: string;
        logFilePrefix?: string;
        targetObjectKeyFormat?: outputs.s3.BucketTargetObjectKeyFormat;
    }

    export interface BucketMetrics {
        eventThreshold?: outputs.s3.BucketReplicationTimeValue;
        status: enums.s3.BucketMetricsStatus;
    }

    export interface BucketMetricsConfiguration {
        accessPointArn?: string;
        id: string;
        prefix?: string;
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    /**
     * Container for the expiration rule that describes when noncurrent objects are expired. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 expire noncurrent object versions at a specific period in the object's lifetime
     */
    export interface BucketNoncurrentVersionExpiration {
        /**
         * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         */
        newerNoncurrentVersions?: number;
        /**
         * Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
         */
        noncurrentDays: number;
    }

    /**
     * Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object's lifetime.
     */
    export interface BucketNoncurrentVersionTransition {
        /**
         * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         */
        newerNoncurrentVersions?: number;
        /**
         * The class of storage used to store the object.
         */
        storageClass: enums.s3.BucketNoncurrentVersionTransitionStorageClass;
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
         */
        transitionInDays: number;
    }

    /**
     * Describes the notification configuration for an Amazon S3 bucket.
     */
    export interface BucketNotificationConfiguration {
        eventBridgeConfiguration?: outputs.s3.BucketEventBridgeConfiguration;
        lambdaConfigurations?: outputs.s3.BucketLambdaConfiguration[];
        queueConfigurations?: outputs.s3.BucketQueueConfiguration[];
        topicConfigurations?: outputs.s3.BucketTopicConfiguration[];
    }

    /**
     * Specifies object key name filtering rules.
     */
    export interface BucketNotificationFilter {
        s3Key: outputs.s3.BucketS3KeyFilter;
    }

    export interface BucketObjectLockConfiguration {
        objectLockEnabled?: string;
        rule?: outputs.s3.BucketObjectLockRule;
    }

    /**
     * The Object Lock rule in place for the specified object.
     */
    export interface BucketObjectLockRule {
        defaultRetention?: outputs.s3.BucketDefaultRetention;
    }

    export interface BucketOwnershipControls {
        rules: outputs.s3.BucketOwnershipControlsRule[];
    }

    export interface BucketOwnershipControlsRule {
        /**
         * Specifies an object ownership rule.
         */
        objectOwnership?: enums.s3.BucketOwnershipControlsRuleObjectOwnership;
    }

    /**
     * Configuration that defines how Amazon S3 handles public access.
     */
    export interface BucketPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.
         * Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.
         * Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
     */
    export interface BucketQueueConfiguration {
        /**
         * The Amazon S3 bucket event about which you want to publish messages to Amazon SQS.
         */
        event: string;
        /**
         * The filtering rules that determine which objects trigger notifications.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type.
         */
        queue: string;
    }

    /**
     * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
     */
    export interface BucketRedirectAllRequestsTo {
        /**
         * Name of the host where requests are redirected.
         */
        hostName: string;
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        protocol?: enums.s3.BucketRedirectAllRequestsToProtocol;
    }

    /**
     * Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
     */
    export interface BucketRedirectRule {
        /**
         * The host name to use in the redirect request.
         */
        hostName?: string;
        /**
         * The HTTP redirect code to use on the response. Not required if one of the siblings is present.
         */
        httpRedirectCode?: string;
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        protocol?: enums.s3.BucketRedirectRuleProtocol;
        /**
         * The object key prefix to use in the redirect request.
         */
        replaceKeyPrefixWith?: string;
        /**
         * The specific object key to use in the redirect request.d
         */
        replaceKeyWith?: string;
    }

    export interface BucketReplicaModifications {
        /**
         * Specifies whether Amazon S3 replicates modifications on replicas.
         */
        status: enums.s3.BucketReplicaModificationsStatus;
    }

    /**
     * A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
     */
    export interface BucketReplicationConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects.
         */
        role: string;
        /**
         * A container for one or more replication rules.
         */
        rules: outputs.s3.BucketReplicationRule[];
    }

    /**
     * Specifies which Amazon S3 bucket to store replicated objects in and their storage class.
     */
    export interface BucketReplicationDestination {
        accessControlTranslation?: outputs.s3.BucketAccessControlTranslation;
        account?: string;
        bucket: string;
        encryptionConfiguration?: outputs.s3.BucketEncryptionConfiguration;
        metrics?: outputs.s3.BucketMetrics;
        replicationTime?: outputs.s3.BucketReplicationTime;
        /**
         * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy.
         */
        storageClass?: enums.s3.BucketReplicationDestinationStorageClass;
    }

    /**
     * Specifies which Amazon S3 objects to replicate and where to store the replicas.
     */
    export interface BucketReplicationRule {
        deleteMarkerReplication?: outputs.s3.BucketDeleteMarkerReplication;
        destination: outputs.s3.BucketReplicationDestination;
        filter?: outputs.s3.BucketReplicationRuleFilter;
        /**
         * A unique identifier for the rule.
         */
        id?: string;
        /**
         * An object key name prefix that identifies the object or objects to which the rule applies.
         */
        prefix?: string;
        priority?: number;
        sourceSelectionCriteria?: outputs.s3.BucketSourceSelectionCriteria;
        /**
         * Specifies whether the rule is enabled.
         */
        status: enums.s3.BucketReplicationRuleStatus;
    }

    export interface BucketReplicationRuleAndOperator {
        prefix?: string;
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    export interface BucketReplicationRuleFilter {
        and?: outputs.s3.BucketReplicationRuleAndOperator;
        prefix?: string;
        tagFilter?: outputs.s3.BucketTagFilter;
    }

    export interface BucketReplicationTime {
        status: enums.s3.BucketReplicationTimeStatus;
        time: outputs.s3.BucketReplicationTimeValue;
    }

    export interface BucketReplicationTimeValue {
        minutes: number;
    }

    /**
     * Specifies the redirect behavior and when a redirect is applied.
     */
    export interface BucketRoutingRule {
        /**
         * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
         */
        redirectRule: outputs.s3.BucketRedirectRule;
        routingRuleCondition?: outputs.s3.BucketRoutingRuleCondition;
    }

    /**
     * A container for describing a condition that must be met for the specified redirect to apply.You must specify at least one of HttpErrorCodeReturnedEquals and KeyPrefixEquals
     */
    export interface BucketRoutingRuleCondition {
        /**
         * The HTTP error code when the redirect is applied. 
         */
        httpErrorCodeReturnedEquals?: string;
        /**
         * The object key name prefix when the redirect is applied.
         */
        keyPrefixEquals?: string;
    }

    /**
     * You must specify at least one of the following properties: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays, NoncurrentVersionExpirationInDays, NoncurrentVersionTransition, NoncurrentVersionTransitions, Transition, or Transitions.
     */
    export interface BucketRule {
        abortIncompleteMultipartUpload?: outputs.s3.BucketAbortIncompleteMultipartUpload;
        expirationDate?: string;
        expirationInDays?: number;
        expiredObjectDeleteMarker?: boolean;
        id?: string;
        noncurrentVersionExpiration?: outputs.s3.BucketNoncurrentVersionExpiration;
        noncurrentVersionExpirationInDays?: number;
        noncurrentVersionTransition?: outputs.s3.BucketNoncurrentVersionTransition;
        noncurrentVersionTransitions?: outputs.s3.BucketNoncurrentVersionTransition[];
        objectSizeGreaterThan?: string;
        objectSizeLessThan?: string;
        prefix?: string;
        status: enums.s3.BucketRuleStatus;
        tagFilters?: outputs.s3.BucketTagFilter[];
        transition?: outputs.s3.BucketTransition;
        transitions?: outputs.s3.BucketTransition[];
    }

    /**
     * A container for object key name prefix and suffix filtering rules.
     */
    export interface BucketS3KeyFilter {
        rules: outputs.s3.BucketFilterRule[];
    }

    /**
     * Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
     */
    export interface BucketServerSideEncryptionByDefault {
        /**
         * "KMSMasterKeyID" can only be used when you set the value of SSEAlgorithm as aws:kms or aws:kms:dsse.
         */
        kmsMasterKeyId?: string;
        sseAlgorithm: enums.s3.BucketServerSideEncryptionByDefaultSseAlgorithm;
    }

    /**
     * Specifies the default server-side encryption configuration.
     */
    export interface BucketServerSideEncryptionRule {
        /**
         * Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the BucketKeyEnabled element to true causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.
         */
        bucketKeyEnabled?: boolean;
        serverSideEncryptionByDefault?: outputs.s3.BucketServerSideEncryptionByDefault;
    }

    /**
     * A container that describes additional filters for identifying the source objects that you want to replicate.
     */
    export interface BucketSourceSelectionCriteria {
        /**
         * A filter that you can specify for selection for modifications on replicas.
         */
        replicaModifications?: outputs.s3.BucketReplicaModifications;
        /**
         * A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.
         */
        sseKmsEncryptedObjects?: outputs.s3.BucketSseKmsEncryptedObjects;
    }

    /**
     * A container for filter information for the selection of S3 objects encrypted with AWS KMS.
     */
    export interface BucketSseKmsEncryptedObjects {
        /**
         * Specifies whether Amazon S3 replicates objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service.
         */
        status: enums.s3.BucketSseKmsEncryptedObjectsStatus;
    }

    /**
     * Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
     */
    export interface BucketStorageClassAnalysis {
        dataExport?: outputs.s3.BucketDataExport;
    }

    export interface BucketTag {
        key: string;
        value: string;
    }

    /**
     * Tags to use to identify a subset of objects for an Amazon S3 bucket.
     */
    export interface BucketTagFilter {
        key: string;
        value: string;
    }

    /**
     * Describes the key format for server access log file in the target bucket. You can choose between SimplePrefix and PartitionedPrefix.
     */
    export interface BucketTargetObjectKeyFormat {
    }

    export interface BucketTiering {
        /**
         * S3 Intelligent-Tiering access tier. See Storage class for automatically optimizing frequently and infrequently accessed objects for a list of access tiers in the S3 Intelligent-Tiering storage class.
         */
        accessTier: enums.s3.BucketTieringAccessTier;
        /**
         * The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
         */
        days: number;
    }

    /**
     * The topic to which notifications are sent and the events for which notifications are generated.
     */
    export interface BucketTopicConfiguration {
        /**
         * The Amazon S3 bucket event about which to send notifications.
         */
        event: string;
        /**
         * The filtering rules that determine for which objects to send notifications.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
         */
        topic: string;
    }

    /**
     * You must specify at least one of "TransitionDate" and "TransitionInDays"
     */
    export interface BucketTransition {
        storageClass: enums.s3.BucketTransitionStorageClass;
        transitionDate?: string;
        transitionInDays?: number;
    }

    /**
     * Describes the versioning state of an Amazon S3 bucket.
     */
    export interface BucketVersioningConfiguration {
        /**
         * The versioning state of the bucket.
         */
        status: enums.s3.BucketVersioningConfigurationStatus;
    }

    /**
     * Specifies website configuration parameters for an Amazon S3 bucket.
     */
    export interface BucketWebsiteConfiguration {
        /**
         * The name of the error document for the website.
         */
        errorDocument?: string;
        /**
         * The name of the index document for the website.
         */
        indexDocument?: string;
        redirectAllRequestsTo?: outputs.s3.BucketRedirectAllRequestsTo;
        routingRules?: outputs.s3.BucketRoutingRule[];
    }

    export interface MultiRegionAccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    export interface MultiRegionAccessPointRegion {
        bucket: string;
        bucketAccountId?: string;
    }

    /**
     * The Policy Status associated with this Multi Region Access Point
     */
    export interface PolicyStatusProperties {
        /**
         * Specifies whether the policy is public or not.
         */
        isPublic: enums.s3.MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic;
    }

    /**
     * Account-level metrics configurations.
     */
    export interface StorageLensAccountLevel {
        activityMetrics?: outputs.s3.StorageLensActivityMetrics;
        advancedCostOptimizationMetrics?: outputs.s3.StorageLensAdvancedCostOptimizationMetrics;
        advancedDataProtectionMetrics?: outputs.s3.StorageLensAdvancedDataProtectionMetrics;
        bucketLevel: outputs.s3.StorageLensBucketLevel;
        detailedStatusCodesMetrics?: outputs.s3.StorageLensDetailedStatusCodesMetrics;
        storageLensGroupLevel?: outputs.s3.StorageLensGroupLevel;
    }

    /**
     * Enables activity metrics.
     */
    export interface StorageLensActivityMetrics {
        /**
         * Specifies whether activity metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Enables advanced cost optimization metrics.
     */
    export interface StorageLensAdvancedCostOptimizationMetrics {
        /**
         * Specifies whether advanced cost optimization metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Enables advanced data protection metrics.
     */
    export interface StorageLensAdvancedDataProtectionMetrics {
        /**
         * Specifies whether advanced data protection metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensAwsOrg {
        arn: string;
    }

    /**
     * Bucket-level metrics configurations.
     */
    export interface StorageLensBucketLevel {
        activityMetrics?: outputs.s3.StorageLensActivityMetrics;
        advancedCostOptimizationMetrics?: outputs.s3.StorageLensAdvancedCostOptimizationMetrics;
        advancedDataProtectionMetrics?: outputs.s3.StorageLensAdvancedDataProtectionMetrics;
        detailedStatusCodesMetrics?: outputs.s3.StorageLensDetailedStatusCodesMetrics;
        prefixLevel?: outputs.s3.StorageLensPrefixLevel;
    }

    /**
     * S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensBucketsAndRegions {
        buckets?: string[];
        regions?: string[];
    }

    /**
     * CloudWatch metrics settings for the Amazon S3 Storage Lens metrics export.
     */
    export interface StorageLensCloudWatchMetrics {
        /**
         * Specifies whether CloudWatch metrics are enabled or disabled.
         */
        isEnabled: boolean;
    }

    /**
     * Specifies the details of Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensConfiguration {
        accountLevel: outputs.s3.StorageLensAccountLevel;
        awsOrg?: outputs.s3.StorageLensAwsOrg;
        dataExport?: outputs.s3.StorageLensDataExport;
        exclude?: outputs.s3.StorageLensBucketsAndRegions;
        id: string;
        include?: outputs.s3.StorageLensBucketsAndRegions;
        /**
         * Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
         */
        isEnabled: boolean;
        /**
         * The ARN for the Amazon S3 Storage Lens configuration.
         */
        storageLensArn?: string;
    }

    /**
     * Specifies how Amazon S3 Storage Lens metrics should be exported.
     */
    export interface StorageLensDataExport {
        cloudWatchMetrics?: outputs.s3.StorageLensCloudWatchMetrics;
        s3BucketDestination?: outputs.s3.StorageLensS3BucketDestination;
    }

    /**
     * Enables detailed status codes metrics.
     */
    export interface StorageLensDetailedStatusCodesMetrics {
        /**
         * Specifies whether detailed status codes metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
     */
    export interface StorageLensEncryption {
    }

    /**
     * The Storage Lens group will include objects that match all of the specified filter values.
     */
    export interface StorageLensGroupAnd {
        matchAnyPrefix?: string[];
        matchAnySuffix?: string[];
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
    }

    /**
     * Sets the Storage Lens Group filter.
     */
    export interface StorageLensGroupFilter {
        and?: outputs.s3.StorageLensGroupAnd;
        matchAnyPrefix?: string[];
        matchAnySuffix?: string[];
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
        or?: outputs.s3.StorageLensGroupOr;
    }

    /**
     * Specifies the details of Amazon S3 Storage Lens Group configuration.
     */
    export interface StorageLensGroupLevel {
        storageLensGroupSelectionCriteria?: outputs.s3.StorageLensGroupSelectionCriteria;
    }

    /**
     * Filter to match all of the specified values for the minimum and maximum object age.
     */
    export interface StorageLensGroupMatchObjectAge {
        /**
         * Minimum object age to which the rule applies.
         */
        daysGreaterThan?: number;
        /**
         * Maximum object age to which the rule applies.
         */
        daysLessThan?: number;
    }

    /**
     * Filter to match all of the specified values for the minimum and maximum object size.
     */
    export interface StorageLensGroupMatchObjectSize {
        /**
         * Minimum object size to which the rule applies.
         */
        bytesGreaterThan?: number;
        /**
         * Maximum object size to which the rule applies.
         */
        bytesLessThan?: number;
    }

    /**
     * The Storage Lens group will include objects that match any of the specified filter values.
     */
    export interface StorageLensGroupOr {
        matchAnyPrefix?: string[];
        matchAnySuffix?: string[];
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
    }

    /**
     * Selection criteria for Storage Lens Group level metrics
     */
    export interface StorageLensGroupSelectionCriteria {
        exclude?: string[];
        include?: string[];
    }

    export interface StorageLensGroupTag {
        key: string;
        value: string;
    }

    /**
     * Prefix-level metrics configurations.
     */
    export interface StorageLensPrefixLevel {
        storageMetrics: outputs.s3.StorageLensPrefixLevelStorageMetrics;
    }

    export interface StorageLensPrefixLevelStorageMetrics {
        /**
         * Specifies whether prefix-level storage metrics are enabled or disabled.
         */
        isEnabled?: boolean;
        selectionCriteria?: outputs.s3.StorageLensSelectionCriteria;
    }

    /**
     * S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
     */
    export interface StorageLensS3BucketDestination {
        /**
         * The AWS account ID that owns the destination S3 bucket.
         */
        accountId: string;
        /**
         * The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
         */
        arn: string;
        encryption?: outputs.s3.StorageLensEncryption;
        /**
         * Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
         */
        format: enums.s3.StorageLensS3BucketDestinationFormat;
        /**
         * The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
         */
        outputSchemaVersion: enums.s3.StorageLensS3BucketDestinationOutputSchemaVersion;
        /**
         * The prefix to use for Amazon S3 Storage Lens export.
         */
        prefix?: string;
    }

    /**
     * Selection criteria for prefix-level metrics.
     */
    export interface StorageLensSelectionCriteria {
        /**
         * Delimiter to divide S3 key into hierarchy of prefixes.
         */
        delimiter?: string;
        /**
         * Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
         */
        maxDepth?: number;
        /**
         * The minimum storage bytes threshold for the prefixes to be included in the analysis.
         */
        minStorageBytesPercentage?: number;
    }

    export interface StorageLensTag {
        key: string;
        value: string;
    }

}

export namespace s3objectlambda {
    export interface AccessPointAlias {
        /**
         * The status of the Object Lambda alias.
         */
        status?: string;
        /**
         * The value of the Object Lambda alias.
         */
        value: string;
    }

    export interface AccessPointAwsLambda {
        functionArn: string;
        functionPayload?: string;
    }

    /**
     * Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
     */
    export interface AccessPointObjectLambdaConfiguration {
        allowedFeatures?: string[];
        cloudWatchMetricsEnabled?: boolean;
        supportingAccessPoint: string;
        transformationConfigurations: outputs.s3objectlambda.AccessPointTransformationConfiguration[];
    }

    export interface AccessPointPolicyStatus {
        /**
         * Specifies whether the Object lambda Access Point Policy is Public or not. Object lambda Access Points are private by default.
         */
        isPublic?: boolean;
    }

    /**
     * The Public Access Block Configuration is used to block policies that would allow public access to this Object lambda Access Point. All public access to Object lambda Access Points are blocked by default, and any policy that would give public access to them will be also blocked. This behavior cannot be changed for Object lambda Access Points.
     */
    export interface AccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) to this object lambda access point. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * Configuration to define what content transformation will be applied on which S3 Action.
     */
    export interface AccessPointTransformationConfiguration {
        actions: string[];
        contentTransformation: outputs.s3objectlambda.AccessPointTransformationConfigurationContentTransformationProperties;
    }

    export interface AccessPointTransformationConfigurationContentTransformationProperties {
        awsLambda: outputs.s3objectlambda.AccessPointAwsLambda;
    }

}

export namespace s3outposts {
    export interface AccessPointVpcConfiguration {
        /**
         * Virtual Private Cloud (VPC) Id from which AccessPoint will allow requests.
         */
        vpcId?: string;
    }

    /**
     * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3Outposts will wait before permanently removing all parts of the upload.
     */
    export interface BucketAbortIncompleteMultipartUpload {
        /**
         * Specifies the number of days after which Amazon S3Outposts aborts an incomplete multipart upload.
         */
        daysAfterInitiation: number;
    }

    export interface BucketFilterAndOperatorProperties {
        /**
         * Prefix identifies one or more objects to which the rule applies.
         */
        prefix?: string;
        /**
         * All of these tags must exist in the object's tag set in order for the rule to apply.
         */
        tags: outputs.s3outposts.BucketFilterTag[];
    }

    /**
     * Tag used to identify a subset of objects for an Amazon S3Outposts bucket.
     */
    export interface BucketFilterTag {
        key: string;
        value: string;
    }

    export interface BucketLifecycleConfiguration {
        /**
         * A list of lifecycle rules for individual objects in an Amazon S3Outposts bucket.
         */
        rules: outputs.s3outposts.BucketRule[];
    }

    /**
     * Specifies lifecycle rules for an Amazon S3Outposts bucket. You must specify at least one of the following: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays.
     */
    export interface BucketRule {
        /**
         * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
         */
        abortIncompleteMultipartUpload?: outputs.s3outposts.BucketAbortIncompleteMultipartUpload;
        /**
         * Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
         */
        expirationDate?: string;
        /**
         * Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
         */
        expirationInDays?: number;
        /**
         * The container for the filter of the lifecycle rule.
         */
        filter?: outputs.s3outposts.BucketRuleFilterProperties;
        /**
         * Unique identifier for the lifecycle rule. The value can't be longer than 255 characters.
         */
        id?: string;
        status?: enums.s3outposts.BucketRuleStatus;
    }

    /**
     * The container for the filter of the lifecycle rule.
     */
    export interface BucketRuleFilterProperties {
        /**
         * The container for the AND condition for the lifecycle rule. A combination of Prefix and 1 or more Tags OR a minimum of 2 or more tags.
         */
        andOperator?: outputs.s3outposts.BucketFilterAndOperatorProperties;
        /**
         * Object key prefix that identifies one or more objects to which this rule applies.
         */
        prefix?: string;
        /**
         * Specifies a tag used to identify a subset of objects for an Amazon S3Outposts bucket.
         */
        tag?: outputs.s3outposts.BucketFilterTag;
    }

    export interface BucketTag {
        key: string;
        value: string;
    }

    export interface EndpointFailedReason {
        /**
         * The failure code, if any, for a create or delete endpoint operation.
         */
        errorCode?: string;
        /**
         * Additional error details describing the endpoint failure and recommended action.
         */
        message?: string;
    }

    /**
     * The container for the network interface.
     */
    export interface EndpointNetworkInterface {
        networkInterfaceId: string;
    }

}

export namespace sagemaker {
    /**
     * The container configuration for a SageMaker image.
     */
    export interface AppImageConfigContainerConfig {
        /**
         * A list of arguments to apply to the container.
         */
        containerArguments?: string[];
        /**
         * The custom entry point to use on container.
         */
        containerEntrypoint?: string[];
        /**
         * A list of variables to apply to the custom container.
         */
        containerEnvironmentVariables?: outputs.sagemaker.AppImageConfigCustomImageContainerEnvironmentVariable[];
    }

    export interface AppImageConfigCustomImageContainerEnvironmentVariable {
        key: string;
        value: string;
    }

    /**
     * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
     */
    export interface AppImageConfigFileSystemConfig {
        /**
         * The default POSIX group ID (GID). If not specified, defaults to 100.
         */
        defaultGid?: number;
        /**
         * The default POSIX user ID (UID). If not specified, defaults to 1000.
         */
        defaultUid?: number;
        /**
         * The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
         */
        mountPath?: string;
    }

    /**
     * The configuration for the file system and kernels in a SageMaker image running as a JupyterLab app.
     */
    export interface AppImageConfigJupyterLabAppImageConfig {
        /**
         * The container configuration for a SageMaker image.
         */
        containerConfig?: outputs.sagemaker.AppImageConfigContainerConfig;
    }

    /**
     * The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
     */
    export interface AppImageConfigKernelGatewayImageConfig {
        /**
         * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
         */
        fileSystemConfig?: outputs.sagemaker.AppImageConfigFileSystemConfig;
        /**
         * The specification of the Jupyter kernels in the image.
         */
        kernelSpecs: outputs.sagemaker.AppImageConfigKernelSpec[];
    }

    export interface AppImageConfigKernelSpec {
        /**
         * The display name of the kernel.
         */
        displayName?: string;
        /**
         * The name of the kernel.
         */
        name: string;
    }

    export interface AppImageConfigTag {
        key: string;
        value: string;
    }

    export interface AppResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.AppResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    export interface AppTag {
        key: string;
        value: string;
    }

    export interface CodeRepositoryGitConfig {
        branch?: string;
        repositoryUrl: string;
        secretArn?: string;
    }

    export interface CodeRepositoryTag {
        key: string;
        value: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface DataQualityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.DataQualityJobDefinitionDatasetFormat;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.DataQualityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.DataQualityJobDefinitionBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface DataQualityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface DataQualityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface DataQualityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface DataQualityJobDefinitionDataQualityAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface DataQualityJobDefinitionDataQualityBaselineConfig {
        baseliningJobName?: string;
        constraintsResource?: outputs.sagemaker.DataQualityJobDefinitionConstraintsResource;
        statisticsResource?: outputs.sagemaker.DataQualityJobDefinitionStatisticsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface DataQualityJobDefinitionDataQualityJobInput {
        batchTransformInput?: outputs.sagemaker.DataQualityJobDefinitionBatchTransformInput;
        endpointInput?: outputs.sagemaker.DataQualityJobDefinitionEndpointInput;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface DataQualityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.DataQualityJobDefinitionCsv;
        json?: outputs.sagemaker.DataQualityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface DataQualityJobDefinitionEndpointInput {
        endpointName: string;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.DataQualityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.DataQualityJobDefinitionEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface DataQualityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface DataQualityJobDefinitionMonitoringOutput {
        s3Output: outputs.sagemaker.DataQualityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface DataQualityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.DataQualityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface DataQualityJobDefinitionMonitoringResources {
        clusterConfig: outputs.sagemaker.DataQualityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface DataQualityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        vpcConfig?: outputs.sagemaker.DataQualityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface DataQualityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.DataQualityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The baseline statistics resource for a monitoring job.
     */
    export interface DataQualityJobDefinitionStatisticsResource {
        /**
         * The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
         */
        s3Uri?: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface DataQualityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface DataQualityJobDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface DataQualityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    /**
     * Edge device you want to create
     */
    export interface Device {
        /**
         * Description of the device
         */
        description?: string;
        /**
         * The name of the device
         */
        deviceName: string;
        /**
         * AWS Internet of Things (IoT) object name.
         */
        iotThingName?: string;
    }

    export interface DeviceFleetEdgeOutputConfig {
        /**
         * The KMS key id used for encryption on the S3 bucket
         */
        kmsKeyId?: string;
        /**
         * The Amazon Simple Storage (S3) bucket URI
         */
        s3OutputLocation: string;
    }

    /**
     * Key-value pair to associate as a tag for the resource
     */
    export interface DeviceFleetTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface DeviceTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * The CodeEditor app settings.
     */
    export interface DomainCodeEditorAppSettings {
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the CodeEditor app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with CodeEditor apps.
         */
        lifecycleConfigArns?: string[];
    }

    export interface DomainCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface DomainCustomFileSystemConfig {
        efsFileSystemConfig?: outputs.sagemaker.DomainEfsFileSystemConfig;
    }

    /**
     * A custom SageMaker image.
     */
    export interface DomainCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    export interface DomainCustomPosixUserConfig {
        gid: number;
        uid: number;
    }

    /**
     * Properties related to the Amazon Elastic Block Store volume. Must be provided if storage type is Amazon EBS and must not be provided if storage type is not Amazon EBS
     */
    export interface DomainDefaultEbsStorageSettings {
        /**
         * Default size of the Amazon EBS volume in Gb
         */
        defaultEbsVolumeSizeInGb: number;
        /**
         * Maximum size of the Amazon EBS volume in Gb. Must be greater than or equal to the DefaultEbsVolumeSizeInGb.
         */
        maximumEbsVolumeSizeInGb: number;
    }

    /**
     * A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the Create/Update Domain API is called.
     */
    export interface DomainDefaultSpaceSettings {
        /**
         * The execution role for the space.
         */
        executionRole: string;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.DomainJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.DomainKernelGatewayAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
    }

    /**
     * Default storage settings for a space.
     */
    export interface DomainDefaultSpaceStorageSettings {
        defaultEbsStorageSettings?: outputs.sagemaker.DomainDefaultEbsStorageSettings;
    }

    /**
     * A collection of settings that are required to start docker-proxy server.
     */
    export interface DomainDockerSettings {
        /**
         * The flag to enable/disable docker-proxy server
         */
        enableDockerAccess?: enums.sagemaker.DomainDockerSettingsEnableDockerAccess;
        /**
         * A list of account id's that would be used to pull images from in VpcOnly mode
         */
        vpcOnlyTrustedAccounts?: string[];
    }

    export interface DomainEfsFileSystemConfig {
        fileSystemId: string;
        fileSystemPath?: string;
    }

    /**
     * The JupyterLab app settings.
     */
    export interface DomainJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.DomainCodeRepository[];
        /**
         * A list of custom images for use for JupyterLab apps.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterLab app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with JupyterLab apps.
         */
        lifecycleConfigArns?: string[];
    }

    /**
     * The JupyterServer app settings.
     */
    export interface DomainJupyterServerAppSettings {
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface DomainKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * A collection of settings that apply to an RSessionGateway app.
     */
    export interface DomainRSessionAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * A collection of settings that configure user interaction with the RStudioServerPro app.
     */
    export interface DomainRStudioServerProAppSettings {
        /**
         * Indicates whether the current user has access to the RStudioServerPro app.
         */
        accessStatus?: enums.sagemaker.DomainRStudioServerProAppSettingsAccessStatus;
        /**
         * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
         */
        userGroup?: enums.sagemaker.DomainRStudioServerProAppSettingsUserGroup;
    }

    /**
     * A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
     */
    export interface DomainRStudioServerProDomainSettings {
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * The ARN of the execution role for the RStudioServerPro Domain-level app.
         */
        domainExecutionRoleArn: string;
        /**
         * A URL pointing to an RStudio Connect server.
         */
        rStudioConnectUrl?: string;
        /**
         * A URL pointing to an RStudio Package Manager server.
         */
        rStudioPackageManagerUrl?: string;
    }

    export interface DomainResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.DomainResourceSpecInstanceType;
        /**
         * The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
         */
        lifecycleConfigArn?: string;
        /**
         * The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The Amazon Resource Name (ARN) of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * A collection of Domain settings.
     */
    export interface DomainSettings {
        dockerSettings?: outputs.sagemaker.DomainDockerSettings;
        rStudioServerProDomainSettings?: outputs.sagemaker.DomainRStudioServerProDomainSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
         */
        securityGroupIds?: string[];
    }

    /**
     * Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
     */
    export interface DomainSharingSettings {
        /**
         * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
         */
        notebookOutputOption?: enums.sagemaker.DomainSharingSettingsNotebookOutputOption;
        /**
         * When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
         */
        s3KmsKeyId?: string;
        /**
         * When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
         */
        s3OutputPath?: string;
    }

    export interface DomainTag {
        key: string;
        value: string;
    }

    /**
     * A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
     */
    export interface DomainUserSettings {
        codeEditorAppSettings?: outputs.sagemaker.DomainCodeEditorAppSettings;
        customFileSystemConfigs?: outputs.sagemaker.DomainCustomFileSystemConfig[];
        customPosixUserConfig?: outputs.sagemaker.DomainCustomPosixUserConfig;
        /**
         * Defines which Amazon SageMaker application users are directed to by default.
         */
        defaultLandingUri?: string;
        /**
         * The execution role for the user.
         */
        executionRole: string;
        jupyterLabAppSettings?: outputs.sagemaker.DomainJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.DomainJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.DomainKernelGatewayAppSettings;
        rSessionAppSettings?: outputs.sagemaker.DomainRSessionAppSettings;
        rStudioServerProAppSettings?: outputs.sagemaker.DomainRStudioServerProAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
        /**
         * The sharing settings.
         */
        sharingSettings?: outputs.sagemaker.DomainSharingSettings;
        spaceStorageSettings?: outputs.sagemaker.DomainDefaultSpaceStorageSettings;
        /**
         * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
         */
        studioWebPortal?: enums.sagemaker.DomainUserSettingsStudioWebPortal;
    }

    export interface EndpointAlarm {
        alarmName: string;
    }

    export interface EndpointAutoRollbackConfig {
        alarms: outputs.sagemaker.EndpointAlarm[];
    }

    export interface EndpointBlueGreenUpdatePolicy {
        maximumExecutionTimeoutInSeconds?: number;
        terminationWaitInSeconds?: number;
        trafficRoutingConfiguration: outputs.sagemaker.EndpointTrafficRoutingConfig;
    }

    export interface EndpointCapacitySize {
        type: string;
        value: number;
    }

    export interface EndpointConfigAsyncInferenceClientConfig {
        maxConcurrentInvocationsPerInstance?: number;
    }

    export interface EndpointConfigAsyncInferenceConfig {
        clientConfig?: outputs.sagemaker.EndpointConfigAsyncInferenceClientConfig;
        outputConfig: outputs.sagemaker.EndpointConfigAsyncInferenceOutputConfig;
    }

    export interface EndpointConfigAsyncInferenceNotificationConfig {
        errorTopic?: string;
        includeInferenceResponseIn?: string[];
        successTopic?: string;
    }

    export interface EndpointConfigAsyncInferenceOutputConfig {
        kmsKeyId?: string;
        notificationConfig?: outputs.sagemaker.EndpointConfigAsyncInferenceNotificationConfig;
        s3FailurePath?: string;
        s3OutputPath?: string;
    }

    export interface EndpointConfigCaptureContentTypeHeader {
        csvContentTypes?: string[];
        jsonContentTypes?: string[];
    }

    export interface EndpointConfigCaptureOption {
        captureMode: string;
    }

    export interface EndpointConfigClarifyExplainerConfig {
        enableExplanations?: string;
        inferenceConfig?: outputs.sagemaker.EndpointConfigClarifyInferenceConfig;
        shapConfig: outputs.sagemaker.EndpointConfigClarifyShapConfig;
    }

    export interface EndpointConfigClarifyFeatureType {
    }

    export interface EndpointConfigClarifyHeader {
    }

    export interface EndpointConfigClarifyInferenceConfig {
        contentTemplate?: string;
        featureHeaders?: outputs.sagemaker.EndpointConfigClarifyHeader[];
        featureTypes?: outputs.sagemaker.EndpointConfigClarifyFeatureType[];
        featuresAttribute?: string;
        labelAttribute?: string;
        labelHeaders?: outputs.sagemaker.EndpointConfigClarifyHeader[];
        labelIndex?: number;
        maxPayloadInMb?: number;
        maxRecordCount?: number;
        probabilityAttribute?: string;
        probabilityIndex?: number;
    }

    export interface EndpointConfigClarifyShapBaselineConfig {
        mimeType?: string;
        shapBaseline?: string;
        shapBaselineUri?: string;
    }

    export interface EndpointConfigClarifyShapConfig {
        numberOfSamples?: number;
        seed?: number;
        shapBaselineConfig: outputs.sagemaker.EndpointConfigClarifyShapBaselineConfig;
        textConfig?: outputs.sagemaker.EndpointConfigClarifyTextConfig;
        useLogit?: boolean;
    }

    export interface EndpointConfigClarifyTextConfig {
        granularity: string;
        language: string;
    }

    export interface EndpointConfigDataCaptureConfig {
        captureContentTypeHeader?: outputs.sagemaker.EndpointConfigCaptureContentTypeHeader;
        captureOptions: outputs.sagemaker.EndpointConfigCaptureOption[];
        destinationS3Uri: string;
        enableCapture?: boolean;
        initialSamplingPercentage: number;
        kmsKeyId?: string;
    }

    export interface EndpointConfigExplainerConfig {
        clarifyExplainerConfig?: outputs.sagemaker.EndpointConfigClarifyExplainerConfig;
    }

    export interface EndpointConfigManagedInstanceScaling {
        maxInstanceCount?: number;
        minInstanceCount?: number;
        status?: string;
    }

    export interface EndpointConfigProductionVariant {
        acceleratorType?: string;
        containerStartupHealthCheckTimeoutInSeconds?: number;
        enableSsmAccess?: boolean;
        initialInstanceCount?: number;
        initialVariantWeight?: number;
        instanceType?: string;
        managedInstanceScaling?: outputs.sagemaker.EndpointConfigManagedInstanceScaling;
        modelDataDownloadTimeoutInSeconds?: number;
        modelName?: string;
        routingConfig?: outputs.sagemaker.EndpointConfigRoutingConfig;
        serverlessConfig?: outputs.sagemaker.EndpointConfigServerlessConfig;
        variantName: string;
        volumeSizeInGb?: number;
    }

    export interface EndpointConfigRoutingConfig {
        routingStrategy?: string;
    }

    export interface EndpointConfigServerlessConfig {
        maxConcurrency: number;
        memorySizeInMb: number;
        provisionedConcurrency?: number;
    }

    export interface EndpointConfigTag {
        key: string;
        value: string;
    }

    export interface EndpointConfigVpcConfig {
        securityGroupIds: string[];
        subnets: string[];
    }

    export interface EndpointDeploymentConfig {
        autoRollbackConfiguration?: outputs.sagemaker.EndpointAutoRollbackConfig;
        blueGreenUpdatePolicy?: outputs.sagemaker.EndpointBlueGreenUpdatePolicy;
        rollingUpdatePolicy?: outputs.sagemaker.EndpointRollingUpdatePolicy;
    }

    export interface EndpointRollingUpdatePolicy {
        maximumBatchSize: outputs.sagemaker.EndpointCapacitySize;
        maximumExecutionTimeoutInSeconds?: number;
        rollbackMaximumBatchSize?: outputs.sagemaker.EndpointCapacitySize;
        waitIntervalInSeconds: number;
    }

    export interface EndpointTag {
        key: string;
        value: string;
    }

    export interface EndpointTrafficRoutingConfig {
        canarySize?: outputs.sagemaker.EndpointCapacitySize;
        linearStepSize?: outputs.sagemaker.EndpointCapacitySize;
        type: string;
        waitIntervalInSeconds?: number;
    }

    export interface EndpointVariantProperty {
        variantPropertyType?: string;
    }

    export interface FeatureGroupDataCatalogConfig {
        catalog: string;
        database: string;
        tableName: string;
    }

    export interface FeatureGroupFeatureDefinition {
        featureName: string;
        featureType: enums.sagemaker.FeatureGroupFeatureDefinitionFeatureType;
    }

    export interface FeatureGroupOnlineStoreSecurityConfig {
        kmsKeyId?: string;
    }

    export interface FeatureGroupS3StorageConfig {
        kmsKeyId?: string;
        s3Uri: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FeatureGroupTag {
        key: string;
        value: string;
    }

    export interface FeatureGroupThroughputConfig {
        /**
         * For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.
         */
        provisionedReadCapacityUnits?: number;
        /**
         * For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.
         */
        provisionedWriteCapacityUnits?: number;
        throughputMode: enums.sagemaker.FeatureGroupThroughputMode;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ImageTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface InferenceComponentComputeResourceRequirements {
        maxMemoryRequiredInMb?: number;
        minMemoryRequiredInMb?: number;
        numberOfAcceleratorDevicesRequired?: number;
        numberOfCpuCoresRequired?: number;
    }

    export interface InferenceComponentContainerSpecification {
        artifactUrl?: string;
        deployedImage?: outputs.sagemaker.InferenceComponentDeployedImage;
        environment?: outputs.sagemaker.InferenceComponentEnvironmentMap;
        image?: string;
    }

    export interface InferenceComponentDeployedImage {
        resolutionTime?: string;
        resolvedImage?: string;
        specifiedImage?: string;
    }

    /**
     * Environment variables to specify on the container
     */
    export interface InferenceComponentEnvironmentMap {
    }

    /**
     * The runtime config for the inference component
     */
    export interface InferenceComponentRuntimeConfig {
        copyCount?: number;
        currentCopyCount?: number;
        desiredCopyCount?: number;
    }

    /**
     * The specification for the inference component
     */
    export interface InferenceComponentSpecification {
        computeResourceRequirements: outputs.sagemaker.InferenceComponentComputeResourceRequirements;
        container?: outputs.sagemaker.InferenceComponentContainerSpecification;
        modelName?: string;
        startupParameters?: outputs.sagemaker.InferenceComponentStartupParameters;
    }

    export interface InferenceComponentStartupParameters {
        containerStartupHealthCheckTimeoutInSeconds?: number;
        modelDataDownloadTimeoutInSeconds?: number;
    }

    /**
     * A tag in the form of a key-value pair to associate with the resource
     */
    export interface InferenceComponentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -
         */
        value: string;
    }

    /**
     * Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
     */
    export interface InferenceExperimentCaptureContentTypeHeader {
        /**
         * The list of all content type headers that SageMaker will treat as CSV and capture accordingly.
         */
        csvContentTypes?: string[];
        /**
         * The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
         */
        jsonContentTypes?: string[];
    }

    /**
     * The Amazon S3 location and configuration for storing inference request and response data.
     */
    export interface InferenceExperimentDataStorageConfig {
        contentType?: outputs.sagemaker.InferenceExperimentCaptureContentTypeHeader;
        /**
         * The Amazon S3 bucket where the inference request and response data is stored.
         */
        destination: string;
        /**
         * The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
         */
        kmsKey?: string;
    }

    /**
     * The metadata of the endpoint on which the inference experiment ran.
     */
    export interface InferenceExperimentEndpointMetadata {
        /**
         * The name of the endpoint configuration.
         */
        endpointConfigName?: string;
        endpointName: string;
        /**
         * The status of the endpoint. For possible values of the status of an endpoint.
         */
        endpointStatus?: enums.sagemaker.InferenceExperimentEndpointMetadataEndpointStatus;
    }

    /**
     * The configuration for the infrastructure that the model will be deployed to.
     */
    export interface InferenceExperimentModelInfrastructureConfig {
        /**
         * The type of the inference experiment that you want to run.
         */
        infrastructureType: enums.sagemaker.InferenceExperimentModelInfrastructureConfigInfrastructureType;
        realTimeInferenceConfig: outputs.sagemaker.InferenceExperimentRealTimeInferenceConfig;
    }

    /**
     * Contains information about the deployment options of a model.
     */
    export interface InferenceExperimentModelVariantConfig {
        infrastructureConfig: outputs.sagemaker.InferenceExperimentModelInfrastructureConfig;
        /**
         * The name of the Amazon SageMaker Model entity.
         */
        modelName: string;
        /**
         * The name of the variant.
         */
        variantName: string;
    }

    /**
     * The infrastructure configuration for deploying the model to a real-time inference endpoint.
     */
    export interface InferenceExperimentRealTimeInferenceConfig {
        /**
         * The number of instances of the type specified by InstanceType.
         */
        instanceCount: number;
        /**
         * The instance type the model is deployed to.
         */
        instanceType: string;
    }

    /**
     * The duration for which you want the inference experiment to run.
     */
    export interface InferenceExperimentSchedule {
        /**
         * The timestamp at which the inference experiment ended or will end.
         */
        endTime?: string;
        /**
         * The timestamp at which the inference experiment started or will start.
         */
        startTime?: string;
    }

    /**
     * The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
     */
    export interface InferenceExperimentShadowModeConfig {
        /**
         * List of shadow variant configurations.
         */
        shadowModelVariants: outputs.sagemaker.InferenceExperimentShadowModelVariantConfig[];
        /**
         * The name of the production variant, which takes all the inference requests.
         */
        sourceModelVariantName: string;
    }

    /**
     * The name and sampling percentage of a shadow variant.
     */
    export interface InferenceExperimentShadowModelVariantConfig {
        /**
         * The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
         */
        samplingPercentage: number;
        /**
         * The name of the shadow variant.
         */
        shadowModelVariantName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface InferenceExperimentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface ModelAccessConfig {
        acceptEula: boolean;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelBiasJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.ModelBiasJobDefinitionDatasetFormat;
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelBiasJobDefinitionBatchTransformInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelBiasJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelBiasJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelBiasJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelBiasJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelBiasJobDefinitionCsv;
        json?: outputs.sagemaker.ModelBiasJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelBiasJobDefinitionEndpointInput {
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        endpointName: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelBiasJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelBiasJobDefinitionEndpointInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * The Json format
     */
    export interface ModelBiasJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelBiasJobDefinitionModelBiasAppSpecification {
        /**
         * The S3 URI to an analysis configuration file
         */
        configUri: string;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelBiasJobDefinitionModelBiasBaselineConfig {
        baseliningJobName?: string;
        constraintsResource?: outputs.sagemaker.ModelBiasJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelBiasJobDefinitionModelBiasJobInput {
        batchTransformInput?: outputs.sagemaker.ModelBiasJobDefinitionBatchTransformInput;
        endpointInput?: outputs.sagemaker.ModelBiasJobDefinitionEndpointInput;
        groundTruthS3Input: outputs.sagemaker.ModelBiasJobDefinitionMonitoringGroundTruthS3Input;
    }

    /**
     * Ground truth input provided in S3 
     */
    export interface ModelBiasJobDefinitionMonitoringGroundTruthS3Input {
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelBiasJobDefinitionMonitoringOutput {
        s3Output: outputs.sagemaker.ModelBiasJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelBiasJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelBiasJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelBiasJobDefinitionMonitoringResources {
        clusterConfig: outputs.sagemaker.ModelBiasJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelBiasJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        vpcConfig?: outputs.sagemaker.ModelBiasJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelBiasJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelBiasJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelBiasJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelBiasJobDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelBiasJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    export interface ModelCardAdditionalInformation {
        /**
         * Caveats and recommendations for people who might use this model in their applications.
         */
        caveatsAndRecommendations?: string;
        /**
         * customer details.
         */
        customDetails?: {[key: string]: string};
        /**
         * Any ethical considerations that the author wants to provide.
         */
        ethicalConsiderations?: string;
    }

    export interface ModelCardBarChartMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardBarChartMetricType;
        value: number[];
        xAxisName?: string[];
        yAxisName?: string;
    }

    /**
     * Business details.
     */
    export interface ModelCardBusinessDetails {
        /**
         * What business problem does the model solve?
         */
        businessProblem?: string;
        /**
         * Business stakeholders.
         */
        businessStakeholders?: string;
        /**
         * Line of business.
         */
        lineOfBusiness?: string;
    }

    export interface ModelCardContainer {
        /**
         * Inference environment path. The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         */
        image: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored.
         */
        modelDataUrl?: string;
        /**
         * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         */
        nearestModelName?: string;
    }

    /**
     * The content of the model card.
     */
    export interface ModelCardContent {
        additionalInformation?: outputs.sagemaker.ModelCardAdditionalInformation;
        businessDetails?: outputs.sagemaker.ModelCardBusinessDetails;
        evaluationDetails?: outputs.sagemaker.ModelCardEvaluationDetail[];
        intendedUses?: outputs.sagemaker.ModelCardIntendedUses;
        modelOverview?: outputs.sagemaker.ModelCardModelOverview;
        modelPackageDetails?: outputs.sagemaker.ModelCardModelPackageDetails;
        trainingDetails?: outputs.sagemaker.ModelCardTrainingDetails;
    }

    /**
     * item of evaluation details
     */
    export interface ModelCardEvaluationDetail {
        datasets?: string[];
        evaluationJobArn?: string;
        evaluationObservation?: string;
        /**
         * additional attributes associated with the evaluation results.
         */
        metadata?: {[key: string]: string};
        metricGroups?: outputs.sagemaker.ModelCardMetricGroup[];
        name: string;
    }

    export interface ModelCardInferenceSpecification {
        /**
         * Contains inference related information which were used to create model package.
         */
        containers: outputs.sagemaker.ModelCardContainer[];
    }

    /**
     * Intended usage of model.
     */
    export interface ModelCardIntendedUses {
        explanationsForRiskRating?: string;
        factorsAffectingModelEfficiency?: string;
        /**
         * intended use cases.
         */
        intendedUses?: string;
        /**
         * Why the model was developed?
         */
        purposeOfModel?: string;
        riskRating?: enums.sagemaker.ModelCardRiskRating;
    }

    /**
     * Linear graph metric.
     */
    export interface ModelCardLinearGraphMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardLinearGraphMetricType;
        value: number[][];
        xAxisName?: string;
        yAxisName?: string;
    }

    export interface ModelCardMatrixMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardMatrixMetricType;
        value: number[][];
        xAxisName?: string[];
        yAxisName?: string[];
    }

    /**
     * item in metric groups
     */
    export interface ModelCardMetricGroup {
        metricData: (outputs.sagemaker.ModelCardSimpleMetric | outputs.sagemaker.ModelCardLinearGraphMetric | outputs.sagemaker.ModelCardBarChartMetric | outputs.sagemaker.ModelCardMatrixMetric)[];
        name: string;
    }

    /**
     * Overview about the model.
     */
    export interface ModelCardModelOverview {
        /**
         * Algorithm used to solve the problem.
         */
        algorithmType?: string;
        /**
         * Overview about the inference.
         */
        inferenceEnvironment?: outputs.sagemaker.ModelCardModelOverviewInferenceEnvironmentProperties;
        /**
         * Location of the model artifact.
         */
        modelArtifact?: string[];
        /**
         * Creator of model.
         */
        modelCreator?: string;
        /**
         * description of model.
         */
        modelDescription?: string;
        /**
         * SageMaker Model Arn or Non SageMaker Model id.
         */
        modelId?: string;
        /**
         * Name of the model.
         */
        modelName?: string;
        /**
         * Owner of model.
         */
        modelOwner?: string;
        /**
         * Version of the model.
         */
        modelVersion?: number;
        /**
         * Problem being solved with the model.
         */
        problemType?: string;
    }

    /**
     * Overview about the inference.
     */
    export interface ModelCardModelOverviewInferenceEnvironmentProperties {
        /**
         * SageMaker inference image uri.
         */
        containerImage?: string[];
    }

    export interface ModelCardModelPackageCreator {
        /**
         * The name of the user's profile in Studio
         */
        userProfileName?: string;
    }

    /**
     * Metadata information related to model package version
     */
    export interface ModelCardModelPackageDetails {
        /**
         * A description provided for the model approval
         */
        approvalDescription?: string;
        /**
         * Information about the user who created model package.
         */
        createdBy?: outputs.sagemaker.ModelCardModelPackageCreator;
        /**
         * The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
         */
        domain?: string;
        /**
         * Details about inference jobs that can be run with models based on this model package.
         */
        inferenceSpecification?: outputs.sagemaker.ModelCardInferenceSpecification;
        /**
         * Current approval status of model package
         */
        modelApprovalStatus?: enums.sagemaker.ModelCardModelPackageDetailsModelApprovalStatus;
        /**
         * The Amazon Resource Name (ARN) of the model package
         */
        modelPackageArn?: string;
        /**
         * A brief summary of the model package
         */
        modelPackageDescription?: string;
        /**
         * If the model is a versioned model, the name of the model group that the versioned model belongs to.
         */
        modelPackageGroupName?: string;
        /**
         * Name of the model package
         */
        modelPackageName?: string;
        /**
         * Current status of model package
         */
        modelPackageStatus?: enums.sagemaker.ModelCardModelPackageDetailsModelPackageStatus;
        /**
         * Version of the model package
         */
        modelPackageVersion?: number;
        /**
         * A list of algorithms that were used to create a model package.
         */
        sourceAlgorithms?: outputs.sagemaker.ModelCardSourceAlgorithm[];
        /**
         * The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
         */
        task?: string;
    }

    /**
     * the objective function the model will optimize for.
     */
    export interface ModelCardObjectiveFunction {
        /**
         * objective function that training job is optimized for.
         */
        function?: outputs.sagemaker.ModelCardObjectiveFunctionFunctionProperties;
        notes?: string;
    }

    /**
     * objective function that training job is optimized for.
     */
    export interface ModelCardObjectiveFunctionFunctionProperties {
        condition?: string;
        facet?: string;
        function?: enums.sagemaker.ModelCardObjectiveFunctionFunctionPropertiesFunction;
    }

    /**
     * An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.
     */
    export interface ModelCardSecurityConfig {
        /**
         * A Key Management Service key ID to use for encrypting a model card.
         */
        kmsKeyId?: string;
    }

    /**
     * metric data
     */
    export interface ModelCardSimpleMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardSimpleMetricType;
        value: number | string | boolean;
        xAxisName?: string;
        yAxisName?: string;
    }

    export interface ModelCardSourceAlgorithm {
        /**
         * The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
         */
        algorithmName: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored.
         */
        modelDataUrl?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelCardTag {
        /**
         * The tag key. Tag keys must be unique per resource.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    /**
     * Overview about the training.
     */
    export interface ModelCardTrainingDetails {
        objectiveFunction?: outputs.sagemaker.ModelCardObjectiveFunction;
        trainingJobDetails?: outputs.sagemaker.ModelCardTrainingDetailsTrainingJobDetailsProperties;
        trainingObservations?: string;
    }

    export interface ModelCardTrainingDetailsTrainingJobDetailsProperties {
        hyperParameters?: outputs.sagemaker.ModelCardTrainingHyperParameter[];
        /**
         * SageMaker Training job arn.
         */
        trainingArn?: string;
        /**
         * Location of the model datasets.
         */
        trainingDatasets?: string[];
        trainingEnvironment?: outputs.sagemaker.ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties;
        trainingMetrics?: outputs.sagemaker.ModelCardTrainingMetric[];
        userProvidedHyperParameters?: outputs.sagemaker.ModelCardTrainingHyperParameter[];
        userProvidedTrainingMetrics?: outputs.sagemaker.ModelCardTrainingMetric[];
    }

    export interface ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties {
        /**
         * SageMaker training image uri.
         */
        containerImage?: string[];
    }

    /**
     * training hyper parameter
     */
    export interface ModelCardTrainingHyperParameter {
        name: string;
        value: string;
    }

    /**
     * training metric data.
     */
    export interface ModelCardTrainingMetric {
        name: string;
        notes?: string;
        value: number;
    }

    /**
     * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
     */
    export interface ModelCardUserContext {
        /**
         * The domain associated with the user.
         */
        domainId?: string;
        /**
         * The Amazon Resource Name (ARN) of the user's profile.
         */
        userProfileArn?: string;
        /**
         * The name of the user's profile.
         */
        userProfileName?: string;
    }

    export interface ModelContainerDefinition {
        containerHostname?: string;
        environment?: any;
        image?: string;
        imageConfig?: outputs.sagemaker.ModelImageConfig;
        inferenceSpecificationName?: string;
        mode?: string;
        modelDataSource?: outputs.sagemaker.ModelDataSource;
        modelDataUrl?: string;
        modelPackageName?: string;
        multiModelConfig?: outputs.sagemaker.ModelMultiModelConfig;
    }

    export interface ModelDataSource {
        s3DataSource: outputs.sagemaker.ModelS3DataSource;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.ModelExplainabilityJobDefinitionDatasetFormat;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelExplainabilityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelExplainabilityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelExplainabilityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelExplainabilityJobDefinitionCsv;
        json?: outputs.sagemaker.ModelExplainabilityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionEndpointInput {
        endpointName: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelExplainabilityJobDefinitionEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface ModelExplainabilityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification {
        /**
         * The S3 URI to an analysis configuration file
         */
        configUri: string;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig {
        baseliningJobName?: string;
        constraintsResource?: outputs.sagemaker.ModelExplainabilityJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityJobInput {
        batchTransformInput?: outputs.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInput;
        endpointInput?: outputs.sagemaker.ModelExplainabilityJobDefinitionEndpointInput;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringOutput {
        s3Output: outputs.sagemaker.ModelExplainabilityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelExplainabilityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringResources {
        clusterConfig: outputs.sagemaker.ModelExplainabilityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelExplainabilityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        vpcConfig?: outputs.sagemaker.ModelExplainabilityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelExplainabilityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelExplainabilityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelExplainabilityJobDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelExplainabilityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    export interface ModelImageConfig {
        repositoryAccessMode: string;
        repositoryAuthConfig?: outputs.sagemaker.ModelRepositoryAuthConfig;
    }

    export interface ModelInferenceExecutionConfig {
        mode: string;
    }

    export interface ModelMultiModelConfig {
        modelCacheSetting?: string;
    }

    /**
     * Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
     */
    export interface ModelPackageAdditionalInferenceSpecificationDefinition {
        /**
         * The Amazon ECR registry path of the Docker image that contains the inference code.
         */
        containers: outputs.sagemaker.ModelPackageContainerDefinition[];
        /**
         * A description of the additional Inference specification.
         */
        description?: string;
        /**
         * A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
         */
        name: string;
        /**
         * The supported MIME types for the input data.
         */
        supportedContentTypes?: string[];
        /**
         * A list of the instance types that are used to generate inferences in real-time
         */
        supportedRealtimeInferenceInstanceTypes?: string[];
        /**
         * The supported MIME types for the output data.
         */
        supportedResponseMimeTypes?: string[];
        /**
         * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         */
        supportedTransformInstanceTypes?: string[];
    }

    /**
     * Contains bias metrics for a model.
     */
    export interface ModelPackageBias {
        postTrainingReport?: outputs.sagemaker.ModelPackageMetricsSource;
        preTrainingReport?: outputs.sagemaker.ModelPackageMetricsSource;
        report?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Describes the Docker container for the model package.
     */
    export interface ModelPackageContainerDefinition {
        /**
         * The DNS host name for the Docker container.
         */
        containerHostname?: string;
        environment?: outputs.sagemaker.ModelPackageEnvironment;
        /**
         * The machine learning framework of the model package container image.
         */
        framework?: string;
        /**
         * The framework version of the Model Package Container Image.
         */
        frameworkVersion?: string;
        /**
         * The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         */
        image: string;
        /**
         * An MD5 hash of the training algorithm that identifies the Docker image used for training.
         */
        imageDigest?: string;
        /**
         * A structure with Model Input details.
         */
        modelDataUrl?: string;
        modelInput?: outputs.sagemaker.ModelPackageContainerDefinitionModelInputProperties;
        /**
         * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         */
        nearestModelName?: string;
    }

    export interface ModelPackageContainerDefinitionModelInputProperties {
        /**
         * The input configuration object for the model.
         */
        dataInputConfig: string;
    }

    /**
     * The metadata properties associated with the model package versions.
     */
    export interface ModelPackageCustomerMetadataProperties {
    }

    /**
     * Describes the input source of a transform job and the way the transform job consumes it.
     */
    export interface ModelPackageDataSource {
        s3DataSource: outputs.sagemaker.ModelPackageS3DataSource;
    }

    /**
     * Represents the drift check baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckBaselines {
        bias?: outputs.sagemaker.ModelPackageDriftCheckBias;
        explainability?: outputs.sagemaker.ModelPackageDriftCheckExplainability;
        modelDataQuality?: outputs.sagemaker.ModelPackageDriftCheckModelDataQuality;
        modelQuality?: outputs.sagemaker.ModelPackageDriftCheckModelQuality;
    }

    /**
     * Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckBias {
        configFile?: outputs.sagemaker.ModelPackageFileSource;
        postTrainingConstraints?: outputs.sagemaker.ModelPackageMetricsSource;
        preTrainingConstraints?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Contains explainability metrics for a model.
     */
    export interface ModelPackageDriftCheckExplainability {
        configFile?: outputs.sagemaker.ModelPackageFileSource;
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckModelDataQuality {
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckModelQuality {
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Sets the environment variables in the Docker container
     */
    export interface ModelPackageEnvironment {
    }

    /**
     * Contains explainability metrics for a model.
     */
    export interface ModelPackageExplainability {
        report?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents a File Source Object.
     */
    export interface ModelPackageFileSource {
        /**
         * The digest of the file source.
         */
        contentDigest?: string;
        /**
         * The type of content stored in the file source.
         */
        contentType?: string;
        /**
         * The Amazon S3 URI for the file source.
         */
        s3Uri: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelPackageGroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Details about inference jobs that can be run with models based on this model package.
     */
    export interface ModelPackageInferenceSpecification {
        /**
         * The Amazon ECR registry path of the Docker image that contains the inference code.
         */
        containers: outputs.sagemaker.ModelPackageContainerDefinition[];
        /**
         * The supported MIME types for the input data.
         */
        supportedContentTypes: string[];
        /**
         * A list of the instance types that are used to generate inferences in real-time
         */
        supportedRealtimeInferenceInstanceTypes?: string[];
        /**
         * The supported MIME types for the output data.
         */
        supportedResponseMimeTypes: string[];
        /**
         * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         */
        supportedTransformInstanceTypes?: string[];
    }

    /**
     * Metadata properties of the tracking entity, trial, or trial component.
     */
    export interface ModelPackageMetadataProperties {
        /**
         * The commit ID.
         */
        commitId?: string;
        /**
         * The entity this entity was generated by.
         */
        generatedBy?: string;
        /**
         * The project ID metadata.
         */
        projectId?: string;
        /**
         * The repository metadata.
         */
        repository?: string;
    }

    /**
     * Represents a Metric Source Object.
     */
    export interface ModelPackageMetricsSource {
        /**
         * The digest of the metric source.
         */
        contentDigest?: string;
        /**
         * The type of content stored in the metric source.
         */
        contentType: string;
        /**
         * The Amazon S3 URI for the metric source.
         */
        s3Uri: string;
    }

    /**
     * Metrics that measure the quality of the input data for a model.
     */
    export interface ModelPackageModelDataQuality {
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * A structure that contains model metrics reports.
     */
    export interface ModelPackageModelMetrics {
        bias?: outputs.sagemaker.ModelPackageBias;
        explainability?: outputs.sagemaker.ModelPackageExplainability;
        modelDataQuality?: outputs.sagemaker.ModelPackageModelDataQuality;
        modelQuality?: outputs.sagemaker.ModelPackageModelQuality;
    }

    /**
     * Metrics that measure the quality of a model.
     */
    export interface ModelPackageModelQuality {
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Describes the S3 data source.
     */
    export interface ModelPackageS3DataSource {
        /**
         * The S3 Data Source Type
         */
        s3DataType: enums.sagemaker.ModelPackageS3DataSourceS3DataType;
        /**
         * Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
         */
        s3Uri: string;
    }

    /**
     * Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
     */
    export interface ModelPackageSourceAlgorithm {
        /**
         * The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
         */
        algorithmName: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
         */
        modelDataUrl?: string;
    }

    /**
     * Details about the algorithm that was used to create the model package.
     */
    export interface ModelPackageSourceAlgorithmSpecification {
        /**
         * A list of algorithms that were used to create a model package.
         */
        sourceAlgorithms: outputs.sagemaker.ModelPackageSourceAlgorithm[];
    }

    /**
     * Details about the current status of the model package.
     */
    export interface ModelPackageStatusDetails {
        validationStatuses?: outputs.sagemaker.ModelPackageStatusItem[];
    }

    /**
     * Represents the overall status of a model package.
     */
    export interface ModelPackageStatusItem {
        /**
         * If the overall status is Failed, the reason for the failure.
         */
        failureReason?: string;
        /**
         * The name of the model package for which the overall status is being reported.
         */
        name: string;
        /**
         * The current status.
         */
        status: enums.sagemaker.ModelPackageStatusItemStatus;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelPackageTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Describes the input source of a transform job and the way the transform job consumes it.
     */
    export interface ModelPackageTransformInput {
        /**
         * If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
         */
        compressionType?: enums.sagemaker.ModelPackageTransformInputCompressionType;
        /**
         * The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
         */
        contentType?: string;
        dataSource: outputs.sagemaker.ModelPackageDataSource;
        /**
         * The method to use to split the transform job's data files into smaller batches. 
         */
        splitType?: enums.sagemaker.ModelPackageTransformInputSplitType;
    }

    /**
     * Defines the input needed to run a transform job using the inference specification specified in the algorithm.
     */
    export interface ModelPackageTransformJobDefinition {
        /**
         * A string that determines the number of records included in a single mini-batch.
         */
        batchStrategy?: enums.sagemaker.ModelPackageTransformJobDefinitionBatchStrategy;
        environment?: outputs.sagemaker.ModelPackageEnvironment;
        /**
         * The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
         */
        maxConcurrentTransforms?: number;
        /**
         * The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
         */
        maxPayloadInMb?: number;
        transformInput: outputs.sagemaker.ModelPackageTransformInput;
        transformOutput: outputs.sagemaker.ModelPackageTransformOutput;
        transformResources: outputs.sagemaker.ModelPackageTransformResources;
    }

    /**
     * Describes the results of a transform job.
     */
    export interface ModelPackageTransformOutput {
        /**
         * The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
         */
        accept?: string;
        /**
         * Defines how to assemble the results of the transform job as a single S3 object.
         */
        assembleWith?: enums.sagemaker.ModelPackageTransformOutputAssembleWith;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
         */
        s3OutputPath: string;
    }

    /**
     * Describes the resources, including ML instance types and ML instance count, to use for transform job.
     */
    export interface ModelPackageTransformResources {
        /**
         * The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the transform job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
         */
        volumeKmsKeyId?: string;
    }

    /**
     * Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
     */
    export interface ModelPackageValidationProfile {
        /**
         * The name of the profile for the model package.
         */
        profileName: string;
        transformJobDefinition: outputs.sagemaker.ModelPackageTransformJobDefinition;
    }

    /**
     * Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
     */
    export interface ModelPackageValidationSpecification {
        validationProfiles: outputs.sagemaker.ModelPackageValidationProfile[];
        /**
         * The IAM roles to be used for the validation of the model package.
         */
        validationRole: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelQualityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.ModelQualityJobDefinitionDatasetFormat;
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelQualityJobDefinitionBatchTransformInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelQualityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelQualityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelQualityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelQualityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelQualityJobDefinitionCsv;
        json?: outputs.sagemaker.ModelQualityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelQualityJobDefinitionEndpointInput {
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        endpointName: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelQualityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelQualityJobDefinitionEndpointInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * The Json format
     */
    export interface ModelQualityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelQualityJobDefinitionModelQualityAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        problemType: enums.sagemaker.ModelQualityJobDefinitionProblemType;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelQualityJobDefinitionModelQualityBaselineConfig {
        baseliningJobName?: string;
        constraintsResource?: outputs.sagemaker.ModelQualityJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelQualityJobDefinitionModelQualityJobInput {
        batchTransformInput?: outputs.sagemaker.ModelQualityJobDefinitionBatchTransformInput;
        endpointInput?: outputs.sagemaker.ModelQualityJobDefinitionEndpointInput;
        groundTruthS3Input: outputs.sagemaker.ModelQualityJobDefinitionMonitoringGroundTruthS3Input;
    }

    /**
     * Ground truth input provided in S3 
     */
    export interface ModelQualityJobDefinitionMonitoringGroundTruthS3Input {
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelQualityJobDefinitionMonitoringOutput {
        s3Output: outputs.sagemaker.ModelQualityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelQualityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelQualityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelQualityJobDefinitionMonitoringResources {
        clusterConfig: outputs.sagemaker.ModelQualityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelQualityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        vpcConfig?: outputs.sagemaker.ModelQualityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelQualityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelQualityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelQualityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ModelQualityJobDefinitionTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelQualityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    export interface ModelRepositoryAuthConfig {
        repositoryCredentialsProviderArn: string;
    }

    export interface ModelS3DataSource {
        compressionType: string;
        modelAccessConfig?: outputs.sagemaker.ModelAccessConfig;
        s3DataType: string;
        s3Uri: string;
    }

    export interface ModelTag {
        key: string;
        value: string;
    }

    export interface ModelVpcConfig {
        securityGroupIds: string[];
        subnets: string[];
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface MonitoringScheduleBaselineConfig {
        constraintsResource?: outputs.sagemaker.MonitoringScheduleConstraintsResource;
        statisticsResource?: outputs.sagemaker.MonitoringScheduleStatisticsResource;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface MonitoringScheduleBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.MonitoringScheduleDatasetFormat;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.MonitoringScheduleBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.MonitoringScheduleBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface MonitoringScheduleClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The configuration object that specifies the monitoring schedule and defines the monitoring job.
     */
    export interface MonitoringScheduleConfig {
        monitoringJobDefinition?: outputs.sagemaker.MonitoringScheduleMonitoringJobDefinition;
        /**
         * Name of the job definition
         */
        monitoringJobDefinitionName?: string;
        monitoringType?: enums.sagemaker.MonitoringScheduleMonitoringType;
        scheduleConfig?: outputs.sagemaker.MonitoringScheduleScheduleConfig;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface MonitoringScheduleConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface MonitoringScheduleCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface MonitoringScheduleDatasetFormat {
        csv?: outputs.sagemaker.MonitoringScheduleCsv;
        json?: outputs.sagemaker.MonitoringScheduleJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface MonitoringScheduleEndpointInput {
        endpointName: string;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.MonitoringScheduleEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.MonitoringScheduleEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface MonitoringScheduleJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface MonitoringScheduleMonitoringAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Summary of information about monitoring job
     */
    export interface MonitoringScheduleMonitoringExecutionSummary {
        /**
         * The time at which the monitoring job was created.
         */
        creationTime: string;
        endpointName?: string;
        /**
         * Contains the reason a monitoring job failed, if it failed.
         */
        failureReason?: string;
        /**
         * A timestamp that indicates the last time the monitoring job was modified.
         */
        lastModifiedTime: string;
        /**
         * The status of the monitoring job.
         */
        monitoringExecutionStatus: enums.sagemaker.MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus;
        monitoringScheduleName: string;
        /**
         * The Amazon Resource Name (ARN) of the monitoring job.
         */
        processingJobArn?: string;
        /**
         * The time the monitoring job was scheduled.
         */
        scheduledTime: string;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringInput {
        batchTransformInput?: outputs.sagemaker.MonitoringScheduleBatchTransformInput;
        endpointInput?: outputs.sagemaker.MonitoringScheduleEndpointInput;
    }

    /**
     * Defines the monitoring job.
     */
    export interface MonitoringScheduleMonitoringJobDefinition {
        baselineConfig?: outputs.sagemaker.MonitoringScheduleBaselineConfig;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        monitoringAppSpecification: outputs.sagemaker.MonitoringScheduleMonitoringAppSpecification;
        monitoringInputs: outputs.sagemaker.MonitoringScheduleMonitoringInput[];
        monitoringOutputConfig: outputs.sagemaker.MonitoringScheduleMonitoringOutputConfig;
        monitoringResources: outputs.sagemaker.MonitoringScheduleMonitoringResources;
        networkConfig?: outputs.sagemaker.MonitoringScheduleNetworkConfig;
        /**
         * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
         */
        roleArn: string;
        stoppingCondition?: outputs.sagemaker.MonitoringScheduleStoppingCondition;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringOutput {
        s3Output: outputs.sagemaker.MonitoringScheduleS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface MonitoringScheduleMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.MonitoringScheduleMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringResources {
        clusterConfig: outputs.sagemaker.MonitoringScheduleClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface MonitoringScheduleNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        vpcConfig?: outputs.sagemaker.MonitoringScheduleVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface MonitoringScheduleS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.MonitoringScheduleS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Configuration details about the monitoring schedule.
     */
    export interface MonitoringScheduleScheduleConfig {
        /**
         * Data Analysis end time, e.g. PT0H
         */
        dataAnalysisEndTime?: string;
        /**
         * Data Analysis start time, e.g. -PT1H
         */
        dataAnalysisStartTime?: string;
        /**
         * A cron expression or 'NOW' that describes details about the monitoring schedule.
         */
        scheduleExpression: string;
    }

    /**
     * The baseline statistics resource for a monitoring job.
     */
    export interface MonitoringScheduleStatisticsResource {
        /**
         * The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
         */
        s3Uri?: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface MonitoringScheduleStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MonitoringScheduleTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface MonitoringScheduleVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    export interface NotebookInstanceInstanceMetadataServiceConfiguration {
        minimumInstanceMetadataServiceVersion: string;
    }

    export interface NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook {
        content?: string;
    }

    export interface NotebookInstanceTag {
        key: string;
        value: string;
    }

    export interface OfflineStoreConfigProperties {
        dataCatalogConfig?: outputs.sagemaker.FeatureGroupDataCatalogConfig;
        disableGlueTableCreation?: boolean;
        s3StorageConfig: outputs.sagemaker.FeatureGroupS3StorageConfig;
        tableFormat?: enums.sagemaker.FeatureGroupTableFormat;
    }

    export interface OnlineStoreConfigProperties {
        enableOnlineStore?: boolean;
        securityConfig?: outputs.sagemaker.FeatureGroupOnlineStoreSecurityConfig;
        storageType?: enums.sagemaker.FeatureGroupStorageType;
    }

    export interface ParallelismConfigurationProperties {
        /**
         * Maximum parallel execution steps
         */
        maxParallelExecutionSteps: number;
    }

    export interface PipelineDefinition0Properties {
        /**
         * A specification that defines the pipeline in JSON format.
         */
        pipelineDefinitionBody: string;
    }

    export interface PipelineDefinition1Properties {
        pipelineDefinitionS3Location: outputs.sagemaker.PipelineS3Location;
    }

    export interface PipelineS3Location {
        /**
         * The name of the S3 bucket where the PipelineDefinition file is stored.
         */
        bucket: string;
        /**
         * The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
         */
        eTag?: string;
        /**
         * The file name of the PipelineDefinition file (Amazon S3 object name).
         */
        key: string;
        /**
         * For versioning-enabled buckets, a specific version of the PipelineDefinition file.
         */
        version?: string;
    }

    export interface PipelineTag {
        key: string;
        value: string;
    }

    /**
     * Information about a parameter used to provision a product.
     */
    export interface ProjectProvisioningParameter {
        /**
         * The parameter key.
         */
        key: string;
        /**
         * The parameter value.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ProjectTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    /**
     * Provisioned ServiceCatalog  Details
     */
    export interface ServiceCatalogProvisionedProductDetailsProperties {
        provisionedProductId?: string;
        provisionedProductStatusMessage?: string;
    }

    /**
     * Input ServiceCatalog Provisioning Details
     */
    export interface ServiceCatalogProvisioningDetailsProperties {
        pathId?: string;
        productId: string;
        provisioningArtifactId?: string;
        /**
         * Parameters specified by the administrator that are required for provisioning the product.
         */
        provisioningParameters?: outputs.sagemaker.ProjectProvisioningParameter[];
    }

    /**
     * The CodeEditor app settings.
     */
    export interface SpaceCodeEditorAppSettings {
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    export interface SpaceCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface SpaceCustomFileSystem {
        efsFileSystem?: outputs.sagemaker.SpaceEfsFileSystem;
    }

    /**
     * A custom SageMaker image.
     */
    export interface SpaceCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    /**
     * Properties related to the space's Amazon Elastic Block Store volume.
     */
    export interface SpaceEbsStorageSettings {
        /**
         * Size of the Amazon EBS volume in Gb
         */
        ebsVolumeSizeInGb: number;
    }

    export interface SpaceEfsFileSystem {
        fileSystemId: string;
    }

    /**
     * The JupyterServer app settings.
     */
    export interface SpaceJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.SpaceCodeRepository[];
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    /**
     * The JupyterServer app settings.
     */
    export interface SpaceJupyterServerAppSettings {
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface SpaceKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.SpaceCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    export interface SpaceOwnershipSettings {
        ownerUserProfileName: string;
    }

    export interface SpaceResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.SpaceResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the CreateSpace API is called.
     */
    export interface SpaceSettings {
        appType?: enums.sagemaker.SpaceAppType;
        /**
         * The CodeEditor app settings.
         */
        codeEditorAppSettings?: outputs.sagemaker.SpaceCodeEditorAppSettings;
        customFileSystems?: outputs.sagemaker.SpaceCustomFileSystem[];
        /**
         * The JupyterLab app settings.
         */
        jupyterLabAppSettings?: outputs.sagemaker.SpaceJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.SpaceJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.SpaceKernelGatewayAppSettings;
        /**
         * Default storage settings for a space.
         */
        spaceStorageSettings?: outputs.sagemaker.SpaceStorageSettings;
    }

    export interface SpaceSharingSettings {
        sharingType: enums.sagemaker.SpaceSharingSettingsSharingType;
    }

    export interface SpaceStorageSettings {
        ebsStorageSettings?: outputs.sagemaker.SpaceEbsStorageSettings;
    }

    export interface SpaceTag {
        key: string;
        value: string;
    }

    /**
     * The CodeEditor app settings.
     */
    export interface UserProfileCodeEditorAppSettings {
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the CodeEditor app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with CodeEditor apps.
         */
        lifecycleConfigArns?: string[];
    }

    export interface UserProfileCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface UserProfileCustomFileSystemConfig {
        efsFileSystemConfig?: outputs.sagemaker.UserProfileEfsFileSystemConfig;
    }

    /**
     * A custom SageMaker image.
     */
    export interface UserProfileCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    export interface UserProfileCustomPosixUserConfig {
        gid: number;
        uid: number;
    }

    /**
     * Properties related to the Amazon Elastic Block Store volume.
     */
    export interface UserProfileDefaultEbsStorageSettings {
        /**
         * Default size of the Amazon EBS volume in Gb
         */
        defaultEbsVolumeSizeInGb: number;
        /**
         * Maximum size of the Amazon EBS volume in Gb. Must be greater than or equal to the DefaultEbsVolumeSizeInGb.
         */
        maximumEbsVolumeSizeInGb: number;
    }

    /**
     * Default storage settings for a space.
     */
    export interface UserProfileDefaultSpaceStorageSettings {
        defaultEbsStorageSettings?: outputs.sagemaker.UserProfileDefaultEbsStorageSettings;
    }

    export interface UserProfileEfsFileSystemConfig {
        fileSystemId: string;
        fileSystemPath?: string;
    }

    /**
     * The JupyterLab app settings.
     */
    export interface UserProfileJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.UserProfileCodeRepository[];
        /**
         * A list of custom images available for use for JupyterLab apps
         */
        customImages?: outputs.sagemaker.UserProfileCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterLab app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with JupyterLab apps.
         */
        lifecycleConfigArns?: string[];
    }

    /**
     * The JupyterServer app settings.
     */
    export interface UserProfileJupyterServerAppSettings {
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface UserProfileKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.UserProfileCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
    }

    /**
     * A collection of settings that configure user interaction with the RStudioServerPro app.
     */
    export interface UserProfileRStudioServerProAppSettings {
        /**
         * Indicates whether the current user has access to the RStudioServerPro app.
         */
        accessStatus?: enums.sagemaker.UserProfileRStudioServerProAppSettingsAccessStatus;
        /**
         * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
         */
        userGroup?: enums.sagemaker.UserProfileRStudioServerProAppSettingsUserGroup;
    }

    export interface UserProfileResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.UserProfileResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
     */
    export interface UserProfileSharingSettings {
        /**
         * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
         */
        notebookOutputOption?: enums.sagemaker.UserProfileSharingSettingsNotebookOutputOption;
        /**
         * When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
         */
        s3KmsKeyId?: string;
        /**
         * When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
         */
        s3OutputPath?: string;
    }

    export interface UserProfileTag {
        key: string;
        value: string;
    }

    /**
     * A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
     */
    export interface UserProfileUserSettings {
        codeEditorAppSettings?: outputs.sagemaker.UserProfileCodeEditorAppSettings;
        customFileSystemConfigs?: outputs.sagemaker.UserProfileCustomFileSystemConfig[];
        customPosixUserConfig?: outputs.sagemaker.UserProfileCustomPosixUserConfig;
        /**
         * Defines which Amazon SageMaker application users are directed to by default.
         */
        defaultLandingUri?: string;
        /**
         * The user profile Amazon Resource Name (ARN).
         */
        executionRole?: string;
        jupyterLabAppSettings?: outputs.sagemaker.UserProfileJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.UserProfileJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.UserProfileKernelGatewayAppSettings;
        rStudioServerProAppSettings?: outputs.sagemaker.UserProfileRStudioServerProAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
        /**
         * The sharing settings.
         */
        sharingSettings?: outputs.sagemaker.UserProfileSharingSettings;
        spaceStorageSettings?: outputs.sagemaker.UserProfileDefaultSpaceStorageSettings;
        /**
         * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
         */
        studioWebPortal?: enums.sagemaker.UserProfileUserSettingsStudioWebPortal;
    }

    export interface WorkteamCognitoMemberDefinition {
        cognitoClientId: string;
        cognitoUserGroup: string;
        cognitoUserPool: string;
    }

    export interface WorkteamMemberDefinition {
        cognitoMemberDefinition?: outputs.sagemaker.WorkteamCognitoMemberDefinition;
        oidcMemberDefinition?: outputs.sagemaker.WorkteamOidcMemberDefinition;
    }

    export interface WorkteamNotificationConfiguration {
        notificationTopicArn: string;
    }

    export interface WorkteamOidcMemberDefinition {
        oidcGroups: string[];
    }

    export interface WorkteamTag {
        key: string;
        value: string;
    }

}

export namespace scheduler {
    /**
     * This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
     */
    export interface ScheduleAwsVpcConfiguration {
        assignPublicIp?: enums.scheduler.ScheduleAssignPublicIp;
        /**
         * Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
         */
        subnets: string[];
    }

    /**
     * The details of a capacity provider strategy.
     */
    export interface ScheduleCapacityProviderStrategyItem {
        /**
         * The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
         */
        weight?: number;
    }

    /**
     * A DeadLetterConfig object that contains information about a dead-letter queue configuration.
     */
    export interface ScheduleDeadLetterConfig {
        /**
         * The ARN of the SQS queue specified as the target for the dead-letter queue.
         */
        arn?: string;
    }

    /**
     * The custom parameters to be used when the target is an Amazon ECS task.
     */
    export interface ScheduleEcsParameters {
        /**
         * The capacity provider strategy to use for the task.
         */
        capacityProviderStrategy?: outputs.scheduler.ScheduleCapacityProviderStrategyItem[];
        /**
         * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
         */
        enableEcsManagedTags?: boolean;
        /**
         * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
         */
        enableExecuteCommand?: boolean;
        /**
         * Specifies an ECS task group for the task. The maximum length is 255 characters.
         */
        group?: string;
        launchType?: enums.scheduler.ScheduleLaunchType;
        networkConfiguration?: outputs.scheduler.ScheduleNetworkConfiguration;
        /**
         * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
         */
        placementConstraints?: outputs.scheduler.SchedulePlacementConstraint[];
        /**
         * The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
         */
        placementStrategy?: outputs.scheduler.SchedulePlacementStrategy[];
        /**
         * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
         */
        platformVersion?: string;
        propagateTags?: enums.scheduler.SchedulePropagateTags;
        /**
         * The reference ID to use for the task.
         */
        referenceId?: string;
        /**
         * The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
         */
        tags?: outputs.scheduler.ScheduleTagMap[];
        /**
         * The number of tasks to create based on TaskDefinition. The default is 1.
         */
        taskCount?: number;
        /**
         * The ARN of the task definition to use if the event target is an Amazon ECS task.
         */
        taskDefinitionArn: string;
    }

    /**
     * EventBridge PutEvent predefined target type.
     */
    export interface ScheduleEventBridgeParameters {
        /**
         * Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
         */
        detailType: string;
        /**
         * The source of the event.
         */
        source: string;
    }

    /**
     * Flexible time window allows configuration of a window within which a schedule can be invoked
     */
    export interface ScheduleFlexibleTimeWindow {
        /**
         * The maximum time window during which a schedule can be invoked.
         */
        maximumWindowInMinutes?: number;
        mode: enums.scheduler.ScheduleFlexibleTimeWindowMode;
    }

    /**
     * Tag to associate with the resource.
     */
    export interface ScheduleGroupTag {
        /**
         * Key for the tag
         */
        key: string;
        /**
         * Value for the tag
         */
        value: string;
    }

    /**
     * The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
     */
    export interface ScheduleKinesisParameters {
        /**
         * The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
         */
        partitionKey: string;
    }

    /**
     * This structure specifies the network configuration for an ECS task.
     */
    export interface ScheduleNetworkConfiguration {
        awsvpcConfiguration?: outputs.scheduler.ScheduleAwsVpcConfiguration;
    }

    /**
     * An object representing a constraint on task placement.
     */
    export interface SchedulePlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
         */
        expression?: string;
        type?: enums.scheduler.SchedulePlacementConstraintType;
    }

    /**
     * The task placement strategy for a task or service.
     */
    export interface SchedulePlacementStrategy {
        /**
         * The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
         */
        field?: string;
        type?: enums.scheduler.SchedulePlacementStrategyType;
    }

    /**
     * A RetryPolicy object that includes information about the retry policy settings.
     */
    export interface ScheduleRetryPolicy {
        /**
         * The maximum amount of time, in seconds, to continue to make retry attempts.
         */
        maximumEventAgeInSeconds?: number;
        /**
         * The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
         */
        maximumRetryAttempts?: number;
    }

    /**
     * Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
     */
    export interface ScheduleSageMakerPipelineParameter {
        /**
         * Name of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        name: string;
        /**
         * Value of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        value: string;
    }

    /**
     * These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
     */
    export interface ScheduleSageMakerPipelineParameters {
        /**
         * List of Parameter names and values for SageMaker Model Building Pipeline execution.
         */
        pipelineParameterList?: outputs.scheduler.ScheduleSageMakerPipelineParameter[];
    }

    /**
     * Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
     */
    export interface ScheduleSqsParameters {
        /**
         * The FIFO message group ID to use as the target.
         */
        messageGroupId?: string;
    }

    export interface ScheduleTagMap {
    }

    /**
     * The schedule target.
     */
    export interface ScheduleTarget {
        /**
         * The Amazon Resource Name (ARN) of the target.
         */
        arn: string;
        deadLetterConfig?: outputs.scheduler.ScheduleDeadLetterConfig;
        ecsParameters?: outputs.scheduler.ScheduleEcsParameters;
        eventBridgeParameters?: outputs.scheduler.ScheduleEventBridgeParameters;
        /**
         * The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
         */
        input?: string;
        kinesisParameters?: outputs.scheduler.ScheduleKinesisParameters;
        retryPolicy?: outputs.scheduler.ScheduleRetryPolicy;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
         */
        roleArn: string;
        sageMakerPipelineParameters?: outputs.scheduler.ScheduleSageMakerPipelineParameters;
        sqsParameters?: outputs.scheduler.ScheduleSqsParameters;
    }

}

export namespace secretsmanager {
    export interface RotationScheduleHostedRotationLambda {
        excludeCharacters?: string;
        kmsKeyArn?: string;
        masterSecretArn?: string;
        masterSecretKmsKeyArn?: string;
        rotationLambdaName?: string;
        rotationType: string;
        runtime?: string;
        superuserSecretArn?: string;
        superuserSecretKmsKeyArn?: string;
        vpcSecurityGroupIds?: string;
        vpcSubnetIds?: string;
    }

    export interface RotationScheduleRotationRules {
        automaticallyAfterDays?: number;
        duration?: string;
        scheduleExpression?: string;
    }

    export interface SecretGenerateSecretString {
        /**
         * A string that excludes characters in the generated password. By default, all characters from the included sets can be used. The string can be a minimum length of 0 characters and a maximum length of 7168 characters. 
         */
        excludeCharacters?: string;
        /**
         * Specifies the generated password should not include lowercase letters. By default, ecrets Manager disables this parameter, and the generated password can include lowercase False, and the generated password can include lowercase letters.
         */
        excludeLowercase?: boolean;
        /**
         * Specifies that the generated password should exclude digits. By default, Secrets Manager does not enable the parameter, False, and the generated password can include digits.
         */
        excludeNumbers?: boolean;
        /**
         * Specifies that the generated password should not include punctuation characters. The default if you do not include this switch parameter is that punctuation characters can be included. 
         */
        excludePunctuation?: boolean;
        /**
         * Specifies that the generated password should not include uppercase letters. The default behavior is False, and the generated password can include uppercase letters. 
         */
        excludeUppercase?: boolean;
        /**
         * The JSON key name used to add the generated password to the JSON structure specified by the SecretStringTemplate parameter. If you specify this parameter, then you must also specify SecretStringTemplate. 
         */
        generateStringKey?: string;
        /**
         * Specifies that the generated password can include the space character. By default, Secrets Manager disables this parameter, and the generated password doesn't include space
         */
        includeSpace?: boolean;
        /**
         * The desired length of the generated password. The default value if you do not include this parameter is 32 characters. 
         */
        passwordLength?: number;
        /**
         * Specifies whether the generated password must include at least one of every allowed character type. By default, Secrets Manager enables this parameter, and the generated password includes at least one of every character type.
         */
        requireEachIncludedType?: boolean;
        /**
         * A properly structured JSON string that the generated password can be added to. If you specify this parameter, then you must also specify GenerateStringKey.
         */
        secretStringTemplate?: string;
    }

    /**
     * A custom type that specifies a Region and the KmsKeyId for a replica secret.
     */
    export interface SecretReplicaRegion {
        /**
         * The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses aws/secretsmanager.
         */
        kmsKeyId?: string;
        /**
         * (Optional) A string that represents a Region, for example "us-east-1".
         */
        region: string;
    }

    /**
     * A list of tags to attach to the secret. Each tag is a key and value pair of strings in a JSON text string.
     */
    export interface SecretTag {
        /**
         * The value for the tag. You can specify a value that's 1 to 256 characters in length.
         */
        key: string;
        /**
         * The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws.
         */
        value: string;
    }

}

export namespace securityhub {
    export interface AutomationRuleDateFilter {
        dateRange?: outputs.securityhub.AutomationRuleDateRange;
        end?: string;
        start?: string;
    }

    export interface AutomationRuleDateRange {
        unit: enums.securityhub.AutomationRuleDateRangeUnit;
        value: number;
    }

    export interface AutomationRuleMapFilter {
        comparison: enums.securityhub.AutomationRuleMapFilterComparison;
        key: string;
        value: string;
    }

    export interface AutomationRuleNoteUpdate {
        text: string;
        updatedBy: string;
    }

    export interface AutomationRuleNumberFilter {
        eq?: number;
        gte?: number;
        lte?: number;
    }

    export interface AutomationRuleRelatedFinding {
        id: string;
        productArn: string;
    }

    export interface AutomationRuleSeverityUpdate {
        label?: enums.securityhub.AutomationRuleSeverityUpdateLabel;
        normalized?: number;
        product?: number;
    }

    export interface AutomationRuleStringFilter {
        comparison: enums.securityhub.AutomationRuleStringFilterComparison;
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AutomationRuleTags {
    }

    export interface AutomationRuleWorkflowUpdate {
        status: enums.securityhub.AutomationRuleWorkflowUpdateStatus;
    }

    export interface AutomationRulemap {
    }

    export interface AutomationRulesAction {
        findingFieldsUpdate: outputs.securityhub.AutomationRulesFindingFieldsUpdate;
        type: enums.securityhub.AutomationRulesActionType;
    }

    export interface AutomationRulesFindingFieldsUpdate {
        confidence?: number;
        criticality?: number;
        /**
         * Note added to the finding
         */
        note?: outputs.securityhub.AutomationRuleNoteUpdate;
        relatedFindings?: outputs.securityhub.AutomationRuleRelatedFinding[];
        /**
         * Severity of the finding
         */
        severity?: outputs.securityhub.AutomationRuleSeverityUpdate;
        types?: string[];
        userDefinedFields?: outputs.securityhub.AutomationRulemap;
        verificationState?: enums.securityhub.AutomationRulesFindingFieldsUpdateVerificationState;
        /**
         * Workflow status set for the finding
         */
        workflow?: outputs.securityhub.AutomationRuleWorkflowUpdate;
    }

    export interface AutomationRulesFindingFilters {
        awsAccountId?: outputs.securityhub.AutomationRuleStringFilter[];
        companyName?: outputs.securityhub.AutomationRuleStringFilter[];
        complianceAssociatedStandardsId?: outputs.securityhub.AutomationRuleStringFilter[];
        complianceSecurityControlId?: outputs.securityhub.AutomationRuleStringFilter[];
        complianceStatus?: outputs.securityhub.AutomationRuleStringFilter[];
        confidence?: outputs.securityhub.AutomationRuleNumberFilter[];
        createdAt?: outputs.securityhub.AutomationRuleDateFilter[];
        criticality?: outputs.securityhub.AutomationRuleNumberFilter[];
        description?: outputs.securityhub.AutomationRuleStringFilter[];
        firstObservedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        generatorId?: outputs.securityhub.AutomationRuleStringFilter[];
        id?: outputs.securityhub.AutomationRuleStringFilter[];
        lastObservedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        noteText?: outputs.securityhub.AutomationRuleStringFilter[];
        noteUpdatedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        noteUpdatedBy?: outputs.securityhub.AutomationRuleStringFilter[];
        productArn?: outputs.securityhub.AutomationRuleStringFilter[];
        productName?: outputs.securityhub.AutomationRuleStringFilter[];
        recordState?: outputs.securityhub.AutomationRuleStringFilter[];
        relatedFindingsId?: outputs.securityhub.AutomationRuleStringFilter[];
        relatedFindingsProductArn?: outputs.securityhub.AutomationRuleStringFilter[];
        resourceDetailsOther?: outputs.securityhub.AutomationRuleMapFilter[];
        resourceId?: outputs.securityhub.AutomationRuleStringFilter[];
        resourcePartition?: outputs.securityhub.AutomationRuleStringFilter[];
        resourceRegion?: outputs.securityhub.AutomationRuleStringFilter[];
        resourceTags?: outputs.securityhub.AutomationRuleMapFilter[];
        resourceType?: outputs.securityhub.AutomationRuleStringFilter[];
        severityLabel?: outputs.securityhub.AutomationRuleStringFilter[];
        sourceUrl?: outputs.securityhub.AutomationRuleStringFilter[];
        title?: outputs.securityhub.AutomationRuleStringFilter[];
        type?: outputs.securityhub.AutomationRuleStringFilter[];
        updatedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        userDefinedFields?: outputs.securityhub.AutomationRuleMapFilter[];
        verificationState?: outputs.securityhub.AutomationRuleStringFilter[];
        workflowStatus?: outputs.securityhub.AutomationRuleStringFilter[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface HubTags {
    }

    /**
     * An individual StandardsControl within the Standard.
     */
    export interface StandardsControl {
        /**
         * the reason the standard control is disabled
         */
        reason?: string;
        /**
         * the Arn for the standard control.
         */
        standardsControlArn: string;
    }

}

export namespace servicecatalog {
    export interface CloudFormationProductCodeStarParameters {
        artifactPath: string;
        branch: string;
        connectionArn: string;
        repository: string;
    }

    export interface CloudFormationProductConnectionParameters {
        codeStar?: outputs.servicecatalog.CloudFormationProductCodeStarParameters;
    }

    export interface CloudFormationProductProvisioningArtifactProperties {
        description?: string;
        disableTemplateValidation?: boolean;
        info: any;
        name?: string;
        type?: string;
    }

    export interface CloudFormationProductSourceConnection {
        connectionParameters: outputs.servicecatalog.CloudFormationProductConnectionParameters;
        type: string;
    }

    export interface CloudFormationProductTag {
        key: string;
        value: string;
    }

    export interface CloudFormationProvisionedProductProvisioningParameter {
        key: string;
        value: string;
    }

    export interface CloudFormationProvisionedProductProvisioningPreferences {
        stackSetAccounts?: string[];
        stackSetFailureToleranceCount?: number;
        stackSetFailureTolerancePercentage?: number;
        stackSetMaxConcurrencyCount?: number;
        stackSetMaxConcurrencyPercentage?: number;
        stackSetOperationType?: enums.servicecatalog.CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType;
        stackSetRegions?: string[];
    }

    export interface CloudFormationProvisionedProductTag {
        key: string;
        value: string;
    }

    export interface PortfolioTag {
        key: string;
        value: string;
    }

    export interface ServiceActionDefinitionParameter {
        key: string;
        value: string;
    }

}

export namespace servicecatalogappregistry {
    export interface ApplicationTags {
    }

    export interface AttributeGroupTags {
    }

}

export namespace servicediscovery {
    export interface HttpNamespaceTag {
        key: string;
        value: string;
    }

    export interface PrivateDnsNamespacePrivateDnsPropertiesMutable {
        soa?: outputs.servicediscovery.PrivateDnsNamespaceSoa;
    }

    export interface PrivateDnsNamespaceProperties {
        dnsProperties?: outputs.servicediscovery.PrivateDnsNamespacePrivateDnsPropertiesMutable;
    }

    export interface PrivateDnsNamespaceSoa {
        ttl?: number;
    }

    export interface PrivateDnsNamespaceTag {
        key: string;
        value: string;
    }

    export interface PublicDnsNamespaceProperties {
        dnsProperties?: outputs.servicediscovery.PublicDnsNamespacePublicDnsPropertiesMutable;
    }

    export interface PublicDnsNamespacePublicDnsPropertiesMutable {
        soa?: outputs.servicediscovery.PublicDnsNamespaceSoa;
    }

    export interface PublicDnsNamespaceSoa {
        ttl?: number;
    }

    export interface PublicDnsNamespaceTag {
        key: string;
        value: string;
    }

    export interface ServiceDnsConfig {
        dnsRecords: outputs.servicediscovery.ServiceDnsRecord[];
        namespaceId?: string;
        routingPolicy?: string;
    }

    export interface ServiceDnsRecord {
        ttl: number;
        type: string;
    }

    export interface ServiceHealthCheckConfig {
        failureThreshold?: number;
        resourcePath?: string;
        type: string;
    }

    export interface ServiceHealthCheckCustomConfig {
        failureThreshold?: number;
    }

    export interface ServiceTag {
        key: string;
        value: string;
    }

}

export namespace ses {
    /**
     * Preferences regarding the Dashboard feature.
     */
    export interface ConfigurationSetDashboardOptions {
        /**
         * Whether emails sent with this configuration set have engagement tracking enabled.
         */
        engagementMetrics: string;
    }

    /**
     * An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
     */
    export interface ConfigurationSetDeliveryOptions {
        /**
         * The name of the dedicated IP pool to associate with the configuration set.
         */
        sendingPoolName?: string;
        /**
         * Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require , messages are only delivered if a TLS connection can be established. If the value is Optional , messages can be delivered in plain text if a TLS connection can't be established.
         */
        tlsPolicy?: string;
    }

    /**
     * An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
     */
    export interface ConfigurationSetEventDestinationCloudWatchDestination {
        /**
         * A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
         */
        dimensionConfigurations?: outputs.ses.ConfigurationSetEventDestinationDimensionConfiguration[];
    }

    /**
     * A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
     */
    export interface ConfigurationSetEventDestinationDimensionConfiguration {
        /**
         * The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email.
         */
        defaultDimensionValue: string;
        /**
         * The name of an Amazon CloudWatch dimension associated with an email sending metric.
         */
        dimensionName: string;
        /**
         * The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, specify messageTag. To use your own email headers, specify emailHeader. To put a custom tag on any link included in your email, specify linkTag.
         */
        dimensionValueSource: string;
    }

    export interface ConfigurationSetEventDestinationEventDestination {
        /**
         * An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
         */
        cloudWatchDestination?: outputs.ses.ConfigurationSetEventDestinationCloudWatchDestination;
        /**
         * Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.   
         */
        enabled?: boolean;
        /**
         * An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
         */
        kinesisFirehoseDestination?: outputs.ses.ConfigurationSetEventDestinationKinesisFirehoseDestination;
        /**
         * The type of email sending events, send, reject, bounce, complaint, delivery, open, click, renderingFailure, deliveryDelay, and subscription.
         */
        matchingEventTypes: string[];
        /**
         * The name of the event destination set.
         */
        name?: string;
        /**
         * An object that contains SNS topic ARN associated event destination.
         */
        snsDestination?: outputs.ses.ConfigurationSetEventDestinationSnsDestination;
    }

    /**
     * An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
     */
    export interface ConfigurationSetEventDestinationKinesisFirehoseDestination {
        /**
         * The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
         */
        deliveryStreamArn: string;
        /**
         * The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
         */
        iamRoleArn: string;
    }

    /**
     * An object that contains SNS topic ARN associated event destination.
     */
    export interface ConfigurationSetEventDestinationSnsDestination {
        topicArn: string;
    }

    /**
     * Preferences regarding the Guardian feature.
     */
    export interface ConfigurationSetGuardianOptions {
        /**
         * Whether emails sent with this configuration set have optimized delivery algorithm enabled.
         */
        optimizedSharedDelivery: string;
    }

    /**
     * An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
     */
    export interface ConfigurationSetReputationOptions {
        /**
         * If true , tracking of reputation metrics is enabled for the configuration set. If false , tracking of reputation metrics is disabled for the configuration set.
         */
        reputationMetricsEnabled?: boolean;
    }

    /**
     * An object that defines whether or not Amazon SES can send email that you send using the configuration set.
     */
    export interface ConfigurationSetSendingOptions {
        sendingEnabled?: boolean;
    }

    /**
     * An object that contains information about the suppression list preferences for your account.
     */
    export interface ConfigurationSetSuppressionOptions {
        /**
         * A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
         */
        suppressedReasons?: string[];
    }

    /**
     * An object that defines the open and click tracking options for emails that you send using the configuration set.
     */
    export interface ConfigurationSetTrackingOptions {
        /**
         * The domain to use for tracking open and click events.
         */
        customRedirectDomain?: string;
    }

    /**
     * An object that contains Virtual Deliverability Manager (VDM) settings for this configuration set.
     */
    export interface ConfigurationSetVdmOptions {
        dashboardOptions?: outputs.ses.ConfigurationSetDashboardOptions;
        guardianOptions?: outputs.ses.ConfigurationSetGuardianOptions;
    }

    export interface ContactListTag {
        key: string;
        value: string;
    }

    export interface ContactListTopic {
        defaultSubscriptionStatus: string;
        /**
         * The description of the topic.
         */
        description?: string;
        /**
         * The display name of the topic.
         */
        displayName: string;
        /**
         * The name of the topic.
         */
        topicName: string;
    }

    /**
     * Used to associate a configuration set with an email identity.
     */
    export interface EmailIdentityConfigurationSetAttributes {
        /**
         * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
         */
        configurationSetName?: string;
    }

    /**
     * Used to enable or disable DKIM authentication for an email identity.
     */
    export interface EmailIdentityDkimAttributes {
        /**
         * Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
         */
        signingEnabled?: boolean;
    }

    /**
     * If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for Easy DKIM.
     */
    export interface EmailIdentityDkimSigningAttributes {
        /**
         * [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
         */
        domainSigningPrivateKey?: string;
        /**
         * [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
         */
        domainSigningSelector?: string;
        /**
         * [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
         */
        nextSigningKeyLength?: string;
    }

    /**
     * Used to enable or disable feedback forwarding for an identity.
     */
    export interface EmailIdentityFeedbackAttributes {
        /**
         * If the value is true, you receive email notifications when bounce or complaint events occur
         */
        emailForwardingEnabled?: boolean;
    }

    /**
     * Used to enable or disable the custom Mail-From domain configuration for an email identity.
     */
    export interface EmailIdentityMailFromAttributes {
        /**
         * The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue , the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage , the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email.
         */
        behaviorOnMxFailure?: string;
        /**
         * The custom MAIL FROM domain that you want the verified identity to use
         */
        mailFromDomain?: string;
    }

    export interface ReceiptFilterFilter {
        ipFilter: outputs.ses.ReceiptFilterIpFilter;
        name?: string;
    }

    export interface ReceiptFilterIpFilter {
        cidr: string;
        policy: string;
    }

    export interface ReceiptRuleAction {
        addHeaderAction?: outputs.ses.ReceiptRuleAddHeaderAction;
        bounceAction?: outputs.ses.ReceiptRuleBounceAction;
        lambdaAction?: outputs.ses.ReceiptRuleLambdaAction;
        s3Action?: outputs.ses.ReceiptRuleS3Action;
        snsAction?: outputs.ses.ReceiptRuleSnsAction;
        stopAction?: outputs.ses.ReceiptRuleStopAction;
        workmailAction?: outputs.ses.ReceiptRuleWorkmailAction;
    }

    export interface ReceiptRuleAddHeaderAction {
        headerName: string;
        headerValue: string;
    }

    export interface ReceiptRuleBounceAction {
        message: string;
        sender: string;
        smtpReplyCode: string;
        statusCode?: string;
        topicArn?: string;
    }

    export interface ReceiptRuleLambdaAction {
        functionArn: string;
        invocationType?: string;
        topicArn?: string;
    }

    export interface ReceiptRuleRule {
        actions?: outputs.ses.ReceiptRuleAction[];
        enabled?: boolean;
        name?: string;
        recipients?: string[];
        scanEnabled?: boolean;
        tlsPolicy?: string;
    }

    export interface ReceiptRuleS3Action {
        bucketName: string;
        kmsKeyArn?: string;
        objectKeyPrefix?: string;
        topicArn?: string;
    }

    export interface ReceiptRuleSnsAction {
        encoding?: string;
        topicArn?: string;
    }

    export interface ReceiptRuleStopAction {
        scope: string;
        topicArn?: string;
    }

    export interface ReceiptRuleWorkmailAction {
        organizationArn: string;
        topicArn?: string;
    }

    /**
     * The content of the email, composed of a subject line, an HTML part, and a text-only part
     */
    export interface Template {
        /**
         * The HTML body of the email.
         */
        htmlPart?: string;
        /**
         * The subject line of the email.
         */
        subjectPart: string;
        /**
         * The name of the template.
         */
        templateName?: string;
        /**
         * The email body that is visible to recipients whose email clients do not display HTML content.
         */
        textPart?: string;
    }

    /**
     * Preferences regarding the Dashboard feature.
     */
    export interface VdmAttributesDashboardAttributes {
        /**
         * Whether emails sent from this account have engagement tracking enabled.
         */
        engagementMetrics?: string;
    }

    /**
     * Preferences regarding the Guardian feature.
     */
    export interface VdmAttributesGuardianAttributes {
        /**
         * Whether emails sent from this account have optimized delivery algorithm enabled.
         */
        optimizedSharedDelivery?: string;
    }

}

export namespace shield {
    /**
     * An emergency contact is used by Shield Response Team (SRT) to contact you for escalations to the SRT and to initiate proactive customer support. An emergency contact requires an email address.
     */
    export interface ProactiveEngagementEmergencyContact {
        /**
         * Additional notes regarding the contact.
         */
        contactNotes?: string;
        /**
         * The email address for the contact.
         */
        emailAddress: string;
        /**
         * The phone number for the contact
         */
        phoneNumber?: string;
    }

    /**
     * The automatic application layer DDoS mitigation settings for a Protection. This configuration determines whether Shield Advanced automatically manages rules in the web ACL in order to respond to application layer events that Shield Advanced determines to be DDoS attacks.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfiguration {
        /**
         * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
         */
        action: outputs.shield.ProtectionApplicationLayerAutomaticResponseConfigurationAction0Properties | outputs.shield.ProtectionApplicationLayerAutomaticResponseConfigurationAction1Properties;
        /**
         * Indicates whether automatic application layer DDoS mitigation is enabled for the protection.
         */
        status: enums.shield.ProtectionApplicationLayerAutomaticResponseConfigurationStatus;
    }

    /**
     * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfigurationAction0Properties {
        /**
         * Specifies that Shield Advanced should configure its AWS WAF rules with the AWS WAF `Count` action.
         * You must specify exactly one action, either `Block` or `Count`.
         */
        count?: any;
    }

    /**
     * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfigurationAction1Properties {
        /**
         * Specifies that Shield Advanced should configure its AWS WAF rules with the AWS WAF `Block` action.
         * You must specify exactly one action, either `Block` or `Count`.
         */
        block?: any;
    }

    /**
     * A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.
     */
    export interface ProtectionGroupTag {
        /**
         * Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
         */
        key: string;
        /**
         * Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
         */
        value: string;
    }

    /**
     * A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.
     */
    export interface ProtectionTag {
        /**
         * Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.
         */
        key: string;
        /**
         * Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.
         */
        value: string;
    }

}

export namespace signer {
    export interface SigningProfileSignatureValidityPeriod {
        type?: enums.signer.SigningProfileSignatureValidityPeriodType;
        value?: number;
    }

    export interface SigningProfileTag {
        key?: string;
        value?: string;
    }

}

export namespace simspaceweaver {
    export interface SimulationS3Location {
        /**
         * The Schema S3 bucket name.
         */
        bucketName: string;
        /**
         * This is the schema S3 object key, which includes the full path of "folders" from the bucket root to the schema.
         */
        objectKey: string;
    }

}

export namespace sns {
    export interface TopicLoggingConfig {
        /**
         * The IAM role ARN to be used when logging failed message deliveries in Amazon CloudWatch
         */
        failureFeedbackRoleArn?: string;
        /**
         * Indicates one of the supported protocols for the SNS topic
         */
        protocol: enums.sns.TopicLoggingConfigProtocol;
        /**
         * The IAM role ARN to be used when logging successful message deliveries in Amazon CloudWatch
         */
        successFeedbackRoleArn?: string;
        /**
         * The percentage of successful message deliveries to be logged in Amazon CloudWatch. Valid percentage values range from 0 to 100
         */
        successFeedbackSampleRate?: string;
    }

    export interface TopicSubscription {
        endpoint: string;
        protocol: string;
    }

    export interface TopicTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, `_`, `.`, `/`, `=`, `+`, and `-`.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 characters in length.
         */
        value: string;
    }

}

export namespace sqs {
    export interface QueueTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace ssm {
    export interface AssociationInstanceAssociationOutputLocation {
        s3Location?: outputs.ssm.AssociationS3OutputLocation;
    }

    export interface AssociationS3OutputLocation {
        outputS3BucketName?: string;
        outputS3KeyPrefix?: string;
        outputS3Region?: string;
    }

    export interface AssociationTarget {
        key: string;
        values: string[];
    }

    export interface DocumentAttachmentsSource {
        /**
         * The key of a key-value pair that identifies the location of an attachment to a document.
         */
        key?: enums.ssm.DocumentAttachmentsSourceKey;
        /**
         * The name of the document attachment file.
         */
        name?: string;
        /**
         * The value of a key-value pair that identifies the location of an attachment to a document. The format for Value depends on the type of key you specify.
         */
        values?: string[];
    }

    export interface DocumentRequires {
        /**
         * The name of the required SSM document. The name can be an Amazon Resource Name (ARN).
         */
        name?: string;
        /**
         * The document version required by the current document.
         */
        version?: string;
    }

    export interface DocumentTag {
        /**
         * The name of the tag.
         */
        key?: string;
        /**
         * The value of the tag.
         */
        value?: string;
    }

    export interface MaintenanceWindowTag {
        key: string;
        value: string;
    }

    export interface MaintenanceWindowTargetTargets {
        key: string;
        values: string[];
    }

    export interface MaintenanceWindowTaskCloudWatchOutputConfig {
        cloudWatchLogGroupName?: string;
        cloudWatchOutputEnabled?: boolean;
    }

    export interface MaintenanceWindowTaskLoggingInfo {
        region: string;
        s3Bucket: string;
        s3Prefix?: string;
    }

    export interface MaintenanceWindowTaskMaintenanceWindowAutomationParameters {
        documentVersion?: string;
        parameters?: any;
    }

    export interface MaintenanceWindowTaskMaintenanceWindowLambdaParameters {
        clientContext?: string;
        payload?: string;
        qualifier?: string;
    }

    export interface MaintenanceWindowTaskMaintenanceWindowRunCommandParameters {
        cloudWatchOutputConfig?: outputs.ssm.MaintenanceWindowTaskCloudWatchOutputConfig;
        comment?: string;
        documentHash?: string;
        documentHashType?: string;
        documentVersion?: string;
        notificationConfig?: outputs.ssm.MaintenanceWindowTaskNotificationConfig;
        outputS3BucketName?: string;
        outputS3KeyPrefix?: string;
        parameters?: any;
        serviceRoleArn?: string;
        timeoutSeconds?: number;
    }

    export interface MaintenanceWindowTaskMaintenanceWindowStepFunctionsParameters {
        input?: string;
        name?: string;
    }

    export interface MaintenanceWindowTaskNotificationConfig {
        notificationArn: string;
        notificationEvents?: string[];
        notificationType?: string;
    }

    export interface MaintenanceWindowTaskTarget {
        key: string;
        values: string[];
    }

    export interface MaintenanceWindowTaskTaskInvocationParameters {
        maintenanceWindowAutomationParameters?: outputs.ssm.MaintenanceWindowTaskMaintenanceWindowAutomationParameters;
        maintenanceWindowLambdaParameters?: outputs.ssm.MaintenanceWindowTaskMaintenanceWindowLambdaParameters;
        maintenanceWindowRunCommandParameters?: outputs.ssm.MaintenanceWindowTaskMaintenanceWindowRunCommandParameters;
        maintenanceWindowStepFunctionsParameters?: outputs.ssm.MaintenanceWindowTaskMaintenanceWindowStepFunctionsParameters;
    }

    /**
     * Defines which patches should be included in a patch baseline.
     */
    export interface PatchBaselinePatchFilter {
        key?: enums.ssm.PatchBaselinePatchFilterKey;
        values?: string[];
    }

    /**
     * The patch filter group that defines the criteria for the rule.
     */
    export interface PatchBaselinePatchFilterGroup {
        patchFilters?: outputs.ssm.PatchBaselinePatchFilter[];
    }

    /**
     * Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
     */
    export interface PatchBaselinePatchSource {
        configuration?: string;
        name?: string;
        products?: string[];
    }

    /**
     * Defines an approval rule for a patch baseline.
     */
    export interface PatchBaselineRule {
        approveAfterDays?: number;
        approveUntilDate?: string;
        complianceLevel?: enums.ssm.PatchBaselineRuleComplianceLevel;
        enableNonSecurity?: boolean;
        patchFilterGroup?: outputs.ssm.PatchBaselinePatchFilterGroup;
    }

    /**
     * A set of rules defining the approval rules for a patch baseline.
     */
    export interface PatchBaselineRuleGroup {
        patchRules?: outputs.ssm.PatchBaselineRule[];
    }

    /**
     * Metadata that you assign to your AWS resources.
     */
    export interface PatchBaselineTag {
        key: string;
        value: string;
    }

    export interface ResourceDataSyncAwsOrganizationsSource {
        organizationSourceType: string;
        organizationalUnits?: string[];
    }

    export interface ResourceDataSyncS3Destination {
        bucketName: string;
        bucketPrefix?: string;
        bucketRegion: string;
        kmsKeyArn?: string;
        syncFormat: string;
    }

    export interface ResourceDataSyncSyncSource {
        awsOrganizationsSource?: outputs.ssm.ResourceDataSyncAwsOrganizationsSource;
        includeFutureRegions?: boolean;
        sourceRegions: string[];
        sourceType: string;
    }

}

export namespace ssmcontacts {
    /**
     * Information about the contact channel that SSM Incident Manager uses to engage the contact.
     */
    export interface ContactChannelTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact channel.
         */
        channelId: string;
        /**
         * The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
         */
        retryIntervalInMinutes: number;
    }

    /**
     * A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
     */
    export interface ContactStage {
        /**
         * The time to wait until beginning the next stage.
         */
        durationInMinutes?: number;
        /**
         * List of Rotation Ids to associate with Contact
         */
        rotationIds?: string[];
        /**
         * The contacts or contact methods that the escalation plan or engagement plan is engaging.
         */
        targets?: outputs.ssmcontacts.ContactTargets[];
    }

    /**
     * The contact that SSM Incident Manager is engaging during an incident.
     */
    export interface ContactTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact.
         */
        contactId: string;
        /**
         * A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
         */
        isEssential: boolean;
    }

    /**
     * The contacts or contact methods that the escalation plan or engagement plan is engaging.
     */
    export interface ContactTargets {
        channelTargetInfo?: outputs.ssmcontacts.ContactChannelTargetInfo;
        contactTargetInfo?: outputs.ssmcontacts.ContactTargetInfo;
    }

    /**
     * Information about the contact channel that SSM Incident Manager uses to engage the contact.
     */
    export interface PlanChannelTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact channel.
         */
        channelId: string;
        /**
         * The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
         */
        retryIntervalInMinutes: number;
    }

    /**
     * The contact that SSM Incident Manager is engaging during an incident.
     */
    export interface PlanContactTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact.
         */
        contactId: string;
        /**
         * A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
         */
        isEssential: boolean;
    }

    /**
     * A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
     */
    export interface PlanStage {
        /**
         * The time to wait until beginning the next stage.
         */
        durationInMinutes: number;
        /**
         * The contacts or contact methods that the escalation plan or engagement plan is engaging.
         */
        targets?: outputs.ssmcontacts.PlanTargets[];
    }

    /**
     * The contacts or contact methods that the escalation plan or engagement plan is engaging.
     */
    export interface PlanTargets {
        channelTargetInfo?: outputs.ssmcontacts.PlanChannelTargetInfo;
        contactTargetInfo?: outputs.ssmcontacts.PlanContactTargetInfo;
    }

    /**
     * StartTime and EndTime for the Shift
     */
    export interface RotationCoverageTime {
        endTime: string;
        startTime: string;
    }

    /**
     * DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.
     */
    export interface RotationMonthlySetting {
        /**
         * The day of the month when monthly recurring on-call rotations begin.
         */
        dayOfMonth: number;
        handOffTime: string;
    }

    /**
     * Information about when an on-call rotation is in effect and how long the rotation period lasts.
     */
    export interface RotationRecurrenceSettings {
        /**
         * Information about on-call rotations that recur daily.
         */
        dailySettings?: string[];
        /**
         * Information about on-call rotations that recur monthly.
         */
        monthlySettings?: outputs.ssmcontacts.RotationMonthlySetting[];
        /**
         * Number of Oncalls per shift.
         */
        numberOfOnCalls?: number;
        /**
         * The number of days, weeks, or months a single rotation lasts.
         */
        recurrenceMultiplier?: number;
        /**
         * Information about the days of the week included in on-call rotation coverage.
         */
        shiftCoverages?: outputs.ssmcontacts.RotationShiftCoverage[];
        /**
         * Information about on-call rotations that recur weekly.
         */
        weeklySettings?: outputs.ssmcontacts.RotationWeeklySetting[];
    }

    /**
     * Information about the days of the week included in on-call rotation coverage.
     */
    export interface RotationShiftCoverage {
        /**
         * Information about when an on-call shift begins and ends.
         */
        coverageTimes: outputs.ssmcontacts.RotationCoverageTime[];
        dayOfWeek: enums.ssmcontacts.RotationDayOfWeek;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface RotationTag {
        /**
         * The key name of the tag
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.
     */
    export interface RotationWeeklySetting {
        dayOfWeek: enums.ssmcontacts.RotationDayOfWeek;
        handOffTime: string;
    }

}

export namespace ssmincidents {
    /**
     * The ReplicationSet regional configuration.
     */
    export interface ReplicationSetRegionConfiguration {
        sseKmsKeyId: string;
    }

    /**
     * The ReplicationSet regional configuration.
     */
    export interface ReplicationSetReplicationRegion {
        regionConfiguration?: outputs.ssmincidents.ReplicationSetRegionConfiguration;
        regionName?: string;
    }

    /**
     * A key-value pair to tag a resource.
     */
    export interface ReplicationSetTag {
        key: string;
        value: string;
    }

    /**
     * The automation configuration to launch.
     */
    export interface ResponsePlanAction {
        ssmAutomation?: outputs.ssmincidents.ResponsePlanSsmAutomation;
    }

    /**
     * The chat channel configuration.
     */
    export interface ResponsePlanChatChannel {
        chatbotSns?: string[];
    }

    /**
     * A parameter with a dynamic value to set when starting the SSM automation document.
     */
    export interface ResponsePlanDynamicSsmParameter {
        key: string;
        value: outputs.ssmincidents.ResponsePlanDynamicSsmParameterValue;
    }

    /**
     * Value of the dynamic parameter to set when starting the SSM automation document.
     */
    export interface ResponsePlanDynamicSsmParameterValue {
        variable?: enums.ssmincidents.ResponsePlanVariableType;
    }

    /**
     * The incident template configuration.
     */
    export interface ResponsePlanIncidentTemplate {
        /**
         * The deduplication string.
         */
        dedupeString?: string;
        /**
         * The impact value.
         */
        impact: number;
        /**
         * Tags that get applied to incidents created by the StartIncident API action.
         */
        incidentTags?: outputs.ssmincidents.ResponsePlanTag[];
        /**
         * The list of notification targets.
         */
        notificationTargets?: outputs.ssmincidents.ResponsePlanNotificationTargetItem[];
        /**
         * The summary string.
         */
        summary?: string;
        /**
         * The title string.
         */
        title: string;
    }

    export interface ResponsePlanIntegration {
        pagerDutyConfiguration?: outputs.ssmincidents.ResponsePlanPagerDutyConfiguration;
    }

    /**
     * A notification target.
     */
    export interface ResponsePlanNotificationTargetItem {
        snsTopicArn?: string;
    }

    /**
     * The pagerDuty configuration to use when starting the incident.
     */
    export interface ResponsePlanPagerDutyConfiguration {
        /**
         * The name of the pagerDuty configuration.
         */
        name: string;
        pagerDutyIncidentConfiguration: outputs.ssmincidents.ResponsePlanPagerDutyIncidentConfiguration;
        /**
         * The AWS secrets manager secretId storing the pagerDuty token.
         */
        secretId: string;
    }

    /**
     * The pagerDuty incident configuration.
     */
    export interface ResponsePlanPagerDutyIncidentConfiguration {
        /**
         * The pagerDuty serviceId.
         */
        serviceId: string;
    }

    /**
     * The configuration to use when starting the SSM automation document.
     */
    export interface ResponsePlanSsmAutomation {
        /**
         * The document name to use when starting the SSM automation document.
         */
        documentName: string;
        /**
         * The version of the document to use when starting the SSM automation document.
         */
        documentVersion?: string;
        /**
         * The parameters with dynamic values to set when starting the SSM automation document.
         */
        dynamicParameters?: outputs.ssmincidents.ResponsePlanDynamicSsmParameter[];
        /**
         * The parameters to set when starting the SSM automation document.
         */
        parameters?: outputs.ssmincidents.ResponsePlanSsmParameter[];
        /**
         * The role ARN to use when starting the SSM automation document.
         */
        roleArn: string;
        /**
         * The account type to use when starting the SSM automation document.
         */
        targetAccount?: enums.ssmincidents.ResponsePlanSsmAutomationTargetAccount;
    }

    /**
     * A parameter to set when starting the SSM automation document.
     */
    export interface ResponsePlanSsmParameter {
        key: string;
        values: string[];
    }

    /**
     * A key-value pair to tag a resource.
     */
    export interface ResponsePlanTag {
        key: string;
        value: string;
    }

}

export namespace sso {
    export interface InstanceAccessControlAttributeConfigurationAccessControlAttribute {
        key: string;
        value: outputs.sso.InstanceAccessControlAttributeConfigurationAccessControlAttributeValue;
    }

    export interface InstanceAccessControlAttributeConfigurationAccessControlAttributeValue {
        source: string[];
    }

    /**
     * The InstanceAccessControlAttributeConfiguration property has been deprecated but is still supported for backwards compatibility purposes. We recomend that you use  AccessControlAttributes property instead.
     */
    export interface InstanceAccessControlAttributeConfigurationProperties {
        accessControlAttributes: outputs.sso.InstanceAccessControlAttributeConfigurationAccessControlAttribute[];
    }

    export interface PermissionSetCustomerManagedPolicyReference {
        name: string;
        path?: string;
    }

    export interface PermissionSetPermissionsBoundary {
        customerManagedPolicyReference?: outputs.sso.PermissionSetCustomerManagedPolicyReference;
        managedPolicyArn?: string;
    }

    /**
     * The metadata that you apply to the permission set to help you categorize and organize them.
     */
    export interface PermissionSetTag {
        key: string;
        value: string;
    }

}

export namespace stepfunctions {
    export interface ActivityTagsEntry {
        key: string;
        value: string;
    }

    /**
     * The settings to enable gradual state machine deployments.
     */
    export interface StateMachineAliasDeploymentPreference {
        /**
         * A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.
         */
        alarms?: string[];
        /**
         * The time in minutes between each traffic shifting increment.
         */
        interval?: number;
        /**
         * The percentage of traffic to shift to the new version in each increment.
         */
        percentage?: number;
        stateMachineVersionArn: string;
        /**
         * The type of deployment to perform.
         */
        type: enums.stepfunctions.StateMachineAliasDeploymentPreferenceType;
    }

    export interface StateMachineAliasRoutingConfigurationVersion {
        /**
         * The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.
         */
        stateMachineVersionArn: string;
        /**
         * The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.
         */
        weight: number;
    }

    export interface StateMachineCloudWatchLogsLogGroup {
        logGroupArn?: string;
    }

    export interface StateMachineDefinition {
    }

    export interface StateMachineDefinitionSubstitutions {
    }

    export interface StateMachineLogDestination {
        cloudWatchLogsLogGroup?: outputs.stepfunctions.StateMachineCloudWatchLogsLogGroup;
    }

    export interface StateMachineLoggingConfiguration {
        destinations?: outputs.stepfunctions.StateMachineLogDestination[];
        includeExecutionData?: boolean;
        level?: enums.stepfunctions.StateMachineLoggingConfigurationLevel;
    }

    export interface StateMachineS3Location {
        bucket: string;
        key: string;
        version?: string;
    }

    export interface StateMachineTagsEntry {
        key: string;
        value: string;
    }

    export interface StateMachineTracingConfiguration {
        enabled?: boolean;
    }

}

export namespace synthetics {
    export interface CanaryArtifactConfig {
        /**
         * Encryption configuration for uploading artifacts to S3
         */
        s3Encryption?: outputs.synthetics.CanaryS3Encryption;
    }

    export interface CanaryBaseScreenshot {
        /**
         * List of coordinates of rectangles to be ignored during visual testing
         */
        ignoreCoordinates?: string[];
        /**
         * Name of the screenshot to be used as base reference for visual testing
         */
        screenshotName: string;
    }

    export interface CanaryCode {
        handler: string;
        s3Bucket?: string;
        s3Key?: string;
        s3ObjectVersion?: string;
        script?: string;
        sourceLocationArn?: string;
    }

    export interface CanaryRunConfig {
        /**
         * Enable active tracing if set to true
         */
        activeTracing?: boolean;
        /**
         * Environment variable key-value pairs.
         */
        environmentVariables?: {[key: string]: string};
        /**
         * Provide maximum memory available for canary in MB
         */
        memoryInMb?: number;
        /**
         * Provide maximum canary timeout per run in seconds
         */
        timeoutInSeconds?: number;
    }

    export interface CanaryS3Encryption {
        /**
         * Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
         */
        encryptionMode?: string;
        /**
         * KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
         */
        kmsKeyArn?: string;
    }

    export interface CanarySchedule {
        durationInSeconds?: string;
        expression: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CanaryTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

    export interface CanaryVisualReference {
        /**
         * Canary run id to be used as base reference for visual testing
         */
        baseCanaryRunId: string;
        /**
         * List of screenshots used as base reference for visual testing
         */
        baseScreenshots?: outputs.synthetics.CanaryBaseScreenshot[];
    }

    export interface CanaryVpcConfig {
        securityGroupIds: string[];
        subnetIds: string[];
        vpcId?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface GroupTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace systemsmanagersap {
    export interface ApplicationCredential {
        credentialType?: enums.systemsmanagersap.ApplicationCredentialCredentialType;
        databaseName?: string;
        secretId?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ApplicationTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
         */
        value: string;
    }

}

export namespace timestream {
    /**
     * You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
     */
    export interface DatabaseTag {
        key?: string;
        value?: string;
    }

    /**
     * The properties that determine whether magnetic store writes are enabled.
     */
    export interface MagneticStoreWritePropertiesProperties {
        /**
         * Boolean flag indicating whether magnetic store writes are enabled.
         */
        enableMagneticStoreWrites: boolean;
        /**
         * Location to store information about records that were asynchronously rejected during magnetic store writes.
         */
        magneticStoreRejectedDataLocation?: outputs.timestream.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties;
    }

    /**
     * Location to store information about records that were asynchronously rejected during magnetic store writes.
     */
    export interface MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties {
        /**
         * S3 configuration for location to store rejections from magnetic store writes
         */
        s3Configuration?: outputs.timestream.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties;
    }

    /**
     * S3 configuration for location to store rejections from magnetic store writes
     */
    export interface MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties {
        /**
         * The bucket name used to store the data.
         */
        bucketName: string;
        /**
         * Either SSE_KMS or SSE_S3.
         */
        encryptionOption: string;
        /**
         * Must be provided if SSE_KMS is specified as the encryption option
         */
        kmsKeyId?: string;
        /**
         * String used to prefix all data in the bucket.
         */
        objectKeyPrefix?: string;
    }

    /**
     * The retention duration of the memory store and the magnetic store.
     */
    export interface RetentionPropertiesProperties {
        /**
         * The duration for which data must be stored in the magnetic store.
         */
        magneticStoreRetentionPeriodInDays?: string;
        /**
         * The duration for which data must be stored in the memory store.
         */
        memoryStoreRetentionPeriodInHours?: string;
    }

    /**
     * This type is used to map column(s) from the query result to a dimension in the destination table.
     */
    export interface ScheduledQueryDimensionMapping {
        dimensionValueType: enums.timestream.ScheduledQueryDimensionValueType;
        name: string;
    }

    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     */
    export interface ScheduledQueryErrorReportConfiguration {
        s3Configuration: outputs.timestream.ScheduledQueryS3Configuration;
    }

    /**
     * MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
     */
    export interface ScheduledQueryMixedMeasureMapping {
        measureName?: string;
        measureValueType: enums.timestream.ScheduledQueryMixedMeasureMappingMeasureValueType;
        multiMeasureAttributeMappings?: outputs.timestream.ScheduledQueryMultiMeasureAttributeMapping[];
        sourceColumn?: string;
        targetMeasureName?: string;
    }

    /**
     * An attribute mapping to be used for mapping query results to ingest data for multi-measure attributes.
     */
    export interface ScheduledQueryMultiMeasureAttributeMapping {
        measureValueType: enums.timestream.ScheduledQueryMultiMeasureAttributeMappingMeasureValueType;
        sourceColumn: string;
        targetMultiMeasureAttributeName?: string;
    }

    /**
     * Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
     */
    export interface ScheduledQueryMultiMeasureMappings {
        multiMeasureAttributeMappings: outputs.timestream.ScheduledQueryMultiMeasureAttributeMapping[];
        targetMultiMeasureName?: string;
    }

    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     */
    export interface ScheduledQueryNotificationConfiguration {
        snsConfiguration: outputs.timestream.ScheduledQuerySnsConfiguration;
    }

    /**
     * Details on S3 location for error reports that result from running a query.
     */
    export interface ScheduledQueryS3Configuration {
        bucketName: string;
        encryptionOption?: enums.timestream.ScheduledQueryEncryptionOption;
        objectKeyPrefix?: string;
    }

    /**
     * Configuration for when the scheduled query is executed.
     */
    export interface ScheduledQueryScheduleConfiguration {
        scheduleExpression: string;
    }

    /**
     * SNS configuration for notification upon scheduled query execution.
     */
    export interface ScheduledQuerySnsConfiguration {
        topicArn: string;
    }

    /**
     * A key-value pair to label the scheduled query.
     */
    export interface ScheduledQueryTag {
        key: string;
        value: string;
    }

    /**
     * Configuration of target store where scheduled query results are written to.
     */
    export interface ScheduledQueryTargetConfiguration {
        timestreamConfiguration: outputs.timestream.ScheduledQueryTimestreamConfiguration;
    }

    /**
     * Configuration needed to write data into the Timestream database and table.
     */
    export interface ScheduledQueryTimestreamConfiguration {
        databaseName: string;
        dimensionMappings: outputs.timestream.ScheduledQueryDimensionMapping[];
        measureNameColumn?: string;
        mixedMeasureMappings?: outputs.timestream.ScheduledQueryMixedMeasureMapping[];
        multiMeasureMappings?: outputs.timestream.ScheduledQueryMultiMeasureMappings;
        tableName: string;
        timeColumn: string;
    }

    /**
     * A Schema specifies the expected data model of the table.
     */
    export interface SchemaProperties {
        compositePartitionKey?: outputs.timestream.TablePartitionKey[];
    }

    /**
     * An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.
     */
    export interface TablePartitionKey {
        enforcementInRecord?: enums.timestream.TablePartitionKeyEnforcementLevel;
        name?: string;
        type: enums.timestream.TablePartitionKeyType;
    }

    /**
     * You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
     */
    export interface TableTag {
        key?: string;
        value?: string;
    }

}

export namespace transfer {
    /**
     * Creates a key-value pair for a specific resource.
     */
    export interface AgreementTag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * Contains one or more values that you assigned to the key name you create.
         */
        value: string;
    }

    /**
     * Configuration for an AS2 connector.
     */
    export interface As2ConfigProperties {
        /**
         * ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
         */
        basicAuthSecretId?: string;
        /**
         * Compression setting for this AS2 connector configuration.
         */
        compression?: enums.transfer.ConnectorAs2ConfigPropertiesCompression;
        /**
         * Encryption algorithm for this AS2 connector configuration.
         */
        encryptionAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesEncryptionAlgorithm;
        /**
         * A unique identifier for the local profile.
         */
        localProfileId?: string;
        /**
         * MDN Response setting for this AS2 connector configuration.
         */
        mdnResponse?: enums.transfer.ConnectorAs2ConfigPropertiesMdnResponse;
        /**
         * MDN Signing algorithm for this AS2 connector configuration.
         */
        mdnSigningAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesMdnSigningAlgorithm;
        /**
         * The message subject for this AS2 connector configuration.
         */
        messageSubject?: string;
        /**
         * A unique identifier for the partner profile.
         */
        partnerProfileId?: string;
        /**
         * Signing algorithm for this AS2 connector configuration.
         */
        signingAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesSigningAlgorithm;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface CertificateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Creates a key-value pair for a specific resource.
     */
    export interface ConnectorTag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * Contains one or more values that you assigned to the key name you create.
         */
        value: string;
    }

    /**
     * Creates a key-value pair for a specific resource.
     */
    export interface ProfileTag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * Contains one or more values that you assigned to the key name you create.
         */
        value: string;
    }

    export interface ServerAs2Transport {
    }

    export interface ServerEndpointDetails {
        addressAllocationIds?: string[];
        securityGroupIds?: string[];
        subnetIds?: string[];
        vpcEndpointId?: string;
        vpcId?: string;
    }

    export interface ServerIdentityProviderDetails {
        directoryId?: string;
        function?: string;
        invocationRole?: string;
        sftpAuthenticationMethods?: string;
        url?: string;
    }

    export interface ServerProtocol {
    }

    export interface ServerProtocolDetails {
        as2Transports?: outputs.transfer.ServerAs2Transport[];
        passiveIp?: string;
        setStatOption?: string;
        tlsSessionResumptionMode?: string;
    }

    export interface ServerS3StorageOptions {
        directoryListingOptimization?: string;
    }

    export interface ServerStructuredLogDestination {
    }

    export interface ServerTag {
        key: string;
        value: string;
    }

    export interface ServerWorkflowDetail {
        executionRole: string;
        workflowId: string;
    }

    export interface ServerWorkflowDetails {
        onPartialUpload?: outputs.transfer.ServerWorkflowDetail[];
        onUpload?: outputs.transfer.ServerWorkflowDetail[];
    }

    /**
     * Configuration for an SFTP connector.
     */
    export interface SftpConfigProperties {
        /**
         * List of public host keys, for the external server to which you are connecting.
         */
        trustedHostKeys?: string[];
        /**
         * ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
         */
        userSecretId?: string;
    }

    export interface UserHomeDirectoryMapEntry {
        entry: string;
        target: string;
        type?: string;
    }

    export interface UserPosixProfile {
        gid: number;
        secondaryGids?: number[];
        uid: number;
    }

    export interface UserSshPublicKey {
    }

    export interface UserTag {
        key: string;
        value: string;
    }

    /**
     * Specifies the details for an EFS file.
     */
    export interface WorkflowEfsInputFileLocation {
        /**
         * Specifies the EFS filesystem that contains the file.
         */
        fileSystemId?: string;
        /**
         * The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
         */
        path?: string;
    }

    /**
     * Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
     */
    export interface WorkflowInputFileLocation {
        efsFileLocation?: outputs.transfer.WorkflowEfsInputFileLocation;
        s3FileLocation?: outputs.transfer.WorkflowS3InputFileLocation;
    }

    /**
     * Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
     */
    export interface WorkflowS3FileLocation {
        s3FileLocation?: outputs.transfer.WorkflowS3InputFileLocation;
    }

    /**
     * Specifies the details for a S3 file.
     */
    export interface WorkflowS3InputFileLocation {
        /**
         * Specifies the S3 bucket that contains the file.
         */
        bucket?: string;
        /**
         * The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
         */
        key?: string;
    }

    /**
     * Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
     */
    export interface WorkflowS3Tag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * The value that corresponds to the key.
         */
        value: string;
    }

    /**
     * The basic building block of a workflow.
     */
    export interface WorkflowStep {
        /**
         * Details for a step that performs a file copy.
         */
        copyStepDetails?: outputs.transfer.WorkflowStepCopyStepDetailsProperties;
        /**
         * Details for a step that invokes a lambda function.
         */
        customStepDetails?: outputs.transfer.WorkflowStepCustomStepDetailsProperties;
        /**
         * Details for a step that performs a file decryption.
         */
        decryptStepDetails?: outputs.transfer.WorkflowStepDecryptStepDetailsProperties;
        /**
         * Details for a step that deletes the file.
         */
        deleteStepDetails?: outputs.transfer.WorkflowStepDeleteStepDetailsProperties;
        /**
         * Details for a step that creates one or more tags.
         */
        tagStepDetails?: outputs.transfer.WorkflowStepTagStepDetailsProperties;
        type?: enums.transfer.WorkflowStepType;
    }

    /**
     * Details for a step that performs a file copy.
     */
    export interface WorkflowStepCopyStepDetailsProperties {
        destinationFileLocation?: outputs.transfer.WorkflowS3FileLocation;
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
         */
        overwriteExisting?: enums.transfer.WorkflowStepCopyStepDetailsPropertiesOverwriteExisting;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
    }

    /**
     * Details for a step that invokes a lambda function.
     */
    export interface WorkflowStepCustomStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * The ARN for the lambda function that is being called.
         */
        target?: string;
        /**
         * Timeout, in seconds, for the step.
         */
        timeoutSeconds?: number;
    }

    /**
     * Details for a step that performs a file decryption.
     */
    export interface WorkflowStepDecryptStepDetailsProperties {
        destinationFileLocation?: outputs.transfer.WorkflowInputFileLocation;
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
         */
        overwriteExisting?: enums.transfer.WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * Specifies which encryption method to use.
         */
        type?: enums.transfer.WorkflowStepDecryptStepDetailsPropertiesType;
    }

    /**
     * Details for a step that deletes the file.
     */
    export interface WorkflowStepDeleteStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
    }

    /**
     * Details for a step that creates one or more tags.
     */
    export interface WorkflowStepTagStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * Array that contains from 1 to 10 key/value pairs.
         */
        tags?: outputs.transfer.WorkflowS3Tag[];
    }

    /**
     * Creates a key-value pair for a specific resource.
     */
    export interface WorkflowTag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * Contains one or more values that you assigned to the key name you create.
         */
        value: string;
    }

}

export namespace verifiedpermissions {
    export interface IdentitySourceCognitoUserPoolConfiguration {
        clientIds?: string[];
        userPoolArn: string;
    }

    export interface IdentitySourceConfiguration {
        cognitoUserPoolConfiguration: outputs.verifiedpermissions.IdentitySourceCognitoUserPoolConfiguration;
    }

    export interface IdentitySourceDetails {
        clientIds?: string[];
        discoveryUrl?: string;
        openIdIssuer?: enums.verifiedpermissions.IdentitySourceOpenIdIssuer;
        userPoolArn?: string;
    }

    export interface PolicyDefinition0Properties {
        static: outputs.verifiedpermissions.PolicyStaticPolicyDefinition;
    }

    export interface PolicyDefinition1Properties {
        templateLinked: outputs.verifiedpermissions.PolicyTemplateLinkedPolicyDefinition;
    }

    export interface PolicyEntityIdentifier {
        entityId: string;
        entityType: string;
    }

    export interface PolicyStaticPolicyDefinition {
        description?: string;
        statement: string;
    }

    export interface PolicyStoreSchemaDefinition {
        cedarJson?: string;
    }

    export interface PolicyStoreValidationSettings {
        mode: enums.verifiedpermissions.PolicyStoreValidationMode;
    }

    export interface PolicyTemplateLinkedPolicyDefinition {
        policyTemplateId: string;
        principal?: outputs.verifiedpermissions.PolicyEntityIdentifier;
        resource?: outputs.verifiedpermissions.PolicyEntityIdentifier;
    }

}

export namespace voiceid {
    export interface DomainServerSideEncryptionConfiguration {
        kmsKeyId: string;
    }

    export interface DomainTag {
        key: string;
        value: string;
    }

}

export namespace vpclattice {
    export interface AccessLogSubscriptionTag {
        key: string;
        value: string;
    }

    export interface ListenerDefaultAction {
        fixedResponse?: outputs.vpclattice.ListenerFixedResponse;
        forward?: outputs.vpclattice.ListenerForward;
    }

    export interface ListenerFixedResponse {
        statusCode: number;
    }

    export interface ListenerForward {
        targetGroups: outputs.vpclattice.ListenerWeightedTargetGroup[];
    }

    export interface ListenerTag {
        key: string;
        value: string;
    }

    export interface ListenerWeightedTargetGroup {
        targetGroupIdentifier: string;
        weight?: number;
    }

    export interface RuleAction {
        fixedResponse?: outputs.vpclattice.RuleFixedResponse;
        forward?: outputs.vpclattice.RuleForward;
    }

    export interface RuleFixedResponse {
        statusCode: number;
    }

    export interface RuleForward {
        targetGroups: outputs.vpclattice.RuleWeightedTargetGroup[];
    }

    export interface RuleHeaderMatch {
        caseSensitive?: boolean;
        match: outputs.vpclattice.RuleHeaderMatchType;
        name: string;
    }

    export interface RuleHeaderMatchType {
        contains?: string;
        exact?: string;
        prefix?: string;
    }

    export interface RuleHttpMatch {
        headerMatches?: outputs.vpclattice.RuleHeaderMatch[];
        method?: enums.vpclattice.RuleHttpMatchMethod;
        pathMatch?: outputs.vpclattice.RulePathMatch;
    }

    export interface RuleMatch {
        httpMatch: outputs.vpclattice.RuleHttpMatch;
    }

    export interface RulePathMatch {
        caseSensitive?: boolean;
        match: outputs.vpclattice.RulePathMatchType;
    }

    export interface RulePathMatchType {
        exact?: string;
        prefix?: string;
    }

    export interface RuleTag {
        key: string;
        value: string;
    }

    export interface RuleWeightedTargetGroup {
        targetGroupIdentifier: string;
        weight?: number;
    }

    export interface ServiceDnsEntry {
        domainName?: string;
        hostedZoneId?: string;
    }

    export interface ServiceNetworkServiceAssociationDnsEntry {
        domainName?: string;
        hostedZoneId?: string;
    }

    export interface ServiceNetworkServiceAssociationTag {
        key: string;
        value: string;
    }

    export interface ServiceNetworkTag {
        key: string;
        value: string;
    }

    export interface ServiceNetworkVpcAssociationTag {
        key: string;
        value: string;
    }

    export interface ServiceTag {
        key: string;
        value: string;
    }

    export interface TargetGroupConfig {
        healthCheck?: outputs.vpclattice.TargetGroupHealthCheckConfig;
        ipAddressType?: enums.vpclattice.TargetGroupConfigIpAddressType;
        lambdaEventStructureVersion?: enums.vpclattice.TargetGroupConfigLambdaEventStructureVersion;
        port?: number;
        protocol?: enums.vpclattice.TargetGroupConfigProtocol;
        protocolVersion?: enums.vpclattice.TargetGroupConfigProtocolVersion;
        vpcIdentifier?: string;
    }

    export interface TargetGroupHealthCheckConfig {
        enabled?: boolean;
        healthCheckIntervalSeconds?: number;
        healthCheckTimeoutSeconds?: number;
        healthyThresholdCount?: number;
        matcher?: outputs.vpclattice.TargetGroupMatcher;
        path?: string;
        port?: number;
        protocol?: enums.vpclattice.TargetGroupHealthCheckConfigProtocol;
        protocolVersion?: enums.vpclattice.TargetGroupHealthCheckConfigProtocolVersion;
        unhealthyThresholdCount?: number;
    }

    export interface TargetGroupMatcher {
        httpCode: string;
    }

    export interface TargetGroupTag {
        key: string;
        value: string;
    }

    export interface TargetGroupTarget {
        id: string;
        port?: number;
    }

}

export namespace waf {
    export interface ByteMatchSetByteMatchTuple {
        fieldToMatch: outputs.waf.ByteMatchSetFieldToMatch;
        positionalConstraint: string;
        targetString?: string;
        targetStringBase64?: string;
        textTransformation: string;
    }

    export interface ByteMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface IpSetIpSetDescriptor {
        type: string;
        value: string;
    }

    export interface RulePredicate {
        dataId: string;
        negated: boolean;
        type: string;
    }

    export interface SizeConstraintSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface SizeConstraintSetSizeConstraint {
        comparisonOperator: string;
        fieldToMatch: outputs.waf.SizeConstraintSetFieldToMatch;
        size: number;
        textTransformation: string;
    }

    export interface SqlInjectionMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTuple {
        fieldToMatch: outputs.waf.SqlInjectionMatchSetFieldToMatch;
        textTransformation: string;
    }

    export interface WebAclActivatedRule {
        action?: outputs.waf.WebAclWafAction;
        priority: number;
        ruleId: string;
    }

    export interface WebAclWafAction {
        type: string;
    }

    export interface XssMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface XssMatchSetXssMatchTuple {
        fieldToMatch: outputs.waf.XssMatchSetFieldToMatch;
        textTransformation: string;
    }

}

export namespace wafregional {
    export interface ByteMatchSetByteMatchTuple {
        fieldToMatch: outputs.wafregional.ByteMatchSetFieldToMatch;
        positionalConstraint: string;
        targetString?: string;
        targetStringBase64?: string;
        textTransformation: string;
    }

    export interface ByteMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface GeoMatchSetGeoMatchConstraint {
        type: string;
        value: string;
    }

    export interface IpSetIpSetDescriptor {
        type: string;
        value: string;
    }

    export interface RateBasedRulePredicate {
        dataId: string;
        negated: boolean;
        type: string;
    }

    export interface RulePredicate {
        dataId: string;
        negated: boolean;
        type: string;
    }

    export interface SizeConstraintSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface SizeConstraintSetSizeConstraint {
        comparisonOperator: string;
        fieldToMatch: outputs.wafregional.SizeConstraintSetFieldToMatch;
        size: number;
        textTransformation: string;
    }

    export interface SqlInjectionMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTuple {
        fieldToMatch: outputs.wafregional.SqlInjectionMatchSetFieldToMatch;
        textTransformation: string;
    }

    export interface WebAclAction {
        type: string;
    }

    export interface WebAclRule {
        action: outputs.wafregional.WebAclAction;
        priority: number;
        ruleId: string;
    }

    export interface XssMatchSetFieldToMatch {
        data?: string;
        type: string;
    }

    export interface XssMatchSetXssMatchTuple {
        fieldToMatch: outputs.wafregional.XssMatchSetFieldToMatch;
        textTransformation: string;
    }

}

export namespace wafv2 {
    export interface IpSetTag {
        key?: string;
        value?: string;
    }

    export interface LoggingConfigurationCondition {
        /**
         * A single action condition.
         */
        actionCondition?: outputs.wafv2.LoggingConfigurationConditionActionConditionProperties;
        /**
         * A single label name condition.
         */
        labelNameCondition?: outputs.wafv2.LoggingConfigurationConditionLabelNameConditionProperties;
    }

    /**
     * A single action condition.
     */
    export interface LoggingConfigurationConditionActionConditionProperties {
        /**
         * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         */
        action: enums.wafv2.LoggingConfigurationConditionActionConditionPropertiesAction;
    }

    /**
     * A single label name condition.
     */
    export interface LoggingConfigurationConditionLabelNameConditionProperties {
        /**
         * The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 
         */
        labelName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LoggingConfigurationFieldToMatch {
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
         */
        method?: any;
        /**
         * Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
         */
        queryString?: any;
        /**
         * Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
         */
        singleHeader?: outputs.wafv2.LoggingConfigurationFieldToMatchSingleHeaderProperties;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
         */
        uriPath?: any;
    }

    /**
     * Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
     */
    export interface LoggingConfigurationFieldToMatchSingleHeaderProperties {
        /**
         * The name of the query header to inspect.
         */
        name: string;
    }

    export interface LoggingConfigurationFilter {
        /**
         * How to handle logs that satisfy the filter's conditions and requirement. 
         */
        behavior: enums.wafv2.LoggingConfigurationFilterBehavior;
        /**
         * Match conditions for the filter.
         */
        conditions: outputs.wafv2.LoggingConfigurationCondition[];
        /**
         * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         */
        requirement: enums.wafv2.LoggingConfigurationFilterRequirement;
    }

    /**
     * Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
     */
    export interface LoggingFilterProperties {
        /**
         * Default handling for logs that don't match any of the specified filtering conditions.
         */
        defaultBehavior: enums.wafv2.LoggingConfigurationLoggingFilterPropertiesDefaultBehavior;
        /**
         * The filters that you want to apply to the logs.
         */
        filters: outputs.wafv2.LoggingConfigurationFilter[];
    }

    export interface RegexPatternSetTag {
        key?: string;
        value?: string;
    }

    /**
     * Allow traffic towards application.
     */
    export interface RuleGroupAllowAction {
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupAndStatement {
        statements: outputs.wafv2.RuleGroupStatement[];
    }

    /**
     * Block traffic towards application.
     */
    export interface RuleGroupBlockAction {
        customResponse?: outputs.wafv2.RuleGroupCustomResponse;
    }

    /**
     * The body of a web request. This immediately follows the request headers.
     */
    export interface RuleGroupBody {
        oversizeHandling?: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * Byte Match statement.
     */
    export interface RuleGroupByteMatchStatement {
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        positionalConstraint: enums.wafv2.RuleGroupPositionalConstraint;
        searchString?: string;
        searchStringBase64?: string;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Checks valid token exists with request.
     */
    export interface RuleGroupCaptchaAction {
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupCaptchaConfig {
        immunityTimeProperty?: outputs.wafv2.RuleGroupImmunityTimeProperty;
    }

    /**
     * Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
     */
    export interface RuleGroupChallengeAction {
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupChallengeConfig {
        immunityTimeProperty?: outputs.wafv2.RuleGroupImmunityTimeProperty;
    }

    /**
     * The pattern to look for in the request cookies.
     */
    export interface RuleGroupCookieMatchPattern {
        /**
         * Inspect all parts of the web request cookies.
         */
        all?: any;
        excludedCookies?: string[];
        includedCookies?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface RuleGroupCookies {
        matchPattern: outputs.wafv2.RuleGroupCookieMatchPattern;
        matchScope: enums.wafv2.RuleGroupMapMatchScope;
        oversizeHandling: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * Count traffic towards application.
     */
    export interface RuleGroupCountAction {
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    /**
     * HTTP header.
     */
    export interface RuleGroupCustomHttpHeader {
        name: string;
        value: string;
    }

    /**
     * Custom request handling.
     */
    export interface RuleGroupCustomRequestHandling {
        /**
         * Collection of HTTP headers.
         */
        insertHeaders: outputs.wafv2.RuleGroupCustomHttpHeader[];
    }

    /**
     * Custom response.
     */
    export interface RuleGroupCustomResponse {
        /**
         * Custom response body key.
         */
        customResponseBodyKey?: string;
        responseCode: number;
        /**
         * Collection of HTTP headers.
         */
        responseHeaders?: outputs.wafv2.RuleGroupCustomHttpHeader[];
    }

    /**
     * Custom response key and body map.
     */
    export interface RuleGroupCustomResponseBodies {
    }

    /**
     * Field of the request to match.
     */
    export interface RuleGroupFieldToMatch {
        /**
         * All query arguments of a web request.
         */
        allQueryArguments?: any;
        body?: outputs.wafv2.RuleGroupBody;
        cookies?: outputs.wafv2.RuleGroupCookies;
        headers?: outputs.wafv2.RuleGroupHeaders;
        jsonBody?: outputs.wafv2.RuleGroupJsonBody;
        /**
         * The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: any;
        /**
         * The query string of a web request. This is the part of a URL that appears after a ? character, if any.
         */
        queryString?: any;
        singleHeader?: outputs.wafv2.RuleGroupFieldToMatchSingleHeaderProperties;
        /**
         * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupFieldToMatchSingleQueryArgumentProperties;
        /**
         * The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
         */
        uriPath?: any;
    }

    export interface RuleGroupFieldToMatchSingleHeaderProperties {
        name: string;
    }

    /**
     * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
     */
    export interface RuleGroupFieldToMatchSingleQueryArgumentProperties {
        name: string;
    }

    export interface RuleGroupForwardedIpConfiguration {
        fallbackBehavior: enums.wafv2.RuleGroupForwardedIpConfigurationFallbackBehavior;
        headerName: string;
    }

    export interface RuleGroupGeoMatchStatement {
        countryCodes?: string[];
        forwardedIpConfig?: outputs.wafv2.RuleGroupForwardedIpConfiguration;
    }

    /**
     * The pattern to look for in the request headers.
     */
    export interface RuleGroupHeaderMatchPattern {
        /**
         * Inspect all parts of the web request headers.
         */
        all?: any;
        excludedHeaders?: string[];
        includedHeaders?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface RuleGroupHeaders {
        matchPattern: outputs.wafv2.RuleGroupHeaderMatchPattern;
        matchScope: enums.wafv2.RuleGroupMapMatchScope;
        oversizeHandling: enums.wafv2.RuleGroupOversizeHandling;
    }

    export interface RuleGroupImmunityTimeProperty {
        immunityTime: number;
    }

    export interface RuleGroupIpSetForwardedIpConfiguration {
        fallbackBehavior: enums.wafv2.RuleGroupIpSetForwardedIpConfigurationFallbackBehavior;
        headerName: string;
        position: enums.wafv2.RuleGroupIpSetForwardedIpConfigurationPosition;
    }

    export interface RuleGroupIpSetReferenceStatement {
        arn: string;
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupIpSetForwardedIpConfiguration;
    }

    /**
     * Inspect the request body as JSON. The request body immediately follows the request headers.
     */
    export interface RuleGroupJsonBody {
        invalidFallbackBehavior?: enums.wafv2.RuleGroupBodyParsingFallbackBehavior;
        matchPattern: outputs.wafv2.RuleGroupJsonMatchPattern;
        matchScope: enums.wafv2.RuleGroupJsonMatchScope;
        oversizeHandling?: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * The pattern to look for in the JSON body.
     */
    export interface RuleGroupJsonMatchPattern {
        /**
         * Inspect all parts of the web request's JSON body.
         */
        all?: any;
        includedPaths?: string[];
    }

    export interface RuleGroupLabel {
        name: string;
    }

    export interface RuleGroupLabelMatchStatement {
        key: string;
        scope: enums.wafv2.RuleGroupLabelMatchScope;
    }

    export interface RuleGroupLabelSummary {
        name?: string;
    }

    export interface RuleGroupNotStatement {
        statement: outputs.wafv2.RuleGroupStatement;
    }

    export interface RuleGroupOrStatement {
        statements: outputs.wafv2.RuleGroupStatement[];
    }

    export interface RuleGroupRateBasedStatement {
        aggregateKeyType: enums.wafv2.RuleGroupRateBasedStatementAggregateKeyType;
        /**
         * Specifies the aggregate keys to use in a rate-base rule.
         */
        customKeys?: outputs.wafv2.RuleGroupRateBasedStatementCustomKey[];
        forwardedIpConfig?: outputs.wafv2.RuleGroupForwardedIpConfiguration;
        limit: number;
        scopeDownStatement?: outputs.wafv2.RuleGroupStatement;
    }

    /**
     * Specifies a single custom aggregate key for a rate-base rule.
     */
    export interface RuleGroupRateBasedStatementCustomKey {
        cookie?: outputs.wafv2.RuleGroupRateLimitCookie;
        forwardedIp?: outputs.wafv2.RuleGroupRateLimitForwardedIp;
        header?: outputs.wafv2.RuleGroupRateLimitHeader;
        httpMethod?: outputs.wafv2.RuleGroupRateLimitHttpMethod;
        ip?: outputs.wafv2.RuleGroupRateLimitIp;
        labelNamespace?: outputs.wafv2.RuleGroupRateLimitLabelNamespace;
        queryArgument?: outputs.wafv2.RuleGroupRateLimitQueryArgument;
        queryString?: outputs.wafv2.RuleGroupRateLimitQueryString;
        uriPath?: outputs.wafv2.RuleGroupRateLimitUriPath;
    }

    /**
     * Specifies a cookie as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitCookie {
        /**
         * The name of the cookie to use.
         */
        name: string;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitForwardedIp {
    }

    /**
     * Specifies a header as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitHeader {
        /**
         * The name of the header to use.
         */
        name: string;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's HTTP method as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitHttpMethod {
    }

    /**
     * Specifies the IP address in the web request as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitIp {
    }

    /**
     * Specifies a label namespace to use as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitLabelNamespace {
        /**
         * The namespace to use for aggregation.
         */
        namespace: string;
    }

    /**
     * Specifies a query argument in the request as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitQueryArgument {
        /**
         * The name of the query argument to use.
         */
        name: string;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's query string as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitQueryString {
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's URI Path as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitUriPath {
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    export interface RuleGroupRegexMatchStatement {
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        regexString: string;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    export interface RuleGroupRegexPatternSetReferenceStatement {
        arn: string;
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Rule of RuleGroup that contains condition and action.
     */
    export interface RuleGroupRule {
        action?: outputs.wafv2.RuleGroupRuleAction;
        captchaConfig?: outputs.wafv2.RuleGroupCaptchaConfig;
        challengeConfig?: outputs.wafv2.RuleGroupChallengeConfig;
        name: string;
        priority: number;
        /**
         * Collection of Rule Labels.
         */
        ruleLabels?: outputs.wafv2.RuleGroupLabel[];
        statement: outputs.wafv2.RuleGroupStatement;
        visibilityConfig: outputs.wafv2.RuleGroupVisibilityConfig;
    }

    /**
     * Action taken when Rule matches its condition.
     */
    export interface RuleGroupRuleAction {
        allow?: outputs.wafv2.RuleGroupAllowAction;
        block?: outputs.wafv2.RuleGroupBlockAction;
        captcha?: outputs.wafv2.RuleGroupCaptchaAction;
        challenge?: outputs.wafv2.RuleGroupChallengeAction;
        count?: outputs.wafv2.RuleGroupCountAction;
    }

    /**
     * Size Constraint statement.
     */
    export interface RuleGroupSizeConstraintStatement {
        comparisonOperator: enums.wafv2.RuleGroupSizeConstraintStatementComparisonOperator;
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        size: number;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Sqli Match Statement.
     */
    export interface RuleGroupSqliMatchStatement {
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        sensitivityLevel?: enums.wafv2.RuleGroupSensitivityLevel;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
     */
    export interface RuleGroupStatement {
        andStatement?: outputs.wafv2.RuleGroupAndStatement;
        byteMatchStatement?: outputs.wafv2.RuleGroupByteMatchStatement;
        geoMatchStatement?: outputs.wafv2.RuleGroupGeoMatchStatement;
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupIpSetReferenceStatement;
        labelMatchStatement?: outputs.wafv2.RuleGroupLabelMatchStatement;
        notStatement?: outputs.wafv2.RuleGroupNotStatement;
        orStatement?: outputs.wafv2.RuleGroupOrStatement;
        rateBasedStatement?: outputs.wafv2.RuleGroupRateBasedStatement;
        regexMatchStatement?: outputs.wafv2.RuleGroupRegexMatchStatement;
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRegexPatternSetReferenceStatement;
        sizeConstraintStatement?: outputs.wafv2.RuleGroupSizeConstraintStatement;
        sqliMatchStatement?: outputs.wafv2.RuleGroupSqliMatchStatement;
        xssMatchStatement?: outputs.wafv2.RuleGroupXssMatchStatement;
    }

    export interface RuleGroupTag {
        key?: string;
        value?: string;
    }

    /**
     * Text Transformation on the Search String before match.
     */
    export interface RuleGroupTextTransformation {
        priority: number;
        type: enums.wafv2.RuleGroupTextTransformationType;
    }

    /**
     * Visibility Metric of the RuleGroup.
     */
    export interface RuleGroupVisibilityConfig {
        cloudWatchMetricsEnabled: boolean;
        metricName: string;
        sampledRequestsEnabled: boolean;
    }

    /**
     * Xss Match Statement.
     */
    export interface RuleGroupXssMatchStatement {
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Allow traffic towards application.
     */
    export interface WebAclAllowAction {
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclAndStatement {
        statements: outputs.wafv2.WebAclStatement[];
    }

    /**
     * AssociationConfig for body inspection
     */
    export interface WebAclAssociationConfig {
        requestBody?: outputs.wafv2.WebAclRequestBody;
    }

    /**
     * Configures how to use the Account creation fraud prevention managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesAcfpRuleSet {
        creationPath: string;
        enableRegexInPath?: boolean;
        registrationPagePath: string;
        requestInspection: outputs.wafv2.WebAclRequestInspectionAcfp;
        responseInspection?: outputs.wafv2.WebAclResponseInspection;
    }

    /**
     * Configures how to use the Account Takeover Prevention managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesAtpRuleSet {
        enableRegexInPath?: boolean;
        loginPath: string;
        requestInspection?: outputs.wafv2.WebAclRequestInspection;
        responseInspection?: outputs.wafv2.WebAclResponseInspection;
    }

    /**
     * Configures how to use the Bot Control managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesBotControlRuleSet {
        enableMachineLearning?: boolean;
        inspectionLevel: enums.wafv2.WebAclAwsManagedRulesBotControlRuleSetInspectionLevel;
    }

    /**
     * Block traffic towards application.
     */
    export interface WebAclBlockAction {
        customResponse?: outputs.wafv2.WebAclCustomResponse;
    }

    /**
     * The body of a web request. This immediately follows the request headers.
     */
    export interface WebAclBody {
        oversizeHandling?: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * Byte Match statement.
     */
    export interface WebAclByteMatchStatement {
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        positionalConstraint: enums.wafv2.WebAclPositionalConstraint;
        searchString?: string;
        searchStringBase64?: string;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Checks valid token exists with request.
     */
    export interface WebAclCaptchaAction {
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclCaptchaConfig {
        immunityTimeProperty?: outputs.wafv2.WebAclImmunityTimeProperty;
    }

    /**
     * Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
     */
    export interface WebAclChallengeAction {
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclChallengeConfig {
        immunityTimeProperty?: outputs.wafv2.WebAclImmunityTimeProperty;
    }

    /**
     * The pattern to look for in the request cookies.
     */
    export interface WebAclCookieMatchPattern {
        /**
         * Inspect all parts of the web request cookies.
         */
        all?: any;
        excludedCookies?: string[];
        includedCookies?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface WebAclCookies {
        matchPattern: outputs.wafv2.WebAclCookieMatchPattern;
        matchScope: enums.wafv2.WebAclMapMatchScope;
        oversizeHandling: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * Allow traffic towards application.
     */
    export interface WebAclCountAction {
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    /**
     * HTTP header.
     */
    export interface WebAclCustomHttpHeader {
        name: string;
        value: string;
    }

    /**
     * Custom request handling.
     */
    export interface WebAclCustomRequestHandling {
        /**
         * Collection of HTTP headers.
         */
        insertHeaders: outputs.wafv2.WebAclCustomHttpHeader[];
    }

    /**
     * Custom response.
     */
    export interface WebAclCustomResponse {
        /**
         * Custom response body key.
         */
        customResponseBodyKey?: string;
        responseCode: number;
        /**
         * Collection of HTTP headers.
         */
        responseHeaders?: outputs.wafv2.WebAclCustomHttpHeader[];
    }

    /**
     * Custom response key and body map.
     */
    export interface WebAclCustomResponseBodies {
    }

    /**
     * Default Action WebACL will take against ingress traffic when there is no matching Rule.
     */
    export interface WebAclDefaultAction {
        allow?: outputs.wafv2.WebAclAllowAction;
        block?: outputs.wafv2.WebAclBlockAction;
    }

    /**
     * Excluded Rule in the RuleGroup or ManagedRuleGroup will not be evaluated.
     */
    export interface WebAclExcludedRule {
        name: string;
    }

    export interface WebAclFieldIdentifier {
        identifier: string;
    }

    /**
     * Field of the request to match.
     */
    export interface WebAclFieldToMatch {
        /**
         * All query arguments of a web request.
         */
        allQueryArguments?: any;
        body?: outputs.wafv2.WebAclBody;
        cookies?: outputs.wafv2.WebAclCookies;
        headers?: outputs.wafv2.WebAclHeaders;
        jsonBody?: outputs.wafv2.WebAclJsonBody;
        /**
         * The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: any;
        /**
         * The query string of a web request. This is the part of a URL that appears after a ? character, if any.
         */
        queryString?: any;
        singleHeader?: outputs.wafv2.WebAclFieldToMatchSingleHeaderProperties;
        /**
         * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
         */
        singleQueryArgument?: outputs.wafv2.WebAclFieldToMatchSingleQueryArgumentProperties;
        /**
         * The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
         */
        uriPath?: any;
    }

    export interface WebAclFieldToMatchSingleHeaderProperties {
        name: string;
    }

    /**
     * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
     */
    export interface WebAclFieldToMatchSingleQueryArgumentProperties {
        name: string;
    }

    export interface WebAclForwardedIpConfiguration {
        fallbackBehavior: enums.wafv2.WebAclForwardedIpConfigurationFallbackBehavior;
        headerName: string;
    }

    export interface WebAclGeoMatchStatement {
        countryCodes?: string[];
        forwardedIpConfig?: outputs.wafv2.WebAclForwardedIpConfiguration;
    }

    /**
     * The pattern to look for in the request headers.
     */
    export interface WebAclHeaderMatchPattern {
        /**
         * Inspect all parts of the web request headers.
         */
        all?: any;
        excludedHeaders?: string[];
        includedHeaders?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface WebAclHeaders {
        matchPattern: outputs.wafv2.WebAclHeaderMatchPattern;
        matchScope: enums.wafv2.WebAclMapMatchScope;
        oversizeHandling: enums.wafv2.WebAclOversizeHandling;
    }

    export interface WebAclImmunityTimeProperty {
        immunityTime: number;
    }

    export interface WebAclIpSetForwardedIpConfiguration {
        fallbackBehavior: enums.wafv2.WebAclIpSetForwardedIpConfigurationFallbackBehavior;
        headerName: string;
        position: enums.wafv2.WebAclIpSetForwardedIpConfigurationPosition;
    }

    export interface WebAclIpSetReferenceStatement {
        arn: string;
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclIpSetForwardedIpConfiguration;
    }

    /**
     * Inspect the request body as JSON. The request body immediately follows the request headers.
     */
    export interface WebAclJsonBody {
        invalidFallbackBehavior?: enums.wafv2.WebAclBodyParsingFallbackBehavior;
        matchPattern: outputs.wafv2.WebAclJsonMatchPattern;
        matchScope: enums.wafv2.WebAclJsonMatchScope;
        oversizeHandling?: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * The pattern to look for in the JSON body.
     */
    export interface WebAclJsonMatchPattern {
        /**
         * Inspect all parts of the web request's JSON body.
         */
        all?: any;
        includedPaths?: string[];
    }

    export interface WebAclLabel {
        name: string;
    }

    export interface WebAclLabelMatchStatement {
        key: string;
        scope: enums.wafv2.WebAclLabelMatchScope;
    }

    /**
     * ManagedRuleGroupConfig.
     */
    export interface WebAclManagedRuleGroupConfig {
        awsManagedRulesAcfpRuleSet?: outputs.wafv2.WebAclAwsManagedRulesAcfpRuleSet;
        awsManagedRulesAtpRuleSet?: outputs.wafv2.WebAclAwsManagedRulesAtpRuleSet;
        awsManagedRulesBotControlRuleSet?: outputs.wafv2.WebAclAwsManagedRulesBotControlRuleSet;
        loginPath?: string;
        passwordField?: outputs.wafv2.WebAclFieldIdentifier;
        payloadType?: enums.wafv2.WebAclManagedRuleGroupConfigPayloadType;
        usernameField?: outputs.wafv2.WebAclFieldIdentifier;
    }

    export interface WebAclManagedRuleGroupStatement {
        excludedRules?: outputs.wafv2.WebAclExcludedRule[];
        /**
         * Collection of ManagedRuleGroupConfig.
         */
        managedRuleGroupConfigs?: outputs.wafv2.WebAclManagedRuleGroupConfig[];
        name: string;
        /**
         * Action overrides for rules in the rule group.
         */
        ruleActionOverrides?: outputs.wafv2.WebAclRuleActionOverride[];
        scopeDownStatement?: outputs.wafv2.WebAclStatement;
        vendorName: string;
        version?: string;
    }

    export interface WebAclNotStatement {
        statement: outputs.wafv2.WebAclStatement;
    }

    export interface WebAclOrStatement {
        statements: outputs.wafv2.WebAclStatement[];
    }

    /**
     * Override a RuleGroup or ManagedRuleGroup behavior. This can only be applied to Rule that has RuleGroupReferenceStatement or ManagedRuleGroupReferenceStatement.
     */
    export interface WebAclOverrideAction {
        /**
         * Count traffic towards application.
         */
        count?: any;
        /**
         * Keep the RuleGroup or ManagedRuleGroup behavior as is.
         */
        none?: any;
    }

    export interface WebAclRateBasedStatement {
        aggregateKeyType: enums.wafv2.WebAclRateBasedStatementAggregateKeyType;
        /**
         * Specifies the aggregate keys to use in a rate-base rule.
         */
        customKeys?: outputs.wafv2.WebAclRateBasedStatementCustomKey[];
        forwardedIpConfig?: outputs.wafv2.WebAclForwardedIpConfiguration;
        limit: number;
        scopeDownStatement?: outputs.wafv2.WebAclStatement;
    }

    /**
     * Specifies a single custom aggregate key for a rate-base rule.
     */
    export interface WebAclRateBasedStatementCustomKey {
        cookie?: outputs.wafv2.WebAclRateLimitCookie;
        forwardedIp?: outputs.wafv2.WebAclRateLimitForwardedIp;
        header?: outputs.wafv2.WebAclRateLimitHeader;
        httpMethod?: outputs.wafv2.WebAclRateLimitHttpMethod;
        ip?: outputs.wafv2.WebAclRateLimitIp;
        labelNamespace?: outputs.wafv2.WebAclRateLimitLabelNamespace;
        queryArgument?: outputs.wafv2.WebAclRateLimitQueryArgument;
        queryString?: outputs.wafv2.WebAclRateLimitQueryString;
        uriPath?: outputs.wafv2.WebAclRateLimitUriPath;
    }

    /**
     * Specifies a cookie as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitCookie {
        /**
         * The name of the cookie to use.
         */
        name: string;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitForwardedIp {
    }

    /**
     * Specifies a header as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitHeader {
        /**
         * The name of the header to use.
         */
        name: string;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's HTTP method as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitHttpMethod {
    }

    /**
     * Specifies the IP address in the web request as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitIp {
    }

    /**
     * Specifies a label namespace to use as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitLabelNamespace {
        /**
         * The namespace to use for aggregation.
         */
        namespace: string;
    }

    /**
     * Specifies a query argument in the request as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitQueryArgument {
        /**
         * The name of the query argument to use.
         */
        name: string;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's query string as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitQueryString {
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's URI Path as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitUriPath {
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    export interface WebAclRegexMatchStatement {
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        regexString: string;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    export interface WebAclRegexPatternSetReferenceStatement {
        arn: string;
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Map of AssociatedResourceType and RequestBodyAssociatedResourceTypeConfig
     */
    export interface WebAclRequestBody {
    }

    /**
     * Configures the inspection of login requests
     */
    export interface WebAclRequestInspection {
        passwordField: outputs.wafv2.WebAclFieldIdentifier;
        payloadType: enums.wafv2.WebAclRequestInspectionPayloadType;
        usernameField: outputs.wafv2.WebAclFieldIdentifier;
    }

    /**
     * Configures the inspection of sign-up requests
     */
    export interface WebAclRequestInspectionAcfp {
        addressFields?: outputs.wafv2.WebAclFieldIdentifier[];
        emailField?: outputs.wafv2.WebAclFieldIdentifier;
        passwordField?: outputs.wafv2.WebAclFieldIdentifier;
        payloadType: enums.wafv2.WebAclRequestInspectionAcfpPayloadType;
        phoneNumberFields?: outputs.wafv2.WebAclFieldIdentifier[];
        usernameField?: outputs.wafv2.WebAclFieldIdentifier;
    }

    /**
     * Configures the inspection of login responses
     */
    export interface WebAclResponseInspection {
        bodyContains?: outputs.wafv2.WebAclResponseInspectionBodyContains;
        header?: outputs.wafv2.WebAclResponseInspectionHeader;
        json?: outputs.wafv2.WebAclResponseInspectionJson;
        statusCode?: outputs.wafv2.WebAclResponseInspectionStatusCode;
    }

    /**
     * Response body contents that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionBodyContains {
        failureStrings: string[];
        successStrings: string[];
    }

    /**
     * Response headers that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionHeader {
        failureValues: string[];
        name: string;
        successValues: string[];
    }

    /**
     * Response JSON that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionJson {
        failureValues: string[];
        identifier: string;
        successValues: string[];
    }

    /**
     * Response status codes that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionStatusCode {
        failureCodes: number[];
        successCodes: number[];
    }

    /**
     * Rule of WebACL that contains condition and action.
     */
    export interface WebAclRule {
        action?: outputs.wafv2.WebAclRuleAction;
        captchaConfig?: outputs.wafv2.WebAclCaptchaConfig;
        challengeConfig?: outputs.wafv2.WebAclChallengeConfig;
        name: string;
        overrideAction?: outputs.wafv2.WebAclOverrideAction;
        priority: number;
        /**
         * Collection of Rule Labels.
         */
        ruleLabels?: outputs.wafv2.WebAclLabel[];
        statement: outputs.wafv2.WebAclStatement;
        visibilityConfig: outputs.wafv2.WebAclVisibilityConfig;
    }

    /**
     * Action taken when Rule matches its condition.
     */
    export interface WebAclRuleAction {
        allow?: outputs.wafv2.WebAclAllowAction;
        block?: outputs.wafv2.WebAclBlockAction;
        captcha?: outputs.wafv2.WebAclCaptchaAction;
        challenge?: outputs.wafv2.WebAclChallengeAction;
        count?: outputs.wafv2.WebAclCountAction;
    }

    /**
     * Action override for rules in the rule group.
     */
    export interface WebAclRuleActionOverride {
        actionToUse: outputs.wafv2.WebAclRuleAction;
        name: string;
    }

    export interface WebAclRuleGroupReferenceStatement {
        arn: string;
        excludedRules?: outputs.wafv2.WebAclExcludedRule[];
        /**
         * Action overrides for rules in the rule group.
         */
        ruleActionOverrides?: outputs.wafv2.WebAclRuleActionOverride[];
    }

    /**
     * Size Constraint statement.
     */
    export interface WebAclSizeConstraintStatement {
        comparisonOperator: enums.wafv2.WebAclSizeConstraintStatementComparisonOperator;
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        size: number;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Sqli Match Statement.
     */
    export interface WebAclSqliMatchStatement {
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        sensitivityLevel?: enums.wafv2.WebAclSensitivityLevel;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
     */
    export interface WebAclStatement {
        andStatement?: outputs.wafv2.WebAclAndStatement;
        byteMatchStatement?: outputs.wafv2.WebAclByteMatchStatement;
        geoMatchStatement?: outputs.wafv2.WebAclGeoMatchStatement;
        ipSetReferenceStatement?: outputs.wafv2.WebAclIpSetReferenceStatement;
        labelMatchStatement?: outputs.wafv2.WebAclLabelMatchStatement;
        managedRuleGroupStatement?: outputs.wafv2.WebAclManagedRuleGroupStatement;
        notStatement?: outputs.wafv2.WebAclNotStatement;
        orStatement?: outputs.wafv2.WebAclOrStatement;
        rateBasedStatement?: outputs.wafv2.WebAclRateBasedStatement;
        regexMatchStatement?: outputs.wafv2.WebAclRegexMatchStatement;
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRegexPatternSetReferenceStatement;
        ruleGroupReferenceStatement?: outputs.wafv2.WebAclRuleGroupReferenceStatement;
        sizeConstraintStatement?: outputs.wafv2.WebAclSizeConstraintStatement;
        sqliMatchStatement?: outputs.wafv2.WebAclSqliMatchStatement;
        xssMatchStatement?: outputs.wafv2.WebAclXssMatchStatement;
    }

    export interface WebAclTag {
        key?: string;
        value?: string;
    }

    /**
     * Text Transformation on the Search String before match.
     */
    export interface WebAclTextTransformation {
        priority: number;
        type: enums.wafv2.WebAclTextTransformationType;
    }

    /**
     * Visibility Metric of the WebACL.
     */
    export interface WebAclVisibilityConfig {
        cloudWatchMetricsEnabled: boolean;
        metricName: string;
        sampledRequestsEnabled: boolean;
    }

    /**
     * Xss Match Statement.
     */
    export interface WebAclXssMatchStatement {
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

}

export namespace wisdom {
    export interface AssistantAssociationAssociationData {
        knowledgeBaseId: string;
    }

    export interface AssistantAssociationTag {
        key: string;
        value: string;
    }

    export interface AssistantServerSideEncryptionConfiguration {
        kmsKeyId?: string;
    }

    export interface AssistantTag {
        key: string;
        value: string;
    }

    export interface KnowledgeBaseAppIntegrationsConfiguration {
        appIntegrationArn: string;
        objectFields?: string[];
    }

    export interface KnowledgeBaseRenderingConfiguration {
        templateUri?: string;
    }

    export interface KnowledgeBaseServerSideEncryptionConfiguration {
        kmsKeyId?: string;
    }

    export interface KnowledgeBaseSourceConfiguration {
        appIntegrations?: outputs.wisdom.KnowledgeBaseAppIntegrationsConfiguration;
    }

    export interface KnowledgeBaseTag {
        key: string;
        value: string;
    }

}

export namespace workspaces {
    export interface ConnectionAliasAssociation {
        associatedAccountId?: string;
        associationStatus?: enums.workspaces.ConnectionAliasAssociationAssociationStatus;
        connectionIdentifier?: string;
        resourceId?: string;
    }

    export interface ConnectionAliasTag {
        key: string;
        value: string;
    }

    export interface WorkspaceProperties {
        computeTypeName?: string;
        rootVolumeSizeGib?: number;
        runningMode?: string;
        runningModeAutoStopTimeoutInMinutes?: number;
        userVolumeSizeGib?: number;
    }

    export interface WorkspaceTag {
        key: string;
        value: string;
    }

}

export namespace workspacesthinclient {
    export interface EnvironmentMaintenanceWindow {
        /**
         * The desired time zone maintenance window.
         */
        applyTimeOf?: enums.workspacesthinclient.EnvironmentMaintenanceWindowApplyTimeOf;
        /**
         * The date of maintenance window.
         */
        daysOfTheWeek?: enums.workspacesthinclient.EnvironmentDayOfWeek[];
        /**
         * The hour end time of maintenance window.
         */
        endTimeHour?: number;
        /**
         * The minute end time of maintenance window.
         */
        endTimeMinute?: number;
        /**
         * The hour start time of maintenance window.
         */
        startTimeHour?: number;
        /**
         * The minute start time of maintenance window.
         */
        startTimeMinute?: number;
        /**
         * The type of maintenance window.
         */
        type: enums.workspacesthinclient.EnvironmentMaintenanceWindowType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface EnvironmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

}

export namespace workspacesweb {
    export interface BrowserSettingsEncryptionContextMap {
    }

    export interface BrowserSettingsTag {
        key: string;
        value: string;
    }

    export interface IdentityProviderDetails {
    }

    export interface IpAccessSettingsEncryptionContextMap {
    }

    export interface IpAccessSettingsIpRule {
        description?: string;
        /**
         * A single IP address or an IP address range in CIDR notation
         */
        ipRange: string;
    }

    export interface IpAccessSettingsTag {
        key: string;
        value: string;
    }

    export interface NetworkSettingsTag {
        key: string;
        value: string;
    }

    export interface PortalEncryptionContextMap {
    }

    export interface PortalTag {
        key: string;
        value: string;
    }

    export interface TrustStoreTag {
        key: string;
        value: string;
    }

    export interface UserAccessLoggingSettingsTag {
        key: string;
        value: string;
    }

    export interface UserSettingsCookieSpecification {
        domain: string;
        name?: string;
        path?: string;
    }

    export interface UserSettingsCookieSynchronizationConfiguration {
        allowlist: outputs.workspacesweb.UserSettingsCookieSpecification[];
        blocklist?: outputs.workspacesweb.UserSettingsCookieSpecification[];
    }

    export interface UserSettingsEncryptionContextMap {
    }

    export interface UserSettingsTag {
        key: string;
        value: string;
    }

}

export namespace xray {
    export interface GroupInsightsConfiguration {
        /**
         * Set the InsightsEnabled value to true to enable insights or false to disable insights.
         */
        insightsEnabled?: boolean;
        /**
         * Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
         */
        notificationsEnabled?: boolean;
    }

    export interface GroupTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface SamplingRule {
        /**
         * Matches attributes derived from the request.
         */
        attributes?: {[key: string]: string};
        /**
         * The percentage of matching requests to instrument, after the reservoir is exhausted.
         */
        fixedRate: number;
        /**
         * Matches the hostname from a request URL.
         */
        host: string;
        /**
         * Matches the HTTP method from a request URL.
         */
        httpMethod: string;
        /**
         * The priority of the sampling rule.
         */
        priority: number;
        /**
         * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         */
        reservoirSize: number;
        /**
         * Matches the ARN of the AWS resource on which the service runs.
         */
        resourceArn: string;
        ruleArn?: string;
        ruleName?: string;
        /**
         * Matches the name that the service uses to identify itself in segments.
         */
        serviceName: string;
        /**
         * Matches the origin that the service uses to identify its type in segments.
         */
        serviceType: string;
        /**
         * Matches the path from a request URL.
         */
        urlPath: string;
        /**
         * The version of the sampling rule format (1)
         */
        version?: number;
    }

    export interface SamplingRuleRecord {
        /**
         * When the rule was created, in Unix time seconds.
         */
        createdAt?: string;
        /**
         * When the rule was modified, in Unix time seconds.
         */
        modifiedAt?: string;
        samplingRule?: outputs.xray.SamplingRule;
    }

    export interface SamplingRuleTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface SamplingRuleUpdate {
        /**
         * Matches attributes derived from the request.
         */
        attributes?: {[key: string]: string};
        /**
         * The percentage of matching requests to instrument, after the reservoir is exhausted.
         */
        fixedRate?: number;
        /**
         * Matches the hostname from a request URL.
         */
        host?: string;
        /**
         * Matches the HTTP method from a request URL.
         */
        httpMethod?: string;
        /**
         * The priority of the sampling rule.
         */
        priority?: number;
        /**
         * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         */
        reservoirSize?: number;
        /**
         * Matches the ARN of the AWS resource on which the service runs.
         */
        resourceArn?: string;
        ruleArn?: string;
        ruleName?: string;
        /**
         * Matches the name that the service uses to identify itself in segments.
         */
        serviceName?: string;
        /**
         * Matches the origin that the service uses to identify its type in segments.
         */
        serviceType?: string;
        /**
         * Matches the path from a request URL.
         */
        urlPath?: string;
    }

}
