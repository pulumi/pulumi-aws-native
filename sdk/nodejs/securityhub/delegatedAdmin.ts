// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::SecurityHub::DelegatedAdmin`` resource designates the delegated ASHlong administrator account for an organization. You must enable the integration between ASH and AOlong before you can designate a delegated ASH administrator. Only the management account for an organization can designate the delegated ASH administrator account. For more information, see [Designating the delegated administrator](https://docs.aws.amazon.com/securityhub/latest/userguide/designate-orgs-admin-account.html#designate-admin-instructions) in the *User Guide*.
 *  To change the delegated administrator account, remove the current delegated administrator account, and then designate the new account.
 *  To designate multiple delegated administrators in different organizations and AWS-Regions, we recommend using [mappings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html).
 *  Tags aren't supported for this resource.
 */
export class DelegatedAdmin extends pulumi.CustomResource {
    /**
     * Get an existing DelegatedAdmin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DelegatedAdmin {
        return new DelegatedAdmin(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:securityhub:DelegatedAdmin';

    /**
     * Returns true if the given object is an instance of DelegatedAdmin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DelegatedAdmin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DelegatedAdmin.__pulumiType;
    }

    /**
     * The AWS-account identifier of the account to designate as the Security Hub administrator account.
     */
    public readonly adminAccountId!: pulumi.Output<string>;
    /**
     * The ID of the delegated Security Hub administrator account, in the format of `accountID/Region` .
     */
    public /*out*/ readonly delegatedAdminIdentifier!: pulumi.Output<string>;
    /**
     * Whether the delegated Security Hub administrator is set for the organization.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.securityhub.DelegatedAdminStatus>;

    /**
     * Create a DelegatedAdmin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DelegatedAdminArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.adminAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminAccountId'");
            }
            resourceInputs["adminAccountId"] = args ? args.adminAccountId : undefined;
            resourceInputs["delegatedAdminIdentifier"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["adminAccountId"] = undefined /*out*/;
            resourceInputs["delegatedAdminIdentifier"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["adminAccountId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DelegatedAdmin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DelegatedAdmin resource.
 */
export interface DelegatedAdminArgs {
    /**
     * The AWS-account identifier of the account to designate as the Security Hub administrator account.
     */
    adminAccountId: pulumi.Input<string>;
}
