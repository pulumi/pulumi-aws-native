// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.
 */
export function getFindingAggregator(args: GetFindingAggregatorArgs, opts?: pulumi.InvokeOptions): Promise<GetFindingAggregatorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:securityhub:getFindingAggregator", {
        "findingAggregatorArn": args.findingAggregatorArn,
    }, opts);
}

export interface GetFindingAggregatorArgs {
    /**
     * The ARN of the FindingAggregator being created and assigned as the unique identifier
     */
    findingAggregatorArn: string;
}

export interface GetFindingAggregatorResult {
    /**
     * The aggregation Region of the FindingAggregator
     */
    readonly findingAggregationRegion?: string;
    /**
     * The ARN of the FindingAggregator being created and assigned as the unique identifier
     */
    readonly findingAggregatorArn?: string;
    /**
     * Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
     */
    readonly regionLinkingMode?: enums.securityhub.FindingAggregatorRegionLinkingMode;
    /**
     * The list of excluded Regions or included Regions
     */
    readonly regions?: string[];
}
/**
 * The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.
 */
export function getFindingAggregatorOutput(args: GetFindingAggregatorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFindingAggregatorResult> {
    return pulumi.output(args).apply((a: any) => getFindingAggregator(a, opts))
}

export interface GetFindingAggregatorOutputArgs {
    /**
     * The ARN of the FindingAggregator being created and assigned as the unique identifier
     */
    findingAggregatorArn: pulumi.Input<string>;
}
