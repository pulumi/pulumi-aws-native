// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::CloudWatch::Alarm
 *
 * @deprecated Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Alarm extends pulumi.CustomResource {
    /**
     * Get an existing Alarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Alarm {
        pulumi.log.warn("Alarm is deprecated: Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Alarm(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cloudwatch:Alarm';

    /**
     * Returns true if the given object is an instance of Alarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alarm.__pulumiType;
    }

    public readonly actionsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly alarmActions!: pulumi.Output<string[] | undefined>;
    public readonly alarmDescription!: pulumi.Output<string | undefined>;
    public readonly alarmName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly comparisonOperator!: pulumi.Output<string>;
    public readonly datapointsToAlarm!: pulumi.Output<number | undefined>;
    public readonly dimensions!: pulumi.Output<outputs.cloudwatch.AlarmDimension[] | undefined>;
    public readonly evaluateLowSampleCountPercentile!: pulumi.Output<string | undefined>;
    public readonly evaluationPeriods!: pulumi.Output<number>;
    public readonly extendedStatistic!: pulumi.Output<string | undefined>;
    public readonly insufficientDataActions!: pulumi.Output<string[] | undefined>;
    public readonly metricName!: pulumi.Output<string | undefined>;
    public readonly metrics!: pulumi.Output<outputs.cloudwatch.AlarmMetricDataQuery[] | undefined>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly oKActions!: pulumi.Output<string[] | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly statistic!: pulumi.Output<string | undefined>;
    public readonly threshold!: pulumi.Output<number | undefined>;
    public readonly thresholdMetricId!: pulumi.Output<string | undefined>;
    public readonly treatMissingData!: pulumi.Output<string | undefined>;
    public readonly unit!: pulumi.Output<string | undefined>;

    /**
     * Create a Alarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: AlarmArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Alarm is deprecated: Alarm is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.comparisonOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comparisonOperator'");
            }
            if ((!args || args.evaluationPeriods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationPeriods'");
            }
            inputs["actionsEnabled"] = args ? args.actionsEnabled : undefined;
            inputs["alarmActions"] = args ? args.alarmActions : undefined;
            inputs["alarmDescription"] = args ? args.alarmDescription : undefined;
            inputs["alarmName"] = args ? args.alarmName : undefined;
            inputs["comparisonOperator"] = args ? args.comparisonOperator : undefined;
            inputs["datapointsToAlarm"] = args ? args.datapointsToAlarm : undefined;
            inputs["dimensions"] = args ? args.dimensions : undefined;
            inputs["evaluateLowSampleCountPercentile"] = args ? args.evaluateLowSampleCountPercentile : undefined;
            inputs["evaluationPeriods"] = args ? args.evaluationPeriods : undefined;
            inputs["extendedStatistic"] = args ? args.extendedStatistic : undefined;
            inputs["insufficientDataActions"] = args ? args.insufficientDataActions : undefined;
            inputs["metricName"] = args ? args.metricName : undefined;
            inputs["metrics"] = args ? args.metrics : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["oKActions"] = args ? args.oKActions : undefined;
            inputs["period"] = args ? args.period : undefined;
            inputs["statistic"] = args ? args.statistic : undefined;
            inputs["threshold"] = args ? args.threshold : undefined;
            inputs["thresholdMetricId"] = args ? args.thresholdMetricId : undefined;
            inputs["treatMissingData"] = args ? args.treatMissingData : undefined;
            inputs["unit"] = args ? args.unit : undefined;
            inputs["arn"] = undefined /*out*/;
        } else {
            inputs["actionsEnabled"] = undefined /*out*/;
            inputs["alarmActions"] = undefined /*out*/;
            inputs["alarmDescription"] = undefined /*out*/;
            inputs["alarmName"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["comparisonOperator"] = undefined /*out*/;
            inputs["datapointsToAlarm"] = undefined /*out*/;
            inputs["dimensions"] = undefined /*out*/;
            inputs["evaluateLowSampleCountPercentile"] = undefined /*out*/;
            inputs["evaluationPeriods"] = undefined /*out*/;
            inputs["extendedStatistic"] = undefined /*out*/;
            inputs["insufficientDataActions"] = undefined /*out*/;
            inputs["metricName"] = undefined /*out*/;
            inputs["metrics"] = undefined /*out*/;
            inputs["namespace"] = undefined /*out*/;
            inputs["oKActions"] = undefined /*out*/;
            inputs["period"] = undefined /*out*/;
            inputs["statistic"] = undefined /*out*/;
            inputs["threshold"] = undefined /*out*/;
            inputs["thresholdMetricId"] = undefined /*out*/;
            inputs["treatMissingData"] = undefined /*out*/;
            inputs["unit"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Alarm.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Alarm resource.
 */
export interface AlarmArgs {
    actionsEnabled?: pulumi.Input<boolean>;
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    alarmDescription?: pulumi.Input<string>;
    alarmName?: pulumi.Input<string>;
    comparisonOperator: pulumi.Input<string>;
    datapointsToAlarm?: pulumi.Input<number>;
    dimensions?: pulumi.Input<pulumi.Input<inputs.cloudwatch.AlarmDimensionArgs>[]>;
    evaluateLowSampleCountPercentile?: pulumi.Input<string>;
    evaluationPeriods: pulumi.Input<number>;
    extendedStatistic?: pulumi.Input<string>;
    insufficientDataActions?: pulumi.Input<pulumi.Input<string>[]>;
    metricName?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.cloudwatch.AlarmMetricDataQueryArgs>[]>;
    namespace?: pulumi.Input<string>;
    oKActions?: pulumi.Input<pulumi.Input<string>[]>;
    period?: pulumi.Input<number>;
    statistic?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholdMetricId?: pulumi.Input<string>;
    treatMissingData?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}
