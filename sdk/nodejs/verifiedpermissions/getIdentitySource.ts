// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
 */
export function getIdentitySource(args: GetIdentitySourceArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentitySourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:verifiedpermissions:getIdentitySource", {
        "identitySourceId": args.identitySourceId,
        "policyStoreId": args.policyStoreId,
    }, opts);
}

export interface GetIdentitySourceArgs {
    /**
     * The unique ID of the new or updated identity store.
     */
    identitySourceId: string;
    /**
     * Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
     */
    policyStoreId: string;
}

export interface GetIdentitySourceResult {
    /**
     * Contains configuration information used when creating a new identity source.
     */
    readonly configuration?: outputs.verifiedpermissions.IdentitySourceConfiguration0Properties | outputs.verifiedpermissions.IdentitySourceConfiguration1Properties;
    readonly details?: outputs.verifiedpermissions.IdentitySourceDetails;
    /**
     * The unique ID of the new or updated identity store.
     */
    readonly identitySourceId?: string;
    /**
     * Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
     */
    readonly principalEntityType?: string;
}
/**
 * Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
 */
export function getIdentitySourceOutput(args: GetIdentitySourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentitySourceResult> {
    return pulumi.output(args).apply((a: any) => getIdentitySource(a, opts))
}

export interface GetIdentitySourceOutputArgs {
    /**
     * The unique ID of the new or updated identity store.
     */
    identitySourceId: pulumi.Input<string>;
    /**
     * Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
     */
    policyStoreId: pulumi.Input<string>;
}
