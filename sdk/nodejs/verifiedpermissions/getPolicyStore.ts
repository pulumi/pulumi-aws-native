// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
 */
export function getPolicyStore(args: GetPolicyStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyStoreResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:verifiedpermissions:getPolicyStore", {
        "policyStoreId": args.policyStoreId,
    }, opts);
}

export interface GetPolicyStoreArgs {
    /**
     * The unique ID of the new or updated policy store.
     */
    policyStoreId: string;
}

export interface GetPolicyStoreResult {
    /**
     * The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
     */
    readonly arn?: string;
    /**
     * Descriptive text that you can provide to help with identification of the current policy store.
     */
    readonly description?: string;
    /**
     * The unique ID of the new or updated policy store.
     */
    readonly policyStoreId?: string;
    /**
     * Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
     */
    readonly schema?: outputs.verifiedpermissions.PolicyStoreSchemaDefinition;
    /**
     * A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
     */
    readonly validationSettings?: outputs.verifiedpermissions.PolicyStoreValidationSettings;
}
/**
 * Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
 */
export function getPolicyStoreOutput(args: GetPolicyStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyStoreResult> {
    return pulumi.output(args).apply((a: any) => getPolicyStore(a, opts))
}

export interface GetPolicyStoreOutputArgs {
    /**
     * The unique ID of the new or updated policy store.
     */
    policyStoreId: pulumi.Input<string>;
}
