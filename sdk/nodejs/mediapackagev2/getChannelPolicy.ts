// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <p>Represents a resource-based policy that allows or denies access to a channel.</p>
 */
export function getChannelPolicy(args: GetChannelPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetChannelPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:mediapackagev2:getChannelPolicy", {
        "channelGroupName": args.channelGroupName,
        "channelName": args.channelName,
    }, opts);
}

export interface GetChannelPolicyArgs {
    /**
     * The name of the channel group associated with the channel policy.
     */
    channelGroupName: string;
    /**
     * The name of the channel associated with the channel policy.
     */
    channelName: string;
}

export interface GetChannelPolicyResult {
    /**
     * The policy associated with the channel.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::MediaPackageV2::ChannelPolicy` for more information about the expected schema for this property.
     */
    readonly policy?: any;
}
/**
 * <p>Represents a resource-based policy that allows or denies access to a channel.</p>
 */
export function getChannelPolicyOutput(args: GetChannelPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChannelPolicyResult> {
    return pulumi.output(args).apply((a: any) => getChannelPolicy(a, opts))
}

export interface GetChannelPolicyOutputArgs {
    /**
     * The name of the channel group associated with the channel policy.
     */
    channelGroupName: pulumi.Input<string>;
    /**
     * The name of the channel associated with the channel policy.
     */
    channelName: pulumi.Input<string>;
}
