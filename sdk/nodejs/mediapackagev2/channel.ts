// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * <p>Represents an entry point into AWS Elemental MediaPackage for an ABR video content stream sent from an upstream encoder such as AWS Elemental MediaLive. The channel continuously analyzes the content that it receives and prepares it to be distributed to consumers via one or more origin endpoints.</p>
 */
export class Channel extends pulumi.CustomResource {
    /**
     * Get an existing Channel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Channel {
        return new Channel(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:mediapackagev2:Channel';

    /**
     * Returns true if the given object is an instance of Channel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Channel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Channel.__pulumiType;
    }

    /**
     * <p>The Amazon Resource Name (ARN) associated with the resource.</p>
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the channel group associated with the channel configuration.
     */
    public readonly channelGroupName!: pulumi.Output<string>;
    /**
     * The name of the channel.
     */
    public readonly channelName!: pulumi.Output<string>;
    /**
     * <p>The date and time the channel was created.</p>
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * <p>Enter any descriptive text that helps you to identify the channel.</p>
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ingestEndpointUrls!: pulumi.Output<string[]>;
    /**
     * <p>The list of ingest endpoints.</p>
     */
    public /*out*/ readonly ingestEndpoints!: pulumi.Output<outputs.mediapackagev2.ChannelIngestEndpoint[]>;
    public readonly inputSwitchConfiguration!: pulumi.Output<outputs.mediapackagev2.ChannelInputSwitchConfiguration | undefined>;
    /**
     * The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior.
     *
     * The allowed values are:
     *
     * - `HLS` - The HLS streaming specification (which defines M3U8 manifests and TS segments).
     * - `CMAF` - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
     */
    public readonly inputType!: pulumi.Output<enums.mediapackagev2.ChannelInputType | undefined>;
    /**
     * <p>The date and time the channel was modified.</p>
     */
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly outputHeaderConfiguration!: pulumi.Output<outputs.mediapackagev2.ChannelOutputHeaderConfiguration | undefined>;
    /**
     * The tags associated with the channel.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Channel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChannelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.channelGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelGroupName'");
            }
            resourceInputs["channelGroupName"] = args ? args.channelGroupName : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputSwitchConfiguration"] = args ? args.inputSwitchConfiguration : undefined;
            resourceInputs["inputType"] = args ? args.inputType : undefined;
            resourceInputs["outputHeaderConfiguration"] = args ? args.outputHeaderConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ingestEndpointUrls"] = undefined /*out*/;
            resourceInputs["ingestEndpoints"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["channelGroupName"] = undefined /*out*/;
            resourceInputs["channelName"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["ingestEndpointUrls"] = undefined /*out*/;
            resourceInputs["ingestEndpoints"] = undefined /*out*/;
            resourceInputs["inputSwitchConfiguration"] = undefined /*out*/;
            resourceInputs["inputType"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["outputHeaderConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["channelGroupName", "channelName", "inputType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Channel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Channel resource.
 */
export interface ChannelArgs {
    /**
     * The name of the channel group associated with the channel configuration.
     */
    channelGroupName: pulumi.Input<string>;
    /**
     * The name of the channel.
     */
    channelName?: pulumi.Input<string>;
    /**
     * <p>Enter any descriptive text that helps you to identify the channel.</p>
     */
    description?: pulumi.Input<string>;
    inputSwitchConfiguration?: pulumi.Input<inputs.mediapackagev2.ChannelInputSwitchConfigurationArgs>;
    /**
     * The input type will be an immutable field which will be used to define whether the channel will allow CMAF ingest or HLS ingest. If unprovided, it will default to HLS to preserve current behavior.
     *
     * The allowed values are:
     *
     * - `HLS` - The HLS streaming specification (which defines M3U8 manifests and TS segments).
     * - `CMAF` - The DASH-IF CMAF Ingest specification (which defines CMAF segments with optional DASH manifests).
     */
    inputType?: pulumi.Input<enums.mediapackagev2.ChannelInputType>;
    outputHeaderConfiguration?: pulumi.Input<inputs.mediapackagev2.ChannelOutputHeaderConfigurationArgs>;
    /**
     * The tags associated with the channel.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
