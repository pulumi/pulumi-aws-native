// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Route53::RecordSet.
 */
export function getRecordSet(args: GetRecordSetArgs, opts?: pulumi.InvokeOptions): Promise<GetRecordSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:route53:getRecordSet", {
        "hostedZoneId": args.hostedZoneId,
        "name": args.name,
        "setIdentifier": args.setIdentifier,
        "type": args.type,
    }, opts);
}

export interface GetRecordSetArgs {
    /**
     * The ID of the hosted zone that you want to create records in.
     */
    hostedZoneId: string;
    /**
     * The name of the record that you want to create, update, or delete.
     */
    name: string;
    /**
     * An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     */
    setIdentifier: string;
    /**
     * The DNS record type.
     */
    type: string;
}

export interface GetRecordSetResult {
    /**
     * Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
     */
    readonly aliasTarget?: outputs.route53.RecordSetAliasTarget;
    /**
     * The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
     */
    readonly cidrRoutingConfig?: outputs.route53.RecordSetCidrRoutingConfig;
    /**
     * To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
     */
    readonly failover?: enums.route53.RecordSetFailover;
    /**
     * A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     */
    readonly geoLocation?: outputs.route53.RecordSetGeoLocation;
    /**
     * If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
     */
    readonly healthCheckId?: string;
    /**
     * To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
     */
    readonly multiValueAnswer?: boolean;
    /**
     * The name of the record that you want to create, update, or delete.
     */
    readonly name?: string;
    /**
     * The Amazon EC2 Region where you created the resource that this resource record set refers to.
     */
    readonly region?: string;
    /**
     * One or more values that correspond with the value that you specified for the Type property.
     */
    readonly resourceRecords?: string[];
    /**
     * An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     */
    readonly setIdentifier?: string;
    /**
     * The resource record cache time to live (TTL), in seconds.
     */
    readonly ttl?: string;
    /**
     * The DNS record type.
     */
    readonly type?: string;
    /**
     * Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
     */
    readonly weight?: number;
}
/**
 * Resource Type definition for AWS::Route53::RecordSet.
 */
export function getRecordSetOutput(args: GetRecordSetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecordSetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:route53:getRecordSet", {
        "hostedZoneId": args.hostedZoneId,
        "name": args.name,
        "setIdentifier": args.setIdentifier,
        "type": args.type,
    }, opts);
}

export interface GetRecordSetOutputArgs {
    /**
     * The ID of the hosted zone that you want to create records in.
     */
    hostedZoneId: pulumi.Input<string>;
    /**
     * The name of the record that you want to create, update, or delete.
     */
    name: pulumi.Input<string>;
    /**
     * An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     */
    setIdentifier: pulumi.Input<string>;
    /**
     * The DNS record type.
     */
    type: pulumi.Input<string>;
}
