// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::Route53::CidrCollection.
 */
export class CidrCollection extends pulumi.CustomResource {
    /**
     * Get an existing CidrCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CidrCollection {
        return new CidrCollection(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:route53:CidrCollection';

    /**
     * Returns true if the given object is an instance of CidrCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CidrCollection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CidrCollection.__pulumiType;
    }

    /**
     * The Amazon resource name (ARN) to uniquely identify the AWS resource.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * UUID of the CIDR collection.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * A complex type that contains information about the list of CIDR locations.
     */
    public readonly locations!: pulumi.Output<outputs.route53.CidrCollectionLocation[] | undefined>;
    /**
     * A unique name for the CIDR collection.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CidrCollection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CidrCollectionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CidrCollection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CidrCollection resource.
 */
export interface CidrCollectionArgs {
    /**
     * A complex type that contains information about the list of CIDR locations.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.route53.CidrCollectionLocationArgs>[]>;
    /**
     * A unique name for the CIDR collection.
     */
    name?: pulumi.Input<string>;
}
