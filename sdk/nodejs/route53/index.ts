// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CidrCollectionArgs } from "./cidrCollection";
export type CidrCollection = import("./cidrCollection").CidrCollection;
export const CidrCollection: typeof import("./cidrCollection").CidrCollection = null as any;

export { DNSSECArgs } from "./dnssec";
export type DNSSEC = import("./dnssec").DNSSEC;
export const DNSSEC: typeof import("./dnssec").DNSSEC = null as any;

export { GetCidrCollectionArgs, GetCidrCollectionResult, GetCidrCollectionOutputArgs } from "./getCidrCollection";
export const getCidrCollection: typeof import("./getCidrCollection").getCidrCollection = null as any;
export const getCidrCollectionOutput: typeof import("./getCidrCollection").getCidrCollectionOutput = null as any;

export { GetHealthCheckArgs, GetHealthCheckResult, GetHealthCheckOutputArgs } from "./getHealthCheck";
export const getHealthCheck: typeof import("./getHealthCheck").getHealthCheck = null as any;
export const getHealthCheckOutput: typeof import("./getHealthCheck").getHealthCheckOutput = null as any;

export { GetHostedZoneArgs, GetHostedZoneResult, GetHostedZoneOutputArgs } from "./getHostedZone";
export const getHostedZone: typeof import("./getHostedZone").getHostedZone = null as any;
export const getHostedZoneOutput: typeof import("./getHostedZone").getHostedZoneOutput = null as any;

export { GetKeySigningKeyArgs, GetKeySigningKeyResult, GetKeySigningKeyOutputArgs } from "./getKeySigningKey";
export const getKeySigningKey: typeof import("./getKeySigningKey").getKeySigningKey = null as any;
export const getKeySigningKeyOutput: typeof import("./getKeySigningKey").getKeySigningKeyOutput = null as any;

export { GetRecordSetArgs, GetRecordSetResult, GetRecordSetOutputArgs } from "./getRecordSet";
export const getRecordSet: typeof import("./getRecordSet").getRecordSet = null as any;
export const getRecordSetOutput: typeof import("./getRecordSet").getRecordSetOutput = null as any;

export { GetRecordSetGroupArgs, GetRecordSetGroupResult, GetRecordSetGroupOutputArgs } from "./getRecordSetGroup";
export const getRecordSetGroup: typeof import("./getRecordSetGroup").getRecordSetGroup = null as any;
export const getRecordSetGroupOutput: typeof import("./getRecordSetGroup").getRecordSetGroupOutput = null as any;

export { HealthCheckArgs } from "./healthCheck";
export type HealthCheck = import("./healthCheck").HealthCheck;
export const HealthCheck: typeof import("./healthCheck").HealthCheck = null as any;

export { HostedZoneArgs } from "./hostedZone";
export type HostedZone = import("./hostedZone").HostedZone;
export const HostedZone: typeof import("./hostedZone").HostedZone = null as any;

export { KeySigningKeyArgs } from "./keySigningKey";
export type KeySigningKey = import("./keySigningKey").KeySigningKey;
export const KeySigningKey: typeof import("./keySigningKey").KeySigningKey = null as any;

export { RecordSetArgs } from "./recordSet";
export type RecordSet = import("./recordSet").RecordSet;
export const RecordSet: typeof import("./recordSet").RecordSet = null as any;

export { RecordSetGroupArgs } from "./recordSetGroup";
export type RecordSetGroup = import("./recordSetGroup").RecordSetGroup;
export const RecordSetGroup: typeof import("./recordSetGroup").RecordSetGroup = null as any;

utilities.lazyLoad(exports, ["CidrCollection"], () => require("./cidrCollection"));
utilities.lazyLoad(exports, ["DNSSEC"], () => require("./dnssec"));
utilities.lazyLoad(exports, ["getCidrCollection","getCidrCollectionOutput"], () => require("./getCidrCollection"));
utilities.lazyLoad(exports, ["getHealthCheck","getHealthCheckOutput"], () => require("./getHealthCheck"));
utilities.lazyLoad(exports, ["getHostedZone","getHostedZoneOutput"], () => require("./getHostedZone"));
utilities.lazyLoad(exports, ["getKeySigningKey","getKeySigningKeyOutput"], () => require("./getKeySigningKey"));
utilities.lazyLoad(exports, ["getRecordSet","getRecordSetOutput"], () => require("./getRecordSet"));
utilities.lazyLoad(exports, ["getRecordSetGroup","getRecordSetGroupOutput"], () => require("./getRecordSetGroup"));
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));
utilities.lazyLoad(exports, ["HostedZone"], () => require("./hostedZone"));
utilities.lazyLoad(exports, ["KeySigningKey"], () => require("./keySigningKey"));
utilities.lazyLoad(exports, ["RecordSet"], () => require("./recordSet"));
utilities.lazyLoad(exports, ["RecordSetGroup"], () => require("./recordSetGroup"));

// Export enums:
export * from "../types/enums/route53";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:route53:CidrCollection":
                return new CidrCollection(name, <any>undefined, { urn })
            case "aws-native:route53:DNSSEC":
                return new DNSSEC(name, <any>undefined, { urn })
            case "aws-native:route53:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "aws-native:route53:HostedZone":
                return new HostedZone(name, <any>undefined, { urn })
            case "aws-native:route53:KeySigningKey":
                return new KeySigningKey(name, <any>undefined, { urn })
            case "aws-native:route53:RecordSet":
                return new RecordSet(name, <any>undefined, { urn })
            case "aws-native:route53:RecordSetGroup":
                return new RecordSetGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "route53", _module)
