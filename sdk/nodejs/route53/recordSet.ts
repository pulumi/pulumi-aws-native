// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Route53::RecordSet.
 */
export class RecordSet extends pulumi.CustomResource {
    /**
     * Get an existing RecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RecordSet {
        return new RecordSet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:route53:RecordSet';

    /**
     * Returns true if the given object is an instance of RecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordSet.__pulumiType;
    }

    /**
     * Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
     */
    public readonly aliasTarget!: pulumi.Output<outputs.route53.RecordSetAliasTarget | undefined>;
    /**
     * The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
     */
    public readonly cidrRoutingConfig!: pulumi.Output<outputs.route53.RecordSetCidrRoutingConfig | undefined>;
    /**
     * Optional: Any comments you want to include about a change batch request.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
     */
    public readonly failover!: pulumi.Output<enums.route53.RecordSetFailover | undefined>;
    /**
     * A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     */
    public readonly geoLocation!: pulumi.Output<outputs.route53.RecordSetGeoLocation | undefined>;
    /**
     * If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
     */
    public readonly healthCheckId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the hosted zone that you want to create records in.
     */
    public readonly hostedZoneId!: pulumi.Output<string | undefined>;
    /**
     * The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
     */
    public readonly hostedZoneName!: pulumi.Output<string | undefined>;
    /**
     * To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
     */
    public readonly multiValueAnswer!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the record that you want to create, update, or delete.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Amazon EC2 Region where you created the resource that this resource record set refers to.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * One or more values that correspond with the value that you specified for the Type property.
     */
    public readonly resourceRecords!: pulumi.Output<string[] | undefined>;
    /**
     * An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     */
    public readonly setIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The resource record cache time to live (TTL), in seconds.
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * The DNS record type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a RecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordSetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["aliasTarget"] = args ? args.aliasTarget : undefined;
            resourceInputs["cidrRoutingConfig"] = args ? args.cidrRoutingConfig : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["failover"] = args ? args.failover : undefined;
            resourceInputs["geoLocation"] = args ? args.geoLocation : undefined;
            resourceInputs["healthCheckId"] = args ? args.healthCheckId : undefined;
            resourceInputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            resourceInputs["hostedZoneName"] = args ? args.hostedZoneName : undefined;
            resourceInputs["multiValueAnswer"] = args ? args.multiValueAnswer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceRecords"] = args ? args.resourceRecords : undefined;
            resourceInputs["setIdentifier"] = args ? args.setIdentifier : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        } else {
            resourceInputs["aliasTarget"] = undefined /*out*/;
            resourceInputs["cidrRoutingConfig"] = undefined /*out*/;
            resourceInputs["comment"] = undefined /*out*/;
            resourceInputs["failover"] = undefined /*out*/;
            resourceInputs["geoLocation"] = undefined /*out*/;
            resourceInputs["healthCheckId"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["hostedZoneName"] = undefined /*out*/;
            resourceInputs["multiValueAnswer"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["resourceRecords"] = undefined /*out*/;
            resourceInputs["setIdentifier"] = undefined /*out*/;
            resourceInputs["ttl"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["weight"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["hostedZoneId", "hostedZoneName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RecordSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RecordSet resource.
 */
export interface RecordSetArgs {
    /**
     * Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
     */
    aliasTarget?: pulumi.Input<inputs.route53.RecordSetAliasTargetArgs>;
    /**
     * The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
     */
    cidrRoutingConfig?: pulumi.Input<inputs.route53.RecordSetCidrRoutingConfigArgs>;
    /**
     * Optional: Any comments you want to include about a change batch request.
     */
    comment?: pulumi.Input<string>;
    /**
     * To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
     */
    failover?: pulumi.Input<enums.route53.RecordSetFailover>;
    /**
     * A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
     */
    geoLocation?: pulumi.Input<inputs.route53.RecordSetGeoLocationArgs>;
    /**
     * If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
     */
    healthCheckId?: pulumi.Input<string>;
    /**
     * The ID of the hosted zone that you want to create records in.
     */
    hostedZoneId?: pulumi.Input<string>;
    /**
     * The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
     */
    hostedZoneName?: pulumi.Input<string>;
    /**
     * To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
     */
    multiValueAnswer?: pulumi.Input<boolean>;
    /**
     * The name of the record that you want to create, update, or delete.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon EC2 Region where you created the resource that this resource record set refers to.
     */
    region?: pulumi.Input<string>;
    /**
     * One or more values that correspond with the value that you specified for the Type property.
     */
    resourceRecords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
     */
    setIdentifier?: pulumi.Input<string>;
    /**
     * The resource record cache time to live (TTL), in seconds.
     */
    ttl?: pulumi.Input<string>;
    /**
     * The DNS record type.
     */
    type: pulumi.Input<string>;
    /**
     * Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
     */
    weight?: pulumi.Input<number>;
}
