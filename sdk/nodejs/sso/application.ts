// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for Identity Center (SSO) Application
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sso:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * The Application ARN that is returned upon creation of the Identity Center (SSO) Application
     */
    public /*out*/ readonly applicationArn!: pulumi.Output<string>;
    /**
     * The ARN of the application provider under which the operation will run
     */
    public readonly applicationProviderArn!: pulumi.Output<string>;
    /**
     * The description information for the Identity Center (SSO) Application
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the instance of IAM Identity Center under which the operation will run
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The name you want to assign to this Identity Center (SSO) Application
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A structure that describes the options for the portal associated with an application
     */
    public readonly portalOptions!: pulumi.Output<outputs.sso.ApplicationPortalOptionsConfiguration | undefined>;
    /**
     * Specifies whether the application is enabled or disabled
     */
    public readonly status!: pulumi.Output<enums.sso.ApplicationStatus | undefined>;
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationProviderArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationProviderArn'");
            }
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            resourceInputs["applicationProviderArn"] = args ? args.applicationProviderArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portalOptions"] = args ? args.portalOptions : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["applicationArn"] = undefined /*out*/;
        } else {
            resourceInputs["applicationArn"] = undefined /*out*/;
            resourceInputs["applicationProviderArn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["instanceArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["portalOptions"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applicationProviderArn", "instanceArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The ARN of the application provider under which the operation will run
     */
    applicationProviderArn: pulumi.Input<string>;
    /**
     * The description information for the Identity Center (SSO) Application
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the instance of IAM Identity Center under which the operation will run
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The name you want to assign to this Identity Center (SSO) Application
     */
    name?: pulumi.Input<string>;
    /**
     * A structure that describes the options for the portal associated with an application
     */
    portalOptions?: pulumi.Input<inputs.sso.ApplicationPortalOptionsConfigurationArgs>;
    /**
     * Specifies whether the application is enabled or disabled
     */
    status?: pulumi.Input<enums.sso.ApplicationStatus>;
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
