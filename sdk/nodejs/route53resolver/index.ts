// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FirewallDomainListArgs } from "./firewallDomainList";
export type FirewallDomainList = import("./firewallDomainList").FirewallDomainList;
export const FirewallDomainList: typeof import("./firewallDomainList").FirewallDomainList = null as any;
utilities.lazyLoad(exports, ["FirewallDomainList"], () => require("./firewallDomainList"));

export { FirewallRuleGroupArgs } from "./firewallRuleGroup";
export type FirewallRuleGroup = import("./firewallRuleGroup").FirewallRuleGroup;
export const FirewallRuleGroup: typeof import("./firewallRuleGroup").FirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["FirewallRuleGroup"], () => require("./firewallRuleGroup"));

export { FirewallRuleGroupAssociationArgs } from "./firewallRuleGroupAssociation";
export type FirewallRuleGroupAssociation = import("./firewallRuleGroupAssociation").FirewallRuleGroupAssociation;
export const FirewallRuleGroupAssociation: typeof import("./firewallRuleGroupAssociation").FirewallRuleGroupAssociation = null as any;
utilities.lazyLoad(exports, ["FirewallRuleGroupAssociation"], () => require("./firewallRuleGroupAssociation"));

export { GetFirewallDomainListArgs, GetFirewallDomainListResult, GetFirewallDomainListOutputArgs } from "./getFirewallDomainList";
export const getFirewallDomainList: typeof import("./getFirewallDomainList").getFirewallDomainList = null as any;
export const getFirewallDomainListOutput: typeof import("./getFirewallDomainList").getFirewallDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallDomainList","getFirewallDomainListOutput"], () => require("./getFirewallDomainList"));

export { GetFirewallRuleGroupArgs, GetFirewallRuleGroupResult, GetFirewallRuleGroupOutputArgs } from "./getFirewallRuleGroup";
export const getFirewallRuleGroup: typeof import("./getFirewallRuleGroup").getFirewallRuleGroup = null as any;
export const getFirewallRuleGroupOutput: typeof import("./getFirewallRuleGroup").getFirewallRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRuleGroup","getFirewallRuleGroupOutput"], () => require("./getFirewallRuleGroup"));

export { GetFirewallRuleGroupAssociationArgs, GetFirewallRuleGroupAssociationResult, GetFirewallRuleGroupAssociationOutputArgs } from "./getFirewallRuleGroupAssociation";
export const getFirewallRuleGroupAssociation: typeof import("./getFirewallRuleGroupAssociation").getFirewallRuleGroupAssociation = null as any;
export const getFirewallRuleGroupAssociationOutput: typeof import("./getFirewallRuleGroupAssociation").getFirewallRuleGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRuleGroupAssociation","getFirewallRuleGroupAssociationOutput"], () => require("./getFirewallRuleGroupAssociation"));

export { GetResolverConfigArgs, GetResolverConfigResult, GetResolverConfigOutputArgs } from "./getResolverConfig";
export const getResolverConfig: typeof import("./getResolverConfig").getResolverConfig = null as any;
export const getResolverConfigOutput: typeof import("./getResolverConfig").getResolverConfigOutput = null as any;
utilities.lazyLoad(exports, ["getResolverConfig","getResolverConfigOutput"], () => require("./getResolverConfig"));

export { GetResolverDNSSECConfigArgs, GetResolverDNSSECConfigResult, GetResolverDNSSECConfigOutputArgs } from "./getResolverDNSSECConfig";
export const getResolverDNSSECConfig: typeof import("./getResolverDNSSECConfig").getResolverDNSSECConfig = null as any;
export const getResolverDNSSECConfigOutput: typeof import("./getResolverDNSSECConfig").getResolverDNSSECConfigOutput = null as any;
utilities.lazyLoad(exports, ["getResolverDNSSECConfig","getResolverDNSSECConfigOutput"], () => require("./getResolverDNSSECConfig"));

export { GetResolverEndpointArgs, GetResolverEndpointResult, GetResolverEndpointOutputArgs } from "./getResolverEndpoint";
export const getResolverEndpoint: typeof import("./getResolverEndpoint").getResolverEndpoint = null as any;
export const getResolverEndpointOutput: typeof import("./getResolverEndpoint").getResolverEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getResolverEndpoint","getResolverEndpointOutput"], () => require("./getResolverEndpoint"));

export { GetResolverQueryLoggingConfigArgs, GetResolverQueryLoggingConfigResult, GetResolverQueryLoggingConfigOutputArgs } from "./getResolverQueryLoggingConfig";
export const getResolverQueryLoggingConfig: typeof import("./getResolverQueryLoggingConfig").getResolverQueryLoggingConfig = null as any;
export const getResolverQueryLoggingConfigOutput: typeof import("./getResolverQueryLoggingConfig").getResolverQueryLoggingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getResolverQueryLoggingConfig","getResolverQueryLoggingConfigOutput"], () => require("./getResolverQueryLoggingConfig"));

export { GetResolverQueryLoggingConfigAssociationArgs, GetResolverQueryLoggingConfigAssociationResult, GetResolverQueryLoggingConfigAssociationOutputArgs } from "./getResolverQueryLoggingConfigAssociation";
export const getResolverQueryLoggingConfigAssociation: typeof import("./getResolverQueryLoggingConfigAssociation").getResolverQueryLoggingConfigAssociation = null as any;
export const getResolverQueryLoggingConfigAssociationOutput: typeof import("./getResolverQueryLoggingConfigAssociation").getResolverQueryLoggingConfigAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getResolverQueryLoggingConfigAssociation","getResolverQueryLoggingConfigAssociationOutput"], () => require("./getResolverQueryLoggingConfigAssociation"));

export { GetResolverRuleArgs, GetResolverRuleResult, GetResolverRuleOutputArgs } from "./getResolverRule";
export const getResolverRule: typeof import("./getResolverRule").getResolverRule = null as any;
export const getResolverRuleOutput: typeof import("./getResolverRule").getResolverRuleOutput = null as any;
utilities.lazyLoad(exports, ["getResolverRule","getResolverRuleOutput"], () => require("./getResolverRule"));

export { GetResolverRuleAssociationArgs, GetResolverRuleAssociationResult, GetResolverRuleAssociationOutputArgs } from "./getResolverRuleAssociation";
export const getResolverRuleAssociation: typeof import("./getResolverRuleAssociation").getResolverRuleAssociation = null as any;
export const getResolverRuleAssociationOutput: typeof import("./getResolverRuleAssociation").getResolverRuleAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getResolverRuleAssociation","getResolverRuleAssociationOutput"], () => require("./getResolverRuleAssociation"));

export { ResolverConfigArgs } from "./resolverConfig";
export type ResolverConfig = import("./resolverConfig").ResolverConfig;
export const ResolverConfig: typeof import("./resolverConfig").ResolverConfig = null as any;
utilities.lazyLoad(exports, ["ResolverConfig"], () => require("./resolverConfig"));

export { ResolverDNSSECConfigArgs } from "./resolverDNSSECConfig";
export type ResolverDNSSECConfig = import("./resolverDNSSECConfig").ResolverDNSSECConfig;
export const ResolverDNSSECConfig: typeof import("./resolverDNSSECConfig").ResolverDNSSECConfig = null as any;
utilities.lazyLoad(exports, ["ResolverDNSSECConfig"], () => require("./resolverDNSSECConfig"));

export { ResolverEndpointArgs } from "./resolverEndpoint";
export type ResolverEndpoint = import("./resolverEndpoint").ResolverEndpoint;
export const ResolverEndpoint: typeof import("./resolverEndpoint").ResolverEndpoint = null as any;
utilities.lazyLoad(exports, ["ResolverEndpoint"], () => require("./resolverEndpoint"));

export { ResolverQueryLoggingConfigArgs } from "./resolverQueryLoggingConfig";
export type ResolverQueryLoggingConfig = import("./resolverQueryLoggingConfig").ResolverQueryLoggingConfig;
export const ResolverQueryLoggingConfig: typeof import("./resolverQueryLoggingConfig").ResolverQueryLoggingConfig = null as any;
utilities.lazyLoad(exports, ["ResolverQueryLoggingConfig"], () => require("./resolverQueryLoggingConfig"));

export { ResolverQueryLoggingConfigAssociationArgs } from "./resolverQueryLoggingConfigAssociation";
export type ResolverQueryLoggingConfigAssociation = import("./resolverQueryLoggingConfigAssociation").ResolverQueryLoggingConfigAssociation;
export const ResolverQueryLoggingConfigAssociation: typeof import("./resolverQueryLoggingConfigAssociation").ResolverQueryLoggingConfigAssociation = null as any;
utilities.lazyLoad(exports, ["ResolverQueryLoggingConfigAssociation"], () => require("./resolverQueryLoggingConfigAssociation"));

export { ResolverRuleArgs } from "./resolverRule";
export type ResolverRule = import("./resolverRule").ResolverRule;
export const ResolverRule: typeof import("./resolverRule").ResolverRule = null as any;
utilities.lazyLoad(exports, ["ResolverRule"], () => require("./resolverRule"));

export { ResolverRuleAssociationArgs } from "./resolverRuleAssociation";
export type ResolverRuleAssociation = import("./resolverRuleAssociation").ResolverRuleAssociation;
export const ResolverRuleAssociation: typeof import("./resolverRuleAssociation").ResolverRuleAssociation = null as any;
utilities.lazyLoad(exports, ["ResolverRuleAssociation"], () => require("./resolverRuleAssociation"));


// Export enums:
export * from "../types/enums/route53resolver";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:route53resolver:FirewallDomainList":
                return new FirewallDomainList(name, <any>undefined, { urn })
            case "aws-native:route53resolver:FirewallRuleGroup":
                return new FirewallRuleGroup(name, <any>undefined, { urn })
            case "aws-native:route53resolver:FirewallRuleGroupAssociation":
                return new FirewallRuleGroupAssociation(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverConfig":
                return new ResolverConfig(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverDNSSECConfig":
                return new ResolverDNSSECConfig(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverEndpoint":
                return new ResolverEndpoint(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverQueryLoggingConfig":
                return new ResolverQueryLoggingConfig(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverQueryLoggingConfigAssociation":
                return new ResolverQueryLoggingConfigAssociation(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverRule":
                return new ResolverRule(name, <any>undefined, { urn })
            case "aws-native:route53resolver:ResolverRuleAssociation":
                return new ResolverRuleAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "route53resolver", _module)
