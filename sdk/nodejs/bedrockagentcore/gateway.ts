// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::BedrockAgentCore::Gateway Resource Type
 */
export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:bedrockagentcore:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    declare public readonly authorizerConfiguration: pulumi.Output<outputs.bedrockagentcore.GatewayAuthorizerConfigurationProperties | undefined>;
    declare public readonly authorizerType: pulumi.Output<enums.bedrockagentcore.GatewayAuthorizerType>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly exceptionLevel: pulumi.Output<enums.bedrockagentcore.GatewayExceptionLevel | undefined>;
    declare public /*out*/ readonly gatewayArn: pulumi.Output<string>;
    declare public /*out*/ readonly gatewayIdentifier: pulumi.Output<string>;
    declare public /*out*/ readonly gatewayUrl: pulumi.Output<string>;
    declare public readonly kmsKeyArn: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly protocolConfiguration: pulumi.Output<outputs.bedrockagentcore.GatewayProtocolConfigurationProperties | undefined>;
    declare public readonly protocolType: pulumi.Output<enums.bedrockagentcore.GatewayProtocolType>;
    declare public readonly roleArn: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<enums.bedrockagentcore.GatewayStatus>;
    declare public /*out*/ readonly statusReasons: pulumi.Output<string[]>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public /*out*/ readonly workloadIdentityDetails: pulumi.Output<outputs.bedrockagentcore.GatewayWorkloadIdentityDetails>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.authorizerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizerType'");
            }
            if (args?.protocolType === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["authorizerConfiguration"] = args?.authorizerConfiguration;
            resourceInputs["authorizerType"] = args?.authorizerType;
            resourceInputs["description"] = args?.description;
            resourceInputs["exceptionLevel"] = args?.exceptionLevel;
            resourceInputs["kmsKeyArn"] = args?.kmsKeyArn;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocolConfiguration"] = args?.protocolConfiguration;
            resourceInputs["protocolType"] = args?.protocolType;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["gatewayArn"] = undefined /*out*/;
            resourceInputs["gatewayIdentifier"] = undefined /*out*/;
            resourceInputs["gatewayUrl"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReasons"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["workloadIdentityDetails"] = undefined /*out*/;
        } else {
            resourceInputs["authorizerConfiguration"] = undefined /*out*/;
            resourceInputs["authorizerType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["exceptionLevel"] = undefined /*out*/;
            resourceInputs["gatewayArn"] = undefined /*out*/;
            resourceInputs["gatewayIdentifier"] = undefined /*out*/;
            resourceInputs["gatewayUrl"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["protocolConfiguration"] = undefined /*out*/;
            resourceInputs["protocolType"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReasons"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["workloadIdentityDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    authorizerConfiguration?: pulumi.Input<inputs.bedrockagentcore.GatewayAuthorizerConfigurationPropertiesArgs>;
    authorizerType: pulumi.Input<enums.bedrockagentcore.GatewayAuthorizerType>;
    description?: pulumi.Input<string>;
    exceptionLevel?: pulumi.Input<enums.bedrockagentcore.GatewayExceptionLevel>;
    kmsKeyArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocolConfiguration?: pulumi.Input<inputs.bedrockagentcore.GatewayProtocolConfigurationPropertiesArgs>;
    protocolType: pulumi.Input<enums.bedrockagentcore.GatewayProtocolType>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
