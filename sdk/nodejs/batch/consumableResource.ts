// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Batch::ConsumableResource
 */
export class ConsumableResource extends pulumi.CustomResource {
    /**
     * Get an existing ConsumableResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConsumableResource {
        return new ConsumableResource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:batch:ConsumableResource';

    /**
     * Returns true if the given object is an instance of ConsumableResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumableResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumableResource.__pulumiType;
    }

    /**
     * Available Quantity of ConsumableResource.
     */
    declare public /*out*/ readonly availableQuantity: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) of the consumable resource.
     */
    declare public /*out*/ readonly consumableResourceArn: pulumi.Output<string>;
    /**
     * Name of ConsumableResource.
     */
    declare public readonly consumableResourceName: pulumi.Output<string | undefined>;
    /**
     * The Unix timestamp (in milliseconds) for when the consumable resource was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<number>;
    /**
     * In-use Quantity of ConsumableResource.
     */
    declare public /*out*/ readonly inUseQuantity: pulumi.Output<number>;
    /**
     * Indicates whether the resource is available to be re-used after a job completes. Can be one of:
     *
     * - `REPLENISHABLE`
     * - `NON_REPLENISHABLE`
     */
    declare public readonly resourceType: pulumi.Output<enums.batch.ConsumableResourceResourceType>;
    /**
     * A key-value pair to associate with a resource.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Total Quantity of ConsumableResource.
     */
    declare public readonly totalQuantity: pulumi.Output<number>;

    /**
     * Create a ConsumableResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumableResourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if (args?.totalQuantity === undefined && !opts.urn) {
                throw new Error("Missing required property 'totalQuantity'");
            }
            resourceInputs["consumableResourceName"] = args?.consumableResourceName;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["totalQuantity"] = args?.totalQuantity;
            resourceInputs["availableQuantity"] = undefined /*out*/;
            resourceInputs["consumableResourceArn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["inUseQuantity"] = undefined /*out*/;
        } else {
            resourceInputs["availableQuantity"] = undefined /*out*/;
            resourceInputs["consumableResourceArn"] = undefined /*out*/;
            resourceInputs["consumableResourceName"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["inUseQuantity"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["totalQuantity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["consumableResourceName", "resourceType", "tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConsumableResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConsumableResource resource.
 */
export interface ConsumableResourceArgs {
    /**
     * Name of ConsumableResource.
     */
    consumableResourceName?: pulumi.Input<string>;
    /**
     * Indicates whether the resource is available to be re-used after a job completes. Can be one of:
     *
     * - `REPLENISHABLE`
     * - `NON_REPLENISHABLE`
     */
    resourceType: pulumi.Input<enums.batch.ConsumableResourceResourceType>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Total Quantity of ConsumableResource.
     */
    totalQuantity: pulumi.Input<number>;
}
