// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Batch::ServiceEnvironment
 */
export class ServiceEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing ServiceEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceEnvironment {
        return new ServiceEnvironment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:batch:ServiceEnvironment';

    /**
     * Returns true if the given object is an instance of ServiceEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceEnvironment.__pulumiType;
    }

    /**
     * The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
     */
    public readonly capacityLimits!: pulumi.Output<outputs.batch.ServiceEnvironmentCapacityLimit[]>;
    /**
     * The Amazon Resource Name (ARN) of the service environment.
     */
    public /*out*/ readonly serviceEnvironmentArn!: pulumi.Output<string>;
    /**
     * The name of the service environment.
     */
    public readonly serviceEnvironmentName!: pulumi.Output<string | undefined>;
    /**
     * The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
     */
    public readonly serviceEnvironmentType!: pulumi.Output<string>;
    /**
     * The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ServiceEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceEnvironmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.capacityLimits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityLimits'");
            }
            if ((!args || args.serviceEnvironmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceEnvironmentType'");
            }
            resourceInputs["capacityLimits"] = args ? args.capacityLimits : undefined;
            resourceInputs["serviceEnvironmentName"] = args ? args.serviceEnvironmentName : undefined;
            resourceInputs["serviceEnvironmentType"] = args ? args.serviceEnvironmentType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["serviceEnvironmentArn"] = undefined /*out*/;
        } else {
            resourceInputs["capacityLimits"] = undefined /*out*/;
            resourceInputs["serviceEnvironmentArn"] = undefined /*out*/;
            resourceInputs["serviceEnvironmentName"] = undefined /*out*/;
            resourceInputs["serviceEnvironmentType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["serviceEnvironmentName", "serviceEnvironmentType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ServiceEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceEnvironment resource.
 */
export interface ServiceEnvironmentArgs {
    /**
     * The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
     */
    capacityLimits: pulumi.Input<pulumi.Input<inputs.batch.ServiceEnvironmentCapacityLimitArgs>[]>;
    /**
     * The name of the service environment.
     */
    serviceEnvironmentName?: pulumi.Input<string>;
    /**
     * The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
     */
    serviceEnvironmentType: pulumi.Input<string>;
    /**
     * The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
     */
    state?: pulumi.Input<string>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
