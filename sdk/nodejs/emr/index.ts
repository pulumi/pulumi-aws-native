// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetInstanceFleetConfigArgs, GetInstanceFleetConfigResult, GetInstanceFleetConfigOutputArgs } from "./getInstanceFleetConfig";
export const getInstanceFleetConfig: typeof import("./getInstanceFleetConfig").getInstanceFleetConfig = null as any;
export const getInstanceFleetConfigOutput: typeof import("./getInstanceFleetConfig").getInstanceFleetConfigOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceFleetConfig","getInstanceFleetConfigOutput"], () => require("./getInstanceFleetConfig"));

export { GetInstanceGroupConfigArgs, GetInstanceGroupConfigResult, GetInstanceGroupConfigOutputArgs } from "./getInstanceGroupConfig";
export const getInstanceGroupConfig: typeof import("./getInstanceGroupConfig").getInstanceGroupConfig = null as any;
export const getInstanceGroupConfigOutput: typeof import("./getInstanceGroupConfig").getInstanceGroupConfigOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceGroupConfig","getInstanceGroupConfigOutput"], () => require("./getInstanceGroupConfig"));

export { GetStepArgs, GetStepResult, GetStepOutputArgs } from "./getStep";
export const getStep: typeof import("./getStep").getStep = null as any;
export const getStepOutput: typeof import("./getStep").getStepOutput = null as any;
utilities.lazyLoad(exports, ["getStep","getStepOutput"], () => require("./getStep"));

export { GetStudioArgs, GetStudioResult, GetStudioOutputArgs } from "./getStudio";
export const getStudio: typeof import("./getStudio").getStudio = null as any;
export const getStudioOutput: typeof import("./getStudio").getStudioOutput = null as any;
utilities.lazyLoad(exports, ["getStudio","getStudioOutput"], () => require("./getStudio"));

export { GetStudioSessionMappingArgs, GetStudioSessionMappingResult, GetStudioSessionMappingOutputArgs } from "./getStudioSessionMapping";
export const getStudioSessionMapping: typeof import("./getStudioSessionMapping").getStudioSessionMapping = null as any;
export const getStudioSessionMappingOutput: typeof import("./getStudioSessionMapping").getStudioSessionMappingOutput = null as any;
utilities.lazyLoad(exports, ["getStudioSessionMapping","getStudioSessionMappingOutput"], () => require("./getStudioSessionMapping"));

export { GetWalWorkspaceArgs, GetWalWorkspaceResult, GetWalWorkspaceOutputArgs } from "./getWalWorkspace";
export const getWalWorkspace: typeof import("./getWalWorkspace").getWalWorkspace = null as any;
export const getWalWorkspaceOutput: typeof import("./getWalWorkspace").getWalWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWalWorkspace","getWalWorkspaceOutput"], () => require("./getWalWorkspace"));

export { InstanceFleetConfigArgs } from "./instanceFleetConfig";
export type InstanceFleetConfig = import("./instanceFleetConfig").InstanceFleetConfig;
export const InstanceFleetConfig: typeof import("./instanceFleetConfig").InstanceFleetConfig = null as any;
utilities.lazyLoad(exports, ["InstanceFleetConfig"], () => require("./instanceFleetConfig"));

export { InstanceGroupConfigArgs } from "./instanceGroupConfig";
export type InstanceGroupConfig = import("./instanceGroupConfig").InstanceGroupConfig;
export const InstanceGroupConfig: typeof import("./instanceGroupConfig").InstanceGroupConfig = null as any;
utilities.lazyLoad(exports, ["InstanceGroupConfig"], () => require("./instanceGroupConfig"));

export { SecurityConfigurationArgs } from "./securityConfiguration";
export type SecurityConfiguration = import("./securityConfiguration").SecurityConfiguration;
export const SecurityConfiguration: typeof import("./securityConfiguration").SecurityConfiguration = null as any;
utilities.lazyLoad(exports, ["SecurityConfiguration"], () => require("./securityConfiguration"));

export { StepArgs } from "./step";
export type Step = import("./step").Step;
export const Step: typeof import("./step").Step = null as any;
utilities.lazyLoad(exports, ["Step"], () => require("./step"));

export { StudioArgs } from "./studio";
export type Studio = import("./studio").Studio;
export const Studio: typeof import("./studio").Studio = null as any;
utilities.lazyLoad(exports, ["Studio"], () => require("./studio"));

export { StudioSessionMappingArgs } from "./studioSessionMapping";
export type StudioSessionMapping = import("./studioSessionMapping").StudioSessionMapping;
export const StudioSessionMapping: typeof import("./studioSessionMapping").StudioSessionMapping = null as any;
utilities.lazyLoad(exports, ["StudioSessionMapping"], () => require("./studioSessionMapping"));

export { WalWorkspaceArgs } from "./walWorkspace";
export type WalWorkspace = import("./walWorkspace").WalWorkspace;
export const WalWorkspace: typeof import("./walWorkspace").WalWorkspace = null as any;
utilities.lazyLoad(exports, ["WalWorkspace"], () => require("./walWorkspace"));


// Export enums:
export * from "../types/enums/emr";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:emr:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws-native:emr:InstanceFleetConfig":
                return new InstanceFleetConfig(name, <any>undefined, { urn })
            case "aws-native:emr:InstanceGroupConfig":
                return new InstanceGroupConfig(name, <any>undefined, { urn })
            case "aws-native:emr:SecurityConfiguration":
                return new SecurityConfiguration(name, <any>undefined, { urn })
            case "aws-native:emr:Step":
                return new Step(name, <any>undefined, { urn })
            case "aws-native:emr:Studio":
                return new Studio(name, <any>undefined, { urn })
            case "aws-native:emr:StudioSessionMapping":
                return new StudioSessionMapping(name, <any>undefined, { urn })
            case "aws-native:emr:WalWorkspace":
                return new WalWorkspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "emr", _module)
