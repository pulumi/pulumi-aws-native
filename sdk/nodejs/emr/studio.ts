// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::EMR::Studio
 */
export class Studio extends pulumi.CustomResource {
    /**
     * Get an existing Studio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Studio {
        return new Studio(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:emr:Studio';

    /**
     * Returns true if the given object is an instance of Studio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Studio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Studio.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the EMR Studio.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
     */
    public readonly authMode!: pulumi.Output<string>;
    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an alternative Amazon S3 location when creating a Workspace.
     */
    public readonly defaultS3Location!: pulumi.Output<string>;
    /**
     * A detailed description of the Studio.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
     */
    public readonly engineSecurityGroupId!: pulumi.Output<string>;
    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
     */
    public readonly idpAuthUrl!: pulumi.Output<string | undefined>;
    /**
     * The name of relay state parameter for external Identity Provider.
     */
    public readonly idpRelayStateParameterName!: pulumi.Output<string | undefined>;
    /**
     * A descriptive name for the Amazon EMR Studio.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.
     */
    public readonly serviceRole!: pulumi.Output<string>;
    /**
     * The ID of the EMR Studio.
     */
    public /*out*/ readonly studioId!: pulumi.Output<string>;
    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     */
    public readonly tags!: pulumi.Output<outputs.emr.StudioTag[] | undefined>;
    /**
     * The unique Studio access URL.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies.
     */
    public readonly userRole!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     */
    public readonly workspaceSecurityGroupId!: pulumi.Output<string>;

    /**
     * Create a Studio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultS3Location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultS3Location'");
            }
            if ((!args || args.engineSecurityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineSecurityGroupId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.workspaceSecurityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceSecurityGroupId'");
            }
            inputs["authMode"] = args ? args.authMode : undefined;
            inputs["defaultS3Location"] = args ? args.defaultS3Location : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["engineSecurityGroupId"] = args ? args.engineSecurityGroupId : undefined;
            inputs["idpAuthUrl"] = args ? args.idpAuthUrl : undefined;
            inputs["idpRelayStateParameterName"] = args ? args.idpRelayStateParameterName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["serviceRole"] = args ? args.serviceRole : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userRole"] = args ? args.userRole : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["workspaceSecurityGroupId"] = args ? args.workspaceSecurityGroupId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["studioId"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["authMode"] = undefined /*out*/;
            inputs["defaultS3Location"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["engineSecurityGroupId"] = undefined /*out*/;
            inputs["idpAuthUrl"] = undefined /*out*/;
            inputs["idpRelayStateParameterName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["serviceRole"] = undefined /*out*/;
            inputs["studioId"] = undefined /*out*/;
            inputs["subnetIds"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
            inputs["userRole"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
            inputs["workspaceSecurityGroupId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Studio.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Studio resource.
 */
export interface StudioArgs {
    /**
     * Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
     */
    authMode: pulumi.Input<string>;
    /**
     * The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an alternative Amazon S3 location when creating a Workspace.
     */
    defaultS3Location: pulumi.Input<string>;
    /**
     * A detailed description of the Studio.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
     */
    engineSecurityGroupId: pulumi.Input<string>;
    /**
     * Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
     */
    idpAuthUrl?: pulumi.Input<string>;
    /**
     * The name of relay state parameter for external Identity Provider.
     */
    idpRelayStateParameterName?: pulumi.Input<string>;
    /**
     * A descriptive name for the Amazon EMR Studio.
     */
    name: pulumi.Input<string>;
    /**
     * The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.
     */
    serviceRole: pulumi.Input<string>;
    /**
     * A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.emr.StudioTagArgs>[]>;
    /**
     * The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies.
     */
    userRole?: pulumi.Input<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     */
    vpcId: pulumi.Input<string>;
    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
     */
    workspaceSecurityGroupId: pulumi.Input<string>;
}
