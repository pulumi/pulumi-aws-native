// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Glue::Job
 *
 * @deprecated Job is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Job {
        pulumi.log.warn("Job is deprecated: Job is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Job(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:glue:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    public readonly allocatedCapacity!: pulumi.Output<number | undefined>;
    public readonly command!: pulumi.Output<outputs.glue.JobCommand>;
    public readonly connections!: pulumi.Output<outputs.glue.JobConnectionsList | undefined>;
    public readonly defaultArguments!: pulumi.Output<any | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly executionProperty!: pulumi.Output<outputs.glue.JobExecutionProperty | undefined>;
    public readonly glueVersion!: pulumi.Output<string | undefined>;
    public readonly logUri!: pulumi.Output<string | undefined>;
    public readonly maxCapacity!: pulumi.Output<number | undefined>;
    public readonly maxRetries!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly notificationProperty!: pulumi.Output<outputs.glue.JobNotificationProperty | undefined>;
    public readonly numberOfWorkers!: pulumi.Output<number | undefined>;
    public readonly role!: pulumi.Output<string>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<any | undefined>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly workerType!: pulumi.Output<string | undefined>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Job is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Job is deprecated: Job is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.command === undefined) && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            inputs["allocatedCapacity"] = args ? args.allocatedCapacity : undefined;
            inputs["command"] = args ? args.command : undefined;
            inputs["connections"] = args ? args.connections : undefined;
            inputs["defaultArguments"] = args ? args.defaultArguments : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["executionProperty"] = args ? args.executionProperty : undefined;
            inputs["glueVersion"] = args ? args.glueVersion : undefined;
            inputs["logUri"] = args ? args.logUri : undefined;
            inputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            inputs["maxRetries"] = args ? args.maxRetries : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationProperty"] = args ? args.notificationProperty : undefined;
            inputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["workerType"] = args ? args.workerType : undefined;
        } else {
            inputs["allocatedCapacity"] = undefined /*out*/;
            inputs["command"] = undefined /*out*/;
            inputs["connections"] = undefined /*out*/;
            inputs["defaultArguments"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["executionProperty"] = undefined /*out*/;
            inputs["glueVersion"] = undefined /*out*/;
            inputs["logUri"] = undefined /*out*/;
            inputs["maxCapacity"] = undefined /*out*/;
            inputs["maxRetries"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["notificationProperty"] = undefined /*out*/;
            inputs["numberOfWorkers"] = undefined /*out*/;
            inputs["role"] = undefined /*out*/;
            inputs["securityConfiguration"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["timeout"] = undefined /*out*/;
            inputs["workerType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Job.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    allocatedCapacity?: pulumi.Input<number>;
    command: pulumi.Input<inputs.glue.JobCommandArgs>;
    connections?: pulumi.Input<inputs.glue.JobConnectionsListArgs>;
    defaultArguments?: any;
    description?: pulumi.Input<string>;
    executionProperty?: pulumi.Input<inputs.glue.JobExecutionPropertyArgs>;
    glueVersion?: pulumi.Input<string>;
    logUri?: pulumi.Input<string>;
    maxCapacity?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    notificationProperty?: pulumi.Input<inputs.glue.JobNotificationPropertyArgs>;
    numberOfWorkers?: pulumi.Input<number>;
    role: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    tags?: any;
    timeout?: pulumi.Input<number>;
    workerType?: pulumi.Input<string>;
}
