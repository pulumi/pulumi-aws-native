// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * This resource represents a schema of Glue Schema Registry.
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:glue:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * Amazon Resource Name for the Schema.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Specify the `VersionNumber` or the `IsLatest` for setting the checkpoint for the schema. This is only required for updating a checkpoint.
     */
    public readonly checkpointVersion!: pulumi.Output<outputs.glue.SchemaVersion | undefined>;
    /**
     * Compatibility setting for the schema.
     */
    public readonly compatibility!: pulumi.Output<enums.glue.SchemaCompatibility>;
    /**
     * Data format name to use for the schema. Accepted values: 'AVRO', 'JSON', 'PROTOBUF'
     */
    public readonly dataFormat!: pulumi.Output<enums.glue.SchemaDataFormat>;
    /**
     * A description of the schema. If description is not provided, there will not be any default value for this.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Represents the version ID associated with the initial schema version.
     */
    public /*out*/ readonly initialSchemaVersionId!: pulumi.Output<string>;
    /**
     * Name of the schema.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The registry where a schema is stored.
     */
    public readonly registry!: pulumi.Output<outputs.glue.SchemaRegistry | undefined>;
    /**
     * Definition for the initial schema version in plain-text.
     */
    public readonly schemaDefinition!: pulumi.Output<string | undefined>;
    /**
     * List of tags to tag the schema
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.compatibility === undefined && !opts.urn) {
                throw new Error("Missing required property 'compatibility'");
            }
            if (args?.dataFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataFormat'");
            }
            resourceInputs["checkpointVersion"] = args?.checkpointVersion;
            resourceInputs["compatibility"] = args?.compatibility;
            resourceInputs["dataFormat"] = args?.dataFormat;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["registry"] = args?.registry;
            resourceInputs["schemaDefinition"] = args?.schemaDefinition;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["initialSchemaVersionId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["checkpointVersion"] = undefined /*out*/;
            resourceInputs["compatibility"] = undefined /*out*/;
            resourceInputs["dataFormat"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["initialSchemaVersionId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["registry"] = undefined /*out*/;
            resourceInputs["schemaDefinition"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["dataFormat", "name", "registry", "schemaDefinition"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * Specify the `VersionNumber` or the `IsLatest` for setting the checkpoint for the schema. This is only required for updating a checkpoint.
     */
    checkpointVersion?: pulumi.Input<inputs.glue.SchemaVersionArgs>;
    /**
     * Compatibility setting for the schema.
     */
    compatibility: pulumi.Input<enums.glue.SchemaCompatibility>;
    /**
     * Data format name to use for the schema. Accepted values: 'AVRO', 'JSON', 'PROTOBUF'
     */
    dataFormat: pulumi.Input<enums.glue.SchemaDataFormat>;
    /**
     * A description of the schema. If description is not provided, there will not be any default value for this.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the schema.
     */
    name?: pulumi.Input<string>;
    /**
     * The registry where a schema is stored.
     */
    registry?: pulumi.Input<inputs.glue.SchemaRegistryArgs>;
    /**
     * Definition for the initial schema version in plain-text.
     */
    schemaDefinition?: pulumi.Input<string>;
    /**
     * List of tags to tag the schema
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
