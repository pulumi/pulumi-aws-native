// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Glue::Trigger
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const onDemandJobTrigger = new aws_native.glue.Trigger("onDemandJobTrigger", {
 *     type: "ON_DEMAND",
 *     description: "DESCRIPTION_ON_DEMAND",
 *     actions: [{
 *         jobName: "prod-job2",
 *     }],
 *     name: "prod-trigger1-ondemand",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const onDemandJobTrigger = new aws_native.glue.Trigger("onDemandJobTrigger", {
 *     type: "ON_DEMAND",
 *     description: "DESCRIPTION_ON_DEMAND",
 *     actions: [{
 *         jobName: "prod-job2",
 *     }],
 *     name: "prod-trigger1-ondemand",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const scheduledJobTrigger = new aws_native.glue.Trigger("scheduledJobTrigger", {
 *     type: "SCHEDULED",
 *     description: "DESCRIPTION_SCHEDULED",
 *     schedule: "cron(0 *&#47;2 * * ? *)",
 *     actions: [
 *         {
 *             jobName: "prod-job2",
 *         },
 *         {
 *             jobName: "prod-job3",
 *             arguments: {
 *                 "--job-bookmark-option": "job-bookmark-enable",
 *             },
 *         },
 *     ],
 *     name: "prod-trigger1-scheduled",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const scheduledJobTrigger = new aws_native.glue.Trigger("scheduledJobTrigger", {
 *     type: "SCHEDULED",
 *     description: "DESCRIPTION_SCHEDULED",
 *     schedule: "cron(0 *&#47;2 * * ? *)",
 *     actions: [
 *         {
 *             jobName: "prod-job2",
 *         },
 *         {
 *             jobName: "prod-job3",
 *             arguments: {
 *                 "--job-bookmark-option": "job-bookmark-enable",
 *             },
 *         },
 *     ],
 *     name: "prod-trigger1-scheduled",
 * });
 *
 * ```
 */
export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:glue:Trigger';

    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }

    /**
     * The actions initiated by this trigger.
     */
    public readonly actions!: pulumi.Output<outputs.glue.TriggerAction[]>;
    /**
     * A description of this trigger.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
     */
    public readonly eventBatchingCondition!: pulumi.Output<outputs.glue.TriggerEventBatchingCondition | undefined>;
    /**
     * The name of the trigger.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The predicate of this trigger, which defines when it will fire.
     */
    public readonly predicate!: pulumi.Output<outputs.glue.TriggerPredicate | undefined>;
    /**
     * A cron expression used to specify the schedule.
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
     */
    public readonly startOnCreation!: pulumi.Output<boolean | undefined>;
    /**
     * The tags to use with this trigger.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
     */
    public readonly tags!: pulumi.Output<any | undefined>;
    /**
     * The type of trigger that this is.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The name of the workflow associated with the trigger.
     */
    public readonly workflowName!: pulumi.Output<string | undefined>;

    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBatchingCondition"] = args ? args.eventBatchingCondition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["predicate"] = args ? args.predicate : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["startOnCreation"] = args ? args.startOnCreation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
        } else {
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["eventBatchingCondition"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["predicate"] = undefined /*out*/;
            resourceInputs["schedule"] = undefined /*out*/;
            resourceInputs["startOnCreation"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["workflowName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "type", "workflowName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Trigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * The actions initiated by this trigger.
     */
    actions: pulumi.Input<pulumi.Input<inputs.glue.TriggerActionArgs>[]>;
    /**
     * A description of this trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
     */
    eventBatchingCondition?: pulumi.Input<inputs.glue.TriggerEventBatchingConditionArgs>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The predicate of this trigger, which defines when it will fire.
     */
    predicate?: pulumi.Input<inputs.glue.TriggerPredicateArgs>;
    /**
     * A cron expression used to specify the schedule.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * The tags to use with this trigger.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
     */
    tags?: any;
    /**
     * The type of trigger that this is.
     */
    type: pulumi.Input<string>;
    /**
     * The name of the workflow associated with the trigger.
     */
    workflowName?: pulumi.Input<string>;
}
