// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * An entity that defines the scope of audit evidence collected by AWS Audit Manager.
 */
export class Assessment extends pulumi.CustomResource {
    /**
     * Get an existing Assessment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Assessment {
        return new Assessment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:auditmanager:Assessment';

    /**
     * Returns true if the given object is an instance of Assessment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Assessment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assessment.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly assessmentId!: pulumi.Output<string>;
    public readonly assessmentReportsDestination!: pulumi.Output<outputs.auditmanager.AssessmentReportsDestination | undefined>;
    public readonly awsAccount!: pulumi.Output<outputs.auditmanager.AssessmentAWSAccount | undefined>;
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * The list of delegations.
     */
    public /*out*/ readonly delegations!: pulumi.Output<outputs.auditmanager.AssessmentDelegation[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly frameworkId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The list of roles for the specified assessment.
     */
    public readonly roles!: pulumi.Output<outputs.auditmanager.AssessmentRole[] | undefined>;
    public readonly scope!: pulumi.Output<outputs.auditmanager.AssessmentScope | undefined>;
    public readonly status!: pulumi.Output<enums.auditmanager.AssessmentStatus | undefined>;
    /**
     * The tags associated with the assessment.
     */
    public readonly tags!: pulumi.Output<outputs.auditmanager.AssessmentTag[] | undefined>;

    /**
     * Create a Assessment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AssessmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["assessmentReportsDestination"] = args ? args.assessmentReportsDestination : undefined;
            resourceInputs["awsAccount"] = args ? args.awsAccount : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["frameworkId"] = args ? args.frameworkId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["assessmentId"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["delegations"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["assessmentId"] = undefined /*out*/;
            resourceInputs["assessmentReportsDestination"] = undefined /*out*/;
            resourceInputs["awsAccount"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["delegations"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["frameworkId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["roles"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Assessment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Assessment resource.
 */
export interface AssessmentArgs {
    assessmentReportsDestination?: pulumi.Input<inputs.auditmanager.AssessmentReportsDestinationArgs>;
    awsAccount?: pulumi.Input<inputs.auditmanager.AssessmentAWSAccountArgs>;
    description?: pulumi.Input<string>;
    frameworkId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The list of roles for the specified assessment.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.auditmanager.AssessmentRoleArgs>[]>;
    scope?: pulumi.Input<inputs.auditmanager.AssessmentScopeArgs>;
    status?: pulumi.Input<enums.auditmanager.AssessmentStatus>;
    /**
     * The tags associated with the assessment.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.auditmanager.AssessmentTagArgs>[]>;
}
