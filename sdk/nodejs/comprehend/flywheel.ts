// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::Comprehend::Flywheel resource creates an Amazon Comprehend Flywheel that enables customer to train their model.
 */
export class Flywheel extends pulumi.CustomResource {
    /**
     * Get an existing Flywheel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Flywheel {
        return new Flywheel(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:comprehend:Flywheel';

    /**
     * Returns true if the given object is an instance of Flywheel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flywheel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flywheel.__pulumiType;
    }

    /**
     * The Amazon Resource Number (ARN) of the active model version.
     */
    public readonly activeModelArn!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the flywheel.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
     */
    public readonly dataAccessRoleArn!: pulumi.Output<string>;
    /**
     * Amazon S3 URI of the data lake location.
     */
    public readonly dataLakeS3Uri!: pulumi.Output<string>;
    /**
     * Data security configuration.
     */
    public readonly dataSecurityConfig!: pulumi.Output<outputs.comprehend.FlywheelDataSecurityConfig | undefined>;
    /**
     * Name for the flywheel.
     */
    public readonly flywheelName!: pulumi.Output<string>;
    /**
     * Model type of the flywheel's model.
     */
    public readonly modelType!: pulumi.Output<enums.comprehend.FlywheelModelType | undefined>;
    /**
     * Tags associated with the endpoint being created. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an endpoint to indicate its use by the sales department.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Configuration about the model associated with a flywheel.
     */
    public readonly taskConfig!: pulumi.Output<outputs.comprehend.FlywheelTaskConfig | undefined>;

    /**
     * Create a Flywheel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlywheelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dataAccessRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataAccessRoleArn'");
            }
            if ((!args || args.dataLakeS3Uri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataLakeS3Uri'");
            }
            resourceInputs["activeModelArn"] = args ? args.activeModelArn : undefined;
            resourceInputs["dataAccessRoleArn"] = args ? args.dataAccessRoleArn : undefined;
            resourceInputs["dataLakeS3Uri"] = args ? args.dataLakeS3Uri : undefined;
            resourceInputs["dataSecurityConfig"] = args ? args.dataSecurityConfig : undefined;
            resourceInputs["flywheelName"] = args ? args.flywheelName : undefined;
            resourceInputs["modelType"] = args ? args.modelType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskConfig"] = args ? args.taskConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["activeModelArn"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dataAccessRoleArn"] = undefined /*out*/;
            resourceInputs["dataLakeS3Uri"] = undefined /*out*/;
            resourceInputs["dataSecurityConfig"] = undefined /*out*/;
            resourceInputs["flywheelName"] = undefined /*out*/;
            resourceInputs["modelType"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["taskConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["dataLakeS3Uri", "flywheelName", "modelType", "taskConfig"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Flywheel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Flywheel resource.
 */
export interface FlywheelArgs {
    /**
     * The Amazon Resource Number (ARN) of the active model version.
     */
    activeModelArn?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
     */
    dataAccessRoleArn: pulumi.Input<string>;
    /**
     * Amazon S3 URI of the data lake location.
     */
    dataLakeS3Uri: pulumi.Input<string>;
    /**
     * Data security configuration.
     */
    dataSecurityConfig?: pulumi.Input<inputs.comprehend.FlywheelDataSecurityConfigArgs>;
    /**
     * Name for the flywheel.
     */
    flywheelName?: pulumi.Input<string>;
    /**
     * Model type of the flywheel's model.
     */
    modelType?: pulumi.Input<enums.comprehend.FlywheelModelType>;
    /**
     * Tags associated with the endpoint being created. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an endpoint to indicate its use by the sales department.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Configuration about the model associated with a flywheel.
     */
    taskConfig?: pulumi.Input<inputs.comprehend.FlywheelTaskConfigArgs>;
}
