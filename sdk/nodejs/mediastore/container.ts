// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::MediaStore::Container
 *
 * @deprecated Container is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Container {
        pulumi.log.warn("Container is deprecated: Container is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Container(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:mediastore:Container';

    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Container {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }

    public readonly accessLoggingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly containerName!: pulumi.Output<string>;
    public readonly corsPolicy!: pulumi.Output<outputs.mediastore.ContainerCorsRule[] | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly lifecyclePolicy!: pulumi.Output<string | undefined>;
    public readonly metricPolicy!: pulumi.Output<outputs.mediastore.ContainerMetricPolicy | undefined>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.mediastore.ContainerTag[] | undefined>;

    /**
     * Create a Container resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Container is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args?: ContainerArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Container is deprecated: Container is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["accessLoggingEnabled"] = args ? args.accessLoggingEnabled : undefined;
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["corsPolicy"] = args ? args.corsPolicy : undefined;
            inputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            inputs["metricPolicy"] = args ? args.metricPolicy : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["endpoint"] = undefined /*out*/;
        } else {
            inputs["accessLoggingEnabled"] = undefined /*out*/;
            inputs["containerName"] = undefined /*out*/;
            inputs["corsPolicy"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["lifecyclePolicy"] = undefined /*out*/;
            inputs["metricPolicy"] = undefined /*out*/;
            inputs["policy"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Container.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Container resource.
 */
export interface ContainerArgs {
    accessLoggingEnabled?: pulumi.Input<boolean>;
    containerName?: pulumi.Input<string>;
    corsPolicy?: pulumi.Input<pulumi.Input<inputs.mediastore.ContainerCorsRuleArgs>[]>;
    lifecyclePolicy?: pulumi.Input<string>;
    metricPolicy?: pulumi.Input<inputs.mediastore.ContainerMetricPolicyArgs>;
    policy?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.mediastore.ContainerTagArgs>[]>;
}
