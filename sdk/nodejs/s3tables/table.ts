// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::S3Tables::Table
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:s3tables:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    public readonly compaction!: pulumi.Output<outputs.s3tables.TableCompaction | undefined>;
    public readonly icebergMetadata!: pulumi.Output<outputs.s3tables.TableIcebergMetadata | undefined>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly openTableFormat!: pulumi.Output<enums.s3tables.TableOpenTableFormat>;
    public readonly snapshotManagement!: pulumi.Output<outputs.s3tables.TableSnapshotManagement | undefined>;
    public /*out*/ readonly tableArn!: pulumi.Output<string>;
    public readonly tableBucketArn!: pulumi.Output<string>;
    public readonly tableName!: pulumi.Output<string>;
    public /*out*/ readonly versionToken!: pulumi.Output<string>;
    public /*out*/ readonly warehouseLocation!: pulumi.Output<string>;
    public readonly withoutMetadata!: pulumi.Output<enums.s3tables.TableWithoutMetadata | undefined>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.openTableFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openTableFormat'");
            }
            if ((!args || args.tableBucketArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableBucketArn'");
            }
            resourceInputs["compaction"] = args ? args.compaction : undefined;
            resourceInputs["icebergMetadata"] = args ? args.icebergMetadata : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["openTableFormat"] = args ? args.openTableFormat : undefined;
            resourceInputs["snapshotManagement"] = args ? args.snapshotManagement : undefined;
            resourceInputs["tableBucketArn"] = args ? args.tableBucketArn : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["withoutMetadata"] = args ? args.withoutMetadata : undefined;
            resourceInputs["tableArn"] = undefined /*out*/;
            resourceInputs["versionToken"] = undefined /*out*/;
            resourceInputs["warehouseLocation"] = undefined /*out*/;
        } else {
            resourceInputs["compaction"] = undefined /*out*/;
            resourceInputs["icebergMetadata"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["openTableFormat"] = undefined /*out*/;
            resourceInputs["snapshotManagement"] = undefined /*out*/;
            resourceInputs["tableArn"] = undefined /*out*/;
            resourceInputs["tableBucketArn"] = undefined /*out*/;
            resourceInputs["tableName"] = undefined /*out*/;
            resourceInputs["versionToken"] = undefined /*out*/;
            resourceInputs["warehouseLocation"] = undefined /*out*/;
            resourceInputs["withoutMetadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["icebergMetadata", "openTableFormat", "tableBucketArn", "withoutMetadata"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Table.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    compaction?: pulumi.Input<inputs.s3tables.TableCompactionArgs>;
    icebergMetadata?: pulumi.Input<inputs.s3tables.TableIcebergMetadataArgs>;
    namespace: pulumi.Input<string>;
    openTableFormat: pulumi.Input<enums.s3tables.TableOpenTableFormat>;
    snapshotManagement?: pulumi.Input<inputs.s3tables.TableSnapshotManagementArgs>;
    tableBucketArn: pulumi.Input<string>;
    tableName?: pulumi.Input<string>;
    withoutMetadata?: pulumi.Input<enums.s3tables.TableWithoutMetadata>;
}
