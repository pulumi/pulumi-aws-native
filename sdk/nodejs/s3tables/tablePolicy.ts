// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::S3Tables::TablePolicy
 */
export class TablePolicy extends pulumi.CustomResource {
    /**
     * Get an existing TablePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TablePolicy {
        return new TablePolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:s3tables:TablePolicy';

    /**
     * Returns true if the given object is an instance of TablePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TablePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TablePolicy.__pulumiType;
    }

    declare public /*out*/ readonly namespace: pulumi.Output<string>;
    declare public readonly resourcePolicy: pulumi.Output<outputs.s3tables.TablePolicyResourcePolicy>;
    declare public readonly tableArn: pulumi.Output<string>;
    declare public /*out*/ readonly tableBucketArn: pulumi.Output<string>;
    declare public /*out*/ readonly tableName: pulumi.Output<string>;

    /**
     * Create a TablePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TablePolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourcePolicy === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourcePolicy'");
            }
            if (args?.tableArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'tableArn'");
            }
            resourceInputs["resourcePolicy"] = args?.resourcePolicy;
            resourceInputs["tableArn"] = args?.tableArn;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["tableBucketArn"] = undefined /*out*/;
            resourceInputs["tableName"] = undefined /*out*/;
        } else {
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["resourcePolicy"] = undefined /*out*/;
            resourceInputs["tableArn"] = undefined /*out*/;
            resourceInputs["tableBucketArn"] = undefined /*out*/;
            resourceInputs["tableName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["tableArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TablePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TablePolicy resource.
 */
export interface TablePolicyArgs {
    resourcePolicy: pulumi.Input<inputs.s3tables.TablePolicyResourcePolicyArgs>;
    tableArn: pulumi.Input<string>;
}
