// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaLive::Multiplexprogram
 */
export function getMultiplexprogram(args: GetMultiplexprogramArgs, opts?: pulumi.InvokeOptions): Promise<GetMultiplexprogramResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:medialive:getMultiplexprogram", {
        "multiplexId": args.multiplexId,
        "programName": args.programName,
    }, opts);
}

export interface GetMultiplexprogramArgs {
    /**
     * The ID of the multiplex that the program belongs to.
     */
    multiplexId: string;
    /**
     * The name of the multiplex program.
     */
    programName: string;
}

export interface GetMultiplexprogramResult {
    /**
     * The MediaLive channel associated with the program.
     */
    readonly channelId?: string;
    /**
     * The settings for this multiplex program.
     */
    readonly multiplexProgramSettings?: outputs.medialive.MultiplexprogramMultiplexProgramSettings;
    /**
     * The packet identifier map for this multiplex program.
     */
    readonly packetIdentifiersMap?: outputs.medialive.MultiplexprogramMultiplexProgramPacketIdentifiersMap;
    /**
     * Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
     */
    readonly pipelineDetails?: outputs.medialive.MultiplexprogramMultiplexProgramPipelineDetail[];
}
/**
 * Resource schema for AWS::MediaLive::Multiplexprogram
 */
export function getMultiplexprogramOutput(args: GetMultiplexprogramOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMultiplexprogramResult> {
    return pulumi.output(args).apply((a: any) => getMultiplexprogram(a, opts))
}

export interface GetMultiplexprogramOutputArgs {
    /**
     * The ID of the multiplex that the program belongs to.
     */
    multiplexId: pulumi.Input<string>;
    /**
     * The name of the multiplex program.
     */
    programName: pulumi.Input<string>;
}
