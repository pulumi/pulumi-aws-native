// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::MediaLive::Cluster Resource Type
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:medialive:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The ARN of the Cluster.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The unique ID of the Cluster.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The MediaLive Channels that are currently running on Nodes in this Cluster.
     */
    public /*out*/ readonly channelIds!: pulumi.Output<string[]>;
    public readonly clusterType!: pulumi.Output<enums.medialive.ClusterType | undefined>;
    /**
     * The IAM role your nodes will use.
     */
    public readonly instanceRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The user-specified name of the Cluster to be created.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly networkSettings!: pulumi.Output<outputs.medialive.ClusterNetworkSettings | undefined>;
    public /*out*/ readonly state!: pulumi.Output<enums.medialive.ClusterState>;
    /**
     * A collection of key-value pairs.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["instanceRoleArn"] = args ? args.instanceRoleArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSettings"] = args ? args.networkSettings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["channelIds"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["channelIds"] = undefined /*out*/;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["instanceRoleArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkSettings"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clusterType", "instanceRoleArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    clusterType?: pulumi.Input<enums.medialive.ClusterType>;
    /**
     * The IAM role your nodes will use.
     */
    instanceRoleArn?: pulumi.Input<string>;
    /**
     * The user-specified name of the Cluster to be created.
     */
    name?: pulumi.Input<string>;
    networkSettings?: pulumi.Input<inputs.medialive.ClusterNetworkSettingsArgs>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
