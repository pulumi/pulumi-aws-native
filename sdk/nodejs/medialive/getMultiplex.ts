// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaLive::Multiplex
 */
export function getMultiplex(args: GetMultiplexArgs, opts?: pulumi.InvokeOptions): Promise<GetMultiplexResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:medialive:getMultiplex", {
        "id": args.id,
    }, opts);
}

export interface GetMultiplexArgs {
    /**
     * The unique id of the multiplex.
     */
    id: string;
}

export interface GetMultiplexResult {
    /**
     * The unique arn of the multiplex.
     */
    readonly arn?: string;
    /**
     * A list of the multiplex output destinations.
     */
    readonly destinations?: outputs.medialive.MultiplexOutputDestination[];
    /**
     * The unique id of the multiplex.
     */
    readonly id?: string;
    /**
     * Configuration for a multiplex event.
     */
    readonly multiplexSettings?: outputs.medialive.MultiplexSettings;
    /**
     * Name of multiplex.
     */
    readonly name?: string;
    /**
     * The number of currently healthy pipelines.
     */
    readonly pipelinesRunningCount?: number;
    /**
     * The number of programs in the multiplex.
     */
    readonly programCount?: number;
    readonly state?: enums.medialive.MultiplexState;
    /**
     * A collection of key-value pairs.
     */
    readonly tags?: outputs.medialive.MultiplexTags[];
}
/**
 * Resource schema for AWS::MediaLive::Multiplex
 */
export function getMultiplexOutput(args: GetMultiplexOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMultiplexResult> {
    return pulumi.output(args).apply((a: any) => getMultiplex(a, opts))
}

export interface GetMultiplexOutputArgs {
    /**
     * The unique id of the multiplex.
     */
    id: pulumi.Input<string>;
}
