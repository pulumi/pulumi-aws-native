// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaLive::Network.
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:medialive:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * The ARN of the Network.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly associatedClusterIds!: pulumi.Output<string[]>;
    /**
     * The unique ID of the Network.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The list of IP address cidr pools for the network
     */
    public readonly ipPools!: pulumi.Output<outputs.medialive.NetworkIpPool[]>;
    /**
     * The user-specified name of the Network to be created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The routes for the network
     */
    public readonly routes!: pulumi.Output<outputs.medialive.NetworkRoute[] | undefined>;
    /**
     * The current state of the Network.
     */
    public /*out*/ readonly state!: pulumi.Output<enums.medialive.NetworkState>;
    /**
     * A collection of key-value pairs.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ipPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipPools'");
            }
            resourceInputs["ipPools"] = args ? args.ipPools : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associatedClusterIds"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associatedClusterIds"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["ipPools"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * The list of IP address cidr pools for the network
     */
    ipPools: pulumi.Input<pulumi.Input<inputs.medialive.NetworkIpPoolArgs>[]>;
    /**
     * The user-specified name of the Network to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The routes for the network
     */
    routes?: pulumi.Input<pulumi.Input<inputs.medialive.NetworkRouteArgs>[]>;
    /**
     * A collection of key-value pairs.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
