// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
 */
export class CloudWatchAlarmTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CloudWatchAlarmTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CloudWatchAlarmTemplate {
        return new CloudWatchAlarmTemplate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:medialive:CloudWatchAlarmTemplate';

    /**
     * Returns true if the given object is an instance of CloudWatchAlarmTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudWatchAlarmTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudWatchAlarmTemplate.__pulumiType;
    }

    /**
     * A cloudwatch alarm template's ARN (Amazon Resource Name)
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The comparison operator used to compare the specified statistic and the threshold.
     */
    declare public readonly comparisonOperator: pulumi.Output<enums.medialive.CloudWatchAlarmTemplateComparisonOperator>;
    /**
     * The date and time of resource creation.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
     */
    declare public readonly datapointsToAlarm: pulumi.Output<number | undefined>;
    /**
     * A resource's optional description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The number of periods over which data is compared to the specified threshold.
     */
    declare public readonly evaluationPeriods: pulumi.Output<number>;
    /**
     * A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
     */
    declare public /*out*/ readonly groupId: pulumi.Output<string>;
    /**
     * A cloudwatch alarm template group's identifier. Can be either be its id or current name.
     */
    declare public readonly groupIdentifier: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly identifier: pulumi.Output<string>;
    /**
     * The name of the metric associated with the alarm. Must be compatible with targetResourceType.
     */
    declare public readonly metricName: pulumi.Output<string>;
    /**
     * The date and time of latest resource modification.
     */
    declare public /*out*/ readonly modifiedAt: pulumi.Output<string>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The period, in seconds, over which the specified statistic is applied.
     */
    declare public readonly period: pulumi.Output<number>;
    /**
     * The statistic to apply to the alarm's metric data.
     */
    declare public readonly statistic: pulumi.Output<enums.medialive.CloudWatchAlarmTemplateStatistic>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The resource type this template should dynamically generate CloudWatch metric alarms for.
     */
    declare public readonly targetResourceType: pulumi.Output<enums.medialive.CloudWatchAlarmTemplateTargetResourceType>;
    /**
     * The threshold value to compare with the specified statistic.
     */
    declare public readonly threshold: pulumi.Output<number>;
    /**
     * Specifies how missing data points are treated when evaluating the alarm's condition.
     */
    declare public readonly treatMissingData: pulumi.Output<enums.medialive.CloudWatchAlarmTemplateTreatMissingData>;

    /**
     * Create a CloudWatchAlarmTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudWatchAlarmTemplateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.comparisonOperator === undefined && !opts.urn) {
                throw new Error("Missing required property 'comparisonOperator'");
            }
            if (args?.evaluationPeriods === undefined && !opts.urn) {
                throw new Error("Missing required property 'evaluationPeriods'");
            }
            if (args?.metricName === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if (args?.period === undefined && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if (args?.statistic === undefined && !opts.urn) {
                throw new Error("Missing required property 'statistic'");
            }
            if (args?.targetResourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetResourceType'");
            }
            if (args?.threshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if (args?.treatMissingData === undefined && !opts.urn) {
                throw new Error("Missing required property 'treatMissingData'");
            }
            resourceInputs["comparisonOperator"] = args?.comparisonOperator;
            resourceInputs["datapointsToAlarm"] = args?.datapointsToAlarm;
            resourceInputs["description"] = args?.description;
            resourceInputs["evaluationPeriods"] = args?.evaluationPeriods;
            resourceInputs["groupIdentifier"] = args?.groupIdentifier;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["statistic"] = args?.statistic;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetResourceType"] = args?.targetResourceType;
            resourceInputs["threshold"] = args?.threshold;
            resourceInputs["treatMissingData"] = args?.treatMissingData;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["comparisonOperator"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["datapointsToAlarm"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["evaluationPeriods"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["groupIdentifier"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["metricName"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["period"] = undefined /*out*/;
            resourceInputs["statistic"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetResourceType"] = undefined /*out*/;
            resourceInputs["threshold"] = undefined /*out*/;
            resourceInputs["treatMissingData"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CloudWatchAlarmTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CloudWatchAlarmTemplate resource.
 */
export interface CloudWatchAlarmTemplateArgs {
    /**
     * The comparison operator used to compare the specified statistic and the threshold.
     */
    comparisonOperator: pulumi.Input<enums.medialive.CloudWatchAlarmTemplateComparisonOperator>;
    /**
     * The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
     */
    datapointsToAlarm?: pulumi.Input<number>;
    /**
     * A resource's optional description.
     */
    description?: pulumi.Input<string>;
    /**
     * The number of periods over which data is compared to the specified threshold.
     */
    evaluationPeriods: pulumi.Input<number>;
    /**
     * A cloudwatch alarm template group's identifier. Can be either be its id or current name.
     */
    groupIdentifier?: pulumi.Input<string>;
    /**
     * The name of the metric associated with the alarm. Must be compatible with targetResourceType.
     */
    metricName: pulumi.Input<string>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    name?: pulumi.Input<string>;
    /**
     * The period, in seconds, over which the specified statistic is applied.
     */
    period: pulumi.Input<number>;
    /**
     * The statistic to apply to the alarm's metric data.
     */
    statistic: pulumi.Input<enums.medialive.CloudWatchAlarmTemplateStatistic>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource type this template should dynamically generate CloudWatch metric alarms for.
     */
    targetResourceType: pulumi.Input<enums.medialive.CloudWatchAlarmTemplateTargetResourceType>;
    /**
     * The threshold value to compare with the specified statistic.
     */
    threshold: pulumi.Input<number>;
    /**
     * Specifies how missing data points are treated when evaluating the alarm's condition.
     */
    treatMissingData: pulumi.Input<enums.medialive.CloudWatchAlarmTemplateTreatMissingData>;
}
