// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChannelPlacementGroupArgs } from "./channelPlacementGroup";
export type ChannelPlacementGroup = import("./channelPlacementGroup").ChannelPlacementGroup;
export const ChannelPlacementGroup: typeof import("./channelPlacementGroup").ChannelPlacementGroup = null as any;
utilities.lazyLoad(exports, ["ChannelPlacementGroup"], () => require("./channelPlacementGroup"));

export { CloudWatchAlarmTemplateArgs } from "./cloudWatchAlarmTemplate";
export type CloudWatchAlarmTemplate = import("./cloudWatchAlarmTemplate").CloudWatchAlarmTemplate;
export const CloudWatchAlarmTemplate: typeof import("./cloudWatchAlarmTemplate").CloudWatchAlarmTemplate = null as any;
utilities.lazyLoad(exports, ["CloudWatchAlarmTemplate"], () => require("./cloudWatchAlarmTemplate"));

export { CloudWatchAlarmTemplateGroupArgs } from "./cloudWatchAlarmTemplateGroup";
export type CloudWatchAlarmTemplateGroup = import("./cloudWatchAlarmTemplateGroup").CloudWatchAlarmTemplateGroup;
export const CloudWatchAlarmTemplateGroup: typeof import("./cloudWatchAlarmTemplateGroup").CloudWatchAlarmTemplateGroup = null as any;
utilities.lazyLoad(exports, ["CloudWatchAlarmTemplateGroup"], () => require("./cloudWatchAlarmTemplateGroup"));

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { EventBridgeRuleTemplateArgs } from "./eventBridgeRuleTemplate";
export type EventBridgeRuleTemplate = import("./eventBridgeRuleTemplate").EventBridgeRuleTemplate;
export const EventBridgeRuleTemplate: typeof import("./eventBridgeRuleTemplate").EventBridgeRuleTemplate = null as any;
utilities.lazyLoad(exports, ["EventBridgeRuleTemplate"], () => require("./eventBridgeRuleTemplate"));

export { EventBridgeRuleTemplateGroupArgs } from "./eventBridgeRuleTemplateGroup";
export type EventBridgeRuleTemplateGroup = import("./eventBridgeRuleTemplateGroup").EventBridgeRuleTemplateGroup;
export const EventBridgeRuleTemplateGroup: typeof import("./eventBridgeRuleTemplateGroup").EventBridgeRuleTemplateGroup = null as any;
utilities.lazyLoad(exports, ["EventBridgeRuleTemplateGroup"], () => require("./eventBridgeRuleTemplateGroup"));

export { GetChannelPlacementGroupArgs, GetChannelPlacementGroupResult, GetChannelPlacementGroupOutputArgs } from "./getChannelPlacementGroup";
export const getChannelPlacementGroup: typeof import("./getChannelPlacementGroup").getChannelPlacementGroup = null as any;
export const getChannelPlacementGroupOutput: typeof import("./getChannelPlacementGroup").getChannelPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getChannelPlacementGroup","getChannelPlacementGroupOutput"], () => require("./getChannelPlacementGroup"));

export { GetCloudWatchAlarmTemplateArgs, GetCloudWatchAlarmTemplateResult, GetCloudWatchAlarmTemplateOutputArgs } from "./getCloudWatchAlarmTemplate";
export const getCloudWatchAlarmTemplate: typeof import("./getCloudWatchAlarmTemplate").getCloudWatchAlarmTemplate = null as any;
export const getCloudWatchAlarmTemplateOutput: typeof import("./getCloudWatchAlarmTemplate").getCloudWatchAlarmTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCloudWatchAlarmTemplate","getCloudWatchAlarmTemplateOutput"], () => require("./getCloudWatchAlarmTemplate"));

export { GetCloudWatchAlarmTemplateGroupArgs, GetCloudWatchAlarmTemplateGroupResult, GetCloudWatchAlarmTemplateGroupOutputArgs } from "./getCloudWatchAlarmTemplateGroup";
export const getCloudWatchAlarmTemplateGroup: typeof import("./getCloudWatchAlarmTemplateGroup").getCloudWatchAlarmTemplateGroup = null as any;
export const getCloudWatchAlarmTemplateGroupOutput: typeof import("./getCloudWatchAlarmTemplateGroup").getCloudWatchAlarmTemplateGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudWatchAlarmTemplateGroup","getCloudWatchAlarmTemplateGroupOutput"], () => require("./getCloudWatchAlarmTemplateGroup"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetEventBridgeRuleTemplateArgs, GetEventBridgeRuleTemplateResult, GetEventBridgeRuleTemplateOutputArgs } from "./getEventBridgeRuleTemplate";
export const getEventBridgeRuleTemplate: typeof import("./getEventBridgeRuleTemplate").getEventBridgeRuleTemplate = null as any;
export const getEventBridgeRuleTemplateOutput: typeof import("./getEventBridgeRuleTemplate").getEventBridgeRuleTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeRuleTemplate","getEventBridgeRuleTemplateOutput"], () => require("./getEventBridgeRuleTemplate"));

export { GetEventBridgeRuleTemplateGroupArgs, GetEventBridgeRuleTemplateGroupResult, GetEventBridgeRuleTemplateGroupOutputArgs } from "./getEventBridgeRuleTemplateGroup";
export const getEventBridgeRuleTemplateGroup: typeof import("./getEventBridgeRuleTemplateGroup").getEventBridgeRuleTemplateGroup = null as any;
export const getEventBridgeRuleTemplateGroupOutput: typeof import("./getEventBridgeRuleTemplateGroup").getEventBridgeRuleTemplateGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeRuleTemplateGroup","getEventBridgeRuleTemplateGroupOutput"], () => require("./getEventBridgeRuleTemplateGroup"));

export { GetMultiplexArgs, GetMultiplexResult, GetMultiplexOutputArgs } from "./getMultiplex";
export const getMultiplex: typeof import("./getMultiplex").getMultiplex = null as any;
export const getMultiplexOutput: typeof import("./getMultiplex").getMultiplexOutput = null as any;
utilities.lazyLoad(exports, ["getMultiplex","getMultiplexOutput"], () => require("./getMultiplex"));

export { GetMultiplexprogramArgs, GetMultiplexprogramResult, GetMultiplexprogramOutputArgs } from "./getMultiplexprogram";
export const getMultiplexprogram: typeof import("./getMultiplexprogram").getMultiplexprogram = null as any;
export const getMultiplexprogramOutput: typeof import("./getMultiplexprogram").getMultiplexprogramOutput = null as any;
utilities.lazyLoad(exports, ["getMultiplexprogram","getMultiplexprogramOutput"], () => require("./getMultiplexprogram"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetSdiSourceArgs, GetSdiSourceResult, GetSdiSourceOutputArgs } from "./getSdiSource";
export const getSdiSource: typeof import("./getSdiSource").getSdiSource = null as any;
export const getSdiSourceOutput: typeof import("./getSdiSource").getSdiSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSdiSource","getSdiSourceOutput"], () => require("./getSdiSource"));

export { GetSignalMapArgs, GetSignalMapResult, GetSignalMapOutputArgs } from "./getSignalMap";
export const getSignalMap: typeof import("./getSignalMap").getSignalMap = null as any;
export const getSignalMapOutput: typeof import("./getSignalMap").getSignalMapOutput = null as any;
utilities.lazyLoad(exports, ["getSignalMap","getSignalMapOutput"], () => require("./getSignalMap"));

export { MultiplexArgs } from "./multiplex";
export type Multiplex = import("./multiplex").Multiplex;
export const Multiplex: typeof import("./multiplex").Multiplex = null as any;
utilities.lazyLoad(exports, ["Multiplex"], () => require("./multiplex"));

export { MultiplexprogramArgs } from "./multiplexprogram";
export type Multiplexprogram = import("./multiplexprogram").Multiplexprogram;
export const Multiplexprogram: typeof import("./multiplexprogram").Multiplexprogram = null as any;
utilities.lazyLoad(exports, ["Multiplexprogram"], () => require("./multiplexprogram"));

export { NetworkArgs } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { SdiSourceArgs } from "./sdiSource";
export type SdiSource = import("./sdiSource").SdiSource;
export const SdiSource: typeof import("./sdiSource").SdiSource = null as any;
utilities.lazyLoad(exports, ["SdiSource"], () => require("./sdiSource"));

export { SignalMapArgs } from "./signalMap";
export type SignalMap = import("./signalMap").SignalMap;
export const SignalMap: typeof import("./signalMap").SignalMap = null as any;
utilities.lazyLoad(exports, ["SignalMap"], () => require("./signalMap"));


// Export enums:
export * from "../types/enums/medialive";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:medialive:ChannelPlacementGroup":
                return new ChannelPlacementGroup(name, <any>undefined, { urn })
            case "aws-native:medialive:CloudWatchAlarmTemplate":
                return new CloudWatchAlarmTemplate(name, <any>undefined, { urn })
            case "aws-native:medialive:CloudWatchAlarmTemplateGroup":
                return new CloudWatchAlarmTemplateGroup(name, <any>undefined, { urn })
            case "aws-native:medialive:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws-native:medialive:EventBridgeRuleTemplate":
                return new EventBridgeRuleTemplate(name, <any>undefined, { urn })
            case "aws-native:medialive:EventBridgeRuleTemplateGroup":
                return new EventBridgeRuleTemplateGroup(name, <any>undefined, { urn })
            case "aws-native:medialive:Multiplex":
                return new Multiplex(name, <any>undefined, { urn })
            case "aws-native:medialive:Multiplexprogram":
                return new Multiplexprogram(name, <any>undefined, { urn })
            case "aws-native:medialive:Network":
                return new Network(name, <any>undefined, { urn })
            case "aws-native:medialive:SdiSource":
                return new SdiSource(name, <any>undefined, { urn })
            case "aws-native:medialive:SignalMap":
                return new SignalMap(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "medialive", _module)
