// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::MediaLive::SignalMap Resource Type
 */
export class SignalMap extends pulumi.CustomResource {
    /**
     * Get an existing SignalMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SignalMap {
        return new SignalMap(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:medialive:SignalMap';

    /**
     * Returns true if the given object is an instance of SignalMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SignalMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignalMap.__pulumiType;
    }

    /**
     * A signal map's ARN (Amazon Resource Name)
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * A signal map's id.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * A cloudwatch alarm template group's identifier. Can be either be its id or current name.
     */
    declare public readonly cloudWatchAlarmTemplateGroupIdentifiers: pulumi.Output<string[] | undefined>;
    /**
     * An alarm template group's id.
     */
    declare public /*out*/ readonly cloudWatchAlarmTemplateGroupIds: pulumi.Output<string[]>;
    /**
     * The date and time of resource creation.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * A resource's optional description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A top-level supported AWS resource ARN to discovery a signal map from.
     */
    declare public readonly discoveryEntryPointArn: pulumi.Output<string>;
    /**
     * Error message associated with a failed creation or failed update attempt of a signal map.
     */
    declare public /*out*/ readonly errorMessage: pulumi.Output<string>;
    /**
     * An eventbridge rule template group's identifier. Can be either be its id or current name.
     */
    declare public readonly eventBridgeRuleTemplateGroupIdentifiers: pulumi.Output<string[] | undefined>;
    /**
     * An eventbridge rule template group's id.
     */
    declare public /*out*/ readonly eventBridgeRuleTemplateGroupIds: pulumi.Output<string[]>;
    declare public /*out*/ readonly failedMediaResourceMap: pulumi.Output<{[key: string]: outputs.medialive.SignalMapMediaResource}>;
    /**
     * If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
     */
    declare public readonly forceRediscovery: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly identifier: pulumi.Output<string>;
    /**
     * The date and time of latest discovery.
     */
    declare public /*out*/ readonly lastDiscoveredAt: pulumi.Output<string>;
    declare public /*out*/ readonly lastSuccessfulMonitorDeployment: pulumi.Output<outputs.medialive.SignalMapSuccessfulMonitorDeployment>;
    declare public /*out*/ readonly mediaResourceMap: pulumi.Output<{[key: string]: outputs.medialive.SignalMapMediaResource}>;
    /**
     * The date and time of latest resource modification.
     */
    declare public /*out*/ readonly modifiedAt: pulumi.Output<string>;
    /**
     * If true, there are pending monitor changes for this signal map that can be deployed.
     */
    declare public /*out*/ readonly monitorChangesPendingDeployment: pulumi.Output<boolean>;
    declare public /*out*/ readonly monitorDeployment: pulumi.Output<outputs.medialive.SignalMapMonitorDeployment>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
     */
    declare public /*out*/ readonly status: pulumi.Output<enums.medialive.SignalMapStatus>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SignalMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SignalMapArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.discoveryEntryPointArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'discoveryEntryPointArn'");
            }
            resourceInputs["cloudWatchAlarmTemplateGroupIdentifiers"] = args?.cloudWatchAlarmTemplateGroupIdentifiers;
            resourceInputs["description"] = args?.description;
            resourceInputs["discoveryEntryPointArn"] = args?.discoveryEntryPointArn;
            resourceInputs["eventBridgeRuleTemplateGroupIdentifiers"] = args?.eventBridgeRuleTemplateGroupIdentifiers;
            resourceInputs["forceRediscovery"] = args?.forceRediscovery;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["cloudWatchAlarmTemplateGroupIds"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["eventBridgeRuleTemplateGroupIds"] = undefined /*out*/;
            resourceInputs["failedMediaResourceMap"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lastDiscoveredAt"] = undefined /*out*/;
            resourceInputs["lastSuccessfulMonitorDeployment"] = undefined /*out*/;
            resourceInputs["mediaResourceMap"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["monitorChangesPendingDeployment"] = undefined /*out*/;
            resourceInputs["monitorDeployment"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["cloudWatchAlarmTemplateGroupIdentifiers"] = undefined /*out*/;
            resourceInputs["cloudWatchAlarmTemplateGroupIds"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["discoveryEntryPointArn"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["eventBridgeRuleTemplateGroupIdentifiers"] = undefined /*out*/;
            resourceInputs["eventBridgeRuleTemplateGroupIds"] = undefined /*out*/;
            resourceInputs["failedMediaResourceMap"] = undefined /*out*/;
            resourceInputs["forceRediscovery"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lastDiscoveredAt"] = undefined /*out*/;
            resourceInputs["lastSuccessfulMonitorDeployment"] = undefined /*out*/;
            resourceInputs["mediaResourceMap"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["monitorChangesPendingDeployment"] = undefined /*out*/;
            resourceInputs["monitorDeployment"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SignalMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SignalMap resource.
 */
export interface SignalMapArgs {
    /**
     * A cloudwatch alarm template group's identifier. Can be either be its id or current name.
     */
    cloudWatchAlarmTemplateGroupIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A resource's optional description.
     */
    description?: pulumi.Input<string>;
    /**
     * A top-level supported AWS resource ARN to discovery a signal map from.
     */
    discoveryEntryPointArn: pulumi.Input<string>;
    /**
     * An eventbridge rule template group's identifier. Can be either be its id or current name.
     */
    eventBridgeRuleTemplateGroupIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
     */
    forceRediscovery?: pulumi.Input<boolean>;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
