// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::MediaLive::SignalMap Resource Type
 */
export function getSignalMap(args: GetSignalMapArgs, opts?: pulumi.InvokeOptions): Promise<GetSignalMapResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:medialive:getSignalMap", {
        "identifier": args.identifier,
    }, opts);
}

export interface GetSignalMapArgs {
    identifier: string;
}

export interface GetSignalMapResult {
    /**
     * A signal map's ARN (Amazon Resource Name)
     */
    readonly arn?: string;
    /**
     * An alarm template group's id.
     */
    readonly cloudWatchAlarmTemplateGroupIds?: string[];
    /**
     * The date and time of resource creation.
     */
    readonly createdAt?: string;
    /**
     * A resource's optional description.
     */
    readonly description?: string;
    /**
     * A top-level supported AWS resource ARN to discovery a signal map from.
     */
    readonly discoveryEntryPointArn?: string;
    /**
     * Error message associated with a failed creation or failed update attempt of a signal map.
     */
    readonly errorMessage?: string;
    /**
     * An eventbridge rule template group's id.
     */
    readonly eventBridgeRuleTemplateGroupIds?: string[];
    readonly failedMediaResourceMap?: {[key: string]: outputs.medialive.SignalMapMediaResource};
    /**
     * A signal map's id.
     */
    readonly id?: string;
    readonly identifier?: string;
    /**
     * The date and time of latest discovery.
     */
    readonly lastDiscoveredAt?: string;
    readonly lastSuccessfulMonitorDeployment?: outputs.medialive.SignalMapSuccessfulMonitorDeployment;
    readonly mediaResourceMap?: {[key: string]: outputs.medialive.SignalMapMediaResource};
    /**
     * The date and time of latest resource modification.
     */
    readonly modifiedAt?: string;
    /**
     * If true, there are pending monitor changes for this signal map that can be deployed.
     */
    readonly monitorChangesPendingDeployment?: boolean;
    readonly monitorDeployment?: outputs.medialive.SignalMapMonitorDeployment;
    /**
     * A resource's name. Names must be unique within the scope of a resource type in a specific region.
     */
    readonly name?: string;
    /**
     * A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
     */
    readonly status?: enums.medialive.SignalMapStatus;
}
/**
 * Definition of AWS::MediaLive::SignalMap Resource Type
 */
export function getSignalMapOutput(args: GetSignalMapOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSignalMapResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:medialive:getSignalMap", {
        "identifier": args.identifier,
    }, opts);
}

export interface GetSignalMapOutputArgs {
    identifier: pulumi.Input<string>;
}
