// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaLive::Multiplexprogram
 */
export class Multiplexprogram extends pulumi.CustomResource {
    /**
     * Get an existing Multiplexprogram resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Multiplexprogram {
        return new Multiplexprogram(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:medialive:Multiplexprogram';

    /**
     * Returns true if the given object is an instance of Multiplexprogram.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Multiplexprogram {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Multiplexprogram.__pulumiType;
    }

    /**
     * The MediaLive channel associated with the program.
     */
    public readonly channelId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the multiplex that the program belongs to.
     */
    public readonly multiplexId!: pulumi.Output<string | undefined>;
    /**
     * The settings for this multiplex program.
     */
    public readonly multiplexProgramSettings!: pulumi.Output<outputs.medialive.MultiplexprogramMultiplexProgramSettings | undefined>;
    /**
     * The packet identifier map for this multiplex program.
     */
    public readonly packetIdentifiersMap!: pulumi.Output<outputs.medialive.MultiplexprogramMultiplexProgramPacketIdentifiersMap | undefined>;
    /**
     * Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
     */
    public readonly pipelineDetails!: pulumi.Output<outputs.medialive.MultiplexprogramMultiplexProgramPipelineDetail[] | undefined>;
    /**
     * The settings for this multiplex program.
     */
    public readonly preferredChannelPipeline!: pulumi.Output<enums.medialive.MultiplexprogramPreferredChannelPipeline | undefined>;
    /**
     * The name of the multiplex program.
     */
    public readonly programName!: pulumi.Output<string | undefined>;

    /**
     * Create a Multiplexprogram resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MultiplexprogramArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["multiplexId"] = args ? args.multiplexId : undefined;
            resourceInputs["multiplexProgramSettings"] = args ? args.multiplexProgramSettings : undefined;
            resourceInputs["packetIdentifiersMap"] = args ? args.packetIdentifiersMap : undefined;
            resourceInputs["pipelineDetails"] = args ? args.pipelineDetails : undefined;
            resourceInputs["preferredChannelPipeline"] = args ? args.preferredChannelPipeline : undefined;
            resourceInputs["programName"] = args ? args.programName : undefined;
        } else {
            resourceInputs["channelId"] = undefined /*out*/;
            resourceInputs["multiplexId"] = undefined /*out*/;
            resourceInputs["multiplexProgramSettings"] = undefined /*out*/;
            resourceInputs["packetIdentifiersMap"] = undefined /*out*/;
            resourceInputs["pipelineDetails"] = undefined /*out*/;
            resourceInputs["preferredChannelPipeline"] = undefined /*out*/;
            resourceInputs["programName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["multiplexId", "programName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Multiplexprogram.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Multiplexprogram resource.
 */
export interface MultiplexprogramArgs {
    /**
     * The MediaLive channel associated with the program.
     */
    channelId?: pulumi.Input<string>;
    /**
     * The ID of the multiplex that the program belongs to.
     */
    multiplexId?: pulumi.Input<string>;
    /**
     * The settings for this multiplex program.
     */
    multiplexProgramSettings?: pulumi.Input<inputs.medialive.MultiplexprogramMultiplexProgramSettingsArgs>;
    /**
     * The packet identifier map for this multiplex program.
     */
    packetIdentifiersMap?: pulumi.Input<inputs.medialive.MultiplexprogramMultiplexProgramPacketIdentifiersMapArgs>;
    /**
     * Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
     */
    pipelineDetails?: pulumi.Input<pulumi.Input<inputs.medialive.MultiplexprogramMultiplexProgramPipelineDetailArgs>[]>;
    /**
     * The settings for this multiplex program.
     */
    preferredChannelPipeline?: pulumi.Input<enums.medialive.MultiplexprogramPreferredChannelPipeline>;
    /**
     * The name of the multiplex program.
     */
    programName?: pulumi.Input<string>;
}
