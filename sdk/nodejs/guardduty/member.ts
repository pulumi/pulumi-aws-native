// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::GuardDuty::Member
 */
export class Member extends pulumi.CustomResource {
    /**
     * Get an existing Member resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Member {
        return new Member(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:guardduty:Member';

    /**
     * Returns true if the given object is an instance of Member.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Member {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Member.__pulumiType;
    }

    /**
     * The ID of the detector associated with the GuardDuty service to add the member to.
     */
    declare public readonly detectorId: pulumi.Output<string | undefined>;
    /**
     * Specifies whether or not to disable email notification for the member account that you invite.
     */
    declare public readonly disableEmailNotification: pulumi.Output<boolean | undefined>;
    /**
     * The email address associated with the member account.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * The AWS account ID of the account to designate as a member.
     */
    declare public readonly memberId: pulumi.Output<string | undefined>;
    /**
     * The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
     */
    declare public readonly message: pulumi.Output<string | undefined>;
    /**
     * You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
     */
    declare public readonly status: pulumi.Output<string | undefined>;

    /**
     * Create a Member resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MemberArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["detectorId"] = args?.detectorId;
            resourceInputs["disableEmailNotification"] = args?.disableEmailNotification;
            resourceInputs["email"] = args?.email;
            resourceInputs["memberId"] = args?.memberId;
            resourceInputs["message"] = args?.message;
            resourceInputs["status"] = args?.status;
        } else {
            resourceInputs["detectorId"] = undefined /*out*/;
            resourceInputs["disableEmailNotification"] = undefined /*out*/;
            resourceInputs["email"] = undefined /*out*/;
            resourceInputs["memberId"] = undefined /*out*/;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["detectorId", "memberId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Member.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Member resource.
 */
export interface MemberArgs {
    /**
     * The ID of the detector associated with the GuardDuty service to add the member to.
     */
    detectorId?: pulumi.Input<string>;
    /**
     * Specifies whether or not to disable email notification for the member account that you invite.
     */
    disableEmailNotification?: pulumi.Input<boolean>;
    /**
     * The email address associated with the member account.
     */
    email: pulumi.Input<string>;
    /**
     * The AWS account ID of the account to designate as a member.
     */
    memberId?: pulumi.Input<string>;
    /**
     * The invitation message that you want to send to the accounts that you're inviting to GuardDuty as members.
     */
    message?: pulumi.Input<string>;
    /**
     * You can use the `Status` property to update the status of the relationship between the member account and its administrator account. Valid values are `Created` and `Invited` when using an `AWS::GuardDuty::Member` resource. If the value for this property is not provided or set to `Created` , a member account is created but not invited. If the value of this property is set to `Invited` , a member account is created and invited.
     */
    status?: pulumi.Input<string>;
}
