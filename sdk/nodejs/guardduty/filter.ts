// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::GuardDuty::Filter
 */
export class Filter extends pulumi.CustomResource {
    /**
     * Get an existing Filter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Filter {
        return new Filter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:guardduty:Filter';

    /**
     * Returns true if the given object is an instance of Filter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Filter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Filter.__pulumiType;
    }

    /**
     * Specifies the action that is to be applied to the findings that match the filter.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ( `{ }` , `[ ]` , and `( )` ), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The detector ID associated with the GuardDuty account for which you want to create a filter.
     *
     * To find the `detectorId` in the current Region, see the
     * Settings page in the GuardDuty console, or run the [ListDetectors](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html) API.
     */
    public readonly detectorId!: pulumi.Output<string>;
    /**
     * Represents the criteria to be used in the filter for querying findings.
     */
    public readonly findingCriteria!: pulumi.Output<outputs.guardduty.FilterFindingCriteria>;
    /**
     * The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings. The minimum value for this property is 1 and the maximum is 100.
     *
     * By default, filters may not be created in the same order as they are ranked. To ensure that the filters are created in the expected order, you can use an optional attribute, [DependsOn](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) , with the following syntax: `"DependsOn":[ "ObjectName" ]` .
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * The tags to be added to a new filter resource. Each tag consists of a key and an optional value, both of which you define.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Filter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.detectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'detectorId'");
            }
            if (args?.findingCriteria === undefined && !opts.urn) {
                throw new Error("Missing required property 'findingCriteria'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["detectorId"] = args?.detectorId;
            resourceInputs["findingCriteria"] = args?.findingCriteria;
            resourceInputs["name"] = args?.name;
            resourceInputs["rank"] = args?.rank;
            resourceInputs["tags"] = args?.tags;
        } else {
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["detectorId"] = undefined /*out*/;
            resourceInputs["findingCriteria"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rank"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["detectorId", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Filter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Filter resource.
 */
export interface FilterArgs {
    /**
     * Specifies the action that is to be applied to the findings that match the filter.
     */
    action?: pulumi.Input<string>;
    /**
     * The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses ( `{ }` , `[ ]` , and `( )` ), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.
     */
    description?: pulumi.Input<string>;
    /**
     * The detector ID associated with the GuardDuty account for which you want to create a filter.
     *
     * To find the `detectorId` in the current Region, see the
     * Settings page in the GuardDuty console, or run the [ListDetectors](https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html) API.
     */
    detectorId: pulumi.Input<string>;
    /**
     * Represents the criteria to be used in the filter for querying findings.
     */
    findingCriteria: pulumi.Input<inputs.guardduty.FilterFindingCriteriaArgs>;
    /**
     * The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings. The minimum value for this property is 1 and the maximum is 100.
     *
     * By default, filters may not be created in the same order as they are ranked. To ensure that the filters are created in the expected order, you can use an optional attribute, [DependsOn](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) , with the following syntax: `"DependsOn":[ "ObjectName" ]` .
     */
    rank?: pulumi.Input<number>;
    /**
     * The tags to be added to a new filter resource. Each tag consists of a key and an optional value, both of which you define.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
