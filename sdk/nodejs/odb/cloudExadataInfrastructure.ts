// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure
 */
export class CloudExadataInfrastructure extends pulumi.CustomResource {
    /**
     * Get an existing CloudExadataInfrastructure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CloudExadataInfrastructure {
        return new CloudExadataInfrastructure(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:odb:CloudExadataInfrastructure';

    /**
     * Returns true if the given object is an instance of CloudExadataInfrastructure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudExadataInfrastructure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudExadataInfrastructure.__pulumiType;
    }

    /**
     * The number of storage servers requested for the Exadata infrastructure.
     */
    public /*out*/ readonly activatedStorageCount!: pulumi.Output<number>;
    /**
     * The number of storage servers requested for the Exadata infrastructure.
     */
    public /*out*/ readonly additionalStorageCount!: pulumi.Output<number>;
    /**
     * The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * The AZ ID of the AZ where the Exadata infrastructure is located.
     */
    public readonly availabilityZoneId!: pulumi.Output<string | undefined>;
    /**
     * The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
     */
    public /*out*/ readonly availableStorageSizeInGbs!: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) for the Exadata infrastructure.
     */
    public /*out*/ readonly cloudExadataInfrastructureArn!: pulumi.Output<string>;
    /**
     * The unique identifier for the Exadata infrastructure.
     */
    public /*out*/ readonly cloudExadataInfrastructureId!: pulumi.Output<string>;
    /**
     * The number of database servers for the Exadata infrastructure.
     */
    public readonly computeCount!: pulumi.Output<number | undefined>;
    /**
     * The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     */
    public /*out*/ readonly computeModel!: pulumi.Output<string>;
    /**
     * The total number of CPU cores that are allocated to the Exadata infrastructure.
     */
    public /*out*/ readonly cpuCount!: pulumi.Output<number>;
    /**
     * The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
     */
    public readonly customerContactsToSendToOci!: pulumi.Output<outputs.odb.CloudExadataInfrastructureCustomerContact[] | undefined>;
    /**
     * The size of the Exadata infrastructure's data disk group, in terabytes (TB).
     */
    public /*out*/ readonly dataStorageSizeInTbs!: pulumi.Output<number>;
    /**
     * The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     */
    public readonly databaseServerType!: pulumi.Output<string | undefined>;
    /**
     * The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
     */
    public /*out*/ readonly dbNodeStorageSizeInGbs!: pulumi.Output<number>;
    /**
     * The list of database server identifiers for the Exadata infrastructure.
     */
    public /*out*/ readonly dbServerIds!: pulumi.Output<string[]>;
    /**
     * The software version of the database servers (dom0) in the Exadata infrastructure.
     */
    public /*out*/ readonly dbServerVersion!: pulumi.Output<string>;
    /**
     * The user-friendly name for the Exadata infrastructure.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The total number of CPU cores available on the Exadata infrastructure.
     */
    public /*out*/ readonly maxCpuCount!: pulumi.Output<number>;
    /**
     * The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
     */
    public /*out*/ readonly maxDataStorageInTbs!: pulumi.Output<number>;
    /**
     * The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
     */
    public /*out*/ readonly maxDbNodeStorageSizeInGbs!: pulumi.Output<number>;
    /**
     * The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
     */
    public /*out*/ readonly maxMemoryInGbs!: pulumi.Output<number>;
    /**
     * The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
     */
    public /*out*/ readonly memorySizeInGbs!: pulumi.Output<number>;
    /**
     * The name of the OCI resource anchor for the Exadata infrastructure.
     */
    public /*out*/ readonly ociResourceAnchorName!: pulumi.Output<string>;
    /**
     * The HTTPS link to the Exadata infrastructure in OCI.
     */
    public /*out*/ readonly ociUrl!: pulumi.Output<string>;
    /**
     * The OCID of the Exadata infrastructure.
     */
    public /*out*/ readonly ocid!: pulumi.Output<string>;
    /**
     * The model name of the Exadata infrastructure.
     */
    public readonly shape!: pulumi.Output<string | undefined>;
    /**
     * The number of storage servers that are activated for the Exadata infrastructure.
     */
    public readonly storageCount!: pulumi.Output<number | undefined>;
    /**
     * The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     */
    public readonly storageServerType!: pulumi.Output<string | undefined>;
    /**
     * The software version of the storage servers on the Exadata infrastructure.
     */
    public /*out*/ readonly storageServerVersion!: pulumi.Output<string>;
    /**
     * Tags to assign to the Exadata Infrastructure.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
     */
    public /*out*/ readonly totalStorageSizeInGbs!: pulumi.Output<number>;

    /**
     * Create a CloudExadataInfrastructure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudExadataInfrastructureArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["availabilityZoneId"] = args?.availabilityZoneId;
            resourceInputs["computeCount"] = args?.computeCount;
            resourceInputs["customerContactsToSendToOci"] = args?.customerContactsToSendToOci;
            resourceInputs["databaseServerType"] = args?.databaseServerType;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["shape"] = args?.shape;
            resourceInputs["storageCount"] = args?.storageCount;
            resourceInputs["storageServerType"] = args?.storageServerType;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["activatedStorageCount"] = undefined /*out*/;
            resourceInputs["additionalStorageCount"] = undefined /*out*/;
            resourceInputs["availableStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["cloudExadataInfrastructureArn"] = undefined /*out*/;
            resourceInputs["cloudExadataInfrastructureId"] = undefined /*out*/;
            resourceInputs["computeModel"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["dbServerIds"] = undefined /*out*/;
            resourceInputs["dbServerVersion"] = undefined /*out*/;
            resourceInputs["maxCpuCount"] = undefined /*out*/;
            resourceInputs["maxDataStorageInTbs"] = undefined /*out*/;
            resourceInputs["maxDbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["maxMemoryInGbs"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["ociResourceAnchorName"] = undefined /*out*/;
            resourceInputs["ociUrl"] = undefined /*out*/;
            resourceInputs["ocid"] = undefined /*out*/;
            resourceInputs["storageServerVersion"] = undefined /*out*/;
            resourceInputs["totalStorageSizeInGbs"] = undefined /*out*/;
        } else {
            resourceInputs["activatedStorageCount"] = undefined /*out*/;
            resourceInputs["additionalStorageCount"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["availabilityZoneId"] = undefined /*out*/;
            resourceInputs["availableStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["cloudExadataInfrastructureArn"] = undefined /*out*/;
            resourceInputs["cloudExadataInfrastructureId"] = undefined /*out*/;
            resourceInputs["computeCount"] = undefined /*out*/;
            resourceInputs["computeModel"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["customerContactsToSendToOci"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["databaseServerType"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["dbServerIds"] = undefined /*out*/;
            resourceInputs["dbServerVersion"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["maxCpuCount"] = undefined /*out*/;
            resourceInputs["maxDataStorageInTbs"] = undefined /*out*/;
            resourceInputs["maxDbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["maxMemoryInGbs"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["ociResourceAnchorName"] = undefined /*out*/;
            resourceInputs["ociUrl"] = undefined /*out*/;
            resourceInputs["ocid"] = undefined /*out*/;
            resourceInputs["shape"] = undefined /*out*/;
            resourceInputs["storageCount"] = undefined /*out*/;
            resourceInputs["storageServerType"] = undefined /*out*/;
            resourceInputs["storageServerVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["totalStorageSizeInGbs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["availabilityZone", "availabilityZoneId", "computeCount", "customerContactsToSendToOci[*]", "databaseServerType", "displayName", "shape", "storageCount", "storageServerType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CloudExadataInfrastructure.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CloudExadataInfrastructure resource.
 */
export interface CloudExadataInfrastructureArgs {
    /**
     * The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The AZ ID of the AZ where the Exadata infrastructure is located.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The number of database servers for the Exadata infrastructure.
     */
    computeCount?: pulumi.Input<number>;
    /**
     * The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
     */
    customerContactsToSendToOci?: pulumi.Input<pulumi.Input<inputs.odb.CloudExadataInfrastructureCustomerContactArgs>[]>;
    /**
     * The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     */
    databaseServerType?: pulumi.Input<string>;
    /**
     * The user-friendly name for the Exadata infrastructure.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The model name of the Exadata infrastructure.
     */
    shape?: pulumi.Input<string>;
    /**
     * The number of storage servers that are activated for the Exadata infrastructure.
     */
    storageCount?: pulumi.Input<number>;
    /**
     * The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
     */
    storageServerType?: pulumi.Input<string>;
    /**
     * Tags to assign to the Exadata Infrastructure.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
