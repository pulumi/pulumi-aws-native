// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster
 */
export class CloudVmCluster extends pulumi.CustomResource {
    /**
     * Get an existing CloudVmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CloudVmCluster {
        return new CloudVmCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:odb:CloudVmCluster';

    /**
     * Returns true if the given object is an instance of CloudVmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudVmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudVmCluster.__pulumiType;
    }

    /**
     * The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
     */
    public readonly cloudExadataInfrastructureId!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the VM cluster.
     */
    public /*out*/ readonly cloudVmClusterArn!: pulumi.Output<string>;
    /**
     * The unique identifier of the VM cluster.
     */
    public /*out*/ readonly cloudVmClusterId!: pulumi.Output<string>;
    /**
     * The name of the Grid Infrastructure (GI) cluster.
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
     */
    public /*out*/ readonly computeModel!: pulumi.Output<string>;
    /**
     * The number of CPU cores enabled on the VM cluster.
     */
    public readonly cpuCoreCount!: pulumi.Output<number | undefined>;
    /**
     * The set of diagnostic collection options enabled for the VM cluster.
     */
    public readonly dataCollectionOptions!: pulumi.Output<outputs.odb.CloudVmClusterDataCollectionOptions | undefined>;
    /**
     * The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
     */
    public readonly dataStorageSizeInTbs!: pulumi.Output<number | undefined>;
    /**
     * The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
     */
    public readonly dbNodeStorageSizeInGbs!: pulumi.Output<number | undefined>;
    /**
     * The list of database servers for the VM cluster.
     */
    public readonly dbServers!: pulumi.Output<string[] | undefined>;
    /**
     * The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
     */
    public /*out*/ readonly diskRedundancy!: pulumi.Output<string>;
    /**
     * The user-friendly name for the VM cluster.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The domain of the VM cluster.
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
     */
    public readonly giVersion!: pulumi.Output<string | undefined>;
    /**
     * The host name for the VM cluster.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
     */
    public readonly isLocalBackupEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the VM cluster is configured with a sparse disk group.
     */
    public readonly isSparseDiskgroupEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Oracle license model applied to the VM cluster.
     */
    public readonly licenseModel!: pulumi.Output<enums.odb.CloudVmClusterLicenseModel | undefined>;
    /**
     * The port number configured for the listener on the VM cluster.
     */
    public /*out*/ readonly listenerPort!: pulumi.Output<number>;
    /**
     * The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
     */
    public readonly memorySizeInGbs!: pulumi.Output<number | undefined>;
    /**
     * The number of nodes in the VM cluster.
     */
    public /*out*/ readonly nodeCount!: pulumi.Output<number>;
    /**
     * The name of the OCI resource anchor for the VM cluster.
     */
    public /*out*/ readonly ociResourceAnchorName!: pulumi.Output<string>;
    /**
     * The HTTPS link to the VM cluster in OCI.
     */
    public /*out*/ readonly ociUrl!: pulumi.Output<string>;
    /**
     * The OCID of the VM cluster.
     */
    public /*out*/ readonly ocid!: pulumi.Output<string>;
    /**
     * The unique identifier of the ODB network for the VM cluster.
     */
    public readonly odbNetworkId!: pulumi.Output<string | undefined>;
    /**
     * The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
     */
    public /*out*/ readonly scanDnsName!: pulumi.Output<string>;
    /**
     * The OCID of the SCAN IP addresses that are associated with the VM cluster.
     */
    public /*out*/ readonly scanIpIds!: pulumi.Output<string[]>;
    /**
     * Property description not available.
     */
    public readonly scanListenerPortTcp!: pulumi.Output<number | undefined>;
    /**
     * The hardware model name of the Exadata infrastructure that's running the VM cluster.
     */
    public /*out*/ readonly shape!: pulumi.Output<string>;
    /**
     * The public key portion of one or more key pairs used for SSH access to the VM cluster.
     */
    public readonly sshPublicKeys!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
     */
    public /*out*/ readonly storageSizeInGbs!: pulumi.Output<number>;
    /**
     * The operating system version of the image chosen for the VM cluster.
     */
    public readonly systemVersion!: pulumi.Output<string | undefined>;
    /**
     * Tags to assign to the Vm Cluster.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The time zone of the VM cluster.
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;
    /**
     * The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
     */
    public /*out*/ readonly vipIds!: pulumi.Output<string[]>;

    /**
     * Create a CloudVmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudVmClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["cloudExadataInfrastructureId"] = args?.cloudExadataInfrastructureId;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["cpuCoreCount"] = args?.cpuCoreCount;
            resourceInputs["dataCollectionOptions"] = args?.dataCollectionOptions;
            resourceInputs["dataStorageSizeInTbs"] = args?.dataStorageSizeInTbs;
            resourceInputs["dbNodeStorageSizeInGbs"] = args?.dbNodeStorageSizeInGbs;
            resourceInputs["dbServers"] = args?.dbServers;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["giVersion"] = args?.giVersion;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["isLocalBackupEnabled"] = args?.isLocalBackupEnabled;
            resourceInputs["isSparseDiskgroupEnabled"] = args?.isSparseDiskgroupEnabled;
            resourceInputs["licenseModel"] = args?.licenseModel;
            resourceInputs["memorySizeInGbs"] = args?.memorySizeInGbs;
            resourceInputs["odbNetworkId"] = args?.odbNetworkId;
            resourceInputs["scanListenerPortTcp"] = args?.scanListenerPortTcp;
            resourceInputs["sshPublicKeys"] = args?.sshPublicKeys;
            resourceInputs["systemVersion"] = args?.systemVersion;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeZone"] = args?.timeZone;
            resourceInputs["cloudVmClusterArn"] = undefined /*out*/;
            resourceInputs["cloudVmClusterId"] = undefined /*out*/;
            resourceInputs["computeModel"] = undefined /*out*/;
            resourceInputs["diskRedundancy"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["listenerPort"] = undefined /*out*/;
            resourceInputs["nodeCount"] = undefined /*out*/;
            resourceInputs["ociResourceAnchorName"] = undefined /*out*/;
            resourceInputs["ociUrl"] = undefined /*out*/;
            resourceInputs["ocid"] = undefined /*out*/;
            resourceInputs["scanDnsName"] = undefined /*out*/;
            resourceInputs["scanIpIds"] = undefined /*out*/;
            resourceInputs["shape"] = undefined /*out*/;
            resourceInputs["storageSizeInGbs"] = undefined /*out*/;
            resourceInputs["vipIds"] = undefined /*out*/;
        } else {
            resourceInputs["cloudExadataInfrastructureId"] = undefined /*out*/;
            resourceInputs["cloudVmClusterArn"] = undefined /*out*/;
            resourceInputs["cloudVmClusterId"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["computeModel"] = undefined /*out*/;
            resourceInputs["cpuCoreCount"] = undefined /*out*/;
            resourceInputs["dataCollectionOptions"] = undefined /*out*/;
            resourceInputs["dataStorageSizeInTbs"] = undefined /*out*/;
            resourceInputs["dbNodeStorageSizeInGbs"] = undefined /*out*/;
            resourceInputs["dbServers"] = undefined /*out*/;
            resourceInputs["diskRedundancy"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["giVersion"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["isLocalBackupEnabled"] = undefined /*out*/;
            resourceInputs["isSparseDiskgroupEnabled"] = undefined /*out*/;
            resourceInputs["licenseModel"] = undefined /*out*/;
            resourceInputs["listenerPort"] = undefined /*out*/;
            resourceInputs["memorySizeInGbs"] = undefined /*out*/;
            resourceInputs["nodeCount"] = undefined /*out*/;
            resourceInputs["ociResourceAnchorName"] = undefined /*out*/;
            resourceInputs["ociUrl"] = undefined /*out*/;
            resourceInputs["ocid"] = undefined /*out*/;
            resourceInputs["odbNetworkId"] = undefined /*out*/;
            resourceInputs["scanDnsName"] = undefined /*out*/;
            resourceInputs["scanIpIds"] = undefined /*out*/;
            resourceInputs["scanListenerPortTcp"] = undefined /*out*/;
            resourceInputs["shape"] = undefined /*out*/;
            resourceInputs["sshPublicKeys"] = undefined /*out*/;
            resourceInputs["storageSizeInGbs"] = undefined /*out*/;
            resourceInputs["systemVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["vipIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["cloudExadataInfrastructureId", "clusterName", "cpuCoreCount", "dataCollectionOptions", "dataStorageSizeInTbs", "dbNodeStorageSizeInGbs", "dbServers[*]", "displayName", "giVersion", "hostname", "isLocalBackupEnabled", "isSparseDiskgroupEnabled", "licenseModel", "memorySizeInGbs", "odbNetworkId", "scanListenerPortTcp", "sshPublicKeys[*]", "systemVersion", "timeZone"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CloudVmCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CloudVmCluster resource.
 */
export interface CloudVmClusterArgs {
    /**
     * The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
     */
    cloudExadataInfrastructureId?: pulumi.Input<string>;
    /**
     * The name of the Grid Infrastructure (GI) cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The number of CPU cores enabled on the VM cluster.
     */
    cpuCoreCount?: pulumi.Input<number>;
    /**
     * The set of diagnostic collection options enabled for the VM cluster.
     */
    dataCollectionOptions?: pulumi.Input<inputs.odb.CloudVmClusterDataCollectionOptionsArgs>;
    /**
     * The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
     */
    dataStorageSizeInTbs?: pulumi.Input<number>;
    /**
     * The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
     */
    dbNodeStorageSizeInGbs?: pulumi.Input<number>;
    /**
     * The list of database servers for the VM cluster.
     */
    dbServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The user-friendly name for the VM cluster.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
     */
    giVersion?: pulumi.Input<string>;
    /**
     * The host name for the VM cluster.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
     */
    isLocalBackupEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the VM cluster is configured with a sparse disk group.
     */
    isSparseDiskgroupEnabled?: pulumi.Input<boolean>;
    /**
     * The Oracle license model applied to the VM cluster.
     */
    licenseModel?: pulumi.Input<enums.odb.CloudVmClusterLicenseModel>;
    /**
     * The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
     */
    memorySizeInGbs?: pulumi.Input<number>;
    /**
     * The unique identifier of the ODB network for the VM cluster.
     */
    odbNetworkId?: pulumi.Input<string>;
    /**
     * Property description not available.
     */
    scanListenerPortTcp?: pulumi.Input<number>;
    /**
     * The public key portion of one or more key pairs used for SSH access to the VM cluster.
     */
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The operating system version of the image chosen for the VM cluster.
     */
    systemVersion?: pulumi.Input<string>;
    /**
     * Tags to assign to the Vm Cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The time zone of the VM cluster.
     */
    timeZone?: pulumi.Input<string>;
}
