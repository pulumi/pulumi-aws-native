// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
 */
export class WebACL extends pulumi.CustomResource {
    /**
     * Get an existing WebACL resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WebACL {
        return new WebACL(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:wafv2:WebACL';

    /**
     * Returns true if the given object is an instance of WebACL.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebACL {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebACL.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly capacity!: pulumi.Output<number>;
    public readonly customResponseBodies!: pulumi.Output<outputs.wafv2.WebACLCustomResponseBodies | undefined>;
    public readonly defaultAction!: pulumi.Output<outputs.wafv2.WebACLDefaultAction>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly labelNamespace!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Collection of Rules.
     */
    public readonly rules!: pulumi.Output<outputs.wafv2.WebACLRule[] | undefined>;
    public readonly scope!: pulumi.Output<enums.wafv2.WebACLScope>;
    public readonly tags!: pulumi.Output<outputs.wafv2.WebACLTag[] | undefined>;
    public readonly visibilityConfig!: pulumi.Output<outputs.wafv2.WebACLVisibilityConfig>;

    /**
     * Create a WebACL resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebACLArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.defaultAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAction'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.visibilityConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'visibilityConfig'");
            }
            inputs["customResponseBodies"] = args ? args.customResponseBodies : undefined;
            inputs["defaultAction"] = args ? args.defaultAction : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rules"] = args ? args.rules : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["visibilityConfig"] = args ? args.visibilityConfig : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["capacity"] = undefined /*out*/;
            inputs["labelNamespace"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["capacity"] = undefined /*out*/;
            inputs["customResponseBodies"] = undefined /*out*/;
            inputs["defaultAction"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["labelNamespace"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["rules"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["visibilityConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(WebACL.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a WebACL resource.
 */
export interface WebACLArgs {
    customResponseBodies?: pulumi.Input<inputs.wafv2.WebACLCustomResponseBodiesArgs>;
    defaultAction: pulumi.Input<inputs.wafv2.WebACLDefaultActionArgs>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Collection of Rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.wafv2.WebACLRuleArgs>[]>;
    scope: pulumi.Input<enums.wafv2.WebACLScope>;
    tags?: pulumi.Input<pulumi.Input<inputs.wafv2.WebACLTagArgs>[]>;
    visibilityConfig: pulumi.Input<inputs.wafv2.WebACLVisibilityConfigArgs>;
}
