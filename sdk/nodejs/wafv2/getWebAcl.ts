// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
 */
export function getWebAcl(args: GetWebAclArgs, opts?: pulumi.InvokeOptions): Promise<GetWebAclResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:wafv2:getWebAcl", {
        "id": args.id,
        "name": args.name,
        "scope": args.scope,
    }, opts);
}

export interface GetWebAclArgs {
    id: string;
    name: string;
    scope: enums.wafv2.WebAclScope;
}

export interface GetWebAclResult {
    readonly arn?: string;
    readonly associationConfig?: outputs.wafv2.WebAclAssociationConfig;
    readonly capacity?: number;
    readonly captchaConfig?: outputs.wafv2.WebAclCaptchaConfig;
    readonly challengeConfig?: outputs.wafv2.WebAclChallengeConfig;
    readonly customResponseBodies?: outputs.wafv2.WebAclCustomResponseBodies;
    readonly defaultAction?: outputs.wafv2.WebAclDefaultAction;
    readonly description?: string;
    readonly id?: string;
    readonly labelNamespace?: string;
    /**
     * Collection of Rules.
     */
    readonly rules?: outputs.wafv2.WebAclRule[];
    readonly tags?: outputs.wafv2.WebAclTag[];
    readonly tokenDomains?: string[];
    readonly visibilityConfig?: outputs.wafv2.WebAclVisibilityConfig;
}
/**
 * Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
 */
export function getWebAclOutput(args: GetWebAclOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWebAclResult> {
    return pulumi.output(args).apply((a: any) => getWebAcl(a, opts))
}

export interface GetWebAclOutputArgs {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    scope: pulumi.Input<enums.wafv2.WebAclScope>;
}
