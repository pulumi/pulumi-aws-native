// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A segment definition resource of Amazon Connect Customer Profiles
 */
export class SegmentDefinition extends pulumi.CustomResource {
    /**
     * Get an existing SegmentDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SegmentDefinition {
        return new SegmentDefinition(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:customerprofiles:SegmentDefinition';

    /**
     * Returns true if the given object is an instance of SegmentDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SegmentDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SegmentDefinition.__pulumiType;
    }

    /**
     * The time of this segment definition got created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the segment definition.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the segment definition.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The unique name of the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the segment definition.
     */
    public /*out*/ readonly segmentDefinitionArn!: pulumi.Output<string>;
    /**
     * The unique name of the segment definition.
     */
    public readonly segmentDefinitionName!: pulumi.Output<string>;
    /**
     * An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
     */
    public readonly segmentGroups!: pulumi.Output<outputs.customerprofiles.SegmentDefinitionSegmentGroup>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a SegmentDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SegmentDefinitionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.domainName === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if (args?.segmentGroups === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentGroups'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["segmentDefinitionName"] = args?.segmentDefinitionName;
            resourceInputs["segmentGroups"] = args?.segmentGroups;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["segmentDefinitionArn"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["segmentDefinitionArn"] = undefined /*out*/;
            resourceInputs["segmentDefinitionName"] = undefined /*out*/;
            resourceInputs["segmentGroups"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["displayName", "domainName", "segmentDefinitionName", "segmentGroups"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SegmentDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SegmentDefinition resource.
 */
export interface SegmentDefinitionArgs {
    /**
     * The description of the segment definition.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the segment definition.
     */
    displayName: pulumi.Input<string>;
    /**
     * The unique name of the domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * The unique name of the segment definition.
     */
    segmentDefinitionName?: pulumi.Input<string>;
    /**
     * An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.
     */
    segmentGroups: pulumi.Input<inputs.customerprofiles.SegmentDefinitionSegmentGroupArgs>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
