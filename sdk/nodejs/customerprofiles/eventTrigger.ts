// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An event trigger resource of Amazon Connect Customer Profiles
 */
export class EventTrigger extends pulumi.CustomResource {
    /**
     * Get an existing EventTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventTrigger {
        return new EventTrigger(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:customerprofiles:EventTrigger';

    /**
     * Returns true if the given object is an instance of EventTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventTrigger.__pulumiType;
    }

    /**
     * The timestamp of when the event trigger was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the event trigger.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The unique name of the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * A list of conditions that determine when an event should trigger the destination.
     */
    public readonly eventTriggerConditions!: pulumi.Output<outputs.customerprofiles.EventTriggerCondition[]>;
    /**
     * Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
     */
    public readonly eventTriggerLimits!: pulumi.Output<outputs.customerprofiles.EventTriggerLimits | undefined>;
    /**
     * The unique name of the event trigger.
     */
    public readonly eventTriggerName!: pulumi.Output<string>;
    /**
     * The timestamp of when the event trigger was most recently updated.
     */
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    /**
     * The unique name of the object type.
     */
    public readonly objectTypeName!: pulumi.Output<string>;
    /**
     * The destination is triggered only for profiles that meet the criteria of a segment definition.
     */
    public readonly segmentFilter!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a EventTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventTriggerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.eventTriggerConditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTriggerConditions'");
            }
            if ((!args || args.objectTypeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectTypeName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["eventTriggerConditions"] = args ? args.eventTriggerConditions : undefined;
            resourceInputs["eventTriggerLimits"] = args ? args.eventTriggerLimits : undefined;
            resourceInputs["eventTriggerName"] = args ? args.eventTriggerName : undefined;
            resourceInputs["objectTypeName"] = args ? args.objectTypeName : undefined;
            resourceInputs["segmentFilter"] = args ? args.segmentFilter : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["eventTriggerConditions"] = undefined /*out*/;
            resourceInputs["eventTriggerLimits"] = undefined /*out*/;
            resourceInputs["eventTriggerName"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["objectTypeName"] = undefined /*out*/;
            resourceInputs["segmentFilter"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainName", "eventTriggerName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(EventTrigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventTrigger resource.
 */
export interface EventTriggerArgs {
    /**
     * The description of the event trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique name of the domain.
     */
    domainName: pulumi.Input<string>;
    /**
     * A list of conditions that determine when an event should trigger the destination.
     */
    eventTriggerConditions: pulumi.Input<pulumi.Input<inputs.customerprofiles.EventTriggerConditionArgs>[]>;
    /**
     * Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
     */
    eventTriggerLimits?: pulumi.Input<inputs.customerprofiles.EventTriggerLimitsArgs>;
    /**
     * The unique name of the event trigger.
     */
    eventTriggerName?: pulumi.Input<string>;
    /**
     * The unique name of the object type.
     */
    objectTypeName: pulumi.Input<string>;
    /**
     * The destination is triggered only for profiles that meet the criteria of a segment definition.
     */
    segmentFilter?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
