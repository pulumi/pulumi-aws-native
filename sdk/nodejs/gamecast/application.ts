// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::GameCast::Application Resource Type
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:gamecast:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
     * The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
     */
    public readonly applicationSourceUri!: pulumi.Output<string | undefined>;
    /**
     * ARN of the resource.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Descriptive label for the resource, not a unique ID.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Executable path is a relative path to the game launcher executable.
     */
    public readonly executablePath!: pulumi.Output<string | undefined>;
    /**
     * A list of save file, registry key or log paths that are absolute paths that store game save files when the games
     * are running on a Windows environment.
     */
    public readonly logLocations!: pulumi.Output<string[] | undefined>;
    public readonly runtimeEnvironment!: pulumi.Output<outputs.gamecast.ApplicationRuntimeEnvironment | undefined>;
    public readonly saveConfiguration!: pulumi.Output<outputs.gamecast.ApplicationSaveConfiguration | undefined>;
    /**
     * SaveKey is used as key to manage save files, meaning that different applications with the
     * same SaveKey can share game save files generated by the game itself.
     */
    public readonly saveKey!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.gamecast.ApplicationTags | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["applicationSourceUri"] = args ? args.applicationSourceUri : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executablePath"] = args ? args.executablePath : undefined;
            resourceInputs["logLocations"] = args ? args.logLocations : undefined;
            resourceInputs["runtimeEnvironment"] = args ? args.runtimeEnvironment : undefined;
            resourceInputs["saveConfiguration"] = args ? args.saveConfiguration : undefined;
            resourceInputs["saveKey"] = args ? args.saveKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["applicationSourceUri"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["executablePath"] = undefined /*out*/;
            resourceInputs["logLocations"] = undefined /*out*/;
            resourceInputs["runtimeEnvironment"] = undefined /*out*/;
            resourceInputs["saveConfiguration"] = undefined /*out*/;
            resourceInputs["saveKey"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * ApplicationSourceUri points to a S3 Uri to replicate game files from customer S3 bucket into Motif internal S3 bucket.
     * The uri points to a S3 prefix that could contain many objects. Motif will attempt to copy all the S3 objects under that prefix.
     */
    applicationSourceUri?: pulumi.Input<string>;
    /**
     * Descriptive label for the resource, not a unique ID.
     */
    description?: pulumi.Input<string>;
    /**
     * Executable path is a relative path to the game launcher executable.
     */
    executablePath?: pulumi.Input<string>;
    /**
     * A list of save file, registry key or log paths that are absolute paths that store game save files when the games
     * are running on a Windows environment.
     */
    logLocations?: pulumi.Input<pulumi.Input<string>[]>;
    runtimeEnvironment?: pulumi.Input<inputs.gamecast.ApplicationRuntimeEnvironmentArgs>;
    saveConfiguration?: pulumi.Input<inputs.gamecast.ApplicationSaveConfigurationArgs>;
    /**
     * SaveKey is used as key to manage save files, meaning that different applications with the
     * same SaveKey can share game save files generated by the game itself.
     */
    saveKey?: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.gamecast.ApplicationTagsArgs>;
}
