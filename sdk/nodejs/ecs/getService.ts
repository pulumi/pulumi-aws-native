// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::ECS::Service`` resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.
 *   The stack update fails if you change any properties that require replacement and at least one ECS Service Connect ``ServiceConnectConfiguration`` property is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceConnectService`` must have a name that is unique in the namespace.
 *    Starting April 15, 2023, AWS; will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, ECS, or EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ecs:getService", {
        "cluster": args.cluster,
        "serviceArn": args.serviceArn,
    }, opts);
}

export interface GetServiceArgs {
    /**
     * The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
     */
    cluster: string;
    /**
     * Not currently supported in AWS CloudFormation .
     */
    serviceArn: string;
}

export interface GetServiceResult {
    /**
     * Indicates whether to use Availability Zone rebalancing for the service.
     *  For more information, see [Balancing an Amazon ECS service across Availability Zones](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    readonly availabilityZoneRebalancing?: enums.ecs.ServiceAvailabilityZoneRebalancing;
    /**
     * The capacity provider strategy to use for the service.
     *  If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
     *  A capacity provider strategy can contain a maximum of 20 capacity providers.
     *   To remove this property from your service resource, specify an empty ``CapacityProviderStrategyItem`` array.
     */
    readonly capacityProviderStrategy?: outputs.ecs.ServiceCapacityProviderStrategyItem[];
    /**
     * Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
     */
    readonly deploymentConfiguration?: outputs.ecs.ServiceDeploymentConfiguration;
    /**
     * The number of instantiations of the specified task definition to place and keep running in your service.
     *  For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
     *  For existing services, if a desired count is not specified, it is omitted from the operation.
     */
    readonly desiredCount?: number;
    /**
     * Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
     *  When you use Amazon ECS managed tags, you need to set the ``propagateTags`` request parameter.
     */
    readonly enableEcsManagedTags?: boolean;
    /**
     * Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.
     */
    readonly enableExecuteCommand?: boolean;
    /**
     * The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you don't specify a health check grace period value, the default value of ``0`` is used. If you don't use any of the health checks, then ``healthCheckGracePeriodSeconds`` is unused.
     *  If your service's tasks take a while to start and respond to health checks, you can specify a health check grace period of up to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS service scheduler ignores health check status. This grace period can prevent the service scheduler from marking tasks as unhealthy and stopping them before they have time to come up.
     */
    readonly healthCheckGracePeriodSeconds?: number;
    /**
     * A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
     *   To remove this property from your service resource, specify an empty ``LoadBalancer`` array.
     */
    readonly loadBalancers?: outputs.ecs.ServiceLoadBalancer[];
    /**
     * The name of the Amazon ECS service, such as `sample-webapp` .
     */
    readonly name?: string;
    /**
     * The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    readonly networkConfiguration?: outputs.ecs.ServiceNetworkConfiguration;
    /**
     * An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
     *   To remove this property from your service resource, specify an empty ``PlacementConstraint`` array.
     */
    readonly placementConstraints?: outputs.ecs.ServicePlacementConstraint[];
    /**
     * The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
     *   To remove this property from your service resource, specify an empty ``PlacementStrategy`` array.
     */
    readonly placementStrategies?: outputs.ecs.ServicePlacementStrategy[];
    /**
     * The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    readonly platformVersion?: string;
    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
     *  You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
     *  The default is ``NONE``.
     */
    readonly propagateTags?: enums.ecs.ServicePropagateTags;
    /**
     * Not currently supported in AWS CloudFormation .
     */
    readonly serviceArn?: string;
    /**
     * The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
     *   Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
     *    To remove this property from your service resource, specify an empty ``ServiceRegistry`` array.
     */
    readonly serviceRegistries?: outputs.ecs.ServiceRegistry[];
    /**
     * The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
     *  The following basic restrictions apply to tags:
     *   +  Maximum number of tags per resource - 50
     *   +  For each resource, each tag key must be unique, and each tag key can have only one value.
     *   +  Maximum key length - 128 Unicode characters in UTF-8
     *   +  Maximum value length - 256 Unicode characters in UTF-8
     *   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
     *   +  Tag keys and values are case-sensitive.
     *   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    readonly tags?: outputs.Tag[];
    /**
     * The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used.
     *  A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
     *  For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
     */
    readonly taskDefinition?: string;
    /**
     * The VPC Lattice configuration for the service being created.
     */
    readonly vpcLatticeConfigurations?: outputs.ecs.ServiceVpcLatticeConfiguration[];
}
/**
 * The ``AWS::ECS::Service`` resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.
 *   The stack update fails if you change any properties that require replacement and at least one ECS Service Connect ``ServiceConnectConfiguration`` property is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceConnectService`` must have a name that is unique in the namespace.
 *    Starting April 15, 2023, AWS; will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, ECS, or EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
 */
export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:ecs:getService", {
        "cluster": args.cluster,
        "serviceArn": args.serviceArn,
    }, opts);
}

export interface GetServiceOutputArgs {
    /**
     * The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
     */
    cluster: pulumi.Input<string>;
    /**
     * Not currently supported in AWS CloudFormation .
     */
    serviceArn: pulumi.Input<string>;
}
