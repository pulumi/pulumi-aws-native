// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::ECS::CapacityProvider.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myCapacityProvider = new aws_native.ecs.CapacityProvider("myCapacityProvider", {
 *     autoScalingGroupProvider: {
 *         autoScalingGroupArn: "arn:aws:autoscaling:us-west-2:123456789012:autoScalingGroup:a1b2c3d4-5678-90ab-cdef-EXAMPLE11111:autoScalingGroupName/MyAutoScalingGroup",
 *         managedScaling: {
 *             maximumScalingStepSize: 10,
 *             minimumScalingStepSize: 1,
 *             status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *             targetCapacity: 100,
 *         },
 *         managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Enabled,
 *     },
 *     tags: [{
 *         key: "environment",
 *         value: "production",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myCapacityProvider = new aws_native.ecs.CapacityProvider("myCapacityProvider", {
 *     autoScalingGroupProvider: {
 *         autoScalingGroupArn: "arn:aws:autoscaling:us-west-2:123456789012:autoScalingGroup:a1b2c3d4-5678-90ab-cdef-EXAMPLE11111:autoScalingGroupName/MyAutoScalingGroup",
 *         managedScaling: {
 *             maximumScalingStepSize: 10,
 *             minimumScalingStepSize: 1,
 *             status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *             targetCapacity: 100,
 *         },
 *         managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Enabled,
 *     },
 *     tags: [{
 *         key: "environment",
 *         value: "production",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const autoScalingGroupArn1 = config.require("autoScalingGroupArn1");
 * const autoScalingGroupArn2 = config.require("autoScalingGroupArn2");
 * const capacityProvider1 = new aws_native.ecs.CapacityProvider("capacityProvider1", {autoScalingGroupProvider: {
 *     autoScalingGroupArn: autoScalingGroupArn1,
 *     managedScaling: {
 *         status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *     },
 *     managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Disabled,
 * }});
 * const capacityProvider2 = new aws_native.ecs.CapacityProvider("capacityProvider2", {autoScalingGroupProvider: {
 *     autoScalingGroupArn: autoScalingGroupArn2,
 *     managedScaling: {
 *         status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *     },
 *     managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Disabled,
 * }});
 * const cluster = new aws_native.ecs.Cluster("cluster", {});
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: cluster.id,
 *     capacityProviders: [
 *         capacityProvider1.id,
 *         capacityProvider2.id,
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 6,
 *             capacityProvider: capacityProvider1.id,
 *         },
 *         {
 *             base: 0,
 *             weight: 10,
 *             capacityProvider: capacityProvider2.id,
 *         },
 *     ],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const autoScalingGroupArn1 = config.require("autoScalingGroupArn1");
 * const autoScalingGroupArn2 = config.require("autoScalingGroupArn2");
 * const capacityProvider1 = new aws_native.ecs.CapacityProvider("capacityProvider1", {autoScalingGroupProvider: {
 *     autoScalingGroupArn: autoScalingGroupArn1,
 *     managedScaling: {
 *         status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *     },
 *     managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Disabled,
 * }});
 * const capacityProvider2 = new aws_native.ecs.CapacityProvider("capacityProvider2", {autoScalingGroupProvider: {
 *     autoScalingGroupArn: autoScalingGroupArn2,
 *     managedScaling: {
 *         status: aws_native.ecs.CapacityProviderManagedScalingStatus.Enabled,
 *     },
 *     managedTerminationProtection: aws_native.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection.Disabled,
 * }});
 * const cluster = new aws_native.ecs.Cluster("cluster", {});
 * const clusterCPAssociation = new aws_native.ecs.ClusterCapacityProviderAssociations("clusterCPAssociation", {
 *     cluster: cluster.id,
 *     capacityProviders: [
 *         capacityProvider1.id,
 *         capacityProvider2.id,
 *     ],
 *     defaultCapacityProviderStrategy: [
 *         {
 *             base: 2,
 *             weight: 6,
 *             capacityProvider: capacityProvider1.id,
 *         },
 *         {
 *             base: 0,
 *             weight: 10,
 *             capacityProvider: capacityProvider2.id,
 *         },
 *     ],
 * });
 *
 * ```
 */
export class CapacityProvider extends pulumi.CustomResource {
    /**
     * Get an existing CapacityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CapacityProvider {
        return new CapacityProvider(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ecs:CapacityProvider';

    /**
     * Returns true if the given object is an instance of CapacityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CapacityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityProvider.__pulumiType;
    }

    /**
     * The Auto Scaling group settings for the capacity provider.
     */
    public readonly autoScalingGroupProvider!: pulumi.Output<outputs.ecs.CapacityProviderAutoScalingGroupProvider | undefined>;
    /**
     * The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
     *
     * The following basic restrictions apply to tags:
     *
     * - Maximum number of tags per resource - 50
     * - For each resource, each tag key must be unique, and each tag key can have only one value.
     * - Maximum key length - 128 Unicode characters in UTF-8
     * - Maximum value length - 256 Unicode characters in UTF-8
     * - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
     * - Tag keys and values are case-sensitive.
     * - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a CapacityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CapacityProviderArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["autoScalingGroupProvider"] = args?.autoScalingGroupProvider;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
        } else {
            resourceInputs["autoScalingGroupProvider"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["autoScalingGroupProvider.autoScalingGroupArn", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CapacityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CapacityProvider resource.
 */
export interface CapacityProviderArgs {
    /**
     * The Auto Scaling group settings for the capacity provider.
     */
    autoScalingGroupProvider?: pulumi.Input<inputs.ecs.CapacityProviderAutoScalingGroupProviderArgs>;
    /**
     * The name of the capacity provider. If a name is specified, it cannot start with `aws` , `ecs` , or `fargate` . If no name is specified, a default name in the `CFNStackName-CFNResourceName-RandomString` format is used.
     */
    name?: pulumi.Input<string>;
    /**
     * The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both.
     *
     * The following basic restrictions apply to tags:
     *
     * - Maximum number of tags per resource - 50
     * - For each resource, each tag key must be unique, and each tag key can have only one value.
     * - Maximum key length - 128 Unicode characters in UTF-8
     * - Maximum value length - 256 Unicode characters in UTF-8
     * - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
     * - Tag keys and values are case-sensitive.
     * - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
