// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Create an Elastic Container Service (ECS) cluster.
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:ecs:getCluster", {
        "clusterName": args.clusterName,
    }, opts);
}

export interface GetClusterArgs {
    /**
     * A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.
     */
    clusterName: string;
}

export interface GetClusterResult {
    /**
     * The Amazon Resource Name (ARN) of the Amazon ECS cluster, such as arn:aws:ecs:us-east-2:123456789012:cluster/MyECSCluster.
     */
    readonly arn?: string;
    readonly capacityProviders?: string[];
    readonly clusterSettings?: outputs.ecs.ClusterSettings[];
    readonly configuration?: outputs.ecs.ClusterConfiguration;
    readonly defaultCapacityProviderStrategy?: outputs.ecs.ClusterCapacityProviderStrategyItem[];
    readonly tags?: outputs.ecs.ClusterTag[];
}

export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply(a => getCluster(a, opts))
}

export interface GetClusterOutputArgs {
    /**
     * A user-generated string that you use to identify your cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID for the name.
     */
    clusterName: pulumi.Input<string>;
}
