// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::ECS::Service
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ecs:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    public readonly capacityProviderStrategy!: pulumi.Output<outputs.ecs.ServiceCapacityProviderStrategyItem[] | undefined>;
    public readonly cluster!: pulumi.Output<string | undefined>;
    public readonly deploymentConfiguration!: pulumi.Output<outputs.ecs.ServiceDeploymentConfiguration | undefined>;
    public readonly deploymentController!: pulumi.Output<outputs.ecs.ServiceDeploymentController | undefined>;
    public readonly desiredCount!: pulumi.Output<number | undefined>;
    public readonly enableECSManagedTags!: pulumi.Output<boolean | undefined>;
    public readonly enableExecuteCommand!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckGracePeriodSeconds!: pulumi.Output<number | undefined>;
    public readonly launchType!: pulumi.Output<enums.ecs.ServiceLaunchType | undefined>;
    public readonly loadBalancers!: pulumi.Output<outputs.ecs.ServiceLoadBalancer[] | undefined>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly networkConfiguration!: pulumi.Output<outputs.ecs.ServiceNetworkConfiguration | undefined>;
    public readonly placementConstraints!: pulumi.Output<outputs.ecs.ServicePlacementConstraint[] | undefined>;
    public readonly placementStrategies!: pulumi.Output<outputs.ecs.ServicePlacementStrategy[] | undefined>;
    public readonly platformVersion!: pulumi.Output<string | undefined>;
    public readonly propagateTags!: pulumi.Output<enums.ecs.ServicePropagateTags | undefined>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly schedulingStrategy!: pulumi.Output<enums.ecs.ServiceSchedulingStrategy | undefined>;
    public /*out*/ readonly serviceArn!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string | undefined>;
    public readonly serviceRegistries!: pulumi.Output<outputs.ecs.ServiceServiceRegistry[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.ecs.ServiceTag[] | undefined>;
    public readonly taskDefinition!: pulumi.Output<string | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["capacityProviderStrategy"] = args ? args.capacityProviderStrategy : undefined;
            inputs["cluster"] = args ? args.cluster : undefined;
            inputs["deploymentConfiguration"] = args ? args.deploymentConfiguration : undefined;
            inputs["deploymentController"] = args ? args.deploymentController : undefined;
            inputs["desiredCount"] = args ? args.desiredCount : undefined;
            inputs["enableECSManagedTags"] = args ? args.enableECSManagedTags : undefined;
            inputs["enableExecuteCommand"] = args ? args.enableExecuteCommand : undefined;
            inputs["healthCheckGracePeriodSeconds"] = args ? args.healthCheckGracePeriodSeconds : undefined;
            inputs["launchType"] = args ? args.launchType : undefined;
            inputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            inputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            inputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            inputs["placementStrategies"] = args ? args.placementStrategies : undefined;
            inputs["platformVersion"] = args ? args.platformVersion : undefined;
            inputs["propagateTags"] = args ? args.propagateTags : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["schedulingStrategy"] = args ? args.schedulingStrategy : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["serviceRegistries"] = args ? args.serviceRegistries : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["taskDefinition"] = args ? args.taskDefinition : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["serviceArn"] = undefined /*out*/;
        } else {
            inputs["capacityProviderStrategy"] = undefined /*out*/;
            inputs["cluster"] = undefined /*out*/;
            inputs["deploymentConfiguration"] = undefined /*out*/;
            inputs["deploymentController"] = undefined /*out*/;
            inputs["desiredCount"] = undefined /*out*/;
            inputs["enableECSManagedTags"] = undefined /*out*/;
            inputs["enableExecuteCommand"] = undefined /*out*/;
            inputs["healthCheckGracePeriodSeconds"] = undefined /*out*/;
            inputs["launchType"] = undefined /*out*/;
            inputs["loadBalancers"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["networkConfiguration"] = undefined /*out*/;
            inputs["placementConstraints"] = undefined /*out*/;
            inputs["placementStrategies"] = undefined /*out*/;
            inputs["platformVersion"] = undefined /*out*/;
            inputs["propagateTags"] = undefined /*out*/;
            inputs["role"] = undefined /*out*/;
            inputs["schedulingStrategy"] = undefined /*out*/;
            inputs["serviceArn"] = undefined /*out*/;
            inputs["serviceName"] = undefined /*out*/;
            inputs["serviceRegistries"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["taskDefinition"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    capacityProviderStrategy?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceCapacityProviderStrategyItemArgs>[]>;
    cluster?: pulumi.Input<string>;
    deploymentConfiguration?: pulumi.Input<inputs.ecs.ServiceDeploymentConfigurationArgs>;
    deploymentController?: pulumi.Input<inputs.ecs.ServiceDeploymentControllerArgs>;
    desiredCount?: pulumi.Input<number>;
    enableECSManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    launchType?: pulumi.Input<enums.ecs.ServiceLaunchType>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceLoadBalancerArgs>[]>;
    networkConfiguration?: pulumi.Input<inputs.ecs.ServiceNetworkConfigurationArgs>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.ServicePlacementConstraintArgs>[]>;
    placementStrategies?: pulumi.Input<pulumi.Input<inputs.ecs.ServicePlacementStrategyArgs>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<enums.ecs.ServicePropagateTags>;
    role?: pulumi.Input<string>;
    schedulingStrategy?: pulumi.Input<enums.ecs.ServiceSchedulingStrategy>;
    serviceName?: pulumi.Input<string>;
    serviceRegistries?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceServiceRegistryArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.ServiceTagArgs>[]>;
    taskDefinition?: pulumi.Input<string>;
}
