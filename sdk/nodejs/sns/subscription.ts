// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SNS::Subscription
 */
export class Subscription extends pulumi.CustomResource {
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Subscription {
        return new Subscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sns:Subscription';

    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }

    /**
     * Arn of the subscription
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    public readonly deliveryPolicy!: pulumi.Output<any | undefined>;
    /**
     * The subscription's endpoint. The endpoint value depends on the protocol that you specify. 
     */
    public readonly endpoint!: pulumi.Output<string | undefined>;
    /**
     * The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    public readonly filterPolicy!: pulumi.Output<any | undefined>;
    /**
     * This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
     */
    public readonly filterPolicyScope!: pulumi.Output<string | undefined>;
    /**
     * The subscription's protocol.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
     */
    public readonly rawMessageDelivery!: pulumi.Output<boolean | undefined>;
    /**
     * When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    public readonly redrivePolicy!: pulumi.Output<any | undefined>;
    /**
     * For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    public readonly replayPolicy!: pulumi.Output<any | undefined>;
    /**
     * This property applies only to Amazon Data Firehose delivery stream subscriptions.
     */
    public readonly subscriptionRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the topic to subscribe to.
     */
    public readonly topicArn!: pulumi.Output<string>;

    /**
     * Create a Subscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.topicArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicArn'");
            }
            resourceInputs["deliveryPolicy"] = args ? args.deliveryPolicy : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["filterPolicy"] = args ? args.filterPolicy : undefined;
            resourceInputs["filterPolicyScope"] = args ? args.filterPolicyScope : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["rawMessageDelivery"] = args ? args.rawMessageDelivery : undefined;
            resourceInputs["redrivePolicy"] = args ? args.redrivePolicy : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replayPolicy"] = args ? args.replayPolicy : undefined;
            resourceInputs["subscriptionRoleArn"] = args ? args.subscriptionRoleArn : undefined;
            resourceInputs["topicArn"] = args ? args.topicArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["deliveryPolicy"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["filterPolicy"] = undefined /*out*/;
            resourceInputs["filterPolicyScope"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["rawMessageDelivery"] = undefined /*out*/;
            resourceInputs["redrivePolicy"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["replayPolicy"] = undefined /*out*/;
            resourceInputs["subscriptionRoleArn"] = undefined /*out*/;
            resourceInputs["topicArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["endpoint", "protocol", "topicArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Subscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Subscription resource.
 */
export interface SubscriptionArgs {
    /**
     * The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    deliveryPolicy?: any;
    /**
     * The subscription's endpoint. The endpoint value depends on the protocol that you specify. 
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    filterPolicy?: any;
    /**
     * This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
     */
    filterPolicyScope?: pulumi.Input<string>;
    /**
     * The subscription's protocol.
     */
    protocol: pulumi.Input<string>;
    /**
     * When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
     */
    rawMessageDelivery?: pulumi.Input<boolean>;
    /**
     * When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    redrivePolicy?: any;
    /**
     * For cross-region subscriptions, the region in which the topic resides.If no region is specified, AWS CloudFormation uses the region of the caller as the default.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
     */
    replayPolicy?: any;
    /**
     * This property applies only to Amazon Data Firehose delivery stream subscriptions.
     */
    subscriptionRoleArn?: pulumi.Input<string>;
    /**
     * The ARN of the topic to subscribe to.
     */
    topicArn: pulumi.Input<string>;
}
