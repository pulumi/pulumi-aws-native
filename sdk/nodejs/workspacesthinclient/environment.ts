// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource type definition for AWS::WorkSpacesThinClient::Environment.
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:workspacesthinclient:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    /**
     * Activation code for devices associated with environment.
     */
    public /*out*/ readonly activationCode!: pulumi.Output<string>;
    /**
     * The environment ARN.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The timestamp in unix epoch format when environment was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of the software set to apply.
     */
    public readonly desiredSoftwareSetId!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
     */
    public readonly desktopArn!: pulumi.Output<string>;
    /**
     * The URL for the identity provider login (only for environments that use AppStream 2.0).
     */
    public readonly desktopEndpoint!: pulumi.Output<string | undefined>;
    /**
     * The type of VDI.
     */
    public /*out*/ readonly desktopType!: pulumi.Output<enums.workspacesthinclient.EnvironmentDesktopType>;
    /**
     * The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
     */
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    /**
     * A specification for a time window to apply software updates.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.workspacesthinclient.EnvironmentMaintenanceWindow | undefined>;
    /**
     * The name of the environment.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The ID of the software set that is pending to be installed.
     */
    public /*out*/ readonly pendingSoftwareSetId!: pulumi.Output<string>;
    /**
     * The version of the software set that is pending to be installed.
     */
    public /*out*/ readonly pendingSoftwareSetVersion!: pulumi.Output<string>;
    /**
     * Number of devices registered to the environment.
     */
    public /*out*/ readonly registeredDevicesCount!: pulumi.Output<number>;
    /**
     * Describes if the software currently installed on all devices in the environment is a supported version.
     */
    public /*out*/ readonly softwareSetComplianceStatus!: pulumi.Output<enums.workspacesthinclient.EnvironmentSoftwareSetComplianceStatus>;
    /**
     * An option to define which software updates to apply.
     */
    public readonly softwareSetUpdateMode!: pulumi.Output<enums.workspacesthinclient.EnvironmentSoftwareSetUpdateMode | undefined>;
    /**
     * An option to define if software updates should be applied within a maintenance window.
     */
    public readonly softwareSetUpdateSchedule!: pulumi.Output<enums.workspacesthinclient.EnvironmentSoftwareSetUpdateSchedule | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.workspacesthinclient.EnvironmentTag[] | undefined>;
    /**
     * The timestamp in unix epoch format when environment was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.desktopArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desktopArn'");
            }
            resourceInputs["desiredSoftwareSetId"] = args ? args.desiredSoftwareSetId : undefined;
            resourceInputs["desktopArn"] = args ? args.desktopArn : undefined;
            resourceInputs["desktopEndpoint"] = args ? args.desktopEndpoint : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["softwareSetUpdateMode"] = args ? args.softwareSetUpdateMode : undefined;
            resourceInputs["softwareSetUpdateSchedule"] = args ? args.softwareSetUpdateSchedule : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["activationCode"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["desktopType"] = undefined /*out*/;
            resourceInputs["pendingSoftwareSetId"] = undefined /*out*/;
            resourceInputs["pendingSoftwareSetVersion"] = undefined /*out*/;
            resourceInputs["registeredDevicesCount"] = undefined /*out*/;
            resourceInputs["softwareSetComplianceStatus"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["activationCode"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["desiredSoftwareSetId"] = undefined /*out*/;
            resourceInputs["desktopArn"] = undefined /*out*/;
            resourceInputs["desktopEndpoint"] = undefined /*out*/;
            resourceInputs["desktopType"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["maintenanceWindow"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pendingSoftwareSetId"] = undefined /*out*/;
            resourceInputs["pendingSoftwareSetVersion"] = undefined /*out*/;
            resourceInputs["registeredDevicesCount"] = undefined /*out*/;
            resourceInputs["softwareSetComplianceStatus"] = undefined /*out*/;
            resourceInputs["softwareSetUpdateMode"] = undefined /*out*/;
            resourceInputs["softwareSetUpdateSchedule"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["desktopArn", "kmsKeyArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * The ID of the software set to apply.
     */
    desiredSoftwareSetId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the desktop to stream from Amazon WorkSpaces, WorkSpaces Web, or AppStream 2.0.
     */
    desktopArn: pulumi.Input<string>;
    /**
     * The URL for the identity provider login (only for environments that use AppStream 2.0).
     */
    desktopEndpoint?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the AWS Key Management Service key used to encrypt the environment.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * A specification for a time window to apply software updates.
     */
    maintenanceWindow?: pulumi.Input<inputs.workspacesthinclient.EnvironmentMaintenanceWindowArgs>;
    /**
     * The name of the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * An option to define which software updates to apply.
     */
    softwareSetUpdateMode?: pulumi.Input<enums.workspacesthinclient.EnvironmentSoftwareSetUpdateMode>;
    /**
     * An option to define if software updates should be applied within a maintenance window.
     */
    softwareSetUpdateSchedule?: pulumi.Input<enums.workspacesthinclient.EnvironmentSoftwareSetUpdateSchedule>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.workspacesthinclient.EnvironmentTagArgs>[]>;
}
