// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 */
export class BudgetsAction extends pulumi.CustomResource {
    /**
     * Get an existing BudgetsAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BudgetsAction {
        return new BudgetsAction(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:budgets:BudgetsAction';

    /**
     * Returns true if the given object is an instance of BudgetsAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BudgetsAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BudgetsAction.__pulumiType;
    }

    /**
     * A system-generated universally unique identifier (UUID) for the action.
     */
    declare public /*out*/ readonly actionId: pulumi.Output<string>;
    /**
     * The trigger threshold of the action.
     */
    declare public readonly actionThreshold: pulumi.Output<outputs.budgets.BudgetsActionActionThreshold>;
    /**
     * The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
     */
    declare public readonly actionType: pulumi.Output<enums.budgets.BudgetsActionActionType>;
    /**
     * This specifies if the action needs manual or automatic approval.
     */
    declare public readonly approvalModel: pulumi.Output<enums.budgets.BudgetsActionApprovalModel | undefined>;
    /**
     * A string that represents the budget name. ":" and "\" characters aren't allowed.
     */
    declare public readonly budgetName: pulumi.Output<string>;
    /**
     * Specifies all of the type-specific parameters.
     */
    declare public readonly definition: pulumi.Output<outputs.budgets.BudgetsActionDefinition>;
    /**
     * The role passed for action execution and reversion. Roles and actions must be in the same account.
     */
    declare public readonly executionRoleArn: pulumi.Output<string>;
    /**
     * The type of a notification.
     */
    declare public readonly notificationType: pulumi.Output<enums.budgets.BudgetsActionNotificationType>;
    /**
     * An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
     */
    declare public readonly resourceTags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * A list of subscribers.
     */
    declare public readonly subscribers: pulumi.Output<outputs.budgets.BudgetsActionSubscriber[]>;

    /**
     * Create a BudgetsAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BudgetsActionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.actionThreshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'actionThreshold'");
            }
            if (args?.actionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if (args?.budgetName === undefined && !opts.urn) {
                throw new Error("Missing required property 'budgetName'");
            }
            if (args?.definition === undefined && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if (args?.executionRoleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if (args?.notificationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            if (args?.subscribers === undefined && !opts.urn) {
                throw new Error("Missing required property 'subscribers'");
            }
            resourceInputs["actionThreshold"] = args?.actionThreshold;
            resourceInputs["actionType"] = args?.actionType;
            resourceInputs["approvalModel"] = args?.approvalModel;
            resourceInputs["budgetName"] = args?.budgetName;
            resourceInputs["definition"] = args?.definition;
            resourceInputs["executionRoleArn"] = args?.executionRoleArn;
            resourceInputs["notificationType"] = args?.notificationType;
            resourceInputs["resourceTags"] = args?.resourceTags;
            resourceInputs["subscribers"] = args?.subscribers;
            resourceInputs["actionId"] = undefined /*out*/;
        } else {
            resourceInputs["actionId"] = undefined /*out*/;
            resourceInputs["actionThreshold"] = undefined /*out*/;
            resourceInputs["actionType"] = undefined /*out*/;
            resourceInputs["approvalModel"] = undefined /*out*/;
            resourceInputs["budgetName"] = undefined /*out*/;
            resourceInputs["definition"] = undefined /*out*/;
            resourceInputs["executionRoleArn"] = undefined /*out*/;
            resourceInputs["notificationType"] = undefined /*out*/;
            resourceInputs["resourceTags"] = undefined /*out*/;
            resourceInputs["subscribers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["actionType", "budgetName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(BudgetsAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BudgetsAction resource.
 */
export interface BudgetsActionArgs {
    /**
     * The trigger threshold of the action.
     */
    actionThreshold: pulumi.Input<inputs.budgets.BudgetsActionActionThresholdArgs>;
    /**
     * The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
     */
    actionType: pulumi.Input<enums.budgets.BudgetsActionActionType>;
    /**
     * This specifies if the action needs manual or automatic approval.
     */
    approvalModel?: pulumi.Input<enums.budgets.BudgetsActionApprovalModel>;
    /**
     * A string that represents the budget name. ":" and "\" characters aren't allowed.
     */
    budgetName: pulumi.Input<string>;
    /**
     * Specifies all of the type-specific parameters.
     */
    definition: pulumi.Input<inputs.budgets.BudgetsActionDefinitionArgs>;
    /**
     * The role passed for action execution and reversion. Roles and actions must be in the same account.
     */
    executionRoleArn: pulumi.Input<string>;
    /**
     * The type of a notification.
     */
    notificationType: pulumi.Input<enums.budgets.BudgetsActionNotificationType>;
    /**
     * An optional list of tags to associate with the specified budget action. Each tag consists of a key and a value, and each key must be unique for the resource.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * A list of subscribers.
     */
    subscribers: pulumi.Input<pulumi.Input<inputs.budgets.BudgetsActionSubscriberArgs>[]>;
}
