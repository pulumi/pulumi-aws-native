// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::IoTTwinMaker::ComponentType
 */
export function getComponentType(args: GetComponentTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetComponentTypeResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:iottwinmaker:getComponentType", {
        "componentTypeId": args.componentTypeId,
        "workspaceId": args.workspaceId,
    }, opts);
}

export interface GetComponentTypeArgs {
    /**
     * The ID of the component type.
     */
    componentTypeId: string;
    /**
     * The ID of the workspace that contains the component type.
     */
    workspaceId: string;
}

export interface GetComponentTypeResult {
    /**
     * The ARN of the component type.
     */
    readonly arn?: string;
    /**
     * The date and time when the component type was created.
     */
    readonly creationDateTime?: string;
    /**
     * The description of the component type.
     */
    readonly description?: string;
    /**
     * Specifies the parent component type to extend.
     */
    readonly extendsFrom?: string[];
    /**
     * a Map of functions in the component type. Each function's key must be unique to this map.
     */
    readonly functions?: any;
    /**
     * A Boolean value that specifies whether the component type is abstract.
     */
    readonly isAbstract?: boolean;
    /**
     * A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
     */
    readonly isSchemaInitialized?: boolean;
    /**
     * A Boolean value that specifies whether an entity can have more than one component of this type.
     */
    readonly isSingleton?: boolean;
    /**
     * An map of the property definitions in the component type. Each property definition's key must be unique to this map.
     */
    readonly propertyDefinitions?: any;
    /**
     * The current status of the component type.
     */
    readonly status?: outputs.iottwinmaker.ComponentTypeStatus;
    /**
     * A map of key-value pairs to associate with a resource.
     */
    readonly tags?: any;
    /**
     * The last date and time when the component type was updated.
     */
    readonly updateDateTime?: string;
}

export function getComponentTypeOutput(args: GetComponentTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComponentTypeResult> {
    return pulumi.output(args).apply(a => getComponentType(a, opts))
}

export interface GetComponentTypeOutputArgs {
    /**
     * The ID of the component type.
     */
    componentTypeId: pulumi.Input<string>;
    /**
     * The ID of the workspace that contains the component type.
     */
    workspaceId: pulumi.Input<string>;
}
