// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Grafana::Workspace Resource Type
 */
export class Workspace extends pulumi.CustomResource {
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workspace {
        return new Workspace(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:grafana:Workspace';

    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }

    /**
     * Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
     */
    declare public readonly accountAccessType: pulumi.Output<enums.grafana.WorkspaceAccountAccessType>;
    /**
     * List of authentication providers to enable.
     */
    declare public readonly authenticationProviders: pulumi.Output<enums.grafana.WorkspaceAuthenticationProviderTypes[]>;
    /**
     * The id that uniquely identifies a Grafana workspace.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     */
    declare public readonly clientToken: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the workspace was created.
     */
    declare public /*out*/ readonly creationTimestamp: pulumi.Output<string>;
    /**
     * List of data sources on the service managed IAM role.
     */
    declare public readonly dataSources: pulumi.Output<enums.grafana.WorkspaceDataSourceType[] | undefined>;
    /**
     * Description of a workspace.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Endpoint for the Grafana workspace.
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * The version of Grafana to support in your workspace.
     */
    declare public readonly grafanaVersion: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the workspace was last modified
     */
    declare public /*out*/ readonly modificationTimestamp: pulumi.Output<string>;
    /**
     * The user friendly name of a workspace.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The configuration settings for network access to your workspace.
     */
    declare public readonly networkAccessControl: pulumi.Output<outputs.grafana.WorkspaceNetworkAccessControl | undefined>;
    /**
     * List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
     */
    declare public readonly notificationDestinations: pulumi.Output<enums.grafana.WorkspaceNotificationDestinationType[] | undefined>;
    /**
     * The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
     */
    declare public readonly organizationRoleName: pulumi.Output<string | undefined>;
    /**
     * List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
     */
    declare public readonly organizationalUnits: pulumi.Output<string[] | undefined>;
    /**
     * If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
     *
     * If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
     *
     * If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
     *
     * For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
     */
    declare public readonly permissionType: pulumi.Output<enums.grafana.WorkspacePermissionType>;
    /**
     * Allow workspace admins to install plugins
     */
    declare public readonly pluginAdminEnabled: pulumi.Output<boolean | undefined>;
    /**
     * IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
     */
    declare public readonly samlConfiguration: pulumi.Output<outputs.grafana.WorkspaceSamlConfiguration | undefined>;
    /**
     * Specifies whether the workspace's SAML configuration is complete.
     *
     * Valid values: `CONFIGURED | NOT_CONFIGURED`
     *
     * Type: String
     */
    declare public /*out*/ readonly samlConfigurationStatus: pulumi.Output<enums.grafana.WorkspaceSamlConfigurationStatus>;
    /**
     * The client ID of the AWS SSO Managed Application.
     */
    declare public /*out*/ readonly ssoClientId: pulumi.Output<string>;
    /**
     * The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
     */
    declare public readonly stackSetName: pulumi.Output<string | undefined>;
    /**
     * The current status of the workspace.
     *
     * Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
     *
     * Type: String
     */
    declare public /*out*/ readonly status: pulumi.Output<enums.grafana.WorkspaceStatus>;
    /**
     * The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
     *
     * > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
     */
    declare public readonly vpcConfiguration: pulumi.Output<outputs.grafana.WorkspaceVpcConfiguration | undefined>;

    /**
     * Create a Workspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.accountAccessType === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountAccessType'");
            }
            if (args?.authenticationProviders === undefined && !opts.urn) {
                throw new Error("Missing required property 'authenticationProviders'");
            }
            if (args?.permissionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissionType'");
            }
            resourceInputs["accountAccessType"] = args?.accountAccessType;
            resourceInputs["authenticationProviders"] = args?.authenticationProviders;
            resourceInputs["clientToken"] = args?.clientToken;
            resourceInputs["dataSources"] = args?.dataSources;
            resourceInputs["description"] = args?.description;
            resourceInputs["grafanaVersion"] = args?.grafanaVersion;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkAccessControl"] = args?.networkAccessControl;
            resourceInputs["notificationDestinations"] = args?.notificationDestinations;
            resourceInputs["organizationRoleName"] = args?.organizationRoleName;
            resourceInputs["organizationalUnits"] = args?.organizationalUnits;
            resourceInputs["permissionType"] = args?.permissionType;
            resourceInputs["pluginAdminEnabled"] = args?.pluginAdminEnabled;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["samlConfiguration"] = args?.samlConfiguration;
            resourceInputs["stackSetName"] = args?.stackSetName;
            resourceInputs["vpcConfiguration"] = args?.vpcConfiguration;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["modificationTimestamp"] = undefined /*out*/;
            resourceInputs["samlConfigurationStatus"] = undefined /*out*/;
            resourceInputs["ssoClientId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["accountAccessType"] = undefined /*out*/;
            resourceInputs["authenticationProviders"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["clientToken"] = undefined /*out*/;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["dataSources"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["grafanaVersion"] = undefined /*out*/;
            resourceInputs["modificationTimestamp"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkAccessControl"] = undefined /*out*/;
            resourceInputs["notificationDestinations"] = undefined /*out*/;
            resourceInputs["organizationRoleName"] = undefined /*out*/;
            resourceInputs["organizationalUnits"] = undefined /*out*/;
            resourceInputs["permissionType"] = undefined /*out*/;
            resourceInputs["pluginAdminEnabled"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["samlConfiguration"] = undefined /*out*/;
            resourceInputs["samlConfigurationStatus"] = undefined /*out*/;
            resourceInputs["ssoClientId"] = undefined /*out*/;
            resourceInputs["stackSetName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clientToken"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Workspace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Workspace resource.
 */
export interface WorkspaceArgs {
    /**
     * Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
     */
    accountAccessType: pulumi.Input<enums.grafana.WorkspaceAccountAccessType>;
    /**
     * List of authentication providers to enable.
     */
    authenticationProviders: pulumi.Input<pulumi.Input<enums.grafana.WorkspaceAuthenticationProviderTypes>[]>;
    /**
     * A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * List of data sources on the service managed IAM role.
     */
    dataSources?: pulumi.Input<pulumi.Input<enums.grafana.WorkspaceDataSourceType>[]>;
    /**
     * Description of a workspace.
     */
    description?: pulumi.Input<string>;
    /**
     * The version of Grafana to support in your workspace.
     */
    grafanaVersion?: pulumi.Input<string>;
    /**
     * The user friendly name of a workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration settings for network access to your workspace.
     */
    networkAccessControl?: pulumi.Input<inputs.grafana.WorkspaceNetworkAccessControlArgs>;
    /**
     * List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
     */
    notificationDestinations?: pulumi.Input<pulumi.Input<enums.grafana.WorkspaceNotificationDestinationType>[]>;
    /**
     * The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
     */
    organizationRoleName?: pulumi.Input<string>;
    /**
     * List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
     */
    organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
     *
     * If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
     *
     * If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
     *
     * For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
     */
    permissionType: pulumi.Input<enums.grafana.WorkspacePermissionType>;
    /**
     * Allow workspace admins to install plugins
     */
    pluginAdminEnabled?: pulumi.Input<boolean>;
    /**
     * IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
     */
    samlConfiguration?: pulumi.Input<inputs.grafana.WorkspaceSamlConfigurationArgs>;
    /**
     * The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
     */
    stackSetName?: pulumi.Input<string>;
    /**
     * The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
     *
     * > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
     */
    vpcConfiguration?: pulumi.Input<inputs.grafana.WorkspaceVpcConfigurationArgs>;
}
