// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Grafana::Workspace Resource Type
 */
export function getWorkspace(args: GetWorkspaceArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkspaceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:grafana:getWorkspace", {
        "id": args.id,
    }, opts);
}

export interface GetWorkspaceArgs {
    /**
     * The id that uniquely identifies a Grafana workspace.
     */
    id: string;
}

export interface GetWorkspaceResult {
    /**
     * Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization. If this is `ORGANIZATION` , the `OrganizationalUnits` parameter specifies which organizational units the workspace can access.
     */
    readonly accountAccessType?: enums.grafana.WorkspaceAccountAccessType;
    /**
     * List of authentication providers to enable.
     */
    readonly authenticationProviders?: enums.grafana.WorkspaceAuthenticationProviderTypes[];
    /**
     * Timestamp when the workspace was created.
     */
    readonly creationTimestamp?: string;
    /**
     * List of data sources on the service managed IAM role.
     */
    readonly dataSources?: enums.grafana.WorkspaceDataSourceType[];
    /**
     * Description of a workspace.
     */
    readonly description?: string;
    /**
     * Endpoint for the Grafana workspace.
     */
    readonly endpoint?: string;
    /**
     * The version of Grafana to support in your workspace.
     */
    readonly grafanaVersion?: string;
    /**
     * The id that uniquely identifies a Grafana workspace.
     */
    readonly id?: string;
    /**
     * Timestamp when the workspace was last modified
     */
    readonly modificationTimestamp?: string;
    /**
     * The user friendly name of a workspace.
     */
    readonly name?: string;
    /**
     * The configuration settings for network access to your workspace.
     */
    readonly networkAccessControl?: outputs.grafana.WorkspaceNetworkAccessControl;
    /**
     * List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.
     */
    readonly notificationDestinations?: enums.grafana.WorkspaceNotificationDestinationType[];
    /**
     * The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.
     */
    readonly organizationRoleName?: string;
    /**
     * List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.
     */
    readonly organizationalUnits?: string[];
    /**
     * If this is `SERVICE_MANAGED` , and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
     *
     * If this is `CUSTOMER_MANAGED` , you must manage those roles and permissions yourself.
     *
     * If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other AWS accounts in the organization, this parameter must be set to `CUSTOMER_MANAGED` .
     *
     * For more information about converting between customer and service managed, see [Managing permissions for data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html) . For more information about the roles and permissions that must be managed for customer managed workspaces, see [Amazon Managed Grafana permissions and policies for AWS data sources and notification channels](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html)
     */
    readonly permissionType?: enums.grafana.WorkspacePermissionType;
    /**
     * Allow workspace admins to install plugins
     */
    readonly pluginAdminEnabled?: boolean;
    /**
     * IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.
     */
    readonly roleArn?: string;
    /**
     * If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the `Admin` and `Editor` roles in the workspace.
     */
    readonly samlConfiguration?: outputs.grafana.WorkspaceSamlConfiguration;
    /**
     * Specifies whether the workspace's SAML configuration is complete.
     *
     * Valid values: `CONFIGURED | NOT_CONFIGURED`
     *
     * Type: String
     */
    readonly samlConfigurationStatus?: enums.grafana.WorkspaceSamlConfigurationStatus;
    /**
     * The client ID of the AWS SSO Managed Application.
     */
    readonly ssoClientId?: string;
    /**
     * The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.
     */
    readonly stackSetName?: string;
    /**
     * The current status of the workspace.
     *
     * Valid values: `ACTIVE | CREATING | DELETING | FAILED | UPDATING | UPGRADING | DELETION_FAILED | CREATION_FAILED | UPDATE_FAILED | UPGRADE_FAILED | LICENSE_REMOVAL_FAILED`
     *
     * Type: String
     */
    readonly status?: enums.grafana.WorkspaceStatus;
    /**
     * The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
     *
     * > Connecting to a private VPC is not yet available in the Asia Pacific (Seoul) Region (ap-northeast-2).
     */
    readonly vpcConfiguration?: outputs.grafana.WorkspaceVpcConfiguration;
}
/**
 * Definition of AWS::Grafana::Workspace Resource Type
 */
export function getWorkspaceOutput(args: GetWorkspaceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWorkspaceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:grafana:getWorkspace", {
        "id": args.id,
    }, opts);
}

export interface GetWorkspaceOutputArgs {
    /**
     * The id that uniquely identifies a Grafana workspace.
     */
    id: pulumi.Input<string>;
}
