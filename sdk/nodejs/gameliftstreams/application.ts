// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::GameLiftStreams::Application Resource Type
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:gameliftstreams:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    public readonly applicationLogOutputUri!: pulumi.Output<string | undefined>;
    public readonly applicationLogPaths!: pulumi.Output<string[] | undefined>;
    public readonly applicationSourceUri!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly executablePath!: pulumi.Output<string>;
    public readonly runtimeEnvironment!: pulumi.Output<outputs.gameliftstreams.ApplicationRuntimeEnvironment>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicationSourceUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationSourceUri'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.executablePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executablePath'");
            }
            if ((!args || args.runtimeEnvironment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeEnvironment'");
            }
            resourceInputs["applicationLogOutputUri"] = args ? args.applicationLogOutputUri : undefined;
            resourceInputs["applicationLogPaths"] = args ? args.applicationLogPaths : undefined;
            resourceInputs["applicationSourceUri"] = args ? args.applicationSourceUri : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executablePath"] = args ? args.executablePath : undefined;
            resourceInputs["runtimeEnvironment"] = args ? args.runtimeEnvironment : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["applicationLogOutputUri"] = undefined /*out*/;
            resourceInputs["applicationLogPaths"] = undefined /*out*/;
            resourceInputs["applicationSourceUri"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["executablePath"] = undefined /*out*/;
            resourceInputs["runtimeEnvironment"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applicationSourceUri", "executablePath", "runtimeEnvironment"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    applicationLogOutputUri?: pulumi.Input<string>;
    applicationLogPaths?: pulumi.Input<pulumi.Input<string>[]>;
    applicationSourceUri: pulumi.Input<string>;
    description: pulumi.Input<string>;
    executablePath: pulumi.Input<string>;
    runtimeEnvironment: pulumi.Input<inputs.gameliftstreams.ApplicationRuntimeEnvironmentArgs>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
