// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::GameLiftStreams::Application Resource Type
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:gameliftstreams:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
     */
    declare public readonly applicationLogOutputUri: pulumi.Output<string | undefined>;
    /**
     * Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
     */
    declare public readonly applicationLogPaths: pulumi.Output<string[] | undefined>;
    /**
     * The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
     *
     * This value is immutable. To designate a different content location, create a new application.
     *
     * > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
     */
    declare public readonly applicationSourceUri: pulumi.Output<string>;
    /**
     * An [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) that uniquely identifies the application resource across all AWS Regions. For example:
     *
     * `arn:aws:gameliftstreams:us-west-2:123456789012:application/a-9ZY8X7Wv6` .
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * An ID that uniquely identifies the application resource. For example: `a-9ZY8X7Wv6` .
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * A human-readable label for the application. You can update this value later.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The relative path and file name of the executable file that Amazon GameLift Streams will stream. Specify a path relative to the location set in `ApplicationSourceUri` . The file must be contained within the application's root folder. For Windows applications, the file must be a valid Windows executable or batch file with a filename ending in .exe, .cmd, or .bat. For Linux applications, the file must be a valid Linux binary executable or a script that contains an initial interpreter line starting with a shebang (' `#!` ').
     */
    declare public readonly executablePath: pulumi.Output<string>;
    /**
     * A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
     */
    declare public readonly runtimeEnvironment: pulumi.Output<outputs.gameliftstreams.ApplicationRuntimeEnvironment>;
    /**
     * A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.applicationSourceUri === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationSourceUri'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.executablePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'executablePath'");
            }
            if (args?.runtimeEnvironment === undefined && !opts.urn) {
                throw new Error("Missing required property 'runtimeEnvironment'");
            }
            resourceInputs["applicationLogOutputUri"] = args?.applicationLogOutputUri;
            resourceInputs["applicationLogPaths"] = args?.applicationLogPaths;
            resourceInputs["applicationSourceUri"] = args?.applicationSourceUri;
            resourceInputs["description"] = args?.description;
            resourceInputs["executablePath"] = args?.executablePath;
            resourceInputs["runtimeEnvironment"] = args?.runtimeEnvironment;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["applicationLogOutputUri"] = undefined /*out*/;
            resourceInputs["applicationLogPaths"] = undefined /*out*/;
            resourceInputs["applicationSourceUri"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["executablePath"] = undefined /*out*/;
            resourceInputs["runtimeEnvironment"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["applicationSourceUri", "executablePath", "runtimeEnvironment"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * An Amazon S3 URI to a bucket where you would like Amazon GameLift Streams to save application logs. Required if you specify one or more `ApplicationLogPaths` .
     */
    applicationLogOutputUri?: pulumi.Input<string>;
    /**
     * Locations of log files that your content generates during a stream session. Enter path values that are relative to the `ApplicationSourceUri` location. You can specify up to 10 log paths. Amazon GameLift Streams uploads designated log files to the Amazon S3 bucket that you specify in `ApplicationLogOutputUri` at the end of a stream session. To retrieve stored log files, call [GetStreamSession](https://docs.aws.amazon.com/gameliftstreams/latest/apireference/API_GetStreamSession.html) and get the `LogFileLocationUri` .
     */
    applicationLogPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location of the content that you want to stream. Enter an Amazon S3 URI to a bucket that contains your game or other application. The location can have a multi-level prefix structure, but it must include all the files needed to run the content. Amazon GameLift Streams copies everything under the specified location.
     *
     * This value is immutable. To designate a different content location, create a new application.
     *
     * > The Amazon S3 bucket and the Amazon GameLift Streams application must be in the same AWS Region.
     */
    applicationSourceUri: pulumi.Input<string>;
    /**
     * A human-readable label for the application. You can update this value later.
     */
    description: pulumi.Input<string>;
    /**
     * The relative path and file name of the executable file that Amazon GameLift Streams will stream. Specify a path relative to the location set in `ApplicationSourceUri` . The file must be contained within the application's root folder. For Windows applications, the file must be a valid Windows executable or batch file with a filename ending in .exe, .cmd, or .bat. For Linux applications, the file must be a valid Linux binary executable or a script that contains an initial interpreter line starting with a shebang (' `#!` ').
     */
    executablePath: pulumi.Input<string>;
    /**
     * A set of configuration settings to run the application on a stream group. This configures the operating system, and can include compatibility layers and other drivers.
     */
    runtimeEnvironment: pulumi.Input<inputs.gameliftstreams.ApplicationRuntimeEnvironmentArgs>;
    /**
     * A list of labels to assign to the new application resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management and cost allocation. See [Tagging AWS Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference* .
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
