// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::MemoryDB::Multi Region Cluster resource creates an Amazon MemoryDB Multi Region Cluster.
 */
export class MultiRegionCluster extends pulumi.CustomResource {
    /**
     * Get an existing MultiRegionCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MultiRegionCluster {
        return new MultiRegionCluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:memorydb:MultiRegionCluster';

    /**
     * Returns true if the given object is an instance of MultiRegionCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MultiRegionCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultiRegionCluster.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the multi region cluster.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Description of the multi region cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The engine type used by the multi region cluster.
     */
    public readonly engine!: pulumi.Output<string | undefined>;
    /**
     * The Redis engine version used by the multi region cluster.
     */
    public readonly engineVersion!: pulumi.Output<string | undefined>;
    /**
     * The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
     */
    public /*out*/ readonly multiRegionClusterName!: pulumi.Output<string>;
    /**
     * The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
     */
    public readonly multiRegionClusterNameSuffix!: pulumi.Output<string | undefined>;
    /**
     * The name of the parameter group associated with the multi region cluster.
     */
    public readonly multiRegionParameterGroupName!: pulumi.Output<string | undefined>;
    /**
     * The compute and memory capacity of the nodes in the multi region cluster.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * The number of shards the multi region cluster will contain.
     */
    public readonly numShards!: pulumi.Output<number | undefined>;
    /**
     * The status of the multi region cluster. For example, Available, Updating, Creating.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this multi region cluster.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * A flag that enables in-transit encryption when set to true.
     *
     * You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
     */
    public readonly tlsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
     */
    public readonly updateStrategy!: pulumi.Output<enums.memorydb.MultiRegionClusterUpdateStrategy | undefined>;

    /**
     * Create a MultiRegionCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MultiRegionClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["multiRegionClusterNameSuffix"] = args ? args.multiRegionClusterNameSuffix : undefined;
            resourceInputs["multiRegionParameterGroupName"] = args ? args.multiRegionParameterGroupName : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["numShards"] = args ? args.numShards : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["updateStrategy"] = args ? args.updateStrategy : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["multiRegionClusterName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["multiRegionClusterName"] = undefined /*out*/;
            resourceInputs["multiRegionClusterNameSuffix"] = undefined /*out*/;
            resourceInputs["multiRegionParameterGroupName"] = undefined /*out*/;
            resourceInputs["nodeType"] = undefined /*out*/;
            resourceInputs["numShards"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tlsEnabled"] = undefined /*out*/;
            resourceInputs["updateStrategy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["engineVersion", "multiRegionClusterNameSuffix", "multiRegionParameterGroupName", "tlsEnabled"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MultiRegionCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MultiRegionCluster resource.
 */
export interface MultiRegionClusterArgs {
    /**
     * Description of the multi region cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The engine type used by the multi region cluster.
     */
    engine?: pulumi.Input<string>;
    /**
     * The Redis engine version used by the multi region cluster.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
     */
    multiRegionClusterNameSuffix?: pulumi.Input<string>;
    /**
     * The name of the parameter group associated with the multi region cluster.
     */
    multiRegionParameterGroupName?: pulumi.Input<string>;
    /**
     * The compute and memory capacity of the nodes in the multi region cluster.
     */
    nodeType: pulumi.Input<string>;
    /**
     * The number of shards the multi region cluster will contain.
     */
    numShards?: pulumi.Input<number>;
    /**
     * An array of key-value pairs to apply to this multi region cluster.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * A flag that enables in-transit encryption when set to true.
     *
     * You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
     */
    tlsEnabled?: pulumi.Input<boolean>;
    /**
     * An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
     */
    updateStrategy?: pulumi.Input<enums.memorydb.MultiRegionClusterUpdateStrategy>;
}
