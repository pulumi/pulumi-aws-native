// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConfigurationSetArgs } from "./configurationSet";
export type ConfigurationSet = import("./configurationSet").ConfigurationSet;
export const ConfigurationSet: typeof import("./configurationSet").ConfigurationSet = null as any;
utilities.lazyLoad(exports, ["ConfigurationSet"], () => require("./configurationSet"));

export { ConfigurationSetEventDestinationArgs } from "./configurationSetEventDestination";
export type ConfigurationSetEventDestination = import("./configurationSetEventDestination").ConfigurationSetEventDestination;
export const ConfigurationSetEventDestination: typeof import("./configurationSetEventDestination").ConfigurationSetEventDestination = null as any;
utilities.lazyLoad(exports, ["ConfigurationSetEventDestination"], () => require("./configurationSetEventDestination"));

export { DedicatedIpPoolArgs } from "./dedicatedIpPool";
export type DedicatedIpPool = import("./dedicatedIpPool").DedicatedIpPool;
export const DedicatedIpPool: typeof import("./dedicatedIpPool").DedicatedIpPool = null as any;
utilities.lazyLoad(exports, ["DedicatedIpPool"], () => require("./dedicatedIpPool"));

export { GetConfigurationSetArgs, GetConfigurationSetResult, GetConfigurationSetOutputArgs } from "./getConfigurationSet";
export const getConfigurationSet: typeof import("./getConfigurationSet").getConfigurationSet = null as any;
export const getConfigurationSetOutput: typeof import("./getConfigurationSet").getConfigurationSetOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationSet","getConfigurationSetOutput"], () => require("./getConfigurationSet"));

export { GetConfigurationSetEventDestinationArgs, GetConfigurationSetEventDestinationResult, GetConfigurationSetEventDestinationOutputArgs } from "./getConfigurationSetEventDestination";
export const getConfigurationSetEventDestination: typeof import("./getConfigurationSetEventDestination").getConfigurationSetEventDestination = null as any;
export const getConfigurationSetEventDestinationOutput: typeof import("./getConfigurationSetEventDestination").getConfigurationSetEventDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationSetEventDestination","getConfigurationSetEventDestinationOutput"], () => require("./getConfigurationSetEventDestination"));

export { GetDedicatedIpPoolArgs, GetDedicatedIpPoolResult, GetDedicatedIpPoolOutputArgs } from "./getDedicatedIpPool";
export const getDedicatedIpPool: typeof import("./getDedicatedIpPool").getDedicatedIpPool = null as any;
export const getDedicatedIpPoolOutput: typeof import("./getDedicatedIpPool").getDedicatedIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedIpPool","getDedicatedIpPoolOutput"], () => require("./getDedicatedIpPool"));

export { GetIdentityArgs, GetIdentityResult, GetIdentityOutputArgs } from "./getIdentity";
export const getIdentity: typeof import("./getIdentity").getIdentity = null as any;
export const getIdentityOutput: typeof import("./getIdentity").getIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getIdentity","getIdentityOutput"], () => require("./getIdentity"));

export { IdentityArgs } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:pinpointemail:ConfigurationSet":
                return new ConfigurationSet(name, <any>undefined, { urn })
            case "aws-native:pinpointemail:ConfigurationSetEventDestination":
                return new ConfigurationSetEventDestination(name, <any>undefined, { urn })
            case "aws-native:pinpointemail:DedicatedIpPool":
                return new DedicatedIpPool(name, <any>undefined, { urn })
            case "aws-native:pinpointemail:Identity":
                return new Identity(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "pinpointemail", _module)
