// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The `AWS::Redshift::EventSubscription` resource creates an Amazon Redshift Event Subscription.
 */
export class EventSubscription extends pulumi.CustomResource {
    /**
     * Get an existing EventSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventSubscription {
        return new EventSubscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:redshift:EventSubscription';

    /**
     * Returns true if the given object is an instance of EventSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSubscription.__pulumiType;
    }

    /**
     * The name of the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly custSubscriptionId!: pulumi.Output<string>;
    /**
     * The AWS account associated with the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly customerAwsId!: pulumi.Output<string>;
    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     */
    public readonly eventCategories!: pulumi.Output<enums.redshift.EventSubscriptionEventCategoriesItem[] | undefined>;
    /**
     * The list of Amazon Redshift event categories specified in the event notification subscription.
     */
    public /*out*/ readonly eventCategoriesList!: pulumi.Output<string[]>;
    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     */
    public readonly severity!: pulumi.Output<enums.redshift.EventSubscriptionSeverity | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     */
    public readonly snsTopicArn!: pulumi.Output<string | undefined>;
    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     */
    public readonly sourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * A list of the sources that publish events to the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly sourceIdsList!: pulumi.Output<string[]>;
    /**
     * The type of source that will be generating the events.
     */
    public readonly sourceType!: pulumi.Output<enums.redshift.EventSubscriptionSourceType | undefined>;
    /**
     * The status of the Amazon Redshift event notification subscription.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.redshift.EventSubscriptionStatus>;
    /**
     * The date and time the Amazon Redshift event notification subscription was created.
     */
    public /*out*/ readonly subscriptionCreationTime!: pulumi.Output<string>;
    /**
     * The name of the Amazon Redshift event notification subscription
     */
    public readonly subscriptionName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.redshift.EventSubscriptionTag[] | undefined>;

    /**
     * Create a EventSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventSubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventCategories"] = args ? args.eventCategories : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            resourceInputs["sourceIds"] = args ? args.sourceIds : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["custSubscriptionId"] = undefined /*out*/;
            resourceInputs["customerAwsId"] = undefined /*out*/;
            resourceInputs["eventCategoriesList"] = undefined /*out*/;
            resourceInputs["sourceIdsList"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subscriptionCreationTime"] = undefined /*out*/;
        } else {
            resourceInputs["custSubscriptionId"] = undefined /*out*/;
            resourceInputs["customerAwsId"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["eventCategories"] = undefined /*out*/;
            resourceInputs["eventCategoriesList"] = undefined /*out*/;
            resourceInputs["severity"] = undefined /*out*/;
            resourceInputs["snsTopicArn"] = undefined /*out*/;
            resourceInputs["sourceIds"] = undefined /*out*/;
            resourceInputs["sourceIdsList"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subscriptionCreationTime"] = undefined /*out*/;
            resourceInputs["subscriptionName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventSubscription resource.
 */
export interface EventSubscriptionArgs {
    /**
     * A boolean value; set to true to activate the subscription, and set to false to create the subscription but not activate it.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Amazon Redshift event categories to be published by the event notification subscription.
     */
    eventCategories?: pulumi.Input<pulumi.Input<enums.redshift.EventSubscriptionEventCategoriesItem>[]>;
    /**
     * Specifies the Amazon Redshift event severity to be published by the event notification subscription.
     */
    severity?: pulumi.Input<enums.redshift.EventSubscriptionSeverity>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications.
     */
    snsTopicArn?: pulumi.Input<string>;
    /**
     * A list of one or more identifiers of Amazon Redshift source objects.
     */
    sourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of source that will be generating the events.
     */
    sourceType?: pulumi.Input<enums.redshift.EventSubscriptionSourceType>;
    /**
     * The name of the Amazon Redshift event notification subscription
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.redshift.EventSubscriptionTagArgs>[]>;
}
