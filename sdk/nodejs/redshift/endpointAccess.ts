// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for a Redshift-managed VPC endpoint.
 */
export class EndpointAccess extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EndpointAccess {
        return new EndpointAccess(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:redshift:EndpointAccess';

    /**
     * Returns true if the given object is an instance of EndpointAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAccess.__pulumiType;
    }

    /**
     * The DNS address of the endpoint.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
     */
    public readonly clusterIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The time (UTC) that the endpoint was created.
     */
    public /*out*/ readonly endpointCreateTime!: pulumi.Output<string>;
    /**
     * The name of the endpoint.
     */
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The status of the endpoint.
     */
    public /*out*/ readonly endpointStatus!: pulumi.Output<string>;
    /**
     * The port number on which the cluster accepts incoming connections.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The AWS account ID of the owner of the cluster.
     */
    public readonly resourceOwner!: pulumi.Output<string | undefined>;
    /**
     * The subnet group name where Amazon Redshift chooses to deploy the endpoint.
     */
    public readonly subnetGroupName!: pulumi.Output<string | undefined>;
    /**
     * The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
     */
    public /*out*/ readonly vpcEndpoint!: pulumi.Output<outputs.redshift.VpcEndpointProperties>;
    /**
     * A list of vpc security group ids to apply to the created endpoint access.
     */
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;
    /**
     * A list of Virtual Private Cloud (VPC) security groups to be associated with the endpoint.
     */
    public /*out*/ readonly vpcSecurityGroups!: pulumi.Output<outputs.redshift.EndpointAccessVpcSecurityGroup[]>;

    /**
     * Create a EndpointAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointAccessArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.vpcSecurityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSecurityGroupIds'");
            }
            inputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            inputs["endpointName"] = args ? args.endpointName : undefined;
            inputs["resourceOwner"] = args ? args.resourceOwner : undefined;
            inputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["address"] = undefined /*out*/;
            inputs["endpointCreateTime"] = undefined /*out*/;
            inputs["endpointStatus"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["vpcEndpoint"] = undefined /*out*/;
            inputs["vpcSecurityGroups"] = undefined /*out*/;
        } else {
            inputs["address"] = undefined /*out*/;
            inputs["clusterIdentifier"] = undefined /*out*/;
            inputs["endpointCreateTime"] = undefined /*out*/;
            inputs["endpointName"] = undefined /*out*/;
            inputs["endpointStatus"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["resourceOwner"] = undefined /*out*/;
            inputs["subnetGroupName"] = undefined /*out*/;
            inputs["vpcEndpoint"] = undefined /*out*/;
            inputs["vpcSecurityGroupIds"] = undefined /*out*/;
            inputs["vpcSecurityGroups"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EndpointAccess.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a EndpointAccess resource.
 */
export interface EndpointAccessArgs {
    /**
     * A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account
     */
    clusterIdentifier?: pulumi.Input<string>;
    /**
     * The name of the endpoint.
     */
    endpointName: pulumi.Input<string>;
    /**
     * The AWS account ID of the owner of the cluster.
     */
    resourceOwner?: pulumi.Input<string>;
    /**
     * The subnet group name where Amazon Redshift chooses to deploy the endpoint.
     */
    subnetGroupName?: pulumi.Input<string>;
    /**
     * A list of vpc security group ids to apply to the created endpoint access.
     */
    vpcSecurityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
}
