// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across AWS accounts.
 */
export class EndpointAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EndpointAuthorization {
        return new EndpointAuthorization(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:redshift:EndpointAuthorization';

    /**
     * Returns true if the given object is an instance of EndpointAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAuthorization.__pulumiType;
    }

    /**
     * The target AWS account ID to grant or revoke access for.
     */
    public readonly account!: pulumi.Output<string>;
    /**
     * Indicates whether all VPCs in the grantee account are allowed access to the cluster.
     */
    public /*out*/ readonly allowedAllVPCs!: pulumi.Output<boolean>;
    /**
     * The VPCs allowed access to the cluster.
     */
    public /*out*/ readonly allowedVPCs!: pulumi.Output<string[]>;
    /**
     * The time (UTC) when the authorization was created.
     */
    public /*out*/ readonly authorizeTime!: pulumi.Output<string>;
    /**
     * The cluster identifier.
     */
    public readonly clusterIdentifier!: pulumi.Output<string>;
    /**
     * The status of the cluster.
     */
    public /*out*/ readonly clusterStatus!: pulumi.Output<string>;
    /**
     * The number of Redshift-managed VPC endpoints created for the authorization.
     */
    public /*out*/ readonly endpointCount!: pulumi.Output<number>;
    /**
     *  Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * The AWS account ID of the grantee of the cluster.
     */
    public /*out*/ readonly grantee!: pulumi.Output<string>;
    /**
     * The AWS account ID of the cluster owner.
     */
    public /*out*/ readonly grantor!: pulumi.Output<string>;
    /**
     * The status of the authorization action.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The virtual private cloud (VPC) identifiers to grant or revoke access to.
     */
    public readonly vpcIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a EndpointAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointAuthorizationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["vpcIds"] = args ? args.vpcIds : undefined;
            resourceInputs["allowedAllVPCs"] = undefined /*out*/;
            resourceInputs["allowedVPCs"] = undefined /*out*/;
            resourceInputs["authorizeTime"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["endpointCount"] = undefined /*out*/;
            resourceInputs["grantee"] = undefined /*out*/;
            resourceInputs["grantor"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["account"] = undefined /*out*/;
            resourceInputs["allowedAllVPCs"] = undefined /*out*/;
            resourceInputs["allowedVPCs"] = undefined /*out*/;
            resourceInputs["authorizeTime"] = undefined /*out*/;
            resourceInputs["clusterIdentifier"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["endpointCount"] = undefined /*out*/;
            resourceInputs["force"] = undefined /*out*/;
            resourceInputs["grantee"] = undefined /*out*/;
            resourceInputs["grantor"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EndpointAuthorization resource.
 */
export interface EndpointAuthorizationArgs {
    /**
     * The target AWS account ID to grant or revoke access for.
     */
    account: pulumi.Input<string>;
    /**
     * The cluster identifier.
     */
    clusterIdentifier: pulumi.Input<string>;
    /**
     *  Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
     */
    force?: pulumi.Input<boolean>;
    /**
     * The virtual private cloud (VPC) identifiers to grant or revoke access to.
     */
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}
