// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::GameLift::ContainerFleet resource creates an Amazon GameLift (GameLift) container fleet to host game servers.
 */
export function getContainerFleet(args: GetContainerFleetArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerFleetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:gamelift:getContainerFleet", {
        "fleetId": args.fleetId,
    }, opts);
}

export interface GetContainerFleetArgs {
    /**
     * Unique fleet ID
     */
    fleetId: string;
}

export interface GetContainerFleetResult {
    /**
     * A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
     */
    readonly creationTime?: string;
    readonly deploymentDetails?: outputs.gamelift.ContainerFleetDeploymentDetails;
    /**
     * A human-readable description of a fleet.
     */
    readonly description?: string;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift container fleet resource and uniquely identifies it across all AWS Regions.
     */
    readonly fleetArn?: string;
    /**
     * Unique fleet ID
     */
    readonly fleetId?: string;
    /**
     * A unique identifier for an AWS IAM role that manages access to your AWS services. Create a role or look up a role's ARN from the IAM dashboard in the AWS Management Console.
     */
    readonly fleetRoleArn?: string;
    /**
     * The Amazon Resource Name (ARN) of the game server container group definition. This field will be empty if GameServerContainerGroupDefinitionName is not specified.
     */
    readonly gameServerContainerGroupDefinitionArn?: string;
    /**
     * The number of desired game server container groups per instance, a number between 1-5000.
     */
    readonly gameServerContainerGroupsPerInstance?: number;
    /**
     * A policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
     */
    readonly gameSessionCreationLimitPolicy?: outputs.gamelift.ContainerFleetGameSessionCreationLimitPolicy;
    /**
     * The set of port numbers to open on each instance in a container fleet. Connection ports are used by inbound traffic to connect with processes that are running in containers on the fleet.
     */
    readonly instanceConnectionPortRange?: outputs.gamelift.ContainerFleetConnectionPortRange;
    /**
     * A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift server.
     */
    readonly instanceInboundPermissions?: outputs.gamelift.ContainerFleetIpPermission[];
    readonly locations?: outputs.gamelift.ContainerFleetLocationConfiguration[];
    /**
     * The method that is used to collect container logs for the fleet. Amazon GameLift Servers saves all standard output for each container in logs, including game session logs.
     *
     * - `CLOUDWATCH` -- Send logs to an Amazon CloudWatch log group that you define. Each container emits a log stream, which is organized in the log group.
     * - `S3` -- Store logs in an Amazon S3 bucket that you define.
     * - `NONE` -- Don't collect container logs.
     */
    readonly logConfiguration?: outputs.gamelift.ContainerFleetLogConfiguration;
    /**
     * The maximum number of game server container groups per instance, a number between 1-5000.
     */
    readonly maximumGameServerContainerGroupsPerInstance?: number;
    /**
     * The name of an Amazon CloudWatch metric group. A metric group aggregates the metrics for all fleets in the group. Specify a string containing the metric group name. You can use an existing name or use a new name to create a new metric group. Currently, this parameter can have only one string.
     */
    readonly metricGroups?: string[];
    /**
     * A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
     */
    readonly newGameSessionProtectionPolicy?: enums.gamelift.ContainerFleetNewGameSessionProtectionPolicy;
    /**
     * The Amazon Resource Name (ARN) of the per instance container group definition. This field will be empty if PerInstanceContainerGroupDefinitionName is not specified.
     */
    readonly perInstanceContainerGroupDefinitionArn?: string;
    /**
     * A list of rules that control how a fleet is scaled.
     */
    readonly scalingPolicies?: outputs.gamelift.ContainerFleetScalingPolicy[];
    /**
     * The current status of the container fleet.
     */
    readonly status?: enums.gamelift.ContainerFleetStatus;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.Tag[];
}
/**
 * The AWS::GameLift::ContainerFleet resource creates an Amazon GameLift (GameLift) container fleet to host game servers.
 */
export function getContainerFleetOutput(args: GetContainerFleetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetContainerFleetResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:gamelift:getContainerFleet", {
        "fleetId": args.fleetId,
    }, opts);
}

export interface GetContainerFleetOutputArgs {
    /**
     * Unique fleet ID
     */
    fleetId: pulumi.Input<string>;
}
