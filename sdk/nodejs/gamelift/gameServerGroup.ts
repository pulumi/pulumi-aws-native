// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The AWS::GameLift::GameServerGroup resource creates an Amazon GameLift (GameLift) GameServerGroup.
 */
export class GameServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing GameServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GameServerGroup {
        return new GameServerGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:gamelift:GameServerGroup';

    /**
     * Returns true if the given object is an instance of GameServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameServerGroup.__pulumiType;
    }

    /**
     * A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
     */
    public /*out*/ readonly autoScalingGroupArn!: pulumi.Output<string>;
    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
     */
    public readonly autoScalingPolicy!: pulumi.Output<outputs.gamelift.GameServerGroupAutoScalingPolicy | undefined>;
    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
     */
    public readonly balancingStrategy!: pulumi.Output<enums.gamelift.GameServerGroupBalancingStrategy | undefined>;
    /**
     * The type of delete to perform.
     */
    public readonly deleteOption!: pulumi.Output<enums.gamelift.GameServerGroupDeleteOption | undefined>;
    /**
     * A generated unique ID for the game server group.
     */
    public /*out*/ readonly gameServerGroupArn!: pulumi.Output<string>;
    /**
     * An identifier for the new game server group.
     */
    public readonly gameServerGroupName!: pulumi.Output<string>;
    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     */
    public readonly gameServerProtectionPolicy!: pulumi.Output<enums.gamelift.GameServerGroupGameServerProtectionPolicy | undefined>;
    /**
     * A set of EC2 instance types to use when creating instances in the group.
     */
    public readonly instanceDefinitions!: pulumi.Output<outputs.gamelift.GameServerGroupInstanceDefinition[]>;
    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
     */
    public readonly launchTemplate!: pulumi.Output<outputs.gamelift.GameServerGroupLaunchTemplate>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     */
    public readonly maxSize!: pulumi.Output<number | undefined>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     */
    public readonly minSize!: pulumi.Output<number | undefined>;
    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * A list of labels to assign to the new game server group resource.
     */
    public readonly tags!: pulumi.Output<outputs.gamelift.GameServerGroupTag[] | undefined>;
    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
     */
    public readonly vpcSubnets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a GameServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameServerGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceDefinitions'");
            }
            if ((!args || args.launchTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplate'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["autoScalingPolicy"] = args ? args.autoScalingPolicy : undefined;
            inputs["balancingStrategy"] = args ? args.balancingStrategy : undefined;
            inputs["deleteOption"] = args ? args.deleteOption : undefined;
            inputs["gameServerGroupName"] = args ? args.gameServerGroupName : undefined;
            inputs["gameServerProtectionPolicy"] = args ? args.gameServerProtectionPolicy : undefined;
            inputs["instanceDefinitions"] = args ? args.instanceDefinitions : undefined;
            inputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            inputs["maxSize"] = args ? args.maxSize : undefined;
            inputs["minSize"] = args ? args.minSize : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            inputs["autoScalingGroupArn"] = undefined /*out*/;
            inputs["gameServerGroupArn"] = undefined /*out*/;
        } else {
            inputs["autoScalingGroupArn"] = undefined /*out*/;
            inputs["autoScalingPolicy"] = undefined /*out*/;
            inputs["balancingStrategy"] = undefined /*out*/;
            inputs["deleteOption"] = undefined /*out*/;
            inputs["gameServerGroupArn"] = undefined /*out*/;
            inputs["gameServerGroupName"] = undefined /*out*/;
            inputs["gameServerProtectionPolicy"] = undefined /*out*/;
            inputs["instanceDefinitions"] = undefined /*out*/;
            inputs["launchTemplate"] = undefined /*out*/;
            inputs["maxSize"] = undefined /*out*/;
            inputs["minSize"] = undefined /*out*/;
            inputs["roleArn"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["vpcSubnets"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(GameServerGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a GameServerGroup resource.
 */
export interface GameServerGroupArgs {
    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
     */
    autoScalingPolicy?: pulumi.Input<inputs.gamelift.GameServerGroupAutoScalingPolicyArgs>;
    /**
     * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
     */
    balancingStrategy?: pulumi.Input<enums.gamelift.GameServerGroupBalancingStrategy>;
    /**
     * The type of delete to perform.
     */
    deleteOption?: pulumi.Input<enums.gamelift.GameServerGroupDeleteOption>;
    /**
     * An identifier for the new game server group.
     */
    gameServerGroupName?: pulumi.Input<string>;
    /**
     * A flag that indicates whether instances in the game server group are protected from early termination.
     */
    gameServerProtectionPolicy?: pulumi.Input<enums.gamelift.GameServerGroupGameServerProtectionPolicy>;
    /**
     * A set of EC2 instance types to use when creating instances in the group.
     */
    instanceDefinitions: pulumi.Input<pulumi.Input<inputs.gamelift.GameServerGroupInstanceDefinitionArgs>[]>;
    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
     */
    launchTemplate: pulumi.Input<inputs.gamelift.GameServerGroupLaunchTemplateArgs>;
    /**
     * The maximum number of instances allowed in the EC2 Auto Scaling group.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum number of instances allowed in the EC2 Auto Scaling group.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
     */
    roleArn: pulumi.Input<string>;
    /**
     * A list of labels to assign to the new game server group resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.gamelift.GameServerGroupTagArgs>[]>;
    /**
     * A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
