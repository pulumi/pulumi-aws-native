// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
 */
export function getMatchmakingConfiguration(args: GetMatchmakingConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetMatchmakingConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:gamelift:getMatchmakingConfiguration", {
        "name": args.name,
    }, opts);
}

export interface GetMatchmakingConfigurationArgs {
    /**
     * A unique identifier for the matchmaking configuration.
     */
    name: string;
}

export interface GetMatchmakingConfigurationResult {
    /**
     * A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
     */
    readonly acceptanceRequired?: boolean;
    /**
     * The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
     */
    readonly acceptanceTimeoutSeconds?: number;
    /**
     * The number of player slots in a match to keep open for future players.
     */
    readonly additionalPlayerCount?: number;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it.
     */
    readonly arn?: string;
    /**
     * The method used to backfill game sessions created with this matchmaking configuration.
     */
    readonly backfillMode?: enums.gamelift.MatchmakingConfigurationBackfillMode;
    /**
     * A time stamp indicating when this data object was created.
     */
    readonly creationTime?: string;
    /**
     * Information to attach to all events related to the matchmaking configuration.
     */
    readonly customEventData?: string;
    /**
     * A descriptive label that is associated with matchmaking configuration.
     */
    readonly description?: string;
    /**
     * Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
     */
    readonly flexMatchMode?: enums.gamelift.MatchmakingConfigurationFlexMatchMode;
    /**
     * A set of custom properties for a game session, formatted as key:value pairs.
     */
    readonly gameProperties?: outputs.gamelift.MatchmakingConfigurationGameProperty[];
    /**
     * A set of custom game session properties, formatted as a single string value.
     */
    readonly gameSessionData?: string;
    /**
     * The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
     */
    readonly gameSessionQueueArns?: string[];
    /**
     * An SNS topic ARN that is set up to receive matchmaking notifications.
     */
    readonly notificationTarget?: string;
    /**
     * The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
     */
    readonly requestTimeoutSeconds?: number;
    /**
     * The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
     */
    readonly ruleSetArn?: string;
    /**
     * A unique identifier for the matchmaking rule set to use with this configuration.
     */
    readonly ruleSetName?: string;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.gamelift.MatchmakingConfigurationTag[];
}
/**
 * The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
 */
export function getMatchmakingConfigurationOutput(args: GetMatchmakingConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMatchmakingConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getMatchmakingConfiguration(a, opts))
}

export interface GetMatchmakingConfigurationOutputArgs {
    /**
     * A unique identifier for the matchmaking configuration.
     */
    name: pulumi.Input<string>;
}
