// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::WorkSpacesWeb::Portal Resource Type
 */
export function getPortal(args: GetPortalArgs, opts?: pulumi.InvokeOptions): Promise<GetPortalResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:workspacesweb:getPortal", {
        "portalArn": args.portalArn,
    }, opts);
}

export interface GetPortalArgs {
    portalArn: string;
}

export interface GetPortalResult {
    readonly authenticationType?: enums.workspacesweb.PortalAuthenticationType;
    readonly browserSettingsArn?: string;
    readonly browserType?: enums.workspacesweb.PortalBrowserType;
    readonly creationDate?: string;
    readonly displayName?: string;
    readonly ipAccessSettingsArn?: string;
    readonly networkSettingsArn?: string;
    readonly portalArn?: string;
    readonly portalEndpoint?: string;
    readonly portalStatus?: enums.workspacesweb.PortalStatus;
    readonly rendererType?: enums.workspacesweb.PortalRendererType;
    readonly serviceProviderSamlMetadata?: string;
    readonly statusReason?: string;
    readonly tags?: outputs.Tag[];
    readonly trustStoreArn?: string;
    readonly userAccessLoggingSettingsArn?: string;
    readonly userSettingsArn?: string;
}
/**
 * Definition of AWS::WorkSpacesWeb::Portal Resource Type
 */
export function getPortalOutput(args: GetPortalOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPortalResult> {
    return pulumi.output(args).apply((a: any) => getPortal(a, opts))
}

export interface GetPortalOutputArgs {
    portalArn: pulumi.Input<string>;
}
