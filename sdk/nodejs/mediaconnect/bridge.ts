// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaConnect::Bridge
 */
export class Bridge extends pulumi.CustomResource {
    /**
     * Get an existing Bridge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Bridge {
        return new Bridge(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:mediaconnect:Bridge';

    /**
     * Returns true if the given object is an instance of Bridge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bridge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bridge.__pulumiType;
    }

    /**
     * The Amazon Resource Number (ARN) of the bridge.
     */
    declare public /*out*/ readonly bridgeArn: pulumi.Output<string>;
    /**
     * The current status of the bridge. Possible values are: ACTIVE or STANDBY.
     */
    declare public /*out*/ readonly bridgeState: pulumi.Output<enums.mediaconnect.BridgeStateEnum>;
    /**
     * An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
     */
    declare public readonly egressGatewayBridge: pulumi.Output<outputs.mediaconnect.BridgeEgressGatewayBridge | undefined>;
    /**
     * An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
     */
    declare public readonly ingressGatewayBridge: pulumi.Output<outputs.mediaconnect.BridgeIngressGatewayBridge | undefined>;
    /**
     * The name of the bridge.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The outputs on this bridge.
     */
    declare public readonly outputs: pulumi.Output<outputs.mediaconnect.BridgeOutput[] | undefined>;
    /**
     * The placement Amazon Resource Number (ARN) of the bridge.
     */
    declare public readonly placementArn: pulumi.Output<string>;
    /**
     * The settings for source failover.
     */
    declare public readonly sourceFailoverConfig: pulumi.Output<outputs.mediaconnect.BridgeFailoverConfig | undefined>;
    /**
     * The sources on this bridge.
     */
    declare public readonly sources: pulumi.Output<outputs.mediaconnect.BridgeSource[]>;

    /**
     * Create a Bridge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BridgeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.placementArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'placementArn'");
            }
            if (args?.sources === undefined && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["egressGatewayBridge"] = args?.egressGatewayBridge;
            resourceInputs["ingressGatewayBridge"] = args?.ingressGatewayBridge;
            resourceInputs["name"] = args?.name;
            resourceInputs["outputs"] = args?.outputs;
            resourceInputs["placementArn"] = args?.placementArn;
            resourceInputs["sourceFailoverConfig"] = args?.sourceFailoverConfig;
            resourceInputs["sources"] = args?.sources;
            resourceInputs["bridgeArn"] = undefined /*out*/;
            resourceInputs["bridgeState"] = undefined /*out*/;
        } else {
            resourceInputs["bridgeArn"] = undefined /*out*/;
            resourceInputs["bridgeState"] = undefined /*out*/;
            resourceInputs["egressGatewayBridge"] = undefined /*out*/;
            resourceInputs["ingressGatewayBridge"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["placementArn"] = undefined /*out*/;
            resourceInputs["sourceFailoverConfig"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bridge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Bridge resource.
 */
export interface BridgeArgs {
    /**
     * An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.
     */
    egressGatewayBridge?: pulumi.Input<inputs.mediaconnect.BridgeEgressGatewayBridgeArgs>;
    /**
     * An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.
     */
    ingressGatewayBridge?: pulumi.Input<inputs.mediaconnect.BridgeIngressGatewayBridgeArgs>;
    /**
     * The name of the bridge.
     */
    name?: pulumi.Input<string>;
    /**
     * The outputs on this bridge.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.mediaconnect.BridgeOutputArgs>[]>;
    /**
     * The placement Amazon Resource Number (ARN) of the bridge.
     */
    placementArn: pulumi.Input<string>;
    /**
     * The settings for source failover.
     */
    sourceFailoverConfig?: pulumi.Input<inputs.mediaconnect.BridgeFailoverConfigArgs>;
    /**
     * The sources on this bridge.
     */
    sources: pulumi.Input<pulumi.Input<inputs.mediaconnect.BridgeSourceArgs>[]>;
}
