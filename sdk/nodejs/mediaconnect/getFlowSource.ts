// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::MediaConnect::FlowSource
 */
export function getFlowSource(args: GetFlowSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowSourceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:mediaconnect:getFlowSource", {
        "sourceArn": args.sourceArn,
    }, opts);
}

export interface GetFlowSourceArgs {
    /**
     * The ARN of the source.
     */
    sourceArn: string;
}

export interface GetFlowSourceResult {
    /**
     * The type of encryption that is used on the content ingested from this source.
     */
    readonly decryption?: outputs.mediaconnect.FlowSourceEncryption;
    /**
     * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     */
    readonly description?: string;
    /**
     * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
     */
    readonly entitlementArn?: string;
    /**
     * The ARN of the flow.
     */
    readonly flowArn?: string;
    /**
     * The IP address that the flow will be listening on for incoming content.
     */
    readonly ingestIp?: string;
    /**
     * The port that the flow will be listening on for incoming content.
     */
    readonly ingestPort?: number;
    /**
     * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     */
    readonly maxBitrate?: number;
    /**
     * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     */
    readonly maxLatency?: number;
    /**
     * The protocol that is used by the source.
     */
    readonly protocol?: enums.mediaconnect.FlowSourceProtocol;
    /**
     * The ARN of the source.
     */
    readonly sourceArn?: string;
    /**
     * The port that the flow will be listening on for incoming content.(ReadOnly)
     */
    readonly sourceIngestPort?: string;
    /**
     * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     */
    readonly streamId?: string;
    /**
     * The name of the VPC Interface this Source is configured with.
     */
    readonly vpcInterfaceName?: string;
    /**
     * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     */
    readonly whitelistCidr?: string;
}

export function getFlowSourceOutput(args: GetFlowSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlowSourceResult> {
    return pulumi.output(args).apply(a => getFlowSource(a, opts))
}

export interface GetFlowSourceOutputArgs {
    /**
     * The ARN of the source.
     */
    sourceArn: pulumi.Input<string>;
}
