// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppArgs } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { ElasticLoadBalancerAttachmentArgs } from "./elasticLoadBalancerAttachment";
export type ElasticLoadBalancerAttachment = import("./elasticLoadBalancerAttachment").ElasticLoadBalancerAttachment;
export const ElasticLoadBalancerAttachment: typeof import("./elasticLoadBalancerAttachment").ElasticLoadBalancerAttachment = null as any;
utilities.lazyLoad(exports, ["ElasticLoadBalancerAttachment"], () => require("./elasticLoadBalancerAttachment"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetElasticLoadBalancerAttachmentArgs, GetElasticLoadBalancerAttachmentResult, GetElasticLoadBalancerAttachmentOutputArgs } from "./getElasticLoadBalancerAttachment";
export const getElasticLoadBalancerAttachment: typeof import("./getElasticLoadBalancerAttachment").getElasticLoadBalancerAttachment = null as any;
export const getElasticLoadBalancerAttachmentOutput: typeof import("./getElasticLoadBalancerAttachment").getElasticLoadBalancerAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getElasticLoadBalancerAttachment","getElasticLoadBalancerAttachmentOutput"], () => require("./getElasticLoadBalancerAttachment"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetLayerArgs, GetLayerResult, GetLayerOutputArgs } from "./getLayer";
export const getLayer: typeof import("./getLayer").getLayer = null as any;
export const getLayerOutput: typeof import("./getLayer").getLayerOutput = null as any;
utilities.lazyLoad(exports, ["getLayer","getLayerOutput"], () => require("./getLayer"));

export { GetStackArgs, GetStackResult, GetStackOutputArgs } from "./getStack";
export const getStack: typeof import("./getStack").getStack = null as any;
export const getStackOutput: typeof import("./getStack").getStackOutput = null as any;
utilities.lazyLoad(exports, ["getStack","getStackOutput"], () => require("./getStack"));

export { GetUserProfileArgs, GetUserProfileResult, GetUserProfileOutputArgs } from "./getUserProfile";
export const getUserProfile: typeof import("./getUserProfile").getUserProfile = null as any;
export const getUserProfileOutput: typeof import("./getUserProfile").getUserProfileOutput = null as any;
utilities.lazyLoad(exports, ["getUserProfile","getUserProfileOutput"], () => require("./getUserProfile"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { LayerArgs } from "./layer";
export type Layer = import("./layer").Layer;
export const Layer: typeof import("./layer").Layer = null as any;
utilities.lazyLoad(exports, ["Layer"], () => require("./layer"));

export { StackArgs } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { UserProfileArgs } from "./userProfile";
export type UserProfile = import("./userProfile").UserProfile;
export const UserProfile: typeof import("./userProfile").UserProfile = null as any;
utilities.lazyLoad(exports, ["UserProfile"], () => require("./userProfile"));

export { VolumeArgs } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:opsworks:App":
                return new App(name, <any>undefined, { urn })
            case "aws-native:opsworks:ElasticLoadBalancerAttachment":
                return new ElasticLoadBalancerAttachment(name, <any>undefined, { urn })
            case "aws-native:opsworks:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws-native:opsworks:Layer":
                return new Layer(name, <any>undefined, { urn })
            case "aws-native:opsworks:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "aws-native:opsworks:UserProfile":
                return new UserProfile(name, <any>undefined, { urn })
            case "aws-native:opsworks:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "opsworks", _module)
