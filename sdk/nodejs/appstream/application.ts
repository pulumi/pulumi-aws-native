// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::AppStream::Application
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:appstream:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    public readonly appBlockArn!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly attributesToDelete!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly iconS3Location!: pulumi.Output<outputs.appstream.ApplicationS3Location>;
    public readonly instanceFamilies!: pulumi.Output<string[]>;
    public readonly launchParameters!: pulumi.Output<string | undefined>;
    public readonly launchPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly platforms!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.appstream.ApplicationTag[] | undefined>;
    public readonly workingDirectory!: pulumi.Output<string | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.appBlockArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appBlockArn'");
            }
            if ((!args || args.iconS3Location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iconS3Location'");
            }
            if ((!args || args.instanceFamilies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFamilies'");
            }
            if ((!args || args.launchPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchPath'");
            }
            if ((!args || args.platforms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platforms'");
            }
            inputs["appBlockArn"] = args ? args.appBlockArn : undefined;
            inputs["attributesToDelete"] = args ? args.attributesToDelete : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["iconS3Location"] = args ? args.iconS3Location : undefined;
            inputs["instanceFamilies"] = args ? args.instanceFamilies : undefined;
            inputs["launchParameters"] = args ? args.launchParameters : undefined;
            inputs["launchPath"] = args ? args.launchPath : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["platforms"] = args ? args.platforms : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
        } else {
            inputs["appBlockArn"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["attributesToDelete"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["iconS3Location"] = undefined /*out*/;
            inputs["instanceFamilies"] = undefined /*out*/;
            inputs["launchParameters"] = undefined /*out*/;
            inputs["launchPath"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["platforms"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["workingDirectory"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    appBlockArn: pulumi.Input<string>;
    attributesToDelete?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    iconS3Location: pulumi.Input<inputs.appstream.ApplicationS3LocationArgs>;
    instanceFamilies: pulumi.Input<pulumi.Input<string>[]>;
    launchParameters?: pulumi.Input<string>;
    launchPath: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platforms: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.appstream.ApplicationTagArgs>[]>;
    workingDirectory?: pulumi.Input<string>;
}
