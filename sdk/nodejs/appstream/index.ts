// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppBlockArgs } from "./appBlock";
export type AppBlock = import("./appBlock").AppBlock;
export const AppBlock: typeof import("./appBlock").AppBlock = null as any;
utilities.lazyLoad(exports, ["AppBlock"], () => require("./appBlock"));

export { AppBlockBuilderArgs } from "./appBlockBuilder";
export type AppBlockBuilder = import("./appBlockBuilder").AppBlockBuilder;
export const AppBlockBuilder: typeof import("./appBlockBuilder").AppBlockBuilder = null as any;
utilities.lazyLoad(exports, ["AppBlockBuilder"], () => require("./appBlockBuilder"));

export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationEntitlementAssociationArgs } from "./applicationEntitlementAssociation";
export type ApplicationEntitlementAssociation = import("./applicationEntitlementAssociation").ApplicationEntitlementAssociation;
export const ApplicationEntitlementAssociation: typeof import("./applicationEntitlementAssociation").ApplicationEntitlementAssociation = null as any;
utilities.lazyLoad(exports, ["ApplicationEntitlementAssociation"], () => require("./applicationEntitlementAssociation"));

export { ApplicationFleetAssociationArgs } from "./applicationFleetAssociation";
export type ApplicationFleetAssociation = import("./applicationFleetAssociation").ApplicationFleetAssociation;
export const ApplicationFleetAssociation: typeof import("./applicationFleetAssociation").ApplicationFleetAssociation = null as any;
utilities.lazyLoad(exports, ["ApplicationFleetAssociation"], () => require("./applicationFleetAssociation"));

export { DirectoryConfigArgs } from "./directoryConfig";
export type DirectoryConfig = import("./directoryConfig").DirectoryConfig;
export const DirectoryConfig: typeof import("./directoryConfig").DirectoryConfig = null as any;
utilities.lazyLoad(exports, ["DirectoryConfig"], () => require("./directoryConfig"));

export { EntitlementArgs } from "./entitlement";
export type Entitlement = import("./entitlement").Entitlement;
export const Entitlement: typeof import("./entitlement").Entitlement = null as any;
utilities.lazyLoad(exports, ["Entitlement"], () => require("./entitlement"));

export { GetAppBlockArgs, GetAppBlockResult, GetAppBlockOutputArgs } from "./getAppBlock";
export const getAppBlock: typeof import("./getAppBlock").getAppBlock = null as any;
export const getAppBlockOutput: typeof import("./getAppBlock").getAppBlockOutput = null as any;
utilities.lazyLoad(exports, ["getAppBlock","getAppBlockOutput"], () => require("./getAppBlock"));

export { GetAppBlockBuilderArgs, GetAppBlockBuilderResult, GetAppBlockBuilderOutputArgs } from "./getAppBlockBuilder";
export const getAppBlockBuilder: typeof import("./getAppBlockBuilder").getAppBlockBuilder = null as any;
export const getAppBlockBuilderOutput: typeof import("./getAppBlockBuilder").getAppBlockBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getAppBlockBuilder","getAppBlockBuilderOutput"], () => require("./getAppBlockBuilder"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetDirectoryConfigArgs, GetDirectoryConfigResult, GetDirectoryConfigOutputArgs } from "./getDirectoryConfig";
export const getDirectoryConfig: typeof import("./getDirectoryConfig").getDirectoryConfig = null as any;
export const getDirectoryConfigOutput: typeof import("./getDirectoryConfig").getDirectoryConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDirectoryConfig","getDirectoryConfigOutput"], () => require("./getDirectoryConfig"));

export { GetEntitlementArgs, GetEntitlementResult, GetEntitlementOutputArgs } from "./getEntitlement";
export const getEntitlement: typeof import("./getEntitlement").getEntitlement = null as any;
export const getEntitlementOutput: typeof import("./getEntitlement").getEntitlementOutput = null as any;
utilities.lazyLoad(exports, ["getEntitlement","getEntitlementOutput"], () => require("./getEntitlement"));

export { GetImageBuilderArgs, GetImageBuilderResult, GetImageBuilderOutputArgs } from "./getImageBuilder";
export const getImageBuilder: typeof import("./getImageBuilder").getImageBuilder = null as any;
export const getImageBuilderOutput: typeof import("./getImageBuilder").getImageBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getImageBuilder","getImageBuilderOutput"], () => require("./getImageBuilder"));

export { ImageBuilderArgs } from "./imageBuilder";
export type ImageBuilder = import("./imageBuilder").ImageBuilder;
export const ImageBuilder: typeof import("./imageBuilder").ImageBuilder = null as any;
utilities.lazyLoad(exports, ["ImageBuilder"], () => require("./imageBuilder"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:appstream:AppBlock":
                return new AppBlock(name, <any>undefined, { urn })
            case "aws-native:appstream:AppBlockBuilder":
                return new AppBlockBuilder(name, <any>undefined, { urn })
            case "aws-native:appstream:Application":
                return new Application(name, <any>undefined, { urn })
            case "aws-native:appstream:ApplicationEntitlementAssociation":
                return new ApplicationEntitlementAssociation(name, <any>undefined, { urn })
            case "aws-native:appstream:ApplicationFleetAssociation":
                return new ApplicationFleetAssociation(name, <any>undefined, { urn })
            case "aws-native:appstream:DirectoryConfig":
                return new DirectoryConfig(name, <any>undefined, { urn })
            case "aws-native:appstream:Entitlement":
                return new Entitlement(name, <any>undefined, { urn })
            case "aws-native:appstream:ImageBuilder":
                return new ImageBuilder(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "appstream", _module)
