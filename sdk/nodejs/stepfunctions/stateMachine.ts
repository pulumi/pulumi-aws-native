// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for StateMachine
 */
export class StateMachine extends pulumi.CustomResource {
    /**
     * Get an existing StateMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StateMachine {
        return new StateMachine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:stepfunctions:StateMachine';

    /**
     * Returns true if the given object is an instance of StateMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StateMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StateMachine.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly definition!: pulumi.Output<outputs.stepfunctions.StateMachineDefinition | undefined>;
    public readonly definitionS3Location!: pulumi.Output<outputs.stepfunctions.StateMachineS3Location | undefined>;
    public readonly definitionString!: pulumi.Output<string | undefined>;
    public readonly definitionSubstitutions!: pulumi.Output<outputs.stepfunctions.StateMachineDefinitionSubstitutions | undefined>;
    public readonly loggingConfiguration!: pulumi.Output<outputs.stepfunctions.StateMachineLoggingConfiguration | undefined>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly stateMachineName!: pulumi.Output<string | undefined>;
    public readonly stateMachineType!: pulumi.Output<enums.stepfunctions.StateMachineStateMachineType | undefined>;
    public readonly tags!: pulumi.Output<outputs.stepfunctions.StateMachineTagsEntry[] | undefined>;
    public readonly tracingConfiguration!: pulumi.Output<outputs.stepfunctions.StateMachineTracingConfiguration | undefined>;

    /**
     * Create a StateMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateMachineArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["definition"] = args ? args.definition : undefined;
            inputs["definitionS3Location"] = args ? args.definitionS3Location : undefined;
            inputs["definitionString"] = args ? args.definitionString : undefined;
            inputs["definitionSubstitutions"] = args ? args.definitionSubstitutions : undefined;
            inputs["loggingConfiguration"] = args ? args.loggingConfiguration : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["stateMachineName"] = args ? args.stateMachineName : undefined;
            inputs["stateMachineType"] = args ? args.stateMachineType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tracingConfiguration"] = args ? args.tracingConfiguration : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["definition"] = undefined /*out*/;
            inputs["definitionS3Location"] = undefined /*out*/;
            inputs["definitionString"] = undefined /*out*/;
            inputs["definitionSubstitutions"] = undefined /*out*/;
            inputs["loggingConfiguration"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["roleArn"] = undefined /*out*/;
            inputs["stateMachineName"] = undefined /*out*/;
            inputs["stateMachineType"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["tracingConfiguration"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(StateMachine.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a StateMachine resource.
 */
export interface StateMachineArgs {
    definition?: pulumi.Input<inputs.stepfunctions.StateMachineDefinitionArgs>;
    definitionS3Location?: pulumi.Input<inputs.stepfunctions.StateMachineS3LocationArgs>;
    definitionString?: pulumi.Input<string>;
    definitionSubstitutions?: pulumi.Input<inputs.stepfunctions.StateMachineDefinitionSubstitutionsArgs>;
    loggingConfiguration?: pulumi.Input<inputs.stepfunctions.StateMachineLoggingConfigurationArgs>;
    roleArn: pulumi.Input<string>;
    stateMachineName?: pulumi.Input<string>;
    stateMachineType?: pulumi.Input<enums.stepfunctions.StateMachineStateMachineType>;
    tags?: pulumi.Input<pulumi.Input<inputs.stepfunctions.StateMachineTagsEntryArgs>[]>;
    tracingConfiguration?: pulumi.Input<inputs.stepfunctions.StateMachineTracingConfigurationArgs>;
}
