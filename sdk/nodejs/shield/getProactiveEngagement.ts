// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
 */
export function getProactiveEngagement(args: GetProactiveEngagementArgs, opts?: pulumi.InvokeOptions): Promise<GetProactiveEngagementResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:shield:getProactiveEngagement", {
        "accountId": args.accountId,
    }, opts);
}

export interface GetProactiveEngagementArgs {
    accountId: string;
}

export interface GetProactiveEngagementResult {
    readonly accountId?: string;
    /**
     * A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you for escalations to the SRT and to initiate proactive customer support.
     * To enable proactive engagement, the contact list must include at least one phone number.
     */
    readonly emergencyContactList?: outputs.shield.ProactiveEngagementEmergencyContact[];
    /**
     * If `ENABLED`, the Shield Response Team (SRT) will use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
     * If `DISABLED`, the SRT will not proactively notify contacts about escalations or to initiate proactive customer support.
     */
    readonly proactiveEngagementStatus?: enums.shield.ProactiveEngagementStatus;
}
/**
 * Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
 */
export function getProactiveEngagementOutput(args: GetProactiveEngagementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProactiveEngagementResult> {
    return pulumi.output(args).apply((a: any) => getProactiveEngagement(a, opts))
}

export interface GetProactiveEngagementOutputArgs {
    accountId: pulumi.Input<string>;
}
