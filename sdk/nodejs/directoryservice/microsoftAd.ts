// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::DirectoryService::MicrosoftAD
 *
 * @deprecated MicrosoftAd is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class MicrosoftAd extends pulumi.CustomResource {
    /**
     * Get an existing MicrosoftAd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MicrosoftAd {
        pulumi.log.warn("MicrosoftAd is deprecated: MicrosoftAd is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new MicrosoftAd(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:directoryservice:MicrosoftAd';

    /**
     * Returns true if the given object is an instance of MicrosoftAd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MicrosoftAd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MicrosoftAd.__pulumiType;
    }

    public /*out*/ readonly alias!: pulumi.Output<string>;
    public readonly createAlias!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly dnsIpAddresses!: pulumi.Output<string[]>;
    public readonly edition!: pulumi.Output<string | undefined>;
    public readonly enableSso!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly shortName!: pulumi.Output<string | undefined>;
    public readonly vpcSettings!: pulumi.Output<outputs.directoryservice.MicrosoftAdVpcSettings>;

    /**
     * Create a MicrosoftAd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated MicrosoftAd is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: MicrosoftAdArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("MicrosoftAd is deprecated: MicrosoftAd is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.vpcSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSettings'");
            }
            resourceInputs["createAlias"] = args ? args.createAlias : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["enableSso"] = args ? args.enableSso : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["vpcSettings"] = args ? args.vpcSettings : undefined;
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["dnsIpAddresses"] = undefined /*out*/;
        } else {
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["createAlias"] = undefined /*out*/;
            resourceInputs["dnsIpAddresses"] = undefined /*out*/;
            resourceInputs["edition"] = undefined /*out*/;
            resourceInputs["enableSso"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["shortName"] = undefined /*out*/;
            resourceInputs["vpcSettings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["createAlias", "edition", "name", "password", "shortName", "vpcSettings"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MicrosoftAd.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MicrosoftAd resource.
 */
export interface MicrosoftAdArgs {
    createAlias?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    enableSso?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    shortName?: pulumi.Input<string>;
    vpcSettings: pulumi.Input<inputs.directoryservice.MicrosoftAdVpcSettingsArgs>;
}
