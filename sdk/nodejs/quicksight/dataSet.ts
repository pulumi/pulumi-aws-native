// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of the AWS::QuickSight::DataSet Resource Type.
 */
export class DataSet extends pulumi.CustomResource {
    /**
     * Get an existing DataSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DataSet {
        return new DataSet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:quicksight:DataSet';

    /**
     * Returns true if the given object is an instance of DataSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSet.__pulumiType;
    }

    /**
     * <p>The Amazon Resource Name (ARN) of the resource.</p>
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The AWS account ID.
     */
    declare public readonly awsAccountId: pulumi.Output<string | undefined>;
    /**
     * <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
     */
    declare public readonly columnGroups: pulumi.Output<outputs.quicksight.DataSetColumnGroup[] | undefined>;
    /**
     * <p>A set of one or more definitions of a <code>
     *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a>
     *             </code>.</p>
     */
    declare public readonly columnLevelPermissionRules: pulumi.Output<outputs.quicksight.DataSetColumnLevelPermissionRule[] | undefined>;
    /**
     * <p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't
     *             imported into SPICE.</p>
     */
    declare public /*out*/ readonly consumedSpiceCapacityInBytes: pulumi.Output<number>;
    /**
     * <p>The time that this dataset was created.</p>
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.
     */
    declare public readonly dataSetId: pulumi.Output<string | undefined>;
    /**
     * The refresh properties of a dataset.
     */
    declare public readonly dataSetRefreshProperties: pulumi.Output<outputs.quicksight.DataSetRefreshProperties | undefined>;
    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source.
     */
    declare public readonly dataSetUsageConfiguration: pulumi.Output<outputs.quicksight.DataSetUsageConfiguration | undefined>;
    /**
     * <p>The parameter declarations of the dataset.</p>
     */
    declare public readonly datasetParameters: pulumi.Output<outputs.quicksight.DataSetDatasetParameter[] | undefined>;
    /**
     * The folder that contains fields and nested subfolders for your dataset.
     */
    declare public readonly fieldFolders: pulumi.Output<{[key: string]: outputs.quicksight.DataSetFieldFolder} | undefined>;
    /**
     * <p>When you create the dataset, Amazon QuickSight adds the dataset to these folders.</p>
     */
    declare public readonly folderArns: pulumi.Output<string[] | undefined>;
    /**
     * Indicates whether you want to import the data into SPICE.
     */
    declare public readonly importMode: pulumi.Output<enums.quicksight.DataSetImportMode | undefined>;
    /**
     * The wait policy to use when creating or updating a Dataset. The default is to wait for SPICE ingestion to finish with timeout of 36 hours.
     */
    declare public readonly ingestionWaitPolicy: pulumi.Output<outputs.quicksight.DataSetIngestionWaitPolicy | undefined>;
    /**
     * <p>The last time that this dataset was updated.</p>
     */
    declare public /*out*/ readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * Configures the combination and transformation of the data from the physical tables.
     */
    declare public readonly logicalTableMap: pulumi.Output<{[key: string]: outputs.quicksight.DataSetLogicalTable} | undefined>;
    /**
     * <p>The display name for the dataset.</p>
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * <p>The list of columns after all transforms. These columns are available in templates,
     *             analyses, and dashboards.</p>
     */
    declare public /*out*/ readonly outputColumns: pulumi.Output<outputs.quicksight.DataSetOutputColumn[]>;
    /**
     * The performance optimization configuration of a dataset.
     */
    declare public readonly performanceConfiguration: pulumi.Output<outputs.quicksight.DataSetPerformanceConfiguration | undefined>;
    /**
     * <p>A list of resource permissions on the dataset.</p>
     */
    declare public readonly permissions: pulumi.Output<outputs.quicksight.DataSetResourcePermission[] | undefined>;
    /**
     * Declares the physical tables that are available in the underlying data sources.
     */
    declare public readonly physicalTableMap: pulumi.Output<{[key: string]: outputs.quicksight.DataSetPhysicalTable} | undefined>;
    /**
     * The row-level security configuration for the data that you want to create.
     */
    declare public readonly rowLevelPermissionDataSet: pulumi.Output<outputs.quicksight.DataSetRowLevelPermissionDataSet | undefined>;
    /**
     * The element you can use to define tags for row-level security.
     */
    declare public readonly rowLevelPermissionTagConfiguration: pulumi.Output<outputs.quicksight.DataSetRowLevelPermissionTagConfiguration | undefined>;
    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The usage of the dataset.
     */
    declare public readonly useAs: pulumi.Output<enums.quicksight.DataSetUseAs | undefined>;

    /**
     * Create a DataSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DataSetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["columnGroups"] = args?.columnGroups;
            resourceInputs["columnLevelPermissionRules"] = args?.columnLevelPermissionRules;
            resourceInputs["dataSetId"] = args?.dataSetId;
            resourceInputs["dataSetRefreshProperties"] = args?.dataSetRefreshProperties;
            resourceInputs["dataSetUsageConfiguration"] = args?.dataSetUsageConfiguration;
            resourceInputs["datasetParameters"] = args?.datasetParameters;
            resourceInputs["fieldFolders"] = args?.fieldFolders;
            resourceInputs["folderArns"] = args?.folderArns;
            resourceInputs["importMode"] = args?.importMode;
            resourceInputs["ingestionWaitPolicy"] = args?.ingestionWaitPolicy;
            resourceInputs["logicalTableMap"] = args?.logicalTableMap;
            resourceInputs["name"] = args?.name;
            resourceInputs["performanceConfiguration"] = args?.performanceConfiguration;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["physicalTableMap"] = args?.physicalTableMap;
            resourceInputs["rowLevelPermissionDataSet"] = args?.rowLevelPermissionDataSet;
            resourceInputs["rowLevelPermissionTagConfiguration"] = args?.rowLevelPermissionTagConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["useAs"] = args?.useAs;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["consumedSpiceCapacityInBytes"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["outputColumns"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsAccountId"] = undefined /*out*/;
            resourceInputs["columnGroups"] = undefined /*out*/;
            resourceInputs["columnLevelPermissionRules"] = undefined /*out*/;
            resourceInputs["consumedSpiceCapacityInBytes"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["dataSetId"] = undefined /*out*/;
            resourceInputs["dataSetRefreshProperties"] = undefined /*out*/;
            resourceInputs["dataSetUsageConfiguration"] = undefined /*out*/;
            resourceInputs["datasetParameters"] = undefined /*out*/;
            resourceInputs["fieldFolders"] = undefined /*out*/;
            resourceInputs["folderArns"] = undefined /*out*/;
            resourceInputs["importMode"] = undefined /*out*/;
            resourceInputs["ingestionWaitPolicy"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["logicalTableMap"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputColumns"] = undefined /*out*/;
            resourceInputs["performanceConfiguration"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["physicalTableMap"] = undefined /*out*/;
            resourceInputs["rowLevelPermissionDataSet"] = undefined /*out*/;
            resourceInputs["rowLevelPermissionTagConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["useAs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["awsAccountId", "dataSetId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DataSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DataSet resource.
 */
export interface DataSetArgs {
    /**
     * The AWS account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * <p>Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.</p>
     */
    columnGroups?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnGroupArgs>[]>;
    /**
     * <p>A set of one or more definitions of a <code>
     *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a>
     *             </code>.</p>
     */
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetColumnLevelPermissionRuleArgs>[]>;
    /**
     * An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.
     */
    dataSetId?: pulumi.Input<string>;
    /**
     * The refresh properties of a dataset.
     */
    dataSetRefreshProperties?: pulumi.Input<inputs.quicksight.DataSetRefreshPropertiesArgs>;
    /**
     * The usage configuration to apply to child datasets that reference this dataset as a source.
     */
    dataSetUsageConfiguration?: pulumi.Input<inputs.quicksight.DataSetUsageConfigurationArgs>;
    /**
     * <p>The parameter declarations of the dataset.</p>
     */
    datasetParameters?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetDatasetParameterArgs>[]>;
    /**
     * The folder that contains fields and nested subfolders for your dataset.
     */
    fieldFolders?: pulumi.Input<{[key: string]: pulumi.Input<inputs.quicksight.DataSetFieldFolderArgs>}>;
    /**
     * <p>When you create the dataset, Amazon QuickSight adds the dataset to these folders.</p>
     */
    folderArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether you want to import the data into SPICE.
     */
    importMode?: pulumi.Input<enums.quicksight.DataSetImportMode>;
    /**
     * The wait policy to use when creating or updating a Dataset. The default is to wait for SPICE ingestion to finish with timeout of 36 hours.
     */
    ingestionWaitPolicy?: pulumi.Input<inputs.quicksight.DataSetIngestionWaitPolicyArgs>;
    /**
     * Configures the combination and transformation of the data from the physical tables.
     */
    logicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.quicksight.DataSetLogicalTableArgs>}>;
    /**
     * <p>The display name for the dataset.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * The performance optimization configuration of a dataset.
     */
    performanceConfiguration?: pulumi.Input<inputs.quicksight.DataSetPerformanceConfigurationArgs>;
    /**
     * <p>A list of resource permissions on the dataset.</p>
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.DataSetResourcePermissionArgs>[]>;
    /**
     * Declares the physical tables that are available in the underlying data sources.
     */
    physicalTableMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.quicksight.DataSetPhysicalTableArgs>}>;
    /**
     * The row-level security configuration for the data that you want to create.
     */
    rowLevelPermissionDataSet?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionDataSetArgs>;
    /**
     * The element you can use to define tags for row-level security.
     */
    rowLevelPermissionTagConfiguration?: pulumi.Input<inputs.quicksight.DataSetRowLevelPermissionTagConfigurationArgs>;
    /**
     * <p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The usage of the dataset.
     */
    useAs?: pulumi.Input<enums.quicksight.DataSetUseAs>;
}
