// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of the AWS::QuickSight::Analysis Resource Type.
 */
export class Analysis extends pulumi.CustomResource {
    /**
     * Get an existing Analysis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Analysis {
        return new Analysis(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:quicksight:Analysis';

    /**
     * Returns true if the given object is an instance of Analysis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Analysis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Analysis.__pulumiType;
    }

    /**
     * The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
     */
    declare public readonly analysisId: pulumi.Output<string>;
    /**
     * <p>The Amazon Resource Name (ARN) of the analysis.</p>
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The ID of the AWS account where you are creating an analysis.
     */
    declare public readonly awsAccountId: pulumi.Output<string>;
    /**
     * <p>The time that the analysis was created.</p>
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * <p>The ARNs of the datasets of the analysis.</p>
     */
    declare public /*out*/ readonly dataSetArns: pulumi.Output<string[]>;
    declare public readonly definition: pulumi.Output<outputs.quicksight.AnalysisDefinition | undefined>;
    /**
     * <p>Errors associated with the analysis.</p>
     */
    declare public readonly errors: pulumi.Output<outputs.quicksight.AnalysisError[] | undefined>;
    declare public readonly folderArns: pulumi.Output<string[] | undefined>;
    /**
     * <p>The time that the analysis was last updated.</p>
     */
    declare public /*out*/ readonly lastUpdatedTime: pulumi.Output<string>;
    /**
     * <p>The descriptive name of the analysis.</p>
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
     */
    declare public readonly parameters: pulumi.Output<outputs.quicksight.AnalysisParameters | undefined>;
    /**
     * A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     */
    declare public readonly permissions: pulumi.Output<outputs.quicksight.AnalysisResourcePermission[] | undefined>;
    /**
     * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
     */
    declare public readonly sheets: pulumi.Output<outputs.quicksight.AnalysisSheet[] | undefined>;
    /**
     * A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
     */
    declare public readonly sourceEntity: pulumi.Output<outputs.quicksight.AnalysisSourceEntity | undefined>;
    /**
     * Status associated with the analysis.
     */
    declare public readonly status: pulumi.Output<enums.quicksight.AnalysisResourceStatus | undefined>;
    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * <p>The ARN of the theme of the analysis.</p>
     */
    declare public readonly themeArn: pulumi.Output<string | undefined>;
    /**
     * The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
     */
    declare public readonly validationStrategy: pulumi.Output<outputs.quicksight.AnalysisValidationStrategy | undefined>;

    /**
     * Create a Analysis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnalysisArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.analysisId === undefined && !opts.urn) {
                throw new Error("Missing required property 'analysisId'");
            }
            if (args?.awsAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'awsAccountId'");
            }
            resourceInputs["analysisId"] = args?.analysisId;
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["definition"] = args?.definition;
            resourceInputs["errors"] = args?.errors;
            resourceInputs["folderArns"] = args?.folderArns;
            resourceInputs["name"] = args?.name;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["sheets"] = args?.sheets;
            resourceInputs["sourceEntity"] = args?.sourceEntity;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["themeArn"] = args?.themeArn;
            resourceInputs["validationStrategy"] = args?.validationStrategy;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["dataSetArns"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        } else {
            resourceInputs["analysisId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsAccountId"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["dataSetArns"] = undefined /*out*/;
            resourceInputs["definition"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["folderArns"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["sheets"] = undefined /*out*/;
            resourceInputs["sourceEntity"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["themeArn"] = undefined /*out*/;
            resourceInputs["validationStrategy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["analysisId", "awsAccountId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Analysis.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Analysis resource.
 */
export interface AnalysisArgs {
    /**
     * The ID for the analysis that you're creating. This ID displays in the URL of the analysis.
     */
    analysisId: pulumi.Input<string>;
    /**
     * The ID of the AWS account where you are creating an analysis.
     */
    awsAccountId: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.quicksight.AnalysisDefinitionArgs>;
    /**
     * <p>Errors associated with the analysis.</p>
     */
    errors?: pulumi.Input<pulumi.Input<inputs.quicksight.AnalysisErrorArgs>[]>;
    folderArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * <p>The descriptive name of the analysis.</p>
     */
    name?: pulumi.Input<string>;
    /**
     * The parameter names and override values that you want to use. An analysis can have any parameter type, and some parameters might accept multiple values.
     */
    parameters?: pulumi.Input<inputs.quicksight.AnalysisParametersArgs>;
    /**
     * A structure that describes the principals and the resource-level permissions on an analysis. You can use the `Permissions` structure to grant permissions by providing a list of AWS Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN).
     *
     * To specify no permissions, omit `Permissions` .
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.quicksight.AnalysisResourcePermissionArgs>[]>;
    /**
     * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
     */
    sheets?: pulumi.Input<pulumi.Input<inputs.quicksight.AnalysisSheetArgs>[]>;
    /**
     * A source entity to use for the analysis that you're creating. This metadata structure contains details that describe a source template and one or more datasets.
     *
     * Either a `SourceEntity` or a `Definition` must be provided in order for the request to be valid.
     */
    sourceEntity?: pulumi.Input<inputs.quicksight.AnalysisSourceEntityArgs>;
    /**
     * Status associated with the analysis.
     */
    status?: pulumi.Input<enums.quicksight.AnalysisResourceStatus>;
    /**
     * Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * <p>The ARN of the theme of the analysis.</p>
     */
    themeArn?: pulumi.Input<string>;
    /**
     * The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to `LENIENT` , validation is skipped for specific errors.
     */
    validationStrategy?: pulumi.Input<inputs.quicksight.AnalysisValidationStrategyArgs>;
}
