// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::SES::ConfigurationSet.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const eventDestinationName = config.require("eventDestinationName");
 * const eventType1 = config.require("eventType1");
 * const eventType2 = config.require("eventType2");
 * const eventType3 = config.require("eventType3");
 * const dimensionName1 = config.require("dimensionName1");
 * const dimensionValueSource1 = config.require("dimensionValueSource1");
 * const defaultDimensionValue1 = config.require("defaultDimensionValue1");
 * const dimensionName2 = config.require("dimensionName2");
 * const dimensionValueSource2 = config.require("dimensionValueSource2");
 * const defaultDimensionValue2 = config.require("defaultDimensionValue2");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 * const cwEventDestination = new aws_native.ses.ConfigurationSetEventDestination("cwEventDestination", {
 *     configurationSetName: configSet.id,
 *     eventDestination: {
 *         name: eventDestinationName,
 *         enabled: true,
 *         matchingEventTypes: [
 *             eventType1,
 *             eventType2,
 *             eventType3,
 *         ],
 *         cloudWatchDestination: {
 *             dimensionConfigurations: [
 *                 {
 *                     dimensionName: dimensionName1,
 *                     dimensionValueSource: dimensionValueSource1,
 *                     defaultDimensionValue: defaultDimensionValue1,
 *                 },
 *                 {
 *                     dimensionName: dimensionName2,
 *                     dimensionValueSource: dimensionValueSource2,
 *                     defaultDimensionValue: defaultDimensionValue2,
 *                 },
 *             ],
 *         },
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const config = new pulumi.Config();
 * const configSetName = config.require("configSetName");
 * const eventDestinationName = config.require("eventDestinationName");
 * const eventType1 = config.require("eventType1");
 * const eventType2 = config.require("eventType2");
 * const eventType3 = config.require("eventType3");
 * const dimensionName1 = config.require("dimensionName1");
 * const dimensionValueSource1 = config.require("dimensionValueSource1");
 * const defaultDimensionValue1 = config.require("defaultDimensionValue1");
 * const dimensionName2 = config.require("dimensionName2");
 * const dimensionValueSource2 = config.require("dimensionValueSource2");
 * const defaultDimensionValue2 = config.require("defaultDimensionValue2");
 * const configSet = new aws_native.ses.ConfigurationSet("configSet", {name: configSetName});
 * const cwEventDestination = new aws_native.ses.ConfigurationSetEventDestination("cwEventDestination", {
 *     configurationSetName: configSet.id,
 *     eventDestination: {
 *         name: eventDestinationName,
 *         enabled: true,
 *         matchingEventTypes: [
 *             eventType1,
 *             eventType2,
 *             eventType3,
 *         ],
 *         cloudWatchDestination: {
 *             dimensionConfigurations: [
 *                 {
 *                     dimensionName: dimensionName1,
 *                     dimensionValueSource: dimensionValueSource1,
 *                     defaultDimensionValue: defaultDimensionValue1,
 *                 },
 *                 {
 *                     dimensionName: dimensionName2,
 *                     dimensionValueSource: dimensionValueSource2,
 *                     defaultDimensionValue: defaultDimensionValue2,
 *                 },
 *             ],
 *         },
 *     },
 * });
 *
 * ```
 */
export class ConfigurationSet extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfigurationSet {
        return new ConfigurationSet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ses:ConfigurationSet';

    /**
     * Returns true if the given object is an instance of ConfigurationSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationSet.__pulumiType;
    }

    /**
     * Specifies the name of the dedicated IP pool to associate with the configuration set and whether messages that use the configuration set are required to use Transport Layer Security (TLS).
     */
    declare public readonly deliveryOptions: pulumi.Output<outputs.ses.ConfigurationSetDeliveryOptions | undefined>;
    /**
     * The name of the configuration set.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
     */
    declare public readonly reputationOptions: pulumi.Output<outputs.ses.ConfigurationSetReputationOptions | undefined>;
    /**
     * An object that defines whether or not Amazon SES can send email that you send using the configuration set.
     */
    declare public readonly sendingOptions: pulumi.Output<outputs.ses.ConfigurationSetSendingOptions | undefined>;
    /**
     * An object that contains information about the suppression list preferences for your account.
     */
    declare public readonly suppressionOptions: pulumi.Output<outputs.ses.ConfigurationSetSuppressionOptions | undefined>;
    /**
     * The tags (keys and values) associated with the contact list.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * An object that defines the open and click tracking options for emails that you send using the configuration set.
     */
    declare public readonly trackingOptions: pulumi.Output<outputs.ses.ConfigurationSetTrackingOptions | undefined>;
    /**
     * The Virtual Deliverability Manager (VDM) options that apply to the configuration set.
     */
    declare public readonly vdmOptions: pulumi.Output<outputs.ses.ConfigurationSetVdmOptions | undefined>;

    /**
     * Create a ConfigurationSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigurationSetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["deliveryOptions"] = args?.deliveryOptions;
            resourceInputs["name"] = args?.name;
            resourceInputs["reputationOptions"] = args?.reputationOptions;
            resourceInputs["sendingOptions"] = args?.sendingOptions;
            resourceInputs["suppressionOptions"] = args?.suppressionOptions;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trackingOptions"] = args?.trackingOptions;
            resourceInputs["vdmOptions"] = args?.vdmOptions;
        } else {
            resourceInputs["deliveryOptions"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["reputationOptions"] = undefined /*out*/;
            resourceInputs["sendingOptions"] = undefined /*out*/;
            resourceInputs["suppressionOptions"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["trackingOptions"] = undefined /*out*/;
            resourceInputs["vdmOptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConfigurationSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfigurationSet resource.
 */
export interface ConfigurationSetArgs {
    /**
     * Specifies the name of the dedicated IP pool to associate with the configuration set and whether messages that use the configuration set are required to use Transport Layer Security (TLS).
     */
    deliveryOptions?: pulumi.Input<inputs.ses.ConfigurationSetDeliveryOptionsArgs>;
    /**
     * The name of the configuration set.
     */
    name?: pulumi.Input<string>;
    /**
     * An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
     */
    reputationOptions?: pulumi.Input<inputs.ses.ConfigurationSetReputationOptionsArgs>;
    /**
     * An object that defines whether or not Amazon SES can send email that you send using the configuration set.
     */
    sendingOptions?: pulumi.Input<inputs.ses.ConfigurationSetSendingOptionsArgs>;
    /**
     * An object that contains information about the suppression list preferences for your account.
     */
    suppressionOptions?: pulumi.Input<inputs.ses.ConfigurationSetSuppressionOptionsArgs>;
    /**
     * The tags (keys and values) associated with the contact list.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * An object that defines the open and click tracking options for emails that you send using the configuration set.
     */
    trackingOptions?: pulumi.Input<inputs.ses.ConfigurationSetTrackingOptionsArgs>;
    /**
     * The Virtual Deliverability Manager (VDM) options that apply to the configuration set.
     */
    vdmOptions?: pulumi.Input<inputs.ses.ConfigurationSetVdmOptionsArgs>;
}
