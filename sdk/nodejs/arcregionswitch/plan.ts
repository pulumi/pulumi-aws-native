// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
 */
export class Plan extends pulumi.CustomResource {
    /**
     * Get an existing Plan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Plan {
        return new Plan(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:arcregionswitch:Plan';

    /**
     * Returns true if the given object is an instance of Plan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Plan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plan.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the plan.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The associated application health alarms for a plan.
     */
    declare public readonly associatedAlarms: pulumi.Output<{[key: string]: outputs.arcregionswitch.PlanAssociatedAlarm} | undefined>;
    /**
     * The description for a plan.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The execution role for a plan.
     */
    declare public readonly executionRole: pulumi.Output<string>;
    /**
     * Represents a Region switch plan. A plan defines the steps required to shift traffic from one AWS Region to another.
     */
    declare public /*out*/ readonly healthChecksForPlan: pulumi.Output<{[key: string]: outputs.arcregionswitch.PlanHealthCheckState[]}>;
    /**
     * The name for a plan.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The owner of a plan.
     */
    declare public /*out*/ readonly owner: pulumi.Output<string>;
    declare public /*out*/ readonly planHealthChecks: pulumi.Output<string[]>;
    /**
     * The primary Region for a plan.
     */
    declare public readonly primaryRegion: pulumi.Output<string | undefined>;
    /**
     * The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
     */
    declare public readonly recoveryApproach: pulumi.Output<enums.arcregionswitch.PlanRecoveryApproach>;
    /**
     * The recovery time objective for a plan.
     */
    declare public readonly recoveryTimeObjectiveMinutes: pulumi.Output<number | undefined>;
    /**
     * The AWS Regions for a plan.
     */
    declare public readonly regions: pulumi.Output<string[]>;
    declare public /*out*/ readonly route53HealthChecks: pulumi.Output<outputs.arcregionswitch.Route53HealthChecksProperties>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The triggers for a plan.
     */
    declare public readonly triggers: pulumi.Output<outputs.arcregionswitch.PlanTrigger[] | undefined>;
    /**
     * The version for the plan.
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;
    /**
     * The workflows for a plan.
     */
    declare public readonly workflows: pulumi.Output<outputs.arcregionswitch.PlanWorkflow[]>;

    /**
     * Create a Plan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlanArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.executionRole === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionRole'");
            }
            if (args?.recoveryApproach === undefined && !opts.urn) {
                throw new Error("Missing required property 'recoveryApproach'");
            }
            if (args?.regions === undefined && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if (args?.workflows === undefined && !opts.urn) {
                throw new Error("Missing required property 'workflows'");
            }
            resourceInputs["associatedAlarms"] = args?.associatedAlarms;
            resourceInputs["description"] = args?.description;
            resourceInputs["executionRole"] = args?.executionRole;
            resourceInputs["name"] = args?.name;
            resourceInputs["primaryRegion"] = args?.primaryRegion;
            resourceInputs["recoveryApproach"] = args?.recoveryApproach;
            resourceInputs["recoveryTimeObjectiveMinutes"] = args?.recoveryTimeObjectiveMinutes;
            resourceInputs["regions"] = args?.regions;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["triggers"] = args?.triggers;
            resourceInputs["workflows"] = args?.workflows;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["healthChecksForPlan"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["planHealthChecks"] = undefined /*out*/;
            resourceInputs["route53HealthChecks"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associatedAlarms"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["executionRole"] = undefined /*out*/;
            resourceInputs["healthChecksForPlan"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["planHealthChecks"] = undefined /*out*/;
            resourceInputs["primaryRegion"] = undefined /*out*/;
            resourceInputs["recoveryApproach"] = undefined /*out*/;
            resourceInputs["recoveryTimeObjectiveMinutes"] = undefined /*out*/;
            resourceInputs["regions"] = undefined /*out*/;
            resourceInputs["route53HealthChecks"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["workflows"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "primaryRegion", "recoveryApproach", "regions[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Plan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Plan resource.
 */
export interface PlanArgs {
    /**
     * The associated application health alarms for a plan.
     */
    associatedAlarms?: pulumi.Input<{[key: string]: pulumi.Input<inputs.arcregionswitch.PlanAssociatedAlarmArgs>}>;
    /**
     * The description for a plan.
     */
    description?: pulumi.Input<string>;
    /**
     * The execution role for a plan.
     */
    executionRole: pulumi.Input<string>;
    /**
     * The name for a plan.
     */
    name?: pulumi.Input<string>;
    /**
     * The primary Region for a plan.
     */
    primaryRegion?: pulumi.Input<string>;
    /**
     * The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
     */
    recoveryApproach: pulumi.Input<enums.arcregionswitch.PlanRecoveryApproach>;
    /**
     * The recovery time objective for a plan.
     */
    recoveryTimeObjectiveMinutes?: pulumi.Input<number>;
    /**
     * The AWS Regions for a plan.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The triggers for a plan.
     */
    triggers?: pulumi.Input<pulumi.Input<inputs.arcregionswitch.PlanTriggerArgs>[]>;
    /**
     * The workflows for a plan.
     */
    workflows: pulumi.Input<pulumi.Input<inputs.arcregionswitch.PlanWorkflowArgs>[]>;
}
