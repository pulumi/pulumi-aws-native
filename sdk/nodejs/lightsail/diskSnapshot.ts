// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lightsail::DiskSnapshot
 */
export class DiskSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing DiskSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DiskSnapshot {
        return new DiskSnapshot(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lightsail:DiskSnapshot';

    /**
     * Returns true if the given object is an instance of DiskSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskSnapshot.__pulumiType;
    }

    /**
     * The timestamp when the disk snapshot was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The name of the source disk from which the snapshot was created.
     */
    declare public readonly diskName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the disk snapshot.
     */
    declare public /*out*/ readonly diskSnapshotArn: pulumi.Output<string>;
    /**
     * The name of the disk snapshot (e.g., my-disk-snapshot).
     */
    declare public readonly diskSnapshotName: pulumi.Output<string>;
    /**
     * The name of the source disk from which the disk snapshot was created.
     */
    declare public /*out*/ readonly fromDiskName: pulumi.Output<string>;
    /**
     * A Boolean value indicating whether the snapshot was created from an automatic snapshot.
     */
    declare public /*out*/ readonly isFromAutoSnapshot: pulumi.Output<boolean>;
    /**
     * The AWS Region and Availability Zone where the disk snapshot was created.
     */
    declare public /*out*/ readonly location: pulumi.Output<outputs.lightsail.LocationProperties>;
    /**
     * The progress of the disk snapshot creation operation.
     */
    declare public /*out*/ readonly progress: pulumi.Output<string>;
    /**
     * The Lightsail resource type (DiskSnapshot).
     */
    declare public /*out*/ readonly resourceType: pulumi.Output<enums.lightsail.DiskSnapshotResourceType>;
    /**
     * The size of the disk snapshot in GB.
     */
    declare public /*out*/ readonly sizeInGb: pulumi.Output<number>;
    /**
     * The status of the disk snapshot operation.
     */
    declare public /*out*/ readonly state: pulumi.Output<enums.lightsail.DiskSnapshotState>;
    /**
     * The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail.
     */
    declare public /*out*/ readonly supportCode: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a DiskSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskSnapshotArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.diskName === undefined && !opts.urn) {
                throw new Error("Missing required property 'diskName'");
            }
            resourceInputs["diskName"] = args?.diskName;
            resourceInputs["diskSnapshotName"] = args?.diskSnapshotName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskSnapshotArn"] = undefined /*out*/;
            resourceInputs["fromDiskName"] = undefined /*out*/;
            resourceInputs["isFromAutoSnapshot"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["sizeInGb"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskName"] = undefined /*out*/;
            resourceInputs["diskSnapshotArn"] = undefined /*out*/;
            resourceInputs["diskSnapshotName"] = undefined /*out*/;
            resourceInputs["fromDiskName"] = undefined /*out*/;
            resourceInputs["isFromAutoSnapshot"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["sizeInGb"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["diskName", "diskSnapshotName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DiskSnapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DiskSnapshot resource.
 */
export interface DiskSnapshotArgs {
    /**
     * The name of the source disk from which the snapshot was created.
     */
    diskName: pulumi.Input<string>;
    /**
     * The name of the disk snapshot (e.g., my-disk-snapshot).
     */
    diskSnapshotName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
