// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lightsail::Container
 */
export class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Container {
        return new Container(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lightsail:Container';

    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Container {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }

    public /*out*/ readonly containerArn!: pulumi.Output<string>;
    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     */
    public readonly containerServiceDeployment!: pulumi.Output<outputs.lightsail.ContainerServiceDeployment | undefined>;
    /**
     * A Boolean value to indicate whether the container service is disabled.
     */
    public readonly isDisabled!: pulumi.Output<boolean | undefined>;
    /**
     * The power specification for the container service.
     */
    public readonly power!: pulumi.Output<string>;
    /**
     * The public domain names to use with the container service, such as example.com and www.example.com.
     */
    public readonly publicDomainNames!: pulumi.Output<outputs.lightsail.ContainerPublicDomainName[] | undefined>;
    /**
     * The scale specification for the container service.
     */
    public readonly scale!: pulumi.Output<number>;
    /**
     * The name for the container service.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.lightsail.ContainerTag[] | undefined>;
    /**
     * The publicly accessible URL of the container service.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Container resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.power === undefined) && !opts.urn) {
                throw new Error("Missing required property 'power'");
            }
            if ((!args || args.scale === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scale'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["containerServiceDeployment"] = args ? args.containerServiceDeployment : undefined;
            inputs["isDisabled"] = args ? args.isDisabled : undefined;
            inputs["power"] = args ? args.power : undefined;
            inputs["publicDomainNames"] = args ? args.publicDomainNames : undefined;
            inputs["scale"] = args ? args.scale : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["containerArn"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        } else {
            inputs["containerArn"] = undefined /*out*/;
            inputs["containerServiceDeployment"] = undefined /*out*/;
            inputs["isDisabled"] = undefined /*out*/;
            inputs["power"] = undefined /*out*/;
            inputs["publicDomainNames"] = undefined /*out*/;
            inputs["scale"] = undefined /*out*/;
            inputs["serviceName"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Container.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Container resource.
 */
export interface ContainerArgs {
    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     */
    containerServiceDeployment?: pulumi.Input<inputs.lightsail.ContainerServiceDeploymentArgs>;
    /**
     * A Boolean value to indicate whether the container service is disabled.
     */
    isDisabled?: pulumi.Input<boolean>;
    /**
     * The power specification for the container service.
     */
    power: pulumi.Input<string>;
    /**
     * The public domain names to use with the container service, such as example.com and www.example.com.
     */
    publicDomainNames?: pulumi.Input<pulumi.Input<inputs.lightsail.ContainerPublicDomainNameArgs>[]>;
    /**
     * The scale specification for the container service.
     */
    scale: pulumi.Input<number>;
    /**
     * The name for the container service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.lightsail.ContainerTagArgs>[]>;
}
