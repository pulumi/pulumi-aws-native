// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lightsail::Disk
 */
export function getDisk(args: GetDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetDiskResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:lightsail:getDisk", {
        "diskName": args.diskName,
    }, opts);
}

export interface GetDiskArgs {
    /**
     * The names to use for your new Lightsail disk.
     */
    diskName: string;
}

export interface GetDiskResult {
    /**
     * An array of objects representing the add-ons to enable for the new instance.
     */
    readonly addOns?: outputs.lightsail.DiskAddOn[];
    /**
     * Name of the attached Lightsail Instance
     */
    readonly attachedTo?: string;
    /**
     * Attachment State of the Lightsail disk
     */
    readonly attachmentState?: string;
    readonly diskArn?: string;
    /**
     * Iops of the Lightsail disk
     */
    readonly iops?: number;
    /**
     * Check is Disk is attached state
     */
    readonly isAttached?: boolean;
    readonly location?: outputs.lightsail.DiskLocation;
    /**
     * Path of the  attached Disk
     */
    readonly path?: string;
    /**
     * Resource type of Lightsail instance.
     */
    readonly resourceType?: string;
    /**
     * State of the Lightsail disk
     */
    readonly state?: string;
    /**
     * Support code to help identify any issues
     */
    readonly supportCode?: string;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.lightsail.DiskTag[];
}

export function getDiskOutput(args: GetDiskOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDiskResult> {
    return pulumi.output(args).apply(a => getDisk(a, opts))
}

export interface GetDiskOutputArgs {
    /**
     * The names to use for your new Lightsail disk.
     */
    diskName: pulumi.Input<string>;
}
