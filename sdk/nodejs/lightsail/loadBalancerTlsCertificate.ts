// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lightsail::LoadBalancerTlsCertificate
 */
export class LoadBalancerTlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerTlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LoadBalancerTlsCertificate {
        return new LoadBalancerTlsCertificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lightsail:LoadBalancerTlsCertificate';

    /**
     * Returns true if the given object is an instance of LoadBalancerTlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerTlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerTlsCertificate.__pulumiType;
    }

    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    declare public readonly certificateAlternativeNames: pulumi.Output<string[] | undefined>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    declare public readonly certificateDomainName: pulumi.Output<string>;
    /**
     * The SSL/TLS certificate name.
     */
    declare public readonly certificateName: pulumi.Output<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    declare public readonly httpsRedirectionEnabled: pulumi.Output<boolean | undefined>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    declare public readonly isAttached: pulumi.Output<boolean | undefined>;
    /**
     * The name of your load balancer.
     */
    declare public readonly loadBalancerName: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the SSL/TLS certificate.
     */
    declare public /*out*/ readonly loadBalancerTlsCertificateArn: pulumi.Output<string>;
    /**
     * The validation status of the SSL/TLS certificate.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a LoadBalancerTlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerTlsCertificateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.certificateDomainName === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificateDomainName'");
            }
            if (args?.loadBalancerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            resourceInputs["certificateAlternativeNames"] = args?.certificateAlternativeNames;
            resourceInputs["certificateDomainName"] = args?.certificateDomainName;
            resourceInputs["certificateName"] = args?.certificateName;
            resourceInputs["httpsRedirectionEnabled"] = args?.httpsRedirectionEnabled;
            resourceInputs["isAttached"] = args?.isAttached;
            resourceInputs["loadBalancerName"] = args?.loadBalancerName;
            resourceInputs["loadBalancerTlsCertificateArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["certificateAlternativeNames"] = undefined /*out*/;
            resourceInputs["certificateDomainName"] = undefined /*out*/;
            resourceInputs["certificateName"] = undefined /*out*/;
            resourceInputs["httpsRedirectionEnabled"] = undefined /*out*/;
            resourceInputs["isAttached"] = undefined /*out*/;
            resourceInputs["loadBalancerName"] = undefined /*out*/;
            resourceInputs["loadBalancerTlsCertificateArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["certificateAlternativeNames[*]", "certificateDomainName", "certificateName", "loadBalancerName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LoadBalancerTlsCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LoadBalancerTlsCertificate resource.
 */
export interface LoadBalancerTlsCertificateArgs {
    /**
     * An array of strings listing alternative domains and subdomains for your SSL/TLS certificate.
     */
    certificateAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The domain name (e.g., example.com ) for your SSL/TLS certificate.
     */
    certificateDomainName: pulumi.Input<string>;
    /**
     * The SSL/TLS certificate name.
     */
    certificateName?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
     */
    httpsRedirectionEnabled?: pulumi.Input<boolean>;
    /**
     * When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
     */
    isAttached?: pulumi.Input<boolean>;
    /**
     * The name of your load balancer.
     */
    loadBalancerName: pulumi.Input<string>;
}
