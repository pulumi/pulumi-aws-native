// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Pinpoint::InAppTemplate
 */
export class InAppTemplate extends pulumi.CustomResource {
    /**
     * Get an existing InAppTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InAppTemplate {
        return new InAppTemplate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:pinpoint:InAppTemplate';

    /**
     * Returns true if the given object is an instance of InAppTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InAppTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InAppTemplate.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly content!: pulumi.Output<outputs.pinpoint.InAppTemplateInAppMessageContent[] | undefined>;
    public readonly customConfig!: pulumi.Output<any | undefined>;
    public readonly layout!: pulumi.Output<enums.pinpoint.InAppTemplateLayout | undefined>;
    public readonly tags!: pulumi.Output<any | undefined>;
    public readonly templateDescription!: pulumi.Output<string | undefined>;
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a InAppTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InAppTemplateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["customConfig"] = args ? args.customConfig : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateDescription"] = args ? args.templateDescription : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["customConfig"] = undefined /*out*/;
            resourceInputs["layout"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["templateDescription"] = undefined /*out*/;
            resourceInputs["templateName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InAppTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InAppTemplate resource.
 */
export interface InAppTemplateArgs {
    content?: pulumi.Input<pulumi.Input<inputs.pinpoint.InAppTemplateInAppMessageContentArgs>[]>;
    customConfig?: any;
    layout?: pulumi.Input<enums.pinpoint.InAppTemplateLayout>;
    tags?: any;
    templateDescription?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
