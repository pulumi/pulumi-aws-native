// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::ImageBuilder::Workflow
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:imagebuilder:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the workflow.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The change description of the workflow.
     */
    public readonly changeDescription!: pulumi.Output<string | undefined>;
    /**
     * The data of the workflow.
     */
    public readonly data!: pulumi.Output<string | undefined>;
    /**
     * The description of the workflow.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The KMS key identifier used to encrypt the workflow.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * The name of the workflow.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tags associated with the workflow.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the workflow denotes whether the workflow is used to build, test, or distribute.
     */
    public readonly type!: pulumi.Output<enums.imagebuilder.WorkflowType>;
    /**
     * The uri of the workflow.
     */
    public readonly uri!: pulumi.Output<string | undefined>;
    /**
     * The version of the workflow.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["changeDescription"] = args ? args.changeDescription : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["changeDescription"] = undefined /*out*/;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["changeDescription", "data", "description", "kmsKeyId", "name", "tags.*", "type", "uri", "version"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * The change description of the workflow.
     */
    changeDescription?: pulumi.Input<string>;
    /**
     * The data of the workflow.
     */
    data?: pulumi.Input<string>;
    /**
     * The description of the workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * The KMS key identifier used to encrypt the workflow.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The name of the workflow.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags associated with the workflow.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the workflow denotes whether the workflow is used to build, test, or distribute.
     */
    type: pulumi.Input<enums.imagebuilder.WorkflowType>;
    /**
     * The uri of the workflow.
     */
    uri?: pulumi.Input<string>;
    /**
     * The version of the workflow.
     */
    version: pulumi.Input<string>;
}
