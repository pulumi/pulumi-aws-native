// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::ImageBuilder::LifecyclePolicy
 */
export class LifecyclePolicy extends pulumi.CustomResource {
    /**
     * Get an existing LifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LifecyclePolicy {
        return new LifecyclePolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:imagebuilder:LifecyclePolicy';

    /**
     * Returns true if the given object is an instance of LifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LifecyclePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LifecyclePolicy.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the lifecycle policy.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the lifecycle policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The execution role of the lifecycle policy.
     */
    public readonly executionRole!: pulumi.Output<string>;
    /**
     * The name of the lifecycle policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    public readonly policyDetails!: pulumi.Output<outputs.imagebuilder.LifecyclePolicyPolicyDetail[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    public readonly resourceSelection!: pulumi.Output<outputs.imagebuilder.LifecyclePolicyResourceSelection>;
    /**
     * The resource type of the lifecycle policy.
     */
    public readonly resourceType!: pulumi.Output<enums.imagebuilder.LifecyclePolicyResourceType>;
    /**
     * The status of the lifecycle policy.
     */
    public readonly status!: pulumi.Output<enums.imagebuilder.LifecyclePolicyStatus | undefined>;
    /**
     * The tags associated with the lifecycle policy.
     */
    public readonly tags!: pulumi.Output<any | undefined>;

    /**
     * Create a LifecyclePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LifecyclePolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.executionRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRole'");
            }
            if ((!args || args.policyDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDetails'");
            }
            if ((!args || args.resourceSelection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceSelection'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionRole"] = args ? args.executionRole : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyDetails"] = args ? args.policyDetails : undefined;
            resourceInputs["resourceSelection"] = args ? args.resourceSelection : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["executionRole"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policyDetails"] = undefined /*out*/;
            resourceInputs["resourceSelection"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LifecyclePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LifecyclePolicy resource.
 */
export interface LifecyclePolicyArgs {
    /**
     * The description of the lifecycle policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The execution role of the lifecycle policy.
     */
    executionRole: pulumi.Input<string>;
    /**
     * The name of the lifecycle policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy details of the lifecycle policy.
     */
    policyDetails: pulumi.Input<pulumi.Input<inputs.imagebuilder.LifecyclePolicyPolicyDetailArgs>[]>;
    /**
     * The resource selection of the lifecycle policy.
     */
    resourceSelection: pulumi.Input<inputs.imagebuilder.LifecyclePolicyResourceSelectionArgs>;
    /**
     * The resource type of the lifecycle policy.
     */
    resourceType: pulumi.Input<enums.imagebuilder.LifecyclePolicyResourceType>;
    /**
     * The status of the lifecycle policy.
     */
    status?: pulumi.Input<enums.imagebuilder.LifecyclePolicyStatus>;
    /**
     * The tags associated with the lifecycle policy.
     */
    tags?: any;
}
