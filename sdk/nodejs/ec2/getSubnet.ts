// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::Subnet
 */
export function getSubnet(args: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ec2:getSubnet", {
        "subnetId": args.subnetId,
    }, opts);
}

export interface GetSubnetArgs {
    subnetId: string;
}

export interface GetSubnetResult {
    readonly assignIpv6AddressOnCreation?: boolean;
    readonly enableDns64?: boolean;
    /**
     * The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
     */
    readonly ipv4NetmaskLength?: number;
    readonly ipv6CidrBlock?: string;
    readonly ipv6CidrBlocks?: string[];
    /**
     * The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
     */
    readonly ipv6NetmaskLength?: number;
    readonly mapPublicIpOnLaunch?: boolean;
    readonly networkAclAssociationId?: string;
    readonly privateDnsNameOptionsOnLaunch?: outputs.ec2.PrivateDnsNameOptionsOnLaunchProperties;
    readonly subnetId?: string;
    readonly tags?: outputs.ec2.SubnetTag[];
}
/**
 * Resource Type definition for AWS::EC2::Subnet
 */
export function getSubnetOutput(args: GetSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetResult> {
    return pulumi.output(args).apply((a: any) => getSubnet(a, opts))
}

export interface GetSubnetOutputArgs {
    subnetId: pulumi.Input<string>;
}
