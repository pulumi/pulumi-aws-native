// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Specifies a subnet for the specified VPC.
 *  For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
 *  For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
 */
export function getSubnet(args: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ec2:getSubnet", {
        "subnetId": args.subnetId,
    }, opts);
}

export interface GetSubnetArgs {
    subnetId: string;
}

export interface GetSubnetResult {
    /**
     * Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
     *  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    readonly assignIpv6AddressOnCreation?: boolean;
    /**
     * Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
     */
    readonly enableDns64?: boolean;
    /**
     * The IPv6 CIDR block.
     *  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
     */
    readonly ipv6CidrBlock?: string;
    /**
     * The IPv6 network ranges for the subnet, in CIDR notation.
     */
    readonly ipv6CidrBlocks?: string[];
    /**
     * Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
     *  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
     */
    readonly mapPublicIpOnLaunch?: boolean;
    readonly networkAclAssociationId?: string;
    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
     *  Available options:
     *   + EnableResourceNameDnsAAAARecord (true | false)
     *  + EnableResourceNameDnsARecord (true | false)
     *  + HostnameType (ip-name | resource-name)
     */
    readonly privateDnsNameOptionsOnLaunch?: outputs.ec2.PrivateDnsNameOptionsOnLaunchProperties;
    readonly subnetId?: string;
    /**
     * Any tags assigned to the subnet.
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Specifies a subnet for the specified VPC.
 *  For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
 *  For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
 */
export function getSubnetOutput(args: GetSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetResult> {
    return pulumi.output(args).apply((a: any) => getSubnet(a, opts))
}

export interface GetSubnetOutputArgs {
    subnetId: pulumi.Input<string>;
}
