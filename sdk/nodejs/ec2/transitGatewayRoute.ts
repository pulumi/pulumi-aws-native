// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::TransitGatewayRoute
 */
export class TransitGatewayRoute extends pulumi.CustomResource {
    /**
     * Get an existing TransitGatewayRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TransitGatewayRoute {
        return new TransitGatewayRoute(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:TransitGatewayRoute';

    /**
     * Returns true if the given object is an instance of TransitGatewayRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitGatewayRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGatewayRoute.__pulumiType;
    }

    /**
     * Indicates whether to drop traffic that matches this route.
     */
    declare public readonly blackhole: pulumi.Output<boolean | undefined>;
    /**
     * The CIDR range used for destination matches. Routing decisions are based on the most specific match.
     */
    declare public readonly destinationCidrBlock: pulumi.Output<string>;
    /**
     * The ID of transit gateway attachment.
     */
    declare public readonly transitGatewayAttachmentId: pulumi.Output<string | undefined>;
    /**
     * The ID of transit gateway route table.
     */
    declare public readonly transitGatewayRouteTableId: pulumi.Output<string>;

    /**
     * Create a TransitGatewayRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitGatewayRouteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.destinationCidrBlock === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if (args?.transitGatewayRouteTableId === undefined && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayRouteTableId'");
            }
            resourceInputs["blackhole"] = args?.blackhole;
            resourceInputs["destinationCidrBlock"] = args?.destinationCidrBlock;
            resourceInputs["transitGatewayAttachmentId"] = args?.transitGatewayAttachmentId;
            resourceInputs["transitGatewayRouteTableId"] = args?.transitGatewayRouteTableId;
        } else {
            resourceInputs["blackhole"] = undefined /*out*/;
            resourceInputs["destinationCidrBlock"] = undefined /*out*/;
            resourceInputs["transitGatewayAttachmentId"] = undefined /*out*/;
            resourceInputs["transitGatewayRouteTableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["blackhole", "destinationCidrBlock", "transitGatewayAttachmentId", "transitGatewayRouteTableId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TransitGatewayRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TransitGatewayRoute resource.
 */
export interface TransitGatewayRouteArgs {
    /**
     * Indicates whether to drop traffic that matches this route.
     */
    blackhole?: pulumi.Input<boolean>;
    /**
     * The CIDR range used for destination matches. Routing decisions are based on the most specific match.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The ID of transit gateway attachment.
     */
    transitGatewayAttachmentId?: pulumi.Input<string>;
    /**
     * The ID of transit gateway route table.
     */
    transitGatewayRouteTableId: pulumi.Input<string>;
}
