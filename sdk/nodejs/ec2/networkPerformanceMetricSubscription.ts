// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::NetworkPerformanceMetricSubscription
 */
export class NetworkPerformanceMetricSubscription extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPerformanceMetricSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NetworkPerformanceMetricSubscription {
        return new NetworkPerformanceMetricSubscription(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:NetworkPerformanceMetricSubscription';

    /**
     * Returns true if the given object is an instance of NetworkPerformanceMetricSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPerformanceMetricSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPerformanceMetricSubscription.__pulumiType;
    }

    /**
     * The target Region or Availability Zone for the metric to subscribe to.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * The metric type to subscribe to.
     */
    public readonly metric!: pulumi.Output<string>;
    /**
     * The starting Region or Availability Zone for metric to subscribe to.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The statistic to subscribe to.
     */
    public readonly statistic!: pulumi.Output<string>;

    /**
     * Create a NetworkPerformanceMetricSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPerformanceMetricSubscriptionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.statistic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statistic'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["statistic"] = args ? args.statistic : undefined;
        } else {
            resourceInputs["destination"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["statistic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["destination", "metric", "source", "statistic"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(NetworkPerformanceMetricSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NetworkPerformanceMetricSubscription resource.
 */
export interface NetworkPerformanceMetricSubscriptionArgs {
    /**
     * The target Region or Availability Zone for the metric to subscribe to.
     */
    destination: pulumi.Input<string>;
    /**
     * The metric type to subscribe to.
     */
    metric: pulumi.Input<string>;
    /**
     * The starting Region or Availability Zone for metric to subscribe to.
     */
    source: pulumi.Input<string>;
    /**
     * The statistic to subscribe to.
     */
    statistic: pulumi.Input<string>;
}
