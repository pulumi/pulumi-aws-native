// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The description of the Traffic Mirror target.
 */
export class TrafficMirrorTarget extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TrafficMirrorTarget {
        return new TrafficMirrorTarget(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:TrafficMirrorTarget';

    /**
     * Returns true if the given object is an instance of TrafficMirrorTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorTarget.__pulumiType;
    }

    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The description of the Traffic Mirror target.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the Gateway Load Balancer endpoint.
     */
    declare public readonly gatewayLoadBalancerEndpointId: pulumi.Output<string | undefined>;
    /**
     * The network interface ID that is associated with the target.
     */
    declare public readonly networkInterfaceId: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
     */
    declare public readonly networkLoadBalancerArn: pulumi.Output<string | undefined>;
    /**
     *  The tags to assign to the Traffic Mirror target.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a TrafficMirrorTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrafficMirrorTargetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["description"] = args?.description;
            resourceInputs["gatewayLoadBalancerEndpointId"] = args?.gatewayLoadBalancerEndpointId;
            resourceInputs["networkInterfaceId"] = args?.networkInterfaceId;
            resourceInputs["networkLoadBalancerArn"] = args?.networkLoadBalancerArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["gatewayLoadBalancerEndpointId"] = undefined /*out*/;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["networkLoadBalancerArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["description", "gatewayLoadBalancerEndpointId", "networkInterfaceId", "networkLoadBalancerArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TrafficMirrorTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TrafficMirrorTarget resource.
 */
export interface TrafficMirrorTargetArgs {
    /**
     * The description of the Traffic Mirror target.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Gateway Load Balancer endpoint.
     */
    gatewayLoadBalancerEndpointId?: pulumi.Input<string>;
    /**
     * The network interface ID that is associated with the target.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
     */
    networkLoadBalancerArn?: pulumi.Input<string>;
    /**
     *  The tags to assign to the Traffic Mirror target.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
