// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for for AWS::EC2::TrafficMirrorFilterRule
 */
export class TrafficMirrorFilterRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilterRule {
        return new TrafficMirrorFilterRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:TrafficMirrorFilterRule';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilterRule.__pulumiType;
    }

    /**
     * The description of the Traffic Mirror Filter rule.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The destination CIDR block to assign to the Traffic Mirror rule.
     */
    declare public readonly destinationCidrBlock: pulumi.Output<string>;
    /**
     * The destination port range.
     */
    declare public readonly destinationPortRange: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRange | undefined>;
    /**
     * The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
     */
    declare public readonly protocol: pulumi.Output<number | undefined>;
    /**
     * The action to take on the filtered traffic (accept/reject).
     */
    declare public readonly ruleAction: pulumi.Output<string>;
    /**
     * The number of the Traffic Mirror rule.
     */
    declare public readonly ruleNumber: pulumi.Output<number>;
    /**
     * The source CIDR block to assign to the Traffic Mirror Filter rule.
     */
    declare public readonly sourceCidrBlock: pulumi.Output<string>;
    /**
     * The source port range.
     */
    declare public readonly sourcePortRange: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRange | undefined>;
    /**
     * Any tags assigned to the Traffic Mirror Filter rule.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The direction of traffic (ingress/egress).
     */
    declare public readonly trafficDirection: pulumi.Output<string>;
    /**
     * The ID of the filter that this rule is associated with.
     */
    declare public readonly trafficMirrorFilterId: pulumi.Output<string>;
    /**
     * The ID of the Traffic Mirror Filter rule.
     */
    declare public /*out*/ readonly trafficMirrorFilterRuleId: pulumi.Output<string>;

    /**
     * Create a TrafficMirrorFilterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorFilterRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.destinationCidrBlock === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if (args?.ruleAction === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if (args?.ruleNumber === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleNumber'");
            }
            if (args?.sourceCidrBlock === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceCidrBlock'");
            }
            if (args?.trafficDirection === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficDirection'");
            }
            if (args?.trafficMirrorFilterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationCidrBlock"] = args?.destinationCidrBlock;
            resourceInputs["destinationPortRange"] = args?.destinationPortRange;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["ruleAction"] = args?.ruleAction;
            resourceInputs["ruleNumber"] = args?.ruleNumber;
            resourceInputs["sourceCidrBlock"] = args?.sourceCidrBlock;
            resourceInputs["sourcePortRange"] = args?.sourcePortRange;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trafficDirection"] = args?.trafficDirection;
            resourceInputs["trafficMirrorFilterId"] = args?.trafficMirrorFilterId;
            resourceInputs["trafficMirrorFilterRuleId"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["destinationCidrBlock"] = undefined /*out*/;
            resourceInputs["destinationPortRange"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["ruleAction"] = undefined /*out*/;
            resourceInputs["ruleNumber"] = undefined /*out*/;
            resourceInputs["sourceCidrBlock"] = undefined /*out*/;
            resourceInputs["sourcePortRange"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["trafficDirection"] = undefined /*out*/;
            resourceInputs["trafficMirrorFilterId"] = undefined /*out*/;
            resourceInputs["trafficMirrorFilterRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["trafficMirrorFilterId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TrafficMirrorFilterRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TrafficMirrorFilterRule resource.
 */
export interface TrafficMirrorFilterRuleArgs {
    /**
     * The description of the Traffic Mirror Filter rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination CIDR block to assign to the Traffic Mirror rule.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The destination port range.
     */
    destinationPortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRangeArgs>;
    /**
     * The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.
     */
    protocol?: pulumi.Input<number>;
    /**
     * The action to take on the filtered traffic (accept/reject).
     */
    ruleAction: pulumi.Input<string>;
    /**
     * The number of the Traffic Mirror rule.
     */
    ruleNumber: pulumi.Input<number>;
    /**
     * The source CIDR block to assign to the Traffic Mirror Filter rule.
     */
    sourceCidrBlock: pulumi.Input<string>;
    /**
     * The source port range.
     */
    sourcePortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRangeArgs>;
    /**
     * Any tags assigned to the Traffic Mirror Filter rule.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The direction of traffic (ingress/egress).
     */
    trafficDirection: pulumi.Input<string>;
    /**
     * The ID of the filter that this rule is associated with.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
}
