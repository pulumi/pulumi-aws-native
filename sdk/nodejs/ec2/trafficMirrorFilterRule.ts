// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
 *
 * @deprecated TrafficMirrorFilterRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class TrafficMirrorFilterRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilterRule {
        pulumi.log.warn("TrafficMirrorFilterRule is deprecated: TrafficMirrorFilterRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new TrafficMirrorFilterRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:TrafficMirrorFilterRule';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilterRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    public readonly destinationPortRange!: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRange | undefined>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly ruleAction!: pulumi.Output<string>;
    public readonly ruleNumber!: pulumi.Output<number>;
    public readonly sourceCidrBlock!: pulumi.Output<string>;
    public readonly sourcePortRange!: pulumi.Output<outputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRange | undefined>;
    public readonly trafficDirection!: pulumi.Output<string>;
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;

    /**
     * Create a TrafficMirrorFilterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated TrafficMirrorFilterRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: TrafficMirrorFilterRuleArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("TrafficMirrorFilterRule is deprecated: TrafficMirrorFilterRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.ruleAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if ((!args || args.ruleNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleNumber'");
            }
            if ((!args || args.sourceCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCidrBlock'");
            }
            if ((!args || args.trafficDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficDirection'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            inputs["destinationPortRange"] = args ? args.destinationPortRange : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["ruleAction"] = args ? args.ruleAction : undefined;
            inputs["ruleNumber"] = args ? args.ruleNumber : undefined;
            inputs["sourceCidrBlock"] = args ? args.sourceCidrBlock : undefined;
            inputs["sourcePortRange"] = args ? args.sourcePortRange : undefined;
            inputs["trafficDirection"] = args ? args.trafficDirection : undefined;
            inputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
        } else {
            inputs["description"] = undefined /*out*/;
            inputs["destinationCidrBlock"] = undefined /*out*/;
            inputs["destinationPortRange"] = undefined /*out*/;
            inputs["protocol"] = undefined /*out*/;
            inputs["ruleAction"] = undefined /*out*/;
            inputs["ruleNumber"] = undefined /*out*/;
            inputs["sourceCidrBlock"] = undefined /*out*/;
            inputs["sourcePortRange"] = undefined /*out*/;
            inputs["trafficDirection"] = undefined /*out*/;
            inputs["trafficMirrorFilterId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TrafficMirrorFilterRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a TrafficMirrorFilterRule resource.
 */
export interface TrafficMirrorFilterRuleArgs {
    description?: pulumi.Input<string>;
    destinationCidrBlock: pulumi.Input<string>;
    destinationPortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRangeArgs>;
    protocol?: pulumi.Input<number>;
    ruleAction: pulumi.Input<string>;
    ruleNumber: pulumi.Input<number>;
    sourceCidrBlock: pulumi.Input<string>;
    sourcePortRange?: pulumi.Input<inputs.ec2.TrafficMirrorFilterRuleTrafficMirrorPortRangeArgs>;
    trafficDirection: pulumi.Input<string>;
    trafficMirrorFilterId: pulumi.Input<string>;
}
