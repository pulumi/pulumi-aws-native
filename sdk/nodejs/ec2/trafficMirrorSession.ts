// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::TrafficMirrorSession
 *
 * @deprecated TrafficMirrorSession is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class TrafficMirrorSession extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TrafficMirrorSession {
        pulumi.log.warn("TrafficMirrorSession is deprecated: TrafficMirrorSession is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new TrafficMirrorSession(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:TrafficMirrorSession';

    /**
     * Returns true if the given object is an instance of TrafficMirrorSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorSession.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly networkInterfaceId!: pulumi.Output<string>;
    public readonly packetLength!: pulumi.Output<number | undefined>;
    public readonly sessionNumber!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<outputs.ec2.TrafficMirrorSessionTag[] | undefined>;
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;
    public readonly trafficMirrorTargetId!: pulumi.Output<string>;
    public readonly virtualNetworkId!: pulumi.Output<number | undefined>;

    /**
     * Create a TrafficMirrorSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated TrafficMirrorSession is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: TrafficMirrorSessionArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("TrafficMirrorSession is deprecated: TrafficMirrorSession is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.sessionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionNumber'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            if ((!args || args.trafficMirrorTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            inputs["packetLength"] = args ? args.packetLength : undefined;
            inputs["sessionNumber"] = args ? args.sessionNumber : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            inputs["trafficMirrorTargetId"] = args ? args.trafficMirrorTargetId : undefined;
            inputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
        } else {
            inputs["description"] = undefined /*out*/;
            inputs["networkInterfaceId"] = undefined /*out*/;
            inputs["packetLength"] = undefined /*out*/;
            inputs["sessionNumber"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["trafficMirrorFilterId"] = undefined /*out*/;
            inputs["trafficMirrorTargetId"] = undefined /*out*/;
            inputs["virtualNetworkId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TrafficMirrorSession.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a TrafficMirrorSession resource.
 */
export interface TrafficMirrorSessionArgs {
    description?: pulumi.Input<string>;
    networkInterfaceId: pulumi.Input<string>;
    packetLength?: pulumi.Input<number>;
    sessionNumber: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.ec2.TrafficMirrorSessionTagArgs>[]>;
    trafficMirrorFilterId: pulumi.Input<string>;
    trafficMirrorTargetId: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<number>;
}
