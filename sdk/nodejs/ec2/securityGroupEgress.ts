// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::SecurityGroupEgress
 */
export class SecurityGroupEgress extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupEgress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SecurityGroupEgress {
        return new SecurityGroupEgress(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:SecurityGroupEgress';

    /**
     * Returns true if the given object is an instance of SecurityGroupEgress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupEgress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupEgress.__pulumiType;
    }

    /**
     * The IPv4 ranges
     */
    public readonly cidrIp!: pulumi.Output<string | undefined>;
    /**
     * [VPC only] The IPv6 ranges
     */
    public readonly cidrIpv6!: pulumi.Output<string | undefined>;
    /**
     * Resource Type definition for an egress (outbound) security group rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * [EC2-VPC only] The ID of a prefix list.
     */
    public readonly destinationPrefixListId!: pulumi.Output<string | undefined>;
    /**
     * You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
     */
    public readonly destinationSecurityGroupId!: pulumi.Output<string | undefined>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
     */
    public readonly fromPort!: pulumi.Output<number | undefined>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
     */
    public readonly toPort!: pulumi.Output<number | undefined>;

    /**
     * Create a SecurityGroupEgress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupEgressArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            resourceInputs["cidrIp"] = args ? args.cidrIp : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationPrefixListId"] = args ? args.destinationPrefixListId : undefined;
            resourceInputs["destinationSecurityGroupId"] = args ? args.destinationSecurityGroupId : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
        } else {
            resourceInputs["cidrIp"] = undefined /*out*/;
            resourceInputs["cidrIpv6"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["destinationPrefixListId"] = undefined /*out*/;
            resourceInputs["destinationSecurityGroupId"] = undefined /*out*/;
            resourceInputs["fromPort"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["ipProtocol"] = undefined /*out*/;
            resourceInputs["toPort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["cidrIp", "cidrIpv6", "destinationPrefixListId", "destinationSecurityGroupId", "fromPort", "groupId", "ipProtocol", "toPort"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SecurityGroupEgress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SecurityGroupEgress resource.
 */
export interface SecurityGroupEgressArgs {
    /**
     * The IPv4 ranges
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * [VPC only] The IPv6 ranges
     */
    cidrIpv6?: pulumi.Input<string>;
    /**
     * Resource Type definition for an egress (outbound) security group rule.
     */
    description?: pulumi.Input<string>;
    /**
     * [EC2-VPC only] The ID of a prefix list.
     */
    destinationPrefixListId?: pulumi.Input<string>;
    /**
     * You must specify a destination security group (DestinationPrefixListId or DestinationSecurityGroupId) or a CIDR range (CidrIp or CidrIpv6).
     */
    destinationSecurityGroupId?: pulumi.Input<string>;
    /**
     * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
     */
    fromPort?: pulumi.Input<number>;
    /**
     * The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
     */
    groupId: pulumi.Input<string>;
    /**
     * [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
     */
    ipProtocol: pulumi.Input<string>;
    /**
     * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
     */
    toPort?: pulumi.Input<number>;
}
