// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource type definition for the AWS::EC2::SecurityGroupVpcAssociation resource
 */
export class SecurityGroupVpcAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupVpcAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SecurityGroupVpcAssociation {
        return new SecurityGroupVpcAssociation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:SecurityGroupVpcAssociation';

    /**
     * Returns true if the given object is an instance of SecurityGroupVpcAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupVpcAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupVpcAssociation.__pulumiType;
    }

    /**
     * The group ID of the specified security group.
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * The state of the security group vpc association.
     */
    declare public /*out*/ readonly state: pulumi.Output<enums.ec2.SecurityGroupVpcAssociationState>;
    /**
     * The reason for the state of the security group vpc association.
     */
    declare public /*out*/ readonly stateReason: pulumi.Output<string>;
    /**
     * The ID of the VPC in the security group vpc association.
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * The owner of the VPC in the security group vpc association.
     */
    declare public /*out*/ readonly vpcOwnerId: pulumi.Output<string>;

    /**
     * Create a SecurityGroupVpcAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupVpcAssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["vpcOwnerId"] = undefined /*out*/;
        } else {
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["vpcOwnerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["groupId", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SecurityGroupVpcAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SecurityGroupVpcAssociation resource.
 */
export interface SecurityGroupVpcAssociationArgs {
    /**
     * The group ID of the specified security group.
     */
    groupId: pulumi.Input<string>;
    /**
     * The ID of the VPC in the security group vpc association.
     */
    vpcId: pulumi.Input<string>;
}
