// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The AWS::EC2::KeyPair creates an SSH key pair
 */
export class KeyPair extends pulumi.CustomResource {
    /**
     * Get an existing KeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KeyPair {
        return new KeyPair(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:KeyPair';

    /**
     * Returns true if the given object is an instance of KeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyPair.__pulumiType;
    }

    /**
     * A short sequence of bytes used for public key verification
     */
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * The name of the SSH key pair
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * An AWS generated ID for the key pair
     */
    public /*out*/ readonly keyPairId!: pulumi.Output<string>;
    /**
     * The title of the TPS report is a mandatory element.
     */
    public readonly keyType!: pulumi.Output<enums.ec2.KeyPairKeyType | undefined>;
    /**
     * Plain text public key to import
     */
    public readonly publicKeyMaterial!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.ec2.KeyPairTag[] | undefined>;

    /**
     * Create a KeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyPairArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["publicKeyMaterial"] = args ? args.publicKeyMaterial : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
        } else {
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["keyName"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
            resourceInputs["keyType"] = undefined /*out*/;
            resourceInputs["publicKeyMaterial"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyPair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a KeyPair resource.
 */
export interface KeyPairArgs {
    /**
     * The name of the SSH key pair
     */
    keyName: pulumi.Input<string>;
    /**
     * The title of the TPS report is a mandatory element.
     */
    keyType?: pulumi.Input<enums.ec2.KeyPairKeyType>;
    /**
     * Plain text public key to import
     */
    publicKeyMaterial?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ec2.KeyPairTagArgs>[]>;
}
