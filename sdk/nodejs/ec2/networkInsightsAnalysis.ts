// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::EC2::NetworkInsightsAnalysis
 */
export class NetworkInsightsAnalysis extends pulumi.CustomResource {
    /**
     * Get an existing NetworkInsightsAnalysis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NetworkInsightsAnalysis {
        return new NetworkInsightsAnalysis(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:NetworkInsightsAnalysis';

    /**
     * Returns true if the given object is an instance of NetworkInsightsAnalysis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkInsightsAnalysis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInsightsAnalysis.__pulumiType;
    }

    /**
     * The member accounts that contain resources that the path can traverse.
     */
    public readonly additionalAccounts!: pulumi.Output<string[] | undefined>;
    /**
     * Potential intermediate components.
     */
    public /*out*/ readonly alternatePathHints!: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisAlternatePathHint[]>;
    /**
     * The explanations. For more information, see [Reachability Analyzer explanation codes](https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html) .
     */
    public /*out*/ readonly explanations!: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisExplanation[]>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must traverse.
     */
    public readonly filterInArns!: pulumi.Output<string[] | undefined>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must ignore.
     */
    public readonly filterOutArns!: pulumi.Output<string[] | undefined>;
    /**
     * The components in the path from source to destination.
     */
    public /*out*/ readonly forwardPathComponents!: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisPathComponent[]>;
    /**
     * The Amazon Resource Name (ARN) of the network insights analysis.
     */
    public /*out*/ readonly networkInsightsAnalysisArn!: pulumi.Output<string>;
    /**
     * The ID of the network insights analysis.
     */
    public /*out*/ readonly networkInsightsAnalysisId!: pulumi.Output<string>;
    /**
     * The ID of the path.
     */
    public readonly networkInsightsPathId!: pulumi.Output<string>;
    /**
     * Indicates whether the destination is reachable from the source.
     */
    public /*out*/ readonly networkPathFound!: pulumi.Output<boolean>;
    /**
     * The components in the path from destination to source.
     */
    public /*out*/ readonly returnPathComponents!: pulumi.Output<outputs.ec2.NetworkInsightsAnalysisPathComponent[]>;
    /**
     * The time the analysis started.
     */
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    /**
     * The status of the network insights analysis.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.ec2.NetworkInsightsAnalysisStatus>;
    /**
     * The status message, if the status is `failed` .
     */
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;
    /**
     * The IDs of potential intermediate accounts.
     */
    public /*out*/ readonly suggestedAccounts!: pulumi.Output<string[]>;
    /**
     * The tags to apply.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a NetworkInsightsAnalysis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkInsightsAnalysisArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.networkInsightsPathId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkInsightsPathId'");
            }
            resourceInputs["additionalAccounts"] = args?.additionalAccounts;
            resourceInputs["filterInArns"] = args?.filterInArns;
            resourceInputs["filterOutArns"] = args?.filterOutArns;
            resourceInputs["networkInsightsPathId"] = args?.networkInsightsPathId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["alternatePathHints"] = undefined /*out*/;
            resourceInputs["explanations"] = undefined /*out*/;
            resourceInputs["forwardPathComponents"] = undefined /*out*/;
            resourceInputs["networkInsightsAnalysisArn"] = undefined /*out*/;
            resourceInputs["networkInsightsAnalysisId"] = undefined /*out*/;
            resourceInputs["networkPathFound"] = undefined /*out*/;
            resourceInputs["returnPathComponents"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["suggestedAccounts"] = undefined /*out*/;
        } else {
            resourceInputs["additionalAccounts"] = undefined /*out*/;
            resourceInputs["alternatePathHints"] = undefined /*out*/;
            resourceInputs["explanations"] = undefined /*out*/;
            resourceInputs["filterInArns"] = undefined /*out*/;
            resourceInputs["filterOutArns"] = undefined /*out*/;
            resourceInputs["forwardPathComponents"] = undefined /*out*/;
            resourceInputs["networkInsightsAnalysisArn"] = undefined /*out*/;
            resourceInputs["networkInsightsAnalysisId"] = undefined /*out*/;
            resourceInputs["networkInsightsPathId"] = undefined /*out*/;
            resourceInputs["networkPathFound"] = undefined /*out*/;
            resourceInputs["returnPathComponents"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["suggestedAccounts"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["filterInArns[*]", "filterOutArns[*]", "networkInsightsPathId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(NetworkInsightsAnalysis.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NetworkInsightsAnalysis resource.
 */
export interface NetworkInsightsAnalysisArgs {
    /**
     * The member accounts that contain resources that the path can traverse.
     */
    additionalAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must traverse.
     */
    filterInArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Amazon Resource Names (ARN) of the resources that the path must ignore.
     */
    filterOutArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the path.
     */
    networkInsightsPathId: pulumi.Input<string>;
    /**
     * The tags to apply.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
