// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::CapacityReservation
 */
export function getCapacityReservation(args: GetCapacityReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetCapacityReservationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ec2:getCapacityReservation", {
        "id": args.id,
    }, opts);
}

export interface GetCapacityReservationArgs {
    /**
     * The ID of the Capacity Reservation.
     */
    id: string;
}

export interface GetCapacityReservationResult {
    /**
     * Returns the remaining capacity, which indicates the number of instances that can be launched in the Capacity Reservation. For example: `9` .
     */
    readonly availableInstanceCount?: number;
    /**
     * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
     *
     * You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
     *
     * If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
     */
    readonly endDate?: string;
    /**
     * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
     *
     * - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
     * - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
     */
    readonly endDateType?: string;
    /**
     * The ID of the Capacity Reservation.
     */
    readonly id?: string;
    /**
     * The number of instances for which to reserve capacity.
     *
     * Valid range: 1 - 1000
     */
    readonly instanceCount?: number;
    /**
     * Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
     *
     * - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
     * - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
     *
     * Default: `open`
     */
    readonly instanceMatchCriteria?: string;
    /**
     * Returns the total number of instances for which the Capacity Reservation reserves capacity. For example: `15` .
     */
    readonly totalInstanceCount?: number;
}
/**
 * Resource Type definition for AWS::EC2::CapacityReservation
 */
export function getCapacityReservationOutput(args: GetCapacityReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapacityReservationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:ec2:getCapacityReservation", {
        "id": args.id,
    }, opts);
}

export interface GetCapacityReservationOutputArgs {
    /**
     * The ID of the Capacity Reservation.
     */
    id: pulumi.Input<string>;
}
