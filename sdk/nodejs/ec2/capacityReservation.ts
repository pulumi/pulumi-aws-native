// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::CapacityReservation
 */
export class CapacityReservation extends pulumi.CustomResource {
    /**
     * Get an existing CapacityReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CapacityReservation {
        return new CapacityReservation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:CapacityReservation';

    /**
     * Returns true if the given object is an instance of CapacityReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CapacityReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityReservation.__pulumiType;
    }

    /**
     * The Availability Zone in which to create the Capacity Reservation.
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * The Availability Zone ID of the Capacity Reservation.
     */
    public readonly availabilityZoneId!: pulumi.Output<string | undefined>;
    /**
     * Returns the remaining capacity, which indicates the number of instances that can be launched in the Capacity Reservation. For example: `9` .
     */
    public /*out*/ readonly availableInstanceCount!: pulumi.Output<number>;
    /**
     * The ID of the Capacity Reservation.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    public /*out*/ readonly capacityAllocationSet!: pulumi.Output<outputs.ec2.CapacityReservationCapacityAllocation[]>;
    public /*out*/ readonly capacityReservationArn!: pulumi.Output<string>;
    public /*out*/ readonly capacityReservationFleetId!: pulumi.Output<string>;
    public /*out*/ readonly commitmentInfo!: pulumi.Output<outputs.ec2.CommitmentInfoProperties>;
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    public /*out*/ readonly deliveryPreference!: pulumi.Output<string>;
    /**
     * Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
     *
     * You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
     *
     * If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
     *
     * If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
     */
    public readonly endDate!: pulumi.Output<string | undefined>;
    /**
     * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
     *
     * - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
     * - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
     */
    public readonly endDateType!: pulumi.Output<string | undefined>;
    /**
     * *Deprecated.*
     */
    public readonly ephemeralStorage!: pulumi.Output<boolean | undefined>;
    /**
     * The number of instances for which to reserve capacity.
     *
     * > You can request future-dated Capacity Reservations for an instance count with a minimum of 100 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *25 * m5.xlarge = 100 vCPUs* ). 
     *
     * Valid range: 1 - 1000
     */
    public readonly instanceCount!: pulumi.Output<number>;
    /**
     * Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
     *
     * - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
     * - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
     *
     * > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` . 
     *
     * Default: `open`
     */
    public readonly instanceMatchCriteria!: pulumi.Output<string | undefined>;
    /**
     * The type of operating system for which to reserve capacity.
     */
    public readonly instancePlatform!: pulumi.Output<string>;
    /**
     * The instance type for which to reserve capacity.
     *
     * > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, and T instance families only. 
     *
     * For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * > Not supported for future-dated Capacity Reservations. 
     *
     * The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
     */
    public readonly outPostArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    /**
     * > Not supported for future-dated Capacity Reservations. 
     *
     * The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
     */
    public readonly placementGroupArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly reservationType!: pulumi.Output<string>;
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The tags to apply to the Capacity Reservation during launch.
     */
    public readonly tagSpecifications!: pulumi.Output<outputs.ec2.CapacityReservationTagSpecification[] | undefined>;
    /**
     * Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
     *
     * - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
     * - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
     */
    public readonly tenancy!: pulumi.Output<string | undefined>;
    /**
     * Returns the total number of instances for which the Capacity Reservation reserves capacity. For example: `15` .
     */
    public /*out*/ readonly totalInstanceCount!: pulumi.Output<number>;
    /**
     * The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
     *
     * You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
     */
    public readonly unusedReservationBillingOwnerId!: pulumi.Output<string | undefined>;

    /**
     * Create a CapacityReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CapacityReservationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceCount'");
            }
            if ((!args || args.instancePlatform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePlatform'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["availabilityZoneId"] = args ? args.availabilityZoneId : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["endDate"] = args ? args.endDate : undefined;
            resourceInputs["endDateType"] = args ? args.endDateType : undefined;
            resourceInputs["ephemeralStorage"] = args ? args.ephemeralStorage : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["instanceMatchCriteria"] = args ? args.instanceMatchCriteria : undefined;
            resourceInputs["instancePlatform"] = args ? args.instancePlatform : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["outPostArn"] = args ? args.outPostArn : undefined;
            resourceInputs["placementGroupArn"] = args ? args.placementGroupArn : undefined;
            resourceInputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["unusedReservationBillingOwnerId"] = args ? args.unusedReservationBillingOwnerId : undefined;
            resourceInputs["availableInstanceCount"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["capacityAllocationSet"] = undefined /*out*/;
            resourceInputs["capacityReservationArn"] = undefined /*out*/;
            resourceInputs["capacityReservationFleetId"] = undefined /*out*/;
            resourceInputs["commitmentInfo"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["deliveryPreference"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["reservationType"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["totalInstanceCount"] = undefined /*out*/;
        } else {
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["availabilityZoneId"] = undefined /*out*/;
            resourceInputs["availableInstanceCount"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["capacityAllocationSet"] = undefined /*out*/;
            resourceInputs["capacityReservationArn"] = undefined /*out*/;
            resourceInputs["capacityReservationFleetId"] = undefined /*out*/;
            resourceInputs["commitmentInfo"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["deliveryPreference"] = undefined /*out*/;
            resourceInputs["ebsOptimized"] = undefined /*out*/;
            resourceInputs["endDate"] = undefined /*out*/;
            resourceInputs["endDateType"] = undefined /*out*/;
            resourceInputs["ephemeralStorage"] = undefined /*out*/;
            resourceInputs["instanceCount"] = undefined /*out*/;
            resourceInputs["instanceMatchCriteria"] = undefined /*out*/;
            resourceInputs["instancePlatform"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["outPostArn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["placementGroupArn"] = undefined /*out*/;
            resourceInputs["reservationType"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagSpecifications"] = undefined /*out*/;
            resourceInputs["tenancy"] = undefined /*out*/;
            resourceInputs["totalInstanceCount"] = undefined /*out*/;
            resourceInputs["unusedReservationBillingOwnerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["availabilityZone", "availabilityZoneId", "ebsOptimized", "ephemeralStorage", "instancePlatform", "instanceType", "outPostArn", "placementGroupArn", "tagSpecifications[*]", "tenancy"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CapacityReservation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CapacityReservation resource.
 */
export interface CapacityReservationArgs {
    /**
     * The Availability Zone in which to create the Capacity Reservation.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The Availability Zone ID of the Capacity Reservation.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
     *
     * You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
     *
     * If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
     *
     * If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
     */
    endDate?: pulumi.Input<string>;
    /**
     * Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
     *
     * - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
     * - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
     */
    endDateType?: pulumi.Input<string>;
    /**
     * *Deprecated.*
     */
    ephemeralStorage?: pulumi.Input<boolean>;
    /**
     * The number of instances for which to reserve capacity.
     *
     * > You can request future-dated Capacity Reservations for an instance count with a minimum of 100 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *25 * m5.xlarge = 100 vCPUs* ). 
     *
     * Valid range: 1 - 1000
     */
    instanceCount: pulumi.Input<number>;
    /**
     * Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
     *
     * - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
     * - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
     *
     * > If you are requesting a future-dated Capacity Reservation, you must specify `targeted` . 
     *
     * Default: `open`
     */
    instanceMatchCriteria?: pulumi.Input<string>;
    /**
     * The type of operating system for which to reserve capacity.
     */
    instancePlatform: pulumi.Input<string>;
    /**
     * The instance type for which to reserve capacity.
     *
     * > You can request future-dated Capacity Reservations for instance types in the C, M, R, I, and T instance families only. 
     *
     * For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
     */
    instanceType: pulumi.Input<string>;
    /**
     * > Not supported for future-dated Capacity Reservations. 
     *
     * The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
     */
    outPostArn?: pulumi.Input<string>;
    /**
     * > Not supported for future-dated Capacity Reservations. 
     *
     * The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
     */
    placementGroupArn?: pulumi.Input<string>;
    /**
     * The tags to apply to the Capacity Reservation during launch.
     */
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.ec2.CapacityReservationTagSpecificationArgs>[]>;
    /**
     * Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
     *
     * - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
     * - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
     */
    tenancy?: pulumi.Input<string>;
    /**
     * The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
     *
     * You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
     */
    unusedReservationBillingOwnerId?: pulumi.Input<string>;
}
