// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Specifies a route in a route table. For more information, see [Routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#route-table-routes) in the *Amazon VPC User Guide*.
 *  You must specify either a destination CIDR block or prefix list ID. You must also specify exactly one of the resources as the target.
 *  If you create a route that references a transit gateway in the same template where you create the transit gateway, you must declare a dependency on the transit gateway attachment. The route table cannot use the transit gateway until it has successfully attached to the VPC. Add a [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) in the ``AWS::EC2::Route`` resource to explicitly declare a dependency on the ``AWS::EC2::TransitGatewayAttachment`` resource.
 */
export function getRoute(args: GetRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ec2:getRoute", {
        "cidrBlock": args.cidrBlock,
        "routeTableId": args.routeTableId,
    }, opts);
}

export interface GetRouteArgs {
    cidrBlock: string;
    /**
     * The ID of the route table for the route.
     */
    routeTableId: string;
}

export interface GetRouteResult {
    /**
     * The ID of the carrier gateway.
     *  You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
     */
    readonly carrierGatewayId?: string;
    readonly cidrBlock?: string;
    /**
     * The Amazon Resource Name (ARN) of the core network.
     */
    readonly coreNetworkArn?: string;
    /**
     * [IPv6 traffic only] The ID of an egress-only internet gateway.
     */
    readonly egressOnlyInternetGatewayId?: string;
    /**
     * The ID of an internet gateway or virtual private gateway attached to your VPC.
     */
    readonly gatewayId?: string;
    /**
     * The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
     */
    readonly instanceId?: string;
    /**
     * The ID of the local gateway.
     */
    readonly localGatewayId?: string;
    /**
     * [IPv4 traffic only] The ID of a NAT gateway.
     */
    readonly natGatewayId?: string;
    /**
     * The ID of a network interface.
     */
    readonly networkInterfaceId?: string;
    /**
     * The ID of a transit gateway.
     */
    readonly transitGatewayId?: string;
    /**
     * The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
     */
    readonly vpcEndpointId?: string;
    /**
     * The ID of a VPC peering connection.
     */
    readonly vpcPeeringConnectionId?: string;
}
/**
 * Specifies a route in a route table. For more information, see [Routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#route-table-routes) in the *Amazon VPC User Guide*.
 *  You must specify either a destination CIDR block or prefix list ID. You must also specify exactly one of the resources as the target.
 *  If you create a route that references a transit gateway in the same template where you create the transit gateway, you must declare a dependency on the transit gateway attachment. The route table cannot use the transit gateway until it has successfully attached to the VPC. Add a [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) in the ``AWS::EC2::Route`` resource to explicitly declare a dependency on the ``AWS::EC2::TransitGatewayAttachment`` resource.
 */
export function getRouteOutput(args: GetRouteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouteResult> {
    return pulumi.output(args).apply((a: any) => getRoute(a, opts))
}

export interface GetRouteOutputArgs {
    cidrBlock: pulumi.Input<string>;
    /**
     * The ID of the route table for the route.
     */
    routeTableId: pulumi.Input<string>;
}
