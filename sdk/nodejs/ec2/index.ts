// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CapacityReservationArgs } from "./capacityReservation";
export type CapacityReservation = import("./capacityReservation").CapacityReservation;
export const CapacityReservation: typeof import("./capacityReservation").CapacityReservation = null as any;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));

export { CapacityReservationFleetArgs } from "./capacityReservationFleet";
export type CapacityReservationFleet = import("./capacityReservationFleet").CapacityReservationFleet;
export const CapacityReservationFleet: typeof import("./capacityReservationFleet").CapacityReservationFleet = null as any;
utilities.lazyLoad(exports, ["CapacityReservationFleet"], () => require("./capacityReservationFleet"));

export { CarrierGatewayArgs } from "./carrierGateway";
export type CarrierGateway = import("./carrierGateway").CarrierGateway;
export const CarrierGateway: typeof import("./carrierGateway").CarrierGateway = null as any;
utilities.lazyLoad(exports, ["CarrierGateway"], () => require("./carrierGateway"));

export { ClientVpnAuthorizationRuleArgs } from "./clientVpnAuthorizationRule";
export type ClientVpnAuthorizationRule = import("./clientVpnAuthorizationRule").ClientVpnAuthorizationRule;
export const ClientVpnAuthorizationRule: typeof import("./clientVpnAuthorizationRule").ClientVpnAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["ClientVpnAuthorizationRule"], () => require("./clientVpnAuthorizationRule"));

export { ClientVpnEndpointArgs } from "./clientVpnEndpoint";
export type ClientVpnEndpoint = import("./clientVpnEndpoint").ClientVpnEndpoint;
export const ClientVpnEndpoint: typeof import("./clientVpnEndpoint").ClientVpnEndpoint = null as any;
utilities.lazyLoad(exports, ["ClientVpnEndpoint"], () => require("./clientVpnEndpoint"));

export { ClientVpnRouteArgs } from "./clientVpnRoute";
export type ClientVpnRoute = import("./clientVpnRoute").ClientVpnRoute;
export const ClientVpnRoute: typeof import("./clientVpnRoute").ClientVpnRoute = null as any;
utilities.lazyLoad(exports, ["ClientVpnRoute"], () => require("./clientVpnRoute"));

export { ClientVpnTargetNetworkAssociationArgs } from "./clientVpnTargetNetworkAssociation";
export type ClientVpnTargetNetworkAssociation = import("./clientVpnTargetNetworkAssociation").ClientVpnTargetNetworkAssociation;
export const ClientVpnTargetNetworkAssociation: typeof import("./clientVpnTargetNetworkAssociation").ClientVpnTargetNetworkAssociation = null as any;
utilities.lazyLoad(exports, ["ClientVpnTargetNetworkAssociation"], () => require("./clientVpnTargetNetworkAssociation"));

export { CustomerGatewayArgs } from "./customerGateway";
export type CustomerGateway = import("./customerGateway").CustomerGateway;
export const CustomerGateway: typeof import("./customerGateway").CustomerGateway = null as any;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));

export { DhcpOptionsArgs } from "./dhcpOptions";
export type DhcpOptions = import("./dhcpOptions").DhcpOptions;
export const DhcpOptions: typeof import("./dhcpOptions").DhcpOptions = null as any;
utilities.lazyLoad(exports, ["DhcpOptions"], () => require("./dhcpOptions"));

export { Ec2FleetArgs } from "./ec2Fleet";
export type Ec2Fleet = import("./ec2Fleet").Ec2Fleet;
export const Ec2Fleet: typeof import("./ec2Fleet").Ec2Fleet = null as any;
utilities.lazyLoad(exports, ["Ec2Fleet"], () => require("./ec2Fleet"));

export { EgressOnlyInternetGatewayArgs } from "./egressOnlyInternetGateway";
export type EgressOnlyInternetGateway = import("./egressOnlyInternetGateway").EgressOnlyInternetGateway;
export const EgressOnlyInternetGateway: typeof import("./egressOnlyInternetGateway").EgressOnlyInternetGateway = null as any;
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));

export { EipArgs } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAssociationArgs } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { EnclaveCertificateIamRoleAssociationArgs } from "./enclaveCertificateIamRoleAssociation";
export type EnclaveCertificateIamRoleAssociation = import("./enclaveCertificateIamRoleAssociation").EnclaveCertificateIamRoleAssociation;
export const EnclaveCertificateIamRoleAssociation: typeof import("./enclaveCertificateIamRoleAssociation").EnclaveCertificateIamRoleAssociation = null as any;
utilities.lazyLoad(exports, ["EnclaveCertificateIamRoleAssociation"], () => require("./enclaveCertificateIamRoleAssociation"));

export { FlowLogArgs } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { GatewayRouteTableAssociationArgs } from "./gatewayRouteTableAssociation";
export type GatewayRouteTableAssociation = import("./gatewayRouteTableAssociation").GatewayRouteTableAssociation;
export const GatewayRouteTableAssociation: typeof import("./gatewayRouteTableAssociation").GatewayRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["GatewayRouteTableAssociation"], () => require("./gatewayRouteTableAssociation"));

export { GetCapacityReservationArgs, GetCapacityReservationResult, GetCapacityReservationOutputArgs } from "./getCapacityReservation";
export const getCapacityReservation: typeof import("./getCapacityReservation").getCapacityReservation = null as any;
export const getCapacityReservationOutput: typeof import("./getCapacityReservation").getCapacityReservationOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityReservation","getCapacityReservationOutput"], () => require("./getCapacityReservation"));

export { GetCapacityReservationFleetArgs, GetCapacityReservationFleetResult, GetCapacityReservationFleetOutputArgs } from "./getCapacityReservationFleet";
export const getCapacityReservationFleet: typeof import("./getCapacityReservationFleet").getCapacityReservationFleet = null as any;
export const getCapacityReservationFleetOutput: typeof import("./getCapacityReservationFleet").getCapacityReservationFleetOutput = null as any;
utilities.lazyLoad(exports, ["getCapacityReservationFleet","getCapacityReservationFleetOutput"], () => require("./getCapacityReservationFleet"));

export { GetCarrierGatewayArgs, GetCarrierGatewayResult, GetCarrierGatewayOutputArgs } from "./getCarrierGateway";
export const getCarrierGateway: typeof import("./getCarrierGateway").getCarrierGateway = null as any;
export const getCarrierGatewayOutput: typeof import("./getCarrierGateway").getCarrierGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCarrierGateway","getCarrierGatewayOutput"], () => require("./getCarrierGateway"));

export { GetClientVpnAuthorizationRuleArgs, GetClientVpnAuthorizationRuleResult, GetClientVpnAuthorizationRuleOutputArgs } from "./getClientVpnAuthorizationRule";
export const getClientVpnAuthorizationRule: typeof import("./getClientVpnAuthorizationRule").getClientVpnAuthorizationRule = null as any;
export const getClientVpnAuthorizationRuleOutput: typeof import("./getClientVpnAuthorizationRule").getClientVpnAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getClientVpnAuthorizationRule","getClientVpnAuthorizationRuleOutput"], () => require("./getClientVpnAuthorizationRule"));

export { GetClientVpnEndpointArgs, GetClientVpnEndpointResult, GetClientVpnEndpointOutputArgs } from "./getClientVpnEndpoint";
export const getClientVpnEndpoint: typeof import("./getClientVpnEndpoint").getClientVpnEndpoint = null as any;
export const getClientVpnEndpointOutput: typeof import("./getClientVpnEndpoint").getClientVpnEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getClientVpnEndpoint","getClientVpnEndpointOutput"], () => require("./getClientVpnEndpoint"));

export { GetClientVpnRouteArgs, GetClientVpnRouteResult, GetClientVpnRouteOutputArgs } from "./getClientVpnRoute";
export const getClientVpnRoute: typeof import("./getClientVpnRoute").getClientVpnRoute = null as any;
export const getClientVpnRouteOutput: typeof import("./getClientVpnRoute").getClientVpnRouteOutput = null as any;
utilities.lazyLoad(exports, ["getClientVpnRoute","getClientVpnRouteOutput"], () => require("./getClientVpnRoute"));

export { GetClientVpnTargetNetworkAssociationArgs, GetClientVpnTargetNetworkAssociationResult, GetClientVpnTargetNetworkAssociationOutputArgs } from "./getClientVpnTargetNetworkAssociation";
export const getClientVpnTargetNetworkAssociation: typeof import("./getClientVpnTargetNetworkAssociation").getClientVpnTargetNetworkAssociation = null as any;
export const getClientVpnTargetNetworkAssociationOutput: typeof import("./getClientVpnTargetNetworkAssociation").getClientVpnTargetNetworkAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getClientVpnTargetNetworkAssociation","getClientVpnTargetNetworkAssociationOutput"], () => require("./getClientVpnTargetNetworkAssociation"));

export { GetCustomerGatewayArgs, GetCustomerGatewayResult, GetCustomerGatewayOutputArgs } from "./getCustomerGateway";
export const getCustomerGateway: typeof import("./getCustomerGateway").getCustomerGateway = null as any;
export const getCustomerGatewayOutput: typeof import("./getCustomerGateway").getCustomerGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerGateway","getCustomerGatewayOutput"], () => require("./getCustomerGateway"));

export { GetDhcpOptionsArgs, GetDhcpOptionsResult, GetDhcpOptionsOutputArgs } from "./getDhcpOptions";
export const getDhcpOptions: typeof import("./getDhcpOptions").getDhcpOptions = null as any;
export const getDhcpOptionsOutput: typeof import("./getDhcpOptions").getDhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOptions","getDhcpOptionsOutput"], () => require("./getDhcpOptions"));

export { GetEc2FleetArgs, GetEc2FleetResult, GetEc2FleetOutputArgs } from "./getEc2Fleet";
export const getEc2Fleet: typeof import("./getEc2Fleet").getEc2Fleet = null as any;
export const getEc2FleetOutput: typeof import("./getEc2Fleet").getEc2FleetOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Fleet","getEc2FleetOutput"], () => require("./getEc2Fleet"));

export { GetEgressOnlyInternetGatewayArgs, GetEgressOnlyInternetGatewayResult, GetEgressOnlyInternetGatewayOutputArgs } from "./getEgressOnlyInternetGateway";
export const getEgressOnlyInternetGateway: typeof import("./getEgressOnlyInternetGateway").getEgressOnlyInternetGateway = null as any;
export const getEgressOnlyInternetGatewayOutput: typeof import("./getEgressOnlyInternetGateway").getEgressOnlyInternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEgressOnlyInternetGateway","getEgressOnlyInternetGatewayOutput"], () => require("./getEgressOnlyInternetGateway"));

export { GetEipArgs, GetEipResult, GetEipOutputArgs } from "./getEip";
export const getEip: typeof import("./getEip").getEip = null as any;
export const getEipOutput: typeof import("./getEip").getEipOutput = null as any;
utilities.lazyLoad(exports, ["getEip","getEipOutput"], () => require("./getEip"));

export { GetEipAssociationArgs, GetEipAssociationResult, GetEipAssociationOutputArgs } from "./getEipAssociation";
export const getEipAssociation: typeof import("./getEipAssociation").getEipAssociation = null as any;
export const getEipAssociationOutput: typeof import("./getEipAssociation").getEipAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEipAssociation","getEipAssociationOutput"], () => require("./getEipAssociation"));

export { GetEnclaveCertificateIamRoleAssociationArgs, GetEnclaveCertificateIamRoleAssociationResult, GetEnclaveCertificateIamRoleAssociationOutputArgs } from "./getEnclaveCertificateIamRoleAssociation";
export const getEnclaveCertificateIamRoleAssociation: typeof import("./getEnclaveCertificateIamRoleAssociation").getEnclaveCertificateIamRoleAssociation = null as any;
export const getEnclaveCertificateIamRoleAssociationOutput: typeof import("./getEnclaveCertificateIamRoleAssociation").getEnclaveCertificateIamRoleAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getEnclaveCertificateIamRoleAssociation","getEnclaveCertificateIamRoleAssociationOutput"], () => require("./getEnclaveCertificateIamRoleAssociation"));

export { GetFlowLogArgs, GetFlowLogResult, GetFlowLogOutputArgs } from "./getFlowLog";
export const getFlowLog: typeof import("./getFlowLog").getFlowLog = null as any;
export const getFlowLogOutput: typeof import("./getFlowLog").getFlowLogOutput = null as any;
utilities.lazyLoad(exports, ["getFlowLog","getFlowLogOutput"], () => require("./getFlowLog"));

export { GetGatewayRouteTableAssociationArgs, GetGatewayRouteTableAssociationResult, GetGatewayRouteTableAssociationOutputArgs } from "./getGatewayRouteTableAssociation";
export const getGatewayRouteTableAssociation: typeof import("./getGatewayRouteTableAssociation").getGatewayRouteTableAssociation = null as any;
export const getGatewayRouteTableAssociationOutput: typeof import("./getGatewayRouteTableAssociation").getGatewayRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayRouteTableAssociation","getGatewayRouteTableAssociationOutput"], () => require("./getGatewayRouteTableAssociation"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceConnectEndpointArgs, GetInstanceConnectEndpointResult, GetInstanceConnectEndpointOutputArgs } from "./getInstanceConnectEndpoint";
export const getInstanceConnectEndpoint: typeof import("./getInstanceConnectEndpoint").getInstanceConnectEndpoint = null as any;
export const getInstanceConnectEndpointOutput: typeof import("./getInstanceConnectEndpoint").getInstanceConnectEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceConnectEndpoint","getInstanceConnectEndpointOutput"], () => require("./getInstanceConnectEndpoint"));

export { GetInternetGatewayArgs, GetInternetGatewayResult, GetInternetGatewayOutputArgs } from "./getInternetGateway";
export const getInternetGateway: typeof import("./getInternetGateway").getInternetGateway = null as any;
export const getInternetGatewayOutput: typeof import("./getInternetGateway").getInternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getInternetGateway","getInternetGatewayOutput"], () => require("./getInternetGateway"));

export { GetIpamArgs, GetIpamResult, GetIpamOutputArgs } from "./getIpam";
export const getIpam: typeof import("./getIpam").getIpam = null as any;
export const getIpamOutput: typeof import("./getIpam").getIpamOutput = null as any;
utilities.lazyLoad(exports, ["getIpam","getIpamOutput"], () => require("./getIpam"));

export { GetIpamAllocationArgs, GetIpamAllocationResult, GetIpamAllocationOutputArgs } from "./getIpamAllocation";
export const getIpamAllocation: typeof import("./getIpamAllocation").getIpamAllocation = null as any;
export const getIpamAllocationOutput: typeof import("./getIpamAllocation").getIpamAllocationOutput = null as any;
utilities.lazyLoad(exports, ["getIpamAllocation","getIpamAllocationOutput"], () => require("./getIpamAllocation"));

export { GetIpamPoolArgs, GetIpamPoolResult, GetIpamPoolOutputArgs } from "./getIpamPool";
export const getIpamPool: typeof import("./getIpamPool").getIpamPool = null as any;
export const getIpamPoolOutput: typeof import("./getIpamPool").getIpamPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpamPool","getIpamPoolOutput"], () => require("./getIpamPool"));

export { GetIpamPoolCidrArgs, GetIpamPoolCidrResult, GetIpamPoolCidrOutputArgs } from "./getIpamPoolCidr";
export const getIpamPoolCidr: typeof import("./getIpamPoolCidr").getIpamPoolCidr = null as any;
export const getIpamPoolCidrOutput: typeof import("./getIpamPoolCidr").getIpamPoolCidrOutput = null as any;
utilities.lazyLoad(exports, ["getIpamPoolCidr","getIpamPoolCidrOutput"], () => require("./getIpamPoolCidr"));

export { GetIpamResourceDiscoveryArgs, GetIpamResourceDiscoveryResult, GetIpamResourceDiscoveryOutputArgs } from "./getIpamResourceDiscovery";
export const getIpamResourceDiscovery: typeof import("./getIpamResourceDiscovery").getIpamResourceDiscovery = null as any;
export const getIpamResourceDiscoveryOutput: typeof import("./getIpamResourceDiscovery").getIpamResourceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getIpamResourceDiscovery","getIpamResourceDiscoveryOutput"], () => require("./getIpamResourceDiscovery"));

export { GetIpamResourceDiscoveryAssociationArgs, GetIpamResourceDiscoveryAssociationResult, GetIpamResourceDiscoveryAssociationOutputArgs } from "./getIpamResourceDiscoveryAssociation";
export const getIpamResourceDiscoveryAssociation: typeof import("./getIpamResourceDiscoveryAssociation").getIpamResourceDiscoveryAssociation = null as any;
export const getIpamResourceDiscoveryAssociationOutput: typeof import("./getIpamResourceDiscoveryAssociation").getIpamResourceDiscoveryAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getIpamResourceDiscoveryAssociation","getIpamResourceDiscoveryAssociationOutput"], () => require("./getIpamResourceDiscoveryAssociation"));

export { GetIpamScopeArgs, GetIpamScopeResult, GetIpamScopeOutputArgs } from "./getIpamScope";
export const getIpamScope: typeof import("./getIpamScope").getIpamScope = null as any;
export const getIpamScopeOutput: typeof import("./getIpamScope").getIpamScopeOutput = null as any;
utilities.lazyLoad(exports, ["getIpamScope","getIpamScopeOutput"], () => require("./getIpamScope"));

export { GetKeyPairArgs, GetKeyPairResult, GetKeyPairOutputArgs } from "./getKeyPair";
export const getKeyPair: typeof import("./getKeyPair").getKeyPair = null as any;
export const getKeyPairOutput: typeof import("./getKeyPair").getKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPair","getKeyPairOutput"], () => require("./getKeyPair"));

export { GetLaunchTemplateArgs, GetLaunchTemplateResult, GetLaunchTemplateOutputArgs } from "./getLaunchTemplate";
export const getLaunchTemplate: typeof import("./getLaunchTemplate").getLaunchTemplate = null as any;
export const getLaunchTemplateOutput: typeof import("./getLaunchTemplate").getLaunchTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchTemplate","getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));

export { GetLocalGatewayRouteArgs, GetLocalGatewayRouteResult, GetLocalGatewayRouteOutputArgs } from "./getLocalGatewayRoute";
export const getLocalGatewayRoute: typeof import("./getLocalGatewayRoute").getLocalGatewayRoute = null as any;
export const getLocalGatewayRouteOutput: typeof import("./getLocalGatewayRoute").getLocalGatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRoute","getLocalGatewayRouteOutput"], () => require("./getLocalGatewayRoute"));

export { GetLocalGatewayRouteTableArgs, GetLocalGatewayRouteTableResult, GetLocalGatewayRouteTableOutputArgs } from "./getLocalGatewayRouteTable";
export const getLocalGatewayRouteTable: typeof import("./getLocalGatewayRouteTable").getLocalGatewayRouteTable = null as any;
export const getLocalGatewayRouteTableOutput: typeof import("./getLocalGatewayRouteTable").getLocalGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTable","getLocalGatewayRouteTableOutput"], () => require("./getLocalGatewayRouteTable"));

export { GetLocalGatewayRouteTableVirtualInterfaceGroupAssociationArgs, GetLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult, GetLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutputArgs } from "./getLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
export const getLocalGatewayRouteTableVirtualInterfaceGroupAssociation: typeof import("./getLocalGatewayRouteTableVirtualInterfaceGroupAssociation").getLocalGatewayRouteTableVirtualInterfaceGroupAssociation = null as any;
export const getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput: typeof import("./getLocalGatewayRouteTableVirtualInterfaceGroupAssociation").getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTableVirtualInterfaceGroupAssociation","getLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput"], () => require("./getLocalGatewayRouteTableVirtualInterfaceGroupAssociation"));

export { GetLocalGatewayRouteTableVpcAssociationArgs, GetLocalGatewayRouteTableVpcAssociationResult, GetLocalGatewayRouteTableVpcAssociationOutputArgs } from "./getLocalGatewayRouteTableVpcAssociation";
export const getLocalGatewayRouteTableVpcAssociation: typeof import("./getLocalGatewayRouteTableVpcAssociation").getLocalGatewayRouteTableVpcAssociation = null as any;
export const getLocalGatewayRouteTableVpcAssociationOutput: typeof import("./getLocalGatewayRouteTableVpcAssociation").getLocalGatewayRouteTableVpcAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTableVpcAssociation","getLocalGatewayRouteTableVpcAssociationOutput"], () => require("./getLocalGatewayRouteTableVpcAssociation"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNetworkAclArgs, GetNetworkAclResult, GetNetworkAclOutputArgs } from "./getNetworkAcl";
export const getNetworkAcl: typeof import("./getNetworkAcl").getNetworkAcl = null as any;
export const getNetworkAclOutput: typeof import("./getNetworkAcl").getNetworkAclOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAcl","getNetworkAclOutput"], () => require("./getNetworkAcl"));

export { GetNetworkAclEntryArgs, GetNetworkAclEntryResult, GetNetworkAclEntryOutputArgs } from "./getNetworkAclEntry";
export const getNetworkAclEntry: typeof import("./getNetworkAclEntry").getNetworkAclEntry = null as any;
export const getNetworkAclEntryOutput: typeof import("./getNetworkAclEntry").getNetworkAclEntryOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAclEntry","getNetworkAclEntryOutput"], () => require("./getNetworkAclEntry"));

export { GetNetworkInsightsAccessScopeArgs, GetNetworkInsightsAccessScopeResult, GetNetworkInsightsAccessScopeOutputArgs } from "./getNetworkInsightsAccessScope";
export const getNetworkInsightsAccessScope: typeof import("./getNetworkInsightsAccessScope").getNetworkInsightsAccessScope = null as any;
export const getNetworkInsightsAccessScopeOutput: typeof import("./getNetworkInsightsAccessScope").getNetworkInsightsAccessScopeOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScope","getNetworkInsightsAccessScopeOutput"], () => require("./getNetworkInsightsAccessScope"));

export { GetNetworkInsightsAccessScopeAnalysisArgs, GetNetworkInsightsAccessScopeAnalysisResult, GetNetworkInsightsAccessScopeAnalysisOutputArgs } from "./getNetworkInsightsAccessScopeAnalysis";
export const getNetworkInsightsAccessScopeAnalysis: typeof import("./getNetworkInsightsAccessScopeAnalysis").getNetworkInsightsAccessScopeAnalysis = null as any;
export const getNetworkInsightsAccessScopeAnalysisOutput: typeof import("./getNetworkInsightsAccessScopeAnalysis").getNetworkInsightsAccessScopeAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScopeAnalysis","getNetworkInsightsAccessScopeAnalysisOutput"], () => require("./getNetworkInsightsAccessScopeAnalysis"));

export { GetNetworkInsightsAnalysisArgs, GetNetworkInsightsAnalysisResult, GetNetworkInsightsAnalysisOutputArgs } from "./getNetworkInsightsAnalysis";
export const getNetworkInsightsAnalysis: typeof import("./getNetworkInsightsAnalysis").getNetworkInsightsAnalysis = null as any;
export const getNetworkInsightsAnalysisOutput: typeof import("./getNetworkInsightsAnalysis").getNetworkInsightsAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsAnalysis","getNetworkInsightsAnalysisOutput"], () => require("./getNetworkInsightsAnalysis"));

export { GetNetworkInsightsPathArgs, GetNetworkInsightsPathResult, GetNetworkInsightsPathOutputArgs } from "./getNetworkInsightsPath";
export const getNetworkInsightsPath: typeof import("./getNetworkInsightsPath").getNetworkInsightsPath = null as any;
export const getNetworkInsightsPathOutput: typeof import("./getNetworkInsightsPath").getNetworkInsightsPathOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInsightsPath","getNetworkInsightsPathOutput"], () => require("./getNetworkInsightsPath"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkInterfaceAttachmentArgs, GetNetworkInterfaceAttachmentResult, GetNetworkInterfaceAttachmentOutputArgs } from "./getNetworkInterfaceAttachment";
export const getNetworkInterfaceAttachment: typeof import("./getNetworkInterfaceAttachment").getNetworkInterfaceAttachment = null as any;
export const getNetworkInterfaceAttachmentOutput: typeof import("./getNetworkInterfaceAttachment").getNetworkInterfaceAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaceAttachment","getNetworkInterfaceAttachmentOutput"], () => require("./getNetworkInterfaceAttachment"));

export { GetNetworkInterfacePermissionArgs, GetNetworkInterfacePermissionResult, GetNetworkInterfacePermissionOutputArgs } from "./getNetworkInterfacePermission";
export const getNetworkInterfacePermission: typeof import("./getNetworkInterfacePermission").getNetworkInterfacePermission = null as any;
export const getNetworkInterfacePermissionOutput: typeof import("./getNetworkInterfacePermission").getNetworkInterfacePermissionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfacePermission","getNetworkInterfacePermissionOutput"], () => require("./getNetworkInterfacePermission"));

export { GetPlacementGroupArgs, GetPlacementGroupResult, GetPlacementGroupOutputArgs } from "./getPlacementGroup";
export const getPlacementGroup: typeof import("./getPlacementGroup").getPlacementGroup = null as any;
export const getPlacementGroupOutput: typeof import("./getPlacementGroup").getPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPlacementGroup","getPlacementGroupOutput"], () => require("./getPlacementGroup"));

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupEgressArgs, GetSecurityGroupEgressResult, GetSecurityGroupEgressOutputArgs } from "./getSecurityGroupEgress";
export const getSecurityGroupEgress: typeof import("./getSecurityGroupEgress").getSecurityGroupEgress = null as any;
export const getSecurityGroupEgressOutput: typeof import("./getSecurityGroupEgress").getSecurityGroupEgressOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupEgress","getSecurityGroupEgressOutput"], () => require("./getSecurityGroupEgress"));

export { GetSecurityGroupIngressArgs, GetSecurityGroupIngressResult, GetSecurityGroupIngressOutputArgs } from "./getSecurityGroupIngress";
export const getSecurityGroupIngress: typeof import("./getSecurityGroupIngress").getSecurityGroupIngress = null as any;
export const getSecurityGroupIngressOutput: typeof import("./getSecurityGroupIngress").getSecurityGroupIngressOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupIngress","getSecurityGroupIngressOutput"], () => require("./getSecurityGroupIngress"));

export { GetSpotFleetArgs, GetSpotFleetResult, GetSpotFleetOutputArgs } from "./getSpotFleet";
export const getSpotFleet: typeof import("./getSpotFleet").getSpotFleet = null as any;
export const getSpotFleetOutput: typeof import("./getSpotFleet").getSpotFleetOutput = null as any;
utilities.lazyLoad(exports, ["getSpotFleet","getSpotFleetOutput"], () => require("./getSpotFleet"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetCidrBlockArgs, GetSubnetCidrBlockResult, GetSubnetCidrBlockOutputArgs } from "./getSubnetCidrBlock";
export const getSubnetCidrBlock: typeof import("./getSubnetCidrBlock").getSubnetCidrBlock = null as any;
export const getSubnetCidrBlockOutput: typeof import("./getSubnetCidrBlock").getSubnetCidrBlockOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetCidrBlock","getSubnetCidrBlockOutput"], () => require("./getSubnetCidrBlock"));

export { GetSubnetNetworkAclAssociationArgs, GetSubnetNetworkAclAssociationResult, GetSubnetNetworkAclAssociationOutputArgs } from "./getSubnetNetworkAclAssociation";
export const getSubnetNetworkAclAssociation: typeof import("./getSubnetNetworkAclAssociation").getSubnetNetworkAclAssociation = null as any;
export const getSubnetNetworkAclAssociationOutput: typeof import("./getSubnetNetworkAclAssociation").getSubnetNetworkAclAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetNetworkAclAssociation","getSubnetNetworkAclAssociationOutput"], () => require("./getSubnetNetworkAclAssociation"));

export { GetSubnetRouteTableAssociationArgs, GetSubnetRouteTableAssociationResult, GetSubnetRouteTableAssociationOutputArgs } from "./getSubnetRouteTableAssociation";
export const getSubnetRouteTableAssociation: typeof import("./getSubnetRouteTableAssociation").getSubnetRouteTableAssociation = null as any;
export const getSubnetRouteTableAssociationOutput: typeof import("./getSubnetRouteTableAssociation").getSubnetRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetRouteTableAssociation","getSubnetRouteTableAssociationOutput"], () => require("./getSubnetRouteTableAssociation"));

export { GetTrafficMirrorFilterArgs, GetTrafficMirrorFilterResult, GetTrafficMirrorFilterOutputArgs } from "./getTrafficMirrorFilter";
export const getTrafficMirrorFilter: typeof import("./getTrafficMirrorFilter").getTrafficMirrorFilter = null as any;
export const getTrafficMirrorFilterOutput: typeof import("./getTrafficMirrorFilter").getTrafficMirrorFilterOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficMirrorFilter","getTrafficMirrorFilterOutput"], () => require("./getTrafficMirrorFilter"));

export { GetTrafficMirrorFilterRuleArgs, GetTrafficMirrorFilterRuleResult, GetTrafficMirrorFilterRuleOutputArgs } from "./getTrafficMirrorFilterRule";
export const getTrafficMirrorFilterRule: typeof import("./getTrafficMirrorFilterRule").getTrafficMirrorFilterRule = null as any;
export const getTrafficMirrorFilterRuleOutput: typeof import("./getTrafficMirrorFilterRule").getTrafficMirrorFilterRuleOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficMirrorFilterRule","getTrafficMirrorFilterRuleOutput"], () => require("./getTrafficMirrorFilterRule"));

export { GetTrafficMirrorSessionArgs, GetTrafficMirrorSessionResult, GetTrafficMirrorSessionOutputArgs } from "./getTrafficMirrorSession";
export const getTrafficMirrorSession: typeof import("./getTrafficMirrorSession").getTrafficMirrorSession = null as any;
export const getTrafficMirrorSessionOutput: typeof import("./getTrafficMirrorSession").getTrafficMirrorSessionOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficMirrorSession","getTrafficMirrorSessionOutput"], () => require("./getTrafficMirrorSession"));

export { GetTrafficMirrorTargetArgs, GetTrafficMirrorTargetResult, GetTrafficMirrorTargetOutputArgs } from "./getTrafficMirrorTarget";
export const getTrafficMirrorTarget: typeof import("./getTrafficMirrorTarget").getTrafficMirrorTarget = null as any;
export const getTrafficMirrorTargetOutput: typeof import("./getTrafficMirrorTarget").getTrafficMirrorTargetOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficMirrorTarget","getTrafficMirrorTargetOutput"], () => require("./getTrafficMirrorTarget"));

export { GetTransitGatewayArgs, GetTransitGatewayResult, GetTransitGatewayOutputArgs } from "./getTransitGateway";
export const getTransitGateway: typeof import("./getTransitGateway").getTransitGateway = null as any;
export const getTransitGatewayOutput: typeof import("./getTransitGateway").getTransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateway","getTransitGatewayOutput"], () => require("./getTransitGateway"));

export { GetTransitGatewayAttachmentArgs, GetTransitGatewayAttachmentResult, GetTransitGatewayAttachmentOutputArgs } from "./getTransitGatewayAttachment";
export const getTransitGatewayAttachment: typeof import("./getTransitGatewayAttachment").getTransitGatewayAttachment = null as any;
export const getTransitGatewayAttachmentOutput: typeof import("./getTransitGatewayAttachment").getTransitGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayAttachment","getTransitGatewayAttachmentOutput"], () => require("./getTransitGatewayAttachment"));

export { GetTransitGatewayConnectArgs, GetTransitGatewayConnectResult, GetTransitGatewayConnectOutputArgs } from "./getTransitGatewayConnect";
export const getTransitGatewayConnect: typeof import("./getTransitGatewayConnect").getTransitGatewayConnect = null as any;
export const getTransitGatewayConnectOutput: typeof import("./getTransitGatewayConnect").getTransitGatewayConnectOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayConnect","getTransitGatewayConnectOutput"], () => require("./getTransitGatewayConnect"));

export { GetTransitGatewayMulticastDomainArgs, GetTransitGatewayMulticastDomainResult, GetTransitGatewayMulticastDomainOutputArgs } from "./getTransitGatewayMulticastDomain";
export const getTransitGatewayMulticastDomain: typeof import("./getTransitGatewayMulticastDomain").getTransitGatewayMulticastDomain = null as any;
export const getTransitGatewayMulticastDomainOutput: typeof import("./getTransitGatewayMulticastDomain").getTransitGatewayMulticastDomainOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomain","getTransitGatewayMulticastDomainOutput"], () => require("./getTransitGatewayMulticastDomain"));

export { GetTransitGatewayMulticastDomainAssociationArgs, GetTransitGatewayMulticastDomainAssociationResult, GetTransitGatewayMulticastDomainAssociationOutputArgs } from "./getTransitGatewayMulticastDomainAssociation";
export const getTransitGatewayMulticastDomainAssociation: typeof import("./getTransitGatewayMulticastDomainAssociation").getTransitGatewayMulticastDomainAssociation = null as any;
export const getTransitGatewayMulticastDomainAssociationOutput: typeof import("./getTransitGatewayMulticastDomainAssociation").getTransitGatewayMulticastDomainAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomainAssociation","getTransitGatewayMulticastDomainAssociationOutput"], () => require("./getTransitGatewayMulticastDomainAssociation"));

export { GetTransitGatewayMulticastGroupMemberArgs, GetTransitGatewayMulticastGroupMemberResult, GetTransitGatewayMulticastGroupMemberOutputArgs } from "./getTransitGatewayMulticastGroupMember";
export const getTransitGatewayMulticastGroupMember: typeof import("./getTransitGatewayMulticastGroupMember").getTransitGatewayMulticastGroupMember = null as any;
export const getTransitGatewayMulticastGroupMemberOutput: typeof import("./getTransitGatewayMulticastGroupMember").getTransitGatewayMulticastGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupMember","getTransitGatewayMulticastGroupMemberOutput"], () => require("./getTransitGatewayMulticastGroupMember"));

export { GetTransitGatewayMulticastGroupSourceArgs, GetTransitGatewayMulticastGroupSourceResult, GetTransitGatewayMulticastGroupSourceOutputArgs } from "./getTransitGatewayMulticastGroupSource";
export const getTransitGatewayMulticastGroupSource: typeof import("./getTransitGatewayMulticastGroupSource").getTransitGatewayMulticastGroupSource = null as any;
export const getTransitGatewayMulticastGroupSourceOutput: typeof import("./getTransitGatewayMulticastGroupSource").getTransitGatewayMulticastGroupSourceOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupSource","getTransitGatewayMulticastGroupSourceOutput"], () => require("./getTransitGatewayMulticastGroupSource"));

export { GetTransitGatewayPeeringAttachmentArgs, GetTransitGatewayPeeringAttachmentResult, GetTransitGatewayPeeringAttachmentOutputArgs } from "./getTransitGatewayPeeringAttachment";
export const getTransitGatewayPeeringAttachment: typeof import("./getTransitGatewayPeeringAttachment").getTransitGatewayPeeringAttachment = null as any;
export const getTransitGatewayPeeringAttachmentOutput: typeof import("./getTransitGatewayPeeringAttachment").getTransitGatewayPeeringAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayPeeringAttachment","getTransitGatewayPeeringAttachmentOutput"], () => require("./getTransitGatewayPeeringAttachment"));

export { GetTransitGatewayRouteArgs, GetTransitGatewayRouteResult, GetTransitGatewayRouteOutputArgs } from "./getTransitGatewayRoute";
export const getTransitGatewayRoute: typeof import("./getTransitGatewayRoute").getTransitGatewayRoute = null as any;
export const getTransitGatewayRouteOutput: typeof import("./getTransitGatewayRoute").getTransitGatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRoute","getTransitGatewayRouteOutput"], () => require("./getTransitGatewayRoute"));

export { GetTransitGatewayRouteTableArgs, GetTransitGatewayRouteTableResult, GetTransitGatewayRouteTableOutputArgs } from "./getTransitGatewayRouteTable";
export const getTransitGatewayRouteTable: typeof import("./getTransitGatewayRouteTable").getTransitGatewayRouteTable = null as any;
export const getTransitGatewayRouteTableOutput: typeof import("./getTransitGatewayRouteTable").getTransitGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTable","getTransitGatewayRouteTableOutput"], () => require("./getTransitGatewayRouteTable"));

export { GetTransitGatewayRouteTableAssociationArgs, GetTransitGatewayRouteTableAssociationResult, GetTransitGatewayRouteTableAssociationOutputArgs } from "./getTransitGatewayRouteTableAssociation";
export const getTransitGatewayRouteTableAssociation: typeof import("./getTransitGatewayRouteTableAssociation").getTransitGatewayRouteTableAssociation = null as any;
export const getTransitGatewayRouteTableAssociationOutput: typeof import("./getTransitGatewayRouteTableAssociation").getTransitGatewayRouteTableAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTableAssociation","getTransitGatewayRouteTableAssociationOutput"], () => require("./getTransitGatewayRouteTableAssociation"));

export { GetTransitGatewayRouteTablePropagationArgs, GetTransitGatewayRouteTablePropagationResult, GetTransitGatewayRouteTablePropagationOutputArgs } from "./getTransitGatewayRouteTablePropagation";
export const getTransitGatewayRouteTablePropagation: typeof import("./getTransitGatewayRouteTablePropagation").getTransitGatewayRouteTablePropagation = null as any;
export const getTransitGatewayRouteTablePropagationOutput: typeof import("./getTransitGatewayRouteTablePropagation").getTransitGatewayRouteTablePropagationOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTablePropagation","getTransitGatewayRouteTablePropagationOutput"], () => require("./getTransitGatewayRouteTablePropagation"));

export { GetTransitGatewayVpcAttachmentArgs, GetTransitGatewayVpcAttachmentResult, GetTransitGatewayVpcAttachmentOutputArgs } from "./getTransitGatewayVpcAttachment";
export const getTransitGatewayVpcAttachment: typeof import("./getTransitGatewayVpcAttachment").getTransitGatewayVpcAttachment = null as any;
export const getTransitGatewayVpcAttachmentOutput: typeof import("./getTransitGatewayVpcAttachment").getTransitGatewayVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayVpcAttachment","getTransitGatewayVpcAttachmentOutput"], () => require("./getTransitGatewayVpcAttachment"));

export { GetVerifiedAccessEndpointArgs, GetVerifiedAccessEndpointResult, GetVerifiedAccessEndpointOutputArgs } from "./getVerifiedAccessEndpoint";
export const getVerifiedAccessEndpoint: typeof import("./getVerifiedAccessEndpoint").getVerifiedAccessEndpoint = null as any;
export const getVerifiedAccessEndpointOutput: typeof import("./getVerifiedAccessEndpoint").getVerifiedAccessEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedAccessEndpoint","getVerifiedAccessEndpointOutput"], () => require("./getVerifiedAccessEndpoint"));

export { GetVerifiedAccessGroupArgs, GetVerifiedAccessGroupResult, GetVerifiedAccessGroupOutputArgs } from "./getVerifiedAccessGroup";
export const getVerifiedAccessGroup: typeof import("./getVerifiedAccessGroup").getVerifiedAccessGroup = null as any;
export const getVerifiedAccessGroupOutput: typeof import("./getVerifiedAccessGroup").getVerifiedAccessGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedAccessGroup","getVerifiedAccessGroupOutput"], () => require("./getVerifiedAccessGroup"));

export { GetVerifiedAccessInstanceArgs, GetVerifiedAccessInstanceResult, GetVerifiedAccessInstanceOutputArgs } from "./getVerifiedAccessInstance";
export const getVerifiedAccessInstance: typeof import("./getVerifiedAccessInstance").getVerifiedAccessInstance = null as any;
export const getVerifiedAccessInstanceOutput: typeof import("./getVerifiedAccessInstance").getVerifiedAccessInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedAccessInstance","getVerifiedAccessInstanceOutput"], () => require("./getVerifiedAccessInstance"));

export { GetVerifiedAccessTrustProviderArgs, GetVerifiedAccessTrustProviderResult, GetVerifiedAccessTrustProviderOutputArgs } from "./getVerifiedAccessTrustProvider";
export const getVerifiedAccessTrustProvider: typeof import("./getVerifiedAccessTrustProvider").getVerifiedAccessTrustProvider = null as any;
export const getVerifiedAccessTrustProviderOutput: typeof import("./getVerifiedAccessTrustProvider").getVerifiedAccessTrustProviderOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedAccessTrustProvider","getVerifiedAccessTrustProviderOutput"], () => require("./getVerifiedAccessTrustProvider"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcCidrBlockArgs, GetVpcCidrBlockResult, GetVpcCidrBlockOutputArgs } from "./getVpcCidrBlock";
export const getVpcCidrBlock: typeof import("./getVpcCidrBlock").getVpcCidrBlock = null as any;
export const getVpcCidrBlockOutput: typeof import("./getVpcCidrBlock").getVpcCidrBlockOutput = null as any;
utilities.lazyLoad(exports, ["getVpcCidrBlock","getVpcCidrBlockOutput"], () => require("./getVpcCidrBlock"));

export { GetVpcEndpointArgs, GetVpcEndpointResult, GetVpcEndpointOutputArgs } from "./getVpcEndpoint";
export const getVpcEndpoint: typeof import("./getVpcEndpoint").getVpcEndpoint = null as any;
export const getVpcEndpointOutput: typeof import("./getVpcEndpoint").getVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpoint","getVpcEndpointOutput"], () => require("./getVpcEndpoint"));

export { GetVpcEndpointConnectionNotificationArgs, GetVpcEndpointConnectionNotificationResult, GetVpcEndpointConnectionNotificationOutputArgs } from "./getVpcEndpointConnectionNotification";
export const getVpcEndpointConnectionNotification: typeof import("./getVpcEndpointConnectionNotification").getVpcEndpointConnectionNotification = null as any;
export const getVpcEndpointConnectionNotificationOutput: typeof import("./getVpcEndpointConnectionNotification").getVpcEndpointConnectionNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpointConnectionNotification","getVpcEndpointConnectionNotificationOutput"], () => require("./getVpcEndpointConnectionNotification"));

export { GetVpcEndpointServiceArgs, GetVpcEndpointServiceResult, GetVpcEndpointServiceOutputArgs } from "./getVpcEndpointService";
export const getVpcEndpointService: typeof import("./getVpcEndpointService").getVpcEndpointService = null as any;
export const getVpcEndpointServiceOutput: typeof import("./getVpcEndpointService").getVpcEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpointService","getVpcEndpointServiceOutput"], () => require("./getVpcEndpointService"));

export { GetVpcEndpointServicePermissionsArgs, GetVpcEndpointServicePermissionsResult, GetVpcEndpointServicePermissionsOutputArgs } from "./getVpcEndpointServicePermissions";
export const getVpcEndpointServicePermissions: typeof import("./getVpcEndpointServicePermissions").getVpcEndpointServicePermissions = null as any;
export const getVpcEndpointServicePermissionsOutput: typeof import("./getVpcEndpointServicePermissions").getVpcEndpointServicePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpointServicePermissions","getVpcEndpointServicePermissionsOutput"], () => require("./getVpcEndpointServicePermissions"));

export { GetVpcGatewayAttachmentArgs, GetVpcGatewayAttachmentResult, GetVpcGatewayAttachmentOutputArgs } from "./getVpcGatewayAttachment";
export const getVpcGatewayAttachment: typeof import("./getVpcGatewayAttachment").getVpcGatewayAttachment = null as any;
export const getVpcGatewayAttachmentOutput: typeof import("./getVpcGatewayAttachment").getVpcGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayAttachment","getVpcGatewayAttachmentOutput"], () => require("./getVpcGatewayAttachment"));

export { GetVpcPeeringConnectionArgs, GetVpcPeeringConnectionResult, GetVpcPeeringConnectionOutputArgs } from "./getVpcPeeringConnection";
export const getVpcPeeringConnection: typeof import("./getVpcPeeringConnection").getVpcPeeringConnection = null as any;
export const getVpcPeeringConnectionOutput: typeof import("./getVpcPeeringConnection").getVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringConnection","getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));

export { GetVpnConnectionArgs, GetVpnConnectionResult, GetVpnConnectionOutputArgs } from "./getVpnConnection";
export const getVpnConnection: typeof import("./getVpnConnection").getVpnConnection = null as any;
export const getVpnConnectionOutput: typeof import("./getVpnConnection").getVpnConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnection","getVpnConnectionOutput"], () => require("./getVpnConnection"));

export { GetVpnGatewayArgs, GetVpnGatewayResult, GetVpnGatewayOutputArgs } from "./getVpnGateway";
export const getVpnGateway: typeof import("./getVpnGateway").getVpnGateway = null as any;
export const getVpnGatewayOutput: typeof import("./getVpnGateway").getVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateway","getVpnGatewayOutput"], () => require("./getVpnGateway"));

export { GetVpnGatewayRoutePropagationArgs, GetVpnGatewayRoutePropagationResult, GetVpnGatewayRoutePropagationOutputArgs } from "./getVpnGatewayRoutePropagation";
export const getVpnGatewayRoutePropagation: typeof import("./getVpnGatewayRoutePropagation").getVpnGatewayRoutePropagation = null as any;
export const getVpnGatewayRoutePropagationOutput: typeof import("./getVpnGatewayRoutePropagation").getVpnGatewayRoutePropagationOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayRoutePropagation","getVpnGatewayRoutePropagationOutput"], () => require("./getVpnGatewayRoutePropagation"));

export { HostArgs } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceConnectEndpointArgs } from "./instanceConnectEndpoint";
export type InstanceConnectEndpoint = import("./instanceConnectEndpoint").InstanceConnectEndpoint;
export const InstanceConnectEndpoint: typeof import("./instanceConnectEndpoint").InstanceConnectEndpoint = null as any;
utilities.lazyLoad(exports, ["InstanceConnectEndpoint"], () => require("./instanceConnectEndpoint"));

export { InternetGatewayArgs } from "./internetGateway";
export type InternetGateway = import("./internetGateway").InternetGateway;
export const InternetGateway: typeof import("./internetGateway").InternetGateway = null as any;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));

export { IpamArgs } from "./ipam";
export type Ipam = import("./ipam").Ipam;
export const Ipam: typeof import("./ipam").Ipam = null as any;
utilities.lazyLoad(exports, ["Ipam"], () => require("./ipam"));

export { IpamAllocationArgs } from "./ipamAllocation";
export type IpamAllocation = import("./ipamAllocation").IpamAllocation;
export const IpamAllocation: typeof import("./ipamAllocation").IpamAllocation = null as any;
utilities.lazyLoad(exports, ["IpamAllocation"], () => require("./ipamAllocation"));

export { IpamPoolArgs } from "./ipamPool";
export type IpamPool = import("./ipamPool").IpamPool;
export const IpamPool: typeof import("./ipamPool").IpamPool = null as any;
utilities.lazyLoad(exports, ["IpamPool"], () => require("./ipamPool"));

export { IpamPoolCidrArgs } from "./ipamPoolCidr";
export type IpamPoolCidr = import("./ipamPoolCidr").IpamPoolCidr;
export const IpamPoolCidr: typeof import("./ipamPoolCidr").IpamPoolCidr = null as any;
utilities.lazyLoad(exports, ["IpamPoolCidr"], () => require("./ipamPoolCidr"));

export { IpamResourceDiscoveryArgs } from "./ipamResourceDiscovery";
export type IpamResourceDiscovery = import("./ipamResourceDiscovery").IpamResourceDiscovery;
export const IpamResourceDiscovery: typeof import("./ipamResourceDiscovery").IpamResourceDiscovery = null as any;
utilities.lazyLoad(exports, ["IpamResourceDiscovery"], () => require("./ipamResourceDiscovery"));

export { IpamResourceDiscoveryAssociationArgs } from "./ipamResourceDiscoveryAssociation";
export type IpamResourceDiscoveryAssociation = import("./ipamResourceDiscoveryAssociation").IpamResourceDiscoveryAssociation;
export const IpamResourceDiscoveryAssociation: typeof import("./ipamResourceDiscoveryAssociation").IpamResourceDiscoveryAssociation = null as any;
utilities.lazyLoad(exports, ["IpamResourceDiscoveryAssociation"], () => require("./ipamResourceDiscoveryAssociation"));

export { IpamScopeArgs } from "./ipamScope";
export type IpamScope = import("./ipamScope").IpamScope;
export const IpamScope: typeof import("./ipamScope").IpamScope = null as any;
utilities.lazyLoad(exports, ["IpamScope"], () => require("./ipamScope"));

export { KeyPairArgs } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { LaunchTemplateArgs } from "./launchTemplate";
export type LaunchTemplate = import("./launchTemplate").LaunchTemplate;
export const LaunchTemplate: typeof import("./launchTemplate").LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));

export { LocalGatewayRouteArgs } from "./localGatewayRoute";
export type LocalGatewayRoute = import("./localGatewayRoute").LocalGatewayRoute;
export const LocalGatewayRoute: typeof import("./localGatewayRoute").LocalGatewayRoute = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRoute"], () => require("./localGatewayRoute"));

export { LocalGatewayRouteTableArgs } from "./localGatewayRouteTable";
export type LocalGatewayRouteTable = import("./localGatewayRouteTable").LocalGatewayRouteTable;
export const LocalGatewayRouteTable: typeof import("./localGatewayRouteTable").LocalGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRouteTable"], () => require("./localGatewayRouteTable"));

export { LocalGatewayRouteTableVirtualInterfaceGroupAssociationArgs } from "./localGatewayRouteTableVirtualInterfaceGroupAssociation";
export type LocalGatewayRouteTableVirtualInterfaceGroupAssociation = import("./localGatewayRouteTableVirtualInterfaceGroupAssociation").LocalGatewayRouteTableVirtualInterfaceGroupAssociation;
export const LocalGatewayRouteTableVirtualInterfaceGroupAssociation: typeof import("./localGatewayRouteTableVirtualInterfaceGroupAssociation").LocalGatewayRouteTableVirtualInterfaceGroupAssociation = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"], () => require("./localGatewayRouteTableVirtualInterfaceGroupAssociation"));

export { LocalGatewayRouteTableVpcAssociationArgs } from "./localGatewayRouteTableVpcAssociation";
export type LocalGatewayRouteTableVpcAssociation = import("./localGatewayRouteTableVpcAssociation").LocalGatewayRouteTableVpcAssociation;
export const LocalGatewayRouteTableVpcAssociation: typeof import("./localGatewayRouteTableVpcAssociation").LocalGatewayRouteTableVpcAssociation = null as any;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVpcAssociation"], () => require("./localGatewayRouteTableVpcAssociation"));

export { NatGatewayArgs } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NetworkAclArgs } from "./networkAcl";
export type NetworkAcl = import("./networkAcl").NetworkAcl;
export const NetworkAcl: typeof import("./networkAcl").NetworkAcl = null as any;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));

export { NetworkAclEntryArgs } from "./networkAclEntry";
export type NetworkAclEntry = import("./networkAclEntry").NetworkAclEntry;
export const NetworkAclEntry: typeof import("./networkAclEntry").NetworkAclEntry = null as any;
utilities.lazyLoad(exports, ["NetworkAclEntry"], () => require("./networkAclEntry"));

export { NetworkInsightsAccessScopeArgs } from "./networkInsightsAccessScope";
export type NetworkInsightsAccessScope = import("./networkInsightsAccessScope").NetworkInsightsAccessScope;
export const NetworkInsightsAccessScope: typeof import("./networkInsightsAccessScope").NetworkInsightsAccessScope = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScope"], () => require("./networkInsightsAccessScope"));

export { NetworkInsightsAccessScopeAnalysisArgs } from "./networkInsightsAccessScopeAnalysis";
export type NetworkInsightsAccessScopeAnalysis = import("./networkInsightsAccessScopeAnalysis").NetworkInsightsAccessScopeAnalysis;
export const NetworkInsightsAccessScopeAnalysis: typeof import("./networkInsightsAccessScopeAnalysis").NetworkInsightsAccessScopeAnalysis = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScopeAnalysis"], () => require("./networkInsightsAccessScopeAnalysis"));

export { NetworkInsightsAnalysisArgs } from "./networkInsightsAnalysis";
export type NetworkInsightsAnalysis = import("./networkInsightsAnalysis").NetworkInsightsAnalysis;
export const NetworkInsightsAnalysis: typeof import("./networkInsightsAnalysis").NetworkInsightsAnalysis = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsAnalysis"], () => require("./networkInsightsAnalysis"));

export { NetworkInsightsPathArgs } from "./networkInsightsPath";
export type NetworkInsightsPath = import("./networkInsightsPath").NetworkInsightsPath;
export const NetworkInsightsPath: typeof import("./networkInsightsPath").NetworkInsightsPath = null as any;
utilities.lazyLoad(exports, ["NetworkInsightsPath"], () => require("./networkInsightsPath"));

export { NetworkInterfaceArgs } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceAttachmentArgs } from "./networkInterfaceAttachment";
export type NetworkInterfaceAttachment = import("./networkInterfaceAttachment").NetworkInterfaceAttachment;
export const NetworkInterfaceAttachment: typeof import("./networkInterfaceAttachment").NetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));

export { NetworkInterfacePermissionArgs } from "./networkInterfacePermission";
export type NetworkInterfacePermission = import("./networkInterfacePermission").NetworkInterfacePermission;
export const NetworkInterfacePermission: typeof import("./networkInterfacePermission").NetworkInterfacePermission = null as any;
utilities.lazyLoad(exports, ["NetworkInterfacePermission"], () => require("./networkInterfacePermission"));

export { NetworkPerformanceMetricSubscriptionArgs } from "./networkPerformanceMetricSubscription";
export type NetworkPerformanceMetricSubscription = import("./networkPerformanceMetricSubscription").NetworkPerformanceMetricSubscription;
export const NetworkPerformanceMetricSubscription: typeof import("./networkPerformanceMetricSubscription").NetworkPerformanceMetricSubscription = null as any;
utilities.lazyLoad(exports, ["NetworkPerformanceMetricSubscription"], () => require("./networkPerformanceMetricSubscription"));

export { PlacementGroupArgs } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export { PrefixListArgs } from "./prefixList";
export type PrefixList = import("./prefixList").PrefixList;
export const PrefixList: typeof import("./prefixList").PrefixList = null as any;
utilities.lazyLoad(exports, ["PrefixList"], () => require("./prefixList"));

export { RouteArgs } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { SecurityGroupArgs } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupEgressArgs } from "./securityGroupEgress";
export type SecurityGroupEgress = import("./securityGroupEgress").SecurityGroupEgress;
export const SecurityGroupEgress: typeof import("./securityGroupEgress").SecurityGroupEgress = null as any;
utilities.lazyLoad(exports, ["SecurityGroupEgress"], () => require("./securityGroupEgress"));

export { SecurityGroupIngressArgs } from "./securityGroupIngress";
export type SecurityGroupIngress = import("./securityGroupIngress").SecurityGroupIngress;
export const SecurityGroupIngress: typeof import("./securityGroupIngress").SecurityGroupIngress = null as any;
utilities.lazyLoad(exports, ["SecurityGroupIngress"], () => require("./securityGroupIngress"));

export { SpotFleetArgs } from "./spotFleet";
export type SpotFleet = import("./spotFleet").SpotFleet;
export const SpotFleet: typeof import("./spotFleet").SpotFleet = null as any;
utilities.lazyLoad(exports, ["SpotFleet"], () => require("./spotFleet"));

export { SubnetArgs } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetCidrBlockArgs } from "./subnetCidrBlock";
export type SubnetCidrBlock = import("./subnetCidrBlock").SubnetCidrBlock;
export const SubnetCidrBlock: typeof import("./subnetCidrBlock").SubnetCidrBlock = null as any;
utilities.lazyLoad(exports, ["SubnetCidrBlock"], () => require("./subnetCidrBlock"));

export { SubnetNetworkAclAssociationArgs } from "./subnetNetworkAclAssociation";
export type SubnetNetworkAclAssociation = import("./subnetNetworkAclAssociation").SubnetNetworkAclAssociation;
export const SubnetNetworkAclAssociation: typeof import("./subnetNetworkAclAssociation").SubnetNetworkAclAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetNetworkAclAssociation"], () => require("./subnetNetworkAclAssociation"));

export { SubnetRouteTableAssociationArgs } from "./subnetRouteTableAssociation";
export type SubnetRouteTableAssociation = import("./subnetRouteTableAssociation").SubnetRouteTableAssociation;
export const SubnetRouteTableAssociation: typeof import("./subnetRouteTableAssociation").SubnetRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));

export { TrafficMirrorFilterArgs } from "./trafficMirrorFilter";
export type TrafficMirrorFilter = import("./trafficMirrorFilter").TrafficMirrorFilter;
export const TrafficMirrorFilter: typeof import("./trafficMirrorFilter").TrafficMirrorFilter = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorFilter"], () => require("./trafficMirrorFilter"));

export { TrafficMirrorFilterRuleArgs } from "./trafficMirrorFilterRule";
export type TrafficMirrorFilterRule = import("./trafficMirrorFilterRule").TrafficMirrorFilterRule;
export const TrafficMirrorFilterRule: typeof import("./trafficMirrorFilterRule").TrafficMirrorFilterRule = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorFilterRule"], () => require("./trafficMirrorFilterRule"));

export { TrafficMirrorSessionArgs } from "./trafficMirrorSession";
export type TrafficMirrorSession = import("./trafficMirrorSession").TrafficMirrorSession;
export const TrafficMirrorSession: typeof import("./trafficMirrorSession").TrafficMirrorSession = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorSession"], () => require("./trafficMirrorSession"));

export { TrafficMirrorTargetArgs } from "./trafficMirrorTarget";
export type TrafficMirrorTarget = import("./trafficMirrorTarget").TrafficMirrorTarget;
export const TrafficMirrorTarget: typeof import("./trafficMirrorTarget").TrafficMirrorTarget = null as any;
utilities.lazyLoad(exports, ["TrafficMirrorTarget"], () => require("./trafficMirrorTarget"));

export { TransitGatewayArgs } from "./transitGateway";
export type TransitGateway = import("./transitGateway").TransitGateway;
export const TransitGateway: typeof import("./transitGateway").TransitGateway = null as any;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));

export { TransitGatewayAttachmentArgs } from "./transitGatewayAttachment";
export type TransitGatewayAttachment = import("./transitGatewayAttachment").TransitGatewayAttachment;
export const TransitGatewayAttachment: typeof import("./transitGatewayAttachment").TransitGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayAttachment"], () => require("./transitGatewayAttachment"));

export { TransitGatewayConnectArgs } from "./transitGatewayConnect";
export type TransitGatewayConnect = import("./transitGatewayConnect").TransitGatewayConnect;
export const TransitGatewayConnect: typeof import("./transitGatewayConnect").TransitGatewayConnect = null as any;
utilities.lazyLoad(exports, ["TransitGatewayConnect"], () => require("./transitGatewayConnect"));

export { TransitGatewayMulticastDomainArgs } from "./transitGatewayMulticastDomain";
export type TransitGatewayMulticastDomain = import("./transitGatewayMulticastDomain").TransitGatewayMulticastDomain;
export const TransitGatewayMulticastDomain: typeof import("./transitGatewayMulticastDomain").TransitGatewayMulticastDomain = null as any;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomain"], () => require("./transitGatewayMulticastDomain"));

export { TransitGatewayMulticastDomainAssociationArgs } from "./transitGatewayMulticastDomainAssociation";
export type TransitGatewayMulticastDomainAssociation = import("./transitGatewayMulticastDomainAssociation").TransitGatewayMulticastDomainAssociation;
export const TransitGatewayMulticastDomainAssociation: typeof import("./transitGatewayMulticastDomainAssociation").TransitGatewayMulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomainAssociation"], () => require("./transitGatewayMulticastDomainAssociation"));

export { TransitGatewayMulticastGroupMemberArgs } from "./transitGatewayMulticastGroupMember";
export type TransitGatewayMulticastGroupMember = import("./transitGatewayMulticastGroupMember").TransitGatewayMulticastGroupMember;
export const TransitGatewayMulticastGroupMember: typeof import("./transitGatewayMulticastGroupMember").TransitGatewayMulticastGroupMember = null as any;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupMember"], () => require("./transitGatewayMulticastGroupMember"));

export { TransitGatewayMulticastGroupSourceArgs } from "./transitGatewayMulticastGroupSource";
export type TransitGatewayMulticastGroupSource = import("./transitGatewayMulticastGroupSource").TransitGatewayMulticastGroupSource;
export const TransitGatewayMulticastGroupSource: typeof import("./transitGatewayMulticastGroupSource").TransitGatewayMulticastGroupSource = null as any;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupSource"], () => require("./transitGatewayMulticastGroupSource"));

export { TransitGatewayPeeringAttachmentArgs } from "./transitGatewayPeeringAttachment";
export type TransitGatewayPeeringAttachment = import("./transitGatewayPeeringAttachment").TransitGatewayPeeringAttachment;
export const TransitGatewayPeeringAttachment: typeof import("./transitGatewayPeeringAttachment").TransitGatewayPeeringAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayPeeringAttachment"], () => require("./transitGatewayPeeringAttachment"));

export { TransitGatewayRouteArgs } from "./transitGatewayRoute";
export type TransitGatewayRoute = import("./transitGatewayRoute").TransitGatewayRoute;
export const TransitGatewayRoute: typeof import("./transitGatewayRoute").TransitGatewayRoute = null as any;
utilities.lazyLoad(exports, ["TransitGatewayRoute"], () => require("./transitGatewayRoute"));

export { TransitGatewayRouteTableArgs } from "./transitGatewayRouteTable";
export type TransitGatewayRouteTable = import("./transitGatewayRouteTable").TransitGatewayRouteTable;
export const TransitGatewayRouteTable: typeof import("./transitGatewayRouteTable").TransitGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["TransitGatewayRouteTable"], () => require("./transitGatewayRouteTable"));

export { TransitGatewayRouteTableAssociationArgs } from "./transitGatewayRouteTableAssociation";
export type TransitGatewayRouteTableAssociation = import("./transitGatewayRouteTableAssociation").TransitGatewayRouteTableAssociation;
export const TransitGatewayRouteTableAssociation: typeof import("./transitGatewayRouteTableAssociation").TransitGatewayRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["TransitGatewayRouteTableAssociation"], () => require("./transitGatewayRouteTableAssociation"));

export { TransitGatewayRouteTablePropagationArgs } from "./transitGatewayRouteTablePropagation";
export type TransitGatewayRouteTablePropagation = import("./transitGatewayRouteTablePropagation").TransitGatewayRouteTablePropagation;
export const TransitGatewayRouteTablePropagation: typeof import("./transitGatewayRouteTablePropagation").TransitGatewayRouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["TransitGatewayRouteTablePropagation"], () => require("./transitGatewayRouteTablePropagation"));

export { TransitGatewayVpcAttachmentArgs } from "./transitGatewayVpcAttachment";
export type TransitGatewayVpcAttachment = import("./transitGatewayVpcAttachment").TransitGatewayVpcAttachment;
export const TransitGatewayVpcAttachment: typeof import("./transitGatewayVpcAttachment").TransitGatewayVpcAttachment = null as any;
utilities.lazyLoad(exports, ["TransitGatewayVpcAttachment"], () => require("./transitGatewayVpcAttachment"));

export { VerifiedAccessEndpointArgs } from "./verifiedAccessEndpoint";
export type VerifiedAccessEndpoint = import("./verifiedAccessEndpoint").VerifiedAccessEndpoint;
export const VerifiedAccessEndpoint: typeof import("./verifiedAccessEndpoint").VerifiedAccessEndpoint = null as any;
utilities.lazyLoad(exports, ["VerifiedAccessEndpoint"], () => require("./verifiedAccessEndpoint"));

export { VerifiedAccessGroupArgs } from "./verifiedAccessGroup";
export type VerifiedAccessGroup = import("./verifiedAccessGroup").VerifiedAccessGroup;
export const VerifiedAccessGroup: typeof import("./verifiedAccessGroup").VerifiedAccessGroup = null as any;
utilities.lazyLoad(exports, ["VerifiedAccessGroup"], () => require("./verifiedAccessGroup"));

export { VerifiedAccessInstanceArgs } from "./verifiedAccessInstance";
export type VerifiedAccessInstance = import("./verifiedAccessInstance").VerifiedAccessInstance;
export const VerifiedAccessInstance: typeof import("./verifiedAccessInstance").VerifiedAccessInstance = null as any;
utilities.lazyLoad(exports, ["VerifiedAccessInstance"], () => require("./verifiedAccessInstance"));

export { VerifiedAccessTrustProviderArgs } from "./verifiedAccessTrustProvider";
export type VerifiedAccessTrustProvider = import("./verifiedAccessTrustProvider").VerifiedAccessTrustProvider;
export const VerifiedAccessTrustProvider: typeof import("./verifiedAccessTrustProvider").VerifiedAccessTrustProvider = null as any;
utilities.lazyLoad(exports, ["VerifiedAccessTrustProvider"], () => require("./verifiedAccessTrustProvider"));

export { VolumeArgs } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeAttachmentArgs } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));

export { VpcArgs } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcCidrBlockArgs } from "./vpcCidrBlock";
export type VpcCidrBlock = import("./vpcCidrBlock").VpcCidrBlock;
export const VpcCidrBlock: typeof import("./vpcCidrBlock").VpcCidrBlock = null as any;
utilities.lazyLoad(exports, ["VpcCidrBlock"], () => require("./vpcCidrBlock"));

export { VpcEndpointArgs } from "./vpcEndpoint";
export type VpcEndpoint = import("./vpcEndpoint").VpcEndpoint;
export const VpcEndpoint: typeof import("./vpcEndpoint").VpcEndpoint = null as any;
utilities.lazyLoad(exports, ["VpcEndpoint"], () => require("./vpcEndpoint"));

export { VpcEndpointConnectionNotificationArgs } from "./vpcEndpointConnectionNotification";
export type VpcEndpointConnectionNotification = import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification;
export const VpcEndpointConnectionNotification: typeof import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification = null as any;
utilities.lazyLoad(exports, ["VpcEndpointConnectionNotification"], () => require("./vpcEndpointConnectionNotification"));

export { VpcEndpointServiceArgs } from "./vpcEndpointService";
export type VpcEndpointService = import("./vpcEndpointService").VpcEndpointService;
export const VpcEndpointService: typeof import("./vpcEndpointService").VpcEndpointService = null as any;
utilities.lazyLoad(exports, ["VpcEndpointService"], () => require("./vpcEndpointService"));

export { VpcEndpointServicePermissionsArgs } from "./vpcEndpointServicePermissions";
export type VpcEndpointServicePermissions = import("./vpcEndpointServicePermissions").VpcEndpointServicePermissions;
export const VpcEndpointServicePermissions: typeof import("./vpcEndpointServicePermissions").VpcEndpointServicePermissions = null as any;
utilities.lazyLoad(exports, ["VpcEndpointServicePermissions"], () => require("./vpcEndpointServicePermissions"));

export { VpcGatewayAttachmentArgs } from "./vpcGatewayAttachment";
export type VpcGatewayAttachment = import("./vpcGatewayAttachment").VpcGatewayAttachment;
export const VpcGatewayAttachment: typeof import("./vpcGatewayAttachment").VpcGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["VpcGatewayAttachment"], () => require("./vpcGatewayAttachment"));

export { VpcPeeringConnectionArgs } from "./vpcPeeringConnection";
export type VpcPeeringConnection = import("./vpcPeeringConnection").VpcPeeringConnection;
export const VpcPeeringConnection: typeof import("./vpcPeeringConnection").VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));

export { VpcdhcpOptionsAssociationArgs } from "./vpcdhcpOptionsAssociation";
export type VpcdhcpOptionsAssociation = import("./vpcdhcpOptionsAssociation").VpcdhcpOptionsAssociation;
export const VpcdhcpOptionsAssociation: typeof import("./vpcdhcpOptionsAssociation").VpcdhcpOptionsAssociation = null as any;
utilities.lazyLoad(exports, ["VpcdhcpOptionsAssociation"], () => require("./vpcdhcpOptionsAssociation"));

export { VpnConnectionArgs } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionRouteArgs } from "./vpnConnectionRoute";
export type VpnConnectionRoute = import("./vpnConnectionRoute").VpnConnectionRoute;
export const VpnConnectionRoute: typeof import("./vpnConnectionRoute").VpnConnectionRoute = null as any;
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));

export { VpnGatewayArgs } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayRoutePropagationArgs } from "./vpnGatewayRoutePropagation";
export type VpnGatewayRoutePropagation = import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation;
export const VpnGatewayRoutePropagation: typeof import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation = null as any;
utilities.lazyLoad(exports, ["VpnGatewayRoutePropagation"], () => require("./vpnGatewayRoutePropagation"));


// Export enums:
export * from "../types/enums/ec2";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:ec2:CapacityReservation":
                return new CapacityReservation(name, <any>undefined, { urn })
            case "aws-native:ec2:CapacityReservationFleet":
                return new CapacityReservationFleet(name, <any>undefined, { urn })
            case "aws-native:ec2:CarrierGateway":
                return new CarrierGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:ClientVpnAuthorizationRule":
                return new ClientVpnAuthorizationRule(name, <any>undefined, { urn })
            case "aws-native:ec2:ClientVpnEndpoint":
                return new ClientVpnEndpoint(name, <any>undefined, { urn })
            case "aws-native:ec2:ClientVpnRoute":
                return new ClientVpnRoute(name, <any>undefined, { urn })
            case "aws-native:ec2:ClientVpnTargetNetworkAssociation":
                return new ClientVpnTargetNetworkAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:CustomerGateway":
                return new CustomerGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:DhcpOptions":
                return new DhcpOptions(name, <any>undefined, { urn })
            case "aws-native:ec2:Ec2Fleet":
                return new Ec2Fleet(name, <any>undefined, { urn })
            case "aws-native:ec2:EgressOnlyInternetGateway":
                return new EgressOnlyInternetGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "aws-native:ec2:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:EnclaveCertificateIamRoleAssociation":
                return new EnclaveCertificateIamRoleAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "aws-native:ec2:GatewayRouteTableAssociation":
                return new GatewayRouteTableAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:Host":
                return new Host(name, <any>undefined, { urn })
            case "aws-native:ec2:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws-native:ec2:InstanceConnectEndpoint":
                return new InstanceConnectEndpoint(name, <any>undefined, { urn })
            case "aws-native:ec2:InternetGateway":
                return new InternetGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:Ipam":
                return new Ipam(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamAllocation":
                return new IpamAllocation(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamPool":
                return new IpamPool(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamPoolCidr":
                return new IpamPoolCidr(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamResourceDiscovery":
                return new IpamResourceDiscovery(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamResourceDiscoveryAssociation":
                return new IpamResourceDiscoveryAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:IpamScope":
                return new IpamScope(name, <any>undefined, { urn })
            case "aws-native:ec2:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "aws-native:ec2:LaunchTemplate":
                return new LaunchTemplate(name, <any>undefined, { urn })
            case "aws-native:ec2:LocalGatewayRoute":
                return new LocalGatewayRoute(name, <any>undefined, { urn })
            case "aws-native:ec2:LocalGatewayRouteTable":
                return new LocalGatewayRouteTable(name, <any>undefined, { urn })
            case "aws-native:ec2:LocalGatewayRouteTableVirtualInterfaceGroupAssociation":
                return new LocalGatewayRouteTableVirtualInterfaceGroupAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:LocalGatewayRouteTableVpcAssociation":
                return new LocalGatewayRouteTableVpcAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkAcl":
                return new NetworkAcl(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkAclEntry":
                return new NetworkAclEntry(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInsightsAccessScope":
                return new NetworkInsightsAccessScope(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInsightsAccessScopeAnalysis":
                return new NetworkInsightsAccessScopeAnalysis(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInsightsAnalysis":
                return new NetworkInsightsAnalysis(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInsightsPath":
                return new NetworkInsightsPath(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInterfaceAttachment":
                return new NetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkInterfacePermission":
                return new NetworkInterfacePermission(name, <any>undefined, { urn })
            case "aws-native:ec2:NetworkPerformanceMetricSubscription":
                return new NetworkPerformanceMetricSubscription(name, <any>undefined, { urn })
            case "aws-native:ec2:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "aws-native:ec2:PrefixList":
                return new PrefixList(name, <any>undefined, { urn })
            case "aws-native:ec2:Route":
                return new Route(name, <any>undefined, { urn })
            case "aws-native:ec2:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "aws-native:ec2:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "aws-native:ec2:SecurityGroupEgress":
                return new SecurityGroupEgress(name, <any>undefined, { urn })
            case "aws-native:ec2:SecurityGroupIngress":
                return new SecurityGroupIngress(name, <any>undefined, { urn })
            case "aws-native:ec2:SpotFleet":
                return new SpotFleet(name, <any>undefined, { urn })
            case "aws-native:ec2:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "aws-native:ec2:SubnetCidrBlock":
                return new SubnetCidrBlock(name, <any>undefined, { urn })
            case "aws-native:ec2:SubnetNetworkAclAssociation":
                return new SubnetNetworkAclAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:SubnetRouteTableAssociation":
                return new SubnetRouteTableAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:TrafficMirrorFilter":
                return new TrafficMirrorFilter(name, <any>undefined, { urn })
            case "aws-native:ec2:TrafficMirrorFilterRule":
                return new TrafficMirrorFilterRule(name, <any>undefined, { urn })
            case "aws-native:ec2:TrafficMirrorSession":
                return new TrafficMirrorSession(name, <any>undefined, { urn })
            case "aws-native:ec2:TrafficMirrorTarget":
                return new TrafficMirrorTarget(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGateway":
                return new TransitGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayAttachment":
                return new TransitGatewayAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayConnect":
                return new TransitGatewayConnect(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayMulticastDomain":
                return new TransitGatewayMulticastDomain(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayMulticastDomainAssociation":
                return new TransitGatewayMulticastDomainAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayMulticastGroupMember":
                return new TransitGatewayMulticastGroupMember(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayMulticastGroupSource":
                return new TransitGatewayMulticastGroupSource(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayPeeringAttachment":
                return new TransitGatewayPeeringAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayRoute":
                return new TransitGatewayRoute(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayRouteTable":
                return new TransitGatewayRouteTable(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayRouteTableAssociation":
                return new TransitGatewayRouteTableAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayRouteTablePropagation":
                return new TransitGatewayRouteTablePropagation(name, <any>undefined, { urn })
            case "aws-native:ec2:TransitGatewayVpcAttachment":
                return new TransitGatewayVpcAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:VerifiedAccessEndpoint":
                return new VerifiedAccessEndpoint(name, <any>undefined, { urn })
            case "aws-native:ec2:VerifiedAccessGroup":
                return new VerifiedAccessGroup(name, <any>undefined, { urn })
            case "aws-native:ec2:VerifiedAccessInstance":
                return new VerifiedAccessInstance(name, <any>undefined, { urn })
            case "aws-native:ec2:VerifiedAccessTrustProvider":
                return new VerifiedAccessTrustProvider(name, <any>undefined, { urn })
            case "aws-native:ec2:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "aws-native:ec2:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcCidrBlock":
                return new VpcCidrBlock(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcEndpoint":
                return new VpcEndpoint(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcEndpointConnectionNotification":
                return new VpcEndpointConnectionNotification(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcEndpointService":
                return new VpcEndpointService(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcEndpointServicePermissions":
                return new VpcEndpointServicePermissions(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcGatewayAttachment":
                return new VpcGatewayAttachment(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcPeeringConnection":
                return new VpcPeeringConnection(name, <any>undefined, { urn })
            case "aws-native:ec2:VpcdhcpOptionsAssociation":
                return new VpcdhcpOptionsAssociation(name, <any>undefined, { urn })
            case "aws-native:ec2:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "aws-native:ec2:VpnConnectionRoute":
                return new VpnConnectionRoute(name, <any>undefined, { urn })
            case "aws-native:ec2:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "aws-native:ec2:VpnGatewayRoutePropagation":
                return new VpnGatewayRoutePropagation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ec2", _module)
