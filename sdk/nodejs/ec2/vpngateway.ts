// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Schema for EC2 VPN Gateway
 */
export class VPNGateway extends pulumi.CustomResource {
    /**
     * Get an existing VPNGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VPNGateway {
        return new VPNGateway(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:VPNGateway';

    /**
     * Returns true if the given object is an instance of VPNGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPNGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPNGateway.__pulumiType;
    }

    /**
     * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
     */
    public readonly amazonSideAsn!: pulumi.Output<number | undefined>;
    /**
     * Any tags assigned to the virtual private gateway.
     */
    public readonly tags!: pulumi.Output<outputs.ec2.VPNGatewayTag[] | undefined>;
    /**
     * The type of VPN connection the virtual private gateway supports.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * VPN Gateway ID generated by service
     */
    public /*out*/ readonly vPNGatewayId!: pulumi.Output<string>;

    /**
     * Create a VPNGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VPNGatewayArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["amazonSideAsn"] = args ? args.amazonSideAsn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vPNGatewayId"] = undefined /*out*/;
        } else {
            resourceInputs["amazonSideAsn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vPNGatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VPNGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VPNGateway resource.
 */
export interface VPNGatewayArgs {
    /**
     * The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
     */
    amazonSideAsn?: pulumi.Input<number>;
    /**
     * Any tags assigned to the virtual private gateway.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ec2.VPNGatewayTagArgs>[]>;
    /**
     * The type of VPN connection the virtual private gateway supports.
     */
    type: pulumi.Input<string>;
}
