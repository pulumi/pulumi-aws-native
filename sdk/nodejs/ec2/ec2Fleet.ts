// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::EC2::EC2Fleet
 */
export class Ec2Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Ec2Fleet {
        return new Ec2Fleet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:Ec2Fleet';

    /**
     * Returns true if the given object is an instance of Ec2Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Fleet.__pulumiType;
    }

    public readonly context!: pulumi.Output<string | undefined>;
    public readonly excessCapacityTerminationPolicy!: pulumi.Output<enums.ec2.Ec2FleetExcessCapacityTerminationPolicy | undefined>;
    public /*out*/ readonly fleetId!: pulumi.Output<string>;
    public readonly launchTemplateConfigs!: pulumi.Output<outputs.ec2.Ec2FleetFleetLaunchTemplateConfigRequest[]>;
    public readonly onDemandOptions!: pulumi.Output<outputs.ec2.Ec2FleetOnDemandOptionsRequest | undefined>;
    public readonly replaceUnhealthyInstances!: pulumi.Output<boolean | undefined>;
    public readonly spotOptions!: pulumi.Output<outputs.ec2.Ec2FleetSpotOptionsRequest | undefined>;
    public readonly tagSpecifications!: pulumi.Output<outputs.ec2.Ec2FleetTagSpecification[] | undefined>;
    public readonly targetCapacitySpecification!: pulumi.Output<outputs.ec2.Ec2FleetTargetCapacitySpecificationRequest>;
    public readonly terminateInstancesWithExpiration!: pulumi.Output<boolean | undefined>;
    public readonly type!: pulumi.Output<enums.ec2.Ec2FleetType | undefined>;
    public readonly validFrom!: pulumi.Output<string | undefined>;
    public readonly validUntil!: pulumi.Output<string | undefined>;

    /**
     * Create a Ec2Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2FleetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.launchTemplateConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateConfigs'");
            }
            if ((!args || args.targetCapacitySpecification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetCapacitySpecification'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            resourceInputs["launchTemplateConfigs"] = args ? args.launchTemplateConfigs : undefined;
            resourceInputs["onDemandOptions"] = args ? args.onDemandOptions : undefined;
            resourceInputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            resourceInputs["spotOptions"] = args ? args.spotOptions : undefined;
            resourceInputs["tagSpecifications"] = args ? args.tagSpecifications : undefined;
            resourceInputs["targetCapacitySpecification"] = args ? args.targetCapacitySpecification : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validFrom"] = args ? args.validFrom : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
            resourceInputs["fleetId"] = undefined /*out*/;
        } else {
            resourceInputs["context"] = undefined /*out*/;
            resourceInputs["excessCapacityTerminationPolicy"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["launchTemplateConfigs"] = undefined /*out*/;
            resourceInputs["onDemandOptions"] = undefined /*out*/;
            resourceInputs["replaceUnhealthyInstances"] = undefined /*out*/;
            resourceInputs["spotOptions"] = undefined /*out*/;
            resourceInputs["tagSpecifications"] = undefined /*out*/;
            resourceInputs["targetCapacitySpecification"] = undefined /*out*/;
            resourceInputs["terminateInstancesWithExpiration"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["validFrom"] = undefined /*out*/;
            resourceInputs["validUntil"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Fleet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Ec2Fleet resource.
 */
export interface Ec2FleetArgs {
    context?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<enums.ec2.Ec2FleetExcessCapacityTerminationPolicy>;
    launchTemplateConfigs: pulumi.Input<pulumi.Input<inputs.ec2.Ec2FleetFleetLaunchTemplateConfigRequestArgs>[]>;
    onDemandOptions?: pulumi.Input<inputs.ec2.Ec2FleetOnDemandOptionsRequestArgs>;
    replaceUnhealthyInstances?: pulumi.Input<boolean>;
    spotOptions?: pulumi.Input<inputs.ec2.Ec2FleetSpotOptionsRequestArgs>;
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.ec2.Ec2FleetTagSpecificationArgs>[]>;
    targetCapacitySpecification: pulumi.Input<inputs.ec2.Ec2FleetTargetCapacitySpecificationRequestArgs>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    type?: pulumi.Input<enums.ec2.Ec2FleetType>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}
