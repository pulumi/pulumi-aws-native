// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * VPC Route Server Peer
 */
export class RouteServerPeer extends pulumi.CustomResource {
    /**
     * Get an existing RouteServerPeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RouteServerPeer {
        return new RouteServerPeer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:RouteServerPeer';

    /**
     * Returns true if the given object is an instance of RouteServerPeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteServerPeer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteServerPeer.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the Route Server Peer.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ID of the Route Server Peer.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
     */
    public readonly bgpOptions!: pulumi.Output<outputs.ec2.RouteServerPeerBgpOptions>;
    /**
     * Elastic Network Interface IP address owned by the Route Server Endpoint
     */
    public /*out*/ readonly endpointEniAddress!: pulumi.Output<string>;
    /**
     * Elastic Network Interface ID owned by the Route Server Endpoint
     */
    public /*out*/ readonly endpointEniId!: pulumi.Output<string>;
    /**
     * IP address of the Route Server Peer
     */
    public readonly peerAddress!: pulumi.Output<string>;
    /**
     * Route Server Endpoint ID
     */
    public readonly routeServerEndpointId!: pulumi.Output<string>;
    /**
     * Route Server ID
     */
    public /*out*/ readonly routeServerId!: pulumi.Output<string>;
    /**
     * Subnet ID
     */
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * VPC ID
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a RouteServerPeer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteServerPeerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.bgpOptions === undefined && !opts.urn) {
                throw new Error("Missing required property 'bgpOptions'");
            }
            if (args?.peerAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            if (args?.routeServerEndpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routeServerEndpointId'");
            }
            resourceInputs["bgpOptions"] = args?.bgpOptions;
            resourceInputs["peerAddress"] = args?.peerAddress;
            resourceInputs["routeServerEndpointId"] = args?.routeServerEndpointId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["endpointEniAddress"] = undefined /*out*/;
            resourceInputs["endpointEniId"] = undefined /*out*/;
            resourceInputs["routeServerId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["bgpOptions"] = undefined /*out*/;
            resourceInputs["endpointEniAddress"] = undefined /*out*/;
            resourceInputs["endpointEniId"] = undefined /*out*/;
            resourceInputs["peerAddress"] = undefined /*out*/;
            resourceInputs["routeServerEndpointId"] = undefined /*out*/;
            resourceInputs["routeServerId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["bgpOptions", "peerAddress", "routeServerEndpointId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RouteServerPeer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RouteServerPeer resource.
 */
export interface RouteServerPeerArgs {
    /**
     * The BGP configuration options for this peer, including ASN (Autonomous System Number) and BFD (Bidrectional Forwarding Detection) settings.
     */
    bgpOptions: pulumi.Input<inputs.ec2.RouteServerPeerBgpOptionsArgs>;
    /**
     * IP address of the Route Server Peer
     */
    peerAddress: pulumi.Input<string>;
    /**
     * Route Server Endpoint ID
     */
    routeServerEndpointId: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
