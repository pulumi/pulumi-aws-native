// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * VPC Route Server
 */
export class RouteServer extends pulumi.CustomResource {
    /**
     * Get an existing RouteServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RouteServer {
        return new RouteServer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ec2:RouteServer';

    /**
     * Returns true if the given object is an instance of RouteServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteServer.__pulumiType;
    }

    /**
     * The Amazon-side ASN of the Route Server.
     */
    declare public readonly amazonSideAsn: pulumi.Output<number>;
    /**
     * The Amazon Resource Name (ARN) of the Route Server.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The ID of the Route Server.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * Whether to enable persistent routes
     */
    declare public readonly persistRoutes: pulumi.Output<enums.ec2.RouteServerPersistRoutes | undefined>;
    /**
     * The duration of persistent routes in minutes
     */
    declare public readonly persistRoutesDuration: pulumi.Output<number | undefined>;
    /**
     * Whether to enable SNS notifications
     */
    declare public readonly snsNotificationsEnabled: pulumi.Output<boolean | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a RouteServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteServerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.amazonSideAsn === undefined && !opts.urn) {
                throw new Error("Missing required property 'amazonSideAsn'");
            }
            resourceInputs["amazonSideAsn"] = args?.amazonSideAsn;
            resourceInputs["persistRoutes"] = args?.persistRoutes;
            resourceInputs["persistRoutesDuration"] = args?.persistRoutesDuration;
            resourceInputs["snsNotificationsEnabled"] = args?.snsNotificationsEnabled;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["amazonSideAsn"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["persistRoutes"] = undefined /*out*/;
            resourceInputs["persistRoutesDuration"] = undefined /*out*/;
            resourceInputs["snsNotificationsEnabled"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["amazonSideAsn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RouteServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RouteServer resource.
 */
export interface RouteServerArgs {
    /**
     * The Amazon-side ASN of the Route Server.
     */
    amazonSideAsn: pulumi.Input<number>;
    /**
     * Whether to enable persistent routes
     */
    persistRoutes?: pulumi.Input<enums.ec2.RouteServerPersistRoutes>;
    /**
     * The duration of persistent routes in minutes
     */
    persistRoutesDuration?: pulumi.Input<number>;
    /**
     * Whether to enable SNS notifications
     */
    snsNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
