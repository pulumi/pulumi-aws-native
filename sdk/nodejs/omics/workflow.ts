// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Omics::Workflow Resource Type
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:omics:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    public readonly accelerators!: pulumi.Output<enums.omics.WorkflowAccelerators | undefined>;
    /**
     * The ARN for the workflow.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The workflow's ID.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * When the workflow was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The URI of a definition for the workflow.
     */
    public readonly definitionUri!: pulumi.Output<string | undefined>;
    /**
     * The parameter's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An engine for the workflow.
     */
    public readonly engine!: pulumi.Output<enums.omics.WorkflowEngine | undefined>;
    /**
     * The path of the main definition file for the workflow.
     */
    public readonly main!: pulumi.Output<string | undefined>;
    /**
     * The workflow's name.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The workflow's parameter template.
     */
    public readonly parameterTemplate!: pulumi.Output<{[key: string]: outputs.omics.WorkflowParameter} | undefined>;
    /**
     * The workflow's status.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.omics.WorkflowStatus>;
    /**
     * The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version.
     */
    public readonly storageCapacity!: pulumi.Output<number | undefined>;
    /**
     * Tags for the workflow.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The workflow's type.
     */
    public /*out*/ readonly type!: pulumi.Output<enums.omics.WorkflowType>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["accelerators"] = args ? args.accelerators : undefined;
            resourceInputs["definitionUri"] = args ? args.definitionUri : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["main"] = args ? args.main : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterTemplate"] = args ? args.parameterTemplate : undefined;
            resourceInputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["accelerators"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["definitionUri"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["main"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameterTemplate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageCapacity"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["accelerators", "definitionUri", "engine", "main", "parameterTemplate.*", "storageCapacity"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    accelerators?: pulumi.Input<enums.omics.WorkflowAccelerators>;
    /**
     * The URI of a definition for the workflow.
     */
    definitionUri?: pulumi.Input<string>;
    /**
     * The parameter's description.
     */
    description?: pulumi.Input<string>;
    /**
     * An engine for the workflow.
     */
    engine?: pulumi.Input<enums.omics.WorkflowEngine>;
    /**
     * The path of the main definition file for the workflow.
     */
    main?: pulumi.Input<string>;
    /**
     * The workflow's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The workflow's parameter template.
     */
    parameterTemplate?: pulumi.Input<{[key: string]: pulumi.Input<inputs.omics.WorkflowParameterArgs>}>;
    /**
     * The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version.
     */
    storageCapacity?: pulumi.Input<number>;
    /**
     * Tags for the workflow.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
