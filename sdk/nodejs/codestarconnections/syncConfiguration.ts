// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Schema for AWS::CodeStarConnections::SyncConfiguration resource which is used to enables an AWS resource to be synchronized from a source-provider.
 */
export class SyncConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SyncConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SyncConfiguration {
        return new SyncConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:codestarconnections:SyncConfiguration';

    /**
     * Returns true if the given object is an instance of SyncConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncConfiguration.__pulumiType;
    }

    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    declare public readonly branch: pulumi.Output<string>;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    declare public readonly configFile: pulumi.Output<string>;
    /**
     * the ID of the entity that owns the repository.
     */
    declare public /*out*/ readonly ownerId: pulumi.Output<string>;
    /**
     * The name of the external provider where your third-party code repository is configured.
     */
    declare public /*out*/ readonly providerType: pulumi.Output<enums.codestarconnections.SyncConfigurationProviderType>;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    declare public readonly publishDeploymentStatus: pulumi.Output<enums.codestarconnections.SyncConfigurationPublishDeploymentStatus | undefined>;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    declare public readonly repositoryLinkId: pulumi.Output<string>;
    /**
     * The name of the repository that is being synced to.
     */
    declare public /*out*/ readonly repositoryName: pulumi.Output<string>;
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    declare public readonly resourceName: pulumi.Output<string>;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    declare public readonly roleArn: pulumi.Output<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    declare public readonly syncType: pulumi.Output<string>;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    declare public readonly triggerResourceUpdateOn: pulumi.Output<enums.codestarconnections.SyncConfigurationTriggerResourceUpdateOn | undefined>;

    /**
     * Create a SyncConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.branch === undefined && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if (args?.configFile === undefined && !opts.urn) {
                throw new Error("Missing required property 'configFile'");
            }
            if (args?.repositoryLinkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryLinkId'");
            }
            if (args?.resourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if (args?.syncType === undefined && !opts.urn) {
                throw new Error("Missing required property 'syncType'");
            }
            resourceInputs["branch"] = args?.branch;
            resourceInputs["configFile"] = args?.configFile;
            resourceInputs["publishDeploymentStatus"] = args?.publishDeploymentStatus;
            resourceInputs["repositoryLinkId"] = args?.repositoryLinkId;
            resourceInputs["resourceName"] = args?.resourceName;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["syncType"] = args?.syncType;
            resourceInputs["triggerResourceUpdateOn"] = args?.triggerResourceUpdateOn;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["repositoryName"] = undefined /*out*/;
        } else {
            resourceInputs["branch"] = undefined /*out*/;
            resourceInputs["configFile"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["publishDeploymentStatus"] = undefined /*out*/;
            resourceInputs["repositoryLinkId"] = undefined /*out*/;
            resourceInputs["repositoryName"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["syncType"] = undefined /*out*/;
            resourceInputs["triggerResourceUpdateOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["resourceName", "syncType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SyncConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SyncConfiguration resource.
 */
export interface SyncConfigurationArgs {
    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    branch: pulumi.Input<string>;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    configFile: pulumi.Input<string>;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    publishDeploymentStatus?: pulumi.Input<enums.codestarconnections.SyncConfigurationPublishDeploymentStatus>;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    repositoryLinkId: pulumi.Input<string>;
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    syncType: pulumi.Input<string>;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    triggerResourceUpdateOn?: pulumi.Input<enums.codestarconnections.SyncConfigurationTriggerResourceUpdateOn>;
}
