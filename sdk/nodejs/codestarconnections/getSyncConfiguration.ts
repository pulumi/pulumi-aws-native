// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Schema for AWS::CodeStarConnections::SyncConfiguration resource which is used to enables an AWS resource to be synchronized from a source-provider.
 */
export function getSyncConfiguration(args: GetSyncConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetSyncConfigurationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:codestarconnections:getSyncConfiguration", {
        "resourceName": args.resourceName,
        "syncType": args.syncType,
    }, opts);
}

export interface GetSyncConfigurationArgs {
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    resourceName: string;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    syncType: string;
}

export interface GetSyncConfigurationResult {
    /**
     * The name of the branch of the repository from which resources are to be synchronized,
     */
    readonly branch?: string;
    /**
     * The source provider repository path of the sync configuration file of the respective SyncType.
     */
    readonly configFile?: string;
    /**
     * the ID of the entity that owns the repository.
     */
    readonly ownerId?: string;
    /**
     * The name of the external provider where your third-party code repository is configured.
     */
    readonly providerType?: enums.codestarconnections.SyncConfigurationProviderType;
    /**
     * Whether to enable or disable publishing of deployment status to source providers.
     */
    readonly publishDeploymentStatus?: enums.codestarconnections.SyncConfigurationPublishDeploymentStatus;
    /**
     * A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
     */
    readonly repositoryLinkId?: string;
    /**
     * The name of the repository that is being synced to.
     */
    readonly repositoryName?: string;
    /**
     * The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
     */
    readonly roleArn?: string;
    /**
     * When to trigger Git sync to begin the stack update.
     */
    readonly triggerResourceUpdateOn?: enums.codestarconnections.SyncConfigurationTriggerResourceUpdateOn;
}
/**
 * Schema for AWS::CodeStarConnections::SyncConfiguration resource which is used to enables an AWS resource to be synchronized from a source-provider.
 */
export function getSyncConfigurationOutput(args: GetSyncConfigurationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSyncConfigurationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:codestarconnections:getSyncConfiguration", {
        "resourceName": args.resourceName,
        "syncType": args.syncType,
    }, opts);
}

export interface GetSyncConfigurationOutputArgs {
    /**
     * The name of the resource that is being synchronized to the repository.
     */
    resourceName: pulumi.Input<string>;
    /**
     * The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
     */
    syncType: pulumi.Input<string>;
}
