// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Schema for AWS::CodeStarConnections::RepositoryLink resource which is used to aggregate repository metadata relevant to synchronizing source provider content to AWS Resources.
 */
export class RepositoryLink extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RepositoryLink {
        return new RepositoryLink(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:codestarconnections:RepositoryLink';

    /**
     * Returns true if the given object is an instance of RepositoryLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryLink.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the CodeStarConnection. The ARN is used as the connection reference when the connection is shared between AWS services.
     */
    public readonly connectionArn!: pulumi.Output<string>;
    /**
     * The ARN of the KMS key that the customer can optionally specify to use to encrypt RepositoryLink properties. If not specified, a default key will be used.
     */
    public readonly encryptionKeyArn!: pulumi.Output<string | undefined>;
    /**
     * the ID of the entity that owns the repository.
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * The name of the external provider where your third-party code repository is configured.
     */
    public /*out*/ readonly providerType!: pulumi.Output<string>;
    /**
     * A unique Amazon Resource Name (ARN) to designate the repository link.
     */
    public /*out*/ readonly repositoryLinkArn!: pulumi.Output<string>;
    /**
     * A UUID that uniquely identifies the RepositoryLink.
     */
    public /*out*/ readonly repositoryLinkId!: pulumi.Output<string>;
    /**
     * The repository for which the link is being created.
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * Specifies the tags applied to a RepositoryLink.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a RepositoryLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryLinkArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connectionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionArn'");
            }
            if ((!args || args.ownerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            if ((!args || args.repositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryName'");
            }
            resourceInputs["connectionArn"] = args ? args.connectionArn : undefined;
            resourceInputs["encryptionKeyArn"] = args ? args.encryptionKeyArn : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["repositoryLinkArn"] = undefined /*out*/;
            resourceInputs["repositoryLinkId"] = undefined /*out*/;
        } else {
            resourceInputs["connectionArn"] = undefined /*out*/;
            resourceInputs["encryptionKeyArn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["repositoryLinkArn"] = undefined /*out*/;
            resourceInputs["repositoryLinkId"] = undefined /*out*/;
            resourceInputs["repositoryName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["ownerId", "repositoryName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RepositoryLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RepositoryLink resource.
 */
export interface RepositoryLinkArgs {
    /**
     * The Amazon Resource Name (ARN) of the CodeStarConnection. The ARN is used as the connection reference when the connection is shared between AWS services.
     */
    connectionArn: pulumi.Input<string>;
    /**
     * The ARN of the KMS key that the customer can optionally specify to use to encrypt RepositoryLink properties. If not specified, a default key will be used.
     */
    encryptionKeyArn?: pulumi.Input<string>;
    /**
     * the ID of the entity that owns the repository.
     */
    ownerId: pulumi.Input<string>;
    /**
     * The repository for which the link is being created.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * Specifies the tags applied to a RepositoryLink.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
