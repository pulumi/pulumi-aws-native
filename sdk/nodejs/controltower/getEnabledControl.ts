// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Enables a control on a specified target.
 */
export function getEnabledControl(args: GetEnabledControlArgs, opts?: pulumi.InvokeOptions): Promise<GetEnabledControlResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:controltower:getEnabledControl", {
        "controlIdentifier": args.controlIdentifier,
        "targetIdentifier": args.targetIdentifier,
    }, opts);
}

export interface GetEnabledControlArgs {
    /**
     * Arn of the control.
     */
    controlIdentifier: string;
    /**
     * Arn for Organizational unit to which the control needs to be applied
     */
    targetIdentifier: string;
}

export interface GetEnabledControlResult {
    /**
     * Parameters to configure the enabled control behavior.
     */
    readonly parameters?: outputs.controltower.EnabledControlParameter[];
}
/**
 * Enables a control on a specified target.
 */
export function getEnabledControlOutput(args: GetEnabledControlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnabledControlResult> {
    return pulumi.output(args).apply((a: any) => getEnabledControl(a, opts))
}

export interface GetEnabledControlOutputArgs {
    /**
     * Arn of the control.
     */
    controlIdentifier: pulumi.Input<string>;
    /**
     * Arn for Organizational unit to which the control needs to be applied
     */
    targetIdentifier: pulumi.Input<string>;
}
