// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource type definition for AWS::Events::EventBus
 */
export class EventBus extends pulumi.CustomResource {
    /**
     * Get an existing EventBus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventBus {
        return new EventBus(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:events:EventBus';

    /**
     * Returns true if the given object is an instance of EventBus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventBus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventBus.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) for the event bus.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Dead Letter Queue for the event bus.
     */
    declare public readonly deadLetterConfig: pulumi.Output<outputs.events.DeadLetterConfigProperties | undefined>;
    /**
     * The description of the event bus.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
     */
    declare public readonly eventSourceName: pulumi.Output<string | undefined>;
    /**
     * Kms Key Identifier used to encrypt events at rest in the event bus.
     */
    declare public readonly kmsKeyIdentifier: pulumi.Output<string | undefined>;
    /**
     * The logging configuration settings for vended logs.
     */
    declare public readonly logConfig: pulumi.Output<outputs.events.LogConfigProperties | undefined>;
    /**
     * The name of the event bus.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A JSON string that describes the permission policy statement for the event bus.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
     */
    declare public readonly policy: pulumi.Output<any | undefined>;
    /**
     * Any tags assigned to the event bus.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a EventBus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventBusArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["deadLetterConfig"] = args?.deadLetterConfig;
            resourceInputs["description"] = args?.description;
            resourceInputs["eventSourceName"] = args?.eventSourceName;
            resourceInputs["kmsKeyIdentifier"] = args?.kmsKeyIdentifier;
            resourceInputs["logConfig"] = args?.logConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["deadLetterConfig"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["eventSourceName"] = undefined /*out*/;
            resourceInputs["kmsKeyIdentifier"] = undefined /*out*/;
            resourceInputs["logConfig"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(EventBus.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventBus resource.
 */
export interface EventBusArgs {
    /**
     * Dead Letter Queue for the event bus.
     */
    deadLetterConfig?: pulumi.Input<inputs.events.DeadLetterConfigPropertiesArgs>;
    /**
     * The description of the event bus.
     */
    description?: pulumi.Input<string>;
    /**
     * If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.
     */
    eventSourceName?: pulumi.Input<string>;
    /**
     * Kms Key Identifier used to encrypt events at rest in the event bus.
     */
    kmsKeyIdentifier?: pulumi.Input<string>;
    /**
     * The logging configuration settings for vended logs.
     */
    logConfig?: pulumi.Input<inputs.events.LogConfigPropertiesArgs>;
    /**
     * The name of the event bus.
     */
    name?: pulumi.Input<string>;
    /**
     * A JSON string that describes the permission policy statement for the event bus.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBus` for more information about the expected schema for this property.
     */
    policy?: any;
    /**
     * Any tags assigned to the event bus.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
