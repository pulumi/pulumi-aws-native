// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Events::EventBusPolicy
 */
export class EventBusPolicy extends pulumi.CustomResource {
    /**
     * Get an existing EventBusPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EventBusPolicy {
        return new EventBusPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:events:EventBusPolicy';

    /**
     * Returns true if the given object is an instance of EventBusPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventBusPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventBusPolicy.__pulumiType;
    }

    /**
     * The action that you are enabling the other account to perform.
     */
    declare public readonly action: pulumi.Output<string | undefined>;
    /**
     * This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain AWS organization. For more information about AWS Organizations, see [What Is AWS Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html) in the *AWS Organizations User Guide* .
     *
     * If you specify `Condition` with an AWS organization ID, and specify "*" as the value for `Principal` , you grant permission to all the accounts in the named organization.
     *
     * The `Condition` is a JSON string which must contain `Type` , `Key` , and `Value` fields.
     */
    declare public readonly condition: pulumi.Output<outputs.events.EventBusPolicyCondition | undefined>;
    /**
     * The name of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    declare public readonly eventBusName: pulumi.Output<string | undefined>;
    /**
     * The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify "*" to permit any account to put events to your default event bus.
     */
    declare public readonly principal: pulumi.Output<string | undefined>;
    /**
     * A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBusPolicy` for more information about the expected schema for this property.
     */
    declare public readonly statement: pulumi.Output<any | undefined>;
    /**
     * An identifier string for the external account that you are granting permissions to
     */
    declare public readonly statementId: pulumi.Output<string>;

    /**
     * Create a EventBusPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventBusPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.statementId === undefined && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["condition"] = args?.condition;
            resourceInputs["eventBusName"] = args?.eventBusName;
            resourceInputs["principal"] = args?.principal;
            resourceInputs["statement"] = args?.statement;
            resourceInputs["statementId"] = args?.statementId;
        } else {
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["condition"] = undefined /*out*/;
            resourceInputs["eventBusName"] = undefined /*out*/;
            resourceInputs["principal"] = undefined /*out*/;
            resourceInputs["statement"] = undefined /*out*/;
            resourceInputs["statementId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["eventBusName", "statementId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(EventBusPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a EventBusPolicy resource.
 */
export interface EventBusPolicyArgs {
    /**
     * The action that you are enabling the other account to perform.
     */
    action?: pulumi.Input<string>;
    /**
     * This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain AWS organization. For more information about AWS Organizations, see [What Is AWS Organizations](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html) in the *AWS Organizations User Guide* .
     *
     * If you specify `Condition` with an AWS organization ID, and specify "*" as the value for `Principal` , you grant permission to all the accounts in the named organization.
     *
     * The `Condition` is a JSON string which must contain `Type` , `Key` , and `Value` fields.
     */
    condition?: pulumi.Input<inputs.events.EventBusPolicyConditionArgs>;
    /**
     * The name of the event bus associated with the rule. If you omit this, the default event bus is used.
     */
    eventBusName?: pulumi.Input<string>;
    /**
     * The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify "*" to permit any account to put events to your default event bus.
     */
    principal?: pulumi.Input<string>;
    /**
     * A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBusPolicy` for more information about the expected schema for this property.
     */
    statement?: any;
    /**
     * An identifier string for the external account that you are granting permissions to
     */
    statementId: pulumi.Input<string>;
}
