// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Events::Endpoint.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const sampleEndpoint = new aws_native.events.Endpoint("sampleEndpoint", {
 *     name: "CreateExampleEndpoint",
 *     routingConfig: {
 *         failoverConfig: {
 *             primary: {
 *                 healthCheck: "arn:aws:route53:::healthcheck/0123456789abc",
 *             },
 *             secondary: {
 *                 route: "us-east-1",
 *             },
 *         },
 *     },
 *     replicationConfig: {
 *         state: aws_native.events.EndpointReplicationState.Enabled,
 *     },
 *     roleArn: "arn:aws:iam::123456789012:role/EndpointReplicationRole",
 *     eventBuses: [
 *         {
 *             eventBusArn: "arn:aws:events:us-west-2:123456789012:event-bus/ExampleEventBus",
 *         },
 *         {
 *             eventBusArn: "arn:aws:events:us-east-1:123456789012:event-bus/ExampleEventBus",
 *         },
 *     ],
 * });
 * export const sampleEndpointName = sampleEndpoint.id;
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const sampleEndpoint = new aws_native.events.Endpoint("sampleEndpoint", {
 *     name: "CreateExampleEndpoint",
 *     routingConfig: {
 *         failoverConfig: {
 *             primary: {
 *                 healthCheck: "arn:aws:route53:::healthcheck/0123456789abc",
 *             },
 *             secondary: {
 *                 route: "us-east-1",
 *             },
 *         },
 *     },
 *     replicationConfig: {
 *         state: aws_native.events.EndpointReplicationState.Disabled,
 *     },
 *     eventBuses: [
 *         {
 *             eventBusArn: "arn:aws:events:us-west-2:123456789012:event-bus/ExampleEventBus",
 *         },
 *         {
 *             eventBusArn: "arn:aws:events:us-east-1:123456789012:event-bus/ExampleEventBus",
 *         },
 *     ],
 * });
 * export const sampleEndpointName = sampleEndpoint.id;
 *
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:events:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * The ARN of the endpoint.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * A description for the endpoint.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the endpoint.
     */
    declare public /*out*/ readonly endpointId: pulumi.Output<string>;
    /**
     * The URL of the endpoint.
     */
    declare public /*out*/ readonly endpointUrl: pulumi.Output<string>;
    /**
     * The event buses being used by the endpoint.
     *
     * *Exactly* : `2`
     */
    declare public readonly eventBuses: pulumi.Output<outputs.events.EndpointEventBus[]>;
    /**
     * The name of the endpoint.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
     */
    declare public readonly replicationConfig: pulumi.Output<outputs.events.EndpointReplicationConfig | undefined>;
    /**
     * The ARN of the role used by event replication for the endpoint.
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * The routing configuration of the endpoint.
     */
    declare public readonly routingConfig: pulumi.Output<outputs.events.EndpointRoutingConfig>;
    /**
     * The main Region of the endpoint.
     */
    declare public /*out*/ readonly state: pulumi.Output<enums.events.EndpointState>;
    /**
     * The reason the endpoint is in its current state.
     */
    declare public /*out*/ readonly stateReason: pulumi.Output<string>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.eventBuses === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventBuses'");
            }
            if (args?.routingConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'routingConfig'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["eventBuses"] = args?.eventBuses;
            resourceInputs["name"] = args?.name;
            resourceInputs["replicationConfig"] = args?.replicationConfig;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["routingConfig"] = args?.routingConfig;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpointId"] = undefined /*out*/;
            resourceInputs["endpointUrl"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["endpointId"] = undefined /*out*/;
            resourceInputs["endpointUrl"] = undefined /*out*/;
            resourceInputs["eventBuses"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["replicationConfig"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["routingConfig"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * A description for the endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The event buses being used by the endpoint.
     *
     * *Exactly* : `2`
     */
    eventBuses: pulumi.Input<pulumi.Input<inputs.events.EndpointEventBusArgs>[]>;
    /**
     * The name of the endpoint.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether event replication was enabled or disabled for this endpoint. The default state is `ENABLED` which means you must supply a `RoleArn` . If you don't have a `RoleArn` or you don't want event replication enabled, set the state to `DISABLED` .
     */
    replicationConfig?: pulumi.Input<inputs.events.EndpointReplicationConfigArgs>;
    /**
     * The ARN of the role used by event replication for the endpoint.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The routing configuration of the endpoint.
     */
    routingConfig: pulumi.Input<inputs.events.EndpointRoutingConfigArgs>;
}
