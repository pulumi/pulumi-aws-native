// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::RolesAnywhere::TrustAnchor Resource Type.
 */
export class TrustAnchor extends pulumi.CustomResource {
    /**
     * Get an existing TrustAnchor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TrustAnchor {
        return new TrustAnchor(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:rolesanywhere:TrustAnchor';

    /**
     * Returns true if the given object is an instance of TrustAnchor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrustAnchor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustAnchor.__pulumiType;
    }

    /**
     * Indicates whether the trust anchor is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The name of the trust anchor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of notification settings to be associated to the trust anchor.
     */
    declare public readonly notificationSettings: pulumi.Output<outputs.rolesanywhere.TrustAnchorNotificationSetting[] | undefined>;
    /**
     * The trust anchor type and its related certificate data.
     */
    declare public readonly source: pulumi.Output<outputs.rolesanywhere.TrustAnchorSource>;
    /**
     * The tags to attach to the trust anchor.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The ARN of the trust anchor.
     */
    declare public /*out*/ readonly trustAnchorArn: pulumi.Output<string>;
    /**
     * The unique identifier of the trust anchor.
     */
    declare public /*out*/ readonly trustAnchorId: pulumi.Output<string>;

    /**
     * Create a TrustAnchor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrustAnchorArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationSettings"] = args?.notificationSettings;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["trustAnchorArn"] = undefined /*out*/;
            resourceInputs["trustAnchorId"] = undefined /*out*/;
        } else {
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["notificationSettings"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["trustAnchorArn"] = undefined /*out*/;
            resourceInputs["trustAnchorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrustAnchor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TrustAnchor resource.
 */
export interface TrustAnchorArgs {
    /**
     * Indicates whether the trust anchor is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the trust anchor.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of notification settings to be associated to the trust anchor.
     */
    notificationSettings?: pulumi.Input<pulumi.Input<inputs.rolesanywhere.TrustAnchorNotificationSettingArgs>[]>;
    /**
     * The trust anchor type and its related certificate data.
     */
    source: pulumi.Input<inputs.rolesanywhere.TrustAnchorSourceArgs>;
    /**
     * The tags to attach to the trust anchor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
