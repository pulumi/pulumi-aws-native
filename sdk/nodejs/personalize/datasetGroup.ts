// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Schema for AWS::Personalize::DatasetGroup.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myDatasetGroup = new aws_native.personalize.DatasetGroup("myDatasetGroup", {name: "my-dataset-group-name"});
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myDatasetGroup = new aws_native.personalize.DatasetGroup("myDatasetGroup", {name: "my-dataset-group-name"});
 *
 * ```
 */
export class DatasetGroup extends pulumi.CustomResource {
    /**
     * Get an existing DatasetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DatasetGroup {
        return new DatasetGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:personalize:DatasetGroup';

    /**
     * Returns true if the given object is an instance of DatasetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetGroup.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the dataset group.
     */
    declare public /*out*/ readonly datasetGroupArn: pulumi.Output<string>;
    /**
     * The domain of a Domain dataset group.
     */
    declare public readonly domain: pulumi.Output<enums.personalize.DatasetGroupDomain | undefined>;
    /**
     * The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
     */
    declare public readonly kmsKeyArn: pulumi.Output<string | undefined>;
    /**
     * The name for the new dataset group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;

    /**
     * Create a DatasetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DatasetGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["domain"] = args?.domain;
            resourceInputs["kmsKeyArn"] = args?.kmsKeyArn;
            resourceInputs["name"] = args?.name;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["datasetGroupArn"] = undefined /*out*/;
        } else {
            resourceInputs["datasetGroupArn"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domain", "kmsKeyArn", "name", "roleArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DatasetGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DatasetGroup resource.
 */
export interface DatasetGroupArgs {
    /**
     * The domain of a Domain dataset group.
     */
    domain?: pulumi.Input<enums.personalize.DatasetGroupDomain>;
    /**
     * The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * The name for the new dataset group.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
     */
    roleArn?: pulumi.Input<string>;
}
