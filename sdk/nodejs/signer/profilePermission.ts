// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 */
export class ProfilePermission extends pulumi.CustomResource {
    /**
     * Get an existing ProfilePermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProfilePermission {
        return new ProfilePermission(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:signer:ProfilePermission';

    /**
     * Returns true if the given object is an instance of ProfilePermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfilePermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfilePermission.__pulumiType;
    }

    /**
     * The AWS Signer action permitted as part of cross-account permissions.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * The human-readable name of the signing profile.
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * The version of the signing profile.
     */
    public readonly profileVersion!: pulumi.Output<string | undefined>;
    /**
     * A unique identifier for the cross-account permission statement.
     */
    public readonly statementId!: pulumi.Output<string>;

    /**
     * Create a ProfilePermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfilePermissionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.principal === undefined && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if (args?.profileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if (args?.statementId === undefined && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["principal"] = args?.principal;
            resourceInputs["profileName"] = args?.profileName;
            resourceInputs["profileVersion"] = args?.profileVersion;
            resourceInputs["statementId"] = args?.statementId;
        } else {
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["principal"] = undefined /*out*/;
            resourceInputs["profileName"] = undefined /*out*/;
            resourceInputs["profileVersion"] = undefined /*out*/;
            resourceInputs["statementId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["action", "principal", "profileName", "profileVersion", "statementId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ProfilePermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProfilePermission resource.
 */
export interface ProfilePermissionArgs {
    /**
     * The AWS Signer action permitted as part of cross-account permissions.
     */
    action: pulumi.Input<string>;
    /**
     * The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.
     */
    principal: pulumi.Input<string>;
    /**
     * The human-readable name of the signing profile.
     */
    profileName: pulumi.Input<string>;
    /**
     * The version of the signing profile.
     */
    profileVersion?: pulumi.Input<string>;
    /**
     * A unique identifier for the cross-account permission statement.
     */
    statementId: pulumi.Input<string>;
}
