// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Creates an authorizer.
 */
export function getAuthorizer(args: GetAuthorizerArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorizerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:iot:getAuthorizer", {
        "authorizerName": args.authorizerName,
    }, opts);
}

export interface GetAuthorizerArgs {
    /**
     * The authorizer name.
     */
    authorizerName: string;
}

export interface GetAuthorizerResult {
    /**
     * The Amazon Resource Name (ARN) of the authorizer.
     */
    readonly arn?: string;
    /**
     * The authorizer's Lambda function ARN.
     */
    readonly authorizerFunctionArn?: string;
    /**
     * When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
     */
    readonly enableCachingForHttp?: boolean;
    /**
     * The status of the authorizer.
     *
     * Valid values: `ACTIVE` | `INACTIVE`
     */
    readonly status?: enums.iot.AuthorizerStatus;
    /**
     * A set of key/value pairs that are used to manage the resource.
     */
    readonly tags?: outputs.Tag[];
    /**
     * The key used to extract the token from the HTTP headers.
     */
    readonly tokenKeyName?: string;
    /**
     * The public keys used to validate the token signature returned by your custom authentication service.
     */
    readonly tokenSigningPublicKeys?: {[key: string]: string};
}
/**
 * Creates an authorizer.
 */
export function getAuthorizerOutput(args: GetAuthorizerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthorizerResult> {
    return pulumi.output(args).apply((a: any) => getAuthorizer(a, opts))
}

export interface GetAuthorizerOutputArgs {
    /**
     * The authorizer name.
     */
    authorizerName: pulumi.Input<string>;
}
