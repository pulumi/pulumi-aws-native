// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Creates a fleet provisioning template.
 */
export class ProvisioningTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ProvisioningTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProvisioningTemplate {
        return new ProvisioningTemplate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:iot:ProvisioningTemplate';

    /**
     * Returns true if the given object is an instance of ProvisioningTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProvisioningTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisioningTemplate.__pulumiType;
    }

    /**
     * The description of the fleet provisioning template.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * True to enable the fleet provisioning template, otherwise false.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Structure that contains payloadVersion and targetArn. Provisioning hooks can be used when fleet provisioning to validate device parameters before allowing the device to be provisioned.
     */
    public readonly preProvisioningHook!: pulumi.Output<outputs.iot.ProvisioningTemplateProvisioningHook | undefined>;
    /**
     * The role ARN for the role associated with the fleet provisioning template. This IoT role grants permission to provision a device.
     */
    public readonly provisioningRoleArn!: pulumi.Output<string>;
    /**
     * A set of key/value pairs that are used to manage the resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The ARN that identifies the provisioning template.
     */
    public /*out*/ readonly templateArn!: pulumi.Output<string>;
    /**
     * The JSON formatted contents of the fleet provisioning template version.
     */
    public readonly templateBody!: pulumi.Output<string>;
    /**
     * The name of the fleet provisioning template.
     */
    public readonly templateName!: pulumi.Output<string | undefined>;
    /**
     * The type of the provisioning template.
     */
    public readonly templateType!: pulumi.Output<enums.iot.ProvisioningTemplateTemplateType | undefined>;

    /**
     * Create a ProvisioningTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProvisioningTemplateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.provisioningRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisioningRoleArn'");
            }
            if ((!args || args.templateBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateBody'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["preProvisioningHook"] = args ? args.preProvisioningHook : undefined;
            resourceInputs["provisioningRoleArn"] = args ? args.provisioningRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["templateType"] = args ? args.templateType : undefined;
            resourceInputs["templateArn"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["preProvisioningHook"] = undefined /*out*/;
            resourceInputs["provisioningRoleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["templateArn"] = undefined /*out*/;
            resourceInputs["templateBody"] = undefined /*out*/;
            resourceInputs["templateName"] = undefined /*out*/;
            resourceInputs["templateType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["templateName", "templateType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ProvisioningTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProvisioningTemplate resource.
 */
export interface ProvisioningTemplateArgs {
    /**
     * The description of the fleet provisioning template.
     */
    description?: pulumi.Input<string>;
    /**
     * True to enable the fleet provisioning template, otherwise false.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Structure that contains payloadVersion and targetArn. Provisioning hooks can be used when fleet provisioning to validate device parameters before allowing the device to be provisioned.
     */
    preProvisioningHook?: pulumi.Input<inputs.iot.ProvisioningTemplateProvisioningHookArgs>;
    /**
     * The role ARN for the role associated with the fleet provisioning template. This IoT role grants permission to provision a device.
     */
    provisioningRoleArn: pulumi.Input<string>;
    /**
     * A set of key/value pairs that are used to manage the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The JSON formatted contents of the fleet provisioning template version.
     */
    templateBody: pulumi.Input<string>;
    /**
     * The name of the fleet provisioning template.
     */
    templateName?: pulumi.Input<string>;
    /**
     * The type of the provisioning template.
     */
    templateType?: pulumi.Input<enums.iot.ProvisioningTemplateTemplateType>;
}
