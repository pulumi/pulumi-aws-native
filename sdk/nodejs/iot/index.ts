// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountAuditConfigurationArgs } from "./accountAuditConfiguration";
export type AccountAuditConfiguration = import("./accountAuditConfiguration").AccountAuditConfiguration;
export const AccountAuditConfiguration: typeof import("./accountAuditConfiguration").AccountAuditConfiguration = null as any;
utilities.lazyLoad(exports, ["AccountAuditConfiguration"], () => require("./accountAuditConfiguration"));

export { AuthorizerArgs } from "./authorizer";
export type Authorizer = import("./authorizer").Authorizer;
export const Authorizer: typeof import("./authorizer").Authorizer = null as any;
utilities.lazyLoad(exports, ["Authorizer"], () => require("./authorizer"));

export { BillingGroupArgs } from "./billingGroup";
export type BillingGroup = import("./billingGroup").BillingGroup;
export const BillingGroup: typeof import("./billingGroup").BillingGroup = null as any;
utilities.lazyLoad(exports, ["BillingGroup"], () => require("./billingGroup"));

export { CaCertificateArgs } from "./caCertificate";
export type CaCertificate = import("./caCertificate").CaCertificate;
export const CaCertificate: typeof import("./caCertificate").CaCertificate = null as any;
utilities.lazyLoad(exports, ["CaCertificate"], () => require("./caCertificate"));

export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CustomMetricArgs } from "./customMetric";
export type CustomMetric = import("./customMetric").CustomMetric;
export const CustomMetric: typeof import("./customMetric").CustomMetric = null as any;
utilities.lazyLoad(exports, ["CustomMetric"], () => require("./customMetric"));

export { DimensionArgs } from "./dimension";
export type Dimension = import("./dimension").Dimension;
export const Dimension: typeof import("./dimension").Dimension = null as any;
utilities.lazyLoad(exports, ["Dimension"], () => require("./dimension"));

export { DomainConfigurationArgs } from "./domainConfiguration";
export type DomainConfiguration = import("./domainConfiguration").DomainConfiguration;
export const DomainConfiguration: typeof import("./domainConfiguration").DomainConfiguration = null as any;
utilities.lazyLoad(exports, ["DomainConfiguration"], () => require("./domainConfiguration"));

export { FleetMetricArgs } from "./fleetMetric";
export type FleetMetric = import("./fleetMetric").FleetMetric;
export const FleetMetric: typeof import("./fleetMetric").FleetMetric = null as any;
utilities.lazyLoad(exports, ["FleetMetric"], () => require("./fleetMetric"));

export { GetAccountAuditConfigurationArgs, GetAccountAuditConfigurationResult, GetAccountAuditConfigurationOutputArgs } from "./getAccountAuditConfiguration";
export const getAccountAuditConfiguration: typeof import("./getAccountAuditConfiguration").getAccountAuditConfiguration = null as any;
export const getAccountAuditConfigurationOutput: typeof import("./getAccountAuditConfiguration").getAccountAuditConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAuditConfiguration","getAccountAuditConfigurationOutput"], () => require("./getAccountAuditConfiguration"));

export { GetAuthorizerArgs, GetAuthorizerResult, GetAuthorizerOutputArgs } from "./getAuthorizer";
export const getAuthorizer: typeof import("./getAuthorizer").getAuthorizer = null as any;
export const getAuthorizerOutput: typeof import("./getAuthorizer").getAuthorizerOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizer","getAuthorizerOutput"], () => require("./getAuthorizer"));

export { GetBillingGroupArgs, GetBillingGroupResult, GetBillingGroupOutputArgs } from "./getBillingGroup";
export const getBillingGroup: typeof import("./getBillingGroup").getBillingGroup = null as any;
export const getBillingGroupOutput: typeof import("./getBillingGroup").getBillingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getBillingGroup","getBillingGroupOutput"], () => require("./getBillingGroup"));

export { GetCaCertificateArgs, GetCaCertificateResult, GetCaCertificateOutputArgs } from "./getCaCertificate";
export const getCaCertificate: typeof import("./getCaCertificate").getCaCertificate = null as any;
export const getCaCertificateOutput: typeof import("./getCaCertificate").getCaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCaCertificate","getCaCertificateOutput"], () => require("./getCaCertificate"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCustomMetricArgs, GetCustomMetricResult, GetCustomMetricOutputArgs } from "./getCustomMetric";
export const getCustomMetric: typeof import("./getCustomMetric").getCustomMetric = null as any;
export const getCustomMetricOutput: typeof import("./getCustomMetric").getCustomMetricOutput = null as any;
utilities.lazyLoad(exports, ["getCustomMetric","getCustomMetricOutput"], () => require("./getCustomMetric"));

export { GetDimensionArgs, GetDimensionResult, GetDimensionOutputArgs } from "./getDimension";
export const getDimension: typeof import("./getDimension").getDimension = null as any;
export const getDimensionOutput: typeof import("./getDimension").getDimensionOutput = null as any;
utilities.lazyLoad(exports, ["getDimension","getDimensionOutput"], () => require("./getDimension"));

export { GetDomainConfigurationArgs, GetDomainConfigurationResult, GetDomainConfigurationOutputArgs } from "./getDomainConfiguration";
export const getDomainConfiguration: typeof import("./getDomainConfiguration").getDomainConfiguration = null as any;
export const getDomainConfigurationOutput: typeof import("./getDomainConfiguration").getDomainConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDomainConfiguration","getDomainConfigurationOutput"], () => require("./getDomainConfiguration"));

export { GetFleetMetricArgs, GetFleetMetricResult, GetFleetMetricOutputArgs } from "./getFleetMetric";
export const getFleetMetric: typeof import("./getFleetMetric").getFleetMetric = null as any;
export const getFleetMetricOutput: typeof import("./getFleetMetric").getFleetMetricOutput = null as any;
utilities.lazyLoad(exports, ["getFleetMetric","getFleetMetricOutput"], () => require("./getFleetMetric"));

export { GetJobTemplateArgs, GetJobTemplateResult, GetJobTemplateOutputArgs } from "./getJobTemplate";
export const getJobTemplate: typeof import("./getJobTemplate").getJobTemplate = null as any;
export const getJobTemplateOutput: typeof import("./getJobTemplate").getJobTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getJobTemplate","getJobTemplateOutput"], () => require("./getJobTemplate"));

export { GetLoggingArgs, GetLoggingResult, GetLoggingOutputArgs } from "./getLogging";
export const getLogging: typeof import("./getLogging").getLogging = null as any;
export const getLoggingOutput: typeof import("./getLogging").getLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getLogging","getLoggingOutput"], () => require("./getLogging"));

export { GetMitigationActionArgs, GetMitigationActionResult, GetMitigationActionOutputArgs } from "./getMitigationAction";
export const getMitigationAction: typeof import("./getMitigationAction").getMitigationAction = null as any;
export const getMitigationActionOutput: typeof import("./getMitigationAction").getMitigationActionOutput = null as any;
utilities.lazyLoad(exports, ["getMitigationAction","getMitigationActionOutput"], () => require("./getMitigationAction"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPolicyPrincipalAttachmentArgs, GetPolicyPrincipalAttachmentResult, GetPolicyPrincipalAttachmentOutputArgs } from "./getPolicyPrincipalAttachment";
export const getPolicyPrincipalAttachment: typeof import("./getPolicyPrincipalAttachment").getPolicyPrincipalAttachment = null as any;
export const getPolicyPrincipalAttachmentOutput: typeof import("./getPolicyPrincipalAttachment").getPolicyPrincipalAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyPrincipalAttachment","getPolicyPrincipalAttachmentOutput"], () => require("./getPolicyPrincipalAttachment"));

export { GetProvisioningTemplateArgs, GetProvisioningTemplateResult, GetProvisioningTemplateOutputArgs } from "./getProvisioningTemplate";
export const getProvisioningTemplate: typeof import("./getProvisioningTemplate").getProvisioningTemplate = null as any;
export const getProvisioningTemplateOutput: typeof import("./getProvisioningTemplate").getProvisioningTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getProvisioningTemplate","getProvisioningTemplateOutput"], () => require("./getProvisioningTemplate"));

export { GetResourceSpecificLoggingArgs, GetResourceSpecificLoggingResult, GetResourceSpecificLoggingOutputArgs } from "./getResourceSpecificLogging";
export const getResourceSpecificLogging: typeof import("./getResourceSpecificLogging").getResourceSpecificLogging = null as any;
export const getResourceSpecificLoggingOutput: typeof import("./getResourceSpecificLogging").getResourceSpecificLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSpecificLogging","getResourceSpecificLoggingOutput"], () => require("./getResourceSpecificLogging"));

export { GetRoleAliasArgs, GetRoleAliasResult, GetRoleAliasOutputArgs } from "./getRoleAlias";
export const getRoleAlias: typeof import("./getRoleAlias").getRoleAlias = null as any;
export const getRoleAliasOutput: typeof import("./getRoleAlias").getRoleAliasOutput = null as any;
utilities.lazyLoad(exports, ["getRoleAlias","getRoleAliasOutput"], () => require("./getRoleAlias"));

export { GetScheduledAuditArgs, GetScheduledAuditResult, GetScheduledAuditOutputArgs } from "./getScheduledAudit";
export const getScheduledAudit: typeof import("./getScheduledAudit").getScheduledAudit = null as any;
export const getScheduledAuditOutput: typeof import("./getScheduledAudit").getScheduledAuditOutput = null as any;
utilities.lazyLoad(exports, ["getScheduledAudit","getScheduledAuditOutput"], () => require("./getScheduledAudit"));

export { GetSecurityProfileArgs, GetSecurityProfileResult, GetSecurityProfileOutputArgs } from "./getSecurityProfile";
export const getSecurityProfile: typeof import("./getSecurityProfile").getSecurityProfile = null as any;
export const getSecurityProfileOutput: typeof import("./getSecurityProfile").getSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityProfile","getSecurityProfileOutput"], () => require("./getSecurityProfile"));

export { GetSoftwarePackageArgs, GetSoftwarePackageResult, GetSoftwarePackageOutputArgs } from "./getSoftwarePackage";
export const getSoftwarePackage: typeof import("./getSoftwarePackage").getSoftwarePackage = null as any;
export const getSoftwarePackageOutput: typeof import("./getSoftwarePackage").getSoftwarePackageOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarePackage","getSoftwarePackageOutput"], () => require("./getSoftwarePackage"));

export { GetSoftwarePackageVersionArgs, GetSoftwarePackageVersionResult, GetSoftwarePackageVersionOutputArgs } from "./getSoftwarePackageVersion";
export const getSoftwarePackageVersion: typeof import("./getSoftwarePackageVersion").getSoftwarePackageVersion = null as any;
export const getSoftwarePackageVersionOutput: typeof import("./getSoftwarePackageVersion").getSoftwarePackageVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarePackageVersion","getSoftwarePackageVersionOutput"], () => require("./getSoftwarePackageVersion"));

export { GetThingArgs, GetThingResult, GetThingOutputArgs } from "./getThing";
export const getThing: typeof import("./getThing").getThing = null as any;
export const getThingOutput: typeof import("./getThing").getThingOutput = null as any;
utilities.lazyLoad(exports, ["getThing","getThingOutput"], () => require("./getThing"));

export { GetThingGroupArgs, GetThingGroupResult, GetThingGroupOutputArgs } from "./getThingGroup";
export const getThingGroup: typeof import("./getThingGroup").getThingGroup = null as any;
export const getThingGroupOutput: typeof import("./getThingGroup").getThingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getThingGroup","getThingGroupOutput"], () => require("./getThingGroup"));

export { GetThingPrincipalAttachmentArgs, GetThingPrincipalAttachmentResult, GetThingPrincipalAttachmentOutputArgs } from "./getThingPrincipalAttachment";
export const getThingPrincipalAttachment: typeof import("./getThingPrincipalAttachment").getThingPrincipalAttachment = null as any;
export const getThingPrincipalAttachmentOutput: typeof import("./getThingPrincipalAttachment").getThingPrincipalAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getThingPrincipalAttachment","getThingPrincipalAttachmentOutput"], () => require("./getThingPrincipalAttachment"));

export { GetThingTypeArgs, GetThingTypeResult, GetThingTypeOutputArgs } from "./getThingType";
export const getThingType: typeof import("./getThingType").getThingType = null as any;
export const getThingTypeOutput: typeof import("./getThingType").getThingTypeOutput = null as any;
utilities.lazyLoad(exports, ["getThingType","getThingTypeOutput"], () => require("./getThingType"));

export { GetTopicRuleArgs, GetTopicRuleResult, GetTopicRuleOutputArgs } from "./getTopicRule";
export const getTopicRule: typeof import("./getTopicRule").getTopicRule = null as any;
export const getTopicRuleOutput: typeof import("./getTopicRule").getTopicRuleOutput = null as any;
utilities.lazyLoad(exports, ["getTopicRule","getTopicRuleOutput"], () => require("./getTopicRule"));

export { GetTopicRuleDestinationArgs, GetTopicRuleDestinationResult, GetTopicRuleDestinationOutputArgs } from "./getTopicRuleDestination";
export const getTopicRuleDestination: typeof import("./getTopicRuleDestination").getTopicRuleDestination = null as any;
export const getTopicRuleDestinationOutput: typeof import("./getTopicRuleDestination").getTopicRuleDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getTopicRuleDestination","getTopicRuleDestinationOutput"], () => require("./getTopicRuleDestination"));

export { JobTemplateArgs } from "./jobTemplate";
export type JobTemplate = import("./jobTemplate").JobTemplate;
export const JobTemplate: typeof import("./jobTemplate").JobTemplate = null as any;
utilities.lazyLoad(exports, ["JobTemplate"], () => require("./jobTemplate"));

export { LoggingArgs } from "./logging";
export type Logging = import("./logging").Logging;
export const Logging: typeof import("./logging").Logging = null as any;
utilities.lazyLoad(exports, ["Logging"], () => require("./logging"));

export { MitigationActionArgs } from "./mitigationAction";
export type MitigationAction = import("./mitigationAction").MitigationAction;
export const MitigationAction: typeof import("./mitigationAction").MitigationAction = null as any;
utilities.lazyLoad(exports, ["MitigationAction"], () => require("./mitigationAction"));

export { PolicyArgs } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyPrincipalAttachmentArgs } from "./policyPrincipalAttachment";
export type PolicyPrincipalAttachment = import("./policyPrincipalAttachment").PolicyPrincipalAttachment;
export const PolicyPrincipalAttachment: typeof import("./policyPrincipalAttachment").PolicyPrincipalAttachment = null as any;
utilities.lazyLoad(exports, ["PolicyPrincipalAttachment"], () => require("./policyPrincipalAttachment"));

export { ProvisioningTemplateArgs } from "./provisioningTemplate";
export type ProvisioningTemplate = import("./provisioningTemplate").ProvisioningTemplate;
export const ProvisioningTemplate: typeof import("./provisioningTemplate").ProvisioningTemplate = null as any;
utilities.lazyLoad(exports, ["ProvisioningTemplate"], () => require("./provisioningTemplate"));

export { ResourceSpecificLoggingArgs } from "./resourceSpecificLogging";
export type ResourceSpecificLogging = import("./resourceSpecificLogging").ResourceSpecificLogging;
export const ResourceSpecificLogging: typeof import("./resourceSpecificLogging").ResourceSpecificLogging = null as any;
utilities.lazyLoad(exports, ["ResourceSpecificLogging"], () => require("./resourceSpecificLogging"));

export { RoleAliasArgs } from "./roleAlias";
export type RoleAlias = import("./roleAlias").RoleAlias;
export const RoleAlias: typeof import("./roleAlias").RoleAlias = null as any;
utilities.lazyLoad(exports, ["RoleAlias"], () => require("./roleAlias"));

export { ScheduledAuditArgs } from "./scheduledAudit";
export type ScheduledAudit = import("./scheduledAudit").ScheduledAudit;
export const ScheduledAudit: typeof import("./scheduledAudit").ScheduledAudit = null as any;
utilities.lazyLoad(exports, ["ScheduledAudit"], () => require("./scheduledAudit"));

export { SecurityProfileArgs } from "./securityProfile";
export type SecurityProfile = import("./securityProfile").SecurityProfile;
export const SecurityProfile: typeof import("./securityProfile").SecurityProfile = null as any;
utilities.lazyLoad(exports, ["SecurityProfile"], () => require("./securityProfile"));

export { SoftwarePackageArgs } from "./softwarePackage";
export type SoftwarePackage = import("./softwarePackage").SoftwarePackage;
export const SoftwarePackage: typeof import("./softwarePackage").SoftwarePackage = null as any;
utilities.lazyLoad(exports, ["SoftwarePackage"], () => require("./softwarePackage"));

export { SoftwarePackageVersionArgs } from "./softwarePackageVersion";
export type SoftwarePackageVersion = import("./softwarePackageVersion").SoftwarePackageVersion;
export const SoftwarePackageVersion: typeof import("./softwarePackageVersion").SoftwarePackageVersion = null as any;
utilities.lazyLoad(exports, ["SoftwarePackageVersion"], () => require("./softwarePackageVersion"));

export { ThingArgs } from "./thing";
export type Thing = import("./thing").Thing;
export const Thing: typeof import("./thing").Thing = null as any;
utilities.lazyLoad(exports, ["Thing"], () => require("./thing"));

export { ThingGroupArgs } from "./thingGroup";
export type ThingGroup = import("./thingGroup").ThingGroup;
export const ThingGroup: typeof import("./thingGroup").ThingGroup = null as any;
utilities.lazyLoad(exports, ["ThingGroup"], () => require("./thingGroup"));

export { ThingPrincipalAttachmentArgs } from "./thingPrincipalAttachment";
export type ThingPrincipalAttachment = import("./thingPrincipalAttachment").ThingPrincipalAttachment;
export const ThingPrincipalAttachment: typeof import("./thingPrincipalAttachment").ThingPrincipalAttachment = null as any;
utilities.lazyLoad(exports, ["ThingPrincipalAttachment"], () => require("./thingPrincipalAttachment"));

export { ThingTypeArgs } from "./thingType";
export type ThingType = import("./thingType").ThingType;
export const ThingType: typeof import("./thingType").ThingType = null as any;
utilities.lazyLoad(exports, ["ThingType"], () => require("./thingType"));

export { TopicRuleArgs } from "./topicRule";
export type TopicRule = import("./topicRule").TopicRule;
export const TopicRule: typeof import("./topicRule").TopicRule = null as any;
utilities.lazyLoad(exports, ["TopicRule"], () => require("./topicRule"));

export { TopicRuleDestinationArgs } from "./topicRuleDestination";
export type TopicRuleDestination = import("./topicRuleDestination").TopicRuleDestination;
export const TopicRuleDestination: typeof import("./topicRuleDestination").TopicRuleDestination = null as any;
utilities.lazyLoad(exports, ["TopicRuleDestination"], () => require("./topicRuleDestination"));


// Export enums:
export * from "../types/enums/iot";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:iot:AccountAuditConfiguration":
                return new AccountAuditConfiguration(name, <any>undefined, { urn })
            case "aws-native:iot:Authorizer":
                return new Authorizer(name, <any>undefined, { urn })
            case "aws-native:iot:BillingGroup":
                return new BillingGroup(name, <any>undefined, { urn })
            case "aws-native:iot:CaCertificate":
                return new CaCertificate(name, <any>undefined, { urn })
            case "aws-native:iot:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "aws-native:iot:CustomMetric":
                return new CustomMetric(name, <any>undefined, { urn })
            case "aws-native:iot:Dimension":
                return new Dimension(name, <any>undefined, { urn })
            case "aws-native:iot:DomainConfiguration":
                return new DomainConfiguration(name, <any>undefined, { urn })
            case "aws-native:iot:FleetMetric":
                return new FleetMetric(name, <any>undefined, { urn })
            case "aws-native:iot:JobTemplate":
                return new JobTemplate(name, <any>undefined, { urn })
            case "aws-native:iot:Logging":
                return new Logging(name, <any>undefined, { urn })
            case "aws-native:iot:MitigationAction":
                return new MitigationAction(name, <any>undefined, { urn })
            case "aws-native:iot:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "aws-native:iot:PolicyPrincipalAttachment":
                return new PolicyPrincipalAttachment(name, <any>undefined, { urn })
            case "aws-native:iot:ProvisioningTemplate":
                return new ProvisioningTemplate(name, <any>undefined, { urn })
            case "aws-native:iot:ResourceSpecificLogging":
                return new ResourceSpecificLogging(name, <any>undefined, { urn })
            case "aws-native:iot:RoleAlias":
                return new RoleAlias(name, <any>undefined, { urn })
            case "aws-native:iot:ScheduledAudit":
                return new ScheduledAudit(name, <any>undefined, { urn })
            case "aws-native:iot:SecurityProfile":
                return new SecurityProfile(name, <any>undefined, { urn })
            case "aws-native:iot:SoftwarePackage":
                return new SoftwarePackage(name, <any>undefined, { urn })
            case "aws-native:iot:SoftwarePackageVersion":
                return new SoftwarePackageVersion(name, <any>undefined, { urn })
            case "aws-native:iot:Thing":
                return new Thing(name, <any>undefined, { urn })
            case "aws-native:iot:ThingGroup":
                return new ThingGroup(name, <any>undefined, { urn })
            case "aws-native:iot:ThingPrincipalAttachment":
                return new ThingPrincipalAttachment(name, <any>undefined, { urn })
            case "aws-native:iot:ThingType":
                return new ThingType(name, <any>undefined, { urn })
            case "aws-native:iot:TopicRule":
                return new TopicRule(name, <any>undefined, { urn })
            case "aws-native:iot:TopicRuleDestination":
                return new TopicRuleDestination(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "iot", _module)
