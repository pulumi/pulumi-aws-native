// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Represents the resource definition of AWS IoT Command.
 */
export class Command extends pulumi.CustomResource {
    /**
     * Get an existing Command resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Command {
        return new Command(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:iot:Command';

    /**
     * Returns true if the given object is an instance of Command.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Command {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Command.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the command.
     */
    public /*out*/ readonly commandArn!: pulumi.Output<string>;
    /**
     * The unique identifier for the command.
     */
    public readonly commandId!: pulumi.Output<string>;
    /**
     * The date and time when the command was created.
     */
    public readonly createdAt!: pulumi.Output<string | undefined>;
    /**
     * A flag indicating whether the command is deprecated.
     */
    public readonly deprecated!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the command.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name for the command.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The date and time when the command was last updated.
     */
    public readonly lastUpdatedAt!: pulumi.Output<string | undefined>;
    /**
     * The list of mandatory parameters for the command.
     */
    public readonly mandatoryParameters!: pulumi.Output<outputs.iot.CommandParameter[] | undefined>;
    /**
     * The namespace to which the command belongs.
     */
    public readonly namespace!: pulumi.Output<enums.iot.CommandNamespace | undefined>;
    /**
     * The payload associated with the command.
     */
    public readonly payload!: pulumi.Output<outputs.iot.CommandPayload | undefined>;
    /**
     * A flag indicating whether the command is pending deletion.
     */
    public readonly pendingDeletion!: pulumi.Output<boolean | undefined>;
    /**
     * The customer role associated with the command.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * The tags to be associated with the command.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Command resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommandArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.commandId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandId'");
            }
            resourceInputs["commandId"] = args ? args.commandId : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["deprecated"] = args ? args.deprecated : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["lastUpdatedAt"] = args ? args.lastUpdatedAt : undefined;
            resourceInputs["mandatoryParameters"] = args ? args.mandatoryParameters : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["payload"] = args ? args.payload : undefined;
            resourceInputs["pendingDeletion"] = args ? args.pendingDeletion : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["commandArn"] = undefined /*out*/;
        } else {
            resourceInputs["commandArn"] = undefined /*out*/;
            resourceInputs["commandId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deprecated"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["mandatoryParameters"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["payload"] = undefined /*out*/;
            resourceInputs["pendingDeletion"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["commandId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Command.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Command resource.
 */
export interface CommandArgs {
    /**
     * The unique identifier for the command.
     */
    commandId: pulumi.Input<string>;
    /**
     * The date and time when the command was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A flag indicating whether the command is deprecated.
     */
    deprecated?: pulumi.Input<boolean>;
    /**
     * The description of the command.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name for the command.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The date and time when the command was last updated.
     */
    lastUpdatedAt?: pulumi.Input<string>;
    /**
     * The list of mandatory parameters for the command.
     */
    mandatoryParameters?: pulumi.Input<pulumi.Input<inputs.iot.CommandParameterArgs>[]>;
    /**
     * The namespace to which the command belongs.
     */
    namespace?: pulumi.Input<enums.iot.CommandNamespace>;
    /**
     * The payload associated with the command.
     */
    payload?: pulumi.Input<inputs.iot.CommandPayloadArgs>;
    /**
     * A flag indicating whether the command is pending deletion.
     */
    pendingDeletion?: pulumi.Input<boolean>;
    /**
     * The customer role associated with the command.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The tags to be associated with the command.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
