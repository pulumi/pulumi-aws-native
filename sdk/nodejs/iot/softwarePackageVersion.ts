// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * resource definition
 */
export class SoftwarePackageVersion extends pulumi.CustomResource {
    /**
     * Get an existing SoftwarePackageVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SoftwarePackageVersion {
        return new SoftwarePackageVersion(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:iot:SoftwarePackageVersion';

    /**
     * Returns true if the given object is an instance of SoftwarePackageVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SoftwarePackageVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SoftwarePackageVersion.__pulumiType;
    }

    /**
     * Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet.
     *
     * The combined size of all the attributes on a package version is limited to 3KB.
     */
    public readonly attributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A summary of the package version being created. This can be used to outline the package's contents or purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Error reason for a package version failure during creation or update.
     */
    public /*out*/ readonly errorReason!: pulumi.Output<string>;
    /**
     * The name of the associated software package.
     */
    public readonly packageName!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) for the package.
     */
    public /*out*/ readonly packageVersionArn!: pulumi.Output<string>;
    /**
     * The status of the package version. For more information, see [Package version lifecycle](https://docs.aws.amazon.com/iot/latest/developerguide/preparing-to-use-software-package-catalog.html#package-version-lifecycle) .
     */
    public /*out*/ readonly status!: pulumi.Output<enums.iot.SoftwarePackageVersionPackageVersionStatus>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The name of the new package version.
     */
    public readonly versionName!: pulumi.Output<string | undefined>;

    /**
     * Create a SoftwarePackageVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SoftwarePackageVersionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.packageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageName'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionName"] = args ? args.versionName : undefined;
            resourceInputs["errorReason"] = undefined /*out*/;
            resourceInputs["packageVersionArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["attributes"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["errorReason"] = undefined /*out*/;
            resourceInputs["packageName"] = undefined /*out*/;
            resourceInputs["packageVersionArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["versionName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["packageName", "versionName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SoftwarePackageVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SoftwarePackageVersion resource.
 */
export interface SoftwarePackageVersionArgs {
    /**
     * Metadata that can be used to define a package version’s configuration. For example, the S3 file location, configuration options that are being sent to the device or fleet.
     *
     * The combined size of all the attributes on a package version is limited to 3KB.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A summary of the package version being created. This can be used to outline the package's contents or purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the associated software package.
     */
    packageName: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The name of the new package version.
     */
    versionName?: pulumi.Input<string>;
}
