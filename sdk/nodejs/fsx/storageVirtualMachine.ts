// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::FSx::StorageVirtualMachine
 *
 * @deprecated StorageVirtualMachine is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class StorageVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing StorageVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StorageVirtualMachine {
        pulumi.log.warn("StorageVirtualMachine is deprecated: StorageVirtualMachine is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new StorageVirtualMachine(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:fsx:StorageVirtualMachine';

    /**
     * Returns true if the given object is an instance of StorageVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageVirtualMachine.__pulumiType;
    }

    public readonly activeDirectoryConfiguration!: pulumi.Output<outputs.fsx.StorageVirtualMachineActiveDirectoryConfiguration | undefined>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly resourceARN!: pulumi.Output<string>;
    public readonly rootVolumeSecurityStyle!: pulumi.Output<string | undefined>;
    public /*out*/ readonly storageVirtualMachineId!: pulumi.Output<string>;
    public readonly svmAdminPassword!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.fsx.StorageVirtualMachineTag[] | undefined>;
    public /*out*/ readonly uUID!: pulumi.Output<string>;

    /**
     * Create a StorageVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated StorageVirtualMachine is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: StorageVirtualMachineArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("StorageVirtualMachine is deprecated: StorageVirtualMachine is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            resourceInputs["activeDirectoryConfiguration"] = args ? args.activeDirectoryConfiguration : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rootVolumeSecurityStyle"] = args ? args.rootVolumeSecurityStyle : undefined;
            resourceInputs["svmAdminPassword"] = args ? args.svmAdminPassword : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["resourceARN"] = undefined /*out*/;
            resourceInputs["storageVirtualMachineId"] = undefined /*out*/;
            resourceInputs["uUID"] = undefined /*out*/;
        } else {
            resourceInputs["activeDirectoryConfiguration"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceARN"] = undefined /*out*/;
            resourceInputs["rootVolumeSecurityStyle"] = undefined /*out*/;
            resourceInputs["storageVirtualMachineId"] = undefined /*out*/;
            resourceInputs["svmAdminPassword"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["uUID"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a StorageVirtualMachine resource.
 */
export interface StorageVirtualMachineArgs {
    activeDirectoryConfiguration?: pulumi.Input<inputs.fsx.StorageVirtualMachineActiveDirectoryConfigurationArgs>;
    fileSystemId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rootVolumeSecurityStyle?: pulumi.Input<string>;
    svmAdminPassword?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.fsx.StorageVirtualMachineTagArgs>[]>;
}
