// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DataRepositoryAssociationArgs } from "./dataRepositoryAssociation";
export type DataRepositoryAssociation = import("./dataRepositoryAssociation").DataRepositoryAssociation;
export const DataRepositoryAssociation: typeof import("./dataRepositoryAssociation").DataRepositoryAssociation = null as any;
utilities.lazyLoad(exports, ["DataRepositoryAssociation"], () => require("./dataRepositoryAssociation"));

export { GetDataRepositoryAssociationArgs, GetDataRepositoryAssociationResult, GetDataRepositoryAssociationOutputArgs } from "./getDataRepositoryAssociation";
export const getDataRepositoryAssociation: typeof import("./getDataRepositoryAssociation").getDataRepositoryAssociation = null as any;
export const getDataRepositoryAssociationOutput: typeof import("./getDataRepositoryAssociation").getDataRepositoryAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDataRepositoryAssociation","getDataRepositoryAssociationOutput"], () => require("./getDataRepositoryAssociation"));


// Export enums:
export * from "../types/enums/fsx";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:fsx:DataRepositoryAssociation":
                return new DataRepositoryAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "fsx", _module)
