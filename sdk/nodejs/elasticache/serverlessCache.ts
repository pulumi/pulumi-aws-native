// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
 */
export class ServerlessCache extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServerlessCache {
        return new ServerlessCache(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:elasticache:ServerlessCache';

    /**
     * Returns true if the given object is an instance of ServerlessCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessCache.__pulumiType;
    }

    /**
     * The ARN of the Serverless Cache.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cacheUsageLimits!: pulumi.Output<outputs.elasticache.ServerlessCacheCacheUsageLimits | undefined>;
    /**
     * The creation time of the Serverless Cache.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
     */
    public readonly dailySnapshotTime!: pulumi.Output<string | undefined>;
    /**
     * The description of the Serverless Cache.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endpoint!: pulumi.Output<outputs.elasticache.ServerlessCacheEndpoint | undefined>;
    /**
     * The engine name of the Serverless Cache.
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * The final snapshot name which is taken before Serverless Cache is deleted.
     */
    public readonly finalSnapshotName!: pulumi.Output<string | undefined>;
    /**
     * The full engine version of the Serverless Cache.
     */
    public /*out*/ readonly fullEngineVersion!: pulumi.Output<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * The major engine version of the Serverless Cache.
     */
    public readonly majorEngineVersion!: pulumi.Output<string | undefined>;
    public readonly readerEndpoint!: pulumi.Output<outputs.elasticache.ServerlessCacheEndpoint | undefined>;
    /**
     * One or more Amazon VPC security groups associated with this Serverless Cache.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Serverless Cache. This value must be unique.
     */
    public readonly serverlessCacheName!: pulumi.Output<string>;
    /**
     * The ARN's of snapshot to restore Serverless Cache.
     */
    public readonly snapshotArnsToRestore!: pulumi.Output<string[] | undefined>;
    /**
     * The snapshot retention limit of the Serverless Cache.
     */
    public readonly snapshotRetentionLimit!: pulumi.Output<number | undefined>;
    /**
     * The status of the Serverless Cache.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subnet id's of the Serverless Cache.
     */
    public readonly subnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * An array of key-value pairs to apply to this Serverless Cache.
     */
    public readonly tags!: pulumi.Output<outputs.elasticache.ServerlessCacheTag[] | undefined>;
    /**
     * The ID of the user group.
     */
    public readonly userGroupId!: pulumi.Output<string | undefined>;

    /**
     * Create a ServerlessCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessCacheArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            resourceInputs["cacheUsageLimits"] = args ? args.cacheUsageLimits : undefined;
            resourceInputs["dailySnapshotTime"] = args ? args.dailySnapshotTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["finalSnapshotName"] = args ? args.finalSnapshotName : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["majorEngineVersion"] = args ? args.majorEngineVersion : undefined;
            resourceInputs["readerEndpoint"] = args ? args.readerEndpoint : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverlessCacheName"] = args ? args.serverlessCacheName : undefined;
            resourceInputs["snapshotArnsToRestore"] = args ? args.snapshotArnsToRestore : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userGroupId"] = args ? args.userGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["fullEngineVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cacheUsageLimits"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dailySnapshotTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["finalSnapshotName"] = undefined /*out*/;
            resourceInputs["fullEngineVersion"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["majorEngineVersion"] = undefined /*out*/;
            resourceInputs["readerEndpoint"] = undefined /*out*/;
            resourceInputs["securityGroupIds"] = undefined /*out*/;
            resourceInputs["serverlessCacheName"] = undefined /*out*/;
            resourceInputs["snapshotArnsToRestore"] = undefined /*out*/;
            resourceInputs["snapshotRetentionLimit"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["userGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["engine", "kmsKeyId", "majorEngineVersion", "serverlessCacheName", "snapshotArnsToRestore[*]", "subnetIds[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ServerlessCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServerlessCache resource.
 */
export interface ServerlessCacheArgs {
    cacheUsageLimits?: pulumi.Input<inputs.elasticache.ServerlessCacheCacheUsageLimitsArgs>;
    /**
     * The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
     */
    dailySnapshotTime?: pulumi.Input<string>;
    /**
     * The description of the Serverless Cache.
     */
    description?: pulumi.Input<string>;
    endpoint?: pulumi.Input<inputs.elasticache.ServerlessCacheEndpointArgs>;
    /**
     * The engine name of the Serverless Cache.
     */
    engine: pulumi.Input<string>;
    /**
     * The final snapshot name which is taken before Serverless Cache is deleted.
     */
    finalSnapshotName?: pulumi.Input<string>;
    /**
     * The ID of the KMS key used to encrypt the cluster.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The major engine version of the Serverless Cache.
     */
    majorEngineVersion?: pulumi.Input<string>;
    readerEndpoint?: pulumi.Input<inputs.elasticache.ServerlessCacheEndpointArgs>;
    /**
     * One or more Amazon VPC security groups associated with this Serverless Cache.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Serverless Cache. This value must be unique.
     */
    serverlessCacheName?: pulumi.Input<string>;
    /**
     * The ARN's of snapshot to restore Serverless Cache.
     */
    snapshotArnsToRestore?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The snapshot retention limit of the Serverless Cache.
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The subnet id's of the Serverless Cache.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of key-value pairs to apply to this Serverless Cache.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.elasticache.ServerlessCacheTagArgs>[]>;
    /**
     * The ID of the user group.
     */
    userGroupId?: pulumi.Input<string>;
}
