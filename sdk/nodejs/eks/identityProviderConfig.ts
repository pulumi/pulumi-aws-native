// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * An object representing an Amazon EKS IdentityProviderConfig.
 */
export class IdentityProviderConfig extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProviderConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IdentityProviderConfig {
        return new IdentityProviderConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:eks:IdentityProviderConfig';

    /**
     * Returns true if the given object is an instance of IdentityProviderConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProviderConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProviderConfig.__pulumiType;
    }

    /**
     * The name of the identity provider configuration.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The ARN of the configuration.
     */
    public /*out*/ readonly identityProviderConfigArn!: pulumi.Output<string>;
    /**
     * The name of the OIDC provider configuration.
     */
    public readonly identityProviderConfigName!: pulumi.Output<string | undefined>;
    public readonly oidc!: pulumi.Output<outputs.eks.IdentityProviderConfigOidcIdentityProviderConfig | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.eks.IdentityProviderConfigTag[] | undefined>;
    /**
     * The type of the identity provider configuration.
     */
    public readonly type!: pulumi.Output<enums.eks.IdentityProviderConfigType>;

    /**
     * Create a IdentityProviderConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["identityProviderConfigName"] = args ? args.identityProviderConfigName : undefined;
            resourceInputs["oidc"] = args ? args.oidc : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["identityProviderConfigArn"] = undefined /*out*/;
        } else {
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["identityProviderConfigArn"] = undefined /*out*/;
            resourceInputs["identityProviderConfigName"] = undefined /*out*/;
            resourceInputs["oidc"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProviderConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IdentityProviderConfig resource.
 */
export interface IdentityProviderConfigArgs {
    /**
     * The name of the identity provider configuration.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The name of the OIDC provider configuration.
     */
    identityProviderConfigName?: pulumi.Input<string>;
    oidc?: pulumi.Input<inputs.eks.IdentityProviderConfigOidcIdentityProviderConfigArgs>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.eks.IdentityProviderConfigTagArgs>[]>;
    /**
     * The type of the identity provider configuration.
     */
    type: pulumi.Input<enums.eks.IdentityProviderConfigType>;
}
