// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonArgs } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { FargateProfileArgs } from "./fargateProfile";
export type FargateProfile = import("./fargateProfile").FargateProfile;
export const FargateProfile: typeof import("./fargateProfile").FargateProfile = null as any;
utilities.lazyLoad(exports, ["FargateProfile"], () => require("./fargateProfile"));

export { GetAddonArgs, GetAddonResult, GetAddonOutputArgs } from "./getAddon";
export const getAddon: typeof import("./getAddon").getAddon = null as any;
export const getAddonOutput: typeof import("./getAddon").getAddonOutput = null as any;
utilities.lazyLoad(exports, ["getAddon","getAddonOutput"], () => require("./getAddon"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetFargateProfileArgs, GetFargateProfileResult, GetFargateProfileOutputArgs } from "./getFargateProfile";
export const getFargateProfile: typeof import("./getFargateProfile").getFargateProfile = null as any;
export const getFargateProfileOutput: typeof import("./getFargateProfile").getFargateProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFargateProfile","getFargateProfileOutput"], () => require("./getFargateProfile"));

export { GetIdentityProviderConfigArgs, GetIdentityProviderConfigResult, GetIdentityProviderConfigOutputArgs } from "./getIdentityProviderConfig";
export const getIdentityProviderConfig: typeof import("./getIdentityProviderConfig").getIdentityProviderConfig = null as any;
export const getIdentityProviderConfigOutput: typeof import("./getIdentityProviderConfig").getIdentityProviderConfigOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityProviderConfig","getIdentityProviderConfigOutput"], () => require("./getIdentityProviderConfig"));

export { GetNodegroupArgs, GetNodegroupResult, GetNodegroupOutputArgs } from "./getNodegroup";
export const getNodegroup: typeof import("./getNodegroup").getNodegroup = null as any;
export const getNodegroupOutput: typeof import("./getNodegroup").getNodegroupOutput = null as any;
utilities.lazyLoad(exports, ["getNodegroup","getNodegroupOutput"], () => require("./getNodegroup"));

export { GetPodIdentityAssociationArgs, GetPodIdentityAssociationResult, GetPodIdentityAssociationOutputArgs } from "./getPodIdentityAssociation";
export const getPodIdentityAssociation: typeof import("./getPodIdentityAssociation").getPodIdentityAssociation = null as any;
export const getPodIdentityAssociationOutput: typeof import("./getPodIdentityAssociation").getPodIdentityAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getPodIdentityAssociation","getPodIdentityAssociationOutput"], () => require("./getPodIdentityAssociation"));

export { IdentityProviderConfigArgs } from "./identityProviderConfig";
export type IdentityProviderConfig = import("./identityProviderConfig").IdentityProviderConfig;
export const IdentityProviderConfig: typeof import("./identityProviderConfig").IdentityProviderConfig = null as any;
utilities.lazyLoad(exports, ["IdentityProviderConfig"], () => require("./identityProviderConfig"));

export { NodegroupArgs } from "./nodegroup";
export type Nodegroup = import("./nodegroup").Nodegroup;
export const Nodegroup: typeof import("./nodegroup").Nodegroup = null as any;
utilities.lazyLoad(exports, ["Nodegroup"], () => require("./nodegroup"));

export { PodIdentityAssociationArgs } from "./podIdentityAssociation";
export type PodIdentityAssociation = import("./podIdentityAssociation").PodIdentityAssociation;
export const PodIdentityAssociation: typeof import("./podIdentityAssociation").PodIdentityAssociation = null as any;
utilities.lazyLoad(exports, ["PodIdentityAssociation"], () => require("./podIdentityAssociation"));


// Export enums:
export * from "../types/enums/eks";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:eks:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "aws-native:eks:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "aws-native:eks:FargateProfile":
                return new FargateProfile(name, <any>undefined, { urn })
            case "aws-native:eks:IdentityProviderConfig":
                return new IdentityProviderConfig(name, <any>undefined, { urn })
            case "aws-native:eks:Nodegroup":
                return new Nodegroup(name, <any>undefined, { urn })
            case "aws-native:eks:PodIdentityAssociation":
                return new PodIdentityAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "eks", _module)
