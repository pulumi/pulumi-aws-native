// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Schema for AWS::EKS::Addon
 */
export class Addon extends pulumi.CustomResource {
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Addon {
        return new Addon(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:eks:Addon';

    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Addon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }

    /**
     * Name of Addon
     */
    declare public readonly addonName: pulumi.Output<string>;
    /**
     * Version of Addon
     */
    declare public readonly addonVersion: pulumi.Output<string | undefined>;
    /**
     * Amazon Resource Name (ARN) of the add-on
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Name of Cluster
     */
    declare public readonly clusterName: pulumi.Output<string>;
    /**
     * The configuration values to use with the add-on
     */
    declare public readonly configurationValues: pulumi.Output<string | undefined>;
    /**
     * An array of pod identities to apply to this add-on.
     */
    declare public readonly podIdentityAssociations: pulumi.Output<outputs.eks.AddonPodIdentityAssociation[] | undefined>;
    /**
     * PreserveOnDelete parameter value
     */
    declare public readonly preserveOnDelete: pulumi.Output<boolean | undefined>;
    /**
     * Resolve parameter value conflicts
     */
    declare public readonly resolveConflicts: pulumi.Output<enums.eks.AddonResolveConflicts | undefined>;
    /**
     * IAM role to bind to the add-on's service account
     */
    declare public readonly serviceAccountRoleArn: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Addon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["addonName"] = args?.addonName;
            resourceInputs["addonVersion"] = args?.addonVersion;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["configurationValues"] = args?.configurationValues;
            resourceInputs["podIdentityAssociations"] = args?.podIdentityAssociations;
            resourceInputs["preserveOnDelete"] = args?.preserveOnDelete;
            resourceInputs["resolveConflicts"] = args?.resolveConflicts;
            resourceInputs["serviceAccountRoleArn"] = args?.serviceAccountRoleArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["addonName"] = undefined /*out*/;
            resourceInputs["addonVersion"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["configurationValues"] = undefined /*out*/;
            resourceInputs["podIdentityAssociations"] = undefined /*out*/;
            resourceInputs["preserveOnDelete"] = undefined /*out*/;
            resourceInputs["resolveConflicts"] = undefined /*out*/;
            resourceInputs["serviceAccountRoleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["addonName", "clusterName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Addon.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Addon resource.
 */
export interface AddonArgs {
    /**
     * Name of Addon
     */
    addonName?: pulumi.Input<string>;
    /**
     * Version of Addon
     */
    addonVersion?: pulumi.Input<string>;
    /**
     * Name of Cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * The configuration values to use with the add-on
     */
    configurationValues?: pulumi.Input<string>;
    /**
     * An array of pod identities to apply to this add-on.
     */
    podIdentityAssociations?: pulumi.Input<pulumi.Input<inputs.eks.AddonPodIdentityAssociationArgs>[]>;
    /**
     * PreserveOnDelete parameter value
     */
    preserveOnDelete?: pulumi.Input<boolean>;
    /**
     * Resolve parameter value conflicts
     */
    resolveConflicts?: pulumi.Input<enums.eks.AddonResolveConflicts>;
    /**
     * IAM role to bind to the add-on's service account
     */
    serviceAccountRoleArn?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
