// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SecretsManager::RotationSchedule
 */
export class RotationSchedule extends pulumi.CustomResource {
    /**
     * Get an existing RotationSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RotationSchedule {
        return new RotationSchedule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:secretsmanager:RotationSchedule';

    /**
     * Returns true if the given object is an instance of RotationSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RotationSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RotationSchedule.__pulumiType;
    }

    /**
     * The ARN of the secret.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * Creates a new Lambda rotation function based on one of the Secrets Manager rotation function templates. To use a rotation function that already exists, specify RotationLambdaARN instead.
     */
    public readonly hostedRotationLambda!: pulumi.Output<outputs.secretsmanager.RotationScheduleHostedRotationLambda | undefined>;
    /**
     * Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window.
     */
    public readonly rotateImmediatelyOnUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of an existing Lambda rotation function. To specify a rotation function that is also defined in this template, use the Ref function.
     */
    public readonly rotationLambdaArn!: pulumi.Output<string | undefined>;
    /**
     * A structure that defines the rotation configuration for this secret.
     */
    public readonly rotationRules!: pulumi.Output<outputs.secretsmanager.RotationScheduleRotationRules | undefined>;
    /**
     * The ARN or name of the secret to rotate.
     */
    public readonly secretId!: pulumi.Output<string>;

    /**
     * Create a RotationSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RotationScheduleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["hostedRotationLambda"] = args ? args.hostedRotationLambda : undefined;
            resourceInputs["rotateImmediatelyOnUpdate"] = args ? args.rotateImmediatelyOnUpdate : undefined;
            resourceInputs["rotationLambdaArn"] = args ? args.rotationLambdaArn : undefined;
            resourceInputs["rotationRules"] = args ? args.rotationRules : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["hostedRotationLambda"] = undefined /*out*/;
            resourceInputs["rotateImmediatelyOnUpdate"] = undefined /*out*/;
            resourceInputs["rotationLambdaArn"] = undefined /*out*/;
            resourceInputs["rotationRules"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["secretId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RotationSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RotationSchedule resource.
 */
export interface RotationScheduleArgs {
    /**
     * Creates a new Lambda rotation function based on one of the Secrets Manager rotation function templates. To use a rotation function that already exists, specify RotationLambdaARN instead.
     */
    hostedRotationLambda?: pulumi.Input<inputs.secretsmanager.RotationScheduleHostedRotationLambdaArgs>;
    /**
     * Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window.
     */
    rotateImmediatelyOnUpdate?: pulumi.Input<boolean>;
    /**
     * The ARN of an existing Lambda rotation function. To specify a rotation function that is also defined in this template, use the Ref function.
     */
    rotationLambdaArn?: pulumi.Input<string>;
    /**
     * A structure that defines the rotation configuration for this secret.
     */
    rotationRules?: pulumi.Input<inputs.secretsmanager.RotationScheduleRotationRulesArgs>;
    /**
     * The ARN or name of the secret to rotate.
     */
    secretId: pulumi.Input<string>;
}
