// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::KafkaConnect::Connector
 */
export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:kafkaconnect:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    public readonly capacity!: pulumi.Output<outputs.kafkaconnect.ConnectorCapacity>;
    /**
     * Amazon Resource Name for the created Connector.
     */
    public /*out*/ readonly connectorArn!: pulumi.Output<string>;
    /**
     * The configuration for the connector.
     */
    public readonly connectorConfiguration!: pulumi.Output<any>;
    /**
     * A summary description of the connector.
     */
    public readonly connectorDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the connector.
     */
    public readonly connectorName!: pulumi.Output<string>;
    public readonly kafkaCluster!: pulumi.Output<outputs.kafkaconnect.ConnectorKafkaCluster>;
    public readonly kafkaClusterClientAuthentication!: pulumi.Output<outputs.kafkaconnect.ConnectorKafkaClusterClientAuthentication>;
    public readonly kafkaClusterEncryptionInTransit!: pulumi.Output<outputs.kafkaconnect.ConnectorKafkaClusterEncryptionInTransit>;
    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster's version and the plugins.
     */
    public readonly kafkaConnectVersion!: pulumi.Output<string>;
    public readonly logDelivery!: pulumi.Output<outputs.kafkaconnect.ConnectorLogDelivery | undefined>;
    /**
     * List of plugins to use with the connector.
     */
    public readonly plugins!: pulumi.Output<outputs.kafkaconnect.ConnectorPlugin[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
     */
    public readonly serviceExecutionRoleArn!: pulumi.Output<string>;
    public readonly workerConfiguration!: pulumi.Output<outputs.kafkaconnect.ConnectorWorkerConfiguration | undefined>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.connectorConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorConfiguration'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            if ((!args || args.kafkaClusterClientAuthentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterClientAuthentication'");
            }
            if ((!args || args.kafkaClusterEncryptionInTransit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusterEncryptionInTransit'");
            }
            if ((!args || args.kafkaConnectVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnectVersion'");
            }
            if ((!args || args.plugins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugins'");
            }
            if ((!args || args.serviceExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRoleArn'");
            }
            inputs["capacity"] = args ? args.capacity : undefined;
            inputs["connectorConfiguration"] = args ? args.connectorConfiguration : undefined;
            inputs["connectorDescription"] = args ? args.connectorDescription : undefined;
            inputs["connectorName"] = args ? args.connectorName : undefined;
            inputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            inputs["kafkaClusterClientAuthentication"] = args ? args.kafkaClusterClientAuthentication : undefined;
            inputs["kafkaClusterEncryptionInTransit"] = args ? args.kafkaClusterEncryptionInTransit : undefined;
            inputs["kafkaConnectVersion"] = args ? args.kafkaConnectVersion : undefined;
            inputs["logDelivery"] = args ? args.logDelivery : undefined;
            inputs["plugins"] = args ? args.plugins : undefined;
            inputs["serviceExecutionRoleArn"] = args ? args.serviceExecutionRoleArn : undefined;
            inputs["workerConfiguration"] = args ? args.workerConfiguration : undefined;
            inputs["connectorArn"] = undefined /*out*/;
        } else {
            inputs["capacity"] = undefined /*out*/;
            inputs["connectorArn"] = undefined /*out*/;
            inputs["connectorConfiguration"] = undefined /*out*/;
            inputs["connectorDescription"] = undefined /*out*/;
            inputs["connectorName"] = undefined /*out*/;
            inputs["kafkaCluster"] = undefined /*out*/;
            inputs["kafkaClusterClientAuthentication"] = undefined /*out*/;
            inputs["kafkaClusterEncryptionInTransit"] = undefined /*out*/;
            inputs["kafkaConnectVersion"] = undefined /*out*/;
            inputs["logDelivery"] = undefined /*out*/;
            inputs["plugins"] = undefined /*out*/;
            inputs["serviceExecutionRoleArn"] = undefined /*out*/;
            inputs["workerConfiguration"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Connector.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    capacity: pulumi.Input<inputs.kafkaconnect.ConnectorCapacityArgs>;
    /**
     * The configuration for the connector.
     */
    connectorConfiguration: any;
    /**
     * A summary description of the connector.
     */
    connectorDescription?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    connectorName?: pulumi.Input<string>;
    kafkaCluster: pulumi.Input<inputs.kafkaconnect.ConnectorKafkaClusterArgs>;
    kafkaClusterClientAuthentication: pulumi.Input<inputs.kafkaconnect.ConnectorKafkaClusterClientAuthenticationArgs>;
    kafkaClusterEncryptionInTransit: pulumi.Input<inputs.kafkaconnect.ConnectorKafkaClusterEncryptionInTransitArgs>;
    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster's version and the plugins.
     */
    kafkaConnectVersion: pulumi.Input<string>;
    logDelivery?: pulumi.Input<inputs.kafkaconnect.ConnectorLogDeliveryArgs>;
    /**
     * List of plugins to use with the connector.
     */
    plugins: pulumi.Input<pulumi.Input<inputs.kafkaconnect.ConnectorPluginArgs>[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
     */
    serviceExecutionRoleArn: pulumi.Input<string>;
    workerConfiguration?: pulumi.Input<inputs.kafkaconnect.ConnectorWorkerConfigurationArgs>;
}
