// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::APS::Scraper
 */
export class Scraper extends pulumi.CustomResource {
    /**
     * Get an existing Scraper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Scraper {
        return new Scraper(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:aps:Scraper';

    /**
     * Returns true if the given object is an instance of Scraper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Scraper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scraper.__pulumiType;
    }

    /**
     * Scraper alias.
     */
    declare public readonly alias: pulumi.Output<string | undefined>;
    /**
     * Scraper ARN.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
     */
    declare public readonly destination: pulumi.Output<outputs.aps.ScraperDestination>;
    /**
     * IAM role ARN for the scraper.
     */
    declare public /*out*/ readonly roleArn: pulumi.Output<string>;
    /**
     * The role configuration in an Amazon Managed Service for Prometheus scraper.
     */
    declare public readonly roleConfiguration: pulumi.Output<outputs.aps.ScraperRoleConfiguration | undefined>;
    /**
     * The configuration in use by the scraper.
     */
    declare public readonly scrapeConfiguration: pulumi.Output<outputs.aps.ScraperScrapeConfiguration>;
    /**
     * Required to identify a specific scraper.
     */
    declare public /*out*/ readonly scraperId: pulumi.Output<string>;
    /**
     * The Amazon EKS cluster from which the scraper collects metrics.
     */
    declare public readonly source: pulumi.Output<outputs.aps.ScraperSource>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Scraper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScraperArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.scrapeConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'scrapeConfiguration'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["roleConfiguration"] = args?.roleConfiguration;
            resourceInputs["scrapeConfiguration"] = args?.scrapeConfiguration;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["scraperId"] = undefined /*out*/;
        } else {
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["destination"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["roleConfiguration"] = undefined /*out*/;
            resourceInputs["scrapeConfiguration"] = undefined /*out*/;
            resourceInputs["scraperId"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["source"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Scraper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Scraper resource.
 */
export interface ScraperArgs {
    /**
     * Scraper alias.
     */
    alias?: pulumi.Input<string>;
    /**
     * The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
     */
    destination: pulumi.Input<inputs.aps.ScraperDestinationArgs>;
    /**
     * The role configuration in an Amazon Managed Service for Prometheus scraper.
     */
    roleConfiguration?: pulumi.Input<inputs.aps.ScraperRoleConfigurationArgs>;
    /**
     * The configuration in use by the scraper.
     */
    scrapeConfiguration: pulumi.Input<inputs.aps.ScraperScrapeConfigurationArgs>;
    /**
     * The Amazon EKS cluster from which the scraper collects metrics.
     */
    source: pulumi.Input<inputs.aps.ScraperSourceArgs>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
