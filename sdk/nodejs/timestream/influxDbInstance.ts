// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::Timestream::InfluxDBInstance resource creates an InfluxDB instance.
 */
export class InfluxDbInstance extends pulumi.CustomResource {
    /**
     * Get an existing InfluxDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InfluxDbInstance {
        return new InfluxDbInstance(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:timestream:InfluxDbInstance';

    /**
     * Returns true if the given object is an instance of InfluxDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfluxDbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfluxDbInstance.__pulumiType;
    }

    /**
     * The allocated storage for the InfluxDB instance.
     */
    public readonly allocatedStorage!: pulumi.Output<number | undefined>;
    /**
     * The Amazon Resource Name (ARN) that is associated with the InfluxDB instance.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Availability Zone (AZ) where the InfluxDB instance is created.
     */
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The service generated unique identifier for InfluxDB instance.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The bucket for the InfluxDB instance.
     */
    public readonly bucket!: pulumi.Output<string | undefined>;
    /**
     * The compute instance of the InfluxDB instance.
     */
    public readonly dbInstanceType!: pulumi.Output<enums.timestream.InfluxDbInstanceDbInstanceType | undefined>;
    /**
     * The name of an existing InfluxDB parameter group.
     */
    public readonly dbParameterGroupIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The storage type of the InfluxDB instance.
     */
    public readonly dbStorageType!: pulumi.Output<enums.timestream.InfluxDbInstanceDbStorageType | undefined>;
    /**
     * Deployment type of the InfluxDB Instance.
     */
    public readonly deploymentType!: pulumi.Output<enums.timestream.InfluxDbInstanceDeploymentType | undefined>;
    /**
     * The connection endpoint for the InfluxDB instance.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The Auth parameters secret Amazon Resource name (ARN) that is associated with the InfluxDB instance.
     */
    public /*out*/ readonly influxAuthParametersSecretArn!: pulumi.Output<string>;
    /**
     * Configuration for sending logs to customer account from the InfluxDB instance.
     */
    public readonly logDeliveryConfiguration!: pulumi.Output<outputs.timestream.LogDeliveryConfigurationProperties | undefined>;
    /**
     * The unique name that is associated with the InfluxDB instance.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Network type of the InfluxDB Instance.
     */
    public readonly networkType!: pulumi.Output<enums.timestream.InfluxDbInstanceNetworkType | undefined>;
    /**
     * The organization for the InfluxDB instance.
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * The password for the InfluxDB instance.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The port number on which InfluxDB accepts connections.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Attach a public IP to the customer ENI.
     */
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    /**
     * The Secondary Availability Zone (AZ) where the InfluxDB instance is created, if DeploymentType is set as WITH_MULTIAZ_STANDBY.
     */
    public /*out*/ readonly secondaryAvailabilityZone!: pulumi.Output<string>;
    /**
     * Status of the InfluxDB Instance.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.timestream.InfluxDbInstanceStatus>;
    /**
     * An arbitrary set of tags (key-value pairs) for this DB instance.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The username for the InfluxDB instance.
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * A list of Amazon EC2 VPC security groups to associate with this InfluxDB instance.
     */
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * A list of EC2 subnet IDs for this InfluxDB instance.
     */
    public readonly vpcSubnetIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a InfluxDbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InfluxDbInstanceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["allocatedStorage"] = args?.allocatedStorage;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["dbInstanceType"] = args?.dbInstanceType;
            resourceInputs["dbParameterGroupIdentifier"] = args?.dbParameterGroupIdentifier;
            resourceInputs["dbStorageType"] = args?.dbStorageType;
            resourceInputs["deploymentType"] = args?.deploymentType;
            resourceInputs["logDeliveryConfiguration"] = args?.logDeliveryConfiguration;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkType"] = args?.networkType;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["password"] = args?.password;
            resourceInputs["port"] = args?.port;
            resourceInputs["publiclyAccessible"] = args?.publiclyAccessible;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["username"] = args?.username;
            resourceInputs["vpcSecurityGroupIds"] = args?.vpcSecurityGroupIds;
            resourceInputs["vpcSubnetIds"] = args?.vpcSubnetIds;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["influxAuthParametersSecretArn"] = undefined /*out*/;
            resourceInputs["secondaryAvailabilityZone"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["allocatedStorage"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["bucket"] = undefined /*out*/;
            resourceInputs["dbInstanceType"] = undefined /*out*/;
            resourceInputs["dbParameterGroupIdentifier"] = undefined /*out*/;
            resourceInputs["dbStorageType"] = undefined /*out*/;
            resourceInputs["deploymentType"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["influxAuthParametersSecretArn"] = undefined /*out*/;
            resourceInputs["logDeliveryConfiguration"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkType"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["publiclyAccessible"] = undefined /*out*/;
            resourceInputs["secondaryAvailabilityZone"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
            resourceInputs["vpcSecurityGroupIds"] = undefined /*out*/;
            resourceInputs["vpcSubnetIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["bucket", "name", "networkType", "organization", "password", "publiclyAccessible", "username", "vpcSecurityGroupIds[*]", "vpcSubnetIds[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(InfluxDbInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InfluxDbInstance resource.
 */
export interface InfluxDbInstanceArgs {
    /**
     * The allocated storage for the InfluxDB instance.
     */
    allocatedStorage?: pulumi.Input<number>;
    /**
     * The bucket for the InfluxDB instance.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The compute instance of the InfluxDB instance.
     */
    dbInstanceType?: pulumi.Input<enums.timestream.InfluxDbInstanceDbInstanceType>;
    /**
     * The name of an existing InfluxDB parameter group.
     */
    dbParameterGroupIdentifier?: pulumi.Input<string>;
    /**
     * The storage type of the InfluxDB instance.
     */
    dbStorageType?: pulumi.Input<enums.timestream.InfluxDbInstanceDbStorageType>;
    /**
     * Deployment type of the InfluxDB Instance.
     */
    deploymentType?: pulumi.Input<enums.timestream.InfluxDbInstanceDeploymentType>;
    /**
     * Configuration for sending logs to customer account from the InfluxDB instance.
     */
    logDeliveryConfiguration?: pulumi.Input<inputs.timestream.LogDeliveryConfigurationPropertiesArgs>;
    /**
     * The unique name that is associated with the InfluxDB instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Network type of the InfluxDB Instance.
     */
    networkType?: pulumi.Input<enums.timestream.InfluxDbInstanceNetworkType>;
    /**
     * The organization for the InfluxDB instance.
     */
    organization?: pulumi.Input<string>;
    /**
     * The password for the InfluxDB instance.
     */
    password?: pulumi.Input<string>;
    /**
     * The port number on which InfluxDB accepts connections.
     */
    port?: pulumi.Input<number>;
    /**
     * Attach a public IP to the customer ENI.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * An arbitrary set of tags (key-value pairs) for this DB instance.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The username for the InfluxDB instance.
     */
    username?: pulumi.Input<string>;
    /**
     * A list of Amazon EC2 VPC security groups to associate with this InfluxDB instance.
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of EC2 subnet IDs for this InfluxDB instance.
     */
    vpcSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}
