// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;

export { ApiKeyArgs } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;

export { AuthorizerArgs } from "./authorizer";
export type Authorizer = import("./authorizer").Authorizer;
export const Authorizer: typeof import("./authorizer").Authorizer = null as any;

export { BasePathMappingArgs } from "./basePathMapping";
export type BasePathMapping = import("./basePathMapping").BasePathMapping;
export const BasePathMapping: typeof import("./basePathMapping").BasePathMapping = null as any;

export { ClientCertificateArgs } from "./clientCertificate";
export type ClientCertificate = import("./clientCertificate").ClientCertificate;
export const ClientCertificate: typeof import("./clientCertificate").ClientCertificate = null as any;

export { DeploymentArgs } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;

export { DocumentationPartArgs } from "./documentationPart";
export type DocumentationPart = import("./documentationPart").DocumentationPart;
export const DocumentationPart: typeof import("./documentationPart").DocumentationPart = null as any;

export { DocumentationVersionArgs } from "./documentationVersion";
export type DocumentationVersion = import("./documentationVersion").DocumentationVersion;
export const DocumentationVersion: typeof import("./documentationVersion").DocumentationVersion = null as any;

export { DomainNameArgs } from "./domainName";
export type DomainName = import("./domainName").DomainName;
export const DomainName: typeof import("./domainName").DomainName = null as any;

export { GatewayResponseArgs } from "./gatewayResponse";
export type GatewayResponse = import("./gatewayResponse").GatewayResponse;
export const GatewayResponse: typeof import("./gatewayResponse").GatewayResponse = null as any;

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;

export { GetAuthorizerArgs, GetAuthorizerResult, GetAuthorizerOutputArgs } from "./getAuthorizer";
export const getAuthorizer: typeof import("./getAuthorizer").getAuthorizer = null as any;
export const getAuthorizerOutput: typeof import("./getAuthorizer").getAuthorizerOutput = null as any;

export { GetBasePathMappingArgs, GetBasePathMappingResult, GetBasePathMappingOutputArgs } from "./getBasePathMapping";
export const getBasePathMapping: typeof import("./getBasePathMapping").getBasePathMapping = null as any;
export const getBasePathMappingOutput: typeof import("./getBasePathMapping").getBasePathMappingOutput = null as any;

export { GetClientCertificateArgs, GetClientCertificateResult, GetClientCertificateOutputArgs } from "./getClientCertificate";
export const getClientCertificate: typeof import("./getClientCertificate").getClientCertificate = null as any;
export const getClientCertificateOutput: typeof import("./getClientCertificate").getClientCertificateOutput = null as any;

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;

export { GetDocumentationPartArgs, GetDocumentationPartResult, GetDocumentationPartOutputArgs } from "./getDocumentationPart";
export const getDocumentationPart: typeof import("./getDocumentationPart").getDocumentationPart = null as any;
export const getDocumentationPartOutput: typeof import("./getDocumentationPart").getDocumentationPartOutput = null as any;

export { GetDocumentationVersionArgs, GetDocumentationVersionResult, GetDocumentationVersionOutputArgs } from "./getDocumentationVersion";
export const getDocumentationVersion: typeof import("./getDocumentationVersion").getDocumentationVersion = null as any;
export const getDocumentationVersionOutput: typeof import("./getDocumentationVersion").getDocumentationVersionOutput = null as any;

export { GetDomainNameArgs, GetDomainNameResult, GetDomainNameOutputArgs } from "./getDomainName";
export const getDomainName: typeof import("./getDomainName").getDomainName = null as any;
export const getDomainNameOutput: typeof import("./getDomainName").getDomainNameOutput = null as any;

export { GetGatewayResponseArgs, GetGatewayResponseResult, GetGatewayResponseOutputArgs } from "./getGatewayResponse";
export const getGatewayResponse: typeof import("./getGatewayResponse").getGatewayResponse = null as any;
export const getGatewayResponseOutput: typeof import("./getGatewayResponse").getGatewayResponseOutput = null as any;

export { GetMethodArgs, GetMethodResult, GetMethodOutputArgs } from "./getMethod";
export const getMethod: typeof import("./getMethod").getMethod = null as any;
export const getMethodOutput: typeof import("./getMethod").getMethodOutput = null as any;

export { GetModelArgs, GetModelResult, GetModelOutputArgs } from "./getModel";
export const getModel: typeof import("./getModel").getModel = null as any;
export const getModelOutput: typeof import("./getModel").getModelOutput = null as any;

export { GetRequestValidatorArgs, GetRequestValidatorResult, GetRequestValidatorOutputArgs } from "./getRequestValidator";
export const getRequestValidator: typeof import("./getRequestValidator").getRequestValidator = null as any;
export const getRequestValidatorOutput: typeof import("./getRequestValidator").getRequestValidatorOutput = null as any;

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;

export { GetRestApiArgs, GetRestApiResult, GetRestApiOutputArgs } from "./getRestApi";
export const getRestApi: typeof import("./getRestApi").getRestApi = null as any;
export const getRestApiOutput: typeof import("./getRestApi").getRestApiOutput = null as any;

export { GetStageArgs, GetStageResult, GetStageOutputArgs } from "./getStage";
export const getStage: typeof import("./getStage").getStage = null as any;
export const getStageOutput: typeof import("./getStage").getStageOutput = null as any;

export { GetUsagePlanArgs, GetUsagePlanResult, GetUsagePlanOutputArgs } from "./getUsagePlan";
export const getUsagePlan: typeof import("./getUsagePlan").getUsagePlan = null as any;
export const getUsagePlanOutput: typeof import("./getUsagePlan").getUsagePlanOutput = null as any;

export { GetUsagePlanKeyArgs, GetUsagePlanKeyResult, GetUsagePlanKeyOutputArgs } from "./getUsagePlanKey";
export const getUsagePlanKey: typeof import("./getUsagePlanKey").getUsagePlanKey = null as any;
export const getUsagePlanKeyOutput: typeof import("./getUsagePlanKey").getUsagePlanKeyOutput = null as any;

export { GetVpcLinkArgs, GetVpcLinkResult, GetVpcLinkOutputArgs } from "./getVpcLink";
export const getVpcLink: typeof import("./getVpcLink").getVpcLink = null as any;
export const getVpcLinkOutput: typeof import("./getVpcLink").getVpcLinkOutput = null as any;

export { MethodArgs } from "./method";
export type Method = import("./method").Method;
export const Method: typeof import("./method").Method = null as any;

export { ModelArgs } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;

export { RequestValidatorArgs } from "./requestValidator";
export type RequestValidator = import("./requestValidator").RequestValidator;
export const RequestValidator: typeof import("./requestValidator").RequestValidator = null as any;

export { ResourceArgs } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;

export { RestApiArgs } from "./restApi";
export type RestApi = import("./restApi").RestApi;
export const RestApi: typeof import("./restApi").RestApi = null as any;

export { StageArgs } from "./stage";
export type Stage = import("./stage").Stage;
export const Stage: typeof import("./stage").Stage = null as any;

export { UsagePlanArgs } from "./usagePlan";
export type UsagePlan = import("./usagePlan").UsagePlan;
export const UsagePlan: typeof import("./usagePlan").UsagePlan = null as any;

export { UsagePlanKeyArgs } from "./usagePlanKey";
export type UsagePlanKey = import("./usagePlanKey").UsagePlanKey;
export const UsagePlanKey: typeof import("./usagePlanKey").UsagePlanKey = null as any;

export { VpcLinkArgs } from "./vpcLink";
export type VpcLink = import("./vpcLink").VpcLink;
export const VpcLink: typeof import("./vpcLink").VpcLink = null as any;

utilities.lazyLoad(exports, ["Account"], () => require("./account"));
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));
utilities.lazyLoad(exports, ["Authorizer"], () => require("./authorizer"));
utilities.lazyLoad(exports, ["BasePathMapping"], () => require("./basePathMapping"));
utilities.lazyLoad(exports, ["ClientCertificate"], () => require("./clientCertificate"));
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));
utilities.lazyLoad(exports, ["DocumentationPart"], () => require("./documentationPart"));
utilities.lazyLoad(exports, ["DocumentationVersion"], () => require("./documentationVersion"));
utilities.lazyLoad(exports, ["DomainName"], () => require("./domainName"));
utilities.lazyLoad(exports, ["GatewayResponse"], () => require("./gatewayResponse"));
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));
utilities.lazyLoad(exports, ["getAuthorizer","getAuthorizerOutput"], () => require("./getAuthorizer"));
utilities.lazyLoad(exports, ["getBasePathMapping","getBasePathMappingOutput"], () => require("./getBasePathMapping"));
utilities.lazyLoad(exports, ["getClientCertificate","getClientCertificateOutput"], () => require("./getClientCertificate"));
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));
utilities.lazyLoad(exports, ["getDocumentationPart","getDocumentationPartOutput"], () => require("./getDocumentationPart"));
utilities.lazyLoad(exports, ["getDocumentationVersion","getDocumentationVersionOutput"], () => require("./getDocumentationVersion"));
utilities.lazyLoad(exports, ["getDomainName","getDomainNameOutput"], () => require("./getDomainName"));
utilities.lazyLoad(exports, ["getGatewayResponse","getGatewayResponseOutput"], () => require("./getGatewayResponse"));
utilities.lazyLoad(exports, ["getMethod","getMethodOutput"], () => require("./getMethod"));
utilities.lazyLoad(exports, ["getModel","getModelOutput"], () => require("./getModel"));
utilities.lazyLoad(exports, ["getRequestValidator","getRequestValidatorOutput"], () => require("./getRequestValidator"));
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));
utilities.lazyLoad(exports, ["getRestApi","getRestApiOutput"], () => require("./getRestApi"));
utilities.lazyLoad(exports, ["getStage","getStageOutput"], () => require("./getStage"));
utilities.lazyLoad(exports, ["getUsagePlan","getUsagePlanOutput"], () => require("./getUsagePlan"));
utilities.lazyLoad(exports, ["getUsagePlanKey","getUsagePlanKeyOutput"], () => require("./getUsagePlanKey"));
utilities.lazyLoad(exports, ["getVpcLink","getVpcLinkOutput"], () => require("./getVpcLink"));
utilities.lazyLoad(exports, ["Method"], () => require("./method"));
utilities.lazyLoad(exports, ["Model"], () => require("./model"));
utilities.lazyLoad(exports, ["RequestValidator"], () => require("./requestValidator"));
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));
utilities.lazyLoad(exports, ["RestApi"], () => require("./restApi"));
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));
utilities.lazyLoad(exports, ["UsagePlan"], () => require("./usagePlan"));
utilities.lazyLoad(exports, ["UsagePlanKey"], () => require("./usagePlanKey"));
utilities.lazyLoad(exports, ["VpcLink"], () => require("./vpcLink"));

// Export enums:
export * from "../types/enums/apigateway";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:apigateway:Account":
                return new Account(name, <any>undefined, { urn })
            case "aws-native:apigateway:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "aws-native:apigateway:Authorizer":
                return new Authorizer(name, <any>undefined, { urn })
            case "aws-native:apigateway:BasePathMapping":
                return new BasePathMapping(name, <any>undefined, { urn })
            case "aws-native:apigateway:ClientCertificate":
                return new ClientCertificate(name, <any>undefined, { urn })
            case "aws-native:apigateway:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "aws-native:apigateway:DocumentationPart":
                return new DocumentationPart(name, <any>undefined, { urn })
            case "aws-native:apigateway:DocumentationVersion":
                return new DocumentationVersion(name, <any>undefined, { urn })
            case "aws-native:apigateway:DomainName":
                return new DomainName(name, <any>undefined, { urn })
            case "aws-native:apigateway:GatewayResponse":
                return new GatewayResponse(name, <any>undefined, { urn })
            case "aws-native:apigateway:Method":
                return new Method(name, <any>undefined, { urn })
            case "aws-native:apigateway:Model":
                return new Model(name, <any>undefined, { urn })
            case "aws-native:apigateway:RequestValidator":
                return new RequestValidator(name, <any>undefined, { urn })
            case "aws-native:apigateway:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "aws-native:apigateway:RestApi":
                return new RestApi(name, <any>undefined, { urn })
            case "aws-native:apigateway:Stage":
                return new Stage(name, <any>undefined, { urn })
            case "aws-native:apigateway:UsagePlan":
                return new UsagePlan(name, <any>undefined, { urn })
            case "aws-native:apigateway:UsagePlanKey":
                return new UsagePlanKey(name, <any>undefined, { urn })
            case "aws-native:apigateway:VpcLink":
                return new VpcLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "apigateway", _module)
