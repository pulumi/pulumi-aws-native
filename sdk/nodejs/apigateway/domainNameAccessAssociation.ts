// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::ApiGateway::DomainNameAccessAssociation.
 */
export class DomainNameAccessAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DomainNameAccessAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DomainNameAccessAssociation {
        return new DomainNameAccessAssociation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:apigateway:DomainNameAccessAssociation';

    /**
     * Returns true if the given object is an instance of DomainNameAccessAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainNameAccessAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainNameAccessAssociation.__pulumiType;
    }

    /**
     * The source of the domain name access association resource.
     */
    public readonly accessAssociationSource!: pulumi.Output<string>;
    /**
     * The source type of the domain name access association resource.
     */
    public readonly accessAssociationSourceType!: pulumi.Output<enums.apigateway.DomainNameAccessAssociationAccessAssociationSourceType>;
    /**
     * The amazon resource name (ARN) of the domain name access association resource.
     */
    public /*out*/ readonly domainNameAccessAssociationArn!: pulumi.Output<string>;
    /**
     * The amazon resource name (ARN) of the domain name resource.
     */
    public readonly domainNameArn!: pulumi.Output<string>;
    /**
     * An array of arbitrary tags (key-value pairs) to associate with the domainname access association.
     */
    public readonly tags!: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;

    /**
     * Create a DomainNameAccessAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainNameAccessAssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accessAssociationSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessAssociationSource'");
            }
            if ((!args || args.accessAssociationSourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessAssociationSourceType'");
            }
            if ((!args || args.domainNameArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNameArn'");
            }
            resourceInputs["accessAssociationSource"] = args ? args.accessAssociationSource : undefined;
            resourceInputs["accessAssociationSourceType"] = args ? args.accessAssociationSourceType : undefined;
            resourceInputs["domainNameArn"] = args ? args.domainNameArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["domainNameAccessAssociationArn"] = undefined /*out*/;
        } else {
            resourceInputs["accessAssociationSource"] = undefined /*out*/;
            resourceInputs["accessAssociationSourceType"] = undefined /*out*/;
            resourceInputs["domainNameAccessAssociationArn"] = undefined /*out*/;
            resourceInputs["domainNameArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["accessAssociationSource", "accessAssociationSourceType", "domainNameArn", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DomainNameAccessAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DomainNameAccessAssociation resource.
 */
export interface DomainNameAccessAssociationArgs {
    /**
     * The source of the domain name access association resource.
     */
    accessAssociationSource: pulumi.Input<string>;
    /**
     * The source type of the domain name access association resource.
     */
    accessAssociationSourceType: pulumi.Input<enums.apigateway.DomainNameAccessAssociationAccessAssociationSourceType>;
    /**
     * The amazon resource name (ARN) of the domain name resource.
     */
    domainNameArn: pulumi.Input<string>;
    /**
     * An array of arbitrary tags (key-value pairs) to associate with the domainname access association.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
}
