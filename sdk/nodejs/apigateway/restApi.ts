// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::ApiGateway::RestApi
 *
 * @deprecated RestApi is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class RestApi extends pulumi.CustomResource {
    /**
     * Get an existing RestApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RestApi {
        pulumi.log.warn("RestApi is deprecated: RestApi is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new RestApi(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:apigateway:RestApi';

    /**
     * Returns true if the given object is an instance of RestApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestApi.__pulumiType;
    }

    public readonly apiKeySourceType!: pulumi.Output<string | undefined>;
    public readonly binaryMediaTypes!: pulumi.Output<string[] | undefined>;
    public readonly body!: pulumi.Output<any | undefined>;
    public readonly bodyS3Location!: pulumi.Output<outputs.apigateway.RestApiS3Location | undefined>;
    public readonly cloneFrom!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableExecuteApiEndpoint!: pulumi.Output<boolean | undefined>;
    public readonly endpointConfiguration!: pulumi.Output<outputs.apigateway.RestApiEndpointConfiguration | undefined>;
    public readonly failOnWarnings!: pulumi.Output<boolean | undefined>;
    public readonly minimumCompressionSize!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<any | undefined>;
    public readonly policy!: pulumi.Output<any | undefined>;
    public /*out*/ readonly rootResourceId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.apigateway.RestApiTag[] | undefined>;

    /**
     * Create a RestApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated RestApi is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args?: RestApiArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("RestApi is deprecated: RestApi is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiKeySourceType"] = args ? args.apiKeySourceType : undefined;
            resourceInputs["binaryMediaTypes"] = args ? args.binaryMediaTypes : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["bodyS3Location"] = args ? args.bodyS3Location : undefined;
            resourceInputs["cloneFrom"] = args ? args.cloneFrom : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableExecuteApiEndpoint"] = args ? args.disableExecuteApiEndpoint : undefined;
            resourceInputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            resourceInputs["failOnWarnings"] = args ? args.failOnWarnings : undefined;
            resourceInputs["minimumCompressionSize"] = args ? args.minimumCompressionSize : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["rootResourceId"] = undefined /*out*/;
        } else {
            resourceInputs["apiKeySourceType"] = undefined /*out*/;
            resourceInputs["binaryMediaTypes"] = undefined /*out*/;
            resourceInputs["body"] = undefined /*out*/;
            resourceInputs["bodyS3Location"] = undefined /*out*/;
            resourceInputs["cloneFrom"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disableExecuteApiEndpoint"] = undefined /*out*/;
            resourceInputs["endpointConfiguration"] = undefined /*out*/;
            resourceInputs["failOnWarnings"] = undefined /*out*/;
            resourceInputs["minimumCompressionSize"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["rootResourceId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RestApi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RestApi resource.
 */
export interface RestApiArgs {
    apiKeySourceType?: pulumi.Input<string>;
    binaryMediaTypes?: pulumi.Input<pulumi.Input<string>[]>;
    body?: any;
    bodyS3Location?: pulumi.Input<inputs.apigateway.RestApiS3LocationArgs>;
    cloneFrom?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableExecuteApiEndpoint?: pulumi.Input<boolean>;
    endpointConfiguration?: pulumi.Input<inputs.apigateway.RestApiEndpointConfigurationArgs>;
    failOnWarnings?: pulumi.Input<boolean>;
    minimumCompressionSize?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: any;
    policy?: any;
    tags?: pulumi.Input<pulumi.Input<inputs.apigateway.RestApiTagArgs>[]>;
}
