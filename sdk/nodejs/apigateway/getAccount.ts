// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The ``AWS::ApiGateway::Account`` resource specifies the IAM role that Amazon API Gateway uses to write API logs to Amazon CloudWatch Logs. To avoid overwriting other roles, you should only have one ``AWS::ApiGateway::Account`` resource per region per account.
 */
export function getAccount(args: GetAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:apigateway:getAccount", {
        "id": args.id,
    }, opts);
}

export interface GetAccountArgs {
    /**
     * The ID for the account. For example: `abc123` .
     */
    id: string;
}

export interface GetAccountResult {
    /**
     * The ARN of an Amazon CloudWatch role for the current Account.
     */
    readonly cloudWatchRoleArn?: string;
    /**
     * The ID for the account. For example: `abc123` .
     */
    readonly id?: string;
}
/**
 * The ``AWS::ApiGateway::Account`` resource specifies the IAM role that Amazon API Gateway uses to write API logs to Amazon CloudWatch Logs. To avoid overwriting other roles, you should only have one ``AWS::ApiGateway::Account`` resource per region per account.
 */
export function getAccountOutput(args: GetAccountOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:apigateway:getAccount", {
        "id": args.id,
    }, opts);
}

export interface GetAccountOutputArgs {
    /**
     * The ID for the account. For example: `abc123` .
     */
    id: pulumi.Input<string>;
}
