// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::IoTSiteWise::AccessPolicy
 */
export function getAccessPolicy(args: GetAccessPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessPolicyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:iotsitewise:getAccessPolicy", {
        "accessPolicyId": args.accessPolicyId,
    }, opts);
}

export interface GetAccessPolicyArgs {
    /**
     * The ID of the access policy.
     */
    accessPolicyId: string;
}

export interface GetAccessPolicyResult {
    /**
     * The ARN of the access policy.
     */
    readonly accessPolicyArn?: string;
    /**
     * The ID of the access policy.
     */
    readonly accessPolicyId?: string;
    /**
     * The identity for this access policy. Choose either a user or a group but not both.
     */
    readonly accessPolicyIdentity?: outputs.iotsitewise.AccessPolicyIdentity;
    /**
     * The permission level for this access policy. Valid values are ADMINISTRATOR or VIEWER.
     */
    readonly accessPolicyPermission?: string;
    /**
     * The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
     */
    readonly accessPolicyResource?: outputs.iotsitewise.AccessPolicyResource;
}

export function getAccessPolicyOutput(args: GetAccessPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessPolicyResult> {
    return pulumi.output(args).apply(a => getAccessPolicy(a, opts))
}

export interface GetAccessPolicyOutputArgs {
    /**
     * The ID of the access policy.
     */
    accessPolicyId: pulumi.Input<string>;
}
