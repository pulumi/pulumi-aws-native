// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { DataAccessorArgs } from "./dataAccessor";
export type DataAccessor = import("./dataAccessor").DataAccessor;
export const DataAccessor: typeof import("./dataAccessor").DataAccessor = null as any;
utilities.lazyLoad(exports, ["DataAccessor"], () => require("./dataAccessor"));

export { DataSourceArgs } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetDataAccessorArgs, GetDataAccessorResult, GetDataAccessorOutputArgs } from "./getDataAccessor";
export const getDataAccessor: typeof import("./getDataAccessor").getDataAccessor = null as any;
export const getDataAccessorOutput: typeof import("./getDataAccessor").getDataAccessorOutput = null as any;
utilities.lazyLoad(exports, ["getDataAccessor","getDataAccessorOutput"], () => require("./getDataAccessor"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetPluginArgs, GetPluginResult, GetPluginOutputArgs } from "./getPlugin";
export const getPlugin: typeof import("./getPlugin").getPlugin = null as any;
export const getPluginOutput: typeof import("./getPlugin").getPluginOutput = null as any;
utilities.lazyLoad(exports, ["getPlugin","getPluginOutput"], () => require("./getPlugin"));

export { GetRetrieverArgs, GetRetrieverResult, GetRetrieverOutputArgs } from "./getRetriever";
export const getRetriever: typeof import("./getRetriever").getRetriever = null as any;
export const getRetrieverOutput: typeof import("./getRetriever").getRetrieverOutput = null as any;
utilities.lazyLoad(exports, ["getRetriever","getRetrieverOutput"], () => require("./getRetriever"));

export { GetWebExperienceArgs, GetWebExperienceResult, GetWebExperienceOutputArgs } from "./getWebExperience";
export const getWebExperience: typeof import("./getWebExperience").getWebExperience = null as any;
export const getWebExperienceOutput: typeof import("./getWebExperience").getWebExperienceOutput = null as any;
utilities.lazyLoad(exports, ["getWebExperience","getWebExperienceOutput"], () => require("./getWebExperience"));

export { IndexArgs } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { PermissionArgs } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PluginArgs } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { RetrieverArgs } from "./retriever";
export type Retriever = import("./retriever").Retriever;
export const Retriever: typeof import("./retriever").Retriever = null as any;
utilities.lazyLoad(exports, ["Retriever"], () => require("./retriever"));

export { WebExperienceArgs } from "./webExperience";
export type WebExperience = import("./webExperience").WebExperience;
export const WebExperience: typeof import("./webExperience").WebExperience = null as any;
utilities.lazyLoad(exports, ["WebExperience"], () => require("./webExperience"));


// Export enums:
export * from "../types/enums/qbusiness";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:qbusiness:Application":
                return new Application(name, <any>undefined, { urn })
            case "aws-native:qbusiness:DataAccessor":
                return new DataAccessor(name, <any>undefined, { urn })
            case "aws-native:qbusiness:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws-native:qbusiness:Index":
                return new Index(name, <any>undefined, { urn })
            case "aws-native:qbusiness:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "aws-native:qbusiness:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "aws-native:qbusiness:Retriever":
                return new Retriever(name, <any>undefined, { urn })
            case "aws-native:qbusiness:WebExperience":
                return new WebExperience(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "qbusiness", _module)
