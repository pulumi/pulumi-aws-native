// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::QBusiness::DataSource Resource Type
 */
export function getDataSource(args: GetDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:qbusiness:getDataSource", {
        "applicationId": args.applicationId,
        "dataSourceId": args.dataSourceId,
        "indexId": args.indexId,
    }, opts);
}

export interface GetDataSourceArgs {
    applicationId: string;
    dataSourceId: string;
    indexId: string;
}

export interface GetDataSourceResult {
    /**
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::QBusiness::DataSource` for more information about the expected schema for this property.
     */
    readonly configuration?: any;
    readonly createdAt?: string;
    readonly dataSourceArn?: string;
    readonly dataSourceId?: string;
    readonly description?: string;
    readonly displayName?: string;
    readonly documentEnrichmentConfiguration?: outputs.qbusiness.DataSourceDocumentEnrichmentConfiguration;
    readonly roleArn?: string;
    readonly status?: enums.qbusiness.DataSourceStatus;
    readonly syncSchedule?: string;
    readonly tags?: outputs.Tag[];
    readonly type?: string;
    readonly updatedAt?: string;
    readonly vpcConfiguration?: outputs.qbusiness.DataSourceVpcConfiguration;
}
/**
 * Definition of AWS::QBusiness::DataSource Resource Type
 */
export function getDataSourceOutput(args: GetDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getDataSource(a, opts))
}

export interface GetDataSourceOutputArgs {
    applicationId: pulumi.Input<string>;
    dataSourceId: pulumi.Input<string>;
    indexId: pulumi.Input<string>;
}
