// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SageMaker::Cluster
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sagemaker:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    declare public readonly autoScaling: pulumi.Output<outputs.sagemaker.ClusterAutoScalingConfig | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the HyperPod Cluster.
     */
    declare public /*out*/ readonly clusterArn: pulumi.Output<string>;
    /**
     * The name of the HyperPod Cluster.
     */
    declare public readonly clusterName: pulumi.Output<string | undefined>;
    /**
     * The cluster role for the autoscaler to assume.
     */
    declare public readonly clusterRole: pulumi.Output<string | undefined>;
    /**
     * The status of the HyperPod Cluster.
     */
    declare public /*out*/ readonly clusterStatus: pulumi.Output<enums.sagemaker.ClusterStatus>;
    /**
     * The time at which the HyperPod cluster was created.
     */
    declare public /*out*/ readonly creationTime: pulumi.Output<string>;
    /**
     * The failure message of the HyperPod Cluster.
     */
    declare public /*out*/ readonly failureMessage: pulumi.Output<string>;
    /**
     * The instance groups of the SageMaker HyperPod cluster. To delete an instance group, remove it from the array.
     */
    declare public readonly instanceGroups: pulumi.Output<outputs.sagemaker.ClusterInstanceGroup[] | undefined>;
    /**
     * Determines the scaling strategy for the SageMaker HyperPod cluster. When set to 'Continuous', enables continuous scaling which dynamically manages node provisioning. If the parameter is omitted, uses the standard scaling approach in previous release.
     */
    declare public readonly nodeProvisioningMode: pulumi.Output<enums.sagemaker.ClusterNodeProvisioningMode | undefined>;
    /**
     * If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
     */
    declare public readonly nodeRecovery: pulumi.Output<enums.sagemaker.ClusterNodeRecovery | undefined>;
    /**
     * The orchestrator type for the SageMaker HyperPod cluster. Currently, `'eks'` is the only available option.
     */
    declare public readonly orchestrator: pulumi.Output<outputs.sagemaker.ClusterOrchestrator | undefined>;
    declare public readonly restrictedInstanceGroups: pulumi.Output<outputs.sagemaker.ClusterRestrictedInstanceGroup[] | undefined>;
    /**
     * Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
     */
    declare public readonly vpcConfig: pulumi.Output<outputs.sagemaker.ClusterVpcConfig | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["autoScaling"] = args?.autoScaling;
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["clusterRole"] = args?.clusterRole;
            resourceInputs["instanceGroups"] = args?.instanceGroups;
            resourceInputs["nodeProvisioningMode"] = args?.nodeProvisioningMode;
            resourceInputs["nodeRecovery"] = args?.nodeRecovery;
            resourceInputs["orchestrator"] = args?.orchestrator;
            resourceInputs["restrictedInstanceGroups"] = args?.restrictedInstanceGroups;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcConfig"] = args?.vpcConfig;
            resourceInputs["clusterArn"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["failureMessage"] = undefined /*out*/;
        } else {
            resourceInputs["autoScaling"] = undefined /*out*/;
            resourceInputs["clusterArn"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["clusterRole"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["failureMessage"] = undefined /*out*/;
            resourceInputs["instanceGroups"] = undefined /*out*/;
            resourceInputs["nodeProvisioningMode"] = undefined /*out*/;
            resourceInputs["nodeRecovery"] = undefined /*out*/;
            resourceInputs["orchestrator"] = undefined /*out*/;
            resourceInputs["restrictedInstanceGroups"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clusterName", "instanceGroups[*].executionRole", "instanceGroups[*].instanceGroupName", "instanceGroups[*].instanceType", "instanceGroups[*].overrideVpcConfig", "instanceGroups[*].threadsPerCore", "orchestrator", "restrictedInstanceGroups[*].executionRole", "restrictedInstanceGroups[*].instanceGroupName", "restrictedInstanceGroups[*].instanceType", "restrictedInstanceGroups[*].overrideVpcConfig", "restrictedInstanceGroups[*].threadsPerCore", "vpcConfig"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    autoScaling?: pulumi.Input<inputs.sagemaker.ClusterAutoScalingConfigArgs>;
    /**
     * The name of the HyperPod Cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The cluster role for the autoscaler to assume.
     */
    clusterRole?: pulumi.Input<string>;
    /**
     * The instance groups of the SageMaker HyperPod cluster. To delete an instance group, remove it from the array.
     */
    instanceGroups?: pulumi.Input<pulumi.Input<inputs.sagemaker.ClusterInstanceGroupArgs>[]>;
    /**
     * Determines the scaling strategy for the SageMaker HyperPod cluster. When set to 'Continuous', enables continuous scaling which dynamically manages node provisioning. If the parameter is omitted, uses the standard scaling approach in previous release.
     */
    nodeProvisioningMode?: pulumi.Input<enums.sagemaker.ClusterNodeProvisioningMode>;
    /**
     * If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
     */
    nodeRecovery?: pulumi.Input<enums.sagemaker.ClusterNodeRecovery>;
    /**
     * The orchestrator type for the SageMaker HyperPod cluster. Currently, `'eks'` is the only available option.
     */
    orchestrator?: pulumi.Input<inputs.sagemaker.ClusterOrchestratorArgs>;
    restrictedInstanceGroups?: pulumi.Input<pulumi.Input<inputs.sagemaker.ClusterRestrictedInstanceGroupArgs>[]>;
    /**
     * Custom tags for managing the SageMaker HyperPod cluster as an AWS resource. You can add tags to your cluster in the same way you add them in other AWS services that support tagging.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
     */
    vpcConfig?: pulumi.Input<inputs.sagemaker.ClusterVpcConfigArgs>;
}
