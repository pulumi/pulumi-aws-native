// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SageMaker::InferenceExperiment
 */
export class InferenceExperiment extends pulumi.CustomResource {
    /**
     * Get an existing InferenceExperiment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InferenceExperiment {
        return new InferenceExperiment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sagemaker:InferenceExperiment';

    /**
     * Returns true if the given object is an instance of InferenceExperiment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InferenceExperiment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InferenceExperiment.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the inference experiment.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The timestamp at which you created the inference experiment.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly dataStorageConfig!: pulumi.Output<outputs.sagemaker.InferenceExperimentDataStorageConfig | undefined>;
    /**
     * The description of the inference experiment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The desired state of the experiment after starting or stopping operation.
     */
    public readonly desiredState!: pulumi.Output<enums.sagemaker.InferenceExperimentDesiredState | undefined>;
    public /*out*/ readonly endpointMetadata!: pulumi.Output<outputs.sagemaker.InferenceExperimentEndpointMetadata>;
    public readonly endpointName!: pulumi.Output<string>;
    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.
     */
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    /**
     * The timestamp at which you last modified the inference experiment.
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * An array of ModelVariantConfig objects. Each ModelVariantConfig object in the array describes the infrastructure configuration for the corresponding variant.
     */
    public readonly modelVariants!: pulumi.Output<outputs.sagemaker.InferenceExperimentModelVariantConfig[]>;
    /**
     * The name for the inference experiment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
     */
    public readonly roleArn!: pulumi.Output<string>;
    public readonly schedule!: pulumi.Output<outputs.sagemaker.InferenceExperimentSchedule | undefined>;
    public readonly shadowModeConfig!: pulumi.Output<outputs.sagemaker.InferenceExperimentShadowModeConfig | undefined>;
    /**
     * The status of the inference experiment.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.sagemaker.InferenceExperimentStatus>;
    /**
     * The error message or client-specified reason from the StopInferenceExperiment API, that explains the status of the inference experiment.
     */
    public readonly statusReason!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The type of the inference experiment that you want to run.
     */
    public readonly type!: pulumi.Output<enums.sagemaker.InferenceExperimentType>;

    /**
     * Create a InferenceExperiment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InferenceExperimentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.modelVariants === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelVariants'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dataStorageConfig"] = args ? args.dataStorageConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["modelVariants"] = args ? args.modelVariants : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["shadowModeConfig"] = args ? args.shadowModeConfig : undefined;
            resourceInputs["statusReason"] = args ? args.statusReason : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["endpointMetadata"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["dataStorageConfig"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["desiredState"] = undefined /*out*/;
            resourceInputs["endpointMetadata"] = undefined /*out*/;
            resourceInputs["endpointName"] = undefined /*out*/;
            resourceInputs["kmsKey"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["modelVariants"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["schedule"] = undefined /*out*/;
            resourceInputs["shadowModeConfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["endpointName", "kmsKey", "name", "roleArn", "type"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(InferenceExperiment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InferenceExperiment resource.
 */
export interface InferenceExperimentArgs {
    dataStorageConfig?: pulumi.Input<inputs.sagemaker.InferenceExperimentDataStorageConfigArgs>;
    /**
     * The description of the inference experiment.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired state of the experiment after starting or stopping operation.
     */
    desiredState?: pulumi.Input<enums.sagemaker.InferenceExperimentDesiredState>;
    endpointName: pulumi.Input<string>;
    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.
     */
    kmsKey?: pulumi.Input<string>;
    /**
     * An array of ModelVariantConfig objects. Each ModelVariantConfig object in the array describes the infrastructure configuration for the corresponding variant.
     */
    modelVariants: pulumi.Input<pulumi.Input<inputs.sagemaker.InferenceExperimentModelVariantConfigArgs>[]>;
    /**
     * The name for the inference experiment.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
     */
    roleArn: pulumi.Input<string>;
    schedule?: pulumi.Input<inputs.sagemaker.InferenceExperimentScheduleArgs>;
    shadowModeConfig?: pulumi.Input<inputs.sagemaker.InferenceExperimentShadowModeConfigArgs>;
    /**
     * The error message or client-specified reason from the StopInferenceExperiment API, that explains the status of the inference experiment.
     */
    statusReason?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The type of the inference experiment that you want to run.
     */
    type: pulumi.Input<enums.sagemaker.InferenceExperimentType>;
}
