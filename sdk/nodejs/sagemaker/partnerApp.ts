// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SageMaker::PartnerApp
 */
export class PartnerApp extends pulumi.CustomResource {
    /**
     * Get an existing PartnerApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PartnerApp {
        return new PartnerApp(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sagemaker:PartnerApp';

    /**
     * Returns true if the given object is an instance of PartnerApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerApp.__pulumiType;
    }

    /**
     * A collection of settings that specify the maintenance schedule for the PartnerApp.
     */
    public readonly applicationConfig!: pulumi.Output<outputs.sagemaker.PartnerAppConfig | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the created PartnerApp.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Auth type of PartnerApp.
     */
    public readonly authType!: pulumi.Output<enums.sagemaker.PartnerAppAuthType>;
    /**
     * The AppServerUrl based on app and account-info.
     */
    public /*out*/ readonly baseUrl!: pulumi.Output<string>;
    /**
     * The client token for the PartnerApp.
     */
    public readonly clientToken!: pulumi.Output<string | undefined>;
    /**
     * Enables IAM Session based Identity for PartnerApp.
     */
    public readonly enableIamSessionBasedIdentity!: pulumi.Output<boolean | undefined>;
    /**
     * The execution role for the user.
     */
    public readonly executionRoleArn!: pulumi.Output<string>;
    /**
     * The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * A collection of settings that specify the maintenance schedule for the PartnerApp.
     */
    public readonly maintenanceConfig!: pulumi.Output<outputs.sagemaker.PartnerAppMaintenanceConfig | undefined>;
    /**
     * A name for the PartnerApp.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of tags to apply to the PartnerApp.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The tier of the PartnerApp.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * The type of PartnerApp.
     */
    public readonly type!: pulumi.Output<enums.sagemaker.PartnerAppType>;

    /**
     * Create a PartnerApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnerAppArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.authType === undefined && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if (args?.executionRoleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if (args?.tier === undefined && !opts.urn) {
                throw new Error("Missing required property 'tier'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["applicationConfig"] = args?.applicationConfig;
            resourceInputs["authType"] = args?.authType;
            resourceInputs["clientToken"] = args?.clientToken;
            resourceInputs["enableIamSessionBasedIdentity"] = args?.enableIamSessionBasedIdentity;
            resourceInputs["executionRoleArn"] = args?.executionRoleArn;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["maintenanceConfig"] = args?.maintenanceConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["type"] = args?.type;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["baseUrl"] = undefined /*out*/;
        } else {
            resourceInputs["applicationConfig"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["authType"] = undefined /*out*/;
            resourceInputs["baseUrl"] = undefined /*out*/;
            resourceInputs["clientToken"] = undefined /*out*/;
            resourceInputs["enableIamSessionBasedIdentity"] = undefined /*out*/;
            resourceInputs["executionRoleArn"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["maintenanceConfig"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tier"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["authType", "executionRoleArn", "kmsKeyId", "name", "type"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(PartnerApp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PartnerApp resource.
 */
export interface PartnerAppArgs {
    /**
     * A collection of settings that specify the maintenance schedule for the PartnerApp.
     */
    applicationConfig?: pulumi.Input<inputs.sagemaker.PartnerAppConfigArgs>;
    /**
     * The Auth type of PartnerApp.
     */
    authType: pulumi.Input<enums.sagemaker.PartnerAppAuthType>;
    /**
     * The client token for the PartnerApp.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * Enables IAM Session based Identity for PartnerApp.
     */
    enableIamSessionBasedIdentity?: pulumi.Input<boolean>;
    /**
     * The execution role for the user.
     */
    executionRoleArn: pulumi.Input<string>;
    /**
     * The AWS KMS customer managed key used to encrypt the data associated with the PartnerApp.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * A collection of settings that specify the maintenance schedule for the PartnerApp.
     */
    maintenanceConfig?: pulumi.Input<inputs.sagemaker.PartnerAppMaintenanceConfigArgs>;
    /**
     * A name for the PartnerApp.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the PartnerApp.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The tier of the PartnerApp.
     */
    tier: pulumi.Input<string>;
    /**
     * The type of PartnerApp.
     */
    type: pulumi.Input<enums.sagemaker.PartnerAppType>;
}
