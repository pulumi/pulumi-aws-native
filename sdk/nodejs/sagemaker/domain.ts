// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SageMaker::Domain
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sagemaker:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     */
    public readonly appNetworkAccessType!: pulumi.Output<enums.sagemaker.DomainAppNetworkAccessType | undefined>;
    /**
     * The mode of authentication that members use to access the domain.
     */
    public readonly authMode!: pulumi.Output<enums.sagemaker.DomainAuthMode>;
    /**
     * The default user settings.
     */
    public readonly defaultUserSettings!: pulumi.Output<outputs.sagemaker.DomainUserSettings>;
    /**
     * The Amazon Resource Name (ARN) of the created domain.
     */
    public /*out*/ readonly domainArn!: pulumi.Output<string>;
    /**
     * The domain name.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * A name for the domain.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * The ID of the Amazon Elastic File System (EFS) managed by this Domain.
     */
    public /*out*/ readonly homeEfsFileSystemId!: pulumi.Output<string>;
    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by default.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * The SSO managed application instance ID.
     */
    public /*out*/ readonly singleSignOnManagedApplicationInstanceId!: pulumi.Output<string>;
    /**
     * The VPC subnets that Studio uses for communication.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * A list of tags to apply to the user profile.
     */
    public readonly tags!: pulumi.Output<outputs.sagemaker.DomainTag[] | undefined>;
    /**
     * The URL to the created domain.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultUserSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultUserSettings'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["appNetworkAccessType"] = args ? args.appNetworkAccessType : undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["defaultUserSettings"] = args ? args.defaultUserSettings : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["domainArn"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["homeEfsFileSystemId"] = undefined /*out*/;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        } else {
            resourceInputs["appNetworkAccessType"] = undefined /*out*/;
            resourceInputs["authMode"] = undefined /*out*/;
            resourceInputs["defaultUserSettings"] = undefined /*out*/;
            resourceInputs["domainArn"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["homeEfsFileSystemId"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
     */
    appNetworkAccessType?: pulumi.Input<enums.sagemaker.DomainAppNetworkAccessType>;
    /**
     * The mode of authentication that members use to access the domain.
     */
    authMode: pulumi.Input<enums.sagemaker.DomainAuthMode>;
    /**
     * The default user settings.
     */
    defaultUserSettings: pulumi.Input<inputs.sagemaker.DomainUserSettingsArgs>;
    /**
     * A name for the domain.
     */
    domainName?: pulumi.Input<string>;
    /**
     * SageMaker uses AWS KMS to encrypt the EFS volume attached to the domain with an AWS managed customer master key (CMK) by default.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The VPC subnets that Studio uses for communication.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags to apply to the user profile.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.sagemaker.DomainTagArgs>[]>;
    /**
     * The ID of the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
     */
    vpcId: pulumi.Input<string>;
}
