// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Bedrock::ApplicationInferenceProfile Resource Type
 */
export class ApplicationInferenceProfile extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationInferenceProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ApplicationInferenceProfile {
        return new ApplicationInferenceProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:bedrock:ApplicationInferenceProfile';

    /**
     * Returns true if the given object is an instance of ApplicationInferenceProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationInferenceProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationInferenceProfile.__pulumiType;
    }

    /**
     * Time Stamp
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the inference profile
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly inferenceProfileArn!: pulumi.Output<string>;
    public /*out*/ readonly inferenceProfileId!: pulumi.Output<string>;
    /**
     * Inference profile identifier. Supports both system-defined inference profile ids, and inference profile ARNs.
     */
    public /*out*/ readonly inferenceProfileIdentifier!: pulumi.Output<string>;
    public readonly inferenceProfileName!: pulumi.Output<string>;
    public readonly modelSource!: pulumi.Output<outputs.bedrock.ApplicationInferenceProfileInferenceProfileModelSourceProperties | undefined>;
    /**
     * List of model configuration
     */
    public /*out*/ readonly models!: pulumi.Output<outputs.bedrock.ApplicationInferenceProfileInferenceProfileModel[]>;
    public /*out*/ readonly status!: pulumi.Output<enums.bedrock.ApplicationInferenceProfileInferenceProfileStatus>;
    /**
     * List of Tags
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    public /*out*/ readonly type!: pulumi.Output<enums.bedrock.ApplicationInferenceProfileInferenceProfileType>;
    /**
     * Time Stamp
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ApplicationInferenceProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationInferenceProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inferenceProfileName"] = args ? args.inferenceProfileName : undefined;
            resourceInputs["modelSource"] = args ? args.modelSource : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["inferenceProfileArn"] = undefined /*out*/;
            resourceInputs["inferenceProfileId"] = undefined /*out*/;
            resourceInputs["inferenceProfileIdentifier"] = undefined /*out*/;
            resourceInputs["models"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["inferenceProfileArn"] = undefined /*out*/;
            resourceInputs["inferenceProfileId"] = undefined /*out*/;
            resourceInputs["inferenceProfileIdentifier"] = undefined /*out*/;
            resourceInputs["inferenceProfileName"] = undefined /*out*/;
            resourceInputs["modelSource"] = undefined /*out*/;
            resourceInputs["models"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["description", "inferenceProfileName", "modelSource"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ApplicationInferenceProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ApplicationInferenceProfile resource.
 */
export interface ApplicationInferenceProfileArgs {
    /**
     * Description of the inference profile
     */
    description?: pulumi.Input<string>;
    inferenceProfileName?: pulumi.Input<string>;
    modelSource?: pulumi.Input<inputs.bedrock.ApplicationInferenceProfileInferenceProfileModelSourcePropertiesArgs>;
    /**
     * List of Tags
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
