// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Bedrock::FlowAlias Resource Type
 */
export class FlowAlias extends pulumi.CustomResource {
    /**
     * Get an existing FlowAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FlowAlias {
        return new FlowAlias(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:bedrock:FlowAlias';

    /**
     * Returns true if the given object is an instance of FlowAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowAlias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowAlias.__pulumiType;
    }

    /**
     * Arn of the Flow Alias
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Id for a Flow Alias generated at the server side.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * Time Stamp.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the Resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Arn representation of the Flow
     */
    public readonly flowArn!: pulumi.Output<string>;
    /**
     * Identifier for a flow resource.
     */
    public /*out*/ readonly flowId!: pulumi.Output<string>;
    /**
     * Name for a resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Routing configuration for a Flow alias.
     */
    public readonly routingConfiguration!: pulumi.Output<outputs.bedrock.FlowAliasRoutingConfigurationListItem[]>;
    /**
     * Metadata that you can assign to a resource as key-value pairs. For more information, see the following resources:
     *
     * - [Tag naming limits and requirements](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-conventions)
     * - [Tagging best practices](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-best-practices)
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Time Stamp.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a FlowAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowAliasArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.flowArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowArn'");
            }
            if ((!args || args.routingConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingConfiguration'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flowArn"] = args ? args.flowArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routingConfiguration"] = args ? args.routingConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["flowId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["flowArn"] = undefined /*out*/;
            resourceInputs["flowId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["routingConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["flowArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FlowAlias.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a FlowAlias resource.
 */
export interface FlowAliasArgs {
    /**
     * Description of the Resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Arn representation of the Flow
     */
    flowArn: pulumi.Input<string>;
    /**
     * Name for a resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Routing configuration for a Flow alias.
     */
    routingConfiguration: pulumi.Input<pulumi.Input<inputs.bedrock.FlowAliasRoutingConfigurationListItemArgs>[]>;
    /**
     * Metadata that you can assign to a resource as key-value pairs. For more information, see the following resources:
     *
     * - [Tag naming limits and requirements](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-conventions)
     * - [Tagging best practices](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-best-practices)
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
