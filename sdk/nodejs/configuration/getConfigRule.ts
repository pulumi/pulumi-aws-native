// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Schema for AWS Config ConfigRule
 */
export function getConfigRule(args: GetConfigRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:configuration:getConfigRule", {
        "configRuleName": args.configRuleName,
    }, opts);
}

export interface GetConfigRuleArgs {
    /**
     * Name for the AWS Config rule
     */
    configRuleName: string;
}

export interface GetConfigRuleResult {
    /**
     * ARN generated for the AWS Config rule 
     */
    readonly arn?: string;
    /**
     * Compliance details of the Config rule
     */
    readonly compliance?: outputs.configuration.ComplianceProperties;
    /**
     * ID of the config rule
     */
    readonly configRuleId?: string;
    /**
     * Description provided for the AWS Config rule
     */
    readonly description?: string;
    /**
     * List of EvaluationModeConfiguration objects
     */
    readonly evaluationModes?: outputs.configuration.ConfigRuleEvaluationModeConfiguration[];
    /**
     * JSON string passed the Lambda function
     */
    readonly inputParameters?: string;
    /**
     * Maximum frequency at which the rule has to be evaluated
     */
    readonly maximumExecutionFrequency?: string;
    /**
     * Scope to constrain which resources can trigger the AWS Config rule
     */
    readonly scope?: outputs.configuration.ConfigRuleScope;
    /**
     * Source of events for the AWS Config rule
     */
    readonly source?: outputs.configuration.ConfigRuleSource;
}
/**
 * Schema for AWS Config ConfigRule
 */
export function getConfigRuleOutput(args: GetConfigRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigRuleResult> {
    return pulumi.output(args).apply((a: any) => getConfigRule(a, opts))
}

export interface GetConfigRuleOutputArgs {
    /**
     * Name for the AWS Config rule
     */
    configRuleName: pulumi.Input<string>;
}
