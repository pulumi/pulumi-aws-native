// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Config::StoredQuery
 */
export class StoredQuery extends pulumi.CustomResource {
    /**
     * Get an existing StoredQuery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StoredQuery {
        return new StoredQuery(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:configuration:StoredQuery';

    /**
     * Returns true if the given object is an instance of StoredQuery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StoredQuery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StoredQuery.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.
     */
    public /*out*/ readonly queryArn!: pulumi.Output<string>;
    /**
     * A unique description for the query.
     */
    public readonly queryDescription!: pulumi.Output<string | undefined>;
    /**
     * The expression of the query. For example, `SELECT resourceId, resourceType, supplementaryConfiguration.BucketVersioningConfiguration.status WHERE resourceType = 'AWS::S3::Bucket' AND supplementaryConfiguration.BucketVersioningConfiguration.status = 'Off'.`
     */
    public readonly queryExpression!: pulumi.Output<string>;
    /**
     * The ID of the query.
     */
    public /*out*/ readonly queryId!: pulumi.Output<string>;
    /**
     * The name of the query.
     */
    public readonly queryName!: pulumi.Output<string>;
    /**
     * The tags for the stored query.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a StoredQuery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StoredQueryArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.queryExpression === undefined && !opts.urn) {
                throw new Error("Missing required property 'queryExpression'");
            }
            resourceInputs["queryDescription"] = args?.queryDescription;
            resourceInputs["queryExpression"] = args?.queryExpression;
            resourceInputs["queryName"] = args?.queryName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["queryArn"] = undefined /*out*/;
            resourceInputs["queryId"] = undefined /*out*/;
        } else {
            resourceInputs["queryArn"] = undefined /*out*/;
            resourceInputs["queryDescription"] = undefined /*out*/;
            resourceInputs["queryExpression"] = undefined /*out*/;
            resourceInputs["queryId"] = undefined /*out*/;
            resourceInputs["queryName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["queryName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(StoredQuery.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a StoredQuery resource.
 */
export interface StoredQueryArgs {
    /**
     * A unique description for the query.
     */
    queryDescription?: pulumi.Input<string>;
    /**
     * The expression of the query. For example, `SELECT resourceId, resourceType, supplementaryConfiguration.BucketVersioningConfiguration.status WHERE resourceType = 'AWS::S3::Bucket' AND supplementaryConfiguration.BucketVersioningConfiguration.status = 'Off'.`
     */
    queryExpression: pulumi.Input<string>;
    /**
     * The name of the query.
     */
    queryName?: pulumi.Input<string>;
    /**
     * The tags for the stored query.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
