// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Config::ConfigRule
 *
 * @deprecated ConfigRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class ConfigRule extends pulumi.CustomResource {
    /**
     * Get an existing ConfigRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfigRule {
        pulumi.log.warn("ConfigRule is deprecated: ConfigRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new ConfigRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:configuration:ConfigRule';

    /**
     * Returns true if the given object is an instance of ConfigRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly complianceType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly configRuleId!: pulumi.Output<string>;
    public readonly configRuleName!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly inputParameters!: pulumi.Output<any | undefined>;
    public readonly maximumExecutionFrequency!: pulumi.Output<string | undefined>;
    public readonly scope!: pulumi.Output<outputs.configuration.ConfigRuleScope | undefined>;
    public readonly source!: pulumi.Output<outputs.configuration.ConfigRuleSource>;

    /**
     * Create a ConfigRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated ConfigRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: ConfigRuleArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ConfigRule is deprecated: ConfigRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            inputs["complianceType"] = args ? args.complianceType : undefined;
            inputs["configRuleName"] = args ? args.configRuleName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["inputParameters"] = args ? args.inputParameters : undefined;
            inputs["maximumExecutionFrequency"] = args ? args.maximumExecutionFrequency : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["configRuleId"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["complianceType"] = undefined /*out*/;
            inputs["configRuleId"] = undefined /*out*/;
            inputs["configRuleName"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["inputParameters"] = undefined /*out*/;
            inputs["maximumExecutionFrequency"] = undefined /*out*/;
            inputs["scope"] = undefined /*out*/;
            inputs["source"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ConfigRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfigRule resource.
 */
export interface ConfigRuleArgs {
    complianceType?: pulumi.Input<string>;
    configRuleName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    inputParameters?: any;
    maximumExecutionFrequency?: pulumi.Input<string>;
    scope?: pulumi.Input<inputs.configuration.ConfigRuleScopeArgs>;
    source: pulumi.Input<inputs.configuration.ConfigRuleSourceArgs>;
}
