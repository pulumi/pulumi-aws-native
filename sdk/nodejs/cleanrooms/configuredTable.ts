// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Represents a table that can be associated with collaborations
 */
export class ConfiguredTable extends pulumi.CustomResource {
    /**
     * Get an existing ConfiguredTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfiguredTable {
        return new ConfiguredTable(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cleanrooms:ConfiguredTable';

    /**
     * Returns true if the given object is an instance of ConfiguredTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfiguredTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfiguredTable.__pulumiType;
    }

    /**
     * The columns within the underlying AWS Glue table that can be utilized within collaborations.
     */
    public readonly allowedColumns!: pulumi.Output<string[]>;
    /**
     * The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
     */
    public readonly analysisMethod!: pulumi.Output<enums.cleanrooms.ConfiguredTableAnalysisMethod>;
    /**
     * The analysis rule that was created for the configured table.
     */
    public readonly analysisRules!: pulumi.Output<outputs.cleanrooms.ConfiguredTableAnalysisRule[] | undefined>;
    /**
     * Returns the Amazon Resource Name (ARN) of the specified configured table.
     *
     * Example: `arn:aws:cleanrooms:us-east-1:111122223333:configuredtable/a1b2c3d4-5678-90ab-cdef-EXAMPLE11111`
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Returns the unique identifier of the specified configured table.
     *
     * Example: `a1b2c3d4-5678-90ab-cdef-EXAMPLE33333`
     */
    public /*out*/ readonly configuredTableIdentifier!: pulumi.Output<string>;
    /**
     * A description for the configured table.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A name for the configured table.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The AWS Glue table that this configured table represents.
     */
    public readonly tableReference!: pulumi.Output<outputs.cleanrooms.ConfiguredTableTableReference>;
    /**
     * An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a ConfiguredTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfiguredTableArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.allowedColumns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedColumns'");
            }
            if ((!args || args.analysisMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analysisMethod'");
            }
            if ((!args || args.tableReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableReference'");
            }
            resourceInputs["allowedColumns"] = args ? args.allowedColumns : undefined;
            resourceInputs["analysisMethod"] = args ? args.analysisMethod : undefined;
            resourceInputs["analysisRules"] = args ? args.analysisRules : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tableReference"] = args ? args.tableReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["configuredTableIdentifier"] = undefined /*out*/;
        } else {
            resourceInputs["allowedColumns"] = undefined /*out*/;
            resourceInputs["analysisMethod"] = undefined /*out*/;
            resourceInputs["analysisRules"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["configuredTableIdentifier"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tableReference"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["allowedColumns[*]", "analysisMethod", "tableReference"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConfiguredTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfiguredTable resource.
 */
export interface ConfiguredTableArgs {
    /**
     * The columns within the underlying AWS Glue table that can be utilized within collaborations.
     */
    allowedColumns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The analysis method for the configured table. The only valid value is currently `DIRECT_QUERY`.
     */
    analysisMethod: pulumi.Input<enums.cleanrooms.ConfiguredTableAnalysisMethod>;
    /**
     * The analysis rule that was created for the configured table.
     */
    analysisRules?: pulumi.Input<pulumi.Input<inputs.cleanrooms.ConfiguredTableAnalysisRuleArgs>[]>;
    /**
     * A description for the configured table.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the configured table.
     */
    name?: pulumi.Input<string>;
    /**
     * The AWS Glue table that this configured table represents.
     */
    tableReference: pulumi.Input<inputs.cleanrooms.ConfiguredTableTableReferenceArgs>;
    /**
     * An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
