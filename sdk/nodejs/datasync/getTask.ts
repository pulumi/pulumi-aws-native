// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::DataSync::Task.
 */
export function getTask(args: GetTaskArgs, opts?: pulumi.InvokeOptions): Promise<GetTaskResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:datasync:getTask", {
        "taskArn": args.taskArn,
    }, opts);
}

export interface GetTaskArgs {
    /**
     * The ARN of the task.
     */
    taskArn: string;
}

export interface GetTaskResult {
    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     */
    readonly cloudWatchLogGroupArn?: string;
    /**
     * The ARNs of the destination elastic network interfaces (ENIs) that were created for your subnet.
     */
    readonly destinationNetworkInterfaceArns?: string[];
    /**
     * Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
     */
    readonly excludes?: outputs.datasync.TaskFilterRule[];
    /**
     * Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
     */
    readonly includes?: outputs.datasync.TaskFilterRule[];
    /**
     * Configures a manifest, which is a list of files or objects that you want AWS DataSync to transfer. For more information and configuration examples, see [Specifying what DataSync transfers by using a manifest](https://docs.aws.amazon.com/datasync/latest/userguide/transferring-with-manifest.html) .
     */
    readonly manifestConfig?: outputs.datasync.TaskManifestConfig;
    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     */
    readonly name?: string;
    /**
     * Represents the options that are available to control the behavior of a [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) operation. This behavior includes preserving metadata, such as user ID (UID), group ID (GID), and file permissions; overwriting files in the destination; data integrity verification; and so on.
     *
     * A task has a set of default options associated with it. If you don't specify an option in [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) , the default value is used. You can override the default options on each task execution by specifying an overriding `Options` value to [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html) .
     */
    readonly options?: outputs.datasync.TaskOptions;
    /**
     * Configures your AWS DataSync task to run on a [schedule](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html) (at a minimum interval of 1 hour).
     */
    readonly schedule?: outputs.datasync.TaskSchedule;
    /**
     * The ARNs of the source ENIs that were created for your subnet.
     */
    readonly sourceNetworkInterfaceArns?: string[];
    /**
     * The status of the task that was described.
     */
    readonly status?: enums.datasync.TaskStatus;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.Tag[];
    /**
     * The ARN of the task.
     */
    readonly taskArn?: string;
    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your AWS DataSync transfer.
     *
     * For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html) .
     */
    readonly taskReportConfig?: outputs.datasync.TaskReportConfig;
}
/**
 * Resource schema for AWS::DataSync::Task.
 */
export function getTaskOutput(args: GetTaskOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTaskResult> {
    return pulumi.output(args).apply((a: any) => getTask(a, opts))
}

export interface GetTaskOutputArgs {
    /**
     * The ARN of the task.
     */
    taskArn: pulumi.Input<string>;
}
