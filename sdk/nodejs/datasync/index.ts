// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AgentArgs } from "./agent";
export type Agent = import("./agent").Agent;
export const Agent: typeof import("./agent").Agent = null as any;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));

export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetLocationEfsArgs, GetLocationEfsResult, GetLocationEfsOutputArgs } from "./getLocationEfs";
export const getLocationEfs: typeof import("./getLocationEfs").getLocationEfs = null as any;
export const getLocationEfsOutput: typeof import("./getLocationEfs").getLocationEfsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationEfs","getLocationEfsOutput"], () => require("./getLocationEfs"));

export { GetLocationFSxLustreArgs, GetLocationFSxLustreResult, GetLocationFSxLustreOutputArgs } from "./getLocationFSxLustre";
export const getLocationFSxLustre: typeof import("./getLocationFSxLustre").getLocationFSxLustre = null as any;
export const getLocationFSxLustreOutput: typeof import("./getLocationFSxLustre").getLocationFSxLustreOutput = null as any;
utilities.lazyLoad(exports, ["getLocationFSxLustre","getLocationFSxLustreOutput"], () => require("./getLocationFSxLustre"));

export { GetLocationFSxOntapArgs, GetLocationFSxOntapResult, GetLocationFSxOntapOutputArgs } from "./getLocationFSxOntap";
export const getLocationFSxOntap: typeof import("./getLocationFSxOntap").getLocationFSxOntap = null as any;
export const getLocationFSxOntapOutput: typeof import("./getLocationFSxOntap").getLocationFSxOntapOutput = null as any;
utilities.lazyLoad(exports, ["getLocationFSxOntap","getLocationFSxOntapOutput"], () => require("./getLocationFSxOntap"));

export { GetLocationFSxOpenZfsArgs, GetLocationFSxOpenZfsResult, GetLocationFSxOpenZfsOutputArgs } from "./getLocationFSxOpenZfs";
export const getLocationFSxOpenZfs: typeof import("./getLocationFSxOpenZfs").getLocationFSxOpenZfs = null as any;
export const getLocationFSxOpenZfsOutput: typeof import("./getLocationFSxOpenZfs").getLocationFSxOpenZfsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationFSxOpenZfs","getLocationFSxOpenZfsOutput"], () => require("./getLocationFSxOpenZfs"));

export { GetLocationFSxWindowsArgs, GetLocationFSxWindowsResult, GetLocationFSxWindowsOutputArgs } from "./getLocationFSxWindows";
export const getLocationFSxWindows: typeof import("./getLocationFSxWindows").getLocationFSxWindows = null as any;
export const getLocationFSxWindowsOutput: typeof import("./getLocationFSxWindows").getLocationFSxWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationFSxWindows","getLocationFSxWindowsOutput"], () => require("./getLocationFSxWindows"));

export { GetLocationHdfsArgs, GetLocationHdfsResult, GetLocationHdfsOutputArgs } from "./getLocationHdfs";
export const getLocationHdfs: typeof import("./getLocationHdfs").getLocationHdfs = null as any;
export const getLocationHdfsOutput: typeof import("./getLocationHdfs").getLocationHdfsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationHdfs","getLocationHdfsOutput"], () => require("./getLocationHdfs"));

export { GetLocationNfsArgs, GetLocationNfsResult, GetLocationNfsOutputArgs } from "./getLocationNfs";
export const getLocationNfs: typeof import("./getLocationNfs").getLocationNfs = null as any;
export const getLocationNfsOutput: typeof import("./getLocationNfs").getLocationNfsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationNfs","getLocationNfsOutput"], () => require("./getLocationNfs"));

export { GetLocationObjectStorageArgs, GetLocationObjectStorageResult, GetLocationObjectStorageOutputArgs } from "./getLocationObjectStorage";
export const getLocationObjectStorage: typeof import("./getLocationObjectStorage").getLocationObjectStorage = null as any;
export const getLocationObjectStorageOutput: typeof import("./getLocationObjectStorage").getLocationObjectStorageOutput = null as any;
utilities.lazyLoad(exports, ["getLocationObjectStorage","getLocationObjectStorageOutput"], () => require("./getLocationObjectStorage"));

export { GetLocationS3Args, GetLocationS3Result, GetLocationS3OutputArgs } from "./getLocationS3";
export const getLocationS3: typeof import("./getLocationS3").getLocationS3 = null as any;
export const getLocationS3Output: typeof import("./getLocationS3").getLocationS3Output = null as any;
utilities.lazyLoad(exports, ["getLocationS3","getLocationS3Output"], () => require("./getLocationS3"));

export { GetLocationSmbArgs, GetLocationSmbResult, GetLocationSmbOutputArgs } from "./getLocationSmb";
export const getLocationSmb: typeof import("./getLocationSmb").getLocationSmb = null as any;
export const getLocationSmbOutput: typeof import("./getLocationSmb").getLocationSmbOutput = null as any;
utilities.lazyLoad(exports, ["getLocationSmb","getLocationSmbOutput"], () => require("./getLocationSmb"));

export { GetStorageSystemArgs, GetStorageSystemResult, GetStorageSystemOutputArgs } from "./getStorageSystem";
export const getStorageSystem: typeof import("./getStorageSystem").getStorageSystem = null as any;
export const getStorageSystemOutput: typeof import("./getStorageSystem").getStorageSystemOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSystem","getStorageSystemOutput"], () => require("./getStorageSystem"));

export { GetTaskArgs, GetTaskResult, GetTaskOutputArgs } from "./getTask";
export const getTask: typeof import("./getTask").getTask = null as any;
export const getTaskOutput: typeof import("./getTask").getTaskOutput = null as any;
utilities.lazyLoad(exports, ["getTask","getTaskOutput"], () => require("./getTask"));

export { LocationEfsArgs } from "./locationEfs";
export type LocationEfs = import("./locationEfs").LocationEfs;
export const LocationEfs: typeof import("./locationEfs").LocationEfs = null as any;
utilities.lazyLoad(exports, ["LocationEfs"], () => require("./locationEfs"));

export { LocationFSxLustreArgs } from "./locationFSxLustre";
export type LocationFSxLustre = import("./locationFSxLustre").LocationFSxLustre;
export const LocationFSxLustre: typeof import("./locationFSxLustre").LocationFSxLustre = null as any;
utilities.lazyLoad(exports, ["LocationFSxLustre"], () => require("./locationFSxLustre"));

export { LocationFSxOntapArgs } from "./locationFSxOntap";
export type LocationFSxOntap = import("./locationFSxOntap").LocationFSxOntap;
export const LocationFSxOntap: typeof import("./locationFSxOntap").LocationFSxOntap = null as any;
utilities.lazyLoad(exports, ["LocationFSxOntap"], () => require("./locationFSxOntap"));

export { LocationFSxOpenZfsArgs } from "./locationFSxOpenZfs";
export type LocationFSxOpenZfs = import("./locationFSxOpenZfs").LocationFSxOpenZfs;
export const LocationFSxOpenZfs: typeof import("./locationFSxOpenZfs").LocationFSxOpenZfs = null as any;
utilities.lazyLoad(exports, ["LocationFSxOpenZfs"], () => require("./locationFSxOpenZfs"));

export { LocationFSxWindowsArgs } from "./locationFSxWindows";
export type LocationFSxWindows = import("./locationFSxWindows").LocationFSxWindows;
export const LocationFSxWindows: typeof import("./locationFSxWindows").LocationFSxWindows = null as any;
utilities.lazyLoad(exports, ["LocationFSxWindows"], () => require("./locationFSxWindows"));

export { LocationHdfsArgs } from "./locationHdfs";
export type LocationHdfs = import("./locationHdfs").LocationHdfs;
export const LocationHdfs: typeof import("./locationHdfs").LocationHdfs = null as any;
utilities.lazyLoad(exports, ["LocationHdfs"], () => require("./locationHdfs"));

export { LocationNfsArgs } from "./locationNfs";
export type LocationNfs = import("./locationNfs").LocationNfs;
export const LocationNfs: typeof import("./locationNfs").LocationNfs = null as any;
utilities.lazyLoad(exports, ["LocationNfs"], () => require("./locationNfs"));

export { LocationObjectStorageArgs } from "./locationObjectStorage";
export type LocationObjectStorage = import("./locationObjectStorage").LocationObjectStorage;
export const LocationObjectStorage: typeof import("./locationObjectStorage").LocationObjectStorage = null as any;
utilities.lazyLoad(exports, ["LocationObjectStorage"], () => require("./locationObjectStorage"));

export { LocationS3Args } from "./locationS3";
export type LocationS3 = import("./locationS3").LocationS3;
export const LocationS3: typeof import("./locationS3").LocationS3 = null as any;
utilities.lazyLoad(exports, ["LocationS3"], () => require("./locationS3"));

export { LocationSmbArgs } from "./locationSmb";
export type LocationSmb = import("./locationSmb").LocationSmb;
export const LocationSmb: typeof import("./locationSmb").LocationSmb = null as any;
utilities.lazyLoad(exports, ["LocationSmb"], () => require("./locationSmb"));

export { StorageSystemArgs } from "./storageSystem";
export type StorageSystem = import("./storageSystem").StorageSystem;
export const StorageSystem: typeof import("./storageSystem").StorageSystem = null as any;
utilities.lazyLoad(exports, ["StorageSystem"], () => require("./storageSystem"));

export { TaskArgs } from "./task";
export type Task = import("./task").Task;
export const Task: typeof import("./task").Task = null as any;
utilities.lazyLoad(exports, ["Task"], () => require("./task"));


// Export enums:
export * from "../types/enums/datasync";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:datasync:Agent":
                return new Agent(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationEfs":
                return new LocationEfs(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationFSxLustre":
                return new LocationFSxLustre(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationFSxOntap":
                return new LocationFSxOntap(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationFSxOpenZfs":
                return new LocationFSxOpenZfs(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationFSxWindows":
                return new LocationFSxWindows(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationHdfs":
                return new LocationHdfs(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationNfs":
                return new LocationNfs(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationObjectStorage":
                return new LocationObjectStorage(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationS3":
                return new LocationS3(name, <any>undefined, { urn })
            case "aws-native:datasync:LocationSmb":
                return new LocationSmb(name, <any>undefined, { urn })
            case "aws-native:datasync:StorageSystem":
                return new StorageSystem(name, <any>undefined, { urn })
            case "aws-native:datasync:Task":
                return new Task(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "datasync", _module)
