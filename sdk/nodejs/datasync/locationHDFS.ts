// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::DataSync::LocationHDFS.
 */
export class LocationHDFS extends pulumi.CustomResource {
    /**
     * Get an existing LocationHDFS resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocationHDFS {
        return new LocationHDFS(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datasync:LocationHDFS';

    /**
     * Returns true if the given object is an instance of LocationHDFS.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationHDFS {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationHDFS.__pulumiType;
    }

    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     */
    public readonly agentArns!: pulumi.Output<string[]>;
    /**
     * The authentication mode used to determine identity of user.
     */
    public readonly authenticationType!: pulumi.Output<enums.datasync.LocationHDFSAuthenticationType>;
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     */
    public readonly blockSize!: pulumi.Output<number | undefined>;
    /**
     * The Base64 string representation of the Keytab file.
     */
    public readonly kerberosKeytab!: pulumi.Output<string | undefined>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
     */
    public readonly kerberosKrb5Conf!: pulumi.Output<string | undefined>;
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     */
    public readonly kerberosPrincipal!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     */
    public readonly kmsKeyProviderUri!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the HDFS location.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the HDFS location that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    /**
     * An array of Name Node(s) of the HDFS location.
     */
    public readonly nameNodes!: pulumi.Output<outputs.datasync.LocationHDFSNameNode[]>;
    public readonly qopConfiguration!: pulumi.Output<outputs.datasync.LocationHDFSQopConfiguration | undefined>;
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     */
    public readonly replicationFactor!: pulumi.Output<number | undefined>;
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     */
    public readonly simpleUser!: pulumi.Output<string | undefined>;
    /**
     * The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
     */
    public readonly subdirectory!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.datasync.LocationHDFSTag[] | undefined>;

    /**
     * Create a LocationHDFS resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationHDFSArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if ((!args || args.nameNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nameNodes'");
            }
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["kerberosKeytab"] = args ? args.kerberosKeytab : undefined;
            resourceInputs["kerberosKrb5Conf"] = args ? args.kerberosKrb5Conf : undefined;
            resourceInputs["kerberosPrincipal"] = args ? args.kerberosPrincipal : undefined;
            resourceInputs["kmsKeyProviderUri"] = args ? args.kmsKeyProviderUri : undefined;
            resourceInputs["nameNodes"] = args ? args.nameNodes : undefined;
            resourceInputs["qopConfiguration"] = args ? args.qopConfiguration : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["simpleUser"] = args ? args.simpleUser : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        } else {
            resourceInputs["agentArns"] = undefined /*out*/;
            resourceInputs["authenticationType"] = undefined /*out*/;
            resourceInputs["blockSize"] = undefined /*out*/;
            resourceInputs["kerberosKeytab"] = undefined /*out*/;
            resourceInputs["kerberosKrb5Conf"] = undefined /*out*/;
            resourceInputs["kerberosPrincipal"] = undefined /*out*/;
            resourceInputs["kmsKeyProviderUri"] = undefined /*out*/;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
            resourceInputs["nameNodes"] = undefined /*out*/;
            resourceInputs["qopConfiguration"] = undefined /*out*/;
            resourceInputs["replicationFactor"] = undefined /*out*/;
            resourceInputs["simpleUser"] = undefined /*out*/;
            resourceInputs["subdirectory"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationHDFS.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LocationHDFS resource.
 */
export interface LocationHDFSArgs {
    /**
     * ARN(s) of the agent(s) to use for an HDFS location.
     */
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication mode used to determine identity of user.
     */
    authenticationType: pulumi.Input<enums.datasync.LocationHDFSAuthenticationType>;
    /**
     * Size of chunks (blocks) in bytes that the data is divided into when stored in the HDFS cluster.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * The Base64 string representation of the Keytab file.
     */
    kerberosKeytab?: pulumi.Input<string>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket.
     */
    kerberosKrb5Conf?: pulumi.Input<string>;
    /**
     * The unique identity, or principal, to which Kerberos can assign tickets.
     */
    kerberosPrincipal?: pulumi.Input<string>;
    /**
     * The identifier for the Key Management Server where the encryption keys that encrypt data inside HDFS clusters are stored.
     */
    kmsKeyProviderUri?: pulumi.Input<string>;
    /**
     * An array of Name Node(s) of the HDFS location.
     */
    nameNodes: pulumi.Input<pulumi.Input<inputs.datasync.LocationHDFSNameNodeArgs>[]>;
    qopConfiguration?: pulumi.Input<inputs.datasync.LocationHDFSQopConfigurationArgs>;
    /**
     * Number of copies of each block that exists inside the HDFS cluster.
     */
    replicationFactor?: pulumi.Input<number>;
    /**
     * The user name that has read and write permissions on the specified HDFS cluster.
     */
    simpleUser?: pulumi.Input<string>;
    /**
     * The subdirectory in HDFS that is used to read data from the HDFS source location or write data to the HDFS destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.datasync.LocationHDFSTagArgs>[]>;
}
