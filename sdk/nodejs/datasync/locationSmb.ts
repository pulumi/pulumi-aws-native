// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::DataSync::LocationSMB.
 */
export class LocationSmb extends pulumi.CustomResource {
    /**
     * Get an existing LocationSmb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocationSmb {
        return new LocationSmb(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datasync:LocationSmb';

    /**
     * Returns true if the given object is an instance of LocationSmb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationSmb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationSmb.__pulumiType;
    }

    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     */
    public readonly agentArns!: pulumi.Output<string[]>;
    /**
     * The authentication mode used to determine identity of user.
     */
    public readonly authenticationType!: pulumi.Output<enums.datasync.LocationSmbAuthenticationType | undefined>;
    public readonly cmkSecretConfig!: pulumi.Output<outputs.datasync.LocationSmbCmkSecretConfig | undefined>;
    public readonly customSecretConfig!: pulumi.Output<outputs.datasync.LocationSmbCustomSecretConfig | undefined>;
    /**
     * Specifies the IPv4 addresses for the DNS servers that your SMB file server belongs to. This parameter applies only if AuthenticationType is set to KERBEROS. If you have multiple domains in your environment, configuring this parameter makes sure that DataSync connects to the right SMB file server.
     */
    public readonly dnsIpAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Windows domain that the SMB server belongs to.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * The Base64 string representation of the Keytab file. Specifies your Kerberos key table (keytab) file, which includes mappings between your service principal name (SPN) and encryption keys. To avoid task execution errors, make sure that the SPN in the keytab file matches exactly what you specify for KerberosPrincipal and in your krb5.conf file.
     */
    public readonly kerberosKeytab!: pulumi.Output<string | undefined>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket. Specifies a Kerberos configuration file (krb5.conf) that defines your Kerberos realm configuration. To avoid task execution errors, make sure that the service principal name (SPN) in the krb5.conf file matches exactly what you specify for KerberosPrincipal and in your keytab file.
     */
    public readonly kerberosKrb5Conf!: pulumi.Output<string | undefined>;
    /**
     * Specifies a service principal name (SPN), which is an identity in your Kerberos realm that has permission to access the files, folders, and file metadata in your SMB file server. SPNs are case sensitive and must include a prepended cifs/. For example, an SPN might look like cifs/kerberosuser@EXAMPLE.COM. Your task execution will fail if the SPN that you provide for this parameter doesn't match exactly what's in your keytab or krb5.conf files.
     */
    public readonly kerberosPrincipal!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the SMB location that is created.
     */
    public /*out*/ readonly locationArn!: pulumi.Output<string>;
    /**
     * The URL of the SMB location that was described.
     */
    public /*out*/ readonly locationUri!: pulumi.Output<string>;
    public /*out*/ readonly managedSecretConfig!: pulumi.Output<outputs.datasync.LocationSmbManagedSecretConfig>;
    /**
     * Specifies the version of the SMB protocol that DataSync uses to access your SMB file server.
     */
    public readonly mountOptions!: pulumi.Output<outputs.datasync.LocationSmbMountOptions | undefined>;
    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     */
    public readonly serverHostname!: pulumi.Output<string | undefined>;
    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination
     */
    public readonly subdirectory!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a LocationSmb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationSmbArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["cmkSecretConfig"] = args ? args.cmkSecretConfig : undefined;
            resourceInputs["customSecretConfig"] = args ? args.customSecretConfig : undefined;
            resourceInputs["dnsIpAddresses"] = args ? args.dnsIpAddresses : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["kerberosKeytab"] = args ? args.kerberosKeytab : undefined;
            resourceInputs["kerberosKrb5Conf"] = args ? args.kerberosKrb5Conf : undefined;
            resourceInputs["kerberosPrincipal"] = args ? args.kerberosPrincipal : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["serverHostname"] = args ? args.serverHostname : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
            resourceInputs["managedSecretConfig"] = undefined /*out*/;
        } else {
            resourceInputs["agentArns"] = undefined /*out*/;
            resourceInputs["authenticationType"] = undefined /*out*/;
            resourceInputs["cmkSecretConfig"] = undefined /*out*/;
            resourceInputs["customSecretConfig"] = undefined /*out*/;
            resourceInputs["dnsIpAddresses"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["kerberosKeytab"] = undefined /*out*/;
            resourceInputs["kerberosKrb5Conf"] = undefined /*out*/;
            resourceInputs["kerberosPrincipal"] = undefined /*out*/;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
            resourceInputs["managedSecretConfig"] = undefined /*out*/;
            resourceInputs["mountOptions"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["serverHostname"] = undefined /*out*/;
            resourceInputs["subdirectory"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationSmb.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LocationSmb resource.
 */
export interface LocationSmbArgs {
    /**
     * The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
     */
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authentication mode used to determine identity of user.
     */
    authenticationType?: pulumi.Input<enums.datasync.LocationSmbAuthenticationType>;
    cmkSecretConfig?: pulumi.Input<inputs.datasync.LocationSmbCmkSecretConfigArgs>;
    customSecretConfig?: pulumi.Input<inputs.datasync.LocationSmbCustomSecretConfigArgs>;
    /**
     * Specifies the IPv4 addresses for the DNS servers that your SMB file server belongs to. This parameter applies only if AuthenticationType is set to KERBEROS. If you have multiple domains in your environment, configuring this parameter makes sure that DataSync connects to the right SMB file server.
     */
    dnsIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Windows domain that the SMB server belongs to.
     */
    domain?: pulumi.Input<string>;
    /**
     * The Base64 string representation of the Keytab file. Specifies your Kerberos key table (keytab) file, which includes mappings between your service principal name (SPN) and encryption keys. To avoid task execution errors, make sure that the SPN in the keytab file matches exactly what you specify for KerberosPrincipal and in your krb5.conf file.
     */
    kerberosKeytab?: pulumi.Input<string>;
    /**
     * The string representation of the Krb5Conf file, or the presigned URL to access the Krb5.conf file within an S3 bucket. Specifies a Kerberos configuration file (krb5.conf) that defines your Kerberos realm configuration. To avoid task execution errors, make sure that the service principal name (SPN) in the krb5.conf file matches exactly what you specify for KerberosPrincipal and in your keytab file.
     */
    kerberosKrb5Conf?: pulumi.Input<string>;
    /**
     * Specifies a service principal name (SPN), which is an identity in your Kerberos realm that has permission to access the files, folders, and file metadata in your SMB file server. SPNs are case sensitive and must include a prepended cifs/. For example, an SPN might look like cifs/kerberosuser@EXAMPLE.COM. Your task execution will fail if the SPN that you provide for this parameter doesn't match exactly what's in your keytab or krb5.conf files.
     */
    kerberosPrincipal?: pulumi.Input<string>;
    /**
     * Specifies the version of the SMB protocol that DataSync uses to access your SMB file server.
     */
    mountOptions?: pulumi.Input<inputs.datasync.LocationSmbMountOptionsArgs>;
    /**
     * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
     */
    password?: pulumi.Input<string>;
    /**
     * The name of the SMB server. This value is the IP address or Domain Name Service (DNS) name of the SMB server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The user who can mount the share, has the permissions to access files and folders in the SMB share.
     */
    user?: pulumi.Input<string>;
}
