// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::DataSync::LocationNFS
 */
export class LocationNfs extends pulumi.CustomResource {
    /**
     * Get an existing LocationNfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LocationNfs {
        return new LocationNfs(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datasync:LocationNfs';

    /**
     * Returns true if the given object is an instance of LocationNfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationNfs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationNfs.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the NFS location.
     */
    declare public /*out*/ readonly locationArn: pulumi.Output<string>;
    /**
     * The URL of the NFS location that was described.
     */
    declare public /*out*/ readonly locationUri: pulumi.Output<string>;
    /**
     * Specifies the options that DataSync can use to mount your NFS file server.
     */
    declare public readonly mountOptions: pulumi.Output<outputs.datasync.LocationNfsMountOptions | undefined>;
    /**
     * Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect to your NFS file server.
     *
     * You can specify more than one agent. For more information, see [Using multiple DataSync agents](https://docs.aws.amazon.com/datasync/latest/userguide/do-i-need-datasync-agent.html#multiple-agents) .
     */
    declare public readonly onPremConfig: pulumi.Output<outputs.datasync.LocationNfsOnPremConfig>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    declare public readonly serverHostname: pulumi.Output<string | undefined>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
     */
    declare public readonly subdirectory: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a LocationNfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationNfsArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.onPremConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'onPremConfig'");
            }
            resourceInputs["mountOptions"] = args?.mountOptions;
            resourceInputs["onPremConfig"] = args?.onPremConfig;
            resourceInputs["serverHostname"] = args?.serverHostname;
            resourceInputs["subdirectory"] = args?.subdirectory;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
        } else {
            resourceInputs["locationArn"] = undefined /*out*/;
            resourceInputs["locationUri"] = undefined /*out*/;
            resourceInputs["mountOptions"] = undefined /*out*/;
            resourceInputs["onPremConfig"] = undefined /*out*/;
            resourceInputs["serverHostname"] = undefined /*out*/;
            resourceInputs["subdirectory"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationNfs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LocationNfs resource.
 */
export interface LocationNfsArgs {
    /**
     * Specifies the options that DataSync can use to mount your NFS file server.
     */
    mountOptions?: pulumi.Input<inputs.datasync.LocationNfsMountOptionsArgs>;
    /**
     * Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect to your NFS file server.
     *
     * You can specify more than one agent. For more information, see [Using multiple DataSync agents](https://docs.aws.amazon.com/datasync/latest/userguide/do-i-need-datasync-agent.html#multiple-agents) .
     */
    onPremConfig: pulumi.Input<inputs.datasync.LocationNfsOnPremConfigArgs>;
    /**
     * The name of the NFS server. This value is the IP address or DNS name of the NFS server.
     */
    serverHostname?: pulumi.Input<string>;
    /**
     * The subdirectory in the NFS file system that is used to read data from the NFS source location or write data to the NFS destination.
     */
    subdirectory?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
