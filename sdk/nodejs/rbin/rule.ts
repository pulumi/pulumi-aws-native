// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Rbin::Rule
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:rbin:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * Rule Arn is unique for each rule.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The description of the retention rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
     */
    public readonly excludeResourceTags!: pulumi.Output<outputs.rbin.RuleResourceTag[] | undefined>;
    /**
     * The unique ID of the retention rule.
     */
    public /*out*/ readonly identifier!: pulumi.Output<string>;
    /**
     * Information about the retention rule lock configuration.
     */
    public readonly lockConfiguration!: pulumi.Output<outputs.rbin.RuleUnlockDelay | undefined>;
    /**
     * The lock state for the retention rule.
     */
    public /*out*/ readonly lockState!: pulumi.Output<string>;
    /**
     * Information about the resource tags used to identify resources that are retained by the retention rule.
     */
    public readonly resourceTags!: pulumi.Output<outputs.rbin.RuleResourceTag[] | undefined>;
    /**
     * The resource type retained by the retention rule.
     */
    public readonly resourceType!: pulumi.Output<enums.rbin.RuleResourceType>;
    /**
     * Information about the retention period for which the retention rule is to retain resources.
     */
    public readonly retentionPeriod!: pulumi.Output<outputs.rbin.RuleRetentionPeriod>;
    /**
     * The state of the retention rule. Only retention rules that are in the available state retain resources.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Information about the tags assigned to the retention rule.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if (args?.retentionPeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'retentionPeriod'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["excludeResourceTags"] = args?.excludeResourceTags;
            resourceInputs["lockConfiguration"] = args?.lockConfiguration;
            resourceInputs["resourceTags"] = args?.resourceTags;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["retentionPeriod"] = args?.retentionPeriod;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lockState"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["excludeResourceTags"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lockConfiguration"] = undefined /*out*/;
            resourceInputs["lockState"] = undefined /*out*/;
            resourceInputs["resourceTags"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["retentionPeriod"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["resourceType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The description of the retention rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Information about the exclude resource tags used to identify resources that are excluded by the retention rule.
     */
    excludeResourceTags?: pulumi.Input<pulumi.Input<inputs.rbin.RuleResourceTagArgs>[]>;
    /**
     * Information about the retention rule lock configuration.
     */
    lockConfiguration?: pulumi.Input<inputs.rbin.RuleUnlockDelayArgs>;
    /**
     * Information about the resource tags used to identify resources that are retained by the retention rule.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.rbin.RuleResourceTagArgs>[]>;
    /**
     * The resource type retained by the retention rule.
     */
    resourceType: pulumi.Input<enums.rbin.RuleResourceType>;
    /**
     * Information about the retention period for which the retention rule is to retain resources.
     */
    retentionPeriod: pulumi.Input<inputs.rbin.RuleRetentionPeriodArgs>;
    /**
     * The state of the retention rule. Only retention rules that are in the available state retain resources.
     */
    status?: pulumi.Input<string>;
    /**
     * Information about the tags assigned to the retention rule.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
