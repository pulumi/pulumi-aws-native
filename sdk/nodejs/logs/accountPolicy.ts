// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::Logs::AccountPolicy resource specifies a CloudWatch Logs AccountPolicy.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const accountPolicy = new aws_native.logs.AccountPolicy("accountPolicy", {
 *     policyName: "TestPolicy",
 *     policyDocument: "{ \"Name\": \"data-protection-policy\", \"Description\": \"\", \"Version\": \"2021-06-01\", \"Statement\": [ { \"Sid\": \"audit-policy\", \"DataIdentifier\": [ \"arn:aws:dataprotection::aws:data-identifier/EmailAddress\" ], \"Operation\": { \"Audit\": { \"FindingsDestination\": { \"CloudWatchLogs\": { \"LogGroup\": \"EXISTING_LOG_GROUP_NAME\" } } } } }, { \"Sid\": \"redact-policy\", \"DataIdentifier\": [ \"arn:aws:dataprotection::aws:data-identifier/EmailAddress\" ], \"Operation\": { \"Deidentify\": { \"MaskConfig\": {} } } } ] }",
 *     policyType: aws_native.logs.AccountPolicyPolicyType.DataProtectionPolicy,
 *     scope: aws_native.logs.AccountPolicyScope.All,
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const accountPolicy = new aws_native.logs.AccountPolicy("accountPolicy", {
 *     policyName: "TestPolicy",
 *     policyDocument: "{ \"Name\": \"data-protection-policy\", \"Description\": \"\", \"Version\": \"2021-06-01\", \"Statement\": [ { \"Sid\": \"audit-policy\", \"DataIdentifier\": [ \"arn:aws:dataprotection::aws:data-identifier/EmailAddress\" ], \"Operation\": { \"Audit\": { \"FindingsDestination\": { \"CloudWatchLogs\": { \"LogGroup\": \"EXISTING_LOG_GROUP_NAME\" } } } } }, { \"Sid\": \"redact-policy\", \"DataIdentifier\": [ \"arn:aws:dataprotection::aws:data-identifier/EmailAddress\" ], \"Operation\": { \"Deidentify\": { \"MaskConfig\": {} } } } ] }",
 *     policyType: aws_native.logs.AccountPolicyPolicyType.DataProtectionPolicy,
 *     scope: aws_native.logs.AccountPolicyScope.All,
 * });
 *
 * ```
 */
export class AccountPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccountPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AccountPolicy {
        return new AccountPolicy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:logs:AccountPolicy';

    /**
     * Returns true if the given object is an instance of AccountPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPolicy.__pulumiType;
    }

    /**
     * User account id
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The body of the policy document you want to use for this topic.
     *
     * You can only add one policy per PolicyType.
     *
     * The policy must be in JSON string format.
     *
     * Length Constraints: Maximum length of 30720
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * The name of the account policy
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * Type of the policy.
     */
    public readonly policyType!: pulumi.Output<enums.logs.AccountPolicyPolicyType>;
    /**
     * Scope for policy application
     */
    public readonly scope!: pulumi.Output<enums.logs.AccountPolicyScope | undefined>;
    /**
     * Log group  selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    public readonly selectionCriteria!: pulumi.Output<string | undefined>;

    /**
     * Create a AccountPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountPolicyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.policyDocument === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if (args?.policyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["policyDocument"] = args?.policyDocument;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["policyType"] = args?.policyType;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["selectionCriteria"] = args?.selectionCriteria;
            resourceInputs["accountId"] = undefined /*out*/;
        } else {
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["policyDocument"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
            resourceInputs["scope"] = undefined /*out*/;
            resourceInputs["selectionCriteria"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["policyName", "policyType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(AccountPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AccountPolicy resource.
 */
export interface AccountPolicyArgs {
    /**
     * The body of the policy document you want to use for this topic.
     *
     * You can only add one policy per PolicyType.
     *
     * The policy must be in JSON string format.
     *
     * Length Constraints: Maximum length of 30720
     */
    policyDocument: pulumi.Input<string>;
    /**
     * The name of the account policy
     */
    policyName?: pulumi.Input<string>;
    /**
     * Type of the policy.
     */
    policyType: pulumi.Input<enums.logs.AccountPolicyPolicyType>;
    /**
     * Scope for policy application
     */
    scope?: pulumi.Input<enums.logs.AccountPolicyScope>;
    /**
     * Log group  selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
     */
    selectionCriteria?: pulumi.Input<string>;
}
