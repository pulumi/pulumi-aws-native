// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::Logs::SubscriptionFilter`` resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:
 *   +  An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.
 *   +  A logical destination that belongs to a different account, for cross-account delivery.
 *   +  An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.
 *   +  An LAMlong function that belongs to the same account as the subscription filter, for same-account delivery.
 *
 *  There can be as many as two subscription filters associated with a log group.
 */
export class SubscriptionFilter extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SubscriptionFilter {
        return new SubscriptionFilter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:logs:SubscriptionFilter';

    /**
     * Returns true if the given object is an instance of SubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionFilter.__pulumiType;
    }

    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
     *  If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    declare public readonly applyOnTransformedLogs: pulumi.Output<boolean | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    declare public readonly destinationArn: pulumi.Output<string>;
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    declare public readonly distribution: pulumi.Output<enums.logs.SubscriptionFilterDistribution | undefined>;
    /**
     * The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
     */
    declare public readonly emitSystemFields: pulumi.Output<string[] | undefined>;
    /**
     * The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
     */
    declare public readonly fieldSelectionCriteria: pulumi.Output<string | undefined>;
    /**
     * The name of the subscription filter.
     */
    declare public readonly filterName: pulumi.Output<string | undefined>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    declare public readonly filterPattern: pulumi.Output<string>;
    /**
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    declare public readonly logGroupName: pulumi.Output<string>;
    /**
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    declare public readonly roleArn: pulumi.Output<string | undefined>;

    /**
     * Create a SubscriptionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionFilterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.destinationArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationArn'");
            }
            if (args?.filterPattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if (args?.logGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            resourceInputs["applyOnTransformedLogs"] = args?.applyOnTransformedLogs;
            resourceInputs["destinationArn"] = args?.destinationArn;
            resourceInputs["distribution"] = args?.distribution;
            resourceInputs["emitSystemFields"] = args?.emitSystemFields;
            resourceInputs["fieldSelectionCriteria"] = args?.fieldSelectionCriteria;
            resourceInputs["filterName"] = args?.filterName;
            resourceInputs["filterPattern"] = args?.filterPattern;
            resourceInputs["logGroupName"] = args?.logGroupName;
            resourceInputs["roleArn"] = args?.roleArn;
        } else {
            resourceInputs["applyOnTransformedLogs"] = undefined /*out*/;
            resourceInputs["destinationArn"] = undefined /*out*/;
            resourceInputs["distribution"] = undefined /*out*/;
            resourceInputs["emitSystemFields"] = undefined /*out*/;
            resourceInputs["fieldSelectionCriteria"] = undefined /*out*/;
            resourceInputs["filterName"] = undefined /*out*/;
            resourceInputs["filterPattern"] = undefined /*out*/;
            resourceInputs["logGroupName"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["filterName", "logGroupName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SubscriptionFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SubscriptionFilter resource.
 */
export interface SubscriptionFilterArgs {
    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
     *  If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    applyOnTransformedLogs?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    destinationArn: pulumi.Input<string>;
    /**
     * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
     */
    distribution?: pulumi.Input<enums.logs.SubscriptionFilterDistribution>;
    /**
     * The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
     */
    emitSystemFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
     */
    fieldSelectionCriteria?: pulumi.Input<string>;
    /**
     * The name of the subscription filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    roleArn?: pulumi.Input<string>;
}
