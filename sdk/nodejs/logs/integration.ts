// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Schema for Logs Integration Resource
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:logs:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * User provided identifier for integration, unique to the user account.
     */
    public readonly integrationName!: pulumi.Output<string>;
    /**
     * Status of creation for the Integration and its resources
     */
    public /*out*/ readonly integrationStatus!: pulumi.Output<enums.logs.IntegrationStatus>;
    /**
     * The type of the Integration.
     */
    public readonly integrationType!: pulumi.Output<enums.logs.IntegrationType>;
    /**
     * OpenSearchResourceConfig for the given Integration
     */
    public readonly resourceConfig!: pulumi.Output<outputs.logs.ResourceConfigProperties>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.integrationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            if (args?.resourceConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceConfig'");
            }
            resourceInputs["integrationName"] = args?.integrationName;
            resourceInputs["integrationType"] = args?.integrationType;
            resourceInputs["resourceConfig"] = args?.resourceConfig;
            resourceInputs["integrationStatus"] = undefined /*out*/;
        } else {
            resourceInputs["integrationName"] = undefined /*out*/;
            resourceInputs["integrationStatus"] = undefined /*out*/;
            resourceInputs["integrationType"] = undefined /*out*/;
            resourceInputs["resourceConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["integrationName", "integrationType", "resourceConfig"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * User provided identifier for integration, unique to the user account.
     */
    integrationName?: pulumi.Input<string>;
    /**
     * The type of the Integration.
     */
    integrationType: pulumi.Input<enums.logs.IntegrationType>;
    /**
     * OpenSearchResourceConfig for the given Integration
     */
    resourceConfig: pulumi.Input<inputs.logs.ResourceConfigPropertiesArgs>;
}
