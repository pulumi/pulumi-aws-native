// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::Logs::MetricFilter`` resource specifies a metric filter that describes how CWL extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.
 *  The maximum number of metric filters that can be associated with a log group is 100.
 */
export class MetricFilter extends pulumi.CustomResource {
    /**
     * Get an existing MetricFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MetricFilter {
        return new MetricFilter(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:logs:MetricFilter';

    /**
     * Returns true if the given object is an instance of MetricFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricFilter.__pulumiType;
    }

    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
     *  If this value is ``true``, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    declare public readonly applyOnTransformedLogs: pulumi.Output<boolean | undefined>;
    /**
     * The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the `emitSystemFieldDimensions` value if it was specified when the metric filter was created.
     */
    declare public readonly emitSystemFieldDimensions: pulumi.Output<string[] | undefined>;
    /**
     * The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the metric filter was created.
     */
    declare public readonly fieldSelectionCriteria: pulumi.Output<string | undefined>;
    /**
     * The name of the metric filter.
     */
    declare public readonly filterName: pulumi.Output<string | undefined>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    declare public readonly filterPattern: pulumi.Output<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    declare public readonly logGroupName: pulumi.Output<string>;
    /**
     * The metric transformations.
     */
    declare public readonly metricTransformations: pulumi.Output<outputs.logs.MetricFilterMetricTransformation[]>;

    /**
     * Create a MetricFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricFilterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.filterPattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if (args?.logGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            if (args?.metricTransformations === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricTransformations'");
            }
            resourceInputs["applyOnTransformedLogs"] = args?.applyOnTransformedLogs;
            resourceInputs["emitSystemFieldDimensions"] = args?.emitSystemFieldDimensions;
            resourceInputs["fieldSelectionCriteria"] = args?.fieldSelectionCriteria;
            resourceInputs["filterName"] = args?.filterName;
            resourceInputs["filterPattern"] = args?.filterPattern;
            resourceInputs["logGroupName"] = args?.logGroupName;
            resourceInputs["metricTransformations"] = args?.metricTransformations;
        } else {
            resourceInputs["applyOnTransformedLogs"] = undefined /*out*/;
            resourceInputs["emitSystemFieldDimensions"] = undefined /*out*/;
            resourceInputs["fieldSelectionCriteria"] = undefined /*out*/;
            resourceInputs["filterName"] = undefined /*out*/;
            resourceInputs["filterPattern"] = undefined /*out*/;
            resourceInputs["logGroupName"] = undefined /*out*/;
            resourceInputs["metricTransformations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["filterName", "logGroupName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(MetricFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MetricFilter resource.
 */
export interface MetricFilterArgs {
    /**
     * This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
     *  If this value is ``true``, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
     */
    applyOnTransformedLogs?: pulumi.Input<boolean>;
    /**
     * The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the `emitSystemFieldDimensions` value if it was specified when the metric filter was created.
     */
    emitSystemFieldDimensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the metric filter was created.
     */
    fieldSelectionCriteria?: pulumi.Input<string>;
    /**
     * The name of the metric filter.
     */
    filterName?: pulumi.Input<string>;
    /**
     * A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
     */
    filterPattern: pulumi.Input<string>;
    /**
     * The name of an existing log group that you want to associate with this metric filter.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The metric transformations.
     */
    metricTransformations: pulumi.Input<pulumi.Input<inputs.logs.MetricFilterMetricTransformationArgs>[]>;
}
