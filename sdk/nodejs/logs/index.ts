// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountPolicyArgs } from "./accountPolicy";
export type AccountPolicy = import("./accountPolicy").AccountPolicy;
export const AccountPolicy: typeof import("./accountPolicy").AccountPolicy = null as any;
utilities.lazyLoad(exports, ["AccountPolicy"], () => require("./accountPolicy"));

export { DestinationArgs } from "./destination";
export type Destination = import("./destination").Destination;
export const Destination: typeof import("./destination").Destination = null as any;
utilities.lazyLoad(exports, ["Destination"], () => require("./destination"));

export { GetAccountPolicyArgs, GetAccountPolicyResult, GetAccountPolicyOutputArgs } from "./getAccountPolicy";
export const getAccountPolicy: typeof import("./getAccountPolicy").getAccountPolicy = null as any;
export const getAccountPolicyOutput: typeof import("./getAccountPolicy").getAccountPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccountPolicy","getAccountPolicyOutput"], () => require("./getAccountPolicy"));

export { GetDestinationArgs, GetDestinationResult, GetDestinationOutputArgs } from "./getDestination";
export const getDestination: typeof import("./getDestination").getDestination = null as any;
export const getDestinationOutput: typeof import("./getDestination").getDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getDestination","getDestinationOutput"], () => require("./getDestination"));

export { GetLogGroupArgs, GetLogGroupResult, GetLogGroupOutputArgs } from "./getLogGroup";
export const getLogGroup: typeof import("./getLogGroup").getLogGroup = null as any;
export const getLogGroupOutput: typeof import("./getLogGroup").getLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLogGroup","getLogGroupOutput"], () => require("./getLogGroup"));

export { GetMetricFilterArgs, GetMetricFilterResult, GetMetricFilterOutputArgs } from "./getMetricFilter";
export const getMetricFilter: typeof import("./getMetricFilter").getMetricFilter = null as any;
export const getMetricFilterOutput: typeof import("./getMetricFilter").getMetricFilterOutput = null as any;
utilities.lazyLoad(exports, ["getMetricFilter","getMetricFilterOutput"], () => require("./getMetricFilter"));

export { GetQueryDefinitionArgs, GetQueryDefinitionResult, GetQueryDefinitionOutputArgs } from "./getQueryDefinition";
export const getQueryDefinition: typeof import("./getQueryDefinition").getQueryDefinition = null as any;
export const getQueryDefinitionOutput: typeof import("./getQueryDefinition").getQueryDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getQueryDefinition","getQueryDefinitionOutput"], () => require("./getQueryDefinition"));

export { GetResourcePolicyArgs, GetResourcePolicyResult, GetResourcePolicyOutputArgs } from "./getResourcePolicy";
export const getResourcePolicy: typeof import("./getResourcePolicy").getResourcePolicy = null as any;
export const getResourcePolicyOutput: typeof import("./getResourcePolicy").getResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getResourcePolicy","getResourcePolicyOutput"], () => require("./getResourcePolicy"));

export { GetSubscriptionFilterArgs, GetSubscriptionFilterResult, GetSubscriptionFilterOutputArgs } from "./getSubscriptionFilter";
export const getSubscriptionFilter: typeof import("./getSubscriptionFilter").getSubscriptionFilter = null as any;
export const getSubscriptionFilterOutput: typeof import("./getSubscriptionFilter").getSubscriptionFilterOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptionFilter","getSubscriptionFilterOutput"], () => require("./getSubscriptionFilter"));

export { LogGroupArgs } from "./logGroup";
export type LogGroup = import("./logGroup").LogGroup;
export const LogGroup: typeof import("./logGroup").LogGroup = null as any;
utilities.lazyLoad(exports, ["LogGroup"], () => require("./logGroup"));

export { LogStreamArgs } from "./logStream";
export type LogStream = import("./logStream").LogStream;
export const LogStream: typeof import("./logStream").LogStream = null as any;
utilities.lazyLoad(exports, ["LogStream"], () => require("./logStream"));

export { MetricFilterArgs } from "./metricFilter";
export type MetricFilter = import("./metricFilter").MetricFilter;
export const MetricFilter: typeof import("./metricFilter").MetricFilter = null as any;
utilities.lazyLoad(exports, ["MetricFilter"], () => require("./metricFilter"));

export { QueryDefinitionArgs } from "./queryDefinition";
export type QueryDefinition = import("./queryDefinition").QueryDefinition;
export const QueryDefinition: typeof import("./queryDefinition").QueryDefinition = null as any;
utilities.lazyLoad(exports, ["QueryDefinition"], () => require("./queryDefinition"));

export { ResourcePolicyArgs } from "./resourcePolicy";
export type ResourcePolicy = import("./resourcePolicy").ResourcePolicy;
export const ResourcePolicy: typeof import("./resourcePolicy").ResourcePolicy = null as any;
utilities.lazyLoad(exports, ["ResourcePolicy"], () => require("./resourcePolicy"));

export { SubscriptionFilterArgs } from "./subscriptionFilter";
export type SubscriptionFilter = import("./subscriptionFilter").SubscriptionFilter;
export const SubscriptionFilter: typeof import("./subscriptionFilter").SubscriptionFilter = null as any;
utilities.lazyLoad(exports, ["SubscriptionFilter"], () => require("./subscriptionFilter"));


// Export enums:
export * from "../types/enums/logs";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:logs:AccountPolicy":
                return new AccountPolicy(name, <any>undefined, { urn })
            case "aws-native:logs:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "aws-native:logs:LogGroup":
                return new LogGroup(name, <any>undefined, { urn })
            case "aws-native:logs:LogStream":
                return new LogStream(name, <any>undefined, { urn })
            case "aws-native:logs:MetricFilter":
                return new MetricFilter(name, <any>undefined, { urn })
            case "aws-native:logs:QueryDefinition":
                return new QueryDefinition(name, <any>undefined, { urn })
            case "aws-native:logs:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "aws-native:logs:SubscriptionFilter":
                return new SubscriptionFilter(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "logs", _module)
