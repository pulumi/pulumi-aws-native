// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The AWS::Logs::Destination resource specifies a CloudWatch Logs destination. A destination encapsulates a physical resource (such as an Amazon Kinesis data stream) and enables you to subscribe that resource to a stream of log events.
 */
export function getDestination(args: GetDestinationArgs, opts?: pulumi.InvokeOptions): Promise<GetDestinationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:logs:getDestination", {
        "destinationName": args.destinationName,
    }, opts);
}

export interface GetDestinationArgs {
    /**
     * The name of the destination resource
     */
    destinationName: string;
}

export interface GetDestinationResult {
    readonly arn?: string;
    /**
     * An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
     */
    readonly destinationPolicy?: string;
    /**
     * The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
     */
    readonly roleArn?: string;
    /**
     * The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
     */
    readonly targetArn?: string;
}

export function getDestinationOutput(args: GetDestinationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDestinationResult> {
    return pulumi.output(args).apply(a => getDestination(a, opts))
}

export interface GetDestinationOutputArgs {
    /**
     * The name of the destination resource
     */
    destinationName: pulumi.Input<string>;
}
