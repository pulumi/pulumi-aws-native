// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination.
 */
export function getSubscriptionFilter(args: GetSubscriptionFilterArgs, opts?: pulumi.InvokeOptions): Promise<GetSubscriptionFilterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:logs:getSubscriptionFilter", {
        "filterName": args.filterName,
        "logGroupName": args.logGroupName,
    }, opts);
}

export interface GetSubscriptionFilterArgs {
    /**
     * The name of the filter generated by resource.
     */
    filterName: string;
    /**
     * Existing log group that you want to associate with this filter.
     */
    logGroupName: string;
}

export interface GetSubscriptionFilterResult {
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    readonly destinationArn?: string;
    /**
     * The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
     */
    readonly distribution?: enums.logs.SubscriptionFilterDistribution;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource.
     */
    readonly filterPattern?: string;
    /**
     * The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    readonly roleArn?: string;
}
/**
 * Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination.
 */
export function getSubscriptionFilterOutput(args: GetSubscriptionFilterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubscriptionFilterResult> {
    return pulumi.output(args).apply((a: any) => getSubscriptionFilter(a, opts))
}

export interface GetSubscriptionFilterOutputArgs {
    /**
     * The name of the filter generated by resource.
     */
    filterName: pulumi.Input<string>;
    /**
     * Existing log group that you want to associate with this filter.
     */
    logGroupName: pulumi.Input<string>;
}
