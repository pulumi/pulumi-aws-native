// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
 */
export class Transformer extends pulumi.CustomResource {
    /**
     * Get an existing Transformer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Transformer {
        return new Transformer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:logs:Transformer';

    /**
     * Returns true if the given object is an instance of Transformer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Transformer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Transformer.__pulumiType;
    }

    /**
     * Existing log group that you want to associate with this transformer.
     */
    public readonly logGroupIdentifier!: pulumi.Output<string>;
    /**
     * List of processors in a transformer
     */
    public readonly transformerConfig!: pulumi.Output<outputs.logs.TransformerProcessor[]>;

    /**
     * Create a Transformer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.logGroupIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'logGroupIdentifier'");
            }
            if (args?.transformerConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'transformerConfig'");
            }
            resourceInputs["logGroupIdentifier"] = args?.logGroupIdentifier;
            resourceInputs["transformerConfig"] = args?.transformerConfig;
        } else {
            resourceInputs["logGroupIdentifier"] = undefined /*out*/;
            resourceInputs["transformerConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["logGroupIdentifier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Transformer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Transformer resource.
 */
export interface TransformerArgs {
    /**
     * Existing log group that you want to associate with this transformer.
     */
    logGroupIdentifier: pulumi.Input<string>;
    /**
     * List of processors in a transformer
     */
    transformerConfig: pulumi.Input<pulumi.Input<inputs.logs.TransformerProcessorArgs>[]>;
}
