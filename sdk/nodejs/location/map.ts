// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Location::Map Resource Type
 */
export class Map extends pulumi.CustomResource {
    /**
     * Get an existing Map resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Map {
        return new Map(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:location:Map';

    /**
     * Returns true if the given object is an instance of Map.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Map {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Map.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly configuration!: pulumi.Output<outputs.location.MapMapConfiguration>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly dataSource!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly mapArn!: pulumi.Output<string>;
    public readonly mapName!: pulumi.Output<string>;
    public readonly pricingPlan!: pulumi.Output<enums.location.MapPricingPlan>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Map resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MapArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.mapName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mapName'");
            }
            if ((!args || args.pricingPlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pricingPlan'");
            }
            inputs["configuration"] = args ? args.configuration : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["mapName"] = args ? args.mapName : undefined;
            inputs["pricingPlan"] = args ? args.pricingPlan : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["dataSource"] = undefined /*out*/;
            inputs["mapArn"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["configuration"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
            inputs["dataSource"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["mapArn"] = undefined /*out*/;
            inputs["mapName"] = undefined /*out*/;
            inputs["pricingPlan"] = undefined /*out*/;
            inputs["updateTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Map.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Map resource.
 */
export interface MapArgs {
    configuration: pulumi.Input<inputs.location.MapMapConfigurationArgs>;
    description?: pulumi.Input<string>;
    mapName: pulumi.Input<string>;
    pricingPlan: pulumi.Input<enums.location.MapPricingPlan>;
}
