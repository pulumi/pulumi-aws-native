// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::GlobalAccelerator::EndpointGroup
 */
export class EndpointGroup extends pulumi.CustomResource {
    /**
     * Get an existing EndpointGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): EndpointGroup {
        return new EndpointGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:globalaccelerator:EndpointGroup';

    /**
     * Returns true if the given object is an instance of EndpointGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointGroup.__pulumiType;
    }

    /**
     * The list of endpoint objects.
     */
    public readonly endpointConfigurations!: pulumi.Output<outputs.globalaccelerator.EndpointGroupEndpointConfiguration[] | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the endpoint group
     */
    public /*out*/ readonly endpointGroupArn!: pulumi.Output<string>;
    /**
     * The name of the AWS Region where the endpoint group is located
     */
    public readonly endpointGroupRegion!: pulumi.Output<string>;
    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     */
    public readonly healthCheckIntervalSeconds!: pulumi.Output<number | undefined>;
    public readonly healthCheckPath!: pulumi.Output<string | undefined>;
    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    public readonly healthCheckProtocol!: pulumi.Output<enums.globalaccelerator.EndpointGroupHealthCheckProtocol | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the listener
     */
    public readonly listenerArn!: pulumi.Output<string>;
    public readonly portOverrides!: pulumi.Output<outputs.globalaccelerator.EndpointGroupPortOverride[] | undefined>;
    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     */
    public readonly thresholdCount!: pulumi.Output<number | undefined>;
    /**
     * The percentage of traffic to sent to an AWS Region
     */
    public readonly trafficDialPercentage!: pulumi.Output<number | undefined>;

    /**
     * Create a EndpointGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.endpointGroupRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointGroupRegion'");
            }
            if ((!args || args.listenerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerArn'");
            }
            inputs["endpointConfigurations"] = args ? args.endpointConfigurations : undefined;
            inputs["endpointGroupRegion"] = args ? args.endpointGroupRegion : undefined;
            inputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            inputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            inputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            inputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            inputs["listenerArn"] = args ? args.listenerArn : undefined;
            inputs["portOverrides"] = args ? args.portOverrides : undefined;
            inputs["thresholdCount"] = args ? args.thresholdCount : undefined;
            inputs["trafficDialPercentage"] = args ? args.trafficDialPercentage : undefined;
            inputs["endpointGroupArn"] = undefined /*out*/;
        } else {
            inputs["endpointConfigurations"] = undefined /*out*/;
            inputs["endpointGroupArn"] = undefined /*out*/;
            inputs["endpointGroupRegion"] = undefined /*out*/;
            inputs["healthCheckIntervalSeconds"] = undefined /*out*/;
            inputs["healthCheckPath"] = undefined /*out*/;
            inputs["healthCheckPort"] = undefined /*out*/;
            inputs["healthCheckProtocol"] = undefined /*out*/;
            inputs["listenerArn"] = undefined /*out*/;
            inputs["portOverrides"] = undefined /*out*/;
            inputs["thresholdCount"] = undefined /*out*/;
            inputs["trafficDialPercentage"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EndpointGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a EndpointGroup resource.
 */
export interface EndpointGroupArgs {
    /**
     * The list of endpoint objects.
     */
    endpointConfigurations?: pulumi.Input<pulumi.Input<inputs.globalaccelerator.EndpointGroupEndpointConfigurationArgs>[]>;
    /**
     * The name of the AWS Region where the endpoint group is located
     */
    endpointGroupRegion: pulumi.Input<string>;
    /**
     * The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     */
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     */
    healthCheckProtocol?: pulumi.Input<enums.globalaccelerator.EndpointGroupHealthCheckProtocol>;
    /**
     * The Amazon Resource Name (ARN) of the listener
     */
    listenerArn: pulumi.Input<string>;
    portOverrides?: pulumi.Input<pulumi.Input<inputs.globalaccelerator.EndpointGroupPortOverrideArgs>[]>;
    /**
     * The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     */
    thresholdCount?: pulumi.Input<number>;
    /**
     * The percentage of traffic to sent to an AWS Region
     */
    trafficDialPercentage?: pulumi.Input<number>;
}
