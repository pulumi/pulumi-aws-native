// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::MSK::Cluster
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:msk:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly brokerNodeGroupInfo!: pulumi.Output<outputs.msk.ClusterBrokerNodeGroupInfo>;
    public readonly clientAuthentication!: pulumi.Output<outputs.msk.ClusterClientAuthentication | undefined>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly configurationInfo!: pulumi.Output<outputs.msk.ClusterConfigurationInfo | undefined>;
    /**
     * The current version of the MSK cluster
     */
    public readonly currentVersion!: pulumi.Output<string | undefined>;
    public readonly encryptionInfo!: pulumi.Output<outputs.msk.ClusterEncryptionInfo | undefined>;
    public readonly enhancedMonitoring!: pulumi.Output<enums.msk.ClusterEnhancedMonitoring | undefined>;
    public readonly kafkaVersion!: pulumi.Output<string>;
    public readonly loggingInfo!: pulumi.Output<outputs.msk.ClusterLoggingInfo | undefined>;
    public readonly numberOfBrokerNodes!: pulumi.Output<number>;
    public readonly openMonitoring!: pulumi.Output<outputs.msk.ClusterOpenMonitoring | undefined>;
    /**
     * A key-value pair to associate with a resource.
     */
    public readonly tags!: pulumi.Output<any | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.brokerNodeGroupInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brokerNodeGroupInfo'");
            }
            if ((!args || args.kafkaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if ((!args || args.numberOfBrokerNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfBrokerNodes'");
            }
            resourceInputs["brokerNodeGroupInfo"] = args ? args.brokerNodeGroupInfo : undefined;
            resourceInputs["clientAuthentication"] = args ? args.clientAuthentication : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["configurationInfo"] = args ? args.configurationInfo : undefined;
            resourceInputs["currentVersion"] = args ? args.currentVersion : undefined;
            resourceInputs["encryptionInfo"] = args ? args.encryptionInfo : undefined;
            resourceInputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            resourceInputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            resourceInputs["loggingInfo"] = args ? args.loggingInfo : undefined;
            resourceInputs["numberOfBrokerNodes"] = args ? args.numberOfBrokerNodes : undefined;
            resourceInputs["openMonitoring"] = args ? args.openMonitoring : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["brokerNodeGroupInfo"] = undefined /*out*/;
            resourceInputs["clientAuthentication"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["configurationInfo"] = undefined /*out*/;
            resourceInputs["currentVersion"] = undefined /*out*/;
            resourceInputs["encryptionInfo"] = undefined /*out*/;
            resourceInputs["enhancedMonitoring"] = undefined /*out*/;
            resourceInputs["kafkaVersion"] = undefined /*out*/;
            resourceInputs["loggingInfo"] = undefined /*out*/;
            resourceInputs["numberOfBrokerNodes"] = undefined /*out*/;
            resourceInputs["openMonitoring"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    brokerNodeGroupInfo: pulumi.Input<inputs.msk.ClusterBrokerNodeGroupInfoArgs>;
    clientAuthentication?: pulumi.Input<inputs.msk.ClusterClientAuthenticationArgs>;
    clusterName?: pulumi.Input<string>;
    configurationInfo?: pulumi.Input<inputs.msk.ClusterConfigurationInfoArgs>;
    /**
     * The current version of the MSK cluster
     */
    currentVersion?: pulumi.Input<string>;
    encryptionInfo?: pulumi.Input<inputs.msk.ClusterEncryptionInfoArgs>;
    enhancedMonitoring?: pulumi.Input<enums.msk.ClusterEnhancedMonitoring>;
    kafkaVersion: pulumi.Input<string>;
    loggingInfo?: pulumi.Input<inputs.msk.ClusterLoggingInfoArgs>;
    numberOfBrokerNodes: pulumi.Input<number>;
    openMonitoring?: pulumi.Input<inputs.msk.ClusterOpenMonitoringArgs>;
    /**
     * A key-value pair to associate with a resource.
     */
    tags?: any;
}
