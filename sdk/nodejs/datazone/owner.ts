// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A owner can set up authorization permissions on their resources.
 */
export class Owner extends pulumi.CustomResource {
    /**
     * Get an existing Owner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Owner {
        return new Owner(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:Owner';

    /**
     * Returns true if the given object is an instance of Owner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Owner {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Owner.__pulumiType;
    }

    /**
     * The ID of the domain in which you want to add the entity owner.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The ID of the entity to which you want to add an owner.
     */
    public readonly entityIdentifier!: pulumi.Output<string>;
    /**
     * The type of an entity.
     */
    public readonly entityType!: pulumi.Output<enums.datazone.OwnerEntityType>;
    /**
     * The owner that you want to add to the entity.
     */
    public readonly owner!: pulumi.Output<outputs.datazone.OwnerProperties>;
    public /*out*/ readonly ownerIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly ownerType!: pulumi.Output<enums.datazone.OwnerType>;

    /**
     * Create a Owner resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OwnerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.entityIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityIdentifier'");
            }
            if ((!args || args.entityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityType'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["entityIdentifier"] = args ? args.entityIdentifier : undefined;
            resourceInputs["entityType"] = args ? args.entityType : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["ownerIdentifier"] = undefined /*out*/;
            resourceInputs["ownerType"] = undefined /*out*/;
        } else {
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["entityIdentifier"] = undefined /*out*/;
            resourceInputs["entityType"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["ownerIdentifier"] = undefined /*out*/;
            resourceInputs["ownerType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "entityIdentifier", "entityType", "owner"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Owner.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Owner resource.
 */
export interface OwnerArgs {
    /**
     * The ID of the domain in which you want to add the entity owner.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The ID of the entity to which you want to add an owner.
     */
    entityIdentifier: pulumi.Input<string>;
    /**
     * The type of an entity.
     */
    entityType: pulumi.Input<enums.datazone.OwnerEntityType>;
    /**
     * The owner that you want to add to the entity.
     */
    owner: pulumi.Input<inputs.datazone.OwnerPropertiesArgs>;
}
