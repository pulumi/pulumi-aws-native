// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::DataZone::ProjectMembership Resource Type
 */
export class ProjectMembership extends pulumi.CustomResource {
    /**
     * Get an existing ProjectMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProjectMembership {
        return new ProjectMembership(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:ProjectMembership';

    /**
     * Returns true if the given object is an instance of ProjectMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectMembership.__pulumiType;
    }

    /**
     * The designated role of a project member.
     */
    public readonly designation!: pulumi.Output<enums.datazone.ProjectMembershipUserDesignation>;
    /**
     * The ID of the Amazon DataZone domain in which project membership is created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The details about a project member.
     */
    public readonly member!: pulumi.Output<outputs.datazone.ProjectMembershipMember0Properties | outputs.datazone.ProjectMembershipMember1Properties>;
    /**
     * The ID of the project for which this project membership was created.
     */
    public readonly projectIdentifier!: pulumi.Output<string>;

    /**
     * Create a ProjectMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectMembershipArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.designation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'designation'");
            }
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.member === undefined) && !opts.urn) {
                throw new Error("Missing required property 'member'");
            }
            if ((!args || args.projectIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectIdentifier'");
            }
            resourceInputs["designation"] = args ? args.designation : undefined;
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["projectIdentifier"] = args ? args.projectIdentifier : undefined;
        } else {
            resourceInputs["designation"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["member"] = undefined /*out*/;
            resourceInputs["projectIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "member", "projectIdentifier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ProjectMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProjectMembership resource.
 */
export interface ProjectMembershipArgs {
    /**
     * The designated role of a project member.
     */
    designation: pulumi.Input<enums.datazone.ProjectMembershipUserDesignation>;
    /**
     * The ID of the Amazon DataZone domain in which project membership is created.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The details about a project member.
     */
    member: pulumi.Input<inputs.datazone.ProjectMembershipMember0PropertiesArgs | inputs.datazone.ProjectMembershipMember1PropertiesArgs>;
    /**
     * The ID of the project for which this project membership was created.
     */
    projectIdentifier: pulumi.Input<string>;
}
