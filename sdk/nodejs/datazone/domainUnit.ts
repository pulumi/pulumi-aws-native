// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * A domain unit enables you to easily organize your assets and other domain entities under specific business units and teams.
 */
export class DomainUnit extends pulumi.CustomResource {
    /**
     * Get an existing DomainUnit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DomainUnit {
        return new DomainUnit(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:DomainUnit';

    /**
     * Returns true if the given object is an instance of DomainUnit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainUnit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainUnit.__pulumiType;
    }

    /**
     * The ID of the domain unit.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The timestamp at which the domain unit was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the domain unit.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the domain unit was created.
     */
    declare public /*out*/ readonly domainId: pulumi.Output<string>;
    /**
     * The ID of the domain where you want to create a domain unit.
     */
    declare public readonly domainIdentifier: pulumi.Output<string>;
    /**
     * The identifier of the domain unit that you want to get.
     */
    declare public /*out*/ readonly identifier: pulumi.Output<string>;
    /**
     * The timestamp at which the domain unit was last updated.
     */
    declare public /*out*/ readonly lastUpdatedAt: pulumi.Output<string>;
    /**
     * The name of the domain unit.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the parent domain unit.
     */
    declare public /*out*/ readonly parentDomainUnitId: pulumi.Output<string>;
    /**
     * The ID of the parent domain unit.
     */
    declare public readonly parentDomainUnitIdentifier: pulumi.Output<string>;

    /**
     * Create a DomainUnit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainUnitArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.domainIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if (args?.parentDomainUnitIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentDomainUnitIdentifier'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["domainIdentifier"] = args?.domainIdentifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["parentDomainUnitIdentifier"] = args?.parentDomainUnitIdentifier;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["parentDomainUnitId"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDomainUnitId"] = undefined /*out*/;
            resourceInputs["parentDomainUnitIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "parentDomainUnitIdentifier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DomainUnit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DomainUnit resource.
 */
export interface DomainUnitArgs {
    /**
     * The description of the domain unit.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the domain where you want to create a domain unit.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The name of the domain unit.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the parent domain unit.
     */
    parentDomainUnitIdentifier: pulumi.Input<string>;
}
