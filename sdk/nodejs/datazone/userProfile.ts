// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A user profile represents Amazon DataZone users. Amazon DataZone supports both IAM roles and SSO identities to interact with the Amazon DataZone Management Console and the data portal for different purposes. Domain administrators use IAM roles to perform the initial administrative domain-related work in the Amazon DataZone Management Console, including creating new Amazon DataZone domains, configuring metadata form types, and implementing policies. Data workers use their SSO corporate identities via Identity Center to log into the Amazon DataZone Data Portal and access projects where they have memberships.
 */
export class UserProfile extends pulumi.CustomResource {
    /**
     * Get an existing UserProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): UserProfile {
        return new UserProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:UserProfile';

    /**
     * Returns true if the given object is an instance of UserProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserProfile.__pulumiType;
    }

    /**
     * The ID of the Amazon DataZone user profile.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    public /*out*/ readonly details!: pulumi.Output<outputs.datazone.UserProfileDetails0Properties | outputs.datazone.UserProfileDetails1Properties>;
    /**
     * The identifier of the Amazon DataZone domain in which the user profile is created.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon DataZone domain in which the user profile would be created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<enums.datazone.UserProfileStatus | undefined>;
    public /*out*/ readonly type!: pulumi.Output<enums.datazone.UserProfileType>;
    /**
     * The ID of the user.
     */
    public readonly userIdentifier!: pulumi.Output<string>;
    public readonly userType!: pulumi.Output<enums.datazone.UserProfileUserType | undefined>;

    /**
     * Create a UserProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.userIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIdentifier'");
            }
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userIdentifier"] = args ? args.userIdentifier : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["details"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userIdentifier"] = undefined /*out*/;
            resourceInputs["userType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "userIdentifier", "userType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(UserProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a UserProfile resource.
 */
export interface UserProfileArgs {
    /**
     * The identifier of the Amazon DataZone domain in which the user profile would be created.
     */
    domainIdentifier: pulumi.Input<string>;
    status?: pulumi.Input<enums.datazone.UserProfileStatus>;
    /**
     * The ID of the user.
     */
    userIdentifier: pulumi.Input<string>;
    userType?: pulumi.Input<enums.datazone.UserProfileUserType>;
}
