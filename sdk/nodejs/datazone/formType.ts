// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Create and manage form types in Amazon Datazone
 */
export class FormType extends pulumi.CustomResource {
    /**
     * Get an existing FormType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FormType {
        return new FormType(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:FormType';

    /**
     * Returns true if the given object is an instance of FormType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FormType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FormType.__pulumiType;
    }

    /**
     * The timestamp of when this Amazon DataZone metadata form type was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The user who created this Amazon DataZone metadata form type.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The description of this Amazon DataZone metadata form type.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Amazon DataZone domain in which this metadata form type is created.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The ID of the Amazon DataZone domain in which this metadata form type is created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The ID of this Amazon DataZone metadata form type.
     */
    public /*out*/ readonly formTypeIdentifier!: pulumi.Output<string>;
    /**
     * The model of this Amazon DataZone metadata form type.
     */
    public readonly model!: pulumi.Output<outputs.datazone.FormTypeModel>;
    /**
     * The name of this Amazon DataZone metadata form type.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project that owns this Amazon DataZone metadata form type.
     */
    public /*out*/ readonly owningProjectId!: pulumi.Output<string>;
    /**
     * The ID of the Amazon DataZone project that owns this metadata form type.
     */
    public readonly owningProjectIdentifier!: pulumi.Output<string>;
    /**
     * The revision of this Amazon DataZone metadata form type.
     */
    public /*out*/ readonly revision!: pulumi.Output<string>;
    /**
     * The status of this Amazon DataZone metadata form type.
     */
    public readonly status!: pulumi.Output<enums.datazone.FormTypeStatus | undefined>;

    /**
     * Create a FormType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FormTypeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.model === undefined) && !opts.urn) {
                throw new Error("Missing required property 'model'");
            }
            if ((!args || args.owningProjectIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owningProjectIdentifier'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owningProjectIdentifier"] = args ? args.owningProjectIdentifier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["formTypeIdentifier"] = undefined /*out*/;
            resourceInputs["owningProjectId"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["formTypeIdentifier"] = undefined /*out*/;
            resourceInputs["model"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owningProjectId"] = undefined /*out*/;
            resourceInputs["owningProjectIdentifier"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(FormType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a FormType resource.
 */
export interface FormTypeArgs {
    /**
     * The description of this Amazon DataZone metadata form type.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Amazon DataZone domain in which this metadata form type is created.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The model of this Amazon DataZone metadata form type.
     */
    model: pulumi.Input<inputs.datazone.FormTypeModelArgs>;
    /**
     * The name of this Amazon DataZone metadata form type.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Amazon DataZone project that owns this metadata form type.
     */
    owningProjectIdentifier: pulumi.Input<string>;
    /**
     * The status of this Amazon DataZone metadata form type.
     */
    status?: pulumi.Input<enums.datazone.FormTypeStatus>;
}
