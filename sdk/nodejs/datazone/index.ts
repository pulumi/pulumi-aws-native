// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectionArgs } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { DataSourceArgs } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { DomainArgs } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { EnvironmentArgs } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentActionsArgs } from "./environmentActions";
export type EnvironmentActions = import("./environmentActions").EnvironmentActions;
export const EnvironmentActions: typeof import("./environmentActions").EnvironmentActions = null as any;
utilities.lazyLoad(exports, ["EnvironmentActions"], () => require("./environmentActions"));

export { EnvironmentBlueprintConfigurationArgs } from "./environmentBlueprintConfiguration";
export type EnvironmentBlueprintConfiguration = import("./environmentBlueprintConfiguration").EnvironmentBlueprintConfiguration;
export const EnvironmentBlueprintConfiguration: typeof import("./environmentBlueprintConfiguration").EnvironmentBlueprintConfiguration = null as any;
utilities.lazyLoad(exports, ["EnvironmentBlueprintConfiguration"], () => require("./environmentBlueprintConfiguration"));

export { EnvironmentProfileArgs } from "./environmentProfile";
export type EnvironmentProfile = import("./environmentProfile").EnvironmentProfile;
export const EnvironmentProfile: typeof import("./environmentProfile").EnvironmentProfile = null as any;
utilities.lazyLoad(exports, ["EnvironmentProfile"], () => require("./environmentProfile"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentActionsArgs, GetEnvironmentActionsResult, GetEnvironmentActionsOutputArgs } from "./getEnvironmentActions";
export const getEnvironmentActions: typeof import("./getEnvironmentActions").getEnvironmentActions = null as any;
export const getEnvironmentActionsOutput: typeof import("./getEnvironmentActions").getEnvironmentActionsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentActions","getEnvironmentActionsOutput"], () => require("./getEnvironmentActions"));

export { GetEnvironmentBlueprintConfigurationArgs, GetEnvironmentBlueprintConfigurationResult, GetEnvironmentBlueprintConfigurationOutputArgs } from "./getEnvironmentBlueprintConfiguration";
export const getEnvironmentBlueprintConfiguration: typeof import("./getEnvironmentBlueprintConfiguration").getEnvironmentBlueprintConfiguration = null as any;
export const getEnvironmentBlueprintConfigurationOutput: typeof import("./getEnvironmentBlueprintConfiguration").getEnvironmentBlueprintConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentBlueprintConfiguration","getEnvironmentBlueprintConfigurationOutput"], () => require("./getEnvironmentBlueprintConfiguration"));

export { GetEnvironmentProfileArgs, GetEnvironmentProfileResult, GetEnvironmentProfileOutputArgs } from "./getEnvironmentProfile";
export const getEnvironmentProfile: typeof import("./getEnvironmentProfile").getEnvironmentProfile = null as any;
export const getEnvironmentProfileOutput: typeof import("./getEnvironmentProfile").getEnvironmentProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentProfile","getEnvironmentProfileOutput"], () => require("./getEnvironmentProfile"));

export { GetGroupProfileArgs, GetGroupProfileResult, GetGroupProfileOutputArgs } from "./getGroupProfile";
export const getGroupProfile: typeof import("./getGroupProfile").getGroupProfile = null as any;
export const getGroupProfileOutput: typeof import("./getGroupProfile").getGroupProfileOutput = null as any;
utilities.lazyLoad(exports, ["getGroupProfile","getGroupProfileOutput"], () => require("./getGroupProfile"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetSubscriptionTargetArgs, GetSubscriptionTargetResult, GetSubscriptionTargetOutputArgs } from "./getSubscriptionTarget";
export const getSubscriptionTarget: typeof import("./getSubscriptionTarget").getSubscriptionTarget = null as any;
export const getSubscriptionTargetOutput: typeof import("./getSubscriptionTarget").getSubscriptionTargetOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriptionTarget","getSubscriptionTargetOutput"], () => require("./getSubscriptionTarget"));

export { GetUserProfileArgs, GetUserProfileResult, GetUserProfileOutputArgs } from "./getUserProfile";
export const getUserProfile: typeof import("./getUserProfile").getUserProfile = null as any;
export const getUserProfileOutput: typeof import("./getUserProfile").getUserProfileOutput = null as any;
utilities.lazyLoad(exports, ["getUserProfile","getUserProfileOutput"], () => require("./getUserProfile"));

export { GroupProfileArgs } from "./groupProfile";
export type GroupProfile = import("./groupProfile").GroupProfile;
export const GroupProfile: typeof import("./groupProfile").GroupProfile = null as any;
utilities.lazyLoad(exports, ["GroupProfile"], () => require("./groupProfile"));

export { ProjectArgs } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectMembershipArgs } from "./projectMembership";
export type ProjectMembership = import("./projectMembership").ProjectMembership;
export const ProjectMembership: typeof import("./projectMembership").ProjectMembership = null as any;
utilities.lazyLoad(exports, ["ProjectMembership"], () => require("./projectMembership"));

export { SubscriptionTargetArgs } from "./subscriptionTarget";
export type SubscriptionTarget = import("./subscriptionTarget").SubscriptionTarget;
export const SubscriptionTarget: typeof import("./subscriptionTarget").SubscriptionTarget = null as any;
utilities.lazyLoad(exports, ["SubscriptionTarget"], () => require("./subscriptionTarget"));

export { UserProfileArgs } from "./userProfile";
export type UserProfile = import("./userProfile").UserProfile;
export const UserProfile: typeof import("./userProfile").UserProfile = null as any;
utilities.lazyLoad(exports, ["UserProfile"], () => require("./userProfile"));


// Export enums:
export * from "../types/enums/datazone";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:datazone:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "aws-native:datazone:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws-native:datazone:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "aws-native:datazone:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "aws-native:datazone:EnvironmentActions":
                return new EnvironmentActions(name, <any>undefined, { urn })
            case "aws-native:datazone:EnvironmentBlueprintConfiguration":
                return new EnvironmentBlueprintConfiguration(name, <any>undefined, { urn })
            case "aws-native:datazone:EnvironmentProfile":
                return new EnvironmentProfile(name, <any>undefined, { urn })
            case "aws-native:datazone:GroupProfile":
                return new GroupProfile(name, <any>undefined, { urn })
            case "aws-native:datazone:Project":
                return new Project(name, <any>undefined, { urn })
            case "aws-native:datazone:ProjectMembership":
                return new ProjectMembership(name, <any>undefined, { urn })
            case "aws-native:datazone:SubscriptionTarget":
                return new SubscriptionTarget(name, <any>undefined, { urn })
            case "aws-native:datazone:UserProfile":
                return new UserProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "datazone", _module)
