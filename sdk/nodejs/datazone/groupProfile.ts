// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Group profiles represent groups of Amazon DataZone users. Groups can be manually created, or mapped to Active Directory groups of enterprise customers. In Amazon DataZone, groups serve two purposes. First, a group can map to a team of users in the organizational chart, and thus reduce the administrative work of a Amazon DataZone project owner when there are new employees joining or leaving a team. Second, corporate administrators use Active Directory groups to manage and update user statuses and so Amazon DataZone domain administrators can use these group memberships to implement Amazon DataZone domain policies.
 */
export class GroupProfile extends pulumi.CustomResource {
    /**
     * Get an existing GroupProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GroupProfile {
        return new GroupProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:GroupProfile';

    /**
     * Returns true if the given object is an instance of GroupProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupProfile.__pulumiType;
    }

    /**
     * The ID of the Amazon DataZone group profile.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon DataZone domain in which the group profile is created.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon DataZone domain in which the group profile would be created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The ID of the group.
     */
    public readonly groupIdentifier!: pulumi.Output<string>;
    /**
     * The group-name of the Group Profile.
     */
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<enums.datazone.GroupProfileStatus | undefined>;

    /**
     * Create a GroupProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.groupIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIdentifier'");
            }
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["groupIdentifier"] = args ? args.groupIdentifier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["groupIdentifier"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "groupIdentifier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(GroupProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GroupProfile resource.
 */
export interface GroupProfileArgs {
    /**
     * The identifier of the Amazon DataZone domain in which the group profile would be created.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The ID of the group.
     */
    groupIdentifier: pulumi.Input<string>;
    status?: pulumi.Input<enums.datazone.GroupProfileStatus>;
}
