// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Subscription targets enables one to access the data to which you have subscribed in your projects.
 */
export class SubscriptionTarget extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SubscriptionTarget {
        return new SubscriptionTarget(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:datazone:SubscriptionTarget';

    /**
     * Returns true if the given object is an instance of SubscriptionTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionTarget.__pulumiType;
    }

    /**
     * The asset types that can be included in the subscription target.
     */
    public readonly applicableAssetTypes!: pulumi.Output<string[]>;
    /**
     * The authorized principals of the subscription target.
     */
    public readonly authorizedPrincipals!: pulumi.Output<string[]>;
    /**
     * The timestamp of when the subscription target was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Amazon DataZone user who created the subscription target.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The ID of the Amazon DataZone domain in which subscription target is created.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The ID of the Amazon DataZone domain in which subscription target would be created.
     */
    public readonly domainIdentifier!: pulumi.Output<string>;
    /**
     * The ID of the environment in which subscription target is created.
     */
    public /*out*/ readonly environmentId!: pulumi.Output<string>;
    /**
     * The ID of the environment in which subscription target would be created.
     */
    public readonly environmentIdentifier!: pulumi.Output<string>;
    /**
     * The manage access role that is used to create the subscription target.
     */
    public readonly manageAccessRole!: pulumi.Output<string>;
    /**
     * The name of the subscription target.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The identifier of the project specified in the subscription target.
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * The provider of the subscription target.
     */
    public readonly provider!: pulumi.Output<string | undefined>;
    /**
     * The configuration of the subscription target.
     */
    public readonly subscriptionTargetConfig!: pulumi.Output<outputs.datazone.SubscriptionTargetForm[]>;
    /**
     * The type of the subscription target.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The timestamp of when the subscription target was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The Amazon DataZone user who updated the subscription target.
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;

    /**
     * Create a SubscriptionTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionTargetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.applicableAssetTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicableAssetTypes'");
            }
            if ((!args || args.authorizedPrincipals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedPrincipals'");
            }
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.environmentIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentIdentifier'");
            }
            if ((!args || args.manageAccessRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'manageAccessRole'");
            }
            if ((!args || args.subscriptionTargetConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionTargetConfig'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["applicableAssetTypes"] = args ? args.applicableAssetTypes : undefined;
            resourceInputs["authorizedPrincipals"] = args ? args.authorizedPrincipals : undefined;
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["environmentIdentifier"] = args ? args.environmentIdentifier : undefined;
            resourceInputs["manageAccessRole"] = args ? args.manageAccessRole : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provider"] = args ? args.provider : undefined;
            resourceInputs["subscriptionTargetConfig"] = args ? args.subscriptionTargetConfig : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        } else {
            resourceInputs["applicableAssetTypes"] = undefined /*out*/;
            resourceInputs["authorizedPrincipals"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["domainIdentifier"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["environmentIdentifier"] = undefined /*out*/;
            resourceInputs["manageAccessRole"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["provider"] = undefined /*out*/;
            resourceInputs["subscriptionTargetConfig"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainIdentifier", "environmentIdentifier", "type"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SubscriptionTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SubscriptionTarget resource.
 */
export interface SubscriptionTargetArgs {
    /**
     * The asset types that can be included in the subscription target.
     */
    applicableAssetTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The authorized principals of the subscription target.
     */
    authorizedPrincipals: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the Amazon DataZone domain in which subscription target would be created.
     */
    domainIdentifier: pulumi.Input<string>;
    /**
     * The ID of the environment in which subscription target would be created.
     */
    environmentIdentifier: pulumi.Input<string>;
    /**
     * The manage access role that is used to create the subscription target.
     */
    manageAccessRole: pulumi.Input<string>;
    /**
     * The name of the subscription target.
     */
    name?: pulumi.Input<string>;
    /**
     * The provider of the subscription target.
     */
    provider?: pulumi.Input<string>;
    /**
     * The configuration of the subscription target.
     */
    subscriptionTargetConfig: pulumi.Input<pulumi.Input<inputs.datazone.SubscriptionTargetFormArgs>[]>;
    /**
     * The type of the subscription target.
     */
    type: pulumi.Input<string>;
}
