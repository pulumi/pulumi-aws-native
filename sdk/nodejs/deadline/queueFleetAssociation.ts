// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Deadline::QueueFleetAssociation Resource Type
 */
export class QueueFleetAssociation extends pulumi.CustomResource {
    /**
     * Get an existing QueueFleetAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): QueueFleetAssociation {
        return new QueueFleetAssociation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:deadline:QueueFleetAssociation';

    /**
     * Returns true if the given object is an instance of QueueFleetAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QueueFleetAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QueueFleetAssociation.__pulumiType;
    }

    /**
     * The identifier of the farm that contains the queue and the fleet.
     */
    declare public readonly farmId: pulumi.Output<string>;
    /**
     * The fleet ID.
     */
    declare public readonly fleetId: pulumi.Output<string>;
    /**
     * The queue ID.
     */
    declare public readonly queueId: pulumi.Output<string>;

    /**
     * Create a QueueFleetAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueFleetAssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.farmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'farmId'");
            }
            if (args?.fleetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'fleetId'");
            }
            if (args?.queueId === undefined && !opts.urn) {
                throw new Error("Missing required property 'queueId'");
            }
            resourceInputs["farmId"] = args?.farmId;
            resourceInputs["fleetId"] = args?.fleetId;
            resourceInputs["queueId"] = args?.queueId;
        } else {
            resourceInputs["farmId"] = undefined /*out*/;
            resourceInputs["fleetId"] = undefined /*out*/;
            resourceInputs["queueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["farmId", "fleetId", "queueId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(QueueFleetAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a QueueFleetAssociation resource.
 */
export interface QueueFleetAssociationArgs {
    /**
     * The identifier of the farm that contains the queue and the fleet.
     */
    farmId: pulumi.Input<string>;
    /**
     * The fleet ID.
     */
    fleetId: pulumi.Input<string>;
    /**
     * The queue ID.
     */
    queueId: pulumi.Input<string>;
}
