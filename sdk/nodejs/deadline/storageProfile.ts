// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Deadline::StorageProfile Resource Type
 */
export class StorageProfile extends pulumi.CustomResource {
    /**
     * Get an existing StorageProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StorageProfile {
        return new StorageProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:deadline:StorageProfile';

    /**
     * Returns true if the given object is an instance of StorageProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageProfile.__pulumiType;
    }

    /**
     * The display name of the storage profile summary to update.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The unique identifier of the farm that contains the storage profile.
     */
    declare public readonly farmId: pulumi.Output<string>;
    /**
     * Operating system specific file system path to the storage location.
     */
    declare public readonly fileSystemLocations: pulumi.Output<outputs.deadline.StorageProfileFileSystemLocation[] | undefined>;
    /**
     * The operating system (OS) family.
     */
    declare public readonly osFamily: pulumi.Output<enums.deadline.StorageProfileOperatingSystemFamily>;
    /**
     * The storage profile ID.
     */
    declare public /*out*/ readonly storageProfileId: pulumi.Output<string>;

    /**
     * Create a StorageProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.farmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'farmId'");
            }
            if (args?.osFamily === undefined && !opts.urn) {
                throw new Error("Missing required property 'osFamily'");
            }
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["farmId"] = args?.farmId;
            resourceInputs["fileSystemLocations"] = args?.fileSystemLocations;
            resourceInputs["osFamily"] = args?.osFamily;
            resourceInputs["storageProfileId"] = undefined /*out*/;
        } else {
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["farmId"] = undefined /*out*/;
            resourceInputs["fileSystemLocations"] = undefined /*out*/;
            resourceInputs["osFamily"] = undefined /*out*/;
            resourceInputs["storageProfileId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["farmId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(StorageProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a StorageProfile resource.
 */
export interface StorageProfileArgs {
    /**
     * The display name of the storage profile summary to update.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    displayName: pulumi.Input<string>;
    /**
     * The unique identifier of the farm that contains the storage profile.
     */
    farmId: pulumi.Input<string>;
    /**
     * Operating system specific file system path to the storage location.
     */
    fileSystemLocations?: pulumi.Input<pulumi.Input<inputs.deadline.StorageProfileFileSystemLocationArgs>[]>;
    /**
     * The operating system (OS) family.
     */
    osFamily: pulumi.Input<enums.deadline.StorageProfileOperatingSystemFamily>;
}
