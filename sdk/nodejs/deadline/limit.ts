// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Deadline::Limit Resource Type
 */
export class Limit extends pulumi.CustomResource {
    /**
     * Get an existing Limit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Limit {
        return new Limit(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:deadline:Limit';

    /**
     * Returns true if the given object is an instance of Limit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Limit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Limit.__pulumiType;
    }

    /**
     * The value that you specify as the `name` in the `amounts` field of the `hostRequirements` in a step of a job template to declare the limit requirement.
     */
    declare public readonly amountRequirementName: pulumi.Output<string>;
    /**
     * The number of resources from the limit that are being used by jobs. The result is delayed and may not be the count at the time that you called the operation.
     */
    declare public /*out*/ readonly currentCount: pulumi.Output<number>;
    /**
     * A description of the limit. A clear description helps you identify the purpose of the limit.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the limit used in lists to identify the limit.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The unique identifier of the farm that contains the limit.
     */
    declare public readonly farmId: pulumi.Output<string>;
    /**
     * The unique identifier of the limit.
     */
    declare public /*out*/ readonly limitId: pulumi.Output<string>;
    /**
     * The maximum number of resources constrained by this limit. When all of the resources are in use, steps that require the limit won't be scheduled until the resource is available.
     *
     * The `maxValue` must not be 0. If the value is -1, there is no restriction on the number of resources that can be acquired for this limit.
     */
    declare public readonly maxCount: pulumi.Output<number>;

    /**
     * Create a Limit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LimitArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.amountRequirementName === undefined && !opts.urn) {
                throw new Error("Missing required property 'amountRequirementName'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.farmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'farmId'");
            }
            if (args?.maxCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxCount'");
            }
            resourceInputs["amountRequirementName"] = args?.amountRequirementName;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["farmId"] = args?.farmId;
            resourceInputs["maxCount"] = args?.maxCount;
            resourceInputs["currentCount"] = undefined /*out*/;
            resourceInputs["limitId"] = undefined /*out*/;
        } else {
            resourceInputs["amountRequirementName"] = undefined /*out*/;
            resourceInputs["currentCount"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["farmId"] = undefined /*out*/;
            resourceInputs["limitId"] = undefined /*out*/;
            resourceInputs["maxCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["amountRequirementName", "farmId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Limit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Limit resource.
 */
export interface LimitArgs {
    /**
     * The value that you specify as the `name` in the `amounts` field of the `hostRequirements` in a step of a job template to declare the limit requirement.
     */
    amountRequirementName: pulumi.Input<string>;
    /**
     * A description of the limit. A clear description helps you identify the purpose of the limit.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the limit used in lists to identify the limit.
     *
     * > This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.
     */
    displayName: pulumi.Input<string>;
    /**
     * The unique identifier of the farm that contains the limit.
     */
    farmId: pulumi.Input<string>;
    /**
     * The maximum number of resources constrained by this limit. When all of the resources are in use, steps that require the limit won't be scheduled until the resource is available.
     *
     * The `maxValue` must not be 0. If the value is -1, there is no restriction on the number of resources that can be acquired for this limit.
     */
    maxCount: pulumi.Input<number>;
}
