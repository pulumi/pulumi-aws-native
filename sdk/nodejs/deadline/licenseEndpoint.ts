// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Deadline::LicenseEndpoint Resource Type
 */
export class LicenseEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing LicenseEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LicenseEndpoint {
        return new LicenseEndpoint(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:deadline:LicenseEndpoint';

    /**
     * Returns true if the given object is an instance of LicenseEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseEndpoint.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the license endpoint.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The DNS name of the license server endpoint.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * The license endpoint ID.
     */
    public /*out*/ readonly licenseEndpointId!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon EC2 security group that controls access to the license endpoint.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * The status of the license endpoint.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.deadline.LicenseEndpointStatus>;
    /**
     * The status message of the license endpoint.
     */
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;
    /**
     * Identifies the VPC subnets that can connect to a license endpoint.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The VPC (virtual private cloud) ID associated with the license endpoint.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a LicenseEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseEndpointArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["licenseEndpointId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["licenseEndpointId"] = undefined /*out*/;
            resourceInputs["securityGroupIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["securityGroupIds[*]", "subnetIds[*]", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LicenseEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LicenseEndpoint resource.
 */
export interface LicenseEndpointArgs {
    /**
     * The identifier of the Amazon EC2 security group that controls access to the license endpoint.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifies the VPC subnets that can connect to a license endpoint.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The VPC (virtual private cloud) ID associated with the license endpoint.
     */
    vpcId: pulumi.Input<string>;
}
