// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Transfer::Profile
 */
export class Profile extends pulumi.CustomResource {
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Profile {
        return new Profile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:transfer:Profile';

    /**
     * Returns true if the given object is an instance of Profile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Profile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Profile.__pulumiType;
    }

    /**
     * Specifies the unique Amazon Resource Name (ARN) for the profile.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * AS2 identifier agreed with a trading partner.
     */
    public readonly as2Id!: pulumi.Output<string>;
    /**
     * List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
     */
    public readonly certificateIds!: pulumi.Output<string[] | undefined>;
    /**
     * A unique identifier for the profile
     */
    public /*out*/ readonly profileId!: pulumi.Output<string>;
    /**
     * Enum specifying whether the profile is local or associated with a trading partner.
     */
    public readonly profileType!: pulumi.Output<enums.transfer.ProfileType>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.transfer.ProfileTag[] | undefined>;

    /**
     * Create a Profile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.as2Id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as2Id'");
            }
            if ((!args || args.profileType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileType'");
            }
            resourceInputs["as2Id"] = args ? args.as2Id : undefined;
            resourceInputs["certificateIds"] = args ? args.certificateIds : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["as2Id"] = undefined /*out*/;
            resourceInputs["certificateIds"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
            resourceInputs["profileType"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Profile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Profile resource.
 */
export interface ProfileArgs {
    /**
     * AS2 identifier agreed with a trading partner.
     */
    as2Id: pulumi.Input<string>;
    /**
     * List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.
     */
    certificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enum specifying whether the profile is local or associated with a trading partner.
     */
    profileType: pulumi.Input<enums.transfer.ProfileType>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.transfer.ProfileTagArgs>[]>;
}
