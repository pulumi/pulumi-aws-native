// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Transfer::Server
 *
 * @deprecated Server is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Server {
        pulumi.log.warn("Server is deprecated: Server is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Server(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:transfer:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly endpointDetails!: pulumi.Output<outputs.transfer.ServerEndpointDetails | undefined>;
    public readonly endpointType!: pulumi.Output<string | undefined>;
    public readonly identityProviderDetails!: pulumi.Output<outputs.transfer.ServerIdentityProviderDetails | undefined>;
    public readonly identityProviderType!: pulumi.Output<string | undefined>;
    public readonly loggingRole!: pulumi.Output<string | undefined>;
    public readonly protocolDetails!: pulumi.Output<outputs.transfer.ServerProtocolDetails | undefined>;
    public readonly protocols!: pulumi.Output<outputs.transfer.ServerProtocol[] | undefined>;
    public readonly securityPolicyName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.transfer.ServerTag[] | undefined>;
    public readonly workflowDetails!: pulumi.Output<outputs.transfer.ServerWorkflowDetails | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Server is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Server is deprecated: Server is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["certificate"] = args ? args.certificate : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["endpointDetails"] = args ? args.endpointDetails : undefined;
            inputs["endpointType"] = args ? args.endpointType : undefined;
            inputs["identityProviderDetails"] = args ? args.identityProviderDetails : undefined;
            inputs["identityProviderType"] = args ? args.identityProviderType : undefined;
            inputs["loggingRole"] = args ? args.loggingRole : undefined;
            inputs["protocolDetails"] = args ? args.protocolDetails : undefined;
            inputs["protocols"] = args ? args.protocols : undefined;
            inputs["securityPolicyName"] = args ? args.securityPolicyName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["workflowDetails"] = args ? args.workflowDetails : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["serverId"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["certificate"] = undefined /*out*/;
            inputs["domain"] = undefined /*out*/;
            inputs["endpointDetails"] = undefined /*out*/;
            inputs["endpointType"] = undefined /*out*/;
            inputs["identityProviderDetails"] = undefined /*out*/;
            inputs["identityProviderType"] = undefined /*out*/;
            inputs["loggingRole"] = undefined /*out*/;
            inputs["protocolDetails"] = undefined /*out*/;
            inputs["protocols"] = undefined /*out*/;
            inputs["securityPolicyName"] = undefined /*out*/;
            inputs["serverId"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["workflowDetails"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Server.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    certificate?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    endpointDetails?: pulumi.Input<inputs.transfer.ServerEndpointDetailsArgs>;
    endpointType?: pulumi.Input<string>;
    identityProviderDetails?: pulumi.Input<inputs.transfer.ServerIdentityProviderDetailsArgs>;
    identityProviderType?: pulumi.Input<string>;
    loggingRole?: pulumi.Input<string>;
    protocolDetails?: pulumi.Input<inputs.transfer.ServerProtocolDetailsArgs>;
    protocols?: pulumi.Input<pulumi.Input<inputs.transfer.ServerProtocolArgs>[]>;
    securityPolicyName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.transfer.ServerTagArgs>[]>;
    workflowDetails?: pulumi.Input<inputs.transfer.ServerWorkflowDetailsArgs>;
}
