// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Transfer::Certificate
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:transfer:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Specifies the active date for the certificate.
     */
    public readonly activeDate!: pulumi.Output<string | undefined>;
    /**
     * Specifies the unique Amazon Resource Name (ARN) for the agreement.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Specifies the certificate body to be imported.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * Specifies the certificate chain to be imported.
     */
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    /**
     * A unique identifier for the certificate.
     */
    public /*out*/ readonly certificateId!: pulumi.Output<string>;
    /**
     * A textual description for the certificate.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the inactive date for the certificate.
     */
    public readonly inactiveDate!: pulumi.Output<string | undefined>;
    /**
     * Specifies the not after date for the certificate.
     */
    public /*out*/ readonly notAfterDate!: pulumi.Output<string>;
    /**
     * Specifies the not before date for the certificate.
     */
    public /*out*/ readonly notBeforeDate!: pulumi.Output<string>;
    /**
     * Specifies the private key for the certificate.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies Certificate's serial.
     */
    public /*out*/ readonly serial!: pulumi.Output<string>;
    /**
     * A status description for the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.transfer.CertificateStatus>;
    /**
     * Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
     */
    public readonly tags!: pulumi.Output<outputs.transfer.CertificateTag[] | undefined>;
    /**
     * Describing the type of certificate. With or without a private key.
     */
    public /*out*/ readonly type!: pulumi.Output<enums.transfer.CertificateType>;
    /**
     * Specifies the usage type for the certificate.
     */
    public readonly usage!: pulumi.Output<enums.transfer.CertificateUsage>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.usage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usage'");
            }
            resourceInputs["activeDate"] = args ? args.activeDate : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inactiveDate"] = args ? args.inactiveDate : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["notAfterDate"] = undefined /*out*/;
            resourceInputs["notBeforeDate"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["activeDate"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateChain"] = undefined /*out*/;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["inactiveDate"] = undefined /*out*/;
            resourceInputs["notAfterDate"] = undefined /*out*/;
            resourceInputs["notBeforeDate"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["usage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["certificate", "certificateChain", "privateKey"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Specifies the active date for the certificate.
     */
    activeDate?: pulumi.Input<string>;
    /**
     * Specifies the certificate body to be imported.
     */
    certificate: pulumi.Input<string>;
    /**
     * Specifies the certificate chain to be imported.
     */
    certificateChain?: pulumi.Input<string>;
    /**
     * A textual description for the certificate.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the inactive date for the certificate.
     */
    inactiveDate?: pulumi.Input<string>;
    /**
     * Specifies the private key for the certificate.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.transfer.CertificateTagArgs>[]>;
    /**
     * Specifies the usage type for the certificate.
     */
    usage: pulumi.Input<enums.transfer.CertificateUsage>;
}
