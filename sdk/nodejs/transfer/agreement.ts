// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Transfer::Agreement
 */
export class Agreement extends pulumi.CustomResource {
    /**
     * Get an existing Agreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Agreement {
        return new Agreement(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:transfer:Agreement';

    /**
     * Returns true if the given object is an instance of Agreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Agreement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agreement.__pulumiType;
    }

    /**
     * Specifies the access role for the agreement.
     */
    declare public readonly accessRole: pulumi.Output<string>;
    /**
     * A unique identifier for the agreement.
     */
    declare public /*out*/ readonly agreementId: pulumi.Output<string>;
    /**
     * Specifies the unique Amazon Resource Name (ARN) for the agreement.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Specifies the base directory for the agreement.
     */
    declare public readonly baseDirectory: pulumi.Output<string | undefined>;
    /**
     * Specifies a separate directory for each type of file to store for an AS2 message.
     */
    declare public readonly customDirectories: pulumi.Output<outputs.transfer.CustomDirectoriesProperties | undefined>;
    /**
     * A textual description for the agreement.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enforce an AS2 message is signed for this agreement.
     */
    declare public readonly enforceMessageSigning: pulumi.Output<enums.transfer.AgreementEnforceMessageSigning | undefined>;
    /**
     * A unique identifier for the local profile.
     */
    declare public readonly localProfileId: pulumi.Output<string>;
    /**
     * A unique identifier for the partner profile.
     */
    declare public readonly partnerProfileId: pulumi.Output<string>;
    /**
     * Specifies whether to preserve the filename received for this agreement.
     */
    declare public readonly preserveFilename: pulumi.Output<enums.transfer.AgreementPreserveFilename | undefined>;
    /**
     * A unique identifier for the server.
     */
    declare public readonly serverId: pulumi.Output<string>;
    /**
     * Specifies the status of the agreement.
     */
    declare public readonly status: pulumi.Output<enums.transfer.AgreementStatus | undefined>;
    /**
     * Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Agreement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgreementArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.accessRole === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessRole'");
            }
            if (args?.localProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'localProfileId'");
            }
            if (args?.partnerProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'partnerProfileId'");
            }
            if (args?.serverId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["accessRole"] = args?.accessRole;
            resourceInputs["baseDirectory"] = args?.baseDirectory;
            resourceInputs["customDirectories"] = args?.customDirectories;
            resourceInputs["description"] = args?.description;
            resourceInputs["enforceMessageSigning"] = args?.enforceMessageSigning;
            resourceInputs["localProfileId"] = args?.localProfileId;
            resourceInputs["partnerProfileId"] = args?.partnerProfileId;
            resourceInputs["preserveFilename"] = args?.preserveFilename;
            resourceInputs["serverId"] = args?.serverId;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["agreementId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["accessRole"] = undefined /*out*/;
            resourceInputs["agreementId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["baseDirectory"] = undefined /*out*/;
            resourceInputs["customDirectories"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enforceMessageSigning"] = undefined /*out*/;
            resourceInputs["localProfileId"] = undefined /*out*/;
            resourceInputs["partnerProfileId"] = undefined /*out*/;
            resourceInputs["preserveFilename"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["serverId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Agreement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Agreement resource.
 */
export interface AgreementArgs {
    /**
     * Specifies the access role for the agreement.
     */
    accessRole: pulumi.Input<string>;
    /**
     * Specifies the base directory for the agreement.
     */
    baseDirectory?: pulumi.Input<string>;
    /**
     * Specifies a separate directory for each type of file to store for an AS2 message.
     */
    customDirectories?: pulumi.Input<inputs.transfer.CustomDirectoriesPropertiesArgs>;
    /**
     * A textual description for the agreement.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enforce an AS2 message is signed for this agreement.
     */
    enforceMessageSigning?: pulumi.Input<enums.transfer.AgreementEnforceMessageSigning>;
    /**
     * A unique identifier for the local profile.
     */
    localProfileId: pulumi.Input<string>;
    /**
     * A unique identifier for the partner profile.
     */
    partnerProfileId: pulumi.Input<string>;
    /**
     * Specifies whether to preserve the filename received for this agreement.
     */
    preserveFilename?: pulumi.Input<enums.transfer.AgreementPreserveFilename>;
    /**
     * A unique identifier for the server.
     */
    serverId: pulumi.Input<string>;
    /**
     * Specifies the status of the agreement.
     */
    status?: pulumi.Input<enums.transfer.AgreementStatus>;
    /**
     * Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
