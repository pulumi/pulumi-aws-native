// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessGrantArgs } from "./accessGrant";
export type AccessGrant = import("./accessGrant").AccessGrant;
export const AccessGrant: typeof import("./accessGrant").AccessGrant = null as any;
utilities.lazyLoad(exports, ["AccessGrant"], () => require("./accessGrant"));

export { AccessGrantsInstanceArgs } from "./accessGrantsInstance";
export type AccessGrantsInstance = import("./accessGrantsInstance").AccessGrantsInstance;
export const AccessGrantsInstance: typeof import("./accessGrantsInstance").AccessGrantsInstance = null as any;
utilities.lazyLoad(exports, ["AccessGrantsInstance"], () => require("./accessGrantsInstance"));

export { AccessGrantsLocationArgs } from "./accessGrantsLocation";
export type AccessGrantsLocation = import("./accessGrantsLocation").AccessGrantsLocation;
export const AccessGrantsLocation: typeof import("./accessGrantsLocation").AccessGrantsLocation = null as any;
utilities.lazyLoad(exports, ["AccessGrantsLocation"], () => require("./accessGrantsLocation"));

export { AccessPointArgs } from "./accessPoint";
export type AccessPoint = import("./accessPoint").AccessPoint;
export const AccessPoint: typeof import("./accessPoint").AccessPoint = null as any;
utilities.lazyLoad(exports, ["AccessPoint"], () => require("./accessPoint"));

export { BucketArgs } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { BucketPolicyArgs } from "./bucketPolicy";
export type BucketPolicy = import("./bucketPolicy").BucketPolicy;
export const BucketPolicy: typeof import("./bucketPolicy").BucketPolicy = null as any;
utilities.lazyLoad(exports, ["BucketPolicy"], () => require("./bucketPolicy"));

export { GetAccessGrantArgs, GetAccessGrantResult, GetAccessGrantOutputArgs } from "./getAccessGrant";
export const getAccessGrant: typeof import("./getAccessGrant").getAccessGrant = null as any;
export const getAccessGrantOutput: typeof import("./getAccessGrant").getAccessGrantOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGrant","getAccessGrantOutput"], () => require("./getAccessGrant"));

export { GetAccessGrantsInstanceArgs, GetAccessGrantsInstanceResult, GetAccessGrantsInstanceOutputArgs } from "./getAccessGrantsInstance";
export const getAccessGrantsInstance: typeof import("./getAccessGrantsInstance").getAccessGrantsInstance = null as any;
export const getAccessGrantsInstanceOutput: typeof import("./getAccessGrantsInstance").getAccessGrantsInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGrantsInstance","getAccessGrantsInstanceOutput"], () => require("./getAccessGrantsInstance"));

export { GetAccessGrantsLocationArgs, GetAccessGrantsLocationResult, GetAccessGrantsLocationOutputArgs } from "./getAccessGrantsLocation";
export const getAccessGrantsLocation: typeof import("./getAccessGrantsLocation").getAccessGrantsLocation = null as any;
export const getAccessGrantsLocationOutput: typeof import("./getAccessGrantsLocation").getAccessGrantsLocationOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGrantsLocation","getAccessGrantsLocationOutput"], () => require("./getAccessGrantsLocation"));

export { GetAccessPointArgs, GetAccessPointResult, GetAccessPointOutputArgs } from "./getAccessPoint";
export const getAccessPoint: typeof import("./getAccessPoint").getAccessPoint = null as any;
export const getAccessPointOutput: typeof import("./getAccessPoint").getAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPoint","getAccessPointOutput"], () => require("./getAccessPoint"));

export { GetBucketArgs, GetBucketResult, GetBucketOutputArgs } from "./getBucket";
export const getBucket: typeof import("./getBucket").getBucket = null as any;
export const getBucketOutput: typeof import("./getBucket").getBucketOutput = null as any;
utilities.lazyLoad(exports, ["getBucket","getBucketOutput"], () => require("./getBucket"));

export { GetBucketPolicyArgs, GetBucketPolicyResult, GetBucketPolicyOutputArgs } from "./getBucketPolicy";
export const getBucketPolicy: typeof import("./getBucketPolicy").getBucketPolicy = null as any;
export const getBucketPolicyOutput: typeof import("./getBucketPolicy").getBucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBucketPolicy","getBucketPolicyOutput"], () => require("./getBucketPolicy"));

export { GetMultiRegionAccessPointArgs, GetMultiRegionAccessPointResult, GetMultiRegionAccessPointOutputArgs } from "./getMultiRegionAccessPoint";
export const getMultiRegionAccessPoint: typeof import("./getMultiRegionAccessPoint").getMultiRegionAccessPoint = null as any;
export const getMultiRegionAccessPointOutput: typeof import("./getMultiRegionAccessPoint").getMultiRegionAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getMultiRegionAccessPoint","getMultiRegionAccessPointOutput"], () => require("./getMultiRegionAccessPoint"));

export { GetMultiRegionAccessPointPolicyArgs, GetMultiRegionAccessPointPolicyResult, GetMultiRegionAccessPointPolicyOutputArgs } from "./getMultiRegionAccessPointPolicy";
export const getMultiRegionAccessPointPolicy: typeof import("./getMultiRegionAccessPointPolicy").getMultiRegionAccessPointPolicy = null as any;
export const getMultiRegionAccessPointPolicyOutput: typeof import("./getMultiRegionAccessPointPolicy").getMultiRegionAccessPointPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMultiRegionAccessPointPolicy","getMultiRegionAccessPointPolicyOutput"], () => require("./getMultiRegionAccessPointPolicy"));

export { GetStorageLensGroupArgs, GetStorageLensGroupResult, GetStorageLensGroupOutputArgs } from "./getStorageLensGroup";
export const getStorageLensGroup: typeof import("./getStorageLensGroup").getStorageLensGroup = null as any;
export const getStorageLensGroupOutput: typeof import("./getStorageLensGroup").getStorageLensGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageLensGroup","getStorageLensGroupOutput"], () => require("./getStorageLensGroup"));

export { MultiRegionAccessPointArgs } from "./multiRegionAccessPoint";
export type MultiRegionAccessPoint = import("./multiRegionAccessPoint").MultiRegionAccessPoint;
export const MultiRegionAccessPoint: typeof import("./multiRegionAccessPoint").MultiRegionAccessPoint = null as any;
utilities.lazyLoad(exports, ["MultiRegionAccessPoint"], () => require("./multiRegionAccessPoint"));

export { MultiRegionAccessPointPolicyArgs } from "./multiRegionAccessPointPolicy";
export type MultiRegionAccessPointPolicy = import("./multiRegionAccessPointPolicy").MultiRegionAccessPointPolicy;
export const MultiRegionAccessPointPolicy: typeof import("./multiRegionAccessPointPolicy").MultiRegionAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["MultiRegionAccessPointPolicy"], () => require("./multiRegionAccessPointPolicy"));

export { StorageLensArgs } from "./storageLens";
export type StorageLens = import("./storageLens").StorageLens;
export const StorageLens: typeof import("./storageLens").StorageLens = null as any;
utilities.lazyLoad(exports, ["StorageLens"], () => require("./storageLens"));

export { StorageLensGroupArgs } from "./storageLensGroup";
export type StorageLensGroup = import("./storageLensGroup").StorageLensGroup;
export const StorageLensGroup: typeof import("./storageLensGroup").StorageLensGroup = null as any;
utilities.lazyLoad(exports, ["StorageLensGroup"], () => require("./storageLensGroup"));


// Export enums:
export * from "../types/enums/s3";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:s3:AccessGrant":
                return new AccessGrant(name, <any>undefined, { urn })
            case "aws-native:s3:AccessGrantsInstance":
                return new AccessGrantsInstance(name, <any>undefined, { urn })
            case "aws-native:s3:AccessGrantsLocation":
                return new AccessGrantsLocation(name, <any>undefined, { urn })
            case "aws-native:s3:AccessPoint":
                return new AccessPoint(name, <any>undefined, { urn })
            case "aws-native:s3:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "aws-native:s3:BucketPolicy":
                return new BucketPolicy(name, <any>undefined, { urn })
            case "aws-native:s3:MultiRegionAccessPoint":
                return new MultiRegionAccessPoint(name, <any>undefined, { urn })
            case "aws-native:s3:MultiRegionAccessPointPolicy":
                return new MultiRegionAccessPointPolicy(name, <any>undefined, { urn })
            case "aws-native:s3:StorageLens":
                return new StorageLens(name, <any>undefined, { urn })
            case "aws-native:s3:StorageLensGroup":
                return new StorageLensGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "s3", _module)
