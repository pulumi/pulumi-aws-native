// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Evidently::Experiment.
 */
export class Experiment extends pulumi.CustomResource {
    /**
     * Get an existing Experiment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Experiment {
        return new Experiment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:evidently:Experiment';

    /**
     * Returns true if the given object is an instance of Experiment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Experiment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Experiment.__pulumiType;
    }

    /**
     * The ARN of the experiment. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/experiment/myExperiment`
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * An optional description of the experiment.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal. You can use up to three metrics in an experiment.
     */
    declare public readonly metricGoals: pulumi.Output<outputs.evidently.ExperimentMetricGoalObject[]>;
    /**
     * A name for the new experiment.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
     */
    declare public readonly onlineAbConfig: pulumi.Output<outputs.evidently.ExperimentOnlineAbConfigObject>;
    /**
     * The name or the ARN of the project where this experiment is to be created.
     */
    declare public readonly project: pulumi.Output<string>;
    /**
     * When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
     */
    declare public readonly randomizationSalt: pulumi.Output<string | undefined>;
    /**
     * Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
     */
    declare public readonly removeSegment: pulumi.Output<boolean | undefined>;
    /**
     * Start Experiment. Default is False
     */
    declare public readonly runningStatus: pulumi.Output<outputs.evidently.ExperimentRunningStatusObject | undefined>;
    /**
     * The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
     *
     * This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
     */
    declare public readonly samplingRate: pulumi.Output<number | undefined>;
    /**
     * Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
     *
     * For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
     */
    declare public readonly segment: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * An array of structures that describe the configuration of each feature variation used in the experiment.
     */
    declare public readonly treatments: pulumi.Output<outputs.evidently.ExperimentTreatmentObject[]>;

    /**
     * Create a Experiment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExperimentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.metricGoals === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricGoals'");
            }
            if (args?.onlineAbConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'onlineAbConfig'");
            }
            if (args?.project === undefined && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if (args?.treatments === undefined && !opts.urn) {
                throw new Error("Missing required property 'treatments'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["metricGoals"] = args?.metricGoals;
            resourceInputs["name"] = args?.name;
            resourceInputs["onlineAbConfig"] = args?.onlineAbConfig;
            resourceInputs["project"] = args?.project;
            resourceInputs["randomizationSalt"] = args?.randomizationSalt;
            resourceInputs["removeSegment"] = args?.removeSegment;
            resourceInputs["runningStatus"] = args?.runningStatus;
            resourceInputs["samplingRate"] = args?.samplingRate;
            resourceInputs["segment"] = args?.segment;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["treatments"] = args?.treatments;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["metricGoals"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["onlineAbConfig"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["randomizationSalt"] = undefined /*out*/;
            resourceInputs["removeSegment"] = undefined /*out*/;
            resourceInputs["runningStatus"] = undefined /*out*/;
            resourceInputs["samplingRate"] = undefined /*out*/;
            resourceInputs["segment"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["treatments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "project"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Experiment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Experiment resource.
 */
export interface ExperimentArgs {
    /**
     * An optional description of the experiment.
     */
    description?: pulumi.Input<string>;
    /**
     * An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal. You can use up to three metrics in an experiment.
     */
    metricGoals: pulumi.Input<pulumi.Input<inputs.evidently.ExperimentMetricGoalObjectArgs>[]>;
    /**
     * A name for the new experiment.
     */
    name?: pulumi.Input<string>;
    /**
     * A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
     */
    onlineAbConfig: pulumi.Input<inputs.evidently.ExperimentOnlineAbConfigObjectArgs>;
    /**
     * The name or the ARN of the project where this experiment is to be created.
     */
    project: pulumi.Input<string>;
    /**
     * When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
     */
    randomizationSalt?: pulumi.Input<string>;
    /**
     * Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
     */
    removeSegment?: pulumi.Input<boolean>;
    /**
     * Start Experiment. Default is False
     */
    runningStatus?: pulumi.Input<inputs.evidently.ExperimentRunningStatusObjectArgs>;
    /**
     * The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
     *
     * This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
     */
    samplingRate?: pulumi.Input<number>;
    /**
     * Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
     *
     * For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
     */
    segment?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * An array of structures that describe the configuration of each feature variation used in the experiment.
     */
    treatments: pulumi.Input<pulumi.Input<inputs.evidently.ExperimentTreatmentObjectArgs>[]>;
}
