// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for Greengrass component version.
 */
export function getComponentVersion(args: GetComponentVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetComponentVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:greengrassv2:getComponentVersion", {
        "arn": args.arn,
    }, opts);
}

export interface GetComponentVersionArgs {
    /**
     * The ARN of the component version.
     */
    arn: string;
}

export interface GetComponentVersionResult {
    /**
     * The ARN of the component version.
     */
    readonly arn?: string;
    /**
     * The name of the component.
     */
    readonly componentName?: string;
    /**
     * The version of the component.
     */
    readonly componentVersion?: string;
    /**
     * Application-specific metadata to attach to the component version. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
     *
     * This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
     *
     * ```json
     * "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value"
     * }
     * ```
     */
    readonly tags?: {[key: string]: string};
}
/**
 * Resource for Greengrass component version.
 */
export function getComponentVersionOutput(args: GetComponentVersionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetComponentVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:greengrassv2:getComponentVersion", {
        "arn": args.arn,
    }, opts);
}

export interface GetComponentVersionOutputArgs {
    /**
     * The ARN of the component version.
     */
    arn: pulumi.Input<string>;
}
