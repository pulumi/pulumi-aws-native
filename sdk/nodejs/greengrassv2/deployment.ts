// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for Greengrass V2 deployment.
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:greengrassv2:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
     */
    declare public readonly components: pulumi.Output<{[key: string]: outputs.greengrassv2.DeploymentComponentDeploymentSpecification} | undefined>;
    /**
     * The ID of the deployment.
     */
    declare public /*out*/ readonly deploymentId: pulumi.Output<string>;
    /**
     * The name of the deployment.
     */
    declare public readonly deploymentName: pulumi.Output<string | undefined>;
    /**
     * The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.
     */
    declare public readonly deploymentPolicies: pulumi.Output<outputs.greengrassv2.DeploymentPolicies | undefined>;
    /**
     * The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.
     */
    declare public readonly iotJobConfiguration: pulumi.Output<outputs.greengrassv2.DeploymentIoTJobConfiguration | undefined>;
    /**
     * The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
     */
    declare public readonly parentTargetArn: pulumi.Output<string | undefined>;
    /**
     * Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
     *
     * This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
     *
     * ```json
     * "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value"
     * }
     * ```
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ARN of the target AWS IoT thing or thing group.
     */
    declare public readonly targetArn: pulumi.Output<string>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.targetArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetArn'");
            }
            resourceInputs["components"] = args?.components;
            resourceInputs["deploymentName"] = args?.deploymentName;
            resourceInputs["deploymentPolicies"] = args?.deploymentPolicies;
            resourceInputs["iotJobConfiguration"] = args?.iotJobConfiguration;
            resourceInputs["parentTargetArn"] = args?.parentTargetArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetArn"] = args?.targetArn;
            resourceInputs["deploymentId"] = undefined /*out*/;
        } else {
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["deploymentName"] = undefined /*out*/;
            resourceInputs["deploymentPolicies"] = undefined /*out*/;
            resourceInputs["iotJobConfiguration"] = undefined /*out*/;
            resourceInputs["parentTargetArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["components.*", "deploymentName", "deploymentPolicies", "iotJobConfiguration", "parentTargetArn", "targetArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.
     */
    components?: pulumi.Input<{[key: string]: pulumi.Input<inputs.greengrassv2.DeploymentComponentDeploymentSpecificationArgs>}>;
    /**
     * The name of the deployment.
     */
    deploymentName?: pulumi.Input<string>;
    /**
     * The deployment policies for the deployment. These policies define how the deployment updates components and handles failure.
     */
    deploymentPolicies?: pulumi.Input<inputs.greengrassv2.DeploymentPoliciesArgs>;
    /**
     * The job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.
     */
    iotJobConfiguration?: pulumi.Input<inputs.greengrassv2.DeploymentIoTJobConfigurationArgs>;
    /**
     * The parent deployment's [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) for a subdeployment.
     */
    parentTargetArn?: pulumi.Input<string>;
    /**
     * Application-specific metadata to attach to the deployment. You can use tags in IAM policies to control access to AWS IoT Greengrass resources. You can also use tags to categorize your resources. For more information, see [Tag your AWS IoT Greengrass Version 2 resources](https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html) in the *AWS IoT Greengrass V2 Developer Guide* .
     *
     * This `Json` property type is processed as a map of key-value pairs. It uses the following format, which is different from most `Tags` implementations in AWS CloudFormation templates.
     *
     * ```json
     * "Tags": { "KeyName0": "value", "KeyName1": "value", "KeyName2": "value"
     * }
     * ```
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ARN of the target AWS IoT thing or thing group.
     */
    targetArn: pulumi.Input<string>;
}
