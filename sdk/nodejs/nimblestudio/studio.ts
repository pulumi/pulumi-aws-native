// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::NimbleStudio::Studio
 */
export class Studio extends pulumi.CustomResource {
    /**
     * Get an existing Studio resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Studio {
        return new Studio(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:nimblestudio:Studio';

    /**
     * Returns true if the given object is an instance of Studio.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Studio {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Studio.__pulumiType;
    }

    /**
     * The IAM role that studio admins assume when logging in to the Nimble Studio portal.
     */
    public readonly adminRoleArn!: pulumi.Output<string>;
    /**
     * A friendly name for the studio.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The AWS Region where the studio resource is located. For example, `us-west-2` .
     */
    public /*out*/ readonly homeRegion!: pulumi.Output<string>;
    /**
     * The IAM Identity Center application client ID that is used to integrate with IAM Identity Center , which enables IAM Identity Center users to log into the  portal.
     */
    public /*out*/ readonly ssoClientId!: pulumi.Output<string>;
    /**
     * Configuration of the encryption method that is used for the studio.
     */
    public readonly studioEncryptionConfiguration!: pulumi.Output<outputs.nimblestudio.StudioEncryptionConfiguration | undefined>;
    /**
     * The unique identifier for the studio resource.
     */
    public /*out*/ readonly studioId!: pulumi.Output<string>;
    /**
     * The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.
     */
    public readonly studioName!: pulumi.Output<string>;
    /**
     * The unique identifier for the studio resource.
     */
    public /*out*/ readonly studioUrl!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The IAM role that studio users assume when logging in to the Nimble Studio portal.
     */
    public readonly userRoleArn!: pulumi.Output<string>;

    /**
     * Create a Studio resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.adminRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminRoleArn'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.userRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userRoleArn'");
            }
            resourceInputs["adminRoleArn"] = args ? args.adminRoleArn : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["studioEncryptionConfiguration"] = args ? args.studioEncryptionConfiguration : undefined;
            resourceInputs["studioName"] = args ? args.studioName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userRoleArn"] = args ? args.userRoleArn : undefined;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["ssoClientId"] = undefined /*out*/;
            resourceInputs["studioId"] = undefined /*out*/;
            resourceInputs["studioUrl"] = undefined /*out*/;
        } else {
            resourceInputs["adminRoleArn"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["homeRegion"] = undefined /*out*/;
            resourceInputs["ssoClientId"] = undefined /*out*/;
            resourceInputs["studioEncryptionConfiguration"] = undefined /*out*/;
            resourceInputs["studioId"] = undefined /*out*/;
            resourceInputs["studioName"] = undefined /*out*/;
            resourceInputs["studioUrl"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["userRoleArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["studioName", "tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Studio.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Studio resource.
 */
export interface StudioArgs {
    /**
     * The IAM role that studio admins assume when logging in to the Nimble Studio portal.
     */
    adminRoleArn: pulumi.Input<string>;
    /**
     * A friendly name for the studio.
     */
    displayName: pulumi.Input<string>;
    /**
     * Configuration of the encryption method that is used for the studio.
     */
    studioEncryptionConfiguration?: pulumi.Input<inputs.nimblestudio.StudioEncryptionConfigurationArgs>;
    /**
     * The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.
     */
    studioName?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The IAM role that studio users assume when logging in to the Nimble Studio portal.
     */
    userRoleArn: pulumi.Input<string>;
}
