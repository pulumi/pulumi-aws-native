// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Represents a streaming session machine image that can be used to launch a streaming session
 */
export class StreamingImage extends pulumi.CustomResource {
    /**
     * Get an existing StreamingImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StreamingImage {
        return new StreamingImage(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:nimblestudio:StreamingImage';

    /**
     * Returns true if the given object is an instance of StreamingImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamingImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingImage.__pulumiType;
    }

    /**
     * <p>A human-readable description of the streaming image.</p>
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * <p>The ID of an EC2 machine image with which to create this streaming image.</p>
     */
    public readonly ec2ImageId!: pulumi.Output<string>;
    public /*out*/ readonly encryptionConfiguration!: pulumi.Output<outputs.nimblestudio.StreamingImageEncryptionConfiguration>;
    /**
     * <p>The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.</p>
     */
    public /*out*/ readonly eulaIds!: pulumi.Output<string[]>;
    /**
     * <p>A friendly name for a streaming image resource.</p>
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * <p>The owner of the streaming image, either the studioId that contains the streaming image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * <p>The platform of the streaming image, either WINDOWS or LINUX.</p>
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    public /*out*/ readonly streamingImageId!: pulumi.Output<string>;
    /**
     * <p>The studioId. </p>
     */
    public readonly studioId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.nimblestudio.StreamingImageTags | undefined>;

    /**
     * Create a StreamingImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamingImageArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ec2ImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ec2ImageId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.studioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["ec2ImageId"] = args ? args.ec2ImageId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["studioId"] = args ? args.studioId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["encryptionConfiguration"] = undefined /*out*/;
            inputs["eulaIds"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["platform"] = undefined /*out*/;
            inputs["streamingImageId"] = undefined /*out*/;
        } else {
            inputs["description"] = undefined /*out*/;
            inputs["ec2ImageId"] = undefined /*out*/;
            inputs["encryptionConfiguration"] = undefined /*out*/;
            inputs["eulaIds"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["platform"] = undefined /*out*/;
            inputs["streamingImageId"] = undefined /*out*/;
            inputs["studioId"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(StreamingImage.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a StreamingImage resource.
 */
export interface StreamingImageArgs {
    /**
     * <p>A human-readable description of the streaming image.</p>
     */
    description?: pulumi.Input<string>;
    /**
     * <p>The ID of an EC2 machine image with which to create this streaming image.</p>
     */
    ec2ImageId: pulumi.Input<string>;
    /**
     * <p>A friendly name for a streaming image resource.</p>
     */
    name: pulumi.Input<string>;
    /**
     * <p>The studioId. </p>
     */
    studioId: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.nimblestudio.StreamingImageTagsArgs>;
}
