// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Represents a studio component which connects a non-Nimble Studio resource in your account to your studio
 */
export function getStudioComponent(args: GetStudioComponentArgs, opts?: pulumi.InvokeOptions): Promise<GetStudioComponentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:nimblestudio:getStudioComponent", {
        "studioComponentId": args.studioComponentId,
        "studioId": args.studioId,
    }, opts);
}

export interface GetStudioComponentArgs {
    studioComponentId: string;
    /**
     * <p>The studioId. </p>
     */
    studioId: string;
}

export interface GetStudioComponentResult {
    readonly configuration?: outputs.nimblestudio.StudioComponentConfiguration;
    /**
     * <p>The description.</p>
     */
    readonly description?: string;
    /**
     * <p>The EC2 security groups that control access to the studio component.</p>
     */
    readonly ec2SecurityGroupIds?: string[];
    /**
     * <p>Initialization scripts for studio components.</p>
     */
    readonly initializationScripts?: outputs.nimblestudio.StudioComponentInitializationScript[];
    /**
     * <p>The name for the studio component.</p>
     */
    readonly name?: string;
    /**
     * <p>Parameters for the studio component scripts.</p>
     */
    readonly scriptParameters?: outputs.nimblestudio.StudioComponentScriptParameterKeyValue[];
    readonly studioComponentId?: string;
    readonly type?: enums.nimblestudio.StudioComponentType;
}

export function getStudioComponentOutput(args: GetStudioComponentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStudioComponentResult> {
    return pulumi.output(args).apply(a => getStudioComponent(a, opts))
}

export interface GetStudioComponentOutputArgs {
    studioComponentId: pulumi.Input<string>;
    /**
     * <p>The studioId. </p>
     */
    studioId: pulumi.Input<string>;
}
