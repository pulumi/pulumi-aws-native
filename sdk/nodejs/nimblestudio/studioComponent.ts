// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::NimbleStudio::StudioComponent
 */
export class StudioComponent extends pulumi.CustomResource {
    /**
     * Get an existing StudioComponent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StudioComponent {
        return new StudioComponent(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:nimblestudio:StudioComponent';

    /**
     * Returns true if the given object is an instance of StudioComponent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StudioComponent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StudioComponent.__pulumiType;
    }

    /**
     * The configuration of the studio component, based on component type.
     */
    public readonly configuration!: pulumi.Output<outputs.nimblestudio.StudioComponentConfiguration | undefined>;
    /**
     * A human-readable description for the studio component resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The EC2 security groups that control access to the studio component.
     */
    public readonly ec2SecurityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Initialization scripts for studio components.
     */
    public readonly initializationScripts!: pulumi.Output<outputs.nimblestudio.StudioComponentInitializationScript[] | undefined>;
    /**
     * A friendly name for the studio component resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parameters for the studio component scripts.
     */
    public readonly scriptParameters!: pulumi.Output<outputs.nimblestudio.StudioComponentScriptParameterKeyValue[] | undefined>;
    /**
     * The unique identifier for the studio component resource.
     */
    public /*out*/ readonly studioComponentId!: pulumi.Output<string>;
    /**
     * The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.
     */
    public readonly studioId!: pulumi.Output<string>;
    /**
     * The specific subtype of a studio component.
     */
    public readonly subtype!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of the studio component.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a StudioComponent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StudioComponentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.studioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ec2SecurityGroupIds"] = args ? args.ec2SecurityGroupIds : undefined;
            resourceInputs["initializationScripts"] = args ? args.initializationScripts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scriptParameters"] = args ? args.scriptParameters : undefined;
            resourceInputs["studioId"] = args ? args.studioId : undefined;
            resourceInputs["subtype"] = args ? args.subtype : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["studioComponentId"] = undefined /*out*/;
        } else {
            resourceInputs["configuration"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["ec2SecurityGroupIds"] = undefined /*out*/;
            resourceInputs["initializationScripts"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["scriptParameters"] = undefined /*out*/;
            resourceInputs["studioComponentId"] = undefined /*out*/;
            resourceInputs["studioId"] = undefined /*out*/;
            resourceInputs["subtype"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["studioId", "subtype", "tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(StudioComponent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a StudioComponent resource.
 */
export interface StudioComponentArgs {
    /**
     * The configuration of the studio component, based on component type.
     */
    configuration?: pulumi.Input<inputs.nimblestudio.StudioComponentConfigurationArgs>;
    /**
     * A human-readable description for the studio component resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The EC2 security groups that control access to the studio component.
     */
    ec2SecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Initialization scripts for studio components.
     */
    initializationScripts?: pulumi.Input<pulumi.Input<inputs.nimblestudio.StudioComponentInitializationScriptArgs>[]>;
    /**
     * A friendly name for the studio component resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters for the studio component scripts.
     */
    scriptParameters?: pulumi.Input<pulumi.Input<inputs.nimblestudio.StudioComponentScriptParameterKeyValueArgs>[]>;
    /**
     * The unique identifier for a studio resource. In Nimble Studio, all other resources are contained in a studio resource.
     */
    studioId: pulumi.Input<string>;
    /**
     * The specific subtype of a studio component.
     */
    subtype?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     *
     * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the studio component.
     */
    type: pulumi.Input<string>;
}
