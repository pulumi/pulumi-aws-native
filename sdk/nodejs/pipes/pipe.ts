// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Pipes::Pipe Resource Type
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testPipe = new aws_native.pipes.Pipe("testPipe", {
 *     name: "PipeCfnExample",
 *     roleArn: "arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role",
 *     source: "arn:aws:sqs:us-east-1:123456789123:pipeDemoSource",
 *     enrichment: "arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*&#47;POST/pets",
 *     target: "arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testPipe = new aws_native.pipes.Pipe("testPipe", {
 *     name: "PipeCfnExample",
 *     roleArn: "arn:aws:iam::123456789123:role/Pipe-Dev-All-Targets-Dummy-Execution-Role",
 *     source: "arn:aws:sqs:us-east-1:123456789123:pipeDemoSource",
 *     enrichment: "arn:aws:execute-api:us-east-1:123456789123:53eo2i89p9/*&#47;POST/pets",
 *     target: "arn:aws:states:us-east-1:123456789123:stateMachine:PipeTargetStateMachine",
 * });
 *
 * ```
 */
export class Pipe extends pulumi.CustomResource {
    /**
     * Get an existing Pipe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pipe {
        return new Pipe(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:pipes:Pipe';

    /**
     * Returns true if the given object is an instance of Pipe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipe.__pulumiType;
    }

    /**
     * The ARN of the pipe.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The time the pipe was created.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The state the pipe is in.
     */
    public /*out*/ readonly currentState!: pulumi.Output<enums.pipes.PipeState>;
    /**
     * A description of the pipe.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The state the pipe should be in.
     */
    public readonly desiredState!: pulumi.Output<enums.pipes.PipeRequestedPipeState | undefined>;
    /**
     * The ARN of the enrichment resource.
     */
    public readonly enrichment!: pulumi.Output<string | undefined>;
    /**
     * The parameters required to set up enrichment on your pipe.
     */
    public readonly enrichmentParameters!: pulumi.Output<outputs.pipes.PipeEnrichmentParameters | undefined>;
    /**
     * When the pipe was last updated, in [ISO-8601 format](https://docs.aws.amazon.com/https://www.w3.org/TR/NOTE-datetime) (YYYY-MM-DDThh:mm:ss.sTZD).
     */
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    /**
     * Represents the configuration settings for the logs to which this pipe should report events.
     */
    public readonly logConfiguration!: pulumi.Output<outputs.pipes.PipeLogConfiguration | undefined>;
    /**
     * The name of the pipe.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the role that allows the pipe to send data to the target.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * The ARN of the source resource.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The parameters required to set up a source for your pipe.
     */
    public readonly sourceParameters!: pulumi.Output<outputs.pipes.PipeSourceParameters | undefined>;
    /**
     * The reason the pipe is in its current state.
     */
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    /**
     * The list of key-value pairs to associate with the pipe.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ARN of the target resource.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * The parameters required to set up a target for your pipe.
     *
     * For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
     */
    public readonly targetParameters!: pulumi.Output<outputs.pipes.PipeTargetParameters | undefined>;

    /**
     * Create a Pipe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredState"] = args ? args.desiredState : undefined;
            resourceInputs["enrichment"] = args ? args.enrichment : undefined;
            resourceInputs["enrichmentParameters"] = args ? args.enrichmentParameters : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceParameters"] = args ? args.sourceParameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["targetParameters"] = args ? args.targetParameters : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["desiredState"] = undefined /*out*/;
            resourceInputs["enrichment"] = undefined /*out*/;
            resourceInputs["enrichmentParameters"] = undefined /*out*/;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["logConfiguration"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["sourceParameters"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["target"] = undefined /*out*/;
            resourceInputs["targetParameters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "source", "sourceParameters.activeMqBrokerParameters.queueName", "sourceParameters.dynamoDbStreamParameters.startingPosition", "sourceParameters.kinesisStreamParameters.startingPosition", "sourceParameters.kinesisStreamParameters.startingPositionTimestamp", "sourceParameters.managedStreamingKafkaParameters.consumerGroupId", "sourceParameters.managedStreamingKafkaParameters.startingPosition", "sourceParameters.managedStreamingKafkaParameters.topicName", "sourceParameters.rabbitMqBrokerParameters.queueName", "sourceParameters.rabbitMqBrokerParameters.virtualHost"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Pipe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pipe resource.
 */
export interface PipeArgs {
    /**
     * A description of the pipe.
     */
    description?: pulumi.Input<string>;
    /**
     * The state the pipe should be in.
     */
    desiredState?: pulumi.Input<enums.pipes.PipeRequestedPipeState>;
    /**
     * The ARN of the enrichment resource.
     */
    enrichment?: pulumi.Input<string>;
    /**
     * The parameters required to set up enrichment on your pipe.
     */
    enrichmentParameters?: pulumi.Input<inputs.pipes.PipeEnrichmentParametersArgs>;
    /**
     * Represents the configuration settings for the logs to which this pipe should report events.
     */
    logConfiguration?: pulumi.Input<inputs.pipes.PipeLogConfigurationArgs>;
    /**
     * The name of the pipe.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the role that allows the pipe to send data to the target.
     */
    roleArn: pulumi.Input<string>;
    /**
     * The ARN of the source resource.
     */
    source: pulumi.Input<string>;
    /**
     * The parameters required to set up a source for your pipe.
     */
    sourceParameters?: pulumi.Input<inputs.pipes.PipeSourceParametersArgs>;
    /**
     * The list of key-value pairs to associate with the pipe.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ARN of the target resource.
     */
    target: pulumi.Input<string>;
    /**
     * The parameters required to set up a target for your pipe.
     *
     * For more information about pipe target parameters, including how to use dynamic path parameters, see [Target parameters](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-target.html) in the *Amazon EventBridge User Guide* .
     */
    targetParameters?: pulumi.Input<inputs.pipes.PipeTargetParametersArgs>;
}
