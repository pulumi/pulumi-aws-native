// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::AmplifyUIBuilder::Form Resource Type
 */
export class Form extends pulumi.CustomResource {
    /**
     * Get an existing Form resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Form {
        return new Form(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:amplifyuibuilder:Form';

    /**
     * Returns true if the given object is an instance of Form.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Form {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Form.__pulumiType;
    }

    /**
     * The unique ID of the Amplify app associated with the form.
     */
    declare public readonly appId: pulumi.Output<string | undefined>;
    /**
     * The ID for the form.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The `FormCTA` object that stores the call to action configuration for the form.
     */
    declare public readonly cta: pulumi.Output<outputs.amplifyuibuilder.FormCta | undefined>;
    /**
     * The type of data source to use to create the form.
     */
    declare public readonly dataType: pulumi.Output<outputs.amplifyuibuilder.FormDataTypeConfig | undefined>;
    /**
     * The name of the backend environment that is a part of the Amplify app.
     */
    declare public readonly environmentName: pulumi.Output<string | undefined>;
    /**
     * The configuration information for the form's fields.
     */
    declare public readonly fields: pulumi.Output<{[key: string]: outputs.amplifyuibuilder.FormFieldConfig} | undefined>;
    /**
     * Specifies whether to perform a create or update action on the form.
     */
    declare public readonly formActionType: pulumi.Output<enums.amplifyuibuilder.FormActionType | undefined>;
    /**
     * Specifies an icon or decoration to display on the form.
     */
    declare public readonly labelDecorator: pulumi.Output<enums.amplifyuibuilder.FormLabelDecorator | undefined>;
    /**
     * The name of the form.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The schema version of the form.
     */
    declare public readonly schemaVersion: pulumi.Output<string | undefined>;
    /**
     * The configuration information for the visual helper elements for the form. These elements are not associated with any data.
     */
    declare public readonly sectionalElements: pulumi.Output<{[key: string]: outputs.amplifyuibuilder.FormSectionalElement} | undefined>;
    /**
     * The configuration for the form's style.
     */
    declare public readonly style: pulumi.Output<outputs.amplifyuibuilder.FormStyle | undefined>;
    /**
     * One or more key-value pairs to use when tagging the form data.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Form resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FormArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["appId"] = args?.appId;
            resourceInputs["cta"] = args?.cta;
            resourceInputs["dataType"] = args?.dataType;
            resourceInputs["environmentName"] = args?.environmentName;
            resourceInputs["fields"] = args?.fields;
            resourceInputs["formActionType"] = args?.formActionType;
            resourceInputs["labelDecorator"] = args?.labelDecorator;
            resourceInputs["name"] = args?.name;
            resourceInputs["schemaVersion"] = args?.schemaVersion;
            resourceInputs["sectionalElements"] = args?.sectionalElements;
            resourceInputs["style"] = args?.style;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["cta"] = undefined /*out*/;
            resourceInputs["dataType"] = undefined /*out*/;
            resourceInputs["environmentName"] = undefined /*out*/;
            resourceInputs["fields"] = undefined /*out*/;
            resourceInputs["formActionType"] = undefined /*out*/;
            resourceInputs["labelDecorator"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["schemaVersion"] = undefined /*out*/;
            resourceInputs["sectionalElements"] = undefined /*out*/;
            resourceInputs["style"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["appId", "environmentName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Form.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Form resource.
 */
export interface FormArgs {
    /**
     * The unique ID of the Amplify app associated with the form.
     */
    appId?: pulumi.Input<string>;
    /**
     * The `FormCTA` object that stores the call to action configuration for the form.
     */
    cta?: pulumi.Input<inputs.amplifyuibuilder.FormCtaArgs>;
    /**
     * The type of data source to use to create the form.
     */
    dataType?: pulumi.Input<inputs.amplifyuibuilder.FormDataTypeConfigArgs>;
    /**
     * The name of the backend environment that is a part of the Amplify app.
     */
    environmentName?: pulumi.Input<string>;
    /**
     * The configuration information for the form's fields.
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<inputs.amplifyuibuilder.FormFieldConfigArgs>}>;
    /**
     * Specifies whether to perform a create or update action on the form.
     */
    formActionType?: pulumi.Input<enums.amplifyuibuilder.FormActionType>;
    /**
     * Specifies an icon or decoration to display on the form.
     */
    labelDecorator?: pulumi.Input<enums.amplifyuibuilder.FormLabelDecorator>;
    /**
     * The name of the form.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema version of the form.
     */
    schemaVersion?: pulumi.Input<string>;
    /**
     * The configuration information for the visual helper elements for the form. These elements are not associated with any data.
     */
    sectionalElements?: pulumi.Input<{[key: string]: pulumi.Input<inputs.amplifyuibuilder.FormSectionalElementArgs>}>;
    /**
     * The configuration for the form's style.
     */
    style?: pulumi.Input<inputs.amplifyuibuilder.FormStyleArgs>;
    /**
     * One or more key-value pairs to use when tagging the form data.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
