// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SecurityLake::Subscriber
 */
export class Subscriber extends pulumi.CustomResource {
    /**
     * Get an existing Subscriber resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Subscriber {
        return new Subscriber(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:securitylake:Subscriber';

    /**
     * Returns true if the given object is an instance of Subscriber.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscriber {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscriber.__pulumiType;
    }

    public readonly accessTypes!: pulumi.Output<enums.securitylake.SubscriberAccessTypesItem[]>;
    /**
     * The ARN for the data lake.
     */
    public readonly dataLakeArn!: pulumi.Output<string>;
    public /*out*/ readonly resourceShareArn!: pulumi.Output<string>;
    public /*out*/ readonly resourceShareName!: pulumi.Output<string>;
    public /*out*/ readonly s3BucketArn!: pulumi.Output<string>;
    /**
     * The supported AWS services from which logs and events are collected.
     */
    public readonly sources!: pulumi.Output<(outputs.securitylake.SubscriberSource0Properties | outputs.securitylake.SubscriberSource1Properties)[]>;
    public /*out*/ readonly subscriberArn!: pulumi.Output<string>;
    /**
     * The description for your subscriber account in Security Lake.
     */
    public readonly subscriberDescription!: pulumi.Output<string | undefined>;
    /**
     * The AWS identity used to access your data.
     */
    public readonly subscriberIdentity!: pulumi.Output<outputs.securitylake.SubscriberIdentityProperties>;
    /**
     * The name of your Security Lake subscriber account.
     */
    public readonly subscriberName!: pulumi.Output<string>;
    public /*out*/ readonly subscriberRoleArn!: pulumi.Output<string>;
    /**
     * An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Subscriber resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriberArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accessTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessTypes'");
            }
            if ((!args || args.dataLakeArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataLakeArn'");
            }
            if ((!args || args.sources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            if ((!args || args.subscriberIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriberIdentity'");
            }
            resourceInputs["accessTypes"] = args ? args.accessTypes : undefined;
            resourceInputs["dataLakeArn"] = args ? args.dataLakeArn : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["subscriberDescription"] = args ? args.subscriberDescription : undefined;
            resourceInputs["subscriberIdentity"] = args ? args.subscriberIdentity : undefined;
            resourceInputs["subscriberName"] = args ? args.subscriberName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["resourceShareArn"] = undefined /*out*/;
            resourceInputs["resourceShareName"] = undefined /*out*/;
            resourceInputs["s3BucketArn"] = undefined /*out*/;
            resourceInputs["subscriberArn"] = undefined /*out*/;
            resourceInputs["subscriberRoleArn"] = undefined /*out*/;
        } else {
            resourceInputs["accessTypes"] = undefined /*out*/;
            resourceInputs["dataLakeArn"] = undefined /*out*/;
            resourceInputs["resourceShareArn"] = undefined /*out*/;
            resourceInputs["resourceShareName"] = undefined /*out*/;
            resourceInputs["s3BucketArn"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["subscriberArn"] = undefined /*out*/;
            resourceInputs["subscriberDescription"] = undefined /*out*/;
            resourceInputs["subscriberIdentity"] = undefined /*out*/;
            resourceInputs["subscriberName"] = undefined /*out*/;
            resourceInputs["subscriberRoleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["dataLakeArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Subscriber.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Subscriber resource.
 */
export interface SubscriberArgs {
    accessTypes: pulumi.Input<pulumi.Input<enums.securitylake.SubscriberAccessTypesItem>[]>;
    /**
     * The ARN for the data lake.
     */
    dataLakeArn: pulumi.Input<string>;
    /**
     * The supported AWS services from which logs and events are collected.
     */
    sources: pulumi.Input<pulumi.Input<inputs.securitylake.SubscriberSource0PropertiesArgs | inputs.securitylake.SubscriberSource1PropertiesArgs>[]>;
    /**
     * The description for your subscriber account in Security Lake.
     */
    subscriberDescription?: pulumi.Input<string>;
    /**
     * The AWS identity used to access your data.
     */
    subscriberIdentity: pulumi.Input<inputs.securitylake.SubscriberIdentityPropertiesArgs>;
    /**
     * The name of your Security Lake subscriber account.
     */
    subscriberName?: pulumi.Input<string>;
    /**
     * An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
