// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AwsLogSourceArgs } from "./awsLogSource";
export type AwsLogSource = import("./awsLogSource").AwsLogSource;
export const AwsLogSource: typeof import("./awsLogSource").AwsLogSource = null as any;
utilities.lazyLoad(exports, ["AwsLogSource"], () => require("./awsLogSource"));

export { DataLakeArgs } from "./dataLake";
export type DataLake = import("./dataLake").DataLake;
export const DataLake: typeof import("./dataLake").DataLake = null as any;
utilities.lazyLoad(exports, ["DataLake"], () => require("./dataLake"));

export { GetAwsLogSourceArgs, GetAwsLogSourceResult, GetAwsLogSourceOutputArgs } from "./getAwsLogSource";
export const getAwsLogSource: typeof import("./getAwsLogSource").getAwsLogSource = null as any;
export const getAwsLogSourceOutput: typeof import("./getAwsLogSource").getAwsLogSourceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsLogSource","getAwsLogSourceOutput"], () => require("./getAwsLogSource"));

export { GetDataLakeArgs, GetDataLakeResult, GetDataLakeOutputArgs } from "./getDataLake";
export const getDataLake: typeof import("./getDataLake").getDataLake = null as any;
export const getDataLakeOutput: typeof import("./getDataLake").getDataLakeOutput = null as any;
utilities.lazyLoad(exports, ["getDataLake","getDataLakeOutput"], () => require("./getDataLake"));

export { GetSubscriberArgs, GetSubscriberResult, GetSubscriberOutputArgs } from "./getSubscriber";
export const getSubscriber: typeof import("./getSubscriber").getSubscriber = null as any;
export const getSubscriberOutput: typeof import("./getSubscriber").getSubscriberOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriber","getSubscriberOutput"], () => require("./getSubscriber"));

export { GetSubscriberNotificationArgs, GetSubscriberNotificationResult, GetSubscriberNotificationOutputArgs } from "./getSubscriberNotification";
export const getSubscriberNotification: typeof import("./getSubscriberNotification").getSubscriberNotification = null as any;
export const getSubscriberNotificationOutput: typeof import("./getSubscriberNotification").getSubscriberNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getSubscriberNotification","getSubscriberNotificationOutput"], () => require("./getSubscriberNotification"));

export { SubscriberArgs } from "./subscriber";
export type Subscriber = import("./subscriber").Subscriber;
export const Subscriber: typeof import("./subscriber").Subscriber = null as any;
utilities.lazyLoad(exports, ["Subscriber"], () => require("./subscriber"));

export { SubscriberNotificationArgs } from "./subscriberNotification";
export type SubscriberNotification = import("./subscriberNotification").SubscriberNotification;
export const SubscriberNotification: typeof import("./subscriberNotification").SubscriberNotification = null as any;
utilities.lazyLoad(exports, ["SubscriberNotification"], () => require("./subscriberNotification"));


// Export enums:
export * from "../types/enums/securitylake";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:securitylake:AwsLogSource":
                return new AwsLogSource(name, <any>undefined, { urn })
            case "aws-native:securitylake:DataLake":
                return new DataLake(name, <any>undefined, { urn })
            case "aws-native:securitylake:Subscriber":
                return new Subscriber(name, <any>undefined, { urn })
            case "aws-native:securitylake:SubscriberNotification":
                return new SubscriberNotification(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "securitylake", _module)
