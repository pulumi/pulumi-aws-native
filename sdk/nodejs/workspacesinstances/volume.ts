// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::WorkspacesInstances::Volume - Manages WorkSpaces Volume resources
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:workspacesinstances:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The Availability Zone in which to create the volume
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Indicates whether the volume should be encrypted
     */
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    /**
     * The number of I/O operations per second (IOPS)
     */
    public readonly iops!: pulumi.Output<number | undefined>;
    /**
     * The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * The size of the volume, in GiBs
     */
    public readonly sizeInGb!: pulumi.Output<number | undefined>;
    /**
     * The snapshot from which to create the volume
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * The tags passed to EBS volume
     */
    public readonly tagSpecifications!: pulumi.Output<outputs.workspacesinstances.VolumeTagSpecification[] | undefined>;
    /**
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s
     */
    public readonly throughput!: pulumi.Output<number | undefined>;
    /**
     * Unique identifier for the volume
     */
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    /**
     * The volume type
     */
    public readonly volumeType!: pulumi.Output<enums.workspacesinstances.VolumeType | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["encrypted"] = args?.encrypted;
            resourceInputs["iops"] = args?.iops;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["sizeInGb"] = args?.sizeInGb;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["tagSpecifications"] = args?.tagSpecifications;
            resourceInputs["throughput"] = args?.throughput;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["volumeId"] = undefined /*out*/;
        } else {
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["iops"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["sizeInGb"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["tagSpecifications"] = undefined /*out*/;
            resourceInputs["throughput"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
            resourceInputs["volumeType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["availabilityZone", "encrypted", "iops", "kmsKeyId", "sizeInGb", "snapshotId", "tagSpecifications[*]", "throughput", "volumeType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The Availability Zone in which to create the volume
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Indicates whether the volume should be encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The number of I/O operations per second (IOPS)
     */
    iops?: pulumi.Input<number>;
    /**
     * The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The size of the volume, in GiBs
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * The snapshot from which to create the volume
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The tags passed to EBS volume
     */
    tagSpecifications?: pulumi.Input<pulumi.Input<inputs.workspacesinstances.VolumeTagSpecificationArgs>[]>;
    /**
     * The throughput to provision for a volume, with a maximum of 1,000 MiB/s
     */
    throughput?: pulumi.Input<number>;
    /**
     * The volume type
     */
    volumeType?: pulumi.Input<enums.workspacesinstances.VolumeType>;
}
