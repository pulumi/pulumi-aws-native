// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::MediaTailor::Channel Resource Type
 */
export class Channel extends pulumi.CustomResource {
    /**
     * Get an existing Channel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Channel {
        return new Channel(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:mediatailor:Channel';

    /**
     * Returns true if the given object is an instance of Channel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Channel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Channel.__pulumiType;
    }

    /**
     * <p>The ARN of the channel.</p>
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * <p>The list of audiences defined in channel.</p>
     */
    declare public readonly audiences: pulumi.Output<string[] | undefined>;
    /**
     * The name of the channel.
     */
    declare public readonly channelName: pulumi.Output<string>;
    /**
     * The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the `LINEAR` `PlaybackMode` . MediaTailor doesn't support filler slate for channels using the `LOOP` `PlaybackMode` .
     */
    declare public readonly fillerSlate: pulumi.Output<outputs.mediatailor.ChannelSlateSource | undefined>;
    /**
     * The log configuration.
     */
    declare public readonly logConfiguration: pulumi.Output<outputs.mediatailor.ChannelLogConfigurationForChannel | undefined>;
    /**
     * <p>The channel's output properties.</p>
     */
    declare public readonly outputs: pulumi.Output<outputs.mediatailor.ChannelRequestOutputItem[]>;
    /**
     * The type of playback mode for this channel.
     *
     * `LINEAR` - Programs play back-to-back only once.
     *
     * `LOOP` - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.
     */
    declare public readonly playbackMode: pulumi.Output<enums.mediatailor.ChannelPlaybackMode>;
    /**
     * The tags to assign to the channel.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The tier for this channel. STANDARD tier channels can contain live programs.
     */
    declare public readonly tier: pulumi.Output<enums.mediatailor.ChannelTier | undefined>;
    /**
     * The configuration for time-shifted viewing.
     */
    declare public readonly timeShiftConfiguration: pulumi.Output<outputs.mediatailor.ChannelTimeShiftConfiguration | undefined>;

    /**
     * Create a Channel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChannelArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.outputs === undefined && !opts.urn) {
                throw new Error("Missing required property 'outputs'");
            }
            if (args?.playbackMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'playbackMode'");
            }
            resourceInputs["audiences"] = args?.audiences;
            resourceInputs["channelName"] = args?.channelName;
            resourceInputs["fillerSlate"] = args?.fillerSlate;
            resourceInputs["logConfiguration"] = args?.logConfiguration;
            resourceInputs["outputs"] = args?.outputs;
            resourceInputs["playbackMode"] = args?.playbackMode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["timeShiftConfiguration"] = args?.timeShiftConfiguration;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["audiences"] = undefined /*out*/;
            resourceInputs["channelName"] = undefined /*out*/;
            resourceInputs["fillerSlate"] = undefined /*out*/;
            resourceInputs["logConfiguration"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["playbackMode"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tier"] = undefined /*out*/;
            resourceInputs["timeShiftConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["channelName", "tier"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Channel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Channel resource.
 */
export interface ChannelArgs {
    /**
     * <p>The list of audiences defined in channel.</p>
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the channel.
     */
    channelName?: pulumi.Input<string>;
    /**
     * The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the `LINEAR` `PlaybackMode` . MediaTailor doesn't support filler slate for channels using the `LOOP` `PlaybackMode` .
     */
    fillerSlate?: pulumi.Input<inputs.mediatailor.ChannelSlateSourceArgs>;
    /**
     * The log configuration.
     */
    logConfiguration?: pulumi.Input<inputs.mediatailor.ChannelLogConfigurationForChannelArgs>;
    /**
     * <p>The channel's output properties.</p>
     */
    outputs: pulumi.Input<pulumi.Input<inputs.mediatailor.ChannelRequestOutputItemArgs>[]>;
    /**
     * The type of playback mode for this channel.
     *
     * `LINEAR` - Programs play back-to-back only once.
     *
     * `LOOP` - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.
     */
    playbackMode: pulumi.Input<enums.mediatailor.ChannelPlaybackMode>;
    /**
     * The tags to assign to the channel.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The tier for this channel. STANDARD tier channels can contain live programs.
     */
    tier?: pulumi.Input<enums.mediatailor.ChannelTier>;
    /**
     * The configuration for time-shifted viewing.
     */
    timeShiftConfiguration?: pulumi.Input<inputs.mediatailor.ChannelTimeShiftConfigurationArgs>;
}
