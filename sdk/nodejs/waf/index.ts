// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ByteMatchSetArgs } from "./byteMatchSet";
export type ByteMatchSet = import("./byteMatchSet").ByteMatchSet;
export const ByteMatchSet: typeof import("./byteMatchSet").ByteMatchSet = null as any;
utilities.lazyLoad(exports, ["ByteMatchSet"], () => require("./byteMatchSet"));

export { GetByteMatchSetArgs, GetByteMatchSetResult, GetByteMatchSetOutputArgs } from "./getByteMatchSet";
export const getByteMatchSet: typeof import("./getByteMatchSet").getByteMatchSet = null as any;
export const getByteMatchSetOutput: typeof import("./getByteMatchSet").getByteMatchSetOutput = null as any;
utilities.lazyLoad(exports, ["getByteMatchSet","getByteMatchSetOutput"], () => require("./getByteMatchSet"));

export { GetIPSetArgs, GetIPSetResult, GetIPSetOutputArgs } from "./getIPSet";
export const getIPSet: typeof import("./getIPSet").getIPSet = null as any;
export const getIPSetOutput: typeof import("./getIPSet").getIPSetOutput = null as any;
utilities.lazyLoad(exports, ["getIPSet","getIPSetOutput"], () => require("./getIPSet"));

export { GetRuleArgs, GetRuleResult, GetRuleOutputArgs } from "./getRule";
export const getRule: typeof import("./getRule").getRule = null as any;
export const getRuleOutput: typeof import("./getRule").getRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRule","getRuleOutput"], () => require("./getRule"));

export { GetSizeConstraintSetArgs, GetSizeConstraintSetResult, GetSizeConstraintSetOutputArgs } from "./getSizeConstraintSet";
export const getSizeConstraintSet: typeof import("./getSizeConstraintSet").getSizeConstraintSet = null as any;
export const getSizeConstraintSetOutput: typeof import("./getSizeConstraintSet").getSizeConstraintSetOutput = null as any;
utilities.lazyLoad(exports, ["getSizeConstraintSet","getSizeConstraintSetOutput"], () => require("./getSizeConstraintSet"));

export { GetSqlInjectionMatchSetArgs, GetSqlInjectionMatchSetResult, GetSqlInjectionMatchSetOutputArgs } from "./getSqlInjectionMatchSet";
export const getSqlInjectionMatchSet: typeof import("./getSqlInjectionMatchSet").getSqlInjectionMatchSet = null as any;
export const getSqlInjectionMatchSetOutput: typeof import("./getSqlInjectionMatchSet").getSqlInjectionMatchSetOutput = null as any;
utilities.lazyLoad(exports, ["getSqlInjectionMatchSet","getSqlInjectionMatchSetOutput"], () => require("./getSqlInjectionMatchSet"));

export { GetWebACLArgs, GetWebACLResult, GetWebACLOutputArgs } from "./getWebACL";
export const getWebACL: typeof import("./getWebACL").getWebACL = null as any;
export const getWebACLOutput: typeof import("./getWebACL").getWebACLOutput = null as any;
utilities.lazyLoad(exports, ["getWebACL","getWebACLOutput"], () => require("./getWebACL"));

export { GetXssMatchSetArgs, GetXssMatchSetResult, GetXssMatchSetOutputArgs } from "./getXssMatchSet";
export const getXssMatchSet: typeof import("./getXssMatchSet").getXssMatchSet = null as any;
export const getXssMatchSetOutput: typeof import("./getXssMatchSet").getXssMatchSetOutput = null as any;
utilities.lazyLoad(exports, ["getXssMatchSet","getXssMatchSetOutput"], () => require("./getXssMatchSet"));

export { IPSetArgs } from "./ipset";
export type IPSet = import("./ipset").IPSet;
export const IPSet: typeof import("./ipset").IPSet = null as any;
utilities.lazyLoad(exports, ["IPSet"], () => require("./ipset"));

export { RuleArgs } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { SizeConstraintSetArgs } from "./sizeConstraintSet";
export type SizeConstraintSet = import("./sizeConstraintSet").SizeConstraintSet;
export const SizeConstraintSet: typeof import("./sizeConstraintSet").SizeConstraintSet = null as any;
utilities.lazyLoad(exports, ["SizeConstraintSet"], () => require("./sizeConstraintSet"));

export { SqlInjectionMatchSetArgs } from "./sqlInjectionMatchSet";
export type SqlInjectionMatchSet = import("./sqlInjectionMatchSet").SqlInjectionMatchSet;
export const SqlInjectionMatchSet: typeof import("./sqlInjectionMatchSet").SqlInjectionMatchSet = null as any;
utilities.lazyLoad(exports, ["SqlInjectionMatchSet"], () => require("./sqlInjectionMatchSet"));

export { WebACLArgs } from "./webACL";
export type WebACL = import("./webACL").WebACL;
export const WebACL: typeof import("./webACL").WebACL = null as any;
utilities.lazyLoad(exports, ["WebACL"], () => require("./webACL"));

export { XssMatchSetArgs } from "./xssMatchSet";
export type XssMatchSet = import("./xssMatchSet").XssMatchSet;
export const XssMatchSet: typeof import("./xssMatchSet").XssMatchSet = null as any;
utilities.lazyLoad(exports, ["XssMatchSet"], () => require("./xssMatchSet"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:waf:ByteMatchSet":
                return new ByteMatchSet(name, <any>undefined, { urn })
            case "aws-native:waf:IPSet":
                return new IPSet(name, <any>undefined, { urn })
            case "aws-native:waf:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "aws-native:waf:SizeConstraintSet":
                return new SizeConstraintSet(name, <any>undefined, { urn })
            case "aws-native:waf:SqlInjectionMatchSet":
                return new SqlInjectionMatchSet(name, <any>undefined, { urn })
            case "aws-native:waf:WebACL":
                return new WebACL(name, <any>undefined, { urn })
            case "aws-native:waf:XssMatchSet":
                return new XssMatchSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "waf", _module)
