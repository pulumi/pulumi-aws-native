// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::ManagedBlockchain::com.amazonaws.taiga.webservice.api#Accessor Resource Type
 *
 * @deprecated Accessor is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Accessor extends pulumi.CustomResource {
    /**
     * Get an existing Accessor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Accessor {
        pulumi.log.warn("Accessor is deprecated: Accessor is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Accessor(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:managedblockchain:Accessor';

    /**
     * Returns true if the given object is an instance of Accessor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Accessor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Accessor.__pulumiType;
    }

    public readonly accessorType!: pulumi.Output<enums.managedblockchain.AccessorType>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    public /*out*/ readonly billingToken!: pulumi.Output<string>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<enums.managedblockchain.AccessorNetworkAccessorType | undefined>;
    public /*out*/ readonly status!: pulumi.Output<enums.managedblockchain.AccessorStatus>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Accessor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Accessor is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: AccessorArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Accessor is deprecated: Accessor is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.accessorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessorType'");
            }
            resourceInputs["accessorType"] = args ? args.accessorType : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["billingToken"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["accessorType"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["billingToken"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["networkType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["accessorType", "networkType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Accessor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Accessor resource.
 */
export interface AccessorArgs {
    accessorType: pulumi.Input<enums.managedblockchain.AccessorType>;
    networkType?: pulumi.Input<enums.managedblockchain.AccessorNetworkAccessorType>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
