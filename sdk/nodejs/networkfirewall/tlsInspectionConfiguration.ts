// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource type definition for AWS::NetworkFirewall::TLSInspectionConfiguration
 */
export class TlsInspectionConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing TlsInspectionConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TlsInspectionConfiguration {
        return new TlsInspectionConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:networkfirewall:TlsInspectionConfiguration';

    /**
     * Returns true if the given object is an instance of TlsInspectionConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsInspectionConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsInspectionConfiguration.__pulumiType;
    }

    /**
     * A description of the TLS inspection configuration.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The key:value pairs to associate with the resource.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using AWS Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
     */
    declare public readonly tlsInspectionConfiguration: pulumi.Output<outputs.networkfirewall.TlsInspectionConfigurationTlsInspectionConfiguration>;
    /**
     * The Amazon Resource Name (ARN) of the TLS inspection configuration.
     */
    declare public /*out*/ readonly tlsInspectionConfigurationArn: pulumi.Output<string>;
    /**
     * A unique identifier for the TLS inspection configuration. This ID is returned in the responses to create and list commands. You provide it to operations such as update and delete.
     */
    declare public /*out*/ readonly tlsInspectionConfigurationId: pulumi.Output<string>;
    /**
     * The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
     */
    declare public readonly tlsInspectionConfigurationName: pulumi.Output<string>;

    /**
     * Create a TlsInspectionConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsInspectionConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.tlsInspectionConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'tlsInspectionConfiguration'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tlsInspectionConfiguration"] = args?.tlsInspectionConfiguration;
            resourceInputs["tlsInspectionConfigurationName"] = args?.tlsInspectionConfigurationName;
            resourceInputs["tlsInspectionConfigurationArn"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationId"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfiguration"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationArn"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationId"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["tlsInspectionConfigurationName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(TlsInspectionConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TlsInspectionConfiguration resource.
 */
export interface TlsInspectionConfigurationArgs {
    /**
     * A description of the TLS inspection configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * The key:value pairs to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The object that defines a TLS inspection configuration. AWS Network Firewall uses TLS inspection configurations to decrypt your firewall's inbound and outbound SSL/TLS traffic. After decryption, AWS Network Firewall inspects the traffic according to your firewall policy's stateful rules, and then re-encrypts it before sending it to its destination. You can enable inspection of your firewall's inbound traffic, outbound traffic, or both. To use TLS inspection with your firewall, you must first import or provision certificates using AWS Certificate Manager , create a TLS inspection configuration, add that configuration to a new firewall policy, and then associate that policy with your firewall. For more information about using TLS inspection configurations, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection.html) in the *AWS Network Firewall Developer Guide* .
     */
    tlsInspectionConfiguration: pulumi.Input<inputs.networkfirewall.TlsInspectionConfigurationTlsInspectionConfigurationArgs>;
    /**
     * The descriptive name of the TLS inspection configuration. You can't change the name of a TLS inspection configuration after you create it.
     */
    tlsInspectionConfigurationName?: pulumi.Input<string>;
}
