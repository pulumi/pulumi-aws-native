// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FirewallArgs } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallPolicyArgs } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetFirewallPolicyArgs, GetFirewallPolicyResult, GetFirewallPolicyOutputArgs } from "./getFirewallPolicy";
export const getFirewallPolicy: typeof import("./getFirewallPolicy").getFirewallPolicy = null as any;
export const getFirewallPolicyOutput: typeof import("./getFirewallPolicy").getFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallPolicy","getFirewallPolicyOutput"], () => require("./getFirewallPolicy"));

export { GetLoggingConfigurationArgs, GetLoggingConfigurationResult, GetLoggingConfigurationOutputArgs } from "./getLoggingConfiguration";
export const getLoggingConfiguration: typeof import("./getLoggingConfiguration").getLoggingConfiguration = null as any;
export const getLoggingConfigurationOutput: typeof import("./getLoggingConfiguration").getLoggingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingConfiguration","getLoggingConfigurationOutput"], () => require("./getLoggingConfiguration"));

export { GetRuleGroupArgs, GetRuleGroupResult, GetRuleGroupOutputArgs } from "./getRuleGroup";
export const getRuleGroup: typeof import("./getRuleGroup").getRuleGroup = null as any;
export const getRuleGroupOutput: typeof import("./getRuleGroup").getRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRuleGroup","getRuleGroupOutput"], () => require("./getRuleGroup"));

export { LoggingConfigurationArgs } from "./loggingConfiguration";
export type LoggingConfiguration = import("./loggingConfiguration").LoggingConfiguration;
export const LoggingConfiguration: typeof import("./loggingConfiguration").LoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["LoggingConfiguration"], () => require("./loggingConfiguration"));

export { RuleGroupArgs } from "./ruleGroup";
export type RuleGroup = import("./ruleGroup").RuleGroup;
export const RuleGroup: typeof import("./ruleGroup").RuleGroup = null as any;
utilities.lazyLoad(exports, ["RuleGroup"], () => require("./ruleGroup"));


// Export enums:
export * from "../types/enums/networkfirewall";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:networkfirewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "aws-native:networkfirewall:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "aws-native:networkfirewall:LoggingConfiguration":
                return new LoggingConfiguration(name, <any>undefined, { urn })
            case "aws-native:networkfirewall:RuleGroup":
                return new RuleGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "networkfirewall", _module)
