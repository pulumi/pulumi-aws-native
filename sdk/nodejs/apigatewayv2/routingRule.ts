// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Schema for AWS::ApiGatewayV2::RoutingRule
 */
export class RoutingRule extends pulumi.CustomResource {
    /**
     * Get an existing RoutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoutingRule {
        return new RoutingRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:apigatewayv2:RoutingRule';

    /**
     * Returns true if the given object is an instance of RoutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingRule.__pulumiType;
    }

    /**
     * The resulting action based on matching a routing rules condition. Only InvokeApi is supported.
     */
    public readonly actions!: pulumi.Output<outputs.apigatewayv2.RoutingRuleAction[]>;
    /**
     * The conditions of the routing rule.
     */
    public readonly conditions!: pulumi.Output<outputs.apigatewayv2.RoutingRuleCondition[]>;
    /**
     * The amazon resource name (ARN) of the domain name resource.
     */
    public readonly domainNameArn!: pulumi.Output<string>;
    /**
     * The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value. Rules can't have the same priority. Priority values 1-1,000,000 are supported.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Amazon Resource Name (ARN) of the resource.
     */
    public /*out*/ readonly routingRuleArn!: pulumi.Output<string>;
    /**
     * RoutingRule Id generated by service
     */
    public /*out*/ readonly routingRuleId!: pulumi.Output<string>;

    /**
     * Create a RoutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.domainNameArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNameArn'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["domainNameArn"] = args ? args.domainNameArn : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["routingRuleArn"] = undefined /*out*/;
            resourceInputs["routingRuleId"] = undefined /*out*/;
        } else {
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["domainNameArn"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["routingRuleArn"] = undefined /*out*/;
            resourceInputs["routingRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["domainNameArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RoutingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RoutingRule resource.
 */
export interface RoutingRuleArgs {
    /**
     * The resulting action based on matching a routing rules condition. Only InvokeApi is supported.
     */
    actions: pulumi.Input<pulumi.Input<inputs.apigatewayv2.RoutingRuleActionArgs>[]>;
    /**
     * The conditions of the routing rule.
     */
    conditions: pulumi.Input<pulumi.Input<inputs.apigatewayv2.RoutingRuleConditionArgs>[]>;
    /**
     * The amazon resource name (ARN) of the domain name resource.
     */
    domainNameArn: pulumi.Input<string>;
    /**
     * The order in which API Gateway evaluates a rule. Priority is evaluated from the lowest value to the highest value. Rules can't have the same priority. Priority values 1-1,000,000 are supported.
     */
    priority: pulumi.Input<number>;
}
