// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;

export { ApiGatewayManagedOverridesArgs } from "./apiGatewayManagedOverrides";
export type ApiGatewayManagedOverrides = import("./apiGatewayManagedOverrides").ApiGatewayManagedOverrides;
export const ApiGatewayManagedOverrides: typeof import("./apiGatewayManagedOverrides").ApiGatewayManagedOverrides = null as any;

export { ApiMappingArgs } from "./apiMapping";
export type ApiMapping = import("./apiMapping").ApiMapping;
export const ApiMapping: typeof import("./apiMapping").ApiMapping = null as any;

export { AuthorizerArgs } from "./authorizer";
export type Authorizer = import("./authorizer").Authorizer;
export const Authorizer: typeof import("./authorizer").Authorizer = null as any;

export { DeploymentArgs } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;

export { DomainNameArgs } from "./domainName";
export type DomainName = import("./domainName").DomainName;
export const DomainName: typeof import("./domainName").DomainName = null as any;

export { GetApiArgs, GetApiResult, GetApiOutputArgs } from "./getApi";
export const getApi: typeof import("./getApi").getApi = null as any;
export const getApiOutput: typeof import("./getApi").getApiOutput = null as any;

export { GetApiGatewayManagedOverridesArgs, GetApiGatewayManagedOverridesResult, GetApiGatewayManagedOverridesOutputArgs } from "./getApiGatewayManagedOverrides";
export const getApiGatewayManagedOverrides: typeof import("./getApiGatewayManagedOverrides").getApiGatewayManagedOverrides = null as any;
export const getApiGatewayManagedOverridesOutput: typeof import("./getApiGatewayManagedOverrides").getApiGatewayManagedOverridesOutput = null as any;

export { GetApiMappingArgs, GetApiMappingResult, GetApiMappingOutputArgs } from "./getApiMapping";
export const getApiMapping: typeof import("./getApiMapping").getApiMapping = null as any;
export const getApiMappingOutput: typeof import("./getApiMapping").getApiMappingOutput = null as any;

export { GetAuthorizerArgs, GetAuthorizerResult, GetAuthorizerOutputArgs } from "./getAuthorizer";
export const getAuthorizer: typeof import("./getAuthorizer").getAuthorizer = null as any;
export const getAuthorizerOutput: typeof import("./getAuthorizer").getAuthorizerOutput = null as any;

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;

export { GetDomainNameArgs, GetDomainNameResult, GetDomainNameOutputArgs } from "./getDomainName";
export const getDomainName: typeof import("./getDomainName").getDomainName = null as any;
export const getDomainNameOutput: typeof import("./getDomainName").getDomainNameOutput = null as any;

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;

export { GetIntegrationResponseArgs, GetIntegrationResponseResult, GetIntegrationResponseOutputArgs } from "./getIntegrationResponse";
export const getIntegrationResponse: typeof import("./getIntegrationResponse").getIntegrationResponse = null as any;
export const getIntegrationResponseOutput: typeof import("./getIntegrationResponse").getIntegrationResponseOutput = null as any;

export { GetModelArgs, GetModelResult, GetModelOutputArgs } from "./getModel";
export const getModel: typeof import("./getModel").getModel = null as any;
export const getModelOutput: typeof import("./getModel").getModelOutput = null as any;

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;

export { GetRouteResponseArgs, GetRouteResponseResult, GetRouteResponseOutputArgs } from "./getRouteResponse";
export const getRouteResponse: typeof import("./getRouteResponse").getRouteResponse = null as any;
export const getRouteResponseOutput: typeof import("./getRouteResponse").getRouteResponseOutput = null as any;

export { GetStageArgs, GetStageResult, GetStageOutputArgs } from "./getStage";
export const getStage: typeof import("./getStage").getStage = null as any;
export const getStageOutput: typeof import("./getStage").getStageOutput = null as any;

export { GetVpcLinkArgs, GetVpcLinkResult, GetVpcLinkOutputArgs } from "./getVpcLink";
export const getVpcLink: typeof import("./getVpcLink").getVpcLink = null as any;
export const getVpcLinkOutput: typeof import("./getVpcLink").getVpcLinkOutput = null as any;

export { IntegrationArgs } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;

export { IntegrationResponseArgs } from "./integrationResponse";
export type IntegrationResponse = import("./integrationResponse").IntegrationResponse;
export const IntegrationResponse: typeof import("./integrationResponse").IntegrationResponse = null as any;

export { ModelArgs } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;

export { RouteArgs } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;

export { RouteResponseArgs } from "./routeResponse";
export type RouteResponse = import("./routeResponse").RouteResponse;
export const RouteResponse: typeof import("./routeResponse").RouteResponse = null as any;

export { StageArgs } from "./stage";
export type Stage = import("./stage").Stage;
export const Stage: typeof import("./stage").Stage = null as any;

export { VpcLinkArgs } from "./vpcLink";
export type VpcLink = import("./vpcLink").VpcLink;
export const VpcLink: typeof import("./vpcLink").VpcLink = null as any;

utilities.lazyLoad(exports, ["Api"], () => require("./api"));
utilities.lazyLoad(exports, ["ApiGatewayManagedOverrides"], () => require("./apiGatewayManagedOverrides"));
utilities.lazyLoad(exports, ["ApiMapping"], () => require("./apiMapping"));
utilities.lazyLoad(exports, ["Authorizer"], () => require("./authorizer"));
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));
utilities.lazyLoad(exports, ["DomainName"], () => require("./domainName"));
utilities.lazyLoad(exports, ["getApi","getApiOutput"], () => require("./getApi"));
utilities.lazyLoad(exports, ["getApiGatewayManagedOverrides","getApiGatewayManagedOverridesOutput"], () => require("./getApiGatewayManagedOverrides"));
utilities.lazyLoad(exports, ["getApiMapping","getApiMappingOutput"], () => require("./getApiMapping"));
utilities.lazyLoad(exports, ["getAuthorizer","getAuthorizerOutput"], () => require("./getAuthorizer"));
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));
utilities.lazyLoad(exports, ["getDomainName","getDomainNameOutput"], () => require("./getDomainName"));
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));
utilities.lazyLoad(exports, ["getIntegrationResponse","getIntegrationResponseOutput"], () => require("./getIntegrationResponse"));
utilities.lazyLoad(exports, ["getModel","getModelOutput"], () => require("./getModel"));
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));
utilities.lazyLoad(exports, ["getRouteResponse","getRouteResponseOutput"], () => require("./getRouteResponse"));
utilities.lazyLoad(exports, ["getStage","getStageOutput"], () => require("./getStage"));
utilities.lazyLoad(exports, ["getVpcLink","getVpcLinkOutput"], () => require("./getVpcLink"));
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));
utilities.lazyLoad(exports, ["IntegrationResponse"], () => require("./integrationResponse"));
utilities.lazyLoad(exports, ["Model"], () => require("./model"));
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
utilities.lazyLoad(exports, ["RouteResponse"], () => require("./routeResponse"));
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));
utilities.lazyLoad(exports, ["VpcLink"], () => require("./vpcLink"));

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:apigatewayv2:Api":
                return new Api(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:ApiGatewayManagedOverrides":
                return new ApiGatewayManagedOverrides(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:ApiMapping":
                return new ApiMapping(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Authorizer":
                return new Authorizer(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:DomainName":
                return new DomainName(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:IntegrationResponse":
                return new IntegrationResponse(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Model":
                return new Model(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Route":
                return new Route(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:RouteResponse":
                return new RouteResponse(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:Stage":
                return new Stage(name, <any>undefined, { urn })
            case "aws-native:apigatewayv2:VpcLink":
                return new VpcLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "apigatewayv2", _module)
