// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * AWS::RoboMaker::SimulationApplication resource creates an AWS RoboMaker SimulationApplication. Simulation application can be used in AWS RoboMaker Simulation Jobs.
 */
export function getSimulationApplication(args: GetSimulationApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetSimulationApplicationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:robomaker:getSimulationApplication", {
        "arn": args.arn,
    }, opts);
}

export interface GetSimulationApplicationArgs {
    arn: string;
}

export interface GetSimulationApplicationResult {
    readonly arn?: string;
    /**
     * The current revision id.
     */
    readonly currentRevisionId?: string;
    /**
     * The URI of the Docker image for the robot application.
     */
    readonly environment?: string;
    /**
     * The rendering engine for the simulation application.
     */
    readonly renderingEngine?: outputs.robomaker.SimulationApplicationRenderingEngine;
    /**
     * The robot software suite used by the simulation application.
     */
    readonly robotSoftwareSuite?: outputs.robomaker.SimulationApplicationRobotSoftwareSuite;
    /**
     * The simulation software suite used by the simulation application.
     */
    readonly simulationSoftwareSuite?: outputs.robomaker.SimulationApplicationSimulationSoftwareSuite;
    /**
     * The sources of the simulation application.
     */
    readonly sources?: outputs.robomaker.SimulationApplicationSourceConfig[];
    readonly tags?: outputs.robomaker.SimulationApplicationTags;
}

export function getSimulationApplicationOutput(args: GetSimulationApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSimulationApplicationResult> {
    return pulumi.output(args).apply(a => getSimulationApplication(a, opts))
}

export interface GetSimulationApplicationOutputArgs {
    arn: pulumi.Input<string>;
}
