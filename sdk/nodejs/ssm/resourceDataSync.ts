// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SSM::ResourceDataSync
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncToDestination",
 *     s3Destination: {
 *         bucketName: "test-bucket",
 *         bucketRegion: "us-east-2",
 *         syncFormat: "JsonSerDe",
 *         bucketPrefix: "cfn",
 *         kmsKeyArn: "kmsKeyARN",
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncToDestination",
 *     s3Destination: {
 *         bucketName: "test-bucket",
 *         bucketRegion: "us-east-2",
 *         syncFormat: "JsonSerDe",
 *         bucketPrefix: "cfn",
 *         kmsKeyArn: "kmsKeyARN",
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "SingleAccountMultiRegions",
 *         sourceRegions: [
 *             "us-east-1",
 *             "us-west-1",
 *             "us-west-2",
 *         ],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "SingleAccountMultiRegions",
 *         sourceRegions: [
 *             "us-east-1",
 *             "us-west-1",
 *             "us-west-2",
 *         ],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "AwsOrganizations",
 *         awsOrganizationsSource: {
 *             organizationSourceType: "EntireOrganization",
 *         },
 *         sourceRegions: ["us-west-1"],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "AwsOrganizations",
 *         awsOrganizationsSource: {
 *             organizationSourceType: "EntireOrganization",
 *         },
 *         sourceRegions: ["us-west-1"],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "AwsOrganizations",
 *         awsOrganizationsSource: {
 *             organizationSourceType: "OrganizationalUnits",
 *             organizationalUnits: ["ou-12345"],
 *         },
 *         sourceRegions: ["us-west-1"],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicResourceDataSync = new aws_native.ssm.ResourceDataSync("basicResourceDataSync", {
 *     syncName: "test-sync",
 *     syncType: "SyncFromSource",
 *     syncSource: {
 *         sourceType: "AwsOrganizations",
 *         awsOrganizationsSource: {
 *             organizationSourceType: "OrganizationalUnits",
 *             organizationalUnits: ["ou-12345"],
 *         },
 *         sourceRegions: ["us-west-1"],
 *         includeFutureRegions: false,
 *     },
 * });
 *
 * ```
 */
export class ResourceDataSync extends pulumi.CustomResource {
    /**
     * Get an existing ResourceDataSync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ResourceDataSync {
        return new ResourceDataSync(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ssm:ResourceDataSync';

    /**
     * Returns true if the given object is an instance of ResourceDataSync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceDataSync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceDataSync.__pulumiType;
    }

    /**
     * The name of the S3 bucket where the aggregated data is stored.
     */
    public readonly bucketName!: pulumi.Output<string | undefined>;
    /**
     * An Amazon S3 prefix for the bucket.
     */
    public readonly bucketPrefix!: pulumi.Output<string | undefined>;
    /**
     * The AWS Region with the S3 bucket targeted by the resource data sync.
     */
    public readonly bucketRegion!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
     */
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    /**
     * Configuration information for the target S3 bucket.
     */
    public readonly s3Destination!: pulumi.Output<outputs.ssm.ResourceDataSyncS3Destination | undefined>;
    /**
     * A supported sync format. The following format is currently supported: JsonSerDe
     */
    public readonly syncFormat!: pulumi.Output<string | undefined>;
    /**
     * A name for the resource data sync.
     */
    public readonly syncName!: pulumi.Output<string>;
    /**
     * Information about the source where the data was synchronized.
     */
    public readonly syncSource!: pulumi.Output<outputs.ssm.ResourceDataSyncSyncSource | undefined>;
    /**
     * The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
     */
    public readonly syncType!: pulumi.Output<string | undefined>;

    /**
     * Create a ResourceDataSync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceDataSyncArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["bucketRegion"] = args ? args.bucketRegion : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["s3Destination"] = args ? args.s3Destination : undefined;
            resourceInputs["syncFormat"] = args ? args.syncFormat : undefined;
            resourceInputs["syncName"] = args ? args.syncName : undefined;
            resourceInputs["syncSource"] = args ? args.syncSource : undefined;
            resourceInputs["syncType"] = args ? args.syncType : undefined;
        } else {
            resourceInputs["bucketName"] = undefined /*out*/;
            resourceInputs["bucketPrefix"] = undefined /*out*/;
            resourceInputs["bucketRegion"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["s3Destination"] = undefined /*out*/;
            resourceInputs["syncFormat"] = undefined /*out*/;
            resourceInputs["syncName"] = undefined /*out*/;
            resourceInputs["syncSource"] = undefined /*out*/;
            resourceInputs["syncType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["bucketName", "bucketPrefix", "bucketRegion", "kmsKeyArn", "s3Destination", "syncFormat", "syncName", "syncType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ResourceDataSync.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ResourceDataSync resource.
 */
export interface ResourceDataSyncArgs {
    /**
     * The name of the S3 bucket where the aggregated data is stored.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * An Amazon S3 prefix for the bucket.
     */
    bucketPrefix?: pulumi.Input<string>;
    /**
     * The AWS Region with the S3 bucket targeted by the resource data sync.
     */
    bucketRegion?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Configuration information for the target S3 bucket.
     */
    s3Destination?: pulumi.Input<inputs.ssm.ResourceDataSyncS3DestinationArgs>;
    /**
     * A supported sync format. The following format is currently supported: JsonSerDe
     */
    syncFormat?: pulumi.Input<string>;
    /**
     * A name for the resource data sync.
     */
    syncName?: pulumi.Input<string>;
    /**
     * Information about the source where the data was synchronized.
     */
    syncSource?: pulumi.Input<inputs.ssm.ResourceDataSyncSyncSourceArgs>;
    /**
     * The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
     */
    syncType?: pulumi.Input<string>;
}
