// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The AWS::SSM::Association resource associates an SSM document in AWS Systems Manager with EC2 instances that contain a configuration agent to process the document.
 */
export class Association extends pulumi.CustomResource {
    /**
     * Get an existing Association resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Association {
        return new Association(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ssm:Association';

    /**
     * Returns true if the given object is an instance of Association.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Association {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Association.__pulumiType;
    }

    public readonly applyOnlyAtCronInterval!: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier of the association.
     */
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * The name of the association.
     */
    public readonly associationName!: pulumi.Output<string | undefined>;
    public readonly automationTargetParameterName!: pulumi.Output<string | undefined>;
    public readonly calendarNames!: pulumi.Output<string[] | undefined>;
    public readonly complianceSeverity!: pulumi.Output<enums.ssm.AssociationComplianceSeverity | undefined>;
    /**
     * The version of the SSM document to associate with the target.
     */
    public readonly documentVersion!: pulumi.Output<string | undefined>;
    /**
     * The ID of the instance that the SSM document is associated with.
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly maxConcurrency!: pulumi.Output<string | undefined>;
    public readonly maxErrors!: pulumi.Output<string | undefined>;
    /**
     * The name of the SSM document.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly outputLocation!: pulumi.Output<outputs.ssm.AssociationInstanceAssociationOutputLocation | undefined>;
    /**
     * Parameter values that the SSM document uses at runtime.
     */
    public readonly parameters!: pulumi.Output<any | undefined>;
    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     */
    public readonly scheduleExpression!: pulumi.Output<string | undefined>;
    public readonly syncCompliance!: pulumi.Output<enums.ssm.AssociationSyncCompliance | undefined>;
    /**
     * The targets that the SSM document sends commands to.
     */
    public readonly targets!: pulumi.Output<outputs.ssm.AssociationTarget[] | undefined>;
    public readonly waitForSuccessTimeoutSeconds!: pulumi.Output<number | undefined>;

    /**
     * Create a Association resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            inputs["applyOnlyAtCronInterval"] = args ? args.applyOnlyAtCronInterval : undefined;
            inputs["associationName"] = args ? args.associationName : undefined;
            inputs["automationTargetParameterName"] = args ? args.automationTargetParameterName : undefined;
            inputs["calendarNames"] = args ? args.calendarNames : undefined;
            inputs["complianceSeverity"] = args ? args.complianceSeverity : undefined;
            inputs["documentVersion"] = args ? args.documentVersion : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            inputs["maxErrors"] = args ? args.maxErrors : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["outputLocation"] = args ? args.outputLocation : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["scheduleExpression"] = args ? args.scheduleExpression : undefined;
            inputs["syncCompliance"] = args ? args.syncCompliance : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["waitForSuccessTimeoutSeconds"] = args ? args.waitForSuccessTimeoutSeconds : undefined;
            inputs["associationId"] = undefined /*out*/;
        } else {
            inputs["applyOnlyAtCronInterval"] = undefined /*out*/;
            inputs["associationId"] = undefined /*out*/;
            inputs["associationName"] = undefined /*out*/;
            inputs["automationTargetParameterName"] = undefined /*out*/;
            inputs["calendarNames"] = undefined /*out*/;
            inputs["complianceSeverity"] = undefined /*out*/;
            inputs["documentVersion"] = undefined /*out*/;
            inputs["instanceId"] = undefined /*out*/;
            inputs["maxConcurrency"] = undefined /*out*/;
            inputs["maxErrors"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["outputLocation"] = undefined /*out*/;
            inputs["parameters"] = undefined /*out*/;
            inputs["scheduleExpression"] = undefined /*out*/;
            inputs["syncCompliance"] = undefined /*out*/;
            inputs["targets"] = undefined /*out*/;
            inputs["waitForSuccessTimeoutSeconds"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Association.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Association resource.
 */
export interface AssociationArgs {
    applyOnlyAtCronInterval?: pulumi.Input<boolean>;
    /**
     * The name of the association.
     */
    associationName?: pulumi.Input<string>;
    automationTargetParameterName?: pulumi.Input<string>;
    calendarNames?: pulumi.Input<pulumi.Input<string>[]>;
    complianceSeverity?: pulumi.Input<enums.ssm.AssociationComplianceSeverity>;
    /**
     * The version of the SSM document to associate with the target.
     */
    documentVersion?: pulumi.Input<string>;
    /**
     * The ID of the instance that the SSM document is associated with.
     */
    instanceId?: pulumi.Input<string>;
    maxConcurrency?: pulumi.Input<string>;
    maxErrors?: pulumi.Input<string>;
    /**
     * The name of the SSM document.
     */
    name: pulumi.Input<string>;
    outputLocation?: pulumi.Input<inputs.ssm.AssociationInstanceAssociationOutputLocationArgs>;
    /**
     * Parameter values that the SSM document uses at runtime.
     */
    parameters?: any;
    /**
     * A Cron or Rate expression that specifies when the association is applied to the target.
     */
    scheduleExpression?: pulumi.Input<string>;
    syncCompliance?: pulumi.Input<enums.ssm.AssociationSyncCompliance>;
    /**
     * The targets that the SSM document sends commands to.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.ssm.AssociationTargetArgs>[]>;
    waitForSuccessTimeoutSeconds?: pulumi.Input<number>;
}
