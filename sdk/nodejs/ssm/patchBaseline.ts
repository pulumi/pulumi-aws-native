// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SSM::PatchBaseline
 *
 * @deprecated PatchBaseline is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class PatchBaseline extends pulumi.CustomResource {
    /**
     * Get an existing PatchBaseline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PatchBaseline {
        pulumi.log.warn("PatchBaseline is deprecated: PatchBaseline is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new PatchBaseline(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ssm:PatchBaseline';

    /**
     * Returns true if the given object is an instance of PatchBaseline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PatchBaseline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PatchBaseline.__pulumiType;
    }

    public readonly approvalRules!: pulumi.Output<outputs.ssm.PatchBaselineRuleGroup | undefined>;
    public readonly approvedPatches!: pulumi.Output<string[] | undefined>;
    public readonly approvedPatchesComplianceLevel!: pulumi.Output<string | undefined>;
    public readonly approvedPatchesEnableNonSecurity!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly globalFilters!: pulumi.Output<outputs.ssm.PatchBaselinePatchFilterGroup | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly operatingSystem!: pulumi.Output<string | undefined>;
    public readonly patchGroups!: pulumi.Output<string[] | undefined>;
    public readonly rejectedPatches!: pulumi.Output<string[] | undefined>;
    public readonly rejectedPatchesAction!: pulumi.Output<string | undefined>;
    public readonly sources!: pulumi.Output<outputs.ssm.PatchBaselinePatchSource[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.ssm.PatchBaselineTag[] | undefined>;

    /**
     * Create a PatchBaseline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated PatchBaseline is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args?: PatchBaselineArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("PatchBaseline is deprecated: PatchBaseline is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["approvalRules"] = args ? args.approvalRules : undefined;
            resourceInputs["approvedPatches"] = args ? args.approvedPatches : undefined;
            resourceInputs["approvedPatchesComplianceLevel"] = args ? args.approvedPatchesComplianceLevel : undefined;
            resourceInputs["approvedPatchesEnableNonSecurity"] = args ? args.approvedPatchesEnableNonSecurity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalFilters"] = args ? args.globalFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["patchGroups"] = args ? args.patchGroups : undefined;
            resourceInputs["rejectedPatches"] = args ? args.rejectedPatches : undefined;
            resourceInputs["rejectedPatchesAction"] = args ? args.rejectedPatchesAction : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        } else {
            resourceInputs["approvalRules"] = undefined /*out*/;
            resourceInputs["approvedPatches"] = undefined /*out*/;
            resourceInputs["approvedPatchesComplianceLevel"] = undefined /*out*/;
            resourceInputs["approvedPatchesEnableNonSecurity"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["globalFilters"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["operatingSystem"] = undefined /*out*/;
            resourceInputs["patchGroups"] = undefined /*out*/;
            resourceInputs["rejectedPatches"] = undefined /*out*/;
            resourceInputs["rejectedPatchesAction"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PatchBaseline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PatchBaseline resource.
 */
export interface PatchBaselineArgs {
    approvalRules?: pulumi.Input<inputs.ssm.PatchBaselineRuleGroupArgs>;
    approvedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    approvedPatchesComplianceLevel?: pulumi.Input<string>;
    approvedPatchesEnableNonSecurity?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    globalFilters?: pulumi.Input<inputs.ssm.PatchBaselinePatchFilterGroupArgs>;
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    patchGroups?: pulumi.Input<pulumi.Input<string>[]>;
    rejectedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    rejectedPatchesAction?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.ssm.PatchBaselinePatchSourceArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ssm.PatchBaselineTagArgs>[]>;
}
