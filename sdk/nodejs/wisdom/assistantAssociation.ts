// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Wisdom::AssistantAssociation Resource Type
 */
export class AssistantAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AssistantAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AssistantAssociation {
        return new AssistantAssociation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:wisdom:AssistantAssociation';

    /**
     * Returns true if the given object is an instance of AssistantAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssistantAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssistantAssociation.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the Wisdom assistant.
     */
    public /*out*/ readonly assistantArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the assistant association.
     */
    public /*out*/ readonly assistantAssociationArn!: pulumi.Output<string>;
    /**
     * The ID of the association.
     */
    public /*out*/ readonly assistantAssociationId!: pulumi.Output<string>;
    /**
     * The identifier of the Wisdom assistant.
     */
    public readonly assistantId!: pulumi.Output<string>;
    /**
     * The identifier of the associated resource.
     */
    public readonly association!: pulumi.Output<outputs.wisdom.AssistantAssociationAssociationData>;
    /**
     * The type of association.
     */
    public readonly associationType!: pulumi.Output<enums.wisdom.AssistantAssociationAssociationType>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    public readonly tags!: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;

    /**
     * Create a AssistantAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssistantAssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.assistantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assistantId'");
            }
            if ((!args || args.association === undefined) && !opts.urn) {
                throw new Error("Missing required property 'association'");
            }
            if ((!args || args.associationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'associationType'");
            }
            resourceInputs["assistantId"] = args ? args.assistantId : undefined;
            resourceInputs["association"] = args ? args.association : undefined;
            resourceInputs["associationType"] = args ? args.associationType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["assistantArn"] = undefined /*out*/;
            resourceInputs["assistantAssociationArn"] = undefined /*out*/;
            resourceInputs["assistantAssociationId"] = undefined /*out*/;
        } else {
            resourceInputs["assistantArn"] = undefined /*out*/;
            resourceInputs["assistantAssociationArn"] = undefined /*out*/;
            resourceInputs["assistantAssociationId"] = undefined /*out*/;
            resourceInputs["assistantId"] = undefined /*out*/;
            resourceInputs["association"] = undefined /*out*/;
            resourceInputs["associationType"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["assistantId", "association", "associationType", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(AssistantAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AssistantAssociation resource.
 */
export interface AssistantAssociationArgs {
    /**
     * The identifier of the Wisdom assistant.
     */
    assistantId: pulumi.Input<string>;
    /**
     * The identifier of the associated resource.
     */
    association: pulumi.Input<inputs.wisdom.AssistantAssociationAssociationDataArgs>;
    /**
     * The type of association.
     */
    associationType: pulumi.Input<enums.wisdom.AssistantAssociationAssociationType>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
}
