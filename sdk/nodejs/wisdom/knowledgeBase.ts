// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Wisdom::KnowledgeBase Resource Type
 */
export class KnowledgeBase extends pulumi.CustomResource {
    /**
     * Get an existing KnowledgeBase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KnowledgeBase {
        return new KnowledgeBase(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:wisdom:KnowledgeBase';

    /**
     * Returns true if the given object is an instance of KnowledgeBase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KnowledgeBase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KnowledgeBase.__pulumiType;
    }

    /**
     * The description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the knowledge base.
     */
    declare public /*out*/ readonly knowledgeBaseArn: pulumi.Output<string>;
    /**
     * The ID of the knowledge base.
     */
    declare public /*out*/ readonly knowledgeBaseId: pulumi.Output<string>;
    /**
     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.
     */
    declare public readonly knowledgeBaseType: pulumi.Output<enums.wisdom.KnowledgeBaseType>;
    /**
     * The name of the knowledge base.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Information about how to render the content.
     */
    declare public readonly renderingConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseRenderingConfiguration | undefined>;
    /**
     * This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
     */
    declare public readonly serverSideEncryptionConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseServerSideEncryptionConfiguration | undefined>;
    /**
     * The source of the knowledge base content. Only set this argument for EXTERNAL or Managed knowledge bases.
     */
    declare public readonly sourceConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseSourceConfiguration0Properties | outputs.wisdom.KnowledgeBaseSourceConfiguration1Properties | undefined>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    declare public readonly tags: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;
    /**
     * Contains details about how to ingest the documents in a data source.
     */
    declare public readonly vectorIngestionConfiguration: pulumi.Output<outputs.wisdom.KnowledgeBaseVectorIngestionConfiguration | undefined>;

    /**
     * Create a KnowledgeBase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KnowledgeBaseArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.knowledgeBaseType === undefined && !opts.urn) {
                throw new Error("Missing required property 'knowledgeBaseType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["knowledgeBaseType"] = args?.knowledgeBaseType;
            resourceInputs["name"] = args?.name;
            resourceInputs["renderingConfiguration"] = args?.renderingConfiguration;
            resourceInputs["serverSideEncryptionConfiguration"] = args?.serverSideEncryptionConfiguration;
            resourceInputs["sourceConfiguration"] = args?.sourceConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vectorIngestionConfiguration"] = args?.vectorIngestionConfiguration;
            resourceInputs["knowledgeBaseArn"] = undefined /*out*/;
            resourceInputs["knowledgeBaseId"] = undefined /*out*/;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["knowledgeBaseArn"] = undefined /*out*/;
            resourceInputs["knowledgeBaseId"] = undefined /*out*/;
            resourceInputs["knowledgeBaseType"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["renderingConfiguration"] = undefined /*out*/;
            resourceInputs["serverSideEncryptionConfiguration"] = undefined /*out*/;
            resourceInputs["sourceConfiguration"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vectorIngestionConfiguration"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["description", "knowledgeBaseType", "name", "serverSideEncryptionConfiguration", "sourceConfiguration", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(KnowledgeBase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a KnowledgeBase resource.
 */
export interface KnowledgeBaseArgs {
    /**
     * The description.
     */
    description?: pulumi.Input<string>;
    /**
     * The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content. EXTERNAL knowledge bases support integrations with third-party systems whose content is synchronized automatically.
     */
    knowledgeBaseType: pulumi.Input<enums.wisdom.KnowledgeBaseType>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * Information about how to render the content.
     */
    renderingConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseRenderingConfigurationArgs>;
    /**
     * This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseServerSideEncryptionConfigurationArgs>;
    /**
     * The source of the knowledge base content. Only set this argument for EXTERNAL or Managed knowledge bases.
     */
    sourceConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseSourceConfiguration0PropertiesArgs | inputs.wisdom.KnowledgeBaseSourceConfiguration1PropertiesArgs>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
    /**
     * Contains details about how to ingest the documents in a data source.
     */
    vectorIngestionConfiguration?: pulumi.Input<inputs.wisdom.KnowledgeBaseVectorIngestionConfigurationArgs>;
}
