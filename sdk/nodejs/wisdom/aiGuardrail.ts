// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Wisdom::AIGuardrail Resource Type
 */
export class AiGuardrail extends pulumi.CustomResource {
    /**
     * Get an existing AiGuardrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): AiGuardrail {
        return new AiGuardrail(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:wisdom:AiGuardrail';

    /**
     * Returns true if the given object is an instance of AiGuardrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiGuardrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiGuardrail.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the AI Guardrail.
     */
    public /*out*/ readonly aiGuardrailArn!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon Q in Connect AI Guardrail.
     */
    public /*out*/ readonly aiGuardrailId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon Q in Connect assistant.
     */
    public /*out*/ readonly assistantArn!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     */
    public readonly assistantId!: pulumi.Output<string>;
    /**
     * Messaging for when violations are detected in text
     */
    public readonly blockedInputMessaging!: pulumi.Output<string>;
    /**
     * Messaging for when violations are detected in text
     */
    public readonly blockedOutputsMessaging!: pulumi.Output<string>;
    /**
     * Contains details about how to handle harmful content.
     */
    public readonly contentPolicyConfig!: pulumi.Output<outputs.wisdom.AiGuardrailAiGuardrailContentPolicyConfig | undefined>;
    /**
     * The policy configuration details for the AI Guardrail's contextual grounding policy.
     */
    public readonly contextualGroundingPolicyConfig!: pulumi.Output<outputs.wisdom.AiGuardrailAiGuardrailContextualGroundingPolicyConfig | undefined>;
    /**
     * Description of the guardrail or its version
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the AI Guardrail.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Contains details about PII entities and regular expressions to configure for the AI Guardrail.
     */
    public readonly sensitiveInformationPolicyConfig!: pulumi.Output<outputs.wisdom.AiGuardrailAiGuardrailSensitiveInformationPolicyConfig | undefined>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Contains details about topics that the AI Guardrail should identify and deny.
     */
    public readonly topicPolicyConfig!: pulumi.Output<outputs.wisdom.AiGuardrailAiGuardrailTopicPolicyConfig | undefined>;
    /**
     * Contains details about the word policy to configured for the AI Guardrail.
     */
    public readonly wordPolicyConfig!: pulumi.Output<outputs.wisdom.AiGuardrailAiGuardrailWordPolicyConfig | undefined>;

    /**
     * Create a AiGuardrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiGuardrailArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.assistantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assistantId'");
            }
            if ((!args || args.blockedInputMessaging === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockedInputMessaging'");
            }
            if ((!args || args.blockedOutputsMessaging === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockedOutputsMessaging'");
            }
            resourceInputs["assistantId"] = args ? args.assistantId : undefined;
            resourceInputs["blockedInputMessaging"] = args ? args.blockedInputMessaging : undefined;
            resourceInputs["blockedOutputsMessaging"] = args ? args.blockedOutputsMessaging : undefined;
            resourceInputs["contentPolicyConfig"] = args ? args.contentPolicyConfig : undefined;
            resourceInputs["contextualGroundingPolicyConfig"] = args ? args.contextualGroundingPolicyConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sensitiveInformationPolicyConfig"] = args ? args.sensitiveInformationPolicyConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topicPolicyConfig"] = args ? args.topicPolicyConfig : undefined;
            resourceInputs["wordPolicyConfig"] = args ? args.wordPolicyConfig : undefined;
            resourceInputs["aiGuardrailArn"] = undefined /*out*/;
            resourceInputs["aiGuardrailId"] = undefined /*out*/;
            resourceInputs["assistantArn"] = undefined /*out*/;
        } else {
            resourceInputs["aiGuardrailArn"] = undefined /*out*/;
            resourceInputs["aiGuardrailId"] = undefined /*out*/;
            resourceInputs["assistantArn"] = undefined /*out*/;
            resourceInputs["assistantId"] = undefined /*out*/;
            resourceInputs["blockedInputMessaging"] = undefined /*out*/;
            resourceInputs["blockedOutputsMessaging"] = undefined /*out*/;
            resourceInputs["contentPolicyConfig"] = undefined /*out*/;
            resourceInputs["contextualGroundingPolicyConfig"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["sensitiveInformationPolicyConfig"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["topicPolicyConfig"] = undefined /*out*/;
            resourceInputs["wordPolicyConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["assistantId", "name", "tags.*"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(AiGuardrail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a AiGuardrail resource.
 */
export interface AiGuardrailArgs {
    /**
     * The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.
     */
    assistantId: pulumi.Input<string>;
    /**
     * Messaging for when violations are detected in text
     */
    blockedInputMessaging: pulumi.Input<string>;
    /**
     * Messaging for when violations are detected in text
     */
    blockedOutputsMessaging: pulumi.Input<string>;
    /**
     * Contains details about how to handle harmful content.
     */
    contentPolicyConfig?: pulumi.Input<inputs.wisdom.AiGuardrailAiGuardrailContentPolicyConfigArgs>;
    /**
     * The policy configuration details for the AI Guardrail's contextual grounding policy.
     */
    contextualGroundingPolicyConfig?: pulumi.Input<inputs.wisdom.AiGuardrailAiGuardrailContextualGroundingPolicyConfigArgs>;
    /**
     * Description of the guardrail or its version
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the AI Guardrail.
     */
    name?: pulumi.Input<string>;
    /**
     * Contains details about PII entities and regular expressions to configure for the AI Guardrail.
     */
    sensitiveInformationPolicyConfig?: pulumi.Input<inputs.wisdom.AiGuardrailAiGuardrailSensitiveInformationPolicyConfigArgs>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Contains details about topics that the AI Guardrail should identify and deny.
     */
    topicPolicyConfig?: pulumi.Input<inputs.wisdom.AiGuardrailAiGuardrailTopicPolicyConfigArgs>;
    /**
     * Contains details about the word policy to configured for the AI Guardrail.
     */
    wordPolicyConfig?: pulumi.Input<inputs.wisdom.AiGuardrailAiGuardrailWordPolicyConfigArgs>;
}
