// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lambda::Function
 */
export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lambda:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * Unique identifier for function resources
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The code for the function.
     */
    public readonly code!: pulumi.Output<outputs.lambda.FunctionCode>;
    /**
     * A unique Arn for CodeSigningConfig resource
     */
    public readonly codeSigningConfigArn!: pulumi.Output<string | undefined>;
    /**
     * A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
     */
    public readonly deadLetterConfig!: pulumi.Output<outputs.lambda.FunctionDeadLetterConfig | undefined>;
    /**
     * A description of the function.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment variables that are accessible from function code during execution.
     */
    public readonly environment!: pulumi.Output<outputs.lambda.FunctionEnvironment | undefined>;
    /**
     * Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
     */
    public readonly fileSystemConfigs!: pulumi.Output<outputs.lambda.FunctionFileSystemConfig[] | undefined>;
    /**
     * The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
     */
    public readonly functionName!: pulumi.Output<string | undefined>;
    /**
     * The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
     */
    public readonly handler!: pulumi.Output<string | undefined>;
    /**
     * ImageConfig
     */
    public readonly imageConfig!: pulumi.Output<outputs.lambda.FunctionImageConfig | undefined>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
     */
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    /**
     * A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
     */
    public readonly layers!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
     */
    public readonly memorySize!: pulumi.Output<number | undefined>;
    /**
     * PackageType.
     */
    public readonly packageType!: pulumi.Output<string | undefined>;
    /**
     * The number of simultaneous executions to reserve for the function.
     */
    public readonly reservedConcurrentExecutions!: pulumi.Output<number | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the function's execution role.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The identifier of the function's runtime.
     */
    public readonly runtime!: pulumi.Output<string | undefined>;
    /**
     * A list of tags to apply to the function.
     */
    public readonly tags!: pulumi.Output<outputs.lambda.FunctionTag[] | undefined>;
    /**
     * The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
     */
    public readonly tracingConfig!: pulumi.Output<outputs.lambda.FunctionTracingConfig | undefined>;
    /**
     * For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
     */
    public readonly vpcConfig!: pulumi.Output<outputs.lambda.FunctionVpcConfig | undefined>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            inputs["code"] = args ? args.code : undefined;
            inputs["codeSigningConfigArn"] = args ? args.codeSigningConfigArn : undefined;
            inputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["fileSystemConfigs"] = args ? args.fileSystemConfigs : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["handler"] = args ? args.handler : undefined;
            inputs["imageConfig"] = args ? args.imageConfig : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["layers"] = args ? args.layers : undefined;
            inputs["memorySize"] = args ? args.memorySize : undefined;
            inputs["packageType"] = args ? args.packageType : undefined;
            inputs["reservedConcurrentExecutions"] = args ? args.reservedConcurrentExecutions : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["runtime"] = args ? args.runtime : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["tracingConfig"] = args ? args.tracingConfig : undefined;
            inputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            inputs["arn"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["code"] = undefined /*out*/;
            inputs["codeSigningConfigArn"] = undefined /*out*/;
            inputs["deadLetterConfig"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["environment"] = undefined /*out*/;
            inputs["fileSystemConfigs"] = undefined /*out*/;
            inputs["functionName"] = undefined /*out*/;
            inputs["handler"] = undefined /*out*/;
            inputs["imageConfig"] = undefined /*out*/;
            inputs["kmsKeyArn"] = undefined /*out*/;
            inputs["layers"] = undefined /*out*/;
            inputs["memorySize"] = undefined /*out*/;
            inputs["packageType"] = undefined /*out*/;
            inputs["reservedConcurrentExecutions"] = undefined /*out*/;
            inputs["role"] = undefined /*out*/;
            inputs["runtime"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["timeout"] = undefined /*out*/;
            inputs["tracingConfig"] = undefined /*out*/;
            inputs["vpcConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Function.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    /**
     * The code for the function.
     */
    code: pulumi.Input<inputs.lambda.FunctionCodeArgs>;
    /**
     * A unique Arn for CodeSigningConfig resource
     */
    codeSigningConfigArn?: pulumi.Input<string>;
    /**
     * A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
     */
    deadLetterConfig?: pulumi.Input<inputs.lambda.FunctionDeadLetterConfigArgs>;
    /**
     * A description of the function.
     */
    description?: pulumi.Input<string>;
    /**
     * Environment variables that are accessible from function code during execution.
     */
    environment?: pulumi.Input<inputs.lambda.FunctionEnvironmentArgs>;
    /**
     * Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
     */
    fileSystemConfigs?: pulumi.Input<pulumi.Input<inputs.lambda.FunctionFileSystemConfigArgs>[]>;
    /**
     * The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
     */
    handler?: pulumi.Input<string>;
    /**
     * ImageConfig
     */
    imageConfig?: pulumi.Input<inputs.lambda.FunctionImageConfigArgs>;
    /**
     * The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
     */
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * PackageType.
     */
    packageType?: pulumi.Input<string>;
    /**
     * The number of simultaneous executions to reserve for the function.
     */
    reservedConcurrentExecutions?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) of the function's execution role.
     */
    role: pulumi.Input<string>;
    /**
     * The identifier of the function's runtime.
     */
    runtime?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the function.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.lambda.FunctionTagArgs>[]>;
    /**
     * The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
     */
    tracingConfig?: pulumi.Input<inputs.lambda.FunctionTracingConfigArgs>;
    /**
     * For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
     */
    vpcConfig?: pulumi.Input<inputs.lambda.FunctionVpcConfigArgs>;
}
