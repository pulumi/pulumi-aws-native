// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lambda::Permission
 */
export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lambda:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * The action that the principal can use on the function.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * For Alexa Smart Home functions, a token that must be supplied by the invoker.
     */
    public readonly eventSourceToken!: pulumi.Output<string | undefined>;
    /**
     * The name of the Lambda function, version, or alias.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * The type of authentication that your function URL uses. Set to AWS_IAM if you want to restrict access to authenticated users only. Set to NONE if you want to bypass IAM authentication to create a public endpoint.
     */
    public readonly functionUrlAuthType!: pulumi.Output<enums.lambda.PermissionFunctionUrlAuthType | undefined>;
    /**
     * The AWS service or account that invokes the function. If you specify a service, use SourceArn or SourceAccount to limit who can invoke the function through that service.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     */
    public readonly principalOrgId!: pulumi.Output<string | undefined>;
    /**
     * For Amazon S3, the ID of the account that owns the resource. Use this together with SourceArn to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
     */
    public readonly sourceAccount!: pulumi.Output<string | undefined>;
    /**
     * For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
     */
    public readonly sourceArn!: pulumi.Output<string | undefined>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["eventSourceToken"] = args ? args.eventSourceToken : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["functionUrlAuthType"] = args ? args.functionUrlAuthType : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["principalOrgId"] = args ? args.principalOrgId : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
        } else {
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["eventSourceToken"] = undefined /*out*/;
            resourceInputs["functionName"] = undefined /*out*/;
            resourceInputs["functionUrlAuthType"] = undefined /*out*/;
            resourceInputs["principal"] = undefined /*out*/;
            resourceInputs["principalOrgId"] = undefined /*out*/;
            resourceInputs["sourceAccount"] = undefined /*out*/;
            resourceInputs["sourceArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * The action that the principal can use on the function.
     */
    action: pulumi.Input<string>;
    /**
     * For Alexa Smart Home functions, a token that must be supplied by the invoker.
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * The name of the Lambda function, version, or alias.
     */
    functionName: pulumi.Input<string>;
    /**
     * The type of authentication that your function URL uses. Set to AWS_IAM if you want to restrict access to authenticated users only. Set to NONE if you want to bypass IAM authentication to create a public endpoint.
     */
    functionUrlAuthType?: pulumi.Input<enums.lambda.PermissionFunctionUrlAuthType>;
    /**
     * The AWS service or account that invokes the function. If you specify a service, use SourceArn or SourceAccount to limit who can invoke the function through that service.
     */
    principal: pulumi.Input<string>;
    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     */
    principalOrgId?: pulumi.Input<string>;
    /**
     * For Amazon S3, the ID of the account that owns the resource. Use this together with SourceArn to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
     */
    sourceArn?: pulumi.Input<string>;
}
