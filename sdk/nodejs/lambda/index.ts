// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AliasArgs } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;

export { CodeSigningConfigArgs } from "./codeSigningConfig";
export type CodeSigningConfig = import("./codeSigningConfig").CodeSigningConfig;
export const CodeSigningConfig: typeof import("./codeSigningConfig").CodeSigningConfig = null as any;

export { EventInvokeConfigArgs } from "./eventInvokeConfig";
export type EventInvokeConfig = import("./eventInvokeConfig").EventInvokeConfig;
export const EventInvokeConfig: typeof import("./eventInvokeConfig").EventInvokeConfig = null as any;

export { EventSourceMappingArgs } from "./eventSourceMapping";
export type EventSourceMapping = import("./eventSourceMapping").EventSourceMapping;
export const EventSourceMapping: typeof import("./eventSourceMapping").EventSourceMapping = null as any;

export { FunctionArgs } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;

export { GetCodeSigningConfigArgs, GetCodeSigningConfigResult, GetCodeSigningConfigOutputArgs } from "./getCodeSigningConfig";
export const getCodeSigningConfig: typeof import("./getCodeSigningConfig").getCodeSigningConfig = null as any;
export const getCodeSigningConfigOutput: typeof import("./getCodeSigningConfig").getCodeSigningConfigOutput = null as any;

export { GetEventInvokeConfigArgs, GetEventInvokeConfigResult, GetEventInvokeConfigOutputArgs } from "./getEventInvokeConfig";
export const getEventInvokeConfig: typeof import("./getEventInvokeConfig").getEventInvokeConfig = null as any;
export const getEventInvokeConfigOutput: typeof import("./getEventInvokeConfig").getEventInvokeConfigOutput = null as any;

export { GetEventSourceMappingArgs, GetEventSourceMappingResult, GetEventSourceMappingOutputArgs } from "./getEventSourceMapping";
export const getEventSourceMapping: typeof import("./getEventSourceMapping").getEventSourceMapping = null as any;
export const getEventSourceMappingOutput: typeof import("./getEventSourceMapping").getEventSourceMappingOutput = null as any;

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;

export { GetLayerVersionArgs, GetLayerVersionResult, GetLayerVersionOutputArgs } from "./getLayerVersion";
export const getLayerVersion: typeof import("./getLayerVersion").getLayerVersion = null as any;
export const getLayerVersionOutput: typeof import("./getLayerVersion").getLayerVersionOutput = null as any;

export { GetLayerVersionPermissionArgs, GetLayerVersionPermissionResult, GetLayerVersionPermissionOutputArgs } from "./getLayerVersionPermission";
export const getLayerVersionPermission: typeof import("./getLayerVersionPermission").getLayerVersionPermission = null as any;
export const getLayerVersionPermissionOutput: typeof import("./getLayerVersionPermission").getLayerVersionPermissionOutput = null as any;

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;

export { GetUrlArgs, GetUrlResult, GetUrlOutputArgs } from "./getUrl";
export const getUrl: typeof import("./getUrl").getUrl = null as any;
export const getUrlOutput: typeof import("./getUrl").getUrlOutput = null as any;

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;

export { LayerVersionArgs } from "./layerVersion";
export type LayerVersion = import("./layerVersion").LayerVersion;
export const LayerVersion: typeof import("./layerVersion").LayerVersion = null as any;

export { LayerVersionPermissionArgs } from "./layerVersionPermission";
export type LayerVersionPermission = import("./layerVersionPermission").LayerVersionPermission;
export const LayerVersionPermission: typeof import("./layerVersionPermission").LayerVersionPermission = null as any;

export { PermissionArgs } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;

export { UrlArgs } from "./url";
export type Url = import("./url").Url;
export const Url: typeof import("./url").Url = null as any;

export { VersionArgs } from "./version";
export type Version = import("./version").Version;
export const Version: typeof import("./version").Version = null as any;

utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));
utilities.lazyLoad(exports, ["CodeSigningConfig"], () => require("./codeSigningConfig"));
utilities.lazyLoad(exports, ["EventInvokeConfig"], () => require("./eventInvokeConfig"));
utilities.lazyLoad(exports, ["EventSourceMapping"], () => require("./eventSourceMapping"));
utilities.lazyLoad(exports, ["Function"], () => require("./function"));
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));
utilities.lazyLoad(exports, ["getCodeSigningConfig","getCodeSigningConfigOutput"], () => require("./getCodeSigningConfig"));
utilities.lazyLoad(exports, ["getEventInvokeConfig","getEventInvokeConfigOutput"], () => require("./getEventInvokeConfig"));
utilities.lazyLoad(exports, ["getEventSourceMapping","getEventSourceMappingOutput"], () => require("./getEventSourceMapping"));
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));
utilities.lazyLoad(exports, ["getLayerVersion","getLayerVersionOutput"], () => require("./getLayerVersion"));
utilities.lazyLoad(exports, ["getLayerVersionPermission","getLayerVersionPermissionOutput"], () => require("./getLayerVersionPermission"));
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));
utilities.lazyLoad(exports, ["getUrl","getUrlOutput"], () => require("./getUrl"));
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));
utilities.lazyLoad(exports, ["LayerVersion"], () => require("./layerVersion"));
utilities.lazyLoad(exports, ["LayerVersionPermission"], () => require("./layerVersionPermission"));
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));
utilities.lazyLoad(exports, ["Url"], () => require("./url"));
utilities.lazyLoad(exports, ["Version"], () => require("./version"));

// Export enums:
export * from "../types/enums/lambda";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:lambda:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "aws-native:lambda:CodeSigningConfig":
                return new CodeSigningConfig(name, <any>undefined, { urn })
            case "aws-native:lambda:EventInvokeConfig":
                return new EventInvokeConfig(name, <any>undefined, { urn })
            case "aws-native:lambda:EventSourceMapping":
                return new EventSourceMapping(name, <any>undefined, { urn })
            case "aws-native:lambda:Function":
                return new Function(name, <any>undefined, { urn })
            case "aws-native:lambda:LayerVersion":
                return new LayerVersion(name, <any>undefined, { urn })
            case "aws-native:lambda:LayerVersionPermission":
                return new LayerVersionPermission(name, <any>undefined, { urn })
            case "aws-native:lambda:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "aws-native:lambda:Url":
                return new Url(name, <any>undefined, { urn })
            case "aws-native:lambda:Version":
                return new Version(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "lambda", _module)
