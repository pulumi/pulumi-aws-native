// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lambda::LayerVersion
 */
export class LayerVersion extends pulumi.CustomResource {
    /**
     * Get an existing LayerVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LayerVersion {
        return new LayerVersion(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:lambda:LayerVersion';

    /**
     * Returns true if the given object is an instance of LayerVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LayerVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LayerVersion.__pulumiType;
    }

    /**
     * A list of compatible instruction set architectures.
     */
    public readonly compatibleArchitectures!: pulumi.Output<string[] | undefined>;
    /**
     * A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
     */
    public readonly compatibleRuntimes!: pulumi.Output<string[] | undefined>;
    /**
     * The function layer archive.
     */
    public readonly content!: pulumi.Output<outputs.lambda.LayerVersionContent>;
    /**
     * The description of the version.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    public readonly layerName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly layerVersionArn!: pulumi.Output<string>;
    /**
     * The layer's software license.
     */
    public readonly licenseInfo!: pulumi.Output<string | undefined>;

    /**
     * Create a LayerVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LayerVersionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["compatibleArchitectures"] = args ? args.compatibleArchitectures : undefined;
            resourceInputs["compatibleRuntimes"] = args ? args.compatibleRuntimes : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["layerName"] = args ? args.layerName : undefined;
            resourceInputs["licenseInfo"] = args ? args.licenseInfo : undefined;
            resourceInputs["layerVersionArn"] = undefined /*out*/;
        } else {
            resourceInputs["compatibleArchitectures"] = undefined /*out*/;
            resourceInputs["compatibleRuntimes"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["layerName"] = undefined /*out*/;
            resourceInputs["layerVersionArn"] = undefined /*out*/;
            resourceInputs["licenseInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["compatibleArchitectures[*]", "compatibleRuntimes[*]", "content", "description", "layerName", "licenseInfo"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LayerVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LayerVersion resource.
 */
export interface LayerVersionArgs {
    /**
     * A list of compatible instruction set architectures.
     */
    compatibleArchitectures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
     */
    compatibleRuntimes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The function layer archive.
     */
    content: pulumi.Input<inputs.lambda.LayerVersionContentArgs>;
    /**
     * The description of the version.
     */
    description?: pulumi.Input<string>;
    /**
     * The name or Amazon Resource Name (ARN) of the layer.
     */
    layerName?: pulumi.Input<string>;
    /**
     * The layer's software license.
     */
    licenseInfo?: pulumi.Input<string>;
}
