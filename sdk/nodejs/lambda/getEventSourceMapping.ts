// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::Lambda::EventSourceMapping`` resource creates a mapping between an event source and an LAMlong function. LAM reads items from the event source and triggers the function.
 *  For details about each event source type, see the following topics. In particular, each of the topics describes the required and optional parameters for the specific event source.
 *   +   [Configuring a Dynamo DB stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping)
 *   +   [Configuring a Kinesis stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping)
 *   +   [Configuring an SQS queue as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource)
 *   +   [Configuring an MQ broker as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping)
 *   +   [Configuring MSK as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html)
 *   +   [Configuring Self-Managed Apache Kafka as an event source](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html)
 *   +   [Configuring Amazon DocumentDB as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html)
 */
export function getEventSourceMapping(args: GetEventSourceMappingArgs, opts?: pulumi.InvokeOptions): Promise<GetEventSourceMappingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:lambda:getEventSourceMapping", {
        "id": args.id,
    }, opts);
}

export interface GetEventSourceMappingArgs {
    /**
     * The event source mapping's ID.
     */
    id: string;
}

export interface GetEventSourceMappingResult {
    /**
     * The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).
     *   +   *Amazon Kinesis* – Default 100. Max 10,000.
     *   +   *Amazon DynamoDB Streams* – Default 100. Max 10,000.
     *   +   *Amazon Simple Queue Service* – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.
     *   +   *Amazon Managed Streaming for Apache Kafka* – Default 100. Max 10,000.
     *   +   *Self-managed Apache Kafka* – Default 100. Max 10,000.
     *   +   *Amazon MQ (ActiveMQ and RabbitMQ)* – Default 100. Max 10,000.
     *   +   *DocumentDB* – Default 100. Max 10,000.
     */
    readonly batchSize?: number;
    /**
     * (Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry. The default value is false.
     */
    readonly bisectBatchOnFunctionError?: boolean;
    /**
     * (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Apache Kafka event sources only) A configuration object that specifies the destination of an event after Lambda processes it.
     */
    readonly destinationConfig?: outputs.lambda.EventSourceMappingDestinationConfig;
    /**
     * Specific configuration settings for a DocumentDB event source.
     */
    readonly documentDbEventSourceConfig?: outputs.lambda.EventSourceMappingDocumentDbEventSourceConfig;
    /**
     * When true, the event source mapping is active. When false, Lambda pauses polling and invocation.
     *  Default: True
     */
    readonly enabled?: boolean;
    /**
     * The Amazon Resource Name (ARN) of the event source mapping.
     */
    readonly eventSourceMappingArn?: string;
    /**
     * An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see [Lambda event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
     */
    readonly filterCriteria?: outputs.lambda.EventSourceMappingFilterCriteria;
    /**
     * The name or ARN of the Lambda function.
     *   **Name formats**
     *  +   *Function name* – ``MyFunction``.
     *   +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction``.
     *   +   *Version or Alias ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD``.
     *   +   *Partial ARN* – ``123456789012:function:MyFunction``.
     *   
     *  The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
     */
    readonly functionName?: string;
    /**
     * (Kinesis, DynamoDB Streams, and SQS) A list of current response type enums applied to the event source mapping.
     *  Valid Values: ``ReportBatchItemFailures``
     */
    readonly functionResponseTypes?: enums.lambda.EventSourceMappingFunctionResponseTypesItem[];
    /**
     * The event source mapping's ID.
     */
    readonly id?: string;
    /**
     * The ARN of the KMSlong (KMS) customer managed key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
     */
    readonly kmsKeyArn?: string;
    /**
     * The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.
     *   *Default (, , event sources)*: 0
     *   *Default (, Kafka, , event sources)*: 500 ms
     *   *Related setting:* For SQS event sources, when you set ``BatchSize`` to a value greater than 10, you must set ``MaximumBatchingWindowInSeconds`` to at least 1.
     */
    readonly maximumBatchingWindowInSeconds?: number;
    /**
     * (Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, Lambda never discards old records.
     *   The minimum valid value for maximum record age is 60s. Although values less than 60 and greater than -1 fall within the parameter's absolute range, they are not allowed
     */
    readonly maximumRecordAgeInSeconds?: number;
    /**
     * (Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, Lambda retries failed records until the record expires in the event source.
     */
    readonly maximumRetryAttempts?: number;
    /**
     * (Kinesis and DynamoDB Streams only) The number of batches to process concurrently from each shard. The default value is 1.
     */
    readonly parallelizationFactor?: number;
    /**
     * (Amazon MQ) The name of the Amazon MQ broker destination queue to consume.
     */
    readonly queues?: string[];
    /**
     * (Amazon SQS only) The scaling configuration for the event source. For more information, see [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
     */
    readonly scalingConfig?: outputs.lambda.EventSourceMappingScalingConfig;
    /**
     * An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.
     */
    readonly sourceAccessConfigurations?: outputs.lambda.EventSourceMappingSourceAccessConfiguration[];
    /**
     * A list of tags to add to the event source mapping.
     *   You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
     */
    readonly tags?: outputs.Tag[];
    /**
     * The name of the Kafka topic.
     */
    readonly topics?: string[];
    /**
     * (Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.
     */
    readonly tumblingWindowInSeconds?: number;
}
/**
 * The ``AWS::Lambda::EventSourceMapping`` resource creates a mapping between an event source and an LAMlong function. LAM reads items from the event source and triggers the function.
 *  For details about each event source type, see the following topics. In particular, each of the topics describes the required and optional parameters for the specific event source.
 *   +   [Configuring a Dynamo DB stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping)
 *   +   [Configuring a Kinesis stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping)
 *   +   [Configuring an SQS queue as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource)
 *   +   [Configuring an MQ broker as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping)
 *   +   [Configuring MSK as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html)
 *   +   [Configuring Self-Managed Apache Kafka as an event source](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html)
 *   +   [Configuring Amazon DocumentDB as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html)
 */
export function getEventSourceMappingOutput(args: GetEventSourceMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventSourceMappingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:lambda:getEventSourceMapping", {
        "id": args.id,
    }, opts);
}

export interface GetEventSourceMappingOutputArgs {
    /**
     * The event source mapping's ID.
     */
    id: pulumi.Input<string>;
}
