// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Lambda::EventSourceMapping
 */
export function getEventSourceMapping(args: GetEventSourceMappingArgs, opts?: pulumi.InvokeOptions): Promise<GetEventSourceMappingResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:lambda:getEventSourceMapping", {
        "id": args.id,
    }, opts);
}

export interface GetEventSourceMappingArgs {
    /**
     * Event Source Mapping Identifier UUID.
     */
    id: string;
}

export interface GetEventSourceMappingResult {
    /**
     * The maximum number of items to retrieve in a single batch.
     */
    readonly batchSize?: number;
    /**
     * (Streams) If the function returns an error, split the batch in two and retry.
     */
    readonly bisectBatchOnFunctionError?: boolean;
    /**
     * (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
     */
    readonly destinationConfig?: outputs.lambda.EventSourceMappingDestinationConfig;
    /**
     * Disables the event source mapping to pause polling and invocation.
     */
    readonly enabled?: boolean;
    /**
     * The filter criteria to control event filtering.
     */
    readonly filterCriteria?: outputs.lambda.EventSourceMappingFilterCriteria;
    /**
     * The name of the Lambda function.
     */
    readonly functionName?: string;
    /**
     * (Streams) A list of response types supported by the function.
     */
    readonly functionResponseTypes?: enums.lambda.EventSourceMappingFunctionResponseTypesItem[];
    /**
     * Event Source Mapping Identifier UUID.
     */
    readonly id?: string;
    /**
     * (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
     */
    readonly maximumBatchingWindowInSeconds?: number;
    /**
     * (Streams) The maximum age of a record that Lambda sends to a function for processing.
     */
    readonly maximumRecordAgeInSeconds?: number;
    /**
     * (Streams) The maximum number of times to retry when the function returns an error.
     */
    readonly maximumRetryAttempts?: number;
    /**
     * (Streams) The number of batches to process from each shard concurrently.
     */
    readonly parallelizationFactor?: number;
    /**
     * (ActiveMQ) A list of ActiveMQ queues.
     */
    readonly queues?: string[];
    /**
     * A list of SourceAccessConfiguration.
     */
    readonly sourceAccessConfigurations?: outputs.lambda.EventSourceMappingSourceAccessConfiguration[];
    /**
     * (Kafka) A list of Kafka topics.
     */
    readonly topics?: string[];
    /**
     * (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
     */
    readonly tumblingWindowInSeconds?: number;
}

export function getEventSourceMappingOutput(args: GetEventSourceMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventSourceMappingResult> {
    return pulumi.output(args).apply(a => getEventSourceMapping(a, opts))
}

export interface GetEventSourceMappingOutputArgs {
    /**
     * Event Source Mapping Identifier UUID.
     */
    id: pulumi.Input<string>;
}
