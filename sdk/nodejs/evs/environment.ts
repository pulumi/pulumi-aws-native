// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * An environment created within the EVS service
 */
export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:evs:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    public /*out*/ readonly checks!: pulumi.Output<outputs.evs.EnvironmentCheck[]>;
    public readonly connectivityInfo!: pulumi.Output<outputs.evs.ConnectivityInfoProperties>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly credentials!: pulumi.Output<outputs.evs.EnvironmentSecret[]>;
    public /*out*/ readonly environmentArn!: pulumi.Output<string>;
    public /*out*/ readonly environmentId!: pulumi.Output<string>;
    /**
     * The name of an EVS environment
     */
    public readonly environmentName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly environmentState!: pulumi.Output<enums.evs.EnvironmentState>;
    /**
     * The initial hosts for environment only required upon creation. Modification after creation will have no effect
     */
    public readonly hosts!: pulumi.Output<outputs.evs.EnvironmentHostInfoForCreate[] | undefined>;
    /**
     * The initial Vlan configuration only required upon creation. Modification after creation will have no effect
     */
    public readonly initialVlans!: pulumi.Output<outputs.evs.InitialVlansProperties | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * The license information for an EVS environment
     */
    public readonly licenseInfo!: pulumi.Output<outputs.evs.LicenseInfoProperties>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly serviceAccessSecurityGroups!: pulumi.Output<outputs.evs.ServiceAccessSecurityGroupsProperties | undefined>;
    public readonly serviceAccessSubnetId!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    public readonly termsAccepted!: pulumi.Output<boolean>;
    public readonly vcfHostnames!: pulumi.Output<outputs.evs.VcfHostnamesProperties>;
    public readonly vcfVersion!: pulumi.Output<enums.evs.EnvironmentVcfVersion>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connectivityInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectivityInfo'");
            }
            if ((!args || args.licenseInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseInfo'");
            }
            if ((!args || args.serviceAccessSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccessSubnetId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.termsAccepted === undefined) && !opts.urn) {
                throw new Error("Missing required property 'termsAccepted'");
            }
            if ((!args || args.vcfHostnames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcfHostnames'");
            }
            if ((!args || args.vcfVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcfVersion'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["connectivityInfo"] = args ? args.connectivityInfo : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["initialVlans"] = args ? args.initialVlans : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["licenseInfo"] = args ? args.licenseInfo : undefined;
            resourceInputs["serviceAccessSecurityGroups"] = args ? args.serviceAccessSecurityGroups : undefined;
            resourceInputs["serviceAccessSubnetId"] = args ? args.serviceAccessSubnetId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["termsAccepted"] = args ? args.termsAccepted : undefined;
            resourceInputs["vcfHostnames"] = args ? args.vcfHostnames : undefined;
            resourceInputs["vcfVersion"] = args ? args.vcfVersion : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["checks"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["credentials"] = undefined /*out*/;
            resourceInputs["environmentArn"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["environmentState"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        } else {
            resourceInputs["checks"] = undefined /*out*/;
            resourceInputs["connectivityInfo"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["credentials"] = undefined /*out*/;
            resourceInputs["environmentArn"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["environmentName"] = undefined /*out*/;
            resourceInputs["environmentState"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["initialVlans"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["licenseInfo"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["serviceAccessSecurityGroups"] = undefined /*out*/;
            resourceInputs["serviceAccessSubnetId"] = undefined /*out*/;
            resourceInputs["siteId"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["termsAccepted"] = undefined /*out*/;
            resourceInputs["vcfHostnames"] = undefined /*out*/;
            resourceInputs["vcfVersion"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["connectivityInfo", "environmentName", "kmsKeyId", "licenseInfo", "serviceAccessSecurityGroups", "serviceAccessSubnetId", "siteId", "termsAccepted", "vcfHostnames", "vcfVersion", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    connectivityInfo: pulumi.Input<inputs.evs.ConnectivityInfoPropertiesArgs>;
    /**
     * The name of an EVS environment
     */
    environmentName?: pulumi.Input<string>;
    /**
     * The initial hosts for environment only required upon creation. Modification after creation will have no effect
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.evs.EnvironmentHostInfoForCreateArgs>[]>;
    /**
     * The initial Vlan configuration only required upon creation. Modification after creation will have no effect
     */
    initialVlans?: pulumi.Input<inputs.evs.InitialVlansPropertiesArgs>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The license information for an EVS environment
     */
    licenseInfo: pulumi.Input<inputs.evs.LicenseInfoPropertiesArgs>;
    serviceAccessSecurityGroups?: pulumi.Input<inputs.evs.ServiceAccessSecurityGroupsPropertiesArgs>;
    serviceAccessSubnetId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    termsAccepted: pulumi.Input<boolean>;
    vcfHostnames: pulumi.Input<inputs.evs.VcfHostnamesPropertiesArgs>;
    vcfVersion: pulumi.Input<enums.evs.EnvironmentVcfVersion>;
    vpcId: pulumi.Input<string>;
}
