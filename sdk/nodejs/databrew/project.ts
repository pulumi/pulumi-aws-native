// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::DataBrew::Project.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testDataBrewProject = new aws_native.databrew.Project("testDataBrewProject", {
 *     name: "project-name",
 *     recipeName: "recipe-name",
 *     datasetName: "dataset-name",
 *     roleArn: "arn:aws:iam::12345678910:role/PassRoleAdmin",
 *     sample: {
 *         size: 500,
 *         type: aws_native.databrew.ProjectSampleType.LastN,
 *     },
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myDataBrewProject = new aws_native.databrew.Project("myDataBrewProject", {
 *     name: "test-project",
 *     recipeName: "test-project-recipe",
 *     datasetName: "test-dataset",
 *     roleArn: "arn:aws:iam::1234567891011:role/PassRoleAdmin",
 *     sample: {
 *         size: 500,
 *         type: aws_native.databrew.ProjectSampleType.LastN,
 *     },
 *     tags: [{
 *         key: "key00AtCreate",
 *         value: "value001AtCreate",
 *     }],
 * });
 *
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:databrew:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Dataset name
     */
    public readonly datasetName!: pulumi.Output<string>;
    /**
     * Project name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Recipe name
     */
    public readonly recipeName!: pulumi.Output<string>;
    /**
     * Role arn
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Sample
     */
    public readonly sample!: pulumi.Output<outputs.databrew.ProjectSample | undefined>;
    /**
     * Metadata tags that have been applied to the project.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.datasetName === undefined && !opts.urn) {
                throw new Error("Missing required property 'datasetName'");
            }
            if (args?.recipeName === undefined && !opts.urn) {
                throw new Error("Missing required property 'recipeName'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["datasetName"] = args?.datasetName;
            resourceInputs["name"] = args?.name;
            resourceInputs["recipeName"] = args?.recipeName;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["sample"] = args?.sample;
            resourceInputs["tags"] = args?.tags;
        } else {
            resourceInputs["datasetName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["recipeName"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["sample"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Dataset name
     */
    datasetName: pulumi.Input<string>;
    /**
     * Project name
     */
    name?: pulumi.Input<string>;
    /**
     * Recipe name
     */
    recipeName: pulumi.Input<string>;
    /**
     * Role arn
     */
    roleArn: pulumi.Input<string>;
    /**
     * Sample
     */
    sample?: pulumi.Input<inputs.databrew.ProjectSampleArgs>;
    /**
     * Metadata tags that have been applied to the project.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
