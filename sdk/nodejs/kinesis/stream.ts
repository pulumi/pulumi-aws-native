// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Kinesis::Stream
 */
export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:kinesis:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    /**
     * The Amazon resource name (ARN) of the Kinesis stream
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The final list of shard-level metrics
     */
    declare public readonly desiredShardLevelMetrics: pulumi.Output<enums.kinesis.StreamEnhancedMetric[] | undefined>;
    /**
     * The name of the Kinesis stream.
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The number of hours for the data records that are stored in shards to remain accessible.
     */
    declare public readonly retentionPeriodHours: pulumi.Output<number | undefined>;
    /**
     * The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
     */
    declare public readonly shardCount: pulumi.Output<number | undefined>;
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
     */
    declare public readonly streamEncryption: pulumi.Output<outputs.kinesis.StreamEncryption | undefined>;
    /**
     * The mode in which the stream is running.
     */
    declare public readonly streamModeDetails: pulumi.Output<outputs.kinesis.StreamModeDetails | undefined>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StreamArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["desiredShardLevelMetrics"] = args?.desiredShardLevelMetrics;
            resourceInputs["name"] = args?.name;
            resourceInputs["retentionPeriodHours"] = args?.retentionPeriodHours;
            resourceInputs["shardCount"] = args?.shardCount;
            resourceInputs["streamEncryption"] = args?.streamEncryption;
            resourceInputs["streamModeDetails"] = args?.streamModeDetails;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["desiredShardLevelMetrics"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["retentionPeriodHours"] = undefined /*out*/;
            resourceInputs["shardCount"] = undefined /*out*/;
            resourceInputs["streamEncryption"] = undefined /*out*/;
            resourceInputs["streamModeDetails"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    /**
     * The final list of shard-level metrics
     */
    desiredShardLevelMetrics?: pulumi.Input<pulumi.Input<enums.kinesis.StreamEnhancedMetric>[]>;
    /**
     * The name of the Kinesis stream.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of hours for the data records that are stored in shards to remain accessible.
     */
    retentionPeriodHours?: pulumi.Input<number>;
    /**
     * The number of shards that the stream uses. Required when StreamMode = PROVISIONED is passed.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream.
     */
    streamEncryption?: pulumi.Input<inputs.kinesis.StreamEncryptionArgs>;
    /**
     * The mode in which the stream is running.
     */
    streamModeDetails?: pulumi.Input<inputs.kinesis.StreamModeDetailsArgs>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis stream.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
