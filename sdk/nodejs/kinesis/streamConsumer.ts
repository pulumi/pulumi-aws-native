// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Kinesis::StreamConsumer
 */
export class StreamConsumer extends pulumi.CustomResource {
    /**
     * Get an existing StreamConsumer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StreamConsumer {
        return new StreamConsumer(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:kinesis:StreamConsumer';

    /**
     * Returns true if the given object is an instance of StreamConsumer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamConsumer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamConsumer.__pulumiType;
    }

    /**
     * The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
     */
    public /*out*/ readonly consumerArn!: pulumi.Output<string>;
    /**
     * Timestamp when the consumer was created.
     */
    public /*out*/ readonly consumerCreationTimestamp!: pulumi.Output<string>;
    /**
     * The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
     */
    public readonly consumerName!: pulumi.Output<string>;
    /**
     * A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
     */
    public /*out*/ readonly consumerStatus!: pulumi.Output<string>;
    /**
     * The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
     */
    public readonly streamArn!: pulumi.Output<string>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
     */
    public readonly tags!: pulumi.Output<outputs.CreateOnlyTag[] | undefined>;

    /**
     * Create a StreamConsumer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamConsumerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.streamArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamArn'");
            }
            resourceInputs["consumerName"] = args?.consumerName;
            resourceInputs["streamArn"] = args?.streamArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["consumerArn"] = undefined /*out*/;
            resourceInputs["consumerCreationTimestamp"] = undefined /*out*/;
            resourceInputs["consumerStatus"] = undefined /*out*/;
        } else {
            resourceInputs["consumerArn"] = undefined /*out*/;
            resourceInputs["consumerCreationTimestamp"] = undefined /*out*/;
            resourceInputs["consumerName"] = undefined /*out*/;
            resourceInputs["consumerStatus"] = undefined /*out*/;
            resourceInputs["streamArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["consumerName", "streamArn", "tags[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(StreamConsumer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a StreamConsumer resource.
 */
export interface StreamConsumerArgs {
    /**
     * The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
     */
    consumerName?: pulumi.Input<string>;
    /**
     * The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
     */
    streamArn: pulumi.Input<string>;
    /**
     * An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.CreateOnlyTagArgs>[]>;
}
