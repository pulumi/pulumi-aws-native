// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

import {Region} from "..";

declare var exports: any;
const __config = new pulumi.Config("aws-native");

/**
 * The access key for API operations. You can retrieve this from the ‘Security & Credentials’ section of the AWS console.
 */
export declare const accessKey: string | undefined;
Object.defineProperty(exports, "accessKey", {
    get() {
        return __config.get("accessKey");
    },
    enumerable: true,
});

/**
 * List of allowed AWS account IDs to prevent you from mistakenly using an incorrect one. Conflicts with `forbiddenAccountIds`.
 */
export declare const allowedAccountIds: string[] | undefined;
Object.defineProperty(exports, "allowedAccountIds", {
    get() {
        return __config.getObject<string[]>("allowedAccountIds");
    },
    enumerable: true,
});

/**
 * Configuration for retrieving temporary credentials from the STS service.
 */
export declare const assumeRole: outputs.config.AssumeRole | undefined;
Object.defineProperty(exports, "assumeRole", {
    get() {
        return __config.getObject<outputs.config.AssumeRole>("assumeRole");
    },
    enumerable: true,
});

/**
 * Configuration block with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
 */
export declare const defaultTags: outputs.config.DefaultTags | undefined;
Object.defineProperty(exports, "defaultTags", {
    get() {
        return __config.getObject<outputs.config.DefaultTags>("defaultTags");
    },
    enumerable: true,
});

/**
 * Configuration block for customizing service endpoints.
 */
export declare const endpoints: outputs.config.Endpoints | undefined;
Object.defineProperty(exports, "endpoints", {
    get() {
        return __config.getObject<outputs.config.Endpoints>("endpoints");
    },
    enumerable: true,
});

/**
 * List of forbidden AWS account IDs to prevent you from mistakenly using the wrong one (and potentially end up destroying a live environment). Conflicts with `allowedAccountIds`.
 */
export declare const forbiddenAccountIds: string[] | undefined;
Object.defineProperty(exports, "forbiddenAccountIds", {
    get() {
        return __config.getObject<string[]>("forbiddenAccountIds");
    },
    enumerable: true,
});

/**
 * Configuration block with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
 */
export declare const ignoreTags: outputs.config.IgnoreTags | undefined;
Object.defineProperty(exports, "ignoreTags", {
    get() {
        return __config.getObject<outputs.config.IgnoreTags>("ignoreTags");
    },
    enumerable: true,
});

/**
 * Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`.
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
 */
export declare const profile: string | undefined;
Object.defineProperty(exports, "profile", {
    get() {
        return __config.get("profile");
    },
    enumerable: true,
});

/**
 * The region where AWS operations will take place. Examples are `us-east-1`, `us-west-2`, etc.
 */
export declare const region: Region | undefined;
Object.defineProperty(exports, "region", {
    get() {
        return <Region>__config.get("region");
    },
    enumerable: true,
});

/**
 * Set this to true to force the request to use path-style addressing, i.e., `http://s3.amazonaws.com/BUCKET/KEY`. By default, the S3 client will use virtual hosted bucket addressing when possible (`http://BUCKET.s3.amazonaws.com/KEY`). Specific to the Amazon S3 service.
 */
export declare const s3ForcePathStyle: boolean | undefined;
Object.defineProperty(exports, "s3ForcePathStyle", {
    get() {
        return __config.getObject<boolean>("s3ForcePathStyle");
    },
    enumerable: true,
});

/**
 * The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
 */
export declare const secretKey: string | undefined;
Object.defineProperty(exports, "secretKey", {
    get() {
        return __config.get("secretKey");
    },
    enumerable: true,
});

/**
 * The path to the shared credentials file. If not set this defaults to `~/.aws/credentials`.
 */
export declare const sharedCredentialsFile: string | undefined;
Object.defineProperty(exports, "sharedCredentialsFile", {
    get() {
        return __config.get("sharedCredentialsFile");
    },
    enumerable: true,
});

/**
 * Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented.
 */
export declare const skipCredentialsValidation: boolean;
Object.defineProperty(exports, "skipCredentialsValidation", {
    get() {
        return __config.getObject<boolean>("skipCredentialsValidation") ?? true;
    },
    enumerable: true,
});

/**
 * Skip getting the supported EC2 platforms. Used by users that don't have `ec2:DescribeAccountAttributes` permissions.
 */
export declare const skipGetEc2Platforms: boolean;
Object.defineProperty(exports, "skipGetEc2Platforms", {
    get() {
        return __config.getObject<boolean>("skipGetEc2Platforms") ?? true;
    },
    enumerable: true,
});

/**
 * Skip the AWS Metadata API check. Useful for AWS API implementations that do not have a metadata API endpoint. Setting to true prevents Pulumi from authenticating via the Metadata API. You may need to use other authentication methods like static credentials, configuration variables, or environment variables.
 */
export declare const skipMetadataApiCheck: boolean;
Object.defineProperty(exports, "skipMetadataApiCheck", {
    get() {
        return __config.getObject<boolean>("skipMetadataApiCheck") ?? true;
    },
    enumerable: true,
});

/**
 * Skip static validation of region name. Used by users of alternative AWS-like APIs or users with access to regions that are not public.
 */
export declare const skipRegionValidation: boolean;
Object.defineProperty(exports, "skipRegionValidation", {
    get() {
        return __config.getObject<boolean>("skipRegionValidation") ?? true;
    },
    enumerable: true,
});

/**
 * Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
 */
export declare const skipRequestingAccountId: boolean | undefined;
Object.defineProperty(exports, "skipRequestingAccountId", {
    get() {
        return __config.getObject<boolean>("skipRequestingAccountId");
    },
    enumerable: true,
});

/**
 * Session token for validating temporary credentials. Typically provided after successful identity federation or Multi-Factor Authentication (MFA) login. With MFA login, this is the session token provided afterward, not the 6 digit MFA code used to get temporary credentials.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

