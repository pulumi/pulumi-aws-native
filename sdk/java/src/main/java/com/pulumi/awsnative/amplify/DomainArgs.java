// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.amplify;

import com.pulumi.awsnative.amplify.inputs.DomainSubDomainSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    @Import(name="appId", required=true)
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    @Import(name="autoSubDomainCreationPatterns")
    private @Nullable Output<List<String>> autoSubDomainCreationPatterns;

    public Optional<Output<List<String>>> autoSubDomainCreationPatterns() {
        return Optional.ofNullable(this.autoSubDomainCreationPatterns);
    }

    @Import(name="autoSubDomainIAMRole")
    private @Nullable Output<String> autoSubDomainIAMRole;

    public Optional<Output<String>> autoSubDomainIAMRole() {
        return Optional.ofNullable(this.autoSubDomainIAMRole);
    }

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="enableAutoSubDomain")
    private @Nullable Output<Boolean> enableAutoSubDomain;

    public Optional<Output<Boolean>> enableAutoSubDomain() {
        return Optional.ofNullable(this.enableAutoSubDomain);
    }

    @Import(name="subDomainSettings", required=true)
    private Output<List<DomainSubDomainSettingArgs>> subDomainSettings;

    public Output<List<DomainSubDomainSettingArgs>> subDomainSettings() {
        return this.subDomainSettings;
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.appId = $.appId;
        this.autoSubDomainCreationPatterns = $.autoSubDomainCreationPatterns;
        this.autoSubDomainIAMRole = $.autoSubDomainIAMRole;
        this.domainName = $.domainName;
        this.enableAutoSubDomain = $.enableAutoSubDomain;
        this.subDomainSettings = $.subDomainSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        public Builder autoSubDomainCreationPatterns(@Nullable Output<List<String>> autoSubDomainCreationPatterns) {
            $.autoSubDomainCreationPatterns = autoSubDomainCreationPatterns;
            return this;
        }

        public Builder autoSubDomainCreationPatterns(List<String> autoSubDomainCreationPatterns) {
            return autoSubDomainCreationPatterns(Output.of(autoSubDomainCreationPatterns));
        }

        public Builder autoSubDomainCreationPatterns(String... autoSubDomainCreationPatterns) {
            return autoSubDomainCreationPatterns(List.of(autoSubDomainCreationPatterns));
        }

        public Builder autoSubDomainIAMRole(@Nullable Output<String> autoSubDomainIAMRole) {
            $.autoSubDomainIAMRole = autoSubDomainIAMRole;
            return this;
        }

        public Builder autoSubDomainIAMRole(String autoSubDomainIAMRole) {
            return autoSubDomainIAMRole(Output.of(autoSubDomainIAMRole));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder enableAutoSubDomain(@Nullable Output<Boolean> enableAutoSubDomain) {
            $.enableAutoSubDomain = enableAutoSubDomain;
            return this;
        }

        public Builder enableAutoSubDomain(Boolean enableAutoSubDomain) {
            return enableAutoSubDomain(Output.of(enableAutoSubDomain));
        }

        public Builder subDomainSettings(Output<List<DomainSubDomainSettingArgs>> subDomainSettings) {
            $.subDomainSettings = subDomainSettings;
            return this;
        }

        public Builder subDomainSettings(List<DomainSubDomainSettingArgs> subDomainSettings) {
            return subDomainSettings(Output.of(subDomainSettings));
        }

        public Builder subDomainSettings(DomainSubDomainSettingArgs... subDomainSettings) {
            return subDomainSettings(List.of(subDomainSettings));
        }

        public DomainArgs build() {
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.subDomainSettings = Objects.requireNonNull($.subDomainSettings, "expected parameter 'subDomainSettings' to be non-null");
            return $;
        }
    }

}
