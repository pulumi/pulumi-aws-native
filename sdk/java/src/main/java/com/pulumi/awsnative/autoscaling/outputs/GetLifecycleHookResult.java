// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.autoscaling.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLifecycleHookResult {
    /**
     * @return The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON (default).
     * 
     */
    private @Nullable String defaultResult;
    /**
     * @return The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
     * 
     */
    private @Nullable Integer heartbeatTimeout;
    /**
     * @return The instance state to which you want to attach the lifecycle hook.
     * 
     */
    private @Nullable String lifecycleTransition;
    /**
     * @return Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     * 
     */
    private @Nullable String notificationMetadata;
    /**
     * @return The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic. The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     * 
     */
    private @Nullable String notificationTargetARN;
    /**
     * @return The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
     * 
     */
    private @Nullable String roleARN;

    private GetLifecycleHookResult() {}
    /**
     * @return The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON (default).
     * 
     */
    public Optional<String> defaultResult() {
        return Optional.ofNullable(this.defaultResult);
    }
    /**
     * @return The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour). If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
     * 
     */
    public Optional<Integer> heartbeatTimeout() {
        return Optional.ofNullable(this.heartbeatTimeout);
    }
    /**
     * @return The instance state to which you want to attach the lifecycle hook.
     * 
     */
    public Optional<String> lifecycleTransition() {
        return Optional.ofNullable(this.lifecycleTransition);
    }
    /**
     * @return Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
     * 
     */
    public Optional<String> notificationMetadata() {
        return Optional.ofNullable(this.notificationMetadata);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook. You can specify an Amazon SQS queue or an Amazon SNS topic. The notification message includes the following information: lifecycle action token, user account ID, Auto Scaling group name, lifecycle hook name, instance ID, lifecycle transition, and notification metadata.
     * 
     */
    public Optional<String> notificationTargetARN() {
        return Optional.ofNullable(this.notificationTargetARN);
    }
    /**
     * @return The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
     * 
     */
    public Optional<String> roleARN() {
        return Optional.ofNullable(this.roleARN);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLifecycleHookResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String defaultResult;
        private @Nullable Integer heartbeatTimeout;
        private @Nullable String lifecycleTransition;
        private @Nullable String notificationMetadata;
        private @Nullable String notificationTargetARN;
        private @Nullable String roleARN;
        public Builder() {}
        public Builder(GetLifecycleHookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultResult = defaults.defaultResult;
    	      this.heartbeatTimeout = defaults.heartbeatTimeout;
    	      this.lifecycleTransition = defaults.lifecycleTransition;
    	      this.notificationMetadata = defaults.notificationMetadata;
    	      this.notificationTargetARN = defaults.notificationTargetARN;
    	      this.roleARN = defaults.roleARN;
        }

        @CustomType.Setter
        public Builder defaultResult(@Nullable String defaultResult) {
            this.defaultResult = defaultResult;
            return this;
        }
        @CustomType.Setter
        public Builder heartbeatTimeout(@Nullable Integer heartbeatTimeout) {
            this.heartbeatTimeout = heartbeatTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleTransition(@Nullable String lifecycleTransition) {
            this.lifecycleTransition = lifecycleTransition;
            return this;
        }
        @CustomType.Setter
        public Builder notificationMetadata(@Nullable String notificationMetadata) {
            this.notificationMetadata = notificationMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTargetARN(@Nullable String notificationTargetARN) {
            this.notificationTargetARN = notificationTargetARN;
            return this;
        }
        @CustomType.Setter
        public Builder roleARN(@Nullable String roleARN) {
            this.roleARN = roleARN;
            return this;
        }
        public GetLifecycleHookResult build() {
            final var o = new GetLifecycleHookResult();
            o.defaultResult = defaultResult;
            o.heartbeatTimeout = heartbeatTimeout;
            o.lifecycleTransition = lifecycleTransition;
            o.notificationMetadata = notificationMetadata;
            o.notificationTargetARN = notificationTargetARN;
            o.roleARN = roleARN;
            return o;
        }
    }
}
