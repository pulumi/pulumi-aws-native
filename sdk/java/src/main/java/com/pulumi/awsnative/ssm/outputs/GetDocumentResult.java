// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssm.outputs;

import com.pulumi.awsnative.ssm.enums.DocumentFormat;
import com.pulumi.awsnative.ssm.enums.DocumentUpdateMethod;
import com.pulumi.awsnative.ssm.outputs.DocumentAttachmentsSource;
import com.pulumi.awsnative.ssm.outputs.DocumentRequires;
import com.pulumi.awsnative.ssm.outputs.DocumentTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDocumentResult {
    /**
     * @return A list of key and value pairs that describe attachments to a version of a document.
     * 
     */
    private @Nullable List<DocumentAttachmentsSource> attachments;
    /**
     * @return The content for the Systems Manager document in JSON, YAML or String format.
     * 
     */
    private @Nullable Object content;
    /**
     * @return Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
     * 
     */
    private @Nullable DocumentFormat documentFormat;
    /**
     * @return A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
     * 
     */
    private @Nullable List<DocumentRequires> requires;
    /**
     * @return Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
     * 
     */
    private @Nullable List<DocumentTag> tags;
    /**
     * @return Specify a target type to define the kinds of resources the document can run on.
     * 
     */
    private @Nullable String targetType;
    /**
     * @return Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
     * 
     */
    private @Nullable DocumentUpdateMethod updateMethod;
    /**
     * @return An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
     * 
     */
    private @Nullable String versionName;

    private GetDocumentResult() {}
    /**
     * @return A list of key and value pairs that describe attachments to a version of a document.
     * 
     */
    public List<DocumentAttachmentsSource> attachments() {
        return this.attachments == null ? List.of() : this.attachments;
    }
    /**
     * @return The content for the Systems Manager document in JSON, YAML or String format.
     * 
     */
    public Optional<Object> content() {
        return Optional.ofNullable(this.content);
    }
    /**
     * @return Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
     * 
     */
    public Optional<DocumentFormat> documentFormat() {
        return Optional.ofNullable(this.documentFormat);
    }
    /**
     * @return A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
     * 
     */
    public List<DocumentRequires> requires() {
        return this.requires == null ? List.of() : this.requires;
    }
    /**
     * @return Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
     * 
     */
    public List<DocumentTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Specify a target type to define the kinds of resources the document can run on.
     * 
     */
    public Optional<String> targetType() {
        return Optional.ofNullable(this.targetType);
    }
    /**
     * @return Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
     * 
     */
    public Optional<DocumentUpdateMethod> updateMethod() {
        return Optional.ofNullable(this.updateMethod);
    }
    /**
     * @return An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
     * 
     */
    public Optional<String> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDocumentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DocumentAttachmentsSource> attachments;
        private @Nullable Object content;
        private @Nullable DocumentFormat documentFormat;
        private @Nullable List<DocumentRequires> requires;
        private @Nullable List<DocumentTag> tags;
        private @Nullable String targetType;
        private @Nullable DocumentUpdateMethod updateMethod;
        private @Nullable String versionName;
        public Builder() {}
        public Builder(GetDocumentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachments = defaults.attachments;
    	      this.content = defaults.content;
    	      this.documentFormat = defaults.documentFormat;
    	      this.requires = defaults.requires;
    	      this.tags = defaults.tags;
    	      this.targetType = defaults.targetType;
    	      this.updateMethod = defaults.updateMethod;
    	      this.versionName = defaults.versionName;
        }

        @CustomType.Setter
        public Builder attachments(@Nullable List<DocumentAttachmentsSource> attachments) {
            this.attachments = attachments;
            return this;
        }
        public Builder attachments(DocumentAttachmentsSource... attachments) {
            return attachments(List.of(attachments));
        }
        @CustomType.Setter
        public Builder content(@Nullable Object content) {
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder documentFormat(@Nullable DocumentFormat documentFormat) {
            this.documentFormat = documentFormat;
            return this;
        }
        @CustomType.Setter
        public Builder requires(@Nullable List<DocumentRequires> requires) {
            this.requires = requires;
            return this;
        }
        public Builder requires(DocumentRequires... requires) {
            return requires(List.of(requires));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DocumentTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DocumentTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder targetType(@Nullable String targetType) {
            this.targetType = targetType;
            return this;
        }
        @CustomType.Setter
        public Builder updateMethod(@Nullable DocumentUpdateMethod updateMethod) {
            this.updateMethod = updateMethod;
            return this;
        }
        @CustomType.Setter
        public Builder versionName(@Nullable String versionName) {
            this.versionName = versionName;
            return this;
        }
        public GetDocumentResult build() {
            final var o = new GetDocumentResult();
            o.attachments = attachments;
            o.content = content;
            o.documentFormat = documentFormat;
            o.requires = requires;
            o.tags = tags;
            o.targetType = targetType;
            o.updateMethod = updateMethod;
            o.versionName = versionName;
            return o;
        }
    }
}
