// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2.outputs;

import com.pulumi.awsnative.ec2.outputs.NetworkInterfaceInstanceIpv6Address;
import com.pulumi.awsnative.ec2.outputs.NetworkInterfacePrivateIpAddressSpecification;
import com.pulumi.awsnative.ec2.outputs.NetworkInterfaceTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkInterfaceResult {
    /**
     * @return A description for the network interface.
     * 
     */
    private @Nullable String description;
    /**
     * @return A list of security group IDs associated with this network interface.
     * 
     */
    private @Nullable List<String> groupSet;
    /**
     * @return Network interface id.
     * 
     */
    private @Nullable String id;
    /**
     * @return The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don&#39;t specify this property.
     * 
     */
    private @Nullable Integer ipv6AddressCount;
    /**
     * @return One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you&#39;re specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don&#39;t specify this property.
     * 
     */
    private @Nullable List<NetworkInterfaceInstanceIpv6Address> ipv6Addresses;
    /**
     * @return Returns the primary private IP address of the network interface.
     * 
     */
    private @Nullable String primaryPrivateIpAddress;
    /**
     * @return Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
     * 
     */
    private @Nullable List<NetworkInterfacePrivateIpAddressSpecification> privateIpAddresses;
    /**
     * @return The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet&#39;s IPv4 CIDR range. You can&#39;t specify this option and specify more than one private IP address using privateIpAddresses
     * 
     */
    private @Nullable Integer secondaryPrivateIpAddressCount;
    /**
     * @return Returns the secondary private IP addresses of the network interface.
     * 
     */
    private @Nullable List<String> secondaryPrivateIpAddresses;
    /**
     * @return Indicates whether traffic to or from the instance is validated.
     * 
     */
    private @Nullable Boolean sourceDestCheck;
    /**
     * @return An arbitrary set of tags (key-value pairs) for this network interface.
     * 
     */
    private @Nullable List<NetworkInterfaceTag> tags;

    private GetNetworkInterfaceResult() {}
    /**
     * @return A description for the network interface.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A list of security group IDs associated with this network interface.
     * 
     */
    public List<String> groupSet() {
        return this.groupSet == null ? List.of() : this.groupSet;
    }
    /**
     * @return Network interface id.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don&#39;t specify this property.
     * 
     */
    public Optional<Integer> ipv6AddressCount() {
        return Optional.ofNullable(this.ipv6AddressCount);
    }
    /**
     * @return One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you&#39;re specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don&#39;t specify this property.
     * 
     */
    public List<NetworkInterfaceInstanceIpv6Address> ipv6Addresses() {
        return this.ipv6Addresses == null ? List.of() : this.ipv6Addresses;
    }
    /**
     * @return Returns the primary private IP address of the network interface.
     * 
     */
    public Optional<String> primaryPrivateIpAddress() {
        return Optional.ofNullable(this.primaryPrivateIpAddress);
    }
    /**
     * @return Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
     * 
     */
    public List<NetworkInterfacePrivateIpAddressSpecification> privateIpAddresses() {
        return this.privateIpAddresses == null ? List.of() : this.privateIpAddresses;
    }
    /**
     * @return The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet&#39;s IPv4 CIDR range. You can&#39;t specify this option and specify more than one private IP address using privateIpAddresses
     * 
     */
    public Optional<Integer> secondaryPrivateIpAddressCount() {
        return Optional.ofNullable(this.secondaryPrivateIpAddressCount);
    }
    /**
     * @return Returns the secondary private IP addresses of the network interface.
     * 
     */
    public List<String> secondaryPrivateIpAddresses() {
        return this.secondaryPrivateIpAddresses == null ? List.of() : this.secondaryPrivateIpAddresses;
    }
    /**
     * @return Indicates whether traffic to or from the instance is validated.
     * 
     */
    public Optional<Boolean> sourceDestCheck() {
        return Optional.ofNullable(this.sourceDestCheck);
    }
    /**
     * @return An arbitrary set of tags (key-value pairs) for this network interface.
     * 
     */
    public List<NetworkInterfaceTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkInterfaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable List<String> groupSet;
        private @Nullable String id;
        private @Nullable Integer ipv6AddressCount;
        private @Nullable List<NetworkInterfaceInstanceIpv6Address> ipv6Addresses;
        private @Nullable String primaryPrivateIpAddress;
        private @Nullable List<NetworkInterfacePrivateIpAddressSpecification> privateIpAddresses;
        private @Nullable Integer secondaryPrivateIpAddressCount;
        private @Nullable List<String> secondaryPrivateIpAddresses;
        private @Nullable Boolean sourceDestCheck;
        private @Nullable List<NetworkInterfaceTag> tags;
        public Builder() {}
        public Builder(GetNetworkInterfaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.groupSet = defaults.groupSet;
    	      this.id = defaults.id;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.primaryPrivateIpAddress = defaults.primaryPrivateIpAddress;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.secondaryPrivateIpAddressCount = defaults.secondaryPrivateIpAddressCount;
    	      this.secondaryPrivateIpAddresses = defaults.secondaryPrivateIpAddresses;
    	      this.sourceDestCheck = defaults.sourceDestCheck;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder groupSet(@Nullable List<String> groupSet) {
            this.groupSet = groupSet;
            return this;
        }
        public Builder groupSet(String... groupSet) {
            return groupSet(List.of(groupSet));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressCount(@Nullable Integer ipv6AddressCount) {
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Addresses(@Nullable List<NetworkInterfaceInstanceIpv6Address> ipv6Addresses) {
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }
        public Builder ipv6Addresses(NetworkInterfaceInstanceIpv6Address... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        @CustomType.Setter
        public Builder primaryPrivateIpAddress(@Nullable String primaryPrivateIpAddress) {
            this.primaryPrivateIpAddress = primaryPrivateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddresses(@Nullable List<NetworkInterfacePrivateIpAddressSpecification> privateIpAddresses) {
            this.privateIpAddresses = privateIpAddresses;
            return this;
        }
        public Builder privateIpAddresses(NetworkInterfacePrivateIpAddressSpecification... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        @CustomType.Setter
        public Builder secondaryPrivateIpAddressCount(@Nullable Integer secondaryPrivateIpAddressCount) {
            this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryPrivateIpAddresses(@Nullable List<String> secondaryPrivateIpAddresses) {
            this.secondaryPrivateIpAddresses = secondaryPrivateIpAddresses;
            return this;
        }
        public Builder secondaryPrivateIpAddresses(String... secondaryPrivateIpAddresses) {
            return secondaryPrivateIpAddresses(List.of(secondaryPrivateIpAddresses));
        }
        @CustomType.Setter
        public Builder sourceDestCheck(@Nullable Boolean sourceDestCheck) {
            this.sourceDestCheck = sourceDestCheck;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<NetworkInterfaceTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(NetworkInterfaceTag... tags) {
            return tags(List.of(tags));
        }
        public GetNetworkInterfaceResult build() {
            final var o = new GetNetworkInterfaceResult();
            o.description = description;
            o.groupSet = groupSet;
            o.id = id;
            o.ipv6AddressCount = ipv6AddressCount;
            o.ipv6Addresses = ipv6Addresses;
            o.primaryPrivateIpAddress = primaryPrivateIpAddress;
            o.privateIpAddresses = privateIpAddresses;
            o.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            o.secondaryPrivateIpAddresses = secondaryPrivateIpAddresses;
            o.sourceDestCheck = sourceDestCheck;
            o.tags = tags;
            return o;
        }
    }
}
