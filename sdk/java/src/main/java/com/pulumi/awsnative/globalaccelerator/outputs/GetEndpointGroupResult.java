// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.globalaccelerator.outputs;

import com.pulumi.awsnative.globalaccelerator.enums.EndpointGroupHealthCheckProtocol;
import com.pulumi.awsnative.globalaccelerator.outputs.EndpointGroupEndpointConfiguration;
import com.pulumi.awsnative.globalaccelerator.outputs.EndpointGroupPortOverride;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEndpointGroupResult {
    /**
     * @return The list of endpoint objects.
     * 
     */
    private @Nullable List<EndpointGroupEndpointConfiguration> endpointConfigurations;
    /**
     * @return The Amazon Resource Name (ARN) of the endpoint group
     * 
     */
    private @Nullable String endpointGroupArn;
    /**
     * @return The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     * 
     */
    private @Nullable Integer healthCheckIntervalSeconds;
    private @Nullable String healthCheckPath;
    /**
     * @return The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    private @Nullable Integer healthCheckPort;
    /**
     * @return The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    private @Nullable EndpointGroupHealthCheckProtocol healthCheckProtocol;
    private @Nullable List<EndpointGroupPortOverride> portOverrides;
    /**
     * @return The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     * 
     */
    private @Nullable Integer thresholdCount;
    /**
     * @return The percentage of traffic to sent to an AWS Region
     * 
     */
    private @Nullable Double trafficDialPercentage;

    private GetEndpointGroupResult() {}
    /**
     * @return The list of endpoint objects.
     * 
     */
    public List<EndpointGroupEndpointConfiguration> endpointConfigurations() {
        return this.endpointConfigurations == null ? List.of() : this.endpointConfigurations;
    }
    /**
     * @return The Amazon Resource Name (ARN) of the endpoint group
     * 
     */
    public Optional<String> endpointGroupArn() {
        return Optional.ofNullable(this.endpointGroupArn);
    }
    /**
     * @return The time in seconds between each health check for an endpoint. Must be a value of 10 or 30
     * 
     */
    public Optional<Integer> healthCheckIntervalSeconds() {
        return Optional.ofNullable(this.healthCheckIntervalSeconds);
    }
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    public Optional<Integer> healthCheckPort() {
        return Optional.ofNullable(this.healthCheckPort);
    }
    /**
     * @return The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
     * 
     */
    public Optional<EndpointGroupHealthCheckProtocol> healthCheckProtocol() {
        return Optional.ofNullable(this.healthCheckProtocol);
    }
    public List<EndpointGroupPortOverride> portOverrides() {
        return this.portOverrides == null ? List.of() : this.portOverrides;
    }
    /**
     * @return The number of consecutive health checks required to set the state of the endpoint to unhealthy.
     * 
     */
    public Optional<Integer> thresholdCount() {
        return Optional.ofNullable(this.thresholdCount);
    }
    /**
     * @return The percentage of traffic to sent to an AWS Region
     * 
     */
    public Optional<Double> trafficDialPercentage() {
        return Optional.ofNullable(this.trafficDialPercentage);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<EndpointGroupEndpointConfiguration> endpointConfigurations;
        private @Nullable String endpointGroupArn;
        private @Nullable Integer healthCheckIntervalSeconds;
        private @Nullable String healthCheckPath;
        private @Nullable Integer healthCheckPort;
        private @Nullable EndpointGroupHealthCheckProtocol healthCheckProtocol;
        private @Nullable List<EndpointGroupPortOverride> portOverrides;
        private @Nullable Integer thresholdCount;
        private @Nullable Double trafficDialPercentage;
        public Builder() {}
        public Builder(GetEndpointGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointConfigurations = defaults.endpointConfigurations;
    	      this.endpointGroupArn = defaults.endpointGroupArn;
    	      this.healthCheckIntervalSeconds = defaults.healthCheckIntervalSeconds;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.healthCheckPort = defaults.healthCheckPort;
    	      this.healthCheckProtocol = defaults.healthCheckProtocol;
    	      this.portOverrides = defaults.portOverrides;
    	      this.thresholdCount = defaults.thresholdCount;
    	      this.trafficDialPercentage = defaults.trafficDialPercentage;
        }

        @CustomType.Setter
        public Builder endpointConfigurations(@Nullable List<EndpointGroupEndpointConfiguration> endpointConfigurations) {
            this.endpointConfigurations = endpointConfigurations;
            return this;
        }
        public Builder endpointConfigurations(EndpointGroupEndpointConfiguration... endpointConfigurations) {
            return endpointConfigurations(List.of(endpointConfigurations));
        }
        @CustomType.Setter
        public Builder endpointGroupArn(@Nullable String endpointGroupArn) {
            this.endpointGroupArn = endpointGroupArn;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckIntervalSeconds(@Nullable Integer healthCheckIntervalSeconds) {
            this.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPort(@Nullable Integer healthCheckPort) {
            this.healthCheckPort = healthCheckPort;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckProtocol(@Nullable EndpointGroupHealthCheckProtocol healthCheckProtocol) {
            this.healthCheckProtocol = healthCheckProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder portOverrides(@Nullable List<EndpointGroupPortOverride> portOverrides) {
            this.portOverrides = portOverrides;
            return this;
        }
        public Builder portOverrides(EndpointGroupPortOverride... portOverrides) {
            return portOverrides(List.of(portOverrides));
        }
        @CustomType.Setter
        public Builder thresholdCount(@Nullable Integer thresholdCount) {
            this.thresholdCount = thresholdCount;
            return this;
        }
        @CustomType.Setter
        public Builder trafficDialPercentage(@Nullable Double trafficDialPercentage) {
            this.trafficDialPercentage = trafficDialPercentage;
            return this;
        }
        public GetEndpointGroupResult build() {
            final var o = new GetEndpointGroupResult();
            o.endpointConfigurations = endpointConfigurations;
            o.endpointGroupArn = endpointGroupArn;
            o.healthCheckIntervalSeconds = healthCheckIntervalSeconds;
            o.healthCheckPath = healthCheckPath;
            o.healthCheckPort = healthCheckPort;
            o.healthCheckProtocol = healthCheckProtocol;
            o.portOverrides = portOverrides;
            o.thresholdCount = thresholdCount;
            o.trafficDialPercentage = trafficDialPercentage;
            return o;
        }
    }
}
