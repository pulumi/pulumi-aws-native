// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.awsnative.lightsail.outputs.DiskAddOn;
import com.pulumi.awsnative.lightsail.outputs.DiskLocation;
import com.pulumi.awsnative.lightsail.outputs.DiskTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDiskResult {
    /**
     * @return An array of objects representing the add-ons to enable for the new instance.
     * 
     */
    private @Nullable List<DiskAddOn> addOns;
    /**
     * @return Name of the attached Lightsail Instance
     * 
     */
    private @Nullable String attachedTo;
    /**
     * @return Attachment State of the Lightsail disk
     * 
     */
    private @Nullable String attachmentState;
    private @Nullable String diskArn;
    /**
     * @return Iops of the Lightsail disk
     * 
     */
    private @Nullable Integer iops;
    /**
     * @return Check is Disk is attached state
     * 
     */
    private @Nullable Boolean isAttached;
    private @Nullable DiskLocation location;
    /**
     * @return Path of the  attached Disk
     * 
     */
    private @Nullable String path;
    /**
     * @return Resource type of Lightsail instance.
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return State of the Lightsail disk
     * 
     */
    private @Nullable String state;
    /**
     * @return Support code to help identify any issues
     * 
     */
    private @Nullable String supportCode;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<DiskTag> tags;

    private GetDiskResult() {}
    /**
     * @return An array of objects representing the add-ons to enable for the new instance.
     * 
     */
    public List<DiskAddOn> addOns() {
        return this.addOns == null ? List.of() : this.addOns;
    }
    /**
     * @return Name of the attached Lightsail Instance
     * 
     */
    public Optional<String> attachedTo() {
        return Optional.ofNullable(this.attachedTo);
    }
    /**
     * @return Attachment State of the Lightsail disk
     * 
     */
    public Optional<String> attachmentState() {
        return Optional.ofNullable(this.attachmentState);
    }
    public Optional<String> diskArn() {
        return Optional.ofNullable(this.diskArn);
    }
    /**
     * @return Iops of the Lightsail disk
     * 
     */
    public Optional<Integer> iops() {
        return Optional.ofNullable(this.iops);
    }
    /**
     * @return Check is Disk is attached state
     * 
     */
    public Optional<Boolean> isAttached() {
        return Optional.ofNullable(this.isAttached);
    }
    public Optional<DiskLocation> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Path of the  attached Disk
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Resource type of Lightsail instance.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return State of the Lightsail disk
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Support code to help identify any issues
     * 
     */
    public Optional<String> supportCode() {
        return Optional.ofNullable(this.supportCode);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<DiskTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDiskResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DiskAddOn> addOns;
        private @Nullable String attachedTo;
        private @Nullable String attachmentState;
        private @Nullable String diskArn;
        private @Nullable Integer iops;
        private @Nullable Boolean isAttached;
        private @Nullable DiskLocation location;
        private @Nullable String path;
        private @Nullable String resourceType;
        private @Nullable String state;
        private @Nullable String supportCode;
        private @Nullable List<DiskTag> tags;
        public Builder() {}
        public Builder(GetDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOns = defaults.addOns;
    	      this.attachedTo = defaults.attachedTo;
    	      this.attachmentState = defaults.attachmentState;
    	      this.diskArn = defaults.diskArn;
    	      this.iops = defaults.iops;
    	      this.isAttached = defaults.isAttached;
    	      this.location = defaults.location;
    	      this.path = defaults.path;
    	      this.resourceType = defaults.resourceType;
    	      this.state = defaults.state;
    	      this.supportCode = defaults.supportCode;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder addOns(@Nullable List<DiskAddOn> addOns) {
            this.addOns = addOns;
            return this;
        }
        public Builder addOns(DiskAddOn... addOns) {
            return addOns(List.of(addOns));
        }
        @CustomType.Setter
        public Builder attachedTo(@Nullable String attachedTo) {
            this.attachedTo = attachedTo;
            return this;
        }
        @CustomType.Setter
        public Builder attachmentState(@Nullable String attachmentState) {
            this.attachmentState = attachmentState;
            return this;
        }
        @CustomType.Setter
        public Builder diskArn(@Nullable String diskArn) {
            this.diskArn = diskArn;
            return this;
        }
        @CustomType.Setter
        public Builder iops(@Nullable Integer iops) {
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder isAttached(@Nullable Boolean isAttached) {
            this.isAttached = isAttached;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable DiskLocation location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder supportCode(@Nullable String supportCode) {
            this.supportCode = supportCode;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DiskTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DiskTag... tags) {
            return tags(List.of(tags));
        }
        public GetDiskResult build() {
            final var o = new GetDiskResult();
            o.addOns = addOns;
            o.attachedTo = attachedTo;
            o.attachmentState = attachmentState;
            o.diskArn = diskArn;
            o.iops = iops;
            o.isAttached = isAttached;
            o.location = location;
            o.path = path;
            o.resourceType = resourceType;
            o.state = state;
            o.supportCode = supportCode;
            o.tags = tags;
            return o;
        }
    }
}
