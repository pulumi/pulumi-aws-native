// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.personalize;

import com.pulumi.awsnative.personalize.inputs.SolutionConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionArgs Empty = new SolutionArgs();

    /**
     * The ARN of the dataset group that provides the training data.
     * 
     */
    @Import(name="datasetGroupArn", required=true)
    private Output<String> datasetGroupArn;

    /**
     * @return The ARN of the dataset group that provides the training data.
     * 
     */
    public Output<String> datasetGroupArn() {
        return this.datasetGroupArn;
    }

    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, &#39;click&#39; or &#39;like&#39;) is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
     * 
     */
    @Import(name="eventType")
    private @Nullable Output<String> eventType;

    /**
     * @return When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, &#39;click&#39; or &#39;like&#39;) is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
     * 
     */
    public Optional<Output<String>> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    /**
     * The name for the solution
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the solution
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     * 
     */
    @Import(name="performAutoML")
    private @Nullable Output<Boolean> performAutoML;

    /**
     * @return Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     * 
     */
    public Optional<Output<Boolean>> performAutoML() {
        return Optional.ofNullable(this.performAutoML);
    }

    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
     * 
     */
    @Import(name="performHPO")
    private @Nullable Output<Boolean> performHPO;

    /**
     * @return Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
     * 
     */
    public Optional<Output<Boolean>> performHPO() {
        return Optional.ofNullable(this.performHPO);
    }

    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     * 
     */
    @Import(name="recipeArn")
    private @Nullable Output<String> recipeArn;

    /**
     * @return The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     * 
     */
    public Optional<Output<String>> recipeArn() {
        return Optional.ofNullable(this.recipeArn);
    }

    @Import(name="solutionConfig")
    private @Nullable Output<SolutionConfigArgs> solutionConfig;

    public Optional<Output<SolutionConfigArgs>> solutionConfig() {
        return Optional.ofNullable(this.solutionConfig);
    }

    private SolutionArgs() {}

    private SolutionArgs(SolutionArgs $) {
        this.datasetGroupArn = $.datasetGroupArn;
        this.eventType = $.eventType;
        this.name = $.name;
        this.performAutoML = $.performAutoML;
        this.performHPO = $.performHPO;
        this.recipeArn = $.recipeArn;
        this.solutionConfig = $.solutionConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionArgs $;

        public Builder() {
            $ = new SolutionArgs();
        }

        public Builder(SolutionArgs defaults) {
            $ = new SolutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datasetGroupArn The ARN of the dataset group that provides the training data.
         * 
         * @return builder
         * 
         */
        public Builder datasetGroupArn(Output<String> datasetGroupArn) {
            $.datasetGroupArn = datasetGroupArn;
            return this;
        }

        /**
         * @param datasetGroupArn The ARN of the dataset group that provides the training data.
         * 
         * @return builder
         * 
         */
        public Builder datasetGroupArn(String datasetGroupArn) {
            return datasetGroupArn(Output.of(datasetGroupArn));
        }

        /**
         * @param eventType When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, &#39;click&#39; or &#39;like&#39;) is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
         * 
         * @return builder
         * 
         */
        public Builder eventType(@Nullable Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, &#39;click&#39; or &#39;like&#39;) is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param name The name for the solution
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the solution
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param performAutoML Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
         * 
         * @return builder
         * 
         */
        public Builder performAutoML(@Nullable Output<Boolean> performAutoML) {
            $.performAutoML = performAutoML;
            return this;
        }

        /**
         * @param performAutoML Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
         * 
         * @return builder
         * 
         */
        public Builder performAutoML(Boolean performAutoML) {
            return performAutoML(Output.of(performAutoML));
        }

        /**
         * @param performHPO Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
         * 
         * @return builder
         * 
         */
        public Builder performHPO(@Nullable Output<Boolean> performHPO) {
            $.performHPO = performHPO;
            return this;
        }

        /**
         * @param performHPO Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
         * 
         * @return builder
         * 
         */
        public Builder performHPO(Boolean performHPO) {
            return performHPO(Output.of(performHPO));
        }

        /**
         * @param recipeArn The ARN of the recipe to use for model training. Only specified when performAutoML is false.
         * 
         * @return builder
         * 
         */
        public Builder recipeArn(@Nullable Output<String> recipeArn) {
            $.recipeArn = recipeArn;
            return this;
        }

        /**
         * @param recipeArn The ARN of the recipe to use for model training. Only specified when performAutoML is false.
         * 
         * @return builder
         * 
         */
        public Builder recipeArn(String recipeArn) {
            return recipeArn(Output.of(recipeArn));
        }

        public Builder solutionConfig(@Nullable Output<SolutionConfigArgs> solutionConfig) {
            $.solutionConfig = solutionConfig;
            return this;
        }

        public Builder solutionConfig(SolutionConfigArgs solutionConfig) {
            return solutionConfig(Output.of(solutionConfig));
        }

        public SolutionArgs build() {
            $.datasetGroupArn = Objects.requireNonNull($.datasetGroupArn, "expected parameter 'datasetGroupArn' to be non-null");
            return $;
        }
    }

}
