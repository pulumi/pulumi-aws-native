// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotanalytics.outputs;

import com.pulumi.awsnative.iotanalytics.outputs.DatastoreFileFormatConfiguration;
import com.pulumi.awsnative.iotanalytics.outputs.DatastorePartitions;
import com.pulumi.awsnative.iotanalytics.outputs.DatastoreRetentionPeriod;
import com.pulumi.awsnative.iotanalytics.outputs.DatastoreStorage;
import com.pulumi.awsnative.iotanalytics.outputs.DatastoreTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatastoreResult {
    private @Nullable DatastorePartitions datastorePartitions;
    private @Nullable DatastoreStorage datastoreStorage;
    private @Nullable DatastoreFileFormatConfiguration fileFormatConfiguration;
    private @Nullable String id;
    private @Nullable DatastoreRetentionPeriod retentionPeriod;
    private @Nullable List<DatastoreTag> tags;

    private GetDatastoreResult() {}
    public Optional<DatastorePartitions> datastorePartitions() {
        return Optional.ofNullable(this.datastorePartitions);
    }
    public Optional<DatastoreStorage> datastoreStorage() {
        return Optional.ofNullable(this.datastoreStorage);
    }
    public Optional<DatastoreFileFormatConfiguration> fileFormatConfiguration() {
        return Optional.ofNullable(this.fileFormatConfiguration);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<DatastoreRetentionPeriod> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }
    public List<DatastoreTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatastoreResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DatastorePartitions datastorePartitions;
        private @Nullable DatastoreStorage datastoreStorage;
        private @Nullable DatastoreFileFormatConfiguration fileFormatConfiguration;
        private @Nullable String id;
        private @Nullable DatastoreRetentionPeriod retentionPeriod;
        private @Nullable List<DatastoreTag> tags;
        public Builder() {}
        public Builder(GetDatastoreResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastorePartitions = defaults.datastorePartitions;
    	      this.datastoreStorage = defaults.datastoreStorage;
    	      this.fileFormatConfiguration = defaults.fileFormatConfiguration;
    	      this.id = defaults.id;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder datastorePartitions(@Nullable DatastorePartitions datastorePartitions) {
            this.datastorePartitions = datastorePartitions;
            return this;
        }
        @CustomType.Setter
        public Builder datastoreStorage(@Nullable DatastoreStorage datastoreStorage) {
            this.datastoreStorage = datastoreStorage;
            return this;
        }
        @CustomType.Setter
        public Builder fileFormatConfiguration(@Nullable DatastoreFileFormatConfiguration fileFormatConfiguration) {
            this.fileFormatConfiguration = fileFormatConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriod(@Nullable DatastoreRetentionPeriod retentionPeriod) {
            this.retentionPeriod = retentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DatastoreTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DatastoreTag... tags) {
            return tags(List.of(tags));
        }
        public GetDatastoreResult build() {
            final var o = new GetDatastoreResult();
            o.datastorePartitions = datastorePartitions;
            o.datastoreStorage = datastoreStorage;
            o.fileFormatConfiguration = fileFormatConfiguration;
            o.id = id;
            o.retentionPeriod = retentionPeriod;
            o.tags = tags;
            return o;
        }
    }
}
