// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iottwinmaker.outputs;

import com.pulumi.awsnative.iottwinmaker.outputs.ComponentTypeStatus;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetComponentTypeResult {
    /**
     * @return The ARN of the component type.
     * 
     */
    private @Nullable String arn;
    /**
     * @return The date and time when the component type was created.
     * 
     */
    private @Nullable String creationDateTime;
    /**
     * @return The description of the component type.
     * 
     */
    private @Nullable String description;
    /**
     * @return Specifies the parent component type to extend.
     * 
     */
    private @Nullable List<String> extendsFrom;
    /**
     * @return a Map of functions in the component type. Each function&#39;s key must be unique to this map.
     * 
     */
    private @Nullable Object functions;
    /**
     * @return A Boolean value that specifies whether the component type is abstract.
     * 
     */
    private @Nullable Boolean isAbstract;
    /**
     * @return A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
     * 
     */
    private @Nullable Boolean isSchemaInitialized;
    /**
     * @return A Boolean value that specifies whether an entity can have more than one component of this type.
     * 
     */
    private @Nullable Boolean isSingleton;
    /**
     * @return An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
     * 
     */
    private @Nullable Object propertyDefinitions;
    /**
     * @return The current status of the component type.
     * 
     */
    private @Nullable ComponentTypeStatus status;
    /**
     * @return A map of key-value pairs to associate with a resource.
     * 
     */
    private @Nullable Object tags;
    /**
     * @return The last date and time when the component type was updated.
     * 
     */
    private @Nullable String updateDateTime;

    private GetComponentTypeResult() {}
    /**
     * @return The ARN of the component type.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return The date and time when the component type was created.
     * 
     */
    public Optional<String> creationDateTime() {
        return Optional.ofNullable(this.creationDateTime);
    }
    /**
     * @return The description of the component type.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Specifies the parent component type to extend.
     * 
     */
    public List<String> extendsFrom() {
        return this.extendsFrom == null ? List.of() : this.extendsFrom;
    }
    /**
     * @return a Map of functions in the component type. Each function&#39;s key must be unique to this map.
     * 
     */
    public Optional<Object> functions() {
        return Optional.ofNullable(this.functions);
    }
    /**
     * @return A Boolean value that specifies whether the component type is abstract.
     * 
     */
    public Optional<Boolean> isAbstract() {
        return Optional.ofNullable(this.isAbstract);
    }
    /**
     * @return A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
     * 
     */
    public Optional<Boolean> isSchemaInitialized() {
        return Optional.ofNullable(this.isSchemaInitialized);
    }
    /**
     * @return A Boolean value that specifies whether an entity can have more than one component of this type.
     * 
     */
    public Optional<Boolean> isSingleton() {
        return Optional.ofNullable(this.isSingleton);
    }
    /**
     * @return An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
     * 
     */
    public Optional<Object> propertyDefinitions() {
        return Optional.ofNullable(this.propertyDefinitions);
    }
    /**
     * @return The current status of the component type.
     * 
     */
    public Optional<ComponentTypeStatus> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return A map of key-value pairs to associate with a resource.
     * 
     */
    public Optional<Object> tags() {
        return Optional.ofNullable(this.tags);
    }
    /**
     * @return The last date and time when the component type was updated.
     * 
     */
    public Optional<String> updateDateTime() {
        return Optional.ofNullable(this.updateDateTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetComponentTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String creationDateTime;
        private @Nullable String description;
        private @Nullable List<String> extendsFrom;
        private @Nullable Object functions;
        private @Nullable Boolean isAbstract;
        private @Nullable Boolean isSchemaInitialized;
        private @Nullable Boolean isSingleton;
        private @Nullable Object propertyDefinitions;
        private @Nullable ComponentTypeStatus status;
        private @Nullable Object tags;
        private @Nullable String updateDateTime;
        public Builder() {}
        public Builder(GetComponentTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.creationDateTime = defaults.creationDateTime;
    	      this.description = defaults.description;
    	      this.extendsFrom = defaults.extendsFrom;
    	      this.functions = defaults.functions;
    	      this.isAbstract = defaults.isAbstract;
    	      this.isSchemaInitialized = defaults.isSchemaInitialized;
    	      this.isSingleton = defaults.isSingleton;
    	      this.propertyDefinitions = defaults.propertyDefinitions;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updateDateTime = defaults.updateDateTime;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder creationDateTime(@Nullable String creationDateTime) {
            this.creationDateTime = creationDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder extendsFrom(@Nullable List<String> extendsFrom) {
            this.extendsFrom = extendsFrom;
            return this;
        }
        public Builder extendsFrom(String... extendsFrom) {
            return extendsFrom(List.of(extendsFrom));
        }
        @CustomType.Setter
        public Builder functions(@Nullable Object functions) {
            this.functions = functions;
            return this;
        }
        @CustomType.Setter
        public Builder isAbstract(@Nullable Boolean isAbstract) {
            this.isAbstract = isAbstract;
            return this;
        }
        @CustomType.Setter
        public Builder isSchemaInitialized(@Nullable Boolean isSchemaInitialized) {
            this.isSchemaInitialized = isSchemaInitialized;
            return this;
        }
        @CustomType.Setter
        public Builder isSingleton(@Nullable Boolean isSingleton) {
            this.isSingleton = isSingleton;
            return this;
        }
        @CustomType.Setter
        public Builder propertyDefinitions(@Nullable Object propertyDefinitions) {
            this.propertyDefinitions = propertyDefinitions;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable ComponentTypeStatus status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Object tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder updateDateTime(@Nullable String updateDateTime) {
            this.updateDateTime = updateDateTime;
            return this;
        }
        public GetComponentTypeResult build() {
            final var o = new GetComponentTypeResult();
            o.arn = arn;
            o.creationDateTime = creationDateTime;
            o.description = description;
            o.extendsFrom = extendsFrom;
            o.functions = functions;
            o.isAbstract = isAbstract;
            o.isSchemaInitialized = isSchemaInitialized;
            o.isSingleton = isSingleton;
            o.propertyDefinitions = propertyDefinitions;
            o.status = status;
            o.tags = tags;
            o.updateDateTime = updateDateTime;
            return o;
        }
    }
}
