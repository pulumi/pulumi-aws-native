// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53recoverycontrol.inputs;

import com.pulumi.awsnative.route53recoverycontrol.enums.SafetyRuleRuleType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a transaction completes.
 * 
 */
public final class SafetyRuleRuleConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SafetyRuleRuleConfigArgs Empty = new SafetyRuleRuleConfigArgs();

    /**
     * Logical negation of the rule. If the rule would usually evaluate true, it&#39;s evaluated as false, and vice versa.
     * 
     */
    @Import(name="inverted", required=true)
    private Output<Boolean> inverted;

    /**
     * @return Logical negation of the rule. If the rule would usually evaluate true, it&#39;s evaluated as false, and vice versa.
     * 
     */
    public Output<Boolean> inverted() {
        return this.inverted;
    }

    /**
     * The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    @Import(name="type", required=true)
    private Output<SafetyRuleRuleType> type;

    public Output<SafetyRuleRuleType> type() {
        return this.type;
    }

    private SafetyRuleRuleConfigArgs() {}

    private SafetyRuleRuleConfigArgs(SafetyRuleRuleConfigArgs $) {
        this.inverted = $.inverted;
        this.threshold = $.threshold;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SafetyRuleRuleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SafetyRuleRuleConfigArgs $;

        public Builder() {
            $ = new SafetyRuleRuleConfigArgs();
        }

        public Builder(SafetyRuleRuleConfigArgs defaults) {
            $ = new SafetyRuleRuleConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inverted Logical negation of the rule. If the rule would usually evaluate true, it&#39;s evaluated as false, and vice versa.
         * 
         * @return builder
         * 
         */
        public Builder inverted(Output<Boolean> inverted) {
            $.inverted = inverted;
            return this;
        }

        /**
         * @param inverted Logical negation of the rule. If the rule would usually evaluate true, it&#39;s evaluated as false, and vice versa.
         * 
         * @return builder
         * 
         */
        public Builder inverted(Boolean inverted) {
            return inverted(Output.of(inverted));
        }

        /**
         * @param threshold The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder type(Output<SafetyRuleRuleType> type) {
            $.type = type;
            return this;
        }

        public Builder type(SafetyRuleRuleType type) {
            return type(Output.of(type));
        }

        public SafetyRuleRuleConfigArgs build() {
            $.inverted = Objects.requireNonNull($.inverted, "expected parameter 'inverted' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
