// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudformation.outputs;

import com.pulumi.awsnative.cloudformation.enums.StackSetCapability;
import com.pulumi.awsnative.cloudformation.outputs.ManagedExecutionProperties;
import com.pulumi.awsnative.cloudformation.outputs.StackSetAutoDeployment;
import com.pulumi.awsnative.cloudformation.outputs.StackSetParameter;
import com.pulumi.awsnative.cloudformation.outputs.StackSetStackInstances;
import com.pulumi.awsnative.cloudformation.outputs.StackSetTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStackSetResult {
    /**
     * @return The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
     * 
     */
    private @Nullable String administrationRoleARN;
    /**
     * @return Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     * 
     */
    private @Nullable StackSetAutoDeployment autoDeployment;
    /**
     * @return In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
     * 
     */
    private @Nullable List<StackSetCapability> capabilities;
    /**
     * @return A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information.
     * 
     */
    private @Nullable String description;
    /**
     * @return The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     * 
     */
    private @Nullable String executionRoleName;
    /**
     * @return Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     * 
     */
    private @Nullable ManagedExecutionProperties managedExecution;
    /**
     * @return The input parameters for the stack set template.
     * 
     */
    private @Nullable List<StackSetParameter> parameters;
    /**
     * @return A group of stack instances with parameters in some specific accounts and regions.
     * 
     */
    private @Nullable List<StackSetStackInstances> stackInstancesGroup;
    /**
     * @return The ID of the stack set that you&#39;re creating.
     * 
     */
    private @Nullable String stackSetId;
    /**
     * @return The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
     * 
     */
    private @Nullable List<StackSetTag> tags;
    /**
     * @return The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
     * 
     */
    private @Nullable String templateBody;

    private GetStackSetResult() {}
    /**
     * @return The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
     * 
     */
    public Optional<String> administrationRoleARN() {
        return Optional.ofNullable(this.administrationRoleARN);
    }
    /**
     * @return Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
     * 
     */
    public Optional<StackSetAutoDeployment> autoDeployment() {
        return Optional.ofNullable(this.autoDeployment);
    }
    /**
     * @return In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
     * 
     */
    public List<StackSetCapability> capabilities() {
        return this.capabilities == null ? List.of() : this.capabilities;
    }
    /**
     * @return A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
     * 
     */
    public Optional<String> executionRoleName() {
        return Optional.ofNullable(this.executionRoleName);
    }
    /**
     * @return Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     * 
     */
    public Optional<ManagedExecutionProperties> managedExecution() {
        return Optional.ofNullable(this.managedExecution);
    }
    /**
     * @return The input parameters for the stack set template.
     * 
     */
    public List<StackSetParameter> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * @return A group of stack instances with parameters in some specific accounts and regions.
     * 
     */
    public List<StackSetStackInstances> stackInstancesGroup() {
        return this.stackInstancesGroup == null ? List.of() : this.stackInstancesGroup;
    }
    /**
     * @return The ID of the stack set that you&#39;re creating.
     * 
     */
    public Optional<String> stackSetId() {
        return Optional.ofNullable(this.stackSetId);
    }
    /**
     * @return The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
     * 
     */
    public List<StackSetTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
     * 
     */
    public Optional<String> templateBody() {
        return Optional.ofNullable(this.templateBody);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStackSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String administrationRoleARN;
        private @Nullable StackSetAutoDeployment autoDeployment;
        private @Nullable List<StackSetCapability> capabilities;
        private @Nullable String description;
        private @Nullable String executionRoleName;
        private @Nullable ManagedExecutionProperties managedExecution;
        private @Nullable List<StackSetParameter> parameters;
        private @Nullable List<StackSetStackInstances> stackInstancesGroup;
        private @Nullable String stackSetId;
        private @Nullable List<StackSetTag> tags;
        private @Nullable String templateBody;
        public Builder() {}
        public Builder(GetStackSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrationRoleARN = defaults.administrationRoleARN;
    	      this.autoDeployment = defaults.autoDeployment;
    	      this.capabilities = defaults.capabilities;
    	      this.description = defaults.description;
    	      this.executionRoleName = defaults.executionRoleName;
    	      this.managedExecution = defaults.managedExecution;
    	      this.parameters = defaults.parameters;
    	      this.stackInstancesGroup = defaults.stackInstancesGroup;
    	      this.stackSetId = defaults.stackSetId;
    	      this.tags = defaults.tags;
    	      this.templateBody = defaults.templateBody;
        }

        @CustomType.Setter
        public Builder administrationRoleARN(@Nullable String administrationRoleARN) {
            this.administrationRoleARN = administrationRoleARN;
            return this;
        }
        @CustomType.Setter
        public Builder autoDeployment(@Nullable StackSetAutoDeployment autoDeployment) {
            this.autoDeployment = autoDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder capabilities(@Nullable List<StackSetCapability> capabilities) {
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(StackSetCapability... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder executionRoleName(@Nullable String executionRoleName) {
            this.executionRoleName = executionRoleName;
            return this;
        }
        @CustomType.Setter
        public Builder managedExecution(@Nullable ManagedExecutionProperties managedExecution) {
            this.managedExecution = managedExecution;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable List<StackSetParameter> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(StackSetParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder stackInstancesGroup(@Nullable List<StackSetStackInstances> stackInstancesGroup) {
            this.stackInstancesGroup = stackInstancesGroup;
            return this;
        }
        public Builder stackInstancesGroup(StackSetStackInstances... stackInstancesGroup) {
            return stackInstancesGroup(List.of(stackInstancesGroup));
        }
        @CustomType.Setter
        public Builder stackSetId(@Nullable String stackSetId) {
            this.stackSetId = stackSetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<StackSetTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(StackSetTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder templateBody(@Nullable String templateBody) {
            this.templateBody = templateBody;
            return this;
        }
        public GetStackSetResult build() {
            final var o = new GetStackSetResult();
            o.administrationRoleARN = administrationRoleARN;
            o.autoDeployment = autoDeployment;
            o.capabilities = capabilities;
            o.description = description;
            o.executionRoleName = executionRoleName;
            o.managedExecution = managedExecution;
            o.parameters = parameters;
            o.stackInstancesGroup = stackInstancesGroup;
            o.stackSetId = stackSetId;
            o.tags = tags;
            o.templateBody = templateBody;
            return o;
        }
    }
}
