// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.inputs;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationInputSchemaRecordEncoding;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationRecordColumnArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationRecordFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
 * 
 */
public final class ApplicationInputSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationInputSchemaArgs Empty = new ApplicationInputSchemaArgs();

    /**
     * A list of `RecordColumn` objects.
     * 
     */
    @Import(name="recordColumns", required=true)
    private Output<List<ApplicationRecordColumnArgs>> recordColumns;

    /**
     * @return A list of `RecordColumn` objects.
     * 
     */
    public Output<List<ApplicationRecordColumnArgs>> recordColumns() {
        return this.recordColumns;
    }

    /**
     * Specifies the encoding of the records in the streaming source. For example, UTF-8.
     * 
     */
    @Import(name="recordEncoding")
    private @Nullable Output<ApplicationInputSchemaRecordEncoding> recordEncoding;

    /**
     * @return Specifies the encoding of the records in the streaming source. For example, UTF-8.
     * 
     */
    public Optional<Output<ApplicationInputSchemaRecordEncoding>> recordEncoding() {
        return Optional.ofNullable(this.recordEncoding);
    }

    /**
     * Specifies the format of the records on the streaming source.
     * 
     */
    @Import(name="recordFormat", required=true)
    private Output<ApplicationRecordFormatArgs> recordFormat;

    /**
     * @return Specifies the format of the records on the streaming source.
     * 
     */
    public Output<ApplicationRecordFormatArgs> recordFormat() {
        return this.recordFormat;
    }

    private ApplicationInputSchemaArgs() {}

    private ApplicationInputSchemaArgs(ApplicationInputSchemaArgs $) {
        this.recordColumns = $.recordColumns;
        this.recordEncoding = $.recordEncoding;
        this.recordFormat = $.recordFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationInputSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationInputSchemaArgs $;

        public Builder() {
            $ = new ApplicationInputSchemaArgs();
        }

        public Builder(ApplicationInputSchemaArgs defaults) {
            $ = new ApplicationInputSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recordColumns A list of `RecordColumn` objects.
         * 
         * @return builder
         * 
         */
        public Builder recordColumns(Output<List<ApplicationRecordColumnArgs>> recordColumns) {
            $.recordColumns = recordColumns;
            return this;
        }

        /**
         * @param recordColumns A list of `RecordColumn` objects.
         * 
         * @return builder
         * 
         */
        public Builder recordColumns(List<ApplicationRecordColumnArgs> recordColumns) {
            return recordColumns(Output.of(recordColumns));
        }

        /**
         * @param recordColumns A list of `RecordColumn` objects.
         * 
         * @return builder
         * 
         */
        public Builder recordColumns(ApplicationRecordColumnArgs... recordColumns) {
            return recordColumns(List.of(recordColumns));
        }

        /**
         * @param recordEncoding Specifies the encoding of the records in the streaming source. For example, UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder recordEncoding(@Nullable Output<ApplicationInputSchemaRecordEncoding> recordEncoding) {
            $.recordEncoding = recordEncoding;
            return this;
        }

        /**
         * @param recordEncoding Specifies the encoding of the records in the streaming source. For example, UTF-8.
         * 
         * @return builder
         * 
         */
        public Builder recordEncoding(ApplicationInputSchemaRecordEncoding recordEncoding) {
            return recordEncoding(Output.of(recordEncoding));
        }

        /**
         * @param recordFormat Specifies the format of the records on the streaming source.
         * 
         * @return builder
         * 
         */
        public Builder recordFormat(Output<ApplicationRecordFormatArgs> recordFormat) {
            $.recordFormat = recordFormat;
            return this;
        }

        /**
         * @param recordFormat Specifies the format of the records on the streaming source.
         * 
         * @return builder
         * 
         */
        public Builder recordFormat(ApplicationRecordFormatArgs recordFormat) {
            return recordFormat(Output.of(recordFormat));
        }

        public ApplicationInputSchemaArgs build() {
            $.recordColumns = Objects.requireNonNull($.recordColumns, "expected parameter 'recordColumns' to be non-null");
            $.recordFormat = Objects.requireNonNull($.recordFormat, "expected parameter 'recordFormat' to be non-null");
            return $;
        }
    }

}
