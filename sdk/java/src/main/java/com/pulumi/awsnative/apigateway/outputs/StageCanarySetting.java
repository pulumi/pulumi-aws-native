// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StageCanarySetting {
    /**
     * @return The identifier of the deployment that the stage points to.
     * 
     */
    private @Nullable String deploymentId;
    /**
     * @return The percentage (0-100) of traffic diverted to a canary deployment.
     * 
     */
    private @Nullable Double percentTraffic;
    /**
     * @return Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
     * 
     */
    private @Nullable Object stageVariableOverrides;
    /**
     * @return Whether the canary deployment uses the stage cache or not.
     * 
     */
    private @Nullable Boolean useStageCache;

    private StageCanarySetting() {}
    /**
     * @return The identifier of the deployment that the stage points to.
     * 
     */
    public Optional<String> deploymentId() {
        return Optional.ofNullable(this.deploymentId);
    }
    /**
     * @return The percentage (0-100) of traffic diverted to a canary deployment.
     * 
     */
    public Optional<Double> percentTraffic() {
        return Optional.ofNullable(this.percentTraffic);
    }
    /**
     * @return Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
     * 
     */
    public Optional<Object> stageVariableOverrides() {
        return Optional.ofNullable(this.stageVariableOverrides);
    }
    /**
     * @return Whether the canary deployment uses the stage cache or not.
     * 
     */
    public Optional<Boolean> useStageCache() {
        return Optional.ofNullable(this.useStageCache);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StageCanarySetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String deploymentId;
        private @Nullable Double percentTraffic;
        private @Nullable Object stageVariableOverrides;
        private @Nullable Boolean useStageCache;
        public Builder() {}
        public Builder(StageCanarySetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deploymentId = defaults.deploymentId;
    	      this.percentTraffic = defaults.percentTraffic;
    	      this.stageVariableOverrides = defaults.stageVariableOverrides;
    	      this.useStageCache = defaults.useStageCache;
        }

        @CustomType.Setter
        public Builder deploymentId(@Nullable String deploymentId) {
            this.deploymentId = deploymentId;
            return this;
        }
        @CustomType.Setter
        public Builder percentTraffic(@Nullable Double percentTraffic) {
            this.percentTraffic = percentTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder stageVariableOverrides(@Nullable Object stageVariableOverrides) {
            this.stageVariableOverrides = stageVariableOverrides;
            return this;
        }
        @CustomType.Setter
        public Builder useStageCache(@Nullable Boolean useStageCache) {
            this.useStageCache = useStageCache;
            return this;
        }
        public StageCanarySetting build() {
            final var o = new StageCanarySetting();
            o.deploymentId = deploymentId;
            o.percentTraffic = percentTraffic;
            o.stageVariableOverrides = stageVariableOverrides;
            o.useStageCache = useStageCache;
            return o;
        }
    }
}
