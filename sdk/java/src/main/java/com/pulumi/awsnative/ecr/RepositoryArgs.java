// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecr;

import com.pulumi.awsnative.ecr.enums.RepositoryImageTagMutability;
import com.pulumi.awsnative.ecr.inputs.RepositoryEncryptionConfigurationArgs;
import com.pulumi.awsnative.ecr.inputs.RepositoryImageScanningConfigurationArgs;
import com.pulumi.awsnative.ecr.inputs.RepositoryLifecyclePolicyArgs;
import com.pulumi.awsnative.ecr.inputs.RepositoryTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    @Import(name="encryptionConfiguration")
    private @Nullable Output<RepositoryEncryptionConfigurationArgs> encryptionConfiguration;

    public Optional<Output<RepositoryEncryptionConfigurationArgs>> encryptionConfiguration() {
        return Optional.ofNullable(this.encryptionConfiguration);
    }

    @Import(name="imageScanningConfiguration")
    private @Nullable Output<RepositoryImageScanningConfigurationArgs> imageScanningConfiguration;

    public Optional<Output<RepositoryImageScanningConfigurationArgs>> imageScanningConfiguration() {
        return Optional.ofNullable(this.imageScanningConfiguration);
    }

    /**
     * The image tag mutability setting for the repository.
     * 
     */
    @Import(name="imageTagMutability")
    private @Nullable Output<RepositoryImageTagMutability> imageTagMutability;

    /**
     * @return The image tag mutability setting for the repository.
     * 
     */
    public Optional<Output<RepositoryImageTagMutability>> imageTagMutability() {
        return Optional.ofNullable(this.imageTagMutability);
    }

    @Import(name="lifecyclePolicy")
    private @Nullable Output<RepositoryLifecyclePolicyArgs> lifecyclePolicy;

    public Optional<Output<RepositoryLifecyclePolicyArgs>> lifecyclePolicy() {
        return Optional.ofNullable(this.lifecyclePolicy);
    }

    /**
     * The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     * 
     */
    @Import(name="repositoryName")
    private @Nullable Output<String> repositoryName;

    /**
     * @return The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
     * 
     */
    public Optional<Output<String>> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }

    /**
     * The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide.
     * 
     */
    @Import(name="repositoryPolicyText")
    private @Nullable Output<Object> repositoryPolicyText;

    /**
     * @return The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide.
     * 
     */
    public Optional<Output<Object>> repositoryPolicyText() {
        return Optional.ofNullable(this.repositoryPolicyText);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<RepositoryTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<RepositoryTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.encryptionConfiguration = $.encryptionConfiguration;
        this.imageScanningConfiguration = $.imageScanningConfiguration;
        this.imageTagMutability = $.imageTagMutability;
        this.lifecyclePolicy = $.lifecyclePolicy;
        this.repositoryName = $.repositoryName;
        this.repositoryPolicyText = $.repositoryPolicyText;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder encryptionConfiguration(@Nullable Output<RepositoryEncryptionConfigurationArgs> encryptionConfiguration) {
            $.encryptionConfiguration = encryptionConfiguration;
            return this;
        }

        public Builder encryptionConfiguration(RepositoryEncryptionConfigurationArgs encryptionConfiguration) {
            return encryptionConfiguration(Output.of(encryptionConfiguration));
        }

        public Builder imageScanningConfiguration(@Nullable Output<RepositoryImageScanningConfigurationArgs> imageScanningConfiguration) {
            $.imageScanningConfiguration = imageScanningConfiguration;
            return this;
        }

        public Builder imageScanningConfiguration(RepositoryImageScanningConfigurationArgs imageScanningConfiguration) {
            return imageScanningConfiguration(Output.of(imageScanningConfiguration));
        }

        /**
         * @param imageTagMutability The image tag mutability setting for the repository.
         * 
         * @return builder
         * 
         */
        public Builder imageTagMutability(@Nullable Output<RepositoryImageTagMutability> imageTagMutability) {
            $.imageTagMutability = imageTagMutability;
            return this;
        }

        /**
         * @param imageTagMutability The image tag mutability setting for the repository.
         * 
         * @return builder
         * 
         */
        public Builder imageTagMutability(RepositoryImageTagMutability imageTagMutability) {
            return imageTagMutability(Output.of(imageTagMutability));
        }

        public Builder lifecyclePolicy(@Nullable Output<RepositoryLifecyclePolicyArgs> lifecyclePolicy) {
            $.lifecyclePolicy = lifecyclePolicy;
            return this;
        }

        public Builder lifecyclePolicy(RepositoryLifecyclePolicyArgs lifecyclePolicy) {
            return lifecyclePolicy(Output.of(lifecyclePolicy));
        }

        /**
         * @param repositoryName The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(@Nullable Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        /**
         * @param repositoryPolicyText The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPolicyText(@Nullable Output<Object> repositoryPolicyText) {
            $.repositoryPolicyText = repositoryPolicyText;
            return this;
        }

        /**
         * @param repositoryPolicyText The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide.
         * 
         * @return builder
         * 
         */
        public Builder repositoryPolicyText(Object repositoryPolicyText) {
            return repositoryPolicyText(Output.of(repositoryPolicyText));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<RepositoryTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<RepositoryTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(RepositoryTagArgs... tags) {
            return tags(List.of(tags));
        }

        public RepositoryArgs build() {
            return $;
        }
    }

}
