// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53resolver;

import com.pulumi.awsnative.route53resolver.enums.ResolverRuleRuleType;
import com.pulumi.awsnative.route53resolver.inputs.ResolverRuleTagArgs;
import com.pulumi.awsnative.route53resolver.inputs.ResolverRuleTargetAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResolverRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverRuleArgs Empty = new ResolverRuleArgs();

    /**
     * DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The name for the Resolver rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the Resolver rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the endpoint that the rule is associated with.
     * 
     */
    @Import(name="resolverEndpointId")
    private @Nullable Output<String> resolverEndpointId;

    /**
     * @return The ID of the endpoint that the rule is associated with.
     * 
     */
    public Optional<Output<String>> resolverEndpointId() {
        return Optional.ofNullable(this.resolverEndpointId);
    }

    /**
     * When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<ResolverRuleRuleType> ruleType;

    /**
     * @return When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
     * 
     */
    public Output<ResolverRuleRuleType> ruleType() {
        return this.ruleType;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ResolverRuleTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<ResolverRuleTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
     * 
     */
    @Import(name="targetIps")
    private @Nullable Output<List<ResolverRuleTargetAddressArgs>> targetIps;

    /**
     * @return An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
     * 
     */
    public Optional<Output<List<ResolverRuleTargetAddressArgs>>> targetIps() {
        return Optional.ofNullable(this.targetIps);
    }

    private ResolverRuleArgs() {}

    private ResolverRuleArgs(ResolverRuleArgs $) {
        this.domainName = $.domainName;
        this.name = $.name;
        this.resolverEndpointId = $.resolverEndpointId;
        this.ruleType = $.ruleType;
        this.tags = $.tags;
        this.targetIps = $.targetIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResolverRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResolverRuleArgs $;

        public Builder() {
            $ = new ResolverRuleArgs();
        }

        public Builder(ResolverRuleArgs defaults) {
            $ = new ResolverRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param name The name for the Resolver rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the Resolver rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resolverEndpointId The ID of the endpoint that the rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resolverEndpointId(@Nullable Output<String> resolverEndpointId) {
            $.resolverEndpointId = resolverEndpointId;
            return this;
        }

        /**
         * @param resolverEndpointId The ID of the endpoint that the rule is associated with.
         * 
         * @return builder
         * 
         */
        public Builder resolverEndpointId(String resolverEndpointId) {
            return resolverEndpointId(Output.of(resolverEndpointId));
        }

        /**
         * @param ruleType When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<ResolverRuleRuleType> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(ResolverRuleRuleType ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ResolverRuleTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ResolverRuleTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(ResolverRuleTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param targetIps An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
         * 
         * @return builder
         * 
         */
        public Builder targetIps(@Nullable Output<List<ResolverRuleTargetAddressArgs>> targetIps) {
            $.targetIps = targetIps;
            return this;
        }

        /**
         * @param targetIps An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
         * 
         * @return builder
         * 
         */
        public Builder targetIps(List<ResolverRuleTargetAddressArgs> targetIps) {
            return targetIps(Output.of(targetIps));
        }

        /**
         * @param targetIps An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
         * 
         * @return builder
         * 
         */
        public Builder targetIps(ResolverRuleTargetAddressArgs... targetIps) {
            return targetIps(List.of(targetIps));
        }

        public ResolverRuleArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.ruleType = Objects.requireNonNull($.ruleType, "expected parameter 'ruleType' to be non-null");
            return $;
        }
    }

}
