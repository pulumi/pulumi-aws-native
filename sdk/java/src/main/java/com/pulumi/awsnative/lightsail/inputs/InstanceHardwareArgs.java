// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.inputs;

import com.pulumi.awsnative.lightsail.inputs.InstanceDiskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Hardware of the Instance.
 * 
 */
public final class InstanceHardwareArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceHardwareArgs Empty = new InstanceHardwareArgs();

    /**
     * CPU count of the Instance.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return CPU count of the Instance.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * Disks attached to the Instance.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<InstanceDiskArgs>> disks;

    /**
     * @return Disks attached to the Instance.
     * 
     */
    public Optional<Output<List<InstanceDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * RAM Size of the Instance.
     * 
     */
    @Import(name="ramSizeInGb")
    private @Nullable Output<Integer> ramSizeInGb;

    /**
     * @return RAM Size of the Instance.
     * 
     */
    public Optional<Output<Integer>> ramSizeInGb() {
        return Optional.ofNullable(this.ramSizeInGb);
    }

    private InstanceHardwareArgs() {}

    private InstanceHardwareArgs(InstanceHardwareArgs $) {
        this.cpuCount = $.cpuCount;
        this.disks = $.disks;
        this.ramSizeInGb = $.ramSizeInGb;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceHardwareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceHardwareArgs $;

        public Builder() {
            $ = new InstanceHardwareArgs();
        }

        public Builder(InstanceHardwareArgs defaults) {
            $ = new InstanceHardwareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuCount CPU count of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount CPU count of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param disks Disks attached to the Instance.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<InstanceDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks Disks attached to the Instance.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<InstanceDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks Disks attached to the Instance.
         * 
         * @return builder
         * 
         */
        public Builder disks(InstanceDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param ramSizeInGb RAM Size of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder ramSizeInGb(@Nullable Output<Integer> ramSizeInGb) {
            $.ramSizeInGb = ramSizeInGb;
            return this;
        }

        /**
         * @param ramSizeInGb RAM Size of the Instance.
         * 
         * @return builder
         * 
         */
        public Builder ramSizeInGb(Integer ramSizeInGb) {
            return ramSizeInGb(Output.of(ramSizeInGb));
        }

        public InstanceHardwareArgs build() {
            return $;
        }
    }

}
