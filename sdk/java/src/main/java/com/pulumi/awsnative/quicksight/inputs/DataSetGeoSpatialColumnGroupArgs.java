// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.awsnative.quicksight.enums.DataSetGeoSpatialCountryCode;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;Geospatial column group that denotes a hierarchy.&lt;/p&gt;
 * 
 */
public final class DataSetGeoSpatialColumnGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSetGeoSpatialColumnGroupArgs Empty = new DataSetGeoSpatialColumnGroupArgs();

    /**
     * &lt;p&gt;Columns in this hierarchy.&lt;/p&gt;
     * 
     */
    @Import(name="columns", required=true)
    private Output<List<String>> columns;

    /**
     * @return &lt;p&gt;Columns in this hierarchy.&lt;/p&gt;
     * 
     */
    public Output<List<String>> columns() {
        return this.columns;
    }

    @Import(name="countryCode")
    private @Nullable Output<DataSetGeoSpatialCountryCode> countryCode;

    public Optional<Output<DataSetGeoSpatialCountryCode>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * &lt;p&gt;A display name for the hierarchy.&lt;/p&gt;
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return &lt;p&gt;A display name for the hierarchy.&lt;/p&gt;
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DataSetGeoSpatialColumnGroupArgs() {}

    private DataSetGeoSpatialColumnGroupArgs(DataSetGeoSpatialColumnGroupArgs $) {
        this.columns = $.columns;
        this.countryCode = $.countryCode;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSetGeoSpatialColumnGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSetGeoSpatialColumnGroupArgs $;

        public Builder() {
            $ = new DataSetGeoSpatialColumnGroupArgs();
        }

        public Builder(DataSetGeoSpatialColumnGroupArgs defaults) {
            $ = new DataSetGeoSpatialColumnGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns &lt;p&gt;Columns in this hierarchy.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder columns(Output<List<String>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns &lt;p&gt;Columns in this hierarchy.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder columns(List<String> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns &lt;p&gt;Columns in this hierarchy.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        public Builder countryCode(@Nullable Output<DataSetGeoSpatialCountryCode> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(DataSetGeoSpatialCountryCode countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param name &lt;p&gt;A display name for the hierarchy.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;A display name for the hierarchy.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DataSetGeoSpatialColumnGroupArgs build() {
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
