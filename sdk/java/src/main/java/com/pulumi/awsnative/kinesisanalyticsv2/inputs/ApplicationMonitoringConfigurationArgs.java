// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.inputs;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationConfigurationType;
import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationLogLevel;
import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationMetricsLevel;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
 * 
 */
public final class ApplicationMonitoringConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationMonitoringConfigurationArgs Empty = new ApplicationMonitoringConfigurationArgs();

    /**
     * Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
     * 
     */
    @Import(name="configurationType", required=true)
    private Output<ApplicationMonitoringConfigurationConfigurationType> configurationType;

    /**
     * @return Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
     * 
     */
    public Output<ApplicationMonitoringConfigurationConfigurationType> configurationType() {
        return this.configurationType;
    }

    /**
     * Describes the verbosity of the CloudWatch Logs for an application.
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<ApplicationMonitoringConfigurationLogLevel> logLevel;

    /**
     * @return Describes the verbosity of the CloudWatch Logs for an application.
     * 
     */
    public Optional<Output<ApplicationMonitoringConfigurationLogLevel>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
     * 
     */
    @Import(name="metricsLevel")
    private @Nullable Output<ApplicationMonitoringConfigurationMetricsLevel> metricsLevel;

    /**
     * @return Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
     * 
     */
    public Optional<Output<ApplicationMonitoringConfigurationMetricsLevel>> metricsLevel() {
        return Optional.ofNullable(this.metricsLevel);
    }

    private ApplicationMonitoringConfigurationArgs() {}

    private ApplicationMonitoringConfigurationArgs(ApplicationMonitoringConfigurationArgs $) {
        this.configurationType = $.configurationType;
        this.logLevel = $.logLevel;
        this.metricsLevel = $.metricsLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationMonitoringConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationMonitoringConfigurationArgs $;

        public Builder() {
            $ = new ApplicationMonitoringConfigurationArgs();
        }

        public Builder(ApplicationMonitoringConfigurationArgs defaults) {
            $ = new ApplicationMonitoringConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationType Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(Output<ApplicationMonitoringConfigurationConfigurationType> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(ApplicationMonitoringConfigurationConfigurationType configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param logLevel Describes the verbosity of the CloudWatch Logs for an application.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<ApplicationMonitoringConfigurationLogLevel> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel Describes the verbosity of the CloudWatch Logs for an application.
         * 
         * @return builder
         * 
         */
        public Builder logLevel(ApplicationMonitoringConfigurationLogLevel logLevel) {
            return logLevel(Output.of(logLevel));
        }

        /**
         * @param metricsLevel Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
         * 
         * @return builder
         * 
         */
        public Builder metricsLevel(@Nullable Output<ApplicationMonitoringConfigurationMetricsLevel> metricsLevel) {
            $.metricsLevel = metricsLevel;
            return this;
        }

        /**
         * @param metricsLevel Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
         * 
         * @return builder
         * 
         */
        public Builder metricsLevel(ApplicationMonitoringConfigurationMetricsLevel metricsLevel) {
            return metricsLevel(Output.of(metricsLevel));
        }

        public ApplicationMonitoringConfigurationArgs build() {
            $.configurationType = Objects.requireNonNull($.configurationType, "expected parameter 'configurationType' to be non-null");
            return $;
        }
    }

}
