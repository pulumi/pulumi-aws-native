// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.timestream.inputs;

import com.pulumi.awsnative.timestream.inputs.ScheduledQueryDimensionMappingArgs;
import com.pulumi.awsnative.timestream.inputs.ScheduledQueryMixedMeasureMappingArgs;
import com.pulumi.awsnative.timestream.inputs.ScheduledQueryMultiMeasureMappingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration needed to write data into the Timestream database and table.
 * 
 */
public final class ScheduledQueryTimestreamConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryTimestreamConfigurationArgs Empty = new ScheduledQueryTimestreamConfigurationArgs();

    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    @Import(name="dimensionMappings", required=true)
    private Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings;

    public Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings() {
        return this.dimensionMappings;
    }

    @Import(name="measureNameColumn")
    private @Nullable Output<String> measureNameColumn;

    public Optional<Output<String>> measureNameColumn() {
        return Optional.ofNullable(this.measureNameColumn);
    }

    @Import(name="mixedMeasureMappings")
    private @Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings;

    public Optional<Output<List<ScheduledQueryMixedMeasureMappingArgs>>> mixedMeasureMappings() {
        return Optional.ofNullable(this.mixedMeasureMappings);
    }

    @Import(name="multiMeasureMappings")
    private @Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings;

    public Optional<Output<ScheduledQueryMultiMeasureMappingsArgs>> multiMeasureMappings() {
        return Optional.ofNullable(this.multiMeasureMappings);
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    @Import(name="timeColumn", required=true)
    private Output<String> timeColumn;

    public Output<String> timeColumn() {
        return this.timeColumn;
    }

    private ScheduledQueryTimestreamConfigurationArgs() {}

    private ScheduledQueryTimestreamConfigurationArgs(ScheduledQueryTimestreamConfigurationArgs $) {
        this.databaseName = $.databaseName;
        this.dimensionMappings = $.dimensionMappings;
        this.measureNameColumn = $.measureNameColumn;
        this.mixedMeasureMappings = $.mixedMeasureMappings;
        this.multiMeasureMappings = $.multiMeasureMappings;
        this.tableName = $.tableName;
        this.timeColumn = $.timeColumn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryTimestreamConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryTimestreamConfigurationArgs $;

        public Builder() {
            $ = new ScheduledQueryTimestreamConfigurationArgs();
        }

        public Builder(ScheduledQueryTimestreamConfigurationArgs defaults) {
            $ = new ScheduledQueryTimestreamConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder dimensionMappings(Output<List<ScheduledQueryDimensionMappingArgs>> dimensionMappings) {
            $.dimensionMappings = dimensionMappings;
            return this;
        }

        public Builder dimensionMappings(List<ScheduledQueryDimensionMappingArgs> dimensionMappings) {
            return dimensionMappings(Output.of(dimensionMappings));
        }

        public Builder dimensionMappings(ScheduledQueryDimensionMappingArgs... dimensionMappings) {
            return dimensionMappings(List.of(dimensionMappings));
        }

        public Builder measureNameColumn(@Nullable Output<String> measureNameColumn) {
            $.measureNameColumn = measureNameColumn;
            return this;
        }

        public Builder measureNameColumn(String measureNameColumn) {
            return measureNameColumn(Output.of(measureNameColumn));
        }

        public Builder mixedMeasureMappings(@Nullable Output<List<ScheduledQueryMixedMeasureMappingArgs>> mixedMeasureMappings) {
            $.mixedMeasureMappings = mixedMeasureMappings;
            return this;
        }

        public Builder mixedMeasureMappings(List<ScheduledQueryMixedMeasureMappingArgs> mixedMeasureMappings) {
            return mixedMeasureMappings(Output.of(mixedMeasureMappings));
        }

        public Builder mixedMeasureMappings(ScheduledQueryMixedMeasureMappingArgs... mixedMeasureMappings) {
            return mixedMeasureMappings(List.of(mixedMeasureMappings));
        }

        public Builder multiMeasureMappings(@Nullable Output<ScheduledQueryMultiMeasureMappingsArgs> multiMeasureMappings) {
            $.multiMeasureMappings = multiMeasureMappings;
            return this;
        }

        public Builder multiMeasureMappings(ScheduledQueryMultiMeasureMappingsArgs multiMeasureMappings) {
            return multiMeasureMappings(Output.of(multiMeasureMappings));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder timeColumn(Output<String> timeColumn) {
            $.timeColumn = timeColumn;
            return this;
        }

        public Builder timeColumn(String timeColumn) {
            return timeColumn(Output.of(timeColumn));
        }

        public ScheduledQueryTimestreamConfigurationArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.dimensionMappings = Objects.requireNonNull($.dimensionMappings, "expected parameter 'dimensionMappings' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            $.timeColumn = Objects.requireNonNull($.timeColumn, "expected parameter 'timeColumn' to be non-null");
            return $;
        }
    }

}
