// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotsitewise;

import com.pulumi.awsnative.iotsitewise.inputs.AssetModelCompositeModelArgs;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelHierarchyArgs;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelPropertyArgs;
import com.pulumi.awsnative.iotsitewise.inputs.AssetModelTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetModelArgs Empty = new AssetModelArgs();

    /**
     * The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
     * 
     */
    @Import(name="assetModelCompositeModels")
    private @Nullable Output<List<AssetModelCompositeModelArgs>> assetModelCompositeModels;

    /**
     * @return The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
     * 
     */
    public Optional<Output<List<AssetModelCompositeModelArgs>>> assetModelCompositeModels() {
        return Optional.ofNullable(this.assetModelCompositeModels);
    }

    /**
     * A description for the asset model.
     * 
     */
    @Import(name="assetModelDescription")
    private @Nullable Output<String> assetModelDescription;

    /**
     * @return A description for the asset model.
     * 
     */
    public Optional<Output<String>> assetModelDescription() {
        return Optional.ofNullable(this.assetModelDescription);
    }

    /**
     * The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
     * 
     */
    @Import(name="assetModelHierarchies")
    private @Nullable Output<List<AssetModelHierarchyArgs>> assetModelHierarchies;

    /**
     * @return The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
     * 
     */
    public Optional<Output<List<AssetModelHierarchyArgs>>> assetModelHierarchies() {
        return Optional.ofNullable(this.assetModelHierarchies);
    }

    /**
     * A unique, friendly name for the asset model.
     * 
     */
    @Import(name="assetModelName")
    private @Nullable Output<String> assetModelName;

    /**
     * @return A unique, friendly name for the asset model.
     * 
     */
    public Optional<Output<String>> assetModelName() {
        return Optional.ofNullable(this.assetModelName);
    }

    /**
     * The property definitions of the asset model. You can specify up to 200 properties per asset model.
     * 
     */
    @Import(name="assetModelProperties")
    private @Nullable Output<List<AssetModelPropertyArgs>> assetModelProperties;

    /**
     * @return The property definitions of the asset model. You can specify up to 200 properties per asset model.
     * 
     */
    public Optional<Output<List<AssetModelPropertyArgs>>> assetModelProperties() {
        return Optional.ofNullable(this.assetModelProperties);
    }

    /**
     * A list of key-value pairs that contain metadata for the asset model.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AssetModelTagArgs>> tags;

    /**
     * @return A list of key-value pairs that contain metadata for the asset model.
     * 
     */
    public Optional<Output<List<AssetModelTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AssetModelArgs() {}

    private AssetModelArgs(AssetModelArgs $) {
        this.assetModelCompositeModels = $.assetModelCompositeModels;
        this.assetModelDescription = $.assetModelDescription;
        this.assetModelHierarchies = $.assetModelHierarchies;
        this.assetModelName = $.assetModelName;
        this.assetModelProperties = $.assetModelProperties;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetModelArgs $;

        public Builder() {
            $ = new AssetModelArgs();
        }

        public Builder(AssetModelArgs defaults) {
            $ = new AssetModelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetModelCompositeModels The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
         * 
         * @return builder
         * 
         */
        public Builder assetModelCompositeModels(@Nullable Output<List<AssetModelCompositeModelArgs>> assetModelCompositeModels) {
            $.assetModelCompositeModels = assetModelCompositeModels;
            return this;
        }

        /**
         * @param assetModelCompositeModels The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
         * 
         * @return builder
         * 
         */
        public Builder assetModelCompositeModels(List<AssetModelCompositeModelArgs> assetModelCompositeModels) {
            return assetModelCompositeModels(Output.of(assetModelCompositeModels));
        }

        /**
         * @param assetModelCompositeModels The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
         * 
         * @return builder
         * 
         */
        public Builder assetModelCompositeModels(AssetModelCompositeModelArgs... assetModelCompositeModels) {
            return assetModelCompositeModels(List.of(assetModelCompositeModels));
        }

        /**
         * @param assetModelDescription A description for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelDescription(@Nullable Output<String> assetModelDescription) {
            $.assetModelDescription = assetModelDescription;
            return this;
        }

        /**
         * @param assetModelDescription A description for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelDescription(String assetModelDescription) {
            return assetModelDescription(Output.of(assetModelDescription));
        }

        /**
         * @param assetModelHierarchies The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelHierarchies(@Nullable Output<List<AssetModelHierarchyArgs>> assetModelHierarchies) {
            $.assetModelHierarchies = assetModelHierarchies;
            return this;
        }

        /**
         * @param assetModelHierarchies The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelHierarchies(List<AssetModelHierarchyArgs> assetModelHierarchies) {
            return assetModelHierarchies(Output.of(assetModelHierarchies));
        }

        /**
         * @param assetModelHierarchies The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelHierarchies(AssetModelHierarchyArgs... assetModelHierarchies) {
            return assetModelHierarchies(List.of(assetModelHierarchies));
        }

        /**
         * @param assetModelName A unique, friendly name for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelName(@Nullable Output<String> assetModelName) {
            $.assetModelName = assetModelName;
            return this;
        }

        /**
         * @param assetModelName A unique, friendly name for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelName(String assetModelName) {
            return assetModelName(Output.of(assetModelName));
        }

        /**
         * @param assetModelProperties The property definitions of the asset model. You can specify up to 200 properties per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelProperties(@Nullable Output<List<AssetModelPropertyArgs>> assetModelProperties) {
            $.assetModelProperties = assetModelProperties;
            return this;
        }

        /**
         * @param assetModelProperties The property definitions of the asset model. You can specify up to 200 properties per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelProperties(List<AssetModelPropertyArgs> assetModelProperties) {
            return assetModelProperties(Output.of(assetModelProperties));
        }

        /**
         * @param assetModelProperties The property definitions of the asset model. You can specify up to 200 properties per asset model.
         * 
         * @return builder
         * 
         */
        public Builder assetModelProperties(AssetModelPropertyArgs... assetModelProperties) {
            return assetModelProperties(List.of(assetModelProperties));
        }

        /**
         * @param tags A list of key-value pairs that contain metadata for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AssetModelTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of key-value pairs that contain metadata for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AssetModelTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of key-value pairs that contain metadata for the asset model.
         * 
         * @return builder
         * 
         */
        public Builder tags(AssetModelTagArgs... tags) {
            return tags(List.of(tags));
        }

        public AssetModelArgs build() {
            return $;
        }
    }

}
