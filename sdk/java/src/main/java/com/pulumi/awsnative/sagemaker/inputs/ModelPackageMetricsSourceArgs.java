// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a Metric Source Object.
 * 
 */
public final class ModelPackageMetricsSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageMetricsSourceArgs Empty = new ModelPackageMetricsSourceArgs();

    /**
     * The digest of the metric source.
     * 
     */
    @Import(name="contentDigest")
    private @Nullable Output<String> contentDigest;

    /**
     * @return The digest of the metric source.
     * 
     */
    public Optional<Output<String>> contentDigest() {
        return Optional.ofNullable(this.contentDigest);
    }

    /**
     * The type of content stored in the metric source.
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return The type of content stored in the metric source.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * The Amazon S3 URI for the metric source.
     * 
     */
    @Import(name="s3Uri", required=true)
    private Output<String> s3Uri;

    /**
     * @return The Amazon S3 URI for the metric source.
     * 
     */
    public Output<String> s3Uri() {
        return this.s3Uri;
    }

    private ModelPackageMetricsSourceArgs() {}

    private ModelPackageMetricsSourceArgs(ModelPackageMetricsSourceArgs $) {
        this.contentDigest = $.contentDigest;
        this.contentType = $.contentType;
        this.s3Uri = $.s3Uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageMetricsSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageMetricsSourceArgs $;

        public Builder() {
            $ = new ModelPackageMetricsSourceArgs();
        }

        public Builder(ModelPackageMetricsSourceArgs defaults) {
            $ = new ModelPackageMetricsSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentDigest The digest of the metric source.
         * 
         * @return builder
         * 
         */
        public Builder contentDigest(@Nullable Output<String> contentDigest) {
            $.contentDigest = contentDigest;
            return this;
        }

        /**
         * @param contentDigest The digest of the metric source.
         * 
         * @return builder
         * 
         */
        public Builder contentDigest(String contentDigest) {
            return contentDigest(Output.of(contentDigest));
        }

        /**
         * @param contentType The type of content stored in the metric source.
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The type of content stored in the metric source.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param s3Uri The Amazon S3 URI for the metric source.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(Output<String> s3Uri) {
            $.s3Uri = s3Uri;
            return this;
        }

        /**
         * @param s3Uri The Amazon S3 URI for the metric source.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(String s3Uri) {
            return s3Uri(Output.of(s3Uri));
        }

        public ModelPackageMetricsSourceArgs build() {
            $.contentType = Objects.requireNonNull($.contentType, "expected parameter 'contentType' to be non-null");
            $.s3Uri = Objects.requireNonNull($.s3Uri, "expected parameter 's3Uri' to be non-null");
            return $;
        }
    }

}
