// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker;

import com.pulumi.awsnative.sagemaker.inputs.ParallelismConfigurationPropertiesArgs;
import com.pulumi.awsnative.sagemaker.inputs.PipelineTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    @Import(name="parallelismConfiguration")
    private @Nullable Output<ParallelismConfigurationPropertiesArgs> parallelismConfiguration;

    public Optional<Output<ParallelismConfigurationPropertiesArgs>> parallelismConfiguration() {
        return Optional.ofNullable(this.parallelismConfiguration);
    }

    @Import(name="pipelineDefinition", required=true)
    private Output<Object> pipelineDefinition;

    public Output<Object> pipelineDefinition() {
        return this.pipelineDefinition;
    }

    /**
     * The description of the Pipeline.
     * 
     */
    @Import(name="pipelineDescription")
    private @Nullable Output<String> pipelineDescription;

    /**
     * @return The description of the Pipeline.
     * 
     */
    public Optional<Output<String>> pipelineDescription() {
        return Optional.ofNullable(this.pipelineDescription);
    }

    /**
     * The display name of the Pipeline.
     * 
     */
    @Import(name="pipelineDisplayName")
    private @Nullable Output<String> pipelineDisplayName;

    /**
     * @return The display name of the Pipeline.
     * 
     */
    public Optional<Output<String>> pipelineDisplayName() {
        return Optional.ofNullable(this.pipelineDisplayName);
    }

    /**
     * The name of the Pipeline.
     * 
     */
    @Import(name="pipelineName")
    private @Nullable Output<String> pipelineName;

    /**
     * @return The name of the Pipeline.
     * 
     */
    public Optional<Output<String>> pipelineName() {
        return Optional.ofNullable(this.pipelineName);
    }

    /**
     * Role Arn
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return Role Arn
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    @Import(name="tags")
    private @Nullable Output<List<PipelineTagArgs>> tags;

    public Optional<Output<List<PipelineTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PipelineArgs() {}

    private PipelineArgs(PipelineArgs $) {
        this.parallelismConfiguration = $.parallelismConfiguration;
        this.pipelineDefinition = $.pipelineDefinition;
        this.pipelineDescription = $.pipelineDescription;
        this.pipelineDisplayName = $.pipelineDisplayName;
        this.pipelineName = $.pipelineName;
        this.roleArn = $.roleArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineArgs $;

        public Builder() {
            $ = new PipelineArgs();
        }

        public Builder(PipelineArgs defaults) {
            $ = new PipelineArgs(Objects.requireNonNull(defaults));
        }

        public Builder parallelismConfiguration(@Nullable Output<ParallelismConfigurationPropertiesArgs> parallelismConfiguration) {
            $.parallelismConfiguration = parallelismConfiguration;
            return this;
        }

        public Builder parallelismConfiguration(ParallelismConfigurationPropertiesArgs parallelismConfiguration) {
            return parallelismConfiguration(Output.of(parallelismConfiguration));
        }

        public Builder pipelineDefinition(Output<Object> pipelineDefinition) {
            $.pipelineDefinition = pipelineDefinition;
            return this;
        }

        public Builder pipelineDefinition(Object pipelineDefinition) {
            return pipelineDefinition(Output.of(pipelineDefinition));
        }

        /**
         * @param pipelineDescription The description of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineDescription(@Nullable Output<String> pipelineDescription) {
            $.pipelineDescription = pipelineDescription;
            return this;
        }

        /**
         * @param pipelineDescription The description of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineDescription(String pipelineDescription) {
            return pipelineDescription(Output.of(pipelineDescription));
        }

        /**
         * @param pipelineDisplayName The display name of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineDisplayName(@Nullable Output<String> pipelineDisplayName) {
            $.pipelineDisplayName = pipelineDisplayName;
            return this;
        }

        /**
         * @param pipelineDisplayName The display name of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineDisplayName(String pipelineDisplayName) {
            return pipelineDisplayName(Output.of(pipelineDisplayName));
        }

        /**
         * @param pipelineName The name of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(@Nullable Output<String> pipelineName) {
            $.pipelineName = pipelineName;
            return this;
        }

        /**
         * @param pipelineName The name of the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(String pipelineName) {
            return pipelineName(Output.of(pipelineName));
        }

        /**
         * @param roleArn Role Arn
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Role Arn
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder tags(@Nullable Output<List<PipelineTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<PipelineTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(PipelineTagArgs... tags) {
            return tags(List.of(tags));
        }

        public PipelineArgs build() {
            $.pipelineDefinition = Objects.requireNonNull($.pipelineDefinition, "expected parameter 'pipelineDefinition' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
