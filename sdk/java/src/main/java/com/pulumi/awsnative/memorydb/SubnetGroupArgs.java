// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.memorydb;

import com.pulumi.awsnative.memorydb.inputs.SubnetGroupTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetGroupArgs Empty = new SubnetGroupArgs();

    /**
     * An optional description of the subnet group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of the subnet group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
     * 
     */
    @Import(name="subnetGroupName")
    private @Nullable Output<String> subnetGroupName;

    /**
     * @return The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
     * 
     */
    public Optional<Output<String>> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }

    /**
     * A list of VPC subnet IDs for the subnet group.
     * 
     */
    @Import(name="subnetIds", required=true)
    private Output<List<String>> subnetIds;

    /**
     * @return A list of VPC subnet IDs for the subnet group.
     * 
     */
    public Output<List<String>> subnetIds() {
        return this.subnetIds;
    }

    /**
     * An array of key-value pairs to apply to this subnet group.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<SubnetGroupTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this subnet group.
     * 
     */
    public Optional<Output<List<SubnetGroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SubnetGroupArgs() {}

    private SubnetGroupArgs(SubnetGroupArgs $) {
        this.description = $.description;
        this.subnetGroupName = $.subnetGroupName;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetGroupArgs $;

        public Builder() {
            $ = new SubnetGroupArgs();
        }

        public Builder(SubnetGroupArgs defaults) {
            $ = new SubnetGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of the subnet group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of the subnet group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param subnetGroupName The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
         * 
         * @return builder
         * 
         */
        public Builder subnetGroupName(@Nullable Output<String> subnetGroupName) {
            $.subnetGroupName = subnetGroupName;
            return this;
        }

        /**
         * @param subnetGroupName The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
         * 
         * @return builder
         * 
         */
        public Builder subnetGroupName(String subnetGroupName) {
            return subnetGroupName(Output.of(subnetGroupName));
        }

        /**
         * @param subnetIds A list of VPC subnet IDs for the subnet group.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds A list of VPC subnet IDs for the subnet group.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param subnetIds A list of VPC subnet IDs for the subnet group.
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        /**
         * @param tags An array of key-value pairs to apply to this subnet group.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<SubnetGroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this subnet group.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<SubnetGroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this subnet group.
         * 
         * @return builder
         * 
         */
        public Builder tags(SubnetGroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        public SubnetGroupArgs build() {
            $.subnetIds = Objects.requireNonNull($.subnetIds, "expected parameter 'subnetIds' to be non-null");
            return $;
        }
    }

}
