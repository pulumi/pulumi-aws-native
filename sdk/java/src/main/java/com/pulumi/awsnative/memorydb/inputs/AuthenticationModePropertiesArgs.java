// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.memorydb.inputs;

import com.pulumi.awsnative.memorydb.enums.UserAuthenticationModePropertiesType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticationModePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticationModePropertiesArgs Empty = new AuthenticationModePropertiesArgs();

    /**
     * Passwords used for this user account. You can create up to two passwords for each user.
     * 
     */
    @Import(name="passwords")
    private @Nullable Output<List<String>> passwords;

    /**
     * @return Passwords used for this user account. You can create up to two passwords for each user.
     * 
     */
    public Optional<Output<List<String>>> passwords() {
        return Optional.ofNullable(this.passwords);
    }

    /**
     * Type of authentication strategy for this user.
     * 
     */
    @Import(name="type")
    private @Nullable Output<UserAuthenticationModePropertiesType> type;

    /**
     * @return Type of authentication strategy for this user.
     * 
     */
    public Optional<Output<UserAuthenticationModePropertiesType>> type() {
        return Optional.ofNullable(this.type);
    }

    private AuthenticationModePropertiesArgs() {}

    private AuthenticationModePropertiesArgs(AuthenticationModePropertiesArgs $) {
        this.passwords = $.passwords;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticationModePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticationModePropertiesArgs $;

        public Builder() {
            $ = new AuthenticationModePropertiesArgs();
        }

        public Builder(AuthenticationModePropertiesArgs defaults) {
            $ = new AuthenticationModePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwords Passwords used for this user account. You can create up to two passwords for each user.
         * 
         * @return builder
         * 
         */
        public Builder passwords(@Nullable Output<List<String>> passwords) {
            $.passwords = passwords;
            return this;
        }

        /**
         * @param passwords Passwords used for this user account. You can create up to two passwords for each user.
         * 
         * @return builder
         * 
         */
        public Builder passwords(List<String> passwords) {
            return passwords(Output.of(passwords));
        }

        /**
         * @param passwords Passwords used for this user account. You can create up to two passwords for each user.
         * 
         * @return builder
         * 
         */
        public Builder passwords(String... passwords) {
            return passwords(List.of(passwords));
        }

        /**
         * @param type Type of authentication strategy for this user.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<UserAuthenticationModePropertiesType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of authentication strategy for this user.
         * 
         * @return builder
         * 
         */
        public Builder type(UserAuthenticationModePropertiesType type) {
            return type(Output.of(type));
        }

        public AuthenticationModePropertiesArgs build() {
            return $;
        }
    }

}
