// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.connect;

import com.pulumi.awsnative.connect.enums.ContactFlowState;
import com.pulumi.awsnative.connect.enums.ContactFlowType;
import com.pulumi.awsnative.connect.inputs.ContactFlowTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactFlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactFlowArgs Empty = new ContactFlowArgs();

    /**
     * The content of the contact flow in JSON format.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The content of the contact flow in JSON format.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * The description of the contact flow.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the contact flow.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The identifier of the Amazon Connect instance (ARN).
     * 
     */
    @Import(name="instanceArn", required=true)
    private Output<String> instanceArn;

    /**
     * @return The identifier of the Amazon Connect instance (ARN).
     * 
     */
    public Output<String> instanceArn() {
        return this.instanceArn;
    }

    /**
     * The name of the contact flow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the contact flow.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The state of the contact flow.
     * 
     */
    @Import(name="state")
    private @Nullable Output<ContactFlowState> state;

    /**
     * @return The state of the contact flow.
     * 
     */
    public Optional<Output<ContactFlowState>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * One or more tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ContactFlowTagArgs>> tags;

    /**
     * @return One or more tags.
     * 
     */
    public Optional<Output<List<ContactFlowTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of the contact flow.
     * 
     */
    @Import(name="type")
    private @Nullable Output<ContactFlowType> type;

    /**
     * @return The type of the contact flow.
     * 
     */
    public Optional<Output<ContactFlowType>> type() {
        return Optional.ofNullable(this.type);
    }

    private ContactFlowArgs() {}

    private ContactFlowArgs(ContactFlowArgs $) {
        this.content = $.content;
        this.description = $.description;
        this.instanceArn = $.instanceArn;
        this.name = $.name;
        this.state = $.state;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactFlowArgs $;

        public Builder() {
            $ = new ContactFlowArgs();
        }

        public Builder(ContactFlowArgs defaults) {
            $ = new ContactFlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The content of the contact flow in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content of the contact flow in JSON format.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param description The description of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceArn The identifier of the Amazon Connect instance (ARN).
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(Output<String> instanceArn) {
            $.instanceArn = instanceArn;
            return this;
        }

        /**
         * @param instanceArn The identifier of the Amazon Connect instance (ARN).
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(String instanceArn) {
            return instanceArn(Output.of(instanceArn));
        }

        /**
         * @param name The name of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state The state of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<ContactFlowState> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder state(ContactFlowState state) {
            return state(Output.of(state));
        }

        /**
         * @param tags One or more tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ContactFlowTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ContactFlowTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags One or more tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(ContactFlowTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The type of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<ContactFlowType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the contact flow.
         * 
         * @return builder
         * 
         */
        public Builder type(ContactFlowType type) {
            return type(Output.of(type));
        }

        public ContactFlowArgs build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.instanceArn = Objects.requireNonNull($.instanceArn, "expected parameter 'instanceArn' to be non-null");
            return $;
        }
    }

}
