// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iottwinmaker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntityArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntityArgs Empty = new EntityArgs();

    /**
     * A map that sets information about a component type.
     * 
     */
    @Import(name="components")
    private @Nullable Output<Object> components;

    /**
     * @return A map that sets information about a component type.
     * 
     */
    public Optional<Output<Object>> components() {
        return Optional.ofNullable(this.components);
    }

    /**
     * The description of the entity.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the entity.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the entity.
     * 
     */
    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    /**
     * @return The ID of the entity.
     * 
     */
    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    /**
     * The name of the entity.
     * 
     */
    @Import(name="entityName")
    private @Nullable Output<String> entityName;

    /**
     * @return The name of the entity.
     * 
     */
    public Optional<Output<String>> entityName() {
        return Optional.ofNullable(this.entityName);
    }

    /**
     * The ID of the parent entity.
     * 
     */
    @Import(name="parentEntityId")
    private @Nullable Output<String> parentEntityId;

    /**
     * @return The ID of the parent entity.
     * 
     */
    public Optional<Output<String>> parentEntityId() {
        return Optional.ofNullable(this.parentEntityId);
    }

    /**
     * A key-value pair to associate with a resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return A key-value pair to associate with a resource.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private EntityArgs() {}

    private EntityArgs(EntityArgs $) {
        this.components = $.components;
        this.description = $.description;
        this.entityId = $.entityId;
        this.entityName = $.entityName;
        this.parentEntityId = $.parentEntityId;
        this.tags = $.tags;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityArgs $;

        public Builder() {
            $ = new EntityArgs();
        }

        public Builder(EntityArgs defaults) {
            $ = new EntityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param components A map that sets information about a component type.
         * 
         * @return builder
         * 
         */
        public Builder components(@Nullable Output<Object> components) {
            $.components = components;
            return this;
        }

        /**
         * @param components A map that sets information about a component type.
         * 
         * @return builder
         * 
         */
        public Builder components(Object components) {
            return components(Output.of(components));
        }

        /**
         * @param description The description of the entity.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the entity.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entityId The ID of the entity.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId The ID of the entity.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        /**
         * @param entityName The name of the entity.
         * 
         * @return builder
         * 
         */
        public Builder entityName(@Nullable Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The name of the entity.
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param parentEntityId The ID of the parent entity.
         * 
         * @return builder
         * 
         */
        public Builder parentEntityId(@Nullable Output<String> parentEntityId) {
            $.parentEntityId = parentEntityId;
            return this;
        }

        /**
         * @param parentEntityId The ID of the parent entity.
         * 
         * @return builder
         * 
         */
        public Builder parentEntityId(String parentEntityId) {
            return parentEntityId(Output.of(parentEntityId));
        }

        /**
         * @param tags A key-value pair to associate with a resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A key-value pair to associate with a resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public EntityArgs build() {
            $.workspaceId = Objects.requireNonNull($.workspaceId, "expected parameter 'workspaceId' to be non-null");
            return $;
        }
    }

}
