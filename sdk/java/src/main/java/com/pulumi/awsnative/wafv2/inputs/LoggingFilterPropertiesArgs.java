// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.LoggingConfigurationLoggingFilterPropertiesDefaultBehavior;
import com.pulumi.awsnative.wafv2.inputs.LoggingConfigurationFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


/**
 * Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
 * 
 */
public final class LoggingFilterPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingFilterPropertiesArgs Empty = new LoggingFilterPropertiesArgs();

    /**
     * Default handling for logs that don&#39;t match any of the specified filtering conditions.
     * 
     */
    @Import(name="defaultBehavior", required=true)
    private Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior;

    /**
     * @return Default handling for logs that don&#39;t match any of the specified filtering conditions.
     * 
     */
    public Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior() {
        return this.defaultBehavior;
    }

    /**
     * The filters that you want to apply to the logs.
     * 
     */
    @Import(name="filters", required=true)
    private Output<List<LoggingConfigurationFilterArgs>> filters;

    /**
     * @return The filters that you want to apply to the logs.
     * 
     */
    public Output<List<LoggingConfigurationFilterArgs>> filters() {
        return this.filters;
    }

    private LoggingFilterPropertiesArgs() {}

    private LoggingFilterPropertiesArgs(LoggingFilterPropertiesArgs $) {
        this.defaultBehavior = $.defaultBehavior;
        this.filters = $.filters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingFilterPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingFilterPropertiesArgs $;

        public Builder() {
            $ = new LoggingFilterPropertiesArgs();
        }

        public Builder(LoggingFilterPropertiesArgs defaults) {
            $ = new LoggingFilterPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultBehavior Default handling for logs that don&#39;t match any of the specified filtering conditions.
         * 
         * @return builder
         * 
         */
        public Builder defaultBehavior(Output<LoggingConfigurationLoggingFilterPropertiesDefaultBehavior> defaultBehavior) {
            $.defaultBehavior = defaultBehavior;
            return this;
        }

        /**
         * @param defaultBehavior Default handling for logs that don&#39;t match any of the specified filtering conditions.
         * 
         * @return builder
         * 
         */
        public Builder defaultBehavior(LoggingConfigurationLoggingFilterPropertiesDefaultBehavior defaultBehavior) {
            return defaultBehavior(Output.of(defaultBehavior));
        }

        /**
         * @param filters The filters that you want to apply to the logs.
         * 
         * @return builder
         * 
         */
        public Builder filters(Output<List<LoggingConfigurationFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The filters that you want to apply to the logs.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<LoggingConfigurationFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The filters that you want to apply to the logs.
         * 
         * @return builder
         * 
         */
        public Builder filters(LoggingConfigurationFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public LoggingFilterPropertiesArgs build() {
            $.defaultBehavior = Objects.requireNonNull($.defaultBehavior, "expected parameter 'defaultBehavior' to be non-null");
            $.filters = Objects.requireNonNull($.filters, "expected parameter 'filters' to be non-null");
            return $;
        }
    }

}
