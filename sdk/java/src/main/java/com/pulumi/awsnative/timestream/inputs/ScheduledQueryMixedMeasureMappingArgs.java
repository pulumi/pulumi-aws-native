// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.timestream.inputs;

import com.pulumi.awsnative.timestream.enums.ScheduledQueryMixedMeasureMappingMeasureValueType;
import com.pulumi.awsnative.timestream.inputs.ScheduledQueryMultiMeasureAttributeMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
 * 
 */
public final class ScheduledQueryMixedMeasureMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledQueryMixedMeasureMappingArgs Empty = new ScheduledQueryMixedMeasureMappingArgs();

    @Import(name="measureName")
    private @Nullable Output<String> measureName;

    public Optional<Output<String>> measureName() {
        return Optional.ofNullable(this.measureName);
    }

    @Import(name="measureValueType", required=true)
    private Output<ScheduledQueryMixedMeasureMappingMeasureValueType> measureValueType;

    public Output<ScheduledQueryMixedMeasureMappingMeasureValueType> measureValueType() {
        return this.measureValueType;
    }

    @Import(name="multiMeasureAttributeMappings")
    private @Nullable Output<List<ScheduledQueryMultiMeasureAttributeMappingArgs>> multiMeasureAttributeMappings;

    public Optional<Output<List<ScheduledQueryMultiMeasureAttributeMappingArgs>>> multiMeasureAttributeMappings() {
        return Optional.ofNullable(this.multiMeasureAttributeMappings);
    }

    @Import(name="sourceColumn")
    private @Nullable Output<String> sourceColumn;

    public Optional<Output<String>> sourceColumn() {
        return Optional.ofNullable(this.sourceColumn);
    }

    @Import(name="targetMeasureName")
    private @Nullable Output<String> targetMeasureName;

    public Optional<Output<String>> targetMeasureName() {
        return Optional.ofNullable(this.targetMeasureName);
    }

    private ScheduledQueryMixedMeasureMappingArgs() {}

    private ScheduledQueryMixedMeasureMappingArgs(ScheduledQueryMixedMeasureMappingArgs $) {
        this.measureName = $.measureName;
        this.measureValueType = $.measureValueType;
        this.multiMeasureAttributeMappings = $.multiMeasureAttributeMappings;
        this.sourceColumn = $.sourceColumn;
        this.targetMeasureName = $.targetMeasureName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledQueryMixedMeasureMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledQueryMixedMeasureMappingArgs $;

        public Builder() {
            $ = new ScheduledQueryMixedMeasureMappingArgs();
        }

        public Builder(ScheduledQueryMixedMeasureMappingArgs defaults) {
            $ = new ScheduledQueryMixedMeasureMappingArgs(Objects.requireNonNull(defaults));
        }

        public Builder measureName(@Nullable Output<String> measureName) {
            $.measureName = measureName;
            return this;
        }

        public Builder measureName(String measureName) {
            return measureName(Output.of(measureName));
        }

        public Builder measureValueType(Output<ScheduledQueryMixedMeasureMappingMeasureValueType> measureValueType) {
            $.measureValueType = measureValueType;
            return this;
        }

        public Builder measureValueType(ScheduledQueryMixedMeasureMappingMeasureValueType measureValueType) {
            return measureValueType(Output.of(measureValueType));
        }

        public Builder multiMeasureAttributeMappings(@Nullable Output<List<ScheduledQueryMultiMeasureAttributeMappingArgs>> multiMeasureAttributeMappings) {
            $.multiMeasureAttributeMappings = multiMeasureAttributeMappings;
            return this;
        }

        public Builder multiMeasureAttributeMappings(List<ScheduledQueryMultiMeasureAttributeMappingArgs> multiMeasureAttributeMappings) {
            return multiMeasureAttributeMappings(Output.of(multiMeasureAttributeMappings));
        }

        public Builder multiMeasureAttributeMappings(ScheduledQueryMultiMeasureAttributeMappingArgs... multiMeasureAttributeMappings) {
            return multiMeasureAttributeMappings(List.of(multiMeasureAttributeMappings));
        }

        public Builder sourceColumn(@Nullable Output<String> sourceColumn) {
            $.sourceColumn = sourceColumn;
            return this;
        }

        public Builder sourceColumn(String sourceColumn) {
            return sourceColumn(Output.of(sourceColumn));
        }

        public Builder targetMeasureName(@Nullable Output<String> targetMeasureName) {
            $.targetMeasureName = targetMeasureName;
            return this;
        }

        public Builder targetMeasureName(String targetMeasureName) {
            return targetMeasureName(Output.of(targetMeasureName));
        }

        public ScheduledQueryMixedMeasureMappingArgs build() {
            $.measureValueType = Objects.requireNonNull($.measureValueType, "expected parameter 'measureValueType' to be non-null");
            return $;
        }
    }

}
