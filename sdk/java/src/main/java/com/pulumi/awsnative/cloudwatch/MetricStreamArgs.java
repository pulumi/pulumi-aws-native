// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudwatch;

import com.pulumi.awsnative.cloudwatch.inputs.MetricStreamFilterArgs;
import com.pulumi.awsnative.cloudwatch.inputs.MetricStreamStatisticsConfigurationArgs;
import com.pulumi.awsnative.cloudwatch.inputs.MetricStreamTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricStreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricStreamArgs Empty = new MetricStreamArgs();

    /**
     * Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @Import(name="excludeFilters")
    private @Nullable Output<List<MetricStreamFilterArgs>> excludeFilters;

    /**
     * @return Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    public Optional<Output<List<MetricStreamFilterArgs>>> excludeFilters() {
        return Optional.ofNullable(this.excludeFilters);
    }

    /**
     * The ARN of the Kinesis Firehose where to stream the data.
     * 
     */
    @Import(name="firehoseArn", required=true)
    private Output<String> firehoseArn;

    /**
     * @return The ARN of the Kinesis Firehose where to stream the data.
     * 
     */
    public Output<String> firehoseArn() {
        return this.firehoseArn;
    }

    /**
     * Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    @Import(name="includeFilters")
    private @Nullable Output<List<MetricStreamFilterArgs>> includeFilters;

    /**
     * @return Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
     * 
     */
    public Optional<Output<List<MetricStreamFilterArgs>>> includeFilters() {
        return Optional.ofNullable(this.includeFilters);
    }

    /**
     * Name of the metric stream.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the metric stream.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The output format of the data streamed to the Kinesis Firehose.
     * 
     */
    @Import(name="outputFormat", required=true)
    private Output<String> outputFormat;

    /**
     * @return The output format of the data streamed to the Kinesis Firehose.
     * 
     */
    public Output<String> outputFormat() {
        return this.outputFormat;
    }

    /**
     * The ARN of the role that provides access to the Kinesis Firehose.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The ARN of the role that provides access to the Kinesis Firehose.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
     * 
     */
    @Import(name="statisticsConfigurations")
    private @Nullable Output<List<MetricStreamStatisticsConfigurationArgs>> statisticsConfigurations;

    /**
     * @return By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
     * 
     */
    public Optional<Output<List<MetricStreamStatisticsConfigurationArgs>>> statisticsConfigurations() {
        return Optional.ofNullable(this.statisticsConfigurations);
    }

    /**
     * A set of tags to assign to the delivery stream.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<MetricStreamTagArgs>> tags;

    /**
     * @return A set of tags to assign to the delivery stream.
     * 
     */
    public Optional<Output<List<MetricStreamTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private MetricStreamArgs() {}

    private MetricStreamArgs(MetricStreamArgs $) {
        this.excludeFilters = $.excludeFilters;
        this.firehoseArn = $.firehoseArn;
        this.includeFilters = $.includeFilters;
        this.name = $.name;
        this.outputFormat = $.outputFormat;
        this.roleArn = $.roleArn;
        this.statisticsConfigurations = $.statisticsConfigurations;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricStreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricStreamArgs $;

        public Builder() {
            $ = new MetricStreamArgs();
        }

        public Builder(MetricStreamArgs defaults) {
            $ = new MetricStreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludeFilters Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder excludeFilters(@Nullable Output<List<MetricStreamFilterArgs>> excludeFilters) {
            $.excludeFilters = excludeFilters;
            return this;
        }

        /**
         * @param excludeFilters Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder excludeFilters(List<MetricStreamFilterArgs> excludeFilters) {
            return excludeFilters(Output.of(excludeFilters));
        }

        /**
         * @param excludeFilters Define which metrics will be not streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder excludeFilters(MetricStreamFilterArgs... excludeFilters) {
            return excludeFilters(List.of(excludeFilters));
        }

        /**
         * @param firehoseArn The ARN of the Kinesis Firehose where to stream the data.
         * 
         * @return builder
         * 
         */
        public Builder firehoseArn(Output<String> firehoseArn) {
            $.firehoseArn = firehoseArn;
            return this;
        }

        /**
         * @param firehoseArn The ARN of the Kinesis Firehose where to stream the data.
         * 
         * @return builder
         * 
         */
        public Builder firehoseArn(String firehoseArn) {
            return firehoseArn(Output.of(firehoseArn));
        }

        /**
         * @param includeFilters Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder includeFilters(@Nullable Output<List<MetricStreamFilterArgs>> includeFilters) {
            $.includeFilters = includeFilters;
            return this;
        }

        /**
         * @param includeFilters Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder includeFilters(List<MetricStreamFilterArgs> includeFilters) {
            return includeFilters(Output.of(includeFilters));
        }

        /**
         * @param includeFilters Define which metrics will be streamed. Metrics matched by multiple instances of MetricStreamFilter are joined with an OR operation by default. If both IncludeFilters and ExcludeFilters are omitted, all metrics in the account will be streamed. IncludeFilters and ExcludeFilters are mutually exclusive. Default to null.
         * 
         * @return builder
         * 
         */
        public Builder includeFilters(MetricStreamFilterArgs... includeFilters) {
            return includeFilters(List.of(includeFilters));
        }

        /**
         * @param name Name of the metric stream.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the metric stream.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outputFormat The output format of the data streamed to the Kinesis Firehose.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(Output<String> outputFormat) {
            $.outputFormat = outputFormat;
            return this;
        }

        /**
         * @param outputFormat The output format of the data streamed to the Kinesis Firehose.
         * 
         * @return builder
         * 
         */
        public Builder outputFormat(String outputFormat) {
            return outputFormat(Output.of(outputFormat));
        }

        /**
         * @param roleArn The ARN of the role that provides access to the Kinesis Firehose.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The ARN of the role that provides access to the Kinesis Firehose.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param statisticsConfigurations By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
         * 
         * @return builder
         * 
         */
        public Builder statisticsConfigurations(@Nullable Output<List<MetricStreamStatisticsConfigurationArgs>> statisticsConfigurations) {
            $.statisticsConfigurations = statisticsConfigurations;
            return this;
        }

        /**
         * @param statisticsConfigurations By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
         * 
         * @return builder
         * 
         */
        public Builder statisticsConfigurations(List<MetricStreamStatisticsConfigurationArgs> statisticsConfigurations) {
            return statisticsConfigurations(Output.of(statisticsConfigurations));
        }

        /**
         * @param statisticsConfigurations By default, a metric stream always sends the MAX, MIN, SUM, and SAMPLECOUNT statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.
         * 
         * @return builder
         * 
         */
        public Builder statisticsConfigurations(MetricStreamStatisticsConfigurationArgs... statisticsConfigurations) {
            return statisticsConfigurations(List.of(statisticsConfigurations));
        }

        /**
         * @param tags A set of tags to assign to the delivery stream.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<MetricStreamTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags to assign to the delivery stream.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<MetricStreamTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags to assign to the delivery stream.
         * 
         * @return builder
         * 
         */
        public Builder tags(MetricStreamTagArgs... tags) {
            return tags(List.of(tags));
        }

        public MetricStreamArgs build() {
            $.firehoseArn = Objects.requireNonNull($.firehoseArn, "expected parameter 'firehoseArn' to be non-null");
            $.outputFormat = Objects.requireNonNull($.outputFormat, "expected parameter 'outputFormat' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
