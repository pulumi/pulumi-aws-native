// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sso;

import com.pulumi.awsnative.sso.inputs.PermissionSetTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionSetArgs Empty = new PermissionSetArgs();

    /**
     * The permission set description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The permission set description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The inline policy to put in permission set.
     * 
     */
    @Import(name="inlinePolicy")
    private @Nullable Output<Object> inlinePolicy;

    /**
     * @return The inline policy to put in permission set.
     * 
     */
    public Optional<Output<Object>> inlinePolicy() {
        return Optional.ofNullable(this.inlinePolicy);
    }

    /**
     * The sso instance arn that the permission set is owned.
     * 
     */
    @Import(name="instanceArn", required=true)
    private Output<String> instanceArn;

    /**
     * @return The sso instance arn that the permission set is owned.
     * 
     */
    public Output<String> instanceArn() {
        return this.instanceArn;
    }

    @Import(name="managedPolicies")
    private @Nullable Output<List<String>> managedPolicies;

    public Optional<Output<List<String>>> managedPolicies() {
        return Optional.ofNullable(this.managedPolicies);
    }

    /**
     * The name you want to assign to this permission set.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name you want to assign to this permission set.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The relay state URL that redirect links to any service in the AWS Management Console.
     * 
     */
    @Import(name="relayStateType")
    private @Nullable Output<String> relayStateType;

    /**
     * @return The relay state URL that redirect links to any service in the AWS Management Console.
     * 
     */
    public Optional<Output<String>> relayStateType() {
        return Optional.ofNullable(this.relayStateType);
    }

    /**
     * The length of time that a user can be signed in to an AWS account.
     * 
     */
    @Import(name="sessionDuration")
    private @Nullable Output<String> sessionDuration;

    /**
     * @return The length of time that a user can be signed in to an AWS account.
     * 
     */
    public Optional<Output<String>> sessionDuration() {
        return Optional.ofNullable(this.sessionDuration);
    }

    @Import(name="tags")
    private @Nullable Output<List<PermissionSetTagArgs>> tags;

    public Optional<Output<List<PermissionSetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PermissionSetArgs() {}

    private PermissionSetArgs(PermissionSetArgs $) {
        this.description = $.description;
        this.inlinePolicy = $.inlinePolicy;
        this.instanceArn = $.instanceArn;
        this.managedPolicies = $.managedPolicies;
        this.name = $.name;
        this.relayStateType = $.relayStateType;
        this.sessionDuration = $.sessionDuration;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionSetArgs $;

        public Builder() {
            $ = new PermissionSetArgs();
        }

        public Builder(PermissionSetArgs defaults) {
            $ = new PermissionSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The permission set description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The permission set description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param inlinePolicy The inline policy to put in permission set.
         * 
         * @return builder
         * 
         */
        public Builder inlinePolicy(@Nullable Output<Object> inlinePolicy) {
            $.inlinePolicy = inlinePolicy;
            return this;
        }

        /**
         * @param inlinePolicy The inline policy to put in permission set.
         * 
         * @return builder
         * 
         */
        public Builder inlinePolicy(Object inlinePolicy) {
            return inlinePolicy(Output.of(inlinePolicy));
        }

        /**
         * @param instanceArn The sso instance arn that the permission set is owned.
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(Output<String> instanceArn) {
            $.instanceArn = instanceArn;
            return this;
        }

        /**
         * @param instanceArn The sso instance arn that the permission set is owned.
         * 
         * @return builder
         * 
         */
        public Builder instanceArn(String instanceArn) {
            return instanceArn(Output.of(instanceArn));
        }

        public Builder managedPolicies(@Nullable Output<List<String>> managedPolicies) {
            $.managedPolicies = managedPolicies;
            return this;
        }

        public Builder managedPolicies(List<String> managedPolicies) {
            return managedPolicies(Output.of(managedPolicies));
        }

        public Builder managedPolicies(String... managedPolicies) {
            return managedPolicies(List.of(managedPolicies));
        }

        /**
         * @param name The name you want to assign to this permission set.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name you want to assign to this permission set.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param relayStateType The relay state URL that redirect links to any service in the AWS Management Console.
         * 
         * @return builder
         * 
         */
        public Builder relayStateType(@Nullable Output<String> relayStateType) {
            $.relayStateType = relayStateType;
            return this;
        }

        /**
         * @param relayStateType The relay state URL that redirect links to any service in the AWS Management Console.
         * 
         * @return builder
         * 
         */
        public Builder relayStateType(String relayStateType) {
            return relayStateType(Output.of(relayStateType));
        }

        /**
         * @param sessionDuration The length of time that a user can be signed in to an AWS account.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(@Nullable Output<String> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration The length of time that a user can be signed in to an AWS account.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(String sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        public Builder tags(@Nullable Output<List<PermissionSetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<PermissionSetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(PermissionSetTagArgs... tags) {
            return tags(List.of(tags));
        }

        public PermissionSetArgs build() {
            $.instanceArn = Objects.requireNonNull($.instanceArn, "expected parameter 'instanceArn' to be non-null");
            return $;
        }
    }

}
