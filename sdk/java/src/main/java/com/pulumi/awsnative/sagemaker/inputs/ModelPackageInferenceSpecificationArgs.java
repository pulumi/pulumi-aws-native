// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.inputs.ModelPackageContainerDefinitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details about inference jobs that can be run with models based on this model package.
 * 
 */
public final class ModelPackageInferenceSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageInferenceSpecificationArgs Empty = new ModelPackageInferenceSpecificationArgs();

    /**
     * The Amazon ECR registry path of the Docker image that contains the inference code.
     * 
     */
    @Import(name="containers", required=true)
    private Output<List<ModelPackageContainerDefinitionArgs>> containers;

    /**
     * @return The Amazon ECR registry path of the Docker image that contains the inference code.
     * 
     */
    public Output<List<ModelPackageContainerDefinitionArgs>> containers() {
        return this.containers;
    }

    /**
     * The supported MIME types for the input data.
     * 
     */
    @Import(name="supportedContentTypes", required=true)
    private Output<List<String>> supportedContentTypes;

    /**
     * @return The supported MIME types for the input data.
     * 
     */
    public Output<List<String>> supportedContentTypes() {
        return this.supportedContentTypes;
    }

    /**
     * A list of the instance types that are used to generate inferences in real-time
     * 
     */
    @Import(name="supportedRealtimeInferenceInstanceTypes")
    private @Nullable Output<List<String>> supportedRealtimeInferenceInstanceTypes;

    /**
     * @return A list of the instance types that are used to generate inferences in real-time
     * 
     */
    public Optional<Output<List<String>>> supportedRealtimeInferenceInstanceTypes() {
        return Optional.ofNullable(this.supportedRealtimeInferenceInstanceTypes);
    }

    /**
     * The supported MIME types for the output data.
     * 
     */
    @Import(name="supportedResponseMIMETypes", required=true)
    private Output<List<String>> supportedResponseMIMETypes;

    /**
     * @return The supported MIME types for the output data.
     * 
     */
    public Output<List<String>> supportedResponseMIMETypes() {
        return this.supportedResponseMIMETypes;
    }

    /**
     * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
     * 
     */
    @Import(name="supportedTransformInstanceTypes")
    private @Nullable Output<List<String>> supportedTransformInstanceTypes;

    /**
     * @return A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
     * 
     */
    public Optional<Output<List<String>>> supportedTransformInstanceTypes() {
        return Optional.ofNullable(this.supportedTransformInstanceTypes);
    }

    private ModelPackageInferenceSpecificationArgs() {}

    private ModelPackageInferenceSpecificationArgs(ModelPackageInferenceSpecificationArgs $) {
        this.containers = $.containers;
        this.supportedContentTypes = $.supportedContentTypes;
        this.supportedRealtimeInferenceInstanceTypes = $.supportedRealtimeInferenceInstanceTypes;
        this.supportedResponseMIMETypes = $.supportedResponseMIMETypes;
        this.supportedTransformInstanceTypes = $.supportedTransformInstanceTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageInferenceSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageInferenceSpecificationArgs $;

        public Builder() {
            $ = new ModelPackageInferenceSpecificationArgs();
        }

        public Builder(ModelPackageInferenceSpecificationArgs defaults) {
            $ = new ModelPackageInferenceSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containers The Amazon ECR registry path of the Docker image that contains the inference code.
         * 
         * @return builder
         * 
         */
        public Builder containers(Output<List<ModelPackageContainerDefinitionArgs>> containers) {
            $.containers = containers;
            return this;
        }

        /**
         * @param containers The Amazon ECR registry path of the Docker image that contains the inference code.
         * 
         * @return builder
         * 
         */
        public Builder containers(List<ModelPackageContainerDefinitionArgs> containers) {
            return containers(Output.of(containers));
        }

        /**
         * @param containers The Amazon ECR registry path of the Docker image that contains the inference code.
         * 
         * @return builder
         * 
         */
        public Builder containers(ModelPackageContainerDefinitionArgs... containers) {
            return containers(List.of(containers));
        }

        /**
         * @param supportedContentTypes The supported MIME types for the input data.
         * 
         * @return builder
         * 
         */
        public Builder supportedContentTypes(Output<List<String>> supportedContentTypes) {
            $.supportedContentTypes = supportedContentTypes;
            return this;
        }

        /**
         * @param supportedContentTypes The supported MIME types for the input data.
         * 
         * @return builder
         * 
         */
        public Builder supportedContentTypes(List<String> supportedContentTypes) {
            return supportedContentTypes(Output.of(supportedContentTypes));
        }

        /**
         * @param supportedContentTypes The supported MIME types for the input data.
         * 
         * @return builder
         * 
         */
        public Builder supportedContentTypes(String... supportedContentTypes) {
            return supportedContentTypes(List.of(supportedContentTypes));
        }

        /**
         * @param supportedRealtimeInferenceInstanceTypes A list of the instance types that are used to generate inferences in real-time
         * 
         * @return builder
         * 
         */
        public Builder supportedRealtimeInferenceInstanceTypes(@Nullable Output<List<String>> supportedRealtimeInferenceInstanceTypes) {
            $.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes;
            return this;
        }

        /**
         * @param supportedRealtimeInferenceInstanceTypes A list of the instance types that are used to generate inferences in real-time
         * 
         * @return builder
         * 
         */
        public Builder supportedRealtimeInferenceInstanceTypes(List<String> supportedRealtimeInferenceInstanceTypes) {
            return supportedRealtimeInferenceInstanceTypes(Output.of(supportedRealtimeInferenceInstanceTypes));
        }

        /**
         * @param supportedRealtimeInferenceInstanceTypes A list of the instance types that are used to generate inferences in real-time
         * 
         * @return builder
         * 
         */
        public Builder supportedRealtimeInferenceInstanceTypes(String... supportedRealtimeInferenceInstanceTypes) {
            return supportedRealtimeInferenceInstanceTypes(List.of(supportedRealtimeInferenceInstanceTypes));
        }

        /**
         * @param supportedResponseMIMETypes The supported MIME types for the output data.
         * 
         * @return builder
         * 
         */
        public Builder supportedResponseMIMETypes(Output<List<String>> supportedResponseMIMETypes) {
            $.supportedResponseMIMETypes = supportedResponseMIMETypes;
            return this;
        }

        /**
         * @param supportedResponseMIMETypes The supported MIME types for the output data.
         * 
         * @return builder
         * 
         */
        public Builder supportedResponseMIMETypes(List<String> supportedResponseMIMETypes) {
            return supportedResponseMIMETypes(Output.of(supportedResponseMIMETypes));
        }

        /**
         * @param supportedResponseMIMETypes The supported MIME types for the output data.
         * 
         * @return builder
         * 
         */
        public Builder supportedResponseMIMETypes(String... supportedResponseMIMETypes) {
            return supportedResponseMIMETypes(List.of(supportedResponseMIMETypes));
        }

        /**
         * @param supportedTransformInstanceTypes A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         * 
         * @return builder
         * 
         */
        public Builder supportedTransformInstanceTypes(@Nullable Output<List<String>> supportedTransformInstanceTypes) {
            $.supportedTransformInstanceTypes = supportedTransformInstanceTypes;
            return this;
        }

        /**
         * @param supportedTransformInstanceTypes A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         * 
         * @return builder
         * 
         */
        public Builder supportedTransformInstanceTypes(List<String> supportedTransformInstanceTypes) {
            return supportedTransformInstanceTypes(Output.of(supportedTransformInstanceTypes));
        }

        /**
         * @param supportedTransformInstanceTypes A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         * 
         * @return builder
         * 
         */
        public Builder supportedTransformInstanceTypes(String... supportedTransformInstanceTypes) {
            return supportedTransformInstanceTypes(List.of(supportedTransformInstanceTypes));
        }

        public ModelPackageInferenceSpecificationArgs build() {
            $.containers = Objects.requireNonNull($.containers, "expected parameter 'containers' to be non-null");
            $.supportedContentTypes = Objects.requireNonNull($.supportedContentTypes, "expected parameter 'supportedContentTypes' to be non-null");
            $.supportedResponseMIMETypes = Objects.requireNonNull($.supportedResponseMIMETypes, "expected parameter 'supportedResponseMIMETypes' to be non-null");
            return $;
        }
    }

}
