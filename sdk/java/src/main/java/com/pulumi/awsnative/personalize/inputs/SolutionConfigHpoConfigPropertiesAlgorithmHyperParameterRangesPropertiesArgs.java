// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.personalize.inputs;

import com.pulumi.awsnative.personalize.inputs.SolutionCategoricalHyperParameterRangeArgs;
import com.pulumi.awsnative.personalize.inputs.SolutionContinuousHyperParameterRangeArgs;
import com.pulumi.awsnative.personalize.inputs.SolutionIntegerHyperParameterRangeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The hyperparameters and their allowable ranges
 * 
 */
public final class SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs Empty = new SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs();

    /**
     * The categorical hyperparameters and their ranges.
     * 
     */
    @Import(name="categoricalHyperParameterRanges")
    private @Nullable Output<List<SolutionCategoricalHyperParameterRangeArgs>> categoricalHyperParameterRanges;

    /**
     * @return The categorical hyperparameters and their ranges.
     * 
     */
    public Optional<Output<List<SolutionCategoricalHyperParameterRangeArgs>>> categoricalHyperParameterRanges() {
        return Optional.ofNullable(this.categoricalHyperParameterRanges);
    }

    /**
     * The continuous hyperparameters and their ranges.
     * 
     */
    @Import(name="continuousHyperParameterRanges")
    private @Nullable Output<List<SolutionContinuousHyperParameterRangeArgs>> continuousHyperParameterRanges;

    /**
     * @return The continuous hyperparameters and their ranges.
     * 
     */
    public Optional<Output<List<SolutionContinuousHyperParameterRangeArgs>>> continuousHyperParameterRanges() {
        return Optional.ofNullable(this.continuousHyperParameterRanges);
    }

    /**
     * The integer hyperparameters and their ranges.
     * 
     */
    @Import(name="integerHyperParameterRanges")
    private @Nullable Output<List<SolutionIntegerHyperParameterRangeArgs>> integerHyperParameterRanges;

    /**
     * @return The integer hyperparameters and their ranges.
     * 
     */
    public Optional<Output<List<SolutionIntegerHyperParameterRangeArgs>>> integerHyperParameterRanges() {
        return Optional.ofNullable(this.integerHyperParameterRanges);
    }

    private SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs() {}

    private SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs(SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs $) {
        this.categoricalHyperParameterRanges = $.categoricalHyperParameterRanges;
        this.continuousHyperParameterRanges = $.continuousHyperParameterRanges;
        this.integerHyperParameterRanges = $.integerHyperParameterRanges;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs $;

        public Builder() {
            $ = new SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs();
        }

        public Builder(SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs defaults) {
            $ = new SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoricalHyperParameterRanges The categorical hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder categoricalHyperParameterRanges(@Nullable Output<List<SolutionCategoricalHyperParameterRangeArgs>> categoricalHyperParameterRanges) {
            $.categoricalHyperParameterRanges = categoricalHyperParameterRanges;
            return this;
        }

        /**
         * @param categoricalHyperParameterRanges The categorical hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder categoricalHyperParameterRanges(List<SolutionCategoricalHyperParameterRangeArgs> categoricalHyperParameterRanges) {
            return categoricalHyperParameterRanges(Output.of(categoricalHyperParameterRanges));
        }

        /**
         * @param categoricalHyperParameterRanges The categorical hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder categoricalHyperParameterRanges(SolutionCategoricalHyperParameterRangeArgs... categoricalHyperParameterRanges) {
            return categoricalHyperParameterRanges(List.of(categoricalHyperParameterRanges));
        }

        /**
         * @param continuousHyperParameterRanges The continuous hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder continuousHyperParameterRanges(@Nullable Output<List<SolutionContinuousHyperParameterRangeArgs>> continuousHyperParameterRanges) {
            $.continuousHyperParameterRanges = continuousHyperParameterRanges;
            return this;
        }

        /**
         * @param continuousHyperParameterRanges The continuous hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder continuousHyperParameterRanges(List<SolutionContinuousHyperParameterRangeArgs> continuousHyperParameterRanges) {
            return continuousHyperParameterRanges(Output.of(continuousHyperParameterRanges));
        }

        /**
         * @param continuousHyperParameterRanges The continuous hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder continuousHyperParameterRanges(SolutionContinuousHyperParameterRangeArgs... continuousHyperParameterRanges) {
            return continuousHyperParameterRanges(List.of(continuousHyperParameterRanges));
        }

        /**
         * @param integerHyperParameterRanges The integer hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder integerHyperParameterRanges(@Nullable Output<List<SolutionIntegerHyperParameterRangeArgs>> integerHyperParameterRanges) {
            $.integerHyperParameterRanges = integerHyperParameterRanges;
            return this;
        }

        /**
         * @param integerHyperParameterRanges The integer hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder integerHyperParameterRanges(List<SolutionIntegerHyperParameterRangeArgs> integerHyperParameterRanges) {
            return integerHyperParameterRanges(Output.of(integerHyperParameterRanges));
        }

        /**
         * @param integerHyperParameterRanges The integer hyperparameters and their ranges.
         * 
         * @return builder
         * 
         */
        public Builder integerHyperParameterRanges(SolutionIntegerHyperParameterRangeArgs... integerHyperParameterRanges) {
            return integerHyperParameterRanges(List.of(integerHyperParameterRanges));
        }

        public SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesPropertiesArgs build() {
            return $;
        }
    }

}
