// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect.outputs;

import com.pulumi.awsnative.mediaconnect.enums.FlowOutputEncryptionAlgorithm;
import com.pulumi.awsnative.mediaconnect.enums.FlowOutputEncryptionKeyType;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlowOutputEncryption {
    /**
     * @return The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
     * 
     */
    private @Nullable FlowOutputEncryptionAlgorithm algorithm;
    /**
     * @return The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
     * 
     */
    private @Nullable FlowOutputEncryptionKeyType keyType;
    /**
     * @return The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
     * 
     */
    private String roleArn;
    /**
     * @return  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
     * 
     */
    private String secretArn;

    private FlowOutputEncryption() {}
    /**
     * @return The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
     * 
     */
    public Optional<FlowOutputEncryptionAlgorithm> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    /**
     * @return The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
     * 
     */
    public Optional<FlowOutputEncryptionKeyType> keyType() {
        return Optional.ofNullable(this.keyType);
    }
    /**
     * @return The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }
    /**
     * @return  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
     * 
     */
    public String secretArn() {
        return this.secretArn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowOutputEncryption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FlowOutputEncryptionAlgorithm algorithm;
        private @Nullable FlowOutputEncryptionKeyType keyType;
        private String roleArn;
        private String secretArn;
        public Builder() {}
        public Builder(FlowOutputEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.keyType = defaults.keyType;
    	      this.roleArn = defaults.roleArn;
    	      this.secretArn = defaults.secretArn;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable FlowOutputEncryptionAlgorithm algorithm) {
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(@Nullable FlowOutputEncryptionKeyType keyType) {
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        @CustomType.Setter
        public Builder secretArn(String secretArn) {
            this.secretArn = Objects.requireNonNull(secretArn);
            return this;
        }
        public FlowOutputEncryption build() {
            final var o = new FlowOutputEncryption();
            o.algorithm = algorithm;
            o.keyType = keyType;
            o.roleArn = roleArn;
            o.secretArn = secretArn;
            return o;
        }
    }
}
