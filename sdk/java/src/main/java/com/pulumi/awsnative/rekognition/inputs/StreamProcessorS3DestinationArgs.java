// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.rekognition.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The S3 location in customer&#39;s account where inference output &amp; artifacts are stored, as part of connected home feature.
 * 
 */
public final class StreamProcessorS3DestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorS3DestinationArgs Empty = new StreamProcessorS3DestinationArgs();

    /**
     * Name of the S3 bucket.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Name of the S3 bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * The object key prefix path where the results will be stored. Default is no prefix path
     * 
     */
    @Import(name="objectKeyPrefix")
    private @Nullable Output<String> objectKeyPrefix;

    /**
     * @return The object key prefix path where the results will be stored. Default is no prefix path
     * 
     */
    public Optional<Output<String>> objectKeyPrefix() {
        return Optional.ofNullable(this.objectKeyPrefix);
    }

    private StreamProcessorS3DestinationArgs() {}

    private StreamProcessorS3DestinationArgs(StreamProcessorS3DestinationArgs $) {
        this.bucketName = $.bucketName;
        this.objectKeyPrefix = $.objectKeyPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorS3DestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorS3DestinationArgs $;

        public Builder() {
            $ = new StreamProcessorS3DestinationArgs();
        }

        public Builder(StreamProcessorS3DestinationArgs defaults) {
            $ = new StreamProcessorS3DestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName Name of the S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Name of the S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param objectKeyPrefix The object key prefix path where the results will be stored. Default is no prefix path
         * 
         * @return builder
         * 
         */
        public Builder objectKeyPrefix(@Nullable Output<String> objectKeyPrefix) {
            $.objectKeyPrefix = objectKeyPrefix;
            return this;
        }

        /**
         * @param objectKeyPrefix The object key prefix path where the results will be stored. Default is no prefix path
         * 
         * @return builder
         * 
         */
        public Builder objectKeyPrefix(String objectKeyPrefix) {
            return objectKeyPrefix(Output.of(objectKeyPrefix));
        }

        public StreamProcessorS3DestinationArgs build() {
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            return $;
        }
    }

}
