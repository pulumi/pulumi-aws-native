// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.awsnative.lightsail.outputs.InstanceAddOn;
import com.pulumi.awsnative.lightsail.outputs.InstanceHardware;
import com.pulumi.awsnative.lightsail.outputs.InstanceLocation;
import com.pulumi.awsnative.lightsail.outputs.InstanceNetworking;
import com.pulumi.awsnative.lightsail.outputs.InstanceState;
import com.pulumi.awsnative.lightsail.outputs.InstanceTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    /**
     * @return An array of objects representing the add-ons to enable for the new instance.
     * 
     */
    private @Nullable List<InstanceAddOn> addOns;
    private @Nullable InstanceHardware hardware;
    private @Nullable String instanceArn;
    /**
     * @return Is the IP Address of the Instance is the static IP
     * 
     */
    private @Nullable Boolean isStaticIp;
    /**
     * @return The name of your key pair.
     * 
     */
    private @Nullable String keyPairName;
    private @Nullable InstanceLocation location;
    private @Nullable InstanceNetworking networking;
    /**
     * @return Private IP Address of the Instance
     * 
     */
    private @Nullable String privateIpAddress;
    /**
     * @return Public IP Address of the Instance
     * 
     */
    private @Nullable String publicIpAddress;
    /**
     * @return Resource type of Lightsail instance.
     * 
     */
    private @Nullable String resourceType;
    /**
     * @return SSH Key Name of the  Lightsail instance.
     * 
     */
    private @Nullable String sshKeyName;
    private @Nullable InstanceState state;
    /**
     * @return Support code to help identify any issues
     * 
     */
    private @Nullable String supportCode;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<InstanceTag> tags;
    /**
     * @return A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
     * 
     */
    private @Nullable String userData;
    /**
     * @return Username of the  Lightsail instance.
     * 
     */
    private @Nullable String userName;

    private GetInstanceResult() {}
    /**
     * @return An array of objects representing the add-ons to enable for the new instance.
     * 
     */
    public List<InstanceAddOn> addOns() {
        return this.addOns == null ? List.of() : this.addOns;
    }
    public Optional<InstanceHardware> hardware() {
        return Optional.ofNullable(this.hardware);
    }
    public Optional<String> instanceArn() {
        return Optional.ofNullable(this.instanceArn);
    }
    /**
     * @return Is the IP Address of the Instance is the static IP
     * 
     */
    public Optional<Boolean> isStaticIp() {
        return Optional.ofNullable(this.isStaticIp);
    }
    /**
     * @return The name of your key pair.
     * 
     */
    public Optional<String> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }
    public Optional<InstanceLocation> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<InstanceNetworking> networking() {
        return Optional.ofNullable(this.networking);
    }
    /**
     * @return Private IP Address of the Instance
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return Public IP Address of the Instance
     * 
     */
    public Optional<String> publicIpAddress() {
        return Optional.ofNullable(this.publicIpAddress);
    }
    /**
     * @return Resource type of Lightsail instance.
     * 
     */
    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }
    /**
     * @return SSH Key Name of the  Lightsail instance.
     * 
     */
    public Optional<String> sshKeyName() {
        return Optional.ofNullable(this.sshKeyName);
    }
    public Optional<InstanceState> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return Support code to help identify any issues
     * 
     */
    public Optional<String> supportCode() {
        return Optional.ofNullable(this.supportCode);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<InstanceTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }
    /**
     * @return Username of the  Lightsail instance.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<InstanceAddOn> addOns;
        private @Nullable InstanceHardware hardware;
        private @Nullable String instanceArn;
        private @Nullable Boolean isStaticIp;
        private @Nullable String keyPairName;
        private @Nullable InstanceLocation location;
        private @Nullable InstanceNetworking networking;
        private @Nullable String privateIpAddress;
        private @Nullable String publicIpAddress;
        private @Nullable String resourceType;
        private @Nullable String sshKeyName;
        private @Nullable InstanceState state;
        private @Nullable String supportCode;
        private @Nullable List<InstanceTag> tags;
        private @Nullable String userData;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addOns = defaults.addOns;
    	      this.hardware = defaults.hardware;
    	      this.instanceArn = defaults.instanceArn;
    	      this.isStaticIp = defaults.isStaticIp;
    	      this.keyPairName = defaults.keyPairName;
    	      this.location = defaults.location;
    	      this.networking = defaults.networking;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.resourceType = defaults.resourceType;
    	      this.sshKeyName = defaults.sshKeyName;
    	      this.state = defaults.state;
    	      this.supportCode = defaults.supportCode;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder addOns(@Nullable List<InstanceAddOn> addOns) {
            this.addOns = addOns;
            return this;
        }
        public Builder addOns(InstanceAddOn... addOns) {
            return addOns(List.of(addOns));
        }
        @CustomType.Setter
        public Builder hardware(@Nullable InstanceHardware hardware) {
            this.hardware = hardware;
            return this;
        }
        @CustomType.Setter
        public Builder instanceArn(@Nullable String instanceArn) {
            this.instanceArn = instanceArn;
            return this;
        }
        @CustomType.Setter
        public Builder isStaticIp(@Nullable Boolean isStaticIp) {
            this.isStaticIp = isStaticIp;
            return this;
        }
        @CustomType.Setter
        public Builder keyPairName(@Nullable String keyPairName) {
            this.keyPairName = keyPairName;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable InstanceLocation location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder networking(@Nullable InstanceNetworking networking) {
            this.networking = networking;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder publicIpAddress(@Nullable String publicIpAddress) {
            this.publicIpAddress = publicIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(@Nullable String resourceType) {
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyName(@Nullable String sshKeyName) {
            this.sshKeyName = sshKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable InstanceState state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder supportCode(@Nullable String supportCode) {
            this.supportCode = supportCode;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<InstanceTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(InstanceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {
            this.userData = userData;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetInstanceResult build() {
            final var o = new GetInstanceResult();
            o.addOns = addOns;
            o.hardware = hardware;
            o.instanceArn = instanceArn;
            o.isStaticIp = isStaticIp;
            o.keyPairName = keyPairName;
            o.location = location;
            o.networking = networking;
            o.privateIpAddress = privateIpAddress;
            o.publicIpAddress = publicIpAddress;
            o.resourceType = resourceType;
            o.sshKeyName = sshKeyName;
            o.state = state;
            o.supportCode = supportCode;
            o.tags = tags;
            o.userData = userData;
            o.userName = userName;
            return o;
        }
    }
}
