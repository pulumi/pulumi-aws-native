// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.refactorspaces;

import com.pulumi.awsnative.refactorspaces.enums.EnvironmentNetworkFabricType;
import com.pulumi.awsnative.refactorspaces.inputs.EnvironmentTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkFabricType")
    private @Nullable Output<EnvironmentNetworkFabricType> networkFabricType;

    public Optional<Output<EnvironmentNetworkFabricType>> networkFabricType() {
        return Optional.ofNullable(this.networkFabricType);
    }

    /**
     * Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<EnvironmentTagArgs>> tags;

    /**
     * @return Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     * 
     */
    public Optional<Output<List<EnvironmentTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.networkFabricType = $.networkFabricType;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkFabricType(@Nullable Output<EnvironmentNetworkFabricType> networkFabricType) {
            $.networkFabricType = networkFabricType;
            return this;
        }

        public Builder networkFabricType(EnvironmentNetworkFabricType networkFabricType) {
            return networkFabricType(Output.of(networkFabricType));
        }

        /**
         * @param tags Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<EnvironmentTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<EnvironmentTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
         * 
         * @return builder
         * 
         */
        public Builder tags(EnvironmentTagArgs... tags) {
            return tags(List.of(tags));
        }

        public EnvironmentArgs build() {
            return $;
        }
    }

}
