// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.glue;

import com.pulumi.awsnative.glue.enums.SchemaCompatibility;
import com.pulumi.awsnative.glue.enums.SchemaDataFormat;
import com.pulumi.awsnative.glue.inputs.SchemaRegistryArgs;
import com.pulumi.awsnative.glue.inputs.SchemaTagArgs;
import com.pulumi.awsnative.glue.inputs.SchemaVersionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    @Import(name="checkpointVersion")
    private @Nullable Output<SchemaVersionArgs> checkpointVersion;

    public Optional<Output<SchemaVersionArgs>> checkpointVersion() {
        return Optional.ofNullable(this.checkpointVersion);
    }

    /**
     * Compatibility setting for the schema.
     * 
     */
    @Import(name="compatibility", required=true)
    private Output<SchemaCompatibility> compatibility;

    /**
     * @return Compatibility setting for the schema.
     * 
     */
    public Output<SchemaCompatibility> compatibility() {
        return this.compatibility;
    }

    /**
     * Data format name to use for the schema. Accepted values: &#39;AVRO&#39;, &#39;JSON&#39;, &#39;PROTOBUF&#39;
     * 
     */
    @Import(name="dataFormat", required=true)
    private Output<SchemaDataFormat> dataFormat;

    /**
     * @return Data format name to use for the schema. Accepted values: &#39;AVRO&#39;, &#39;JSON&#39;, &#39;PROTOBUF&#39;
     * 
     */
    public Output<SchemaDataFormat> dataFormat() {
        return this.dataFormat;
    }

    /**
     * A description of the schema. If description is not provided, there will not be any default value for this.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the schema. If description is not provided, there will not be any default value for this.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the schema.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the schema.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="registry")
    private @Nullable Output<SchemaRegistryArgs> registry;

    public Optional<Output<SchemaRegistryArgs>> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * Definition for the initial schema version in plain-text.
     * 
     */
    @Import(name="schemaDefinition", required=true)
    private Output<String> schemaDefinition;

    /**
     * @return Definition for the initial schema version in plain-text.
     * 
     */
    public Output<String> schemaDefinition() {
        return this.schemaDefinition;
    }

    /**
     * List of tags to tag the schema
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<SchemaTagArgs>> tags;

    /**
     * @return List of tags to tag the schema
     * 
     */
    public Optional<Output<List<SchemaTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SchemaArgs() {}

    private SchemaArgs(SchemaArgs $) {
        this.checkpointVersion = $.checkpointVersion;
        this.compatibility = $.compatibility;
        this.dataFormat = $.dataFormat;
        this.description = $.description;
        this.name = $.name;
        this.registry = $.registry;
        this.schemaDefinition = $.schemaDefinition;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaArgs $;

        public Builder() {
            $ = new SchemaArgs();
        }

        public Builder(SchemaArgs defaults) {
            $ = new SchemaArgs(Objects.requireNonNull(defaults));
        }

        public Builder checkpointVersion(@Nullable Output<SchemaVersionArgs> checkpointVersion) {
            $.checkpointVersion = checkpointVersion;
            return this;
        }

        public Builder checkpointVersion(SchemaVersionArgs checkpointVersion) {
            return checkpointVersion(Output.of(checkpointVersion));
        }

        /**
         * @param compatibility Compatibility setting for the schema.
         * 
         * @return builder
         * 
         */
        public Builder compatibility(Output<SchemaCompatibility> compatibility) {
            $.compatibility = compatibility;
            return this;
        }

        /**
         * @param compatibility Compatibility setting for the schema.
         * 
         * @return builder
         * 
         */
        public Builder compatibility(SchemaCompatibility compatibility) {
            return compatibility(Output.of(compatibility));
        }

        /**
         * @param dataFormat Data format name to use for the schema. Accepted values: &#39;AVRO&#39;, &#39;JSON&#39;, &#39;PROTOBUF&#39;
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(Output<SchemaDataFormat> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        /**
         * @param dataFormat Data format name to use for the schema. Accepted values: &#39;AVRO&#39;, &#39;JSON&#39;, &#39;PROTOBUF&#39;
         * 
         * @return builder
         * 
         */
        public Builder dataFormat(SchemaDataFormat dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        /**
         * @param description A description of the schema. If description is not provided, there will not be any default value for this.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the schema. If description is not provided, there will not be any default value for this.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder registry(@Nullable Output<SchemaRegistryArgs> registry) {
            $.registry = registry;
            return this;
        }

        public Builder registry(SchemaRegistryArgs registry) {
            return registry(Output.of(registry));
        }

        /**
         * @param schemaDefinition Definition for the initial schema version in plain-text.
         * 
         * @return builder
         * 
         */
        public Builder schemaDefinition(Output<String> schemaDefinition) {
            $.schemaDefinition = schemaDefinition;
            return this;
        }

        /**
         * @param schemaDefinition Definition for the initial schema version in plain-text.
         * 
         * @return builder
         * 
         */
        public Builder schemaDefinition(String schemaDefinition) {
            return schemaDefinition(Output.of(schemaDefinition));
        }

        /**
         * @param tags List of tags to tag the schema
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<SchemaTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of tags to tag the schema
         * 
         * @return builder
         * 
         */
        public Builder tags(List<SchemaTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of tags to tag the schema
         * 
         * @return builder
         * 
         */
        public Builder tags(SchemaTagArgs... tags) {
            return tags(List.of(tags));
        }

        public SchemaArgs build() {
            $.compatibility = Objects.requireNonNull($.compatibility, "expected parameter 'compatibility' to be non-null");
            $.dataFormat = Objects.requireNonNull($.dataFormat, "expected parameter 'dataFormat' to be non-null");
            $.schemaDefinition = Objects.requireNonNull($.schemaDefinition, "expected parameter 'schemaDefinition' to be non-null");
            return $;
        }
    }

}
