// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisfirehose.outputs;

import com.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat;
import com.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamBufferingHints;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamCloudWatchLoggingOptions;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamDataFormatConversionConfiguration;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamDynamicPartitioningConfiguration;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamEncryptionConfiguration;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamProcessingConfiguration;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamS3DestinationConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeliveryStreamExtendedS3DestinationConfiguration {
    private String bucketARN;
    private @Nullable DeliveryStreamBufferingHints bufferingHints;
    private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
    private @Nullable DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat compressionFormat;
    private @Nullable DeliveryStreamDataFormatConversionConfiguration dataFormatConversionConfiguration;
    private @Nullable DeliveryStreamDynamicPartitioningConfiguration dynamicPartitioningConfiguration;
    private @Nullable DeliveryStreamEncryptionConfiguration encryptionConfiguration;
    private @Nullable String errorOutputPrefix;
    private @Nullable String prefix;
    private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
    private String roleARN;
    private @Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration;
    private @Nullable DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode s3BackupMode;

    private DeliveryStreamExtendedS3DestinationConfiguration() {}
    public String bucketARN() {
        return this.bucketARN;
    }
    public Optional<DeliveryStreamBufferingHints> bufferingHints() {
        return Optional.ofNullable(this.bufferingHints);
    }
    public Optional<DeliveryStreamCloudWatchLoggingOptions> cloudWatchLoggingOptions() {
        return Optional.ofNullable(this.cloudWatchLoggingOptions);
    }
    public Optional<DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat> compressionFormat() {
        return Optional.ofNullable(this.compressionFormat);
    }
    public Optional<DeliveryStreamDataFormatConversionConfiguration> dataFormatConversionConfiguration() {
        return Optional.ofNullable(this.dataFormatConversionConfiguration);
    }
    public Optional<DeliveryStreamDynamicPartitioningConfiguration> dynamicPartitioningConfiguration() {
        return Optional.ofNullable(this.dynamicPartitioningConfiguration);
    }
    public Optional<DeliveryStreamEncryptionConfiguration> encryptionConfiguration() {
        return Optional.ofNullable(this.encryptionConfiguration);
    }
    public Optional<String> errorOutputPrefix() {
        return Optional.ofNullable(this.errorOutputPrefix);
    }
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public Optional<DeliveryStreamProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    public String roleARN() {
        return this.roleARN;
    }
    public Optional<DeliveryStreamS3DestinationConfiguration> s3BackupConfiguration() {
        return Optional.ofNullable(this.s3BackupConfiguration);
    }
    public Optional<DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamExtendedS3DestinationConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucketARN;
        private @Nullable DeliveryStreamBufferingHints bufferingHints;
        private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
        private @Nullable DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat compressionFormat;
        private @Nullable DeliveryStreamDataFormatConversionConfiguration dataFormatConversionConfiguration;
        private @Nullable DeliveryStreamDynamicPartitioningConfiguration dynamicPartitioningConfiguration;
        private @Nullable DeliveryStreamEncryptionConfiguration encryptionConfiguration;
        private @Nullable String errorOutputPrefix;
        private @Nullable String prefix;
        private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
        private String roleARN;
        private @Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration;
        private @Nullable DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode s3BackupMode;
        public Builder() {}
        public Builder(DeliveryStreamExtendedS3DestinationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketARN = defaults.bucketARN;
    	      this.bufferingHints = defaults.bufferingHints;
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.compressionFormat = defaults.compressionFormat;
    	      this.dataFormatConversionConfiguration = defaults.dataFormatConversionConfiguration;
    	      this.dynamicPartitioningConfiguration = defaults.dynamicPartitioningConfiguration;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.errorOutputPrefix = defaults.errorOutputPrefix;
    	      this.prefix = defaults.prefix;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.roleARN = defaults.roleARN;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
        }

        @CustomType.Setter
        public Builder bucketARN(String bucketARN) {
            this.bucketARN = Objects.requireNonNull(bucketARN);
            return this;
        }
        @CustomType.Setter
        public Builder bufferingHints(@Nullable DeliveryStreamBufferingHints bufferingHints) {
            this.bufferingHints = bufferingHints;
            return this;
        }
        @CustomType.Setter
        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder compressionFormat(@Nullable DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat compressionFormat) {
            this.compressionFormat = compressionFormat;
            return this;
        }
        @CustomType.Setter
        public Builder dataFormatConversionConfiguration(@Nullable DeliveryStreamDataFormatConversionConfiguration dataFormatConversionConfiguration) {
            this.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicPartitioningConfiguration(@Nullable DeliveryStreamDynamicPartitioningConfiguration dynamicPartitioningConfiguration) {
            this.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfiguration(@Nullable DeliveryStreamEncryptionConfiguration encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder errorOutputPrefix(@Nullable String errorOutputPrefix) {
            this.errorOutputPrefix = errorOutputPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder roleARN(String roleARN) {
            this.roleARN = Objects.requireNonNull(roleARN);
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupConfiguration(@Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        public DeliveryStreamExtendedS3DestinationConfiguration build() {
            final var o = new DeliveryStreamExtendedS3DestinationConfiguration();
            o.bucketARN = bucketARN;
            o.bufferingHints = bufferingHints;
            o.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            o.compressionFormat = compressionFormat;
            o.dataFormatConversionConfiguration = dataFormatConversionConfiguration;
            o.dynamicPartitioningConfiguration = dynamicPartitioningConfiguration;
            o.encryptionConfiguration = encryptionConfiguration;
            o.errorOutputPrefix = errorOutputPrefix;
            o.prefix = prefix;
            o.processingConfiguration = processingConfiguration;
            o.roleARN = roleARN;
            o.s3BackupConfiguration = s3BackupConfiguration;
            o.s3BackupMode = s3BackupMode;
            return o;
        }
    }
}
