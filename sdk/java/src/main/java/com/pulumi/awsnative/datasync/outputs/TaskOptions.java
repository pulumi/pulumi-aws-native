// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync.outputs;

import com.pulumi.awsnative.datasync.enums.TaskOptionsAtime;
import com.pulumi.awsnative.datasync.enums.TaskOptionsGid;
import com.pulumi.awsnative.datasync.enums.TaskOptionsLogLevel;
import com.pulumi.awsnative.datasync.enums.TaskOptionsMtime;
import com.pulumi.awsnative.datasync.enums.TaskOptionsObjectTags;
import com.pulumi.awsnative.datasync.enums.TaskOptionsOverwriteMode;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPosixPermissions;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDeletedFiles;
import com.pulumi.awsnative.datasync.enums.TaskOptionsPreserveDevices;
import com.pulumi.awsnative.datasync.enums.TaskOptionsSecurityDescriptorCopyFlags;
import com.pulumi.awsnative.datasync.enums.TaskOptionsTaskQueueing;
import com.pulumi.awsnative.datasync.enums.TaskOptionsTransferMode;
import com.pulumi.awsnative.datasync.enums.TaskOptionsUid;
import com.pulumi.awsnative.datasync.enums.TaskOptionsVerifyMode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskOptions {
    /**
     * @return A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
     * 
     */
    private @Nullable TaskOptionsAtime atime;
    /**
     * @return A value that limits the bandwidth used by AWS DataSync.
     * 
     */
    private @Nullable Integer bytesPerSecond;
    /**
     * @return The group ID (GID) of the file&#39;s owners.
     * 
     */
    private @Nullable TaskOptionsGid gid;
    /**
     * @return A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
     * 
     */
    private @Nullable TaskOptionsLogLevel logLevel;
    /**
     * @return A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
     * 
     */
    private @Nullable TaskOptionsMtime mtime;
    /**
     * @return A value that determines whether object tags should be read from the source object store and written to the destination object store.
     * 
     */
    private @Nullable TaskOptionsObjectTags objectTags;
    /**
     * @return A value that determines whether files at the destination should be overwritten or preserved when copying files.
     * 
     */
    private @Nullable TaskOptionsOverwriteMode overwriteMode;
    /**
     * @return A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
     * 
     */
    private @Nullable TaskOptionsPosixPermissions posixPermissions;
    /**
     * @return A value that specifies whether files in the destination that don&#39;t exist in the source file system should be preserved.
     * 
     */
    private @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles;
    /**
     * @return A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
     * 
     */
    private @Nullable TaskOptionsPreserveDevices preserveDevices;
    /**
     * @return A value that determines which components of the SMB security descriptor are copied during transfer.
     * 
     */
    private @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags;
    /**
     * @return A value that determines whether tasks should be queued before executing the tasks.
     * 
     */
    private @Nullable TaskOptionsTaskQueueing taskQueueing;
    /**
     * @return A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
     * 
     */
    private @Nullable TaskOptionsTransferMode transferMode;
    /**
     * @return The user ID (UID) of the file&#39;s owner.
     * 
     */
    private @Nullable TaskOptionsUid uid;
    /**
     * @return A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
     * 
     */
    private @Nullable TaskOptionsVerifyMode verifyMode;

    private TaskOptions() {}
    /**
     * @return A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
     * 
     */
    public Optional<TaskOptionsAtime> atime() {
        return Optional.ofNullable(this.atime);
    }
    /**
     * @return A value that limits the bandwidth used by AWS DataSync.
     * 
     */
    public Optional<Integer> bytesPerSecond() {
        return Optional.ofNullable(this.bytesPerSecond);
    }
    /**
     * @return The group ID (GID) of the file&#39;s owners.
     * 
     */
    public Optional<TaskOptionsGid> gid() {
        return Optional.ofNullable(this.gid);
    }
    /**
     * @return A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
     * 
     */
    public Optional<TaskOptionsLogLevel> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }
    /**
     * @return A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
     * 
     */
    public Optional<TaskOptionsMtime> mtime() {
        return Optional.ofNullable(this.mtime);
    }
    /**
     * @return A value that determines whether object tags should be read from the source object store and written to the destination object store.
     * 
     */
    public Optional<TaskOptionsObjectTags> objectTags() {
        return Optional.ofNullable(this.objectTags);
    }
    /**
     * @return A value that determines whether files at the destination should be overwritten or preserved when copying files.
     * 
     */
    public Optional<TaskOptionsOverwriteMode> overwriteMode() {
        return Optional.ofNullable(this.overwriteMode);
    }
    /**
     * @return A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
     * 
     */
    public Optional<TaskOptionsPosixPermissions> posixPermissions() {
        return Optional.ofNullable(this.posixPermissions);
    }
    /**
     * @return A value that specifies whether files in the destination that don&#39;t exist in the source file system should be preserved.
     * 
     */
    public Optional<TaskOptionsPreserveDeletedFiles> preserveDeletedFiles() {
        return Optional.ofNullable(this.preserveDeletedFiles);
    }
    /**
     * @return A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
     * 
     */
    public Optional<TaskOptionsPreserveDevices> preserveDevices() {
        return Optional.ofNullable(this.preserveDevices);
    }
    /**
     * @return A value that determines which components of the SMB security descriptor are copied during transfer.
     * 
     */
    public Optional<TaskOptionsSecurityDescriptorCopyFlags> securityDescriptorCopyFlags() {
        return Optional.ofNullable(this.securityDescriptorCopyFlags);
    }
    /**
     * @return A value that determines whether tasks should be queued before executing the tasks.
     * 
     */
    public Optional<TaskOptionsTaskQueueing> taskQueueing() {
        return Optional.ofNullable(this.taskQueueing);
    }
    /**
     * @return A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
     * 
     */
    public Optional<TaskOptionsTransferMode> transferMode() {
        return Optional.ofNullable(this.transferMode);
    }
    /**
     * @return The user ID (UID) of the file&#39;s owner.
     * 
     */
    public Optional<TaskOptionsUid> uid() {
        return Optional.ofNullable(this.uid);
    }
    /**
     * @return A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
     * 
     */
    public Optional<TaskOptionsVerifyMode> verifyMode() {
        return Optional.ofNullable(this.verifyMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable TaskOptionsAtime atime;
        private @Nullable Integer bytesPerSecond;
        private @Nullable TaskOptionsGid gid;
        private @Nullable TaskOptionsLogLevel logLevel;
        private @Nullable TaskOptionsMtime mtime;
        private @Nullable TaskOptionsObjectTags objectTags;
        private @Nullable TaskOptionsOverwriteMode overwriteMode;
        private @Nullable TaskOptionsPosixPermissions posixPermissions;
        private @Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles;
        private @Nullable TaskOptionsPreserveDevices preserveDevices;
        private @Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags;
        private @Nullable TaskOptionsTaskQueueing taskQueueing;
        private @Nullable TaskOptionsTransferMode transferMode;
        private @Nullable TaskOptionsUid uid;
        private @Nullable TaskOptionsVerifyMode verifyMode;
        public Builder() {}
        public Builder(TaskOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atime = defaults.atime;
    	      this.bytesPerSecond = defaults.bytesPerSecond;
    	      this.gid = defaults.gid;
    	      this.logLevel = defaults.logLevel;
    	      this.mtime = defaults.mtime;
    	      this.objectTags = defaults.objectTags;
    	      this.overwriteMode = defaults.overwriteMode;
    	      this.posixPermissions = defaults.posixPermissions;
    	      this.preserveDeletedFiles = defaults.preserveDeletedFiles;
    	      this.preserveDevices = defaults.preserveDevices;
    	      this.securityDescriptorCopyFlags = defaults.securityDescriptorCopyFlags;
    	      this.taskQueueing = defaults.taskQueueing;
    	      this.transferMode = defaults.transferMode;
    	      this.uid = defaults.uid;
    	      this.verifyMode = defaults.verifyMode;
        }

        @CustomType.Setter
        public Builder atime(@Nullable TaskOptionsAtime atime) {
            this.atime = atime;
            return this;
        }
        @CustomType.Setter
        public Builder bytesPerSecond(@Nullable Integer bytesPerSecond) {
            this.bytesPerSecond = bytesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder gid(@Nullable TaskOptionsGid gid) {
            this.gid = gid;
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(@Nullable TaskOptionsLogLevel logLevel) {
            this.logLevel = logLevel;
            return this;
        }
        @CustomType.Setter
        public Builder mtime(@Nullable TaskOptionsMtime mtime) {
            this.mtime = mtime;
            return this;
        }
        @CustomType.Setter
        public Builder objectTags(@Nullable TaskOptionsObjectTags objectTags) {
            this.objectTags = objectTags;
            return this;
        }
        @CustomType.Setter
        public Builder overwriteMode(@Nullable TaskOptionsOverwriteMode overwriteMode) {
            this.overwriteMode = overwriteMode;
            return this;
        }
        @CustomType.Setter
        public Builder posixPermissions(@Nullable TaskOptionsPosixPermissions posixPermissions) {
            this.posixPermissions = posixPermissions;
            return this;
        }
        @CustomType.Setter
        public Builder preserveDeletedFiles(@Nullable TaskOptionsPreserveDeletedFiles preserveDeletedFiles) {
            this.preserveDeletedFiles = preserveDeletedFiles;
            return this;
        }
        @CustomType.Setter
        public Builder preserveDevices(@Nullable TaskOptionsPreserveDevices preserveDevices) {
            this.preserveDevices = preserveDevices;
            return this;
        }
        @CustomType.Setter
        public Builder securityDescriptorCopyFlags(@Nullable TaskOptionsSecurityDescriptorCopyFlags securityDescriptorCopyFlags) {
            this.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
            return this;
        }
        @CustomType.Setter
        public Builder taskQueueing(@Nullable TaskOptionsTaskQueueing taskQueueing) {
            this.taskQueueing = taskQueueing;
            return this;
        }
        @CustomType.Setter
        public Builder transferMode(@Nullable TaskOptionsTransferMode transferMode) {
            this.transferMode = transferMode;
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable TaskOptionsUid uid) {
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder verifyMode(@Nullable TaskOptionsVerifyMode verifyMode) {
            this.verifyMode = verifyMode;
            return this;
        }
        public TaskOptions build() {
            final var o = new TaskOptions();
            o.atime = atime;
            o.bytesPerSecond = bytesPerSecond;
            o.gid = gid;
            o.logLevel = logLevel;
            o.mtime = mtime;
            o.objectTags = objectTags;
            o.overwriteMode = overwriteMode;
            o.posixPermissions = posixPermissions;
            o.preserveDeletedFiles = preserveDeletedFiles;
            o.preserveDevices = preserveDevices;
            o.securityDescriptorCopyFlags = securityDescriptorCopyFlags;
            o.taskQueueing = taskQueueing;
            o.transferMode = transferMode;
            o.uid = uid;
            o.verifyMode = verifyMode;
            return o;
        }
    }
}
