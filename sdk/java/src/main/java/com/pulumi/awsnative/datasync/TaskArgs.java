// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync;

import com.pulumi.awsnative.datasync.inputs.TaskFilterRuleArgs;
import com.pulumi.awsnative.datasync.inputs.TaskOptionsArgs;
import com.pulumi.awsnative.datasync.inputs.TaskScheduleArgs;
import com.pulumi.awsnative.datasync.inputs.TaskTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskArgs Empty = new TaskArgs();

    /**
     * The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     * 
     */
    @Import(name="cloudWatchLogGroupArn")
    private @Nullable Output<String> cloudWatchLogGroupArn;

    /**
     * @return The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
     * 
     */
    public Optional<Output<String>> cloudWatchLogGroupArn() {
        return Optional.ofNullable(this.cloudWatchLogGroupArn);
    }

    /**
     * The ARN of an AWS storage resource&#39;s location.
     * 
     */
    @Import(name="destinationLocationArn", required=true)
    private Output<String> destinationLocationArn;

    /**
     * @return The ARN of an AWS storage resource&#39;s location.
     * 
     */
    public Output<String> destinationLocationArn() {
        return this.destinationLocationArn;
    }

    @Import(name="excludes")
    private @Nullable Output<List<TaskFilterRuleArgs>> excludes;

    public Optional<Output<List<TaskFilterRuleArgs>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    @Import(name="includes")
    private @Nullable Output<List<TaskFilterRuleArgs>> includes;

    public Optional<Output<List<TaskFilterRuleArgs>>> includes() {
        return Optional.ofNullable(this.includes);
    }

    /**
     * The name of a task. This value is a text reference that is used to identify the task in the console.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of a task. This value is a text reference that is used to identify the task in the console.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="options")
    private @Nullable Output<TaskOptionsArgs> options;

    public Optional<Output<TaskOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    @Import(name="schedule")
    private @Nullable Output<TaskScheduleArgs> schedule;

    public Optional<Output<TaskScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The ARN of the source location for the task.
     * 
     */
    @Import(name="sourceLocationArn", required=true)
    private Output<String> sourceLocationArn;

    /**
     * @return The ARN of the source location for the task.
     * 
     */
    public Output<String> sourceLocationArn() {
        return this.sourceLocationArn;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<TaskTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<TaskTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private TaskArgs() {}

    private TaskArgs(TaskArgs $) {
        this.cloudWatchLogGroupArn = $.cloudWatchLogGroupArn;
        this.destinationLocationArn = $.destinationLocationArn;
        this.excludes = $.excludes;
        this.includes = $.includes;
        this.name = $.name;
        this.options = $.options;
        this.schedule = $.schedule;
        this.sourceLocationArn = $.sourceLocationArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskArgs $;

        public Builder() {
            $ = new TaskArgs();
        }

        public Builder(TaskArgs defaults) {
            $ = new TaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudWatchLogGroupArn The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchLogGroupArn(@Nullable Output<String> cloudWatchLogGroupArn) {
            $.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
            return this;
        }

        /**
         * @param cloudWatchLogGroupArn The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
            return cloudWatchLogGroupArn(Output.of(cloudWatchLogGroupArn));
        }

        /**
         * @param destinationLocationArn The ARN of an AWS storage resource&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder destinationLocationArn(Output<String> destinationLocationArn) {
            $.destinationLocationArn = destinationLocationArn;
            return this;
        }

        /**
         * @param destinationLocationArn The ARN of an AWS storage resource&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder destinationLocationArn(String destinationLocationArn) {
            return destinationLocationArn(Output.of(destinationLocationArn));
        }

        public Builder excludes(@Nullable Output<List<TaskFilterRuleArgs>> excludes) {
            $.excludes = excludes;
            return this;
        }

        public Builder excludes(List<TaskFilterRuleArgs> excludes) {
            return excludes(Output.of(excludes));
        }

        public Builder excludes(TaskFilterRuleArgs... excludes) {
            return excludes(List.of(excludes));
        }

        public Builder includes(@Nullable Output<List<TaskFilterRuleArgs>> includes) {
            $.includes = includes;
            return this;
        }

        public Builder includes(List<TaskFilterRuleArgs> includes) {
            return includes(Output.of(includes));
        }

        public Builder includes(TaskFilterRuleArgs... includes) {
            return includes(List.of(includes));
        }

        /**
         * @param name The name of a task. This value is a text reference that is used to identify the task in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of a task. This value is a text reference that is used to identify the task in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder options(@Nullable Output<TaskOptionsArgs> options) {
            $.options = options;
            return this;
        }

        public Builder options(TaskOptionsArgs options) {
            return options(Output.of(options));
        }

        public Builder schedule(@Nullable Output<TaskScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(TaskScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param sourceLocationArn The ARN of the source location for the task.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocationArn(Output<String> sourceLocationArn) {
            $.sourceLocationArn = sourceLocationArn;
            return this;
        }

        /**
         * @param sourceLocationArn The ARN of the source location for the task.
         * 
         * @return builder
         * 
         */
        public Builder sourceLocationArn(String sourceLocationArn) {
            return sourceLocationArn(Output.of(sourceLocationArn));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<TaskTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<TaskTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(TaskTagArgs... tags) {
            return tags(List.of(tags));
        }

        public TaskArgs build() {
            $.destinationLocationArn = Objects.requireNonNull($.destinationLocationArn, "expected parameter 'destinationLocationArn' to be non-null");
            $.sourceLocationArn = Objects.requireNonNull($.sourceLocationArn, "expected parameter 'sourceLocationArn' to be non-null");
            return $;
        }
    }

}
