// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.outputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformJobDefinitionBatchStrategy;
import com.pulumi.awsnative.sagemaker.outputs.ModelPackageEnvironment;
import com.pulumi.awsnative.sagemaker.outputs.ModelPackageTransformInput;
import com.pulumi.awsnative.sagemaker.outputs.ModelPackageTransformOutput;
import com.pulumi.awsnative.sagemaker.outputs.ModelPackageTransformResources;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelPackageTransformJobDefinition {
    /**
     * @return A string that determines the number of records included in a single mini-batch.
     * 
     */
    private @Nullable ModelPackageTransformJobDefinitionBatchStrategy batchStrategy;
    private @Nullable ModelPackageEnvironment environment;
    /**
     * @return The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
     * 
     */
    private @Nullable Integer maxConcurrentTransforms;
    /**
     * @return The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
     * 
     */
    private @Nullable Integer maxPayloadInMB;
    private ModelPackageTransformInput transformInput;
    private ModelPackageTransformOutput transformOutput;
    private ModelPackageTransformResources transformResources;

    private ModelPackageTransformJobDefinition() {}
    /**
     * @return A string that determines the number of records included in a single mini-batch.
     * 
     */
    public Optional<ModelPackageTransformJobDefinitionBatchStrategy> batchStrategy() {
        return Optional.ofNullable(this.batchStrategy);
    }
    public Optional<ModelPackageEnvironment> environment() {
        return Optional.ofNullable(this.environment);
    }
    /**
     * @return The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
     * 
     */
    public Optional<Integer> maxConcurrentTransforms() {
        return Optional.ofNullable(this.maxConcurrentTransforms);
    }
    /**
     * @return The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
     * 
     */
    public Optional<Integer> maxPayloadInMB() {
        return Optional.ofNullable(this.maxPayloadInMB);
    }
    public ModelPackageTransformInput transformInput() {
        return this.transformInput;
    }
    public ModelPackageTransformOutput transformOutput() {
        return this.transformOutput;
    }
    public ModelPackageTransformResources transformResources() {
        return this.transformResources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelPackageTransformJobDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ModelPackageTransformJobDefinitionBatchStrategy batchStrategy;
        private @Nullable ModelPackageEnvironment environment;
        private @Nullable Integer maxConcurrentTransforms;
        private @Nullable Integer maxPayloadInMB;
        private ModelPackageTransformInput transformInput;
        private ModelPackageTransformOutput transformOutput;
        private ModelPackageTransformResources transformResources;
        public Builder() {}
        public Builder(ModelPackageTransformJobDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchStrategy = defaults.batchStrategy;
    	      this.environment = defaults.environment;
    	      this.maxConcurrentTransforms = defaults.maxConcurrentTransforms;
    	      this.maxPayloadInMB = defaults.maxPayloadInMB;
    	      this.transformInput = defaults.transformInput;
    	      this.transformOutput = defaults.transformOutput;
    	      this.transformResources = defaults.transformResources;
        }

        @CustomType.Setter
        public Builder batchStrategy(@Nullable ModelPackageTransformJobDefinitionBatchStrategy batchStrategy) {
            this.batchStrategy = batchStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder environment(@Nullable ModelPackageEnvironment environment) {
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentTransforms(@Nullable Integer maxConcurrentTransforms) {
            this.maxConcurrentTransforms = maxConcurrentTransforms;
            return this;
        }
        @CustomType.Setter
        public Builder maxPayloadInMB(@Nullable Integer maxPayloadInMB) {
            this.maxPayloadInMB = maxPayloadInMB;
            return this;
        }
        @CustomType.Setter
        public Builder transformInput(ModelPackageTransformInput transformInput) {
            this.transformInput = Objects.requireNonNull(transformInput);
            return this;
        }
        @CustomType.Setter
        public Builder transformOutput(ModelPackageTransformOutput transformOutput) {
            this.transformOutput = Objects.requireNonNull(transformOutput);
            return this;
        }
        @CustomType.Setter
        public Builder transformResources(ModelPackageTransformResources transformResources) {
            this.transformResources = Objects.requireNonNull(transformResources);
            return this;
        }
        public ModelPackageTransformJobDefinition build() {
            final var o = new ModelPackageTransformJobDefinition();
            o.batchStrategy = batchStrategy;
            o.environment = environment;
            o.maxConcurrentTransforms = maxConcurrentTransforms;
            o.maxPayloadInMB = maxPayloadInMB;
            o.transformInput = transformInput;
            o.transformOutput = transformOutput;
            o.transformResources = transformResources;
            return o;
        }
    }
}
