// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ivs.outputs;

import com.pulumi.awsnative.ivs.enums.RecordingConfigurationThumbnailConfigurationRecordingMode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordingConfigurationThumbnailConfiguration {
    /**
     * @return Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
     * 
     */
    private RecordingConfigurationThumbnailConfigurationRecordingMode recordingMode;
    /**
     * @return Thumbnail recording Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
     * 
     */
    private @Nullable Integer targetIntervalSeconds;

    private RecordingConfigurationThumbnailConfiguration() {}
    /**
     * @return Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
     * 
     */
    public RecordingConfigurationThumbnailConfigurationRecordingMode recordingMode() {
        return this.recordingMode;
    }
    /**
     * @return Thumbnail recording Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
     * 
     */
    public Optional<Integer> targetIntervalSeconds() {
        return Optional.ofNullable(this.targetIntervalSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordingConfigurationThumbnailConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private RecordingConfigurationThumbnailConfigurationRecordingMode recordingMode;
        private @Nullable Integer targetIntervalSeconds;
        public Builder() {}
        public Builder(RecordingConfigurationThumbnailConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recordingMode = defaults.recordingMode;
    	      this.targetIntervalSeconds = defaults.targetIntervalSeconds;
        }

        @CustomType.Setter
        public Builder recordingMode(RecordingConfigurationThumbnailConfigurationRecordingMode recordingMode) {
            this.recordingMode = Objects.requireNonNull(recordingMode);
            return this;
        }
        @CustomType.Setter
        public Builder targetIntervalSeconds(@Nullable Integer targetIntervalSeconds) {
            this.targetIntervalSeconds = targetIntervalSeconds;
            return this;
        }
        public RecordingConfigurationThumbnailConfiguration build() {
            final var o = new RecordingConfigurationThumbnailConfiguration();
            o.recordingMode = recordingMode;
            o.targetIntervalSeconds = targetIntervalSeconds;
            return o;
        }
    }
}
