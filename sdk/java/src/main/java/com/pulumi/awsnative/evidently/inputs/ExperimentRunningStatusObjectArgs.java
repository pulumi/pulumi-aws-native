// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.evidently.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentRunningStatusObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentRunningStatusObjectArgs Empty = new ExperimentRunningStatusObjectArgs();

    /**
     * Provide the analysis Completion time for an experiment
     * 
     */
    @Import(name="analysisCompleteTime")
    private @Nullable Output<String> analysisCompleteTime;

    /**
     * @return Provide the analysis Completion time for an experiment
     * 
     */
    public Optional<Output<String>> analysisCompleteTime() {
        return Optional.ofNullable(this.analysisCompleteTime);
    }

    /**
     * Provide CANCELLED or COMPLETED desired state when stopping an experiment
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return Provide CANCELLED or COMPLETED desired state when stopping an experiment
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * Reason is a required input for stopping the experiment
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    /**
     * @return Reason is a required input for stopping the experiment
     * 
     */
    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * Provide START or STOP action to apply on an experiment
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Provide START or STOP action to apply on an experiment
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ExperimentRunningStatusObjectArgs() {}

    private ExperimentRunningStatusObjectArgs(ExperimentRunningStatusObjectArgs $) {
        this.analysisCompleteTime = $.analysisCompleteTime;
        this.desiredState = $.desiredState;
        this.reason = $.reason;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentRunningStatusObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentRunningStatusObjectArgs $;

        public Builder() {
            $ = new ExperimentRunningStatusObjectArgs();
        }

        public Builder(ExperimentRunningStatusObjectArgs defaults) {
            $ = new ExperimentRunningStatusObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param analysisCompleteTime Provide the analysis Completion time for an experiment
         * 
         * @return builder
         * 
         */
        public Builder analysisCompleteTime(@Nullable Output<String> analysisCompleteTime) {
            $.analysisCompleteTime = analysisCompleteTime;
            return this;
        }

        /**
         * @param analysisCompleteTime Provide the analysis Completion time for an experiment
         * 
         * @return builder
         * 
         */
        public Builder analysisCompleteTime(String analysisCompleteTime) {
            return analysisCompleteTime(Output.of(analysisCompleteTime));
        }

        /**
         * @param desiredState Provide CANCELLED or COMPLETED desired state when stopping an experiment
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState Provide CANCELLED or COMPLETED desired state when stopping an experiment
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param reason Reason is a required input for stopping the experiment
         * 
         * @return builder
         * 
         */
        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        /**
         * @param reason Reason is a required input for stopping the experiment
         * 
         * @return builder
         * 
         */
        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        /**
         * @param status Provide START or STOP action to apply on an experiment
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Provide START or STOP action to apply on an experiment
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ExperimentRunningStatusObjectArgs build() {
            return $;
        }
    }

}
