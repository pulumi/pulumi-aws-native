// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.licensemanager;

import com.pulumi.awsnative.licensemanager.inputs.LicenseConsumptionConfigurationArgs;
import com.pulumi.awsnative.licensemanager.inputs.LicenseEntitlementArgs;
import com.pulumi.awsnative.licensemanager.inputs.LicenseIssuerDataArgs;
import com.pulumi.awsnative.licensemanager.inputs.LicenseMetadataArgs;
import com.pulumi.awsnative.licensemanager.inputs.LicenseValidityDateFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseArgs Empty = new LicenseArgs();

    /**
     * Beneficiary of the license.
     * 
     */
    @Import(name="beneficiary")
    private @Nullable Output<String> beneficiary;

    /**
     * @return Beneficiary of the license.
     * 
     */
    public Optional<Output<String>> beneficiary() {
        return Optional.ofNullable(this.beneficiary);
    }

    @Import(name="consumptionConfiguration", required=true)
    private Output<LicenseConsumptionConfigurationArgs> consumptionConfiguration;

    public Output<LicenseConsumptionConfigurationArgs> consumptionConfiguration() {
        return this.consumptionConfiguration;
    }

    @Import(name="entitlements", required=true)
    private Output<List<LicenseEntitlementArgs>> entitlements;

    public Output<List<LicenseEntitlementArgs>> entitlements() {
        return this.entitlements;
    }

    /**
     * Home region for the created license.
     * 
     */
    @Import(name="homeRegion", required=true)
    private Output<String> homeRegion;

    /**
     * @return Home region for the created license.
     * 
     */
    public Output<String> homeRegion() {
        return this.homeRegion;
    }

    @Import(name="issuer", required=true)
    private Output<LicenseIssuerDataArgs> issuer;

    public Output<LicenseIssuerDataArgs> issuer() {
        return this.issuer;
    }

    @Import(name="licenseMetadata")
    private @Nullable Output<List<LicenseMetadataArgs>> licenseMetadata;

    public Optional<Output<List<LicenseMetadataArgs>>> licenseMetadata() {
        return Optional.ofNullable(this.licenseMetadata);
    }

    /**
     * Name for the created license.
     * 
     */
    @Import(name="licenseName")
    private @Nullable Output<String> licenseName;

    /**
     * @return Name for the created license.
     * 
     */
    public Optional<Output<String>> licenseName() {
        return Optional.ofNullable(this.licenseName);
    }

    /**
     * Product name for the created license.
     * 
     */
    @Import(name="productName", required=true)
    private Output<String> productName;

    /**
     * @return Product name for the created license.
     * 
     */
    public Output<String> productName() {
        return this.productName;
    }

    /**
     * ProductSKU of the license.
     * 
     */
    @Import(name="productSKU")
    private @Nullable Output<String> productSKU;

    /**
     * @return ProductSKU of the license.
     * 
     */
    public Optional<Output<String>> productSKU() {
        return Optional.ofNullable(this.productSKU);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="validity", required=true)
    private Output<LicenseValidityDateFormatArgs> validity;

    public Output<LicenseValidityDateFormatArgs> validity() {
        return this.validity;
    }

    private LicenseArgs() {}

    private LicenseArgs(LicenseArgs $) {
        this.beneficiary = $.beneficiary;
        this.consumptionConfiguration = $.consumptionConfiguration;
        this.entitlements = $.entitlements;
        this.homeRegion = $.homeRegion;
        this.issuer = $.issuer;
        this.licenseMetadata = $.licenseMetadata;
        this.licenseName = $.licenseName;
        this.productName = $.productName;
        this.productSKU = $.productSKU;
        this.status = $.status;
        this.validity = $.validity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseArgs $;

        public Builder() {
            $ = new LicenseArgs();
        }

        public Builder(LicenseArgs defaults) {
            $ = new LicenseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param beneficiary Beneficiary of the license.
         * 
         * @return builder
         * 
         */
        public Builder beneficiary(@Nullable Output<String> beneficiary) {
            $.beneficiary = beneficiary;
            return this;
        }

        /**
         * @param beneficiary Beneficiary of the license.
         * 
         * @return builder
         * 
         */
        public Builder beneficiary(String beneficiary) {
            return beneficiary(Output.of(beneficiary));
        }

        public Builder consumptionConfiguration(Output<LicenseConsumptionConfigurationArgs> consumptionConfiguration) {
            $.consumptionConfiguration = consumptionConfiguration;
            return this;
        }

        public Builder consumptionConfiguration(LicenseConsumptionConfigurationArgs consumptionConfiguration) {
            return consumptionConfiguration(Output.of(consumptionConfiguration));
        }

        public Builder entitlements(Output<List<LicenseEntitlementArgs>> entitlements) {
            $.entitlements = entitlements;
            return this;
        }

        public Builder entitlements(List<LicenseEntitlementArgs> entitlements) {
            return entitlements(Output.of(entitlements));
        }

        public Builder entitlements(LicenseEntitlementArgs... entitlements) {
            return entitlements(List.of(entitlements));
        }

        /**
         * @param homeRegion Home region for the created license.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(Output<String> homeRegion) {
            $.homeRegion = homeRegion;
            return this;
        }

        /**
         * @param homeRegion Home region for the created license.
         * 
         * @return builder
         * 
         */
        public Builder homeRegion(String homeRegion) {
            return homeRegion(Output.of(homeRegion));
        }

        public Builder issuer(Output<LicenseIssuerDataArgs> issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder issuer(LicenseIssuerDataArgs issuer) {
            return issuer(Output.of(issuer));
        }

        public Builder licenseMetadata(@Nullable Output<List<LicenseMetadataArgs>> licenseMetadata) {
            $.licenseMetadata = licenseMetadata;
            return this;
        }

        public Builder licenseMetadata(List<LicenseMetadataArgs> licenseMetadata) {
            return licenseMetadata(Output.of(licenseMetadata));
        }

        public Builder licenseMetadata(LicenseMetadataArgs... licenseMetadata) {
            return licenseMetadata(List.of(licenseMetadata));
        }

        /**
         * @param licenseName Name for the created license.
         * 
         * @return builder
         * 
         */
        public Builder licenseName(@Nullable Output<String> licenseName) {
            $.licenseName = licenseName;
            return this;
        }

        /**
         * @param licenseName Name for the created license.
         * 
         * @return builder
         * 
         */
        public Builder licenseName(String licenseName) {
            return licenseName(Output.of(licenseName));
        }

        /**
         * @param productName Product name for the created license.
         * 
         * @return builder
         * 
         */
        public Builder productName(Output<String> productName) {
            $.productName = productName;
            return this;
        }

        /**
         * @param productName Product name for the created license.
         * 
         * @return builder
         * 
         */
        public Builder productName(String productName) {
            return productName(Output.of(productName));
        }

        /**
         * @param productSKU ProductSKU of the license.
         * 
         * @return builder
         * 
         */
        public Builder productSKU(@Nullable Output<String> productSKU) {
            $.productSKU = productSKU;
            return this;
        }

        /**
         * @param productSKU ProductSKU of the license.
         * 
         * @return builder
         * 
         */
        public Builder productSKU(String productSKU) {
            return productSKU(Output.of(productSKU));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder validity(Output<LicenseValidityDateFormatArgs> validity) {
            $.validity = validity;
            return this;
        }

        public Builder validity(LicenseValidityDateFormatArgs validity) {
            return validity(Output.of(validity));
        }

        public LicenseArgs build() {
            $.consumptionConfiguration = Objects.requireNonNull($.consumptionConfiguration, "expected parameter 'consumptionConfiguration' to be non-null");
            $.entitlements = Objects.requireNonNull($.entitlements, "expected parameter 'entitlements' to be non-null");
            $.homeRegion = Objects.requireNonNull($.homeRegion, "expected parameter 'homeRegion' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.productName = Objects.requireNonNull($.productName, "expected parameter 'productName' to be non-null");
            $.validity = Objects.requireNonNull($.validity, "expected parameter 'validity' to be non-null");
            return $;
        }
    }

}
