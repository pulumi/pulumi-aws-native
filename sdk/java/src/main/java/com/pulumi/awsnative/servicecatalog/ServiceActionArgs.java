// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.servicecatalog;

import com.pulumi.awsnative.servicecatalog.enums.ServiceActionAcceptLanguage;
import com.pulumi.awsnative.servicecatalog.enums.ServiceActionDefinitionType;
import com.pulumi.awsnative.servicecatalog.inputs.ServiceActionDefinitionParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceActionArgs Empty = new ServiceActionArgs();

    @Import(name="acceptLanguage")
    private @Nullable Output<ServiceActionAcceptLanguage> acceptLanguage;

    public Optional<Output<ServiceActionAcceptLanguage>> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }

    @Import(name="definition", required=true)
    private Output<List<ServiceActionDefinitionParameterArgs>> definition;

    public Output<List<ServiceActionDefinitionParameterArgs>> definition() {
        return this.definition;
    }

    @Import(name="definitionType", required=true)
    private Output<ServiceActionDefinitionType> definitionType;

    public Output<ServiceActionDefinitionType> definitionType() {
        return this.definitionType;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ServiceActionArgs() {}

    private ServiceActionArgs(ServiceActionArgs $) {
        this.acceptLanguage = $.acceptLanguage;
        this.definition = $.definition;
        this.definitionType = $.definitionType;
        this.description = $.description;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceActionArgs $;

        public Builder() {
            $ = new ServiceActionArgs();
        }

        public Builder(ServiceActionArgs defaults) {
            $ = new ServiceActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceptLanguage(@Nullable Output<ServiceActionAcceptLanguage> acceptLanguage) {
            $.acceptLanguage = acceptLanguage;
            return this;
        }

        public Builder acceptLanguage(ServiceActionAcceptLanguage acceptLanguage) {
            return acceptLanguage(Output.of(acceptLanguage));
        }

        public Builder definition(Output<List<ServiceActionDefinitionParameterArgs>> definition) {
            $.definition = definition;
            return this;
        }

        public Builder definition(List<ServiceActionDefinitionParameterArgs> definition) {
            return definition(Output.of(definition));
        }

        public Builder definition(ServiceActionDefinitionParameterArgs... definition) {
            return definition(List.of(definition));
        }

        public Builder definitionType(Output<ServiceActionDefinitionType> definitionType) {
            $.definitionType = definitionType;
            return this;
        }

        public Builder definitionType(ServiceActionDefinitionType definitionType) {
            return definitionType(Output.of(definitionType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceActionArgs build() {
            $.definition = Objects.requireNonNull($.definition, "expected parameter 'definition' to be non-null");
            $.definitionType = Objects.requireNonNull($.definitionType, "expected parameter 'definitionType' to be non-null");
            return $;
        }
    }

}
