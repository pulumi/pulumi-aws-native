// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.evidently;

import com.pulumi.awsnative.evidently.inputs.LaunchExecutionStatusObjectArgs;
import com.pulumi.awsnative.evidently.inputs.LaunchGroupObjectArgs;
import com.pulumi.awsnative.evidently.inputs.LaunchMetricDefinitionObjectArgs;
import com.pulumi.awsnative.evidently.inputs.LaunchStepConfigArgs;
import com.pulumi.awsnative.evidently.inputs.LaunchTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LaunchArgs extends com.pulumi.resources.ResourceArgs {

    public static final LaunchArgs Empty = new LaunchArgs();

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Start or Stop Launch Launch. Default is not started.
     * 
     */
    @Import(name="executionStatus")
    private @Nullable Output<LaunchExecutionStatusObjectArgs> executionStatus;

    /**
     * @return Start or Stop Launch Launch. Default is not started.
     * 
     */
    public Optional<Output<LaunchExecutionStatusObjectArgs>> executionStatus() {
        return Optional.ofNullable(this.executionStatus);
    }

    @Import(name="groups", required=true)
    private Output<List<LaunchGroupObjectArgs>> groups;

    public Output<List<LaunchGroupObjectArgs>> groups() {
        return this.groups;
    }

    @Import(name="metricMonitors")
    private @Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors;

    public Optional<Output<List<LaunchMetricDefinitionObjectArgs>>> metricMonitors() {
        return Optional.ofNullable(this.metricMonitors);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="project", required=true)
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }

    @Import(name="randomizationSalt")
    private @Nullable Output<String> randomizationSalt;

    public Optional<Output<String>> randomizationSalt() {
        return Optional.ofNullable(this.randomizationSalt);
    }

    @Import(name="scheduledSplitsConfig", required=true)
    private Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig;

    public Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig() {
        return this.scheduledSplitsConfig;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LaunchTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<LaunchTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LaunchArgs() {}

    private LaunchArgs(LaunchArgs $) {
        this.description = $.description;
        this.executionStatus = $.executionStatus;
        this.groups = $.groups;
        this.metricMonitors = $.metricMonitors;
        this.name = $.name;
        this.project = $.project;
        this.randomizationSalt = $.randomizationSalt;
        this.scheduledSplitsConfig = $.scheduledSplitsConfig;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchArgs $;

        public Builder() {
            $ = new LaunchArgs();
        }

        public Builder(LaunchArgs defaults) {
            $ = new LaunchArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param executionStatus Start or Stop Launch Launch. Default is not started.
         * 
         * @return builder
         * 
         */
        public Builder executionStatus(@Nullable Output<LaunchExecutionStatusObjectArgs> executionStatus) {
            $.executionStatus = executionStatus;
            return this;
        }

        /**
         * @param executionStatus Start or Stop Launch Launch. Default is not started.
         * 
         * @return builder
         * 
         */
        public Builder executionStatus(LaunchExecutionStatusObjectArgs executionStatus) {
            return executionStatus(Output.of(executionStatus));
        }

        public Builder groups(Output<List<LaunchGroupObjectArgs>> groups) {
            $.groups = groups;
            return this;
        }

        public Builder groups(List<LaunchGroupObjectArgs> groups) {
            return groups(Output.of(groups));
        }

        public Builder groups(LaunchGroupObjectArgs... groups) {
            return groups(List.of(groups));
        }

        public Builder metricMonitors(@Nullable Output<List<LaunchMetricDefinitionObjectArgs>> metricMonitors) {
            $.metricMonitors = metricMonitors;
            return this;
        }

        public Builder metricMonitors(List<LaunchMetricDefinitionObjectArgs> metricMonitors) {
            return metricMonitors(Output.of(metricMonitors));
        }

        public Builder metricMonitors(LaunchMetricDefinitionObjectArgs... metricMonitors) {
            return metricMonitors(List.of(metricMonitors));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder randomizationSalt(@Nullable Output<String> randomizationSalt) {
            $.randomizationSalt = randomizationSalt;
            return this;
        }

        public Builder randomizationSalt(String randomizationSalt) {
            return randomizationSalt(Output.of(randomizationSalt));
        }

        public Builder scheduledSplitsConfig(Output<List<LaunchStepConfigArgs>> scheduledSplitsConfig) {
            $.scheduledSplitsConfig = scheduledSplitsConfig;
            return this;
        }

        public Builder scheduledSplitsConfig(List<LaunchStepConfigArgs> scheduledSplitsConfig) {
            return scheduledSplitsConfig(Output.of(scheduledSplitsConfig));
        }

        public Builder scheduledSplitsConfig(LaunchStepConfigArgs... scheduledSplitsConfig) {
            return scheduledSplitsConfig(List.of(scheduledSplitsConfig));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LaunchTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LaunchTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(LaunchTagArgs... tags) {
            return tags(List.of(tags));
        }

        public LaunchArgs build() {
            $.groups = Objects.requireNonNull($.groups, "expected parameter 'groups' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            $.scheduledSplitsConfig = Objects.requireNonNull($.scheduledSplitsConfig, "expected parameter 'scheduledSplitsConfig' to be non-null");
            return $;
        }
    }

}
