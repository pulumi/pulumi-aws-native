// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.rds;

import com.pulumi.awsnative.rds.enums.DBProxyEngineFamily;
import com.pulumi.awsnative.rds.inputs.DBProxyAuthFormatArgs;
import com.pulumi.awsnative.rds.inputs.DBProxyTagFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DBProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final DBProxyArgs Empty = new DBProxyArgs();

    /**
     * The authorization mechanism that the proxy uses.
     * 
     */
    @Import(name="auth", required=true)
    private Output<List<DBProxyAuthFormatArgs>> auth;

    /**
     * @return The authorization mechanism that the proxy uses.
     * 
     */
    public Output<List<DBProxyAuthFormatArgs>> auth() {
        return this.auth;
    }

    /**
     * The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
     * 
     */
    @Import(name="dBProxyName")
    private @Nullable Output<String> dBProxyName;

    /**
     * @return The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
     * 
     */
    public Optional<Output<String>> dBProxyName() {
        return Optional.ofNullable(this.dBProxyName);
    }

    /**
     * Whether the proxy includes detailed information about SQL statements in its logs.
     * 
     */
    @Import(name="debugLogging")
    private @Nullable Output<Boolean> debugLogging;

    /**
     * @return Whether the proxy includes detailed information about SQL statements in its logs.
     * 
     */
    public Optional<Output<Boolean>> debugLogging() {
        return Optional.ofNullable(this.debugLogging);
    }

    /**
     * The kinds of databases that the proxy can connect to.
     * 
     */
    @Import(name="engineFamily", required=true)
    private Output<DBProxyEngineFamily> engineFamily;

    /**
     * @return The kinds of databases that the proxy can connect to.
     * 
     */
    public Output<DBProxyEngineFamily> engineFamily() {
        return this.engineFamily;
    }

    /**
     * The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
     * 
     */
    @Import(name="idleClientTimeout")
    private @Nullable Output<Integer> idleClientTimeout;

    /**
     * @return The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
     * 
     */
    public Optional<Output<Integer>> idleClientTimeout() {
        return Optional.ofNullable(this.idleClientTimeout);
    }

    /**
     * A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
     * 
     */
    @Import(name="requireTLS")
    private @Nullable Output<Boolean> requireTLS;

    /**
     * @return A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
     * 
     */
    public Optional<Output<Boolean>> requireTLS() {
        return Optional.ofNullable(this.requireTLS);
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
     * 
     */
    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DBProxyTagFormatArgs>> tags;

    /**
     * @return An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
     * 
     */
    public Optional<Output<List<DBProxyTagFormatArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * VPC security group IDs to associate with the new proxy.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
    private @Nullable Output<List<String>> vpcSecurityGroupIds;

    /**
     * @return VPC security group IDs to associate with the new proxy.
     * 
     */
    public Optional<Output<List<String>>> vpcSecurityGroupIds() {
        return Optional.ofNullable(this.vpcSecurityGroupIds);
    }

    /**
     * VPC subnet IDs to associate with the new proxy.
     * 
     */
    @Import(name="vpcSubnetIds", required=true)
    private Output<List<String>> vpcSubnetIds;

    /**
     * @return VPC subnet IDs to associate with the new proxy.
     * 
     */
    public Output<List<String>> vpcSubnetIds() {
        return this.vpcSubnetIds;
    }

    private DBProxyArgs() {}

    private DBProxyArgs(DBProxyArgs $) {
        this.auth = $.auth;
        this.dBProxyName = $.dBProxyName;
        this.debugLogging = $.debugLogging;
        this.engineFamily = $.engineFamily;
        this.idleClientTimeout = $.idleClientTimeout;
        this.requireTLS = $.requireTLS;
        this.roleArn = $.roleArn;
        this.tags = $.tags;
        this.vpcSecurityGroupIds = $.vpcSecurityGroupIds;
        this.vpcSubnetIds = $.vpcSubnetIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DBProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DBProxyArgs $;

        public Builder() {
            $ = new DBProxyArgs();
        }

        public Builder(DBProxyArgs defaults) {
            $ = new DBProxyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth The authorization mechanism that the proxy uses.
         * 
         * @return builder
         * 
         */
        public Builder auth(Output<List<DBProxyAuthFormatArgs>> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth The authorization mechanism that the proxy uses.
         * 
         * @return builder
         * 
         */
        public Builder auth(List<DBProxyAuthFormatArgs> auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param auth The authorization mechanism that the proxy uses.
         * 
         * @return builder
         * 
         */
        public Builder auth(DBProxyAuthFormatArgs... auth) {
            return auth(List.of(auth));
        }

        /**
         * @param dBProxyName The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
         * 
         * @return builder
         * 
         */
        public Builder dBProxyName(@Nullable Output<String> dBProxyName) {
            $.dBProxyName = dBProxyName;
            return this;
        }

        /**
         * @param dBProxyName The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
         * 
         * @return builder
         * 
         */
        public Builder dBProxyName(String dBProxyName) {
            return dBProxyName(Output.of(dBProxyName));
        }

        /**
         * @param debugLogging Whether the proxy includes detailed information about SQL statements in its logs.
         * 
         * @return builder
         * 
         */
        public Builder debugLogging(@Nullable Output<Boolean> debugLogging) {
            $.debugLogging = debugLogging;
            return this;
        }

        /**
         * @param debugLogging Whether the proxy includes detailed information about SQL statements in its logs.
         * 
         * @return builder
         * 
         */
        public Builder debugLogging(Boolean debugLogging) {
            return debugLogging(Output.of(debugLogging));
        }

        /**
         * @param engineFamily The kinds of databases that the proxy can connect to.
         * 
         * @return builder
         * 
         */
        public Builder engineFamily(Output<DBProxyEngineFamily> engineFamily) {
            $.engineFamily = engineFamily;
            return this;
        }

        /**
         * @param engineFamily The kinds of databases that the proxy can connect to.
         * 
         * @return builder
         * 
         */
        public Builder engineFamily(DBProxyEngineFamily engineFamily) {
            return engineFamily(Output.of(engineFamily));
        }

        /**
         * @param idleClientTimeout The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
         * 
         * @return builder
         * 
         */
        public Builder idleClientTimeout(@Nullable Output<Integer> idleClientTimeout) {
            $.idleClientTimeout = idleClientTimeout;
            return this;
        }

        /**
         * @param idleClientTimeout The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
         * 
         * @return builder
         * 
         */
        public Builder idleClientTimeout(Integer idleClientTimeout) {
            return idleClientTimeout(Output.of(idleClientTimeout));
        }

        /**
         * @param requireTLS A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
         * 
         * @return builder
         * 
         */
        public Builder requireTLS(@Nullable Output<Boolean> requireTLS) {
            $.requireTLS = requireTLS;
            return this;
        }

        /**
         * @param requireTLS A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
         * 
         * @return builder
         * 
         */
        public Builder requireTLS(Boolean requireTLS) {
            return requireTLS(Output.of(requireTLS));
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param tags An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DBProxyTagFormatArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DBProxyTagFormatArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
         * 
         * @return builder
         * 
         */
        public Builder tags(DBProxyTagFormatArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vpcSecurityGroupIds VPC security group IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            $.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        /**
         * @param vpcSecurityGroupIds VPC security group IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(Output.of(vpcSecurityGroupIds));
        }

        /**
         * @param vpcSecurityGroupIds VPC security group IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }

        /**
         * @param vpcSubnetIds VPC subnet IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSubnetIds(Output<List<String>> vpcSubnetIds) {
            $.vpcSubnetIds = vpcSubnetIds;
            return this;
        }

        /**
         * @param vpcSubnetIds VPC subnet IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSubnetIds(List<String> vpcSubnetIds) {
            return vpcSubnetIds(Output.of(vpcSubnetIds));
        }

        /**
         * @param vpcSubnetIds VPC subnet IDs to associate with the new proxy.
         * 
         * @return builder
         * 
         */
        public Builder vpcSubnetIds(String... vpcSubnetIds) {
            return vpcSubnetIds(List.of(vpcSubnetIds));
        }

        public DBProxyArgs build() {
            $.auth = Objects.requireNonNull($.auth, "expected parameter 'auth' to be non-null");
            $.engineFamily = Objects.requireNonNull($.engineFamily, "expected parameter 'engineFamily' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.vpcSubnetIds = Objects.requireNonNull($.vpcSubnetIds, "expected parameter 'vpcSubnetIds' to be non-null");
            return $;
        }
    }

}
