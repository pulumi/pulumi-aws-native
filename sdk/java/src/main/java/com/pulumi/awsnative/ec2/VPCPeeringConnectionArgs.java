// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2;

import com.pulumi.awsnative.ec2.inputs.VPCPeeringConnectionTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VPCPeeringConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VPCPeeringConnectionArgs Empty = new VPCPeeringConnectionArgs();

    /**
     * The AWS account ID of the owner of the accepter VPC.
     * 
     */
    @Import(name="peerOwnerId")
    private @Nullable Output<String> peerOwnerId;

    /**
     * @return The AWS account ID of the owner of the accepter VPC.
     * 
     */
    public Optional<Output<String>> peerOwnerId() {
        return Optional.ofNullable(this.peerOwnerId);
    }

    /**
     * The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
     * 
     */
    @Import(name="peerRegion")
    private @Nullable Output<String> peerRegion;

    /**
     * @return The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
     * 
     */
    public Optional<Output<String>> peerRegion() {
        return Optional.ofNullable(this.peerRegion);
    }

    /**
     * The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
     * 
     */
    @Import(name="peerRoleArn")
    private @Nullable Output<String> peerRoleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
     * 
     */
    public Optional<Output<String>> peerRoleArn() {
        return Optional.ofNullable(this.peerRoleArn);
    }

    /**
     * The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
     * 
     */
    @Import(name="peerVpcId", required=true)
    private Output<String> peerVpcId;

    /**
     * @return The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
     * 
     */
    public Output<String> peerVpcId() {
        return this.peerVpcId;
    }

    @Import(name="tags")
    private @Nullable Output<List<VPCPeeringConnectionTagArgs>> tags;

    public Optional<Output<List<VPCPeeringConnectionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VPC.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return The ID of the VPC.
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    private VPCPeeringConnectionArgs() {}

    private VPCPeeringConnectionArgs(VPCPeeringConnectionArgs $) {
        this.peerOwnerId = $.peerOwnerId;
        this.peerRegion = $.peerRegion;
        this.peerRoleArn = $.peerRoleArn;
        this.peerVpcId = $.peerVpcId;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VPCPeeringConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VPCPeeringConnectionArgs $;

        public Builder() {
            $ = new VPCPeeringConnectionArgs();
        }

        public Builder(VPCPeeringConnectionArgs defaults) {
            $ = new VPCPeeringConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param peerOwnerId The AWS account ID of the owner of the accepter VPC.
         * 
         * @return builder
         * 
         */
        public Builder peerOwnerId(@Nullable Output<String> peerOwnerId) {
            $.peerOwnerId = peerOwnerId;
            return this;
        }

        /**
         * @param peerOwnerId The AWS account ID of the owner of the accepter VPC.
         * 
         * @return builder
         * 
         */
        public Builder peerOwnerId(String peerOwnerId) {
            return peerOwnerId(Output.of(peerOwnerId));
        }

        /**
         * @param peerRegion The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
         * 
         * @return builder
         * 
         */
        public Builder peerRegion(@Nullable Output<String> peerRegion) {
            $.peerRegion = peerRegion;
            return this;
        }

        /**
         * @param peerRegion The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
         * 
         * @return builder
         * 
         */
        public Builder peerRegion(String peerRegion) {
            return peerRegion(Output.of(peerRegion));
        }

        /**
         * @param peerRoleArn The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
         * 
         * @return builder
         * 
         */
        public Builder peerRoleArn(@Nullable Output<String> peerRoleArn) {
            $.peerRoleArn = peerRoleArn;
            return this;
        }

        /**
         * @param peerRoleArn The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
         * 
         * @return builder
         * 
         */
        public Builder peerRoleArn(String peerRoleArn) {
            return peerRoleArn(Output.of(peerRoleArn));
        }

        /**
         * @param peerVpcId The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
         * 
         * @return builder
         * 
         */
        public Builder peerVpcId(Output<String> peerVpcId) {
            $.peerVpcId = peerVpcId;
            return this;
        }

        /**
         * @param peerVpcId The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
         * 
         * @return builder
         * 
         */
        public Builder peerVpcId(String peerVpcId) {
            return peerVpcId(Output.of(peerVpcId));
        }

        public Builder tags(@Nullable Output<List<VPCPeeringConnectionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<VPCPeeringConnectionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(VPCPeeringConnectionTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public VPCPeeringConnectionArgs build() {
            $.peerVpcId = Objects.requireNonNull($.peerVpcId, "expected parameter 'peerVpcId' to be non-null");
            $.vpcId = Objects.requireNonNull($.vpcId, "expected parameter 'vpcId' to be non-null");
            return $;
        }
    }

}
