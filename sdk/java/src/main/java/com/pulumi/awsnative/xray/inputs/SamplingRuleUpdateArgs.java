// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.xray.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamplingRuleUpdateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamplingRuleUpdateArgs Empty = new SamplingRuleUpdateArgs();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Object> attributes;

    /**
     * @return Matches attributes derived from the request.
     * 
     */
    public Optional<Output<Object>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @Import(name="fixedRate")
    private @Nullable Output<Double> fixedRate;

    /**
     * @return The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    public Optional<Output<Double>> fixedRate() {
        return Optional.ofNullable(this.fixedRate);
    }

    /**
     * Matches the HTTP method from a request URL.
     * 
     */
    @Import(name="hTTPMethod")
    private @Nullable Output<String> hTTPMethod;

    /**
     * @return Matches the HTTP method from a request URL.
     * 
     */
    public Optional<Output<String>> hTTPMethod() {
        return Optional.ofNullable(this.hTTPMethod);
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Matches the hostname from a request URL.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the sampling rule.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @Import(name="reservoirSize")
    private @Nullable Output<Integer> reservoirSize;

    /**
     * @return A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    public Optional<Output<Integer>> reservoirSize() {
        return Optional.ofNullable(this.reservoirSize);
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @Import(name="resourceARN")
    private @Nullable Output<String> resourceARN;

    /**
     * @return Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    public Optional<Output<String>> resourceARN() {
        return Optional.ofNullable(this.resourceARN);
    }

    @Import(name="ruleARN")
    private @Nullable Output<String> ruleARN;

    public Optional<Output<String>> ruleARN() {
        return Optional.ofNullable(this.ruleARN);
    }

    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * Matches the name that the service uses to identify itself in segments.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Matches the name that the service uses to identify itself in segments.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Matches the origin that the service uses to identify its type in segments.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return Matches the origin that the service uses to identify its type in segments.
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @Import(name="uRLPath")
    private @Nullable Output<String> uRLPath;

    /**
     * @return Matches the path from a request URL.
     * 
     */
    public Optional<Output<String>> uRLPath() {
        return Optional.ofNullable(this.uRLPath);
    }

    private SamplingRuleUpdateArgs() {}

    private SamplingRuleUpdateArgs(SamplingRuleUpdateArgs $) {
        this.attributes = $.attributes;
        this.fixedRate = $.fixedRate;
        this.hTTPMethod = $.hTTPMethod;
        this.host = $.host;
        this.priority = $.priority;
        this.reservoirSize = $.reservoirSize;
        this.resourceARN = $.resourceARN;
        this.ruleARN = $.ruleARN;
        this.ruleName = $.ruleName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
        this.uRLPath = $.uRLPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingRuleUpdateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingRuleUpdateArgs $;

        public Builder() {
            $ = new SamplingRuleUpdateArgs();
        }

        public Builder(SamplingRuleUpdateArgs defaults) {
            $ = new SamplingRuleUpdateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Matches attributes derived from the request.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Object> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Matches attributes derived from the request.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Object attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param fixedRate The percentage of matching requests to instrument, after the reservoir is exhausted.
         * 
         * @return builder
         * 
         */
        public Builder fixedRate(@Nullable Output<Double> fixedRate) {
            $.fixedRate = fixedRate;
            return this;
        }

        /**
         * @param fixedRate The percentage of matching requests to instrument, after the reservoir is exhausted.
         * 
         * @return builder
         * 
         */
        public Builder fixedRate(Double fixedRate) {
            return fixedRate(Output.of(fixedRate));
        }

        /**
         * @param hTTPMethod Matches the HTTP method from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder hTTPMethod(@Nullable Output<String> hTTPMethod) {
            $.hTTPMethod = hTTPMethod;
            return this;
        }

        /**
         * @param hTTPMethod Matches the HTTP method from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder hTTPMethod(String hTTPMethod) {
            return hTTPMethod(Output.of(hTTPMethod));
        }

        /**
         * @param host Matches the hostname from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Matches the hostname from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param priority The priority of the sampling rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the sampling rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param reservoirSize A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         * 
         * @return builder
         * 
         */
        public Builder reservoirSize(@Nullable Output<Integer> reservoirSize) {
            $.reservoirSize = reservoirSize;
            return this;
        }

        /**
         * @param reservoirSize A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         * 
         * @return builder
         * 
         */
        public Builder reservoirSize(Integer reservoirSize) {
            return reservoirSize(Output.of(reservoirSize));
        }

        /**
         * @param resourceARN Matches the ARN of the AWS resource on which the service runs.
         * 
         * @return builder
         * 
         */
        public Builder resourceARN(@Nullable Output<String> resourceARN) {
            $.resourceARN = resourceARN;
            return this;
        }

        /**
         * @param resourceARN Matches the ARN of the AWS resource on which the service runs.
         * 
         * @return builder
         * 
         */
        public Builder resourceARN(String resourceARN) {
            return resourceARN(Output.of(resourceARN));
        }

        public Builder ruleARN(@Nullable Output<String> ruleARN) {
            $.ruleARN = ruleARN;
            return this;
        }

        public Builder ruleARN(String ruleARN) {
            return ruleARN(Output.of(ruleARN));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param serviceName Matches the name that the service uses to identify itself in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Matches the name that the service uses to identify itself in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param serviceType Matches the origin that the service uses to identify its type in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType Matches the origin that the service uses to identify its type in segments.
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param uRLPath Matches the path from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder uRLPath(@Nullable Output<String> uRLPath) {
            $.uRLPath = uRLPath;
            return this;
        }

        /**
         * @param uRLPath Matches the path from a request URL.
         * 
         * @return builder
         * 
         */
        public Builder uRLPath(String uRLPath) {
            return uRLPath(Output.of(uRLPath));
        }

        public SamplingRuleUpdateArgs build() {
            return $;
        }
    }

}
