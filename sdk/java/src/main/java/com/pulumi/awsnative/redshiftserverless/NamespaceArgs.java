// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.redshiftserverless;

import com.pulumi.awsnative.redshiftserverless.enums.NamespaceLogExport;
import com.pulumi.awsnative.redshiftserverless.inputs.NamespaceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NamespaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NamespaceArgs Empty = new NamespaceArgs();

    /**
     * The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
     * 
     */
    @Import(name="adminUserPassword")
    private @Nullable Output<String> adminUserPassword;

    /**
     * @return The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
     * 
     */
    public Optional<Output<String>> adminUserPassword() {
        return Optional.ofNullable(this.adminUserPassword);
    }

    /**
     * The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable Output<String> adminUsername;

    /**
     * @return The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    public Optional<Output<String>> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * The default IAM role ARN for the namespace that is being created.
     * 
     */
    @Import(name="defaultIamRoleArn")
    private @Nullable Output<String> defaultIamRoleArn;

    /**
     * @return The default IAM role ARN for the namespace that is being created.
     * 
     */
    public Optional<Output<String>> defaultIamRoleArn() {
        return Optional.ofNullable(this.defaultIamRoleArn);
    }

    /**
     * The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
     * 
     */
    @Import(name="finalSnapshotName")
    private @Nullable Output<String> finalSnapshotName;

    /**
     * @return The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
     * 
     */
    public Optional<Output<String>> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }

    /**
     * The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
     * 
     */
    @Import(name="finalSnapshotRetentionPeriod")
    private @Nullable Output<Integer> finalSnapshotRetentionPeriod;

    /**
     * @return The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
     * 
     */
    public Optional<Output<Integer>> finalSnapshotRetentionPeriod() {
        return Optional.ofNullable(this.finalSnapshotRetentionPeriod);
    }

    /**
     * A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     * 
     */
    @Import(name="iamRoles")
    private @Nullable Output<List<String>> iamRoles;

    /**
     * @return A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     * 
     */
    public Optional<Output<List<String>>> iamRoles() {
        return Optional.ofNullable(this.iamRoles);
    }

    /**
     * The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
     * 
     */
    @Import(name="logExports")
    private @Nullable Output<List<NamespaceLogExport>> logExports;

    /**
     * @return The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
     * 
     */
    public Optional<Output<List<NamespaceLogExport>>> logExports() {
        return Optional.ofNullable(this.logExports);
    }

    /**
     * A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    /**
     * The list of tags for the namespace.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NamespaceTagArgs>> tags;

    /**
     * @return The list of tags for the namespace.
     * 
     */
    public Optional<Output<List<NamespaceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NamespaceArgs() {}

    private NamespaceArgs(NamespaceArgs $) {
        this.adminUserPassword = $.adminUserPassword;
        this.adminUsername = $.adminUsername;
        this.dbName = $.dbName;
        this.defaultIamRoleArn = $.defaultIamRoleArn;
        this.finalSnapshotName = $.finalSnapshotName;
        this.finalSnapshotRetentionPeriod = $.finalSnapshotRetentionPeriod;
        this.iamRoles = $.iamRoles;
        this.kmsKeyId = $.kmsKeyId;
        this.logExports = $.logExports;
        this.namespaceName = $.namespaceName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceArgs $;

        public Builder() {
            $ = new NamespaceArgs();
        }

        public Builder(NamespaceArgs defaults) {
            $ = new NamespaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminUserPassword The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
         * 
         * @return builder
         * 
         */
        public Builder adminUserPassword(@Nullable Output<String> adminUserPassword) {
            $.adminUserPassword = adminUserPassword;
            return this;
        }

        /**
         * @param adminUserPassword The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
         * 
         * @return builder
         * 
         */
        public Builder adminUserPassword(String adminUserPassword) {
            return adminUserPassword(Output.of(adminUserPassword));
        }

        /**
         * @param adminUsername The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(@Nullable Output<String> adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        /**
         * @param adminUsername The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
         * 
         * @return builder
         * 
         */
        public Builder adminUsername(String adminUsername) {
            return adminUsername(Output.of(adminUsername));
        }

        /**
         * @param dbName The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param defaultIamRoleArn The default IAM role ARN for the namespace that is being created.
         * 
         * @return builder
         * 
         */
        public Builder defaultIamRoleArn(@Nullable Output<String> defaultIamRoleArn) {
            $.defaultIamRoleArn = defaultIamRoleArn;
            return this;
        }

        /**
         * @param defaultIamRoleArn The default IAM role ARN for the namespace that is being created.
         * 
         * @return builder
         * 
         */
        public Builder defaultIamRoleArn(String defaultIamRoleArn) {
            return defaultIamRoleArn(Output.of(defaultIamRoleArn));
        }

        /**
         * @param finalSnapshotName The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            $.finalSnapshotName = finalSnapshotName;
            return this;
        }

        /**
         * @param finalSnapshotName The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotName(String finalSnapshotName) {
            return finalSnapshotName(Output.of(finalSnapshotName));
        }

        /**
         * @param finalSnapshotRetentionPeriod The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotRetentionPeriod(@Nullable Output<Integer> finalSnapshotRetentionPeriod) {
            $.finalSnapshotRetentionPeriod = finalSnapshotRetentionPeriod;
            return this;
        }

        /**
         * @param finalSnapshotRetentionPeriod The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
         * 
         * @return builder
         * 
         */
        public Builder finalSnapshotRetentionPeriod(Integer finalSnapshotRetentionPeriod) {
            return finalSnapshotRetentionPeriod(Output.of(finalSnapshotRetentionPeriod));
        }

        /**
         * @param iamRoles A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
         * 
         * @return builder
         * 
         */
        public Builder iamRoles(@Nullable Output<List<String>> iamRoles) {
            $.iamRoles = iamRoles;
            return this;
        }

        /**
         * @param iamRoles A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
         * 
         * @return builder
         * 
         */
        public Builder iamRoles(List<String> iamRoles) {
            return iamRoles(Output.of(iamRoles));
        }

        /**
         * @param iamRoles A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
         * 
         * @return builder
         * 
         */
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }

        /**
         * @param kmsKeyId The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param logExports The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
         * 
         * @return builder
         * 
         */
        public Builder logExports(@Nullable Output<List<NamespaceLogExport>> logExports) {
            $.logExports = logExports;
            return this;
        }

        /**
         * @param logExports The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
         * 
         * @return builder
         * 
         */
        public Builder logExports(List<NamespaceLogExport> logExports) {
            return logExports(Output.of(logExports));
        }

        /**
         * @param logExports The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
         * 
         * @return builder
         * 
         */
        public Builder logExports(NamespaceLogExport... logExports) {
            return logExports(List.of(logExports));
        }

        /**
         * @param namespaceName A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param tags The list of tags for the namespace.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NamespaceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The list of tags for the namespace.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NamespaceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The list of tags for the namespace.
         * 
         * @return builder
         * 
         */
        public Builder tags(NamespaceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NamespaceArgs build() {
            return $;
        }
    }

}
