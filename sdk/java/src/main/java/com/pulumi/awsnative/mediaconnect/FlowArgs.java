// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect;

import com.pulumi.awsnative.mediaconnect.inputs.FlowFailoverConfigArgs;
import com.pulumi.awsnative.mediaconnect.inputs.FlowSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowArgs Empty = new FlowArgs();

    /**
     * The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * The name of the flow.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the flow.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The source of the flow.
     * 
     */
    @Import(name="source", required=true)
    private Output<FlowSourceArgs> source;

    /**
     * @return The source of the flow.
     * 
     */
    public Output<FlowSourceArgs> source() {
        return this.source;
    }

    /**
     * The source failover config of the flow.
     * 
     */
    @Import(name="sourceFailoverConfig")
    private @Nullable Output<FlowFailoverConfigArgs> sourceFailoverConfig;

    /**
     * @return The source failover config of the flow.
     * 
     */
    public Optional<Output<FlowFailoverConfigArgs>> sourceFailoverConfig() {
        return Optional.ofNullable(this.sourceFailoverConfig);
    }

    private FlowArgs() {}

    private FlowArgs(FlowArgs $) {
        this.availabilityZone = $.availabilityZone;
        this.name = $.name;
        this.source = $.source;
        this.sourceFailoverConfig = $.sourceFailoverConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowArgs $;

        public Builder() {
            $ = new FlowArgs();
        }

        public Builder(FlowArgs defaults) {
            $ = new FlowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZone The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param name The name of the flow.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the flow.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param source The source of the flow.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<FlowSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source of the flow.
         * 
         * @return builder
         * 
         */
        public Builder source(FlowSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceFailoverConfig The source failover config of the flow.
         * 
         * @return builder
         * 
         */
        public Builder sourceFailoverConfig(@Nullable Output<FlowFailoverConfigArgs> sourceFailoverConfig) {
            $.sourceFailoverConfig = sourceFailoverConfig;
            return this;
        }

        /**
         * @param sourceFailoverConfig The source failover config of the flow.
         * 
         * @return builder
         * 
         */
        public Builder sourceFailoverConfig(FlowFailoverConfigArgs sourceFailoverConfig) {
            return sourceFailoverConfig(Output.of(sourceFailoverConfig));
        }

        public FlowArgs build() {
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
