// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.robomaker.inputs;

import com.pulumi.awsnative.robomaker.enums.RobotApplicationSourceConfigArchitecture;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class RobotApplicationSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RobotApplicationSourceConfigArgs Empty = new RobotApplicationSourceConfigArgs();

    /**
     * The architecture of robot application.
     * 
     */
    @Import(name="architecture", required=true)
    private Output<RobotApplicationSourceConfigArchitecture> architecture;

    /**
     * @return The architecture of robot application.
     * 
     */
    public Output<RobotApplicationSourceConfigArchitecture> architecture() {
        return this.architecture;
    }

    /**
     * The Arn of the S3Bucket that stores the robot application source.
     * 
     */
    @Import(name="s3Bucket", required=true)
    private Output<String> s3Bucket;

    /**
     * @return The Arn of the S3Bucket that stores the robot application source.
     * 
     */
    public Output<String> s3Bucket() {
        return this.s3Bucket;
    }

    /**
     * The s3 key of robot application source.
     * 
     */
    @Import(name="s3Key", required=true)
    private Output<String> s3Key;

    /**
     * @return The s3 key of robot application source.
     * 
     */
    public Output<String> s3Key() {
        return this.s3Key;
    }

    private RobotApplicationSourceConfigArgs() {}

    private RobotApplicationSourceConfigArgs(RobotApplicationSourceConfigArgs $) {
        this.architecture = $.architecture;
        this.s3Bucket = $.s3Bucket;
        this.s3Key = $.s3Key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RobotApplicationSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RobotApplicationSourceConfigArgs $;

        public Builder() {
            $ = new RobotApplicationSourceConfigArgs();
        }

        public Builder(RobotApplicationSourceConfigArgs defaults) {
            $ = new RobotApplicationSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The architecture of robot application.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Output<RobotApplicationSourceConfigArchitecture> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of robot application.
         * 
         * @return builder
         * 
         */
        public Builder architecture(RobotApplicationSourceConfigArchitecture architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param s3Bucket The Arn of the S3Bucket that stores the robot application source.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        /**
         * @param s3Bucket The Arn of the S3Bucket that stores the robot application source.
         * 
         * @return builder
         * 
         */
        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        /**
         * @param s3Key The s3 key of robot application source.
         * 
         * @return builder
         * 
         */
        public Builder s3Key(Output<String> s3Key) {
            $.s3Key = s3Key;
            return this;
        }

        /**
         * @param s3Key The s3 key of robot application source.
         * 
         * @return builder
         * 
         */
        public Builder s3Key(String s3Key) {
            return s3Key(Output.of(s3Key));
        }

        public RobotApplicationSourceConfigArgs build() {
            $.architecture = Objects.requireNonNull($.architecture, "expected parameter 'architecture' to be non-null");
            $.s3Bucket = Objects.requireNonNull($.s3Bucket, "expected parameter 's3Bucket' to be non-null");
            $.s3Key = Objects.requireNonNull($.s3Key, "expected parameter 's3Key' to be non-null");
            return $;
        }
    }

}
