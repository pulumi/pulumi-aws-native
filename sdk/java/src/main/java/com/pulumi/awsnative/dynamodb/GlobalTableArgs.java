// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.dynamodb;

import com.pulumi.awsnative.dynamodb.inputs.GlobalTableAttributeDefinitionArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableGlobalSecondaryIndexArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableKeySchemaArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableLocalSecondaryIndexArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableReplicaSpecificationArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableSSESpecificationArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableStreamSpecificationArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableTimeToLiveSpecificationArgs;
import com.pulumi.awsnative.dynamodb.inputs.GlobalTableWriteProvisionedThroughputSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalTableArgs Empty = new GlobalTableArgs();

    @Import(name="attributeDefinitions", required=true)
    private Output<List<GlobalTableAttributeDefinitionArgs>> attributeDefinitions;

    public Output<List<GlobalTableAttributeDefinitionArgs>> attributeDefinitions() {
        return this.attributeDefinitions;
    }

    @Import(name="billingMode")
    private @Nullable Output<String> billingMode;

    public Optional<Output<String>> billingMode() {
        return Optional.ofNullable(this.billingMode);
    }

    @Import(name="globalSecondaryIndexes")
    private @Nullable Output<List<GlobalTableGlobalSecondaryIndexArgs>> globalSecondaryIndexes;

    public Optional<Output<List<GlobalTableGlobalSecondaryIndexArgs>>> globalSecondaryIndexes() {
        return Optional.ofNullable(this.globalSecondaryIndexes);
    }

    @Import(name="keySchema", required=true)
    private Output<List<GlobalTableKeySchemaArgs>> keySchema;

    public Output<List<GlobalTableKeySchemaArgs>> keySchema() {
        return this.keySchema;
    }

    @Import(name="localSecondaryIndexes")
    private @Nullable Output<List<GlobalTableLocalSecondaryIndexArgs>> localSecondaryIndexes;

    public Optional<Output<List<GlobalTableLocalSecondaryIndexArgs>>> localSecondaryIndexes() {
        return Optional.ofNullable(this.localSecondaryIndexes);
    }

    @Import(name="replicas", required=true)
    private Output<List<GlobalTableReplicaSpecificationArgs>> replicas;

    public Output<List<GlobalTableReplicaSpecificationArgs>> replicas() {
        return this.replicas;
    }

    @Import(name="sSESpecification")
    private @Nullable Output<GlobalTableSSESpecificationArgs> sSESpecification;

    public Optional<Output<GlobalTableSSESpecificationArgs>> sSESpecification() {
        return Optional.ofNullable(this.sSESpecification);
    }

    @Import(name="streamSpecification")
    private @Nullable Output<GlobalTableStreamSpecificationArgs> streamSpecification;

    public Optional<Output<GlobalTableStreamSpecificationArgs>> streamSpecification() {
        return Optional.ofNullable(this.streamSpecification);
    }

    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    @Import(name="timeToLiveSpecification")
    private @Nullable Output<GlobalTableTimeToLiveSpecificationArgs> timeToLiveSpecification;

    public Optional<Output<GlobalTableTimeToLiveSpecificationArgs>> timeToLiveSpecification() {
        return Optional.ofNullable(this.timeToLiveSpecification);
    }

    @Import(name="writeProvisionedThroughputSettings")
    private @Nullable Output<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings;

    public Optional<Output<GlobalTableWriteProvisionedThroughputSettingsArgs>> writeProvisionedThroughputSettings() {
        return Optional.ofNullable(this.writeProvisionedThroughputSettings);
    }

    private GlobalTableArgs() {}

    private GlobalTableArgs(GlobalTableArgs $) {
        this.attributeDefinitions = $.attributeDefinitions;
        this.billingMode = $.billingMode;
        this.globalSecondaryIndexes = $.globalSecondaryIndexes;
        this.keySchema = $.keySchema;
        this.localSecondaryIndexes = $.localSecondaryIndexes;
        this.replicas = $.replicas;
        this.sSESpecification = $.sSESpecification;
        this.streamSpecification = $.streamSpecification;
        this.tableName = $.tableName;
        this.timeToLiveSpecification = $.timeToLiveSpecification;
        this.writeProvisionedThroughputSettings = $.writeProvisionedThroughputSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalTableArgs $;

        public Builder() {
            $ = new GlobalTableArgs();
        }

        public Builder(GlobalTableArgs defaults) {
            $ = new GlobalTableArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributeDefinitions(Output<List<GlobalTableAttributeDefinitionArgs>> attributeDefinitions) {
            $.attributeDefinitions = attributeDefinitions;
            return this;
        }

        public Builder attributeDefinitions(List<GlobalTableAttributeDefinitionArgs> attributeDefinitions) {
            return attributeDefinitions(Output.of(attributeDefinitions));
        }

        public Builder attributeDefinitions(GlobalTableAttributeDefinitionArgs... attributeDefinitions) {
            return attributeDefinitions(List.of(attributeDefinitions));
        }

        public Builder billingMode(@Nullable Output<String> billingMode) {
            $.billingMode = billingMode;
            return this;
        }

        public Builder billingMode(String billingMode) {
            return billingMode(Output.of(billingMode));
        }

        public Builder globalSecondaryIndexes(@Nullable Output<List<GlobalTableGlobalSecondaryIndexArgs>> globalSecondaryIndexes) {
            $.globalSecondaryIndexes = globalSecondaryIndexes;
            return this;
        }

        public Builder globalSecondaryIndexes(List<GlobalTableGlobalSecondaryIndexArgs> globalSecondaryIndexes) {
            return globalSecondaryIndexes(Output.of(globalSecondaryIndexes));
        }

        public Builder globalSecondaryIndexes(GlobalTableGlobalSecondaryIndexArgs... globalSecondaryIndexes) {
            return globalSecondaryIndexes(List.of(globalSecondaryIndexes));
        }

        public Builder keySchema(Output<List<GlobalTableKeySchemaArgs>> keySchema) {
            $.keySchema = keySchema;
            return this;
        }

        public Builder keySchema(List<GlobalTableKeySchemaArgs> keySchema) {
            return keySchema(Output.of(keySchema));
        }

        public Builder keySchema(GlobalTableKeySchemaArgs... keySchema) {
            return keySchema(List.of(keySchema));
        }

        public Builder localSecondaryIndexes(@Nullable Output<List<GlobalTableLocalSecondaryIndexArgs>> localSecondaryIndexes) {
            $.localSecondaryIndexes = localSecondaryIndexes;
            return this;
        }

        public Builder localSecondaryIndexes(List<GlobalTableLocalSecondaryIndexArgs> localSecondaryIndexes) {
            return localSecondaryIndexes(Output.of(localSecondaryIndexes));
        }

        public Builder localSecondaryIndexes(GlobalTableLocalSecondaryIndexArgs... localSecondaryIndexes) {
            return localSecondaryIndexes(List.of(localSecondaryIndexes));
        }

        public Builder replicas(Output<List<GlobalTableReplicaSpecificationArgs>> replicas) {
            $.replicas = replicas;
            return this;
        }

        public Builder replicas(List<GlobalTableReplicaSpecificationArgs> replicas) {
            return replicas(Output.of(replicas));
        }

        public Builder replicas(GlobalTableReplicaSpecificationArgs... replicas) {
            return replicas(List.of(replicas));
        }

        public Builder sSESpecification(@Nullable Output<GlobalTableSSESpecificationArgs> sSESpecification) {
            $.sSESpecification = sSESpecification;
            return this;
        }

        public Builder sSESpecification(GlobalTableSSESpecificationArgs sSESpecification) {
            return sSESpecification(Output.of(sSESpecification));
        }

        public Builder streamSpecification(@Nullable Output<GlobalTableStreamSpecificationArgs> streamSpecification) {
            $.streamSpecification = streamSpecification;
            return this;
        }

        public Builder streamSpecification(GlobalTableStreamSpecificationArgs streamSpecification) {
            return streamSpecification(Output.of(streamSpecification));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder timeToLiveSpecification(@Nullable Output<GlobalTableTimeToLiveSpecificationArgs> timeToLiveSpecification) {
            $.timeToLiveSpecification = timeToLiveSpecification;
            return this;
        }

        public Builder timeToLiveSpecification(GlobalTableTimeToLiveSpecificationArgs timeToLiveSpecification) {
            return timeToLiveSpecification(Output.of(timeToLiveSpecification));
        }

        public Builder writeProvisionedThroughputSettings(@Nullable Output<GlobalTableWriteProvisionedThroughputSettingsArgs> writeProvisionedThroughputSettings) {
            $.writeProvisionedThroughputSettings = writeProvisionedThroughputSettings;
            return this;
        }

        public Builder writeProvisionedThroughputSettings(GlobalTableWriteProvisionedThroughputSettingsArgs writeProvisionedThroughputSettings) {
            return writeProvisionedThroughputSettings(Output.of(writeProvisionedThroughputSettings));
        }

        public GlobalTableArgs build() {
            $.attributeDefinitions = Objects.requireNonNull($.attributeDefinitions, "expected parameter 'attributeDefinitions' to be non-null");
            $.keySchema = Objects.requireNonNull($.keySchema, "expected parameter 'keySchema' to be non-null");
            $.replicas = Objects.requireNonNull($.replicas, "expected parameter 'replicas' to be non-null");
            return $;
        }
    }

}
