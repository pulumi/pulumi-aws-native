// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appstream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class AppBlockS3LocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppBlockS3LocationArgs Empty = new AppBlockS3LocationArgs();

    @Import(name="s3Bucket", required=true)
    private Output<String> s3Bucket;

    public Output<String> s3Bucket() {
        return this.s3Bucket;
    }

    @Import(name="s3Key", required=true)
    private Output<String> s3Key;

    public Output<String> s3Key() {
        return this.s3Key;
    }

    private AppBlockS3LocationArgs() {}

    private AppBlockS3LocationArgs(AppBlockS3LocationArgs $) {
        this.s3Bucket = $.s3Bucket;
        this.s3Key = $.s3Key;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppBlockS3LocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppBlockS3LocationArgs $;

        public Builder() {
            $ = new AppBlockS3LocationArgs();
        }

        public Builder(AppBlockS3LocationArgs defaults) {
            $ = new AppBlockS3LocationArgs(Objects.requireNonNull(defaults));
        }

        public Builder s3Bucket(Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        public Builder s3Key(Output<String> s3Key) {
            $.s3Key = s3Key;
            return this;
        }

        public Builder s3Key(String s3Key) {
            return s3Key(Output.of(s3Key));
        }

        public AppBlockS3LocationArgs build() {
            $.s3Bucket = Objects.requireNonNull($.s3Bucket, "expected parameter 's3Bucket' to be non-null");
            $.s3Key = Objects.requireNonNull($.s3Key, "expected parameter 's3Key' to be non-null");
            return $;
        }
    }

}
