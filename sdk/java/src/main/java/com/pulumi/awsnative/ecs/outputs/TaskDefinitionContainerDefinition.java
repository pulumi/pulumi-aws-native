// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs.outputs;

import com.pulumi.awsnative.ecs.outputs.TaskDefinitionContainerDependency;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionEnvironmentFile;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionFirelensConfiguration;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionHealthCheck;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionHostEntry;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionKeyValuePair;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionLinuxParameters;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionLogConfiguration;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionMountPoint;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionPortMapping;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionRepositoryCredentials;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionResourceRequirement;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionSecret;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionSystemControl;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionUlimit;
import com.pulumi.awsnative.ecs.outputs.TaskDefinitionVolumeFrom;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TaskDefinitionContainerDefinition {
    private @Nullable List<String> command;
    private @Nullable Integer cpu;
    private @Nullable List<TaskDefinitionContainerDependency> dependsOn;
    private @Nullable Boolean disableNetworking;
    private @Nullable List<String> dnsSearchDomains;
    private @Nullable List<String> dnsServers;
    private @Nullable Object dockerLabels;
    private @Nullable List<String> dockerSecurityOptions;
    private @Nullable List<String> entryPoint;
    /**
     * @return The environment variables to pass to a container
     * 
     */
    private @Nullable List<TaskDefinitionKeyValuePair> environment;
    /**
     * @return The list of one or more files that contain the environment variables to pass to a container
     * 
     */
    private @Nullable List<TaskDefinitionEnvironmentFile> environmentFiles;
    private @Nullable Boolean essential;
    private @Nullable List<TaskDefinitionHostEntry> extraHosts;
    private @Nullable TaskDefinitionFirelensConfiguration firelensConfiguration;
    private @Nullable TaskDefinitionHealthCheck healthCheck;
    private @Nullable String hostname;
    /**
     * @return The image used to start a container. This string is passed directly to the Docker daemon.
     * 
     */
    private @Nullable String image;
    private @Nullable Boolean interactive;
    private @Nullable List<String> links;
    private @Nullable TaskDefinitionLinuxParameters linuxParameters;
    private @Nullable TaskDefinitionLogConfiguration logConfiguration;
    /**
     * @return The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    private @Nullable Integer memory;
    private @Nullable Integer memoryReservation;
    private @Nullable List<TaskDefinitionMountPoint> mountPoints;
    /**
     * @return The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
     * 
     */
    private @Nullable String name;
    /**
     * @return Port mappings allow containers to access ports on the host container instance to send or receive traffic.
     * 
     */
    private @Nullable List<TaskDefinitionPortMapping> portMappings;
    private @Nullable Boolean privileged;
    private @Nullable Boolean pseudoTerminal;
    private @Nullable Boolean readonlyRootFilesystem;
    private @Nullable TaskDefinitionRepositoryCredentials repositoryCredentials;
    private @Nullable List<TaskDefinitionResourceRequirement> resourceRequirements;
    private @Nullable List<TaskDefinitionSecret> secrets;
    private @Nullable Integer startTimeout;
    private @Nullable Integer stopTimeout;
    private @Nullable List<TaskDefinitionSystemControl> systemControls;
    private @Nullable List<TaskDefinitionUlimit> ulimits;
    private @Nullable String user;
    private @Nullable List<TaskDefinitionVolumeFrom> volumesFrom;
    private @Nullable String workingDirectory;

    private TaskDefinitionContainerDefinition() {}
    public List<String> command() {
        return this.command == null ? List.of() : this.command;
    }
    public Optional<Integer> cpu() {
        return Optional.ofNullable(this.cpu);
    }
    public List<TaskDefinitionContainerDependency> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    public Optional<Boolean> disableNetworking() {
        return Optional.ofNullable(this.disableNetworking);
    }
    public List<String> dnsSearchDomains() {
        return this.dnsSearchDomains == null ? List.of() : this.dnsSearchDomains;
    }
    public List<String> dnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }
    public Optional<Object> dockerLabels() {
        return Optional.ofNullable(this.dockerLabels);
    }
    public List<String> dockerSecurityOptions() {
        return this.dockerSecurityOptions == null ? List.of() : this.dockerSecurityOptions;
    }
    public List<String> entryPoint() {
        return this.entryPoint == null ? List.of() : this.entryPoint;
    }
    /**
     * @return The environment variables to pass to a container
     * 
     */
    public List<TaskDefinitionKeyValuePair> environment() {
        return this.environment == null ? List.of() : this.environment;
    }
    /**
     * @return The list of one or more files that contain the environment variables to pass to a container
     * 
     */
    public List<TaskDefinitionEnvironmentFile> environmentFiles() {
        return this.environmentFiles == null ? List.of() : this.environmentFiles;
    }
    public Optional<Boolean> essential() {
        return Optional.ofNullable(this.essential);
    }
    public List<TaskDefinitionHostEntry> extraHosts() {
        return this.extraHosts == null ? List.of() : this.extraHosts;
    }
    public Optional<TaskDefinitionFirelensConfiguration> firelensConfiguration() {
        return Optional.ofNullable(this.firelensConfiguration);
    }
    public Optional<TaskDefinitionHealthCheck> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return The image used to start a container. This string is passed directly to the Docker daemon.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    public Optional<Boolean> interactive() {
        return Optional.ofNullable(this.interactive);
    }
    public List<String> links() {
        return this.links == null ? List.of() : this.links;
    }
    public Optional<TaskDefinitionLinuxParameters> linuxParameters() {
        return Optional.ofNullable(this.linuxParameters);
    }
    public Optional<TaskDefinitionLogConfiguration> logConfiguration() {
        return Optional.ofNullable(this.logConfiguration);
    }
    /**
     * @return The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
     * 
     */
    public Optional<Integer> memory() {
        return Optional.ofNullable(this.memory);
    }
    public Optional<Integer> memoryReservation() {
        return Optional.ofNullable(this.memoryReservation);
    }
    public List<TaskDefinitionMountPoint> mountPoints() {
        return this.mountPoints == null ? List.of() : this.mountPoints;
    }
    /**
     * @return The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Port mappings allow containers to access ports on the host container instance to send or receive traffic.
     * 
     */
    public List<TaskDefinitionPortMapping> portMappings() {
        return this.portMappings == null ? List.of() : this.portMappings;
    }
    public Optional<Boolean> privileged() {
        return Optional.ofNullable(this.privileged);
    }
    public Optional<Boolean> pseudoTerminal() {
        return Optional.ofNullable(this.pseudoTerminal);
    }
    public Optional<Boolean> readonlyRootFilesystem() {
        return Optional.ofNullable(this.readonlyRootFilesystem);
    }
    public Optional<TaskDefinitionRepositoryCredentials> repositoryCredentials() {
        return Optional.ofNullable(this.repositoryCredentials);
    }
    public List<TaskDefinitionResourceRequirement> resourceRequirements() {
        return this.resourceRequirements == null ? List.of() : this.resourceRequirements;
    }
    public List<TaskDefinitionSecret> secrets() {
        return this.secrets == null ? List.of() : this.secrets;
    }
    public Optional<Integer> startTimeout() {
        return Optional.ofNullable(this.startTimeout);
    }
    public Optional<Integer> stopTimeout() {
        return Optional.ofNullable(this.stopTimeout);
    }
    public List<TaskDefinitionSystemControl> systemControls() {
        return this.systemControls == null ? List.of() : this.systemControls;
    }
    public List<TaskDefinitionUlimit> ulimits() {
        return this.ulimits == null ? List.of() : this.ulimits;
    }
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }
    public List<TaskDefinitionVolumeFrom> volumesFrom() {
        return this.volumesFrom == null ? List.of() : this.volumesFrom;
    }
    public Optional<String> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TaskDefinitionContainerDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> command;
        private @Nullable Integer cpu;
        private @Nullable List<TaskDefinitionContainerDependency> dependsOn;
        private @Nullable Boolean disableNetworking;
        private @Nullable List<String> dnsSearchDomains;
        private @Nullable List<String> dnsServers;
        private @Nullable Object dockerLabels;
        private @Nullable List<String> dockerSecurityOptions;
        private @Nullable List<String> entryPoint;
        private @Nullable List<TaskDefinitionKeyValuePair> environment;
        private @Nullable List<TaskDefinitionEnvironmentFile> environmentFiles;
        private @Nullable Boolean essential;
        private @Nullable List<TaskDefinitionHostEntry> extraHosts;
        private @Nullable TaskDefinitionFirelensConfiguration firelensConfiguration;
        private @Nullable TaskDefinitionHealthCheck healthCheck;
        private @Nullable String hostname;
        private @Nullable String image;
        private @Nullable Boolean interactive;
        private @Nullable List<String> links;
        private @Nullable TaskDefinitionLinuxParameters linuxParameters;
        private @Nullable TaskDefinitionLogConfiguration logConfiguration;
        private @Nullable Integer memory;
        private @Nullable Integer memoryReservation;
        private @Nullable List<TaskDefinitionMountPoint> mountPoints;
        private @Nullable String name;
        private @Nullable List<TaskDefinitionPortMapping> portMappings;
        private @Nullable Boolean privileged;
        private @Nullable Boolean pseudoTerminal;
        private @Nullable Boolean readonlyRootFilesystem;
        private @Nullable TaskDefinitionRepositoryCredentials repositoryCredentials;
        private @Nullable List<TaskDefinitionResourceRequirement> resourceRequirements;
        private @Nullable List<TaskDefinitionSecret> secrets;
        private @Nullable Integer startTimeout;
        private @Nullable Integer stopTimeout;
        private @Nullable List<TaskDefinitionSystemControl> systemControls;
        private @Nullable List<TaskDefinitionUlimit> ulimits;
        private @Nullable String user;
        private @Nullable List<TaskDefinitionVolumeFrom> volumesFrom;
        private @Nullable String workingDirectory;
        public Builder() {}
        public Builder(TaskDefinitionContainerDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.cpu = defaults.cpu;
    	      this.dependsOn = defaults.dependsOn;
    	      this.disableNetworking = defaults.disableNetworking;
    	      this.dnsSearchDomains = defaults.dnsSearchDomains;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dockerLabels = defaults.dockerLabels;
    	      this.dockerSecurityOptions = defaults.dockerSecurityOptions;
    	      this.entryPoint = defaults.entryPoint;
    	      this.environment = defaults.environment;
    	      this.environmentFiles = defaults.environmentFiles;
    	      this.essential = defaults.essential;
    	      this.extraHosts = defaults.extraHosts;
    	      this.firelensConfiguration = defaults.firelensConfiguration;
    	      this.healthCheck = defaults.healthCheck;
    	      this.hostname = defaults.hostname;
    	      this.image = defaults.image;
    	      this.interactive = defaults.interactive;
    	      this.links = defaults.links;
    	      this.linuxParameters = defaults.linuxParameters;
    	      this.logConfiguration = defaults.logConfiguration;
    	      this.memory = defaults.memory;
    	      this.memoryReservation = defaults.memoryReservation;
    	      this.mountPoints = defaults.mountPoints;
    	      this.name = defaults.name;
    	      this.portMappings = defaults.portMappings;
    	      this.privileged = defaults.privileged;
    	      this.pseudoTerminal = defaults.pseudoTerminal;
    	      this.readonlyRootFilesystem = defaults.readonlyRootFilesystem;
    	      this.repositoryCredentials = defaults.repositoryCredentials;
    	      this.resourceRequirements = defaults.resourceRequirements;
    	      this.secrets = defaults.secrets;
    	      this.startTimeout = defaults.startTimeout;
    	      this.stopTimeout = defaults.stopTimeout;
    	      this.systemControls = defaults.systemControls;
    	      this.ulimits = defaults.ulimits;
    	      this.user = defaults.user;
    	      this.volumesFrom = defaults.volumesFrom;
    	      this.workingDirectory = defaults.workingDirectory;
        }

        @CustomType.Setter
        public Builder command(@Nullable List<String> command) {
            this.command = command;
            return this;
        }
        public Builder command(String... command) {
            return command(List.of(command));
        }
        @CustomType.Setter
        public Builder cpu(@Nullable Integer cpu) {
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder dependsOn(@Nullable List<TaskDefinitionContainerDependency> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(TaskDefinitionContainerDependency... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        @CustomType.Setter
        public Builder disableNetworking(@Nullable Boolean disableNetworking) {
            this.disableNetworking = disableNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder dnsSearchDomains(@Nullable List<String> dnsSearchDomains) {
            this.dnsSearchDomains = dnsSearchDomains;
            return this;
        }
        public Builder dnsSearchDomains(String... dnsSearchDomains) {
            return dnsSearchDomains(List.of(dnsSearchDomains));
        }
        @CustomType.Setter
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder dockerLabels(@Nullable Object dockerLabels) {
            this.dockerLabels = dockerLabels;
            return this;
        }
        @CustomType.Setter
        public Builder dockerSecurityOptions(@Nullable List<String> dockerSecurityOptions) {
            this.dockerSecurityOptions = dockerSecurityOptions;
            return this;
        }
        public Builder dockerSecurityOptions(String... dockerSecurityOptions) {
            return dockerSecurityOptions(List.of(dockerSecurityOptions));
        }
        @CustomType.Setter
        public Builder entryPoint(@Nullable List<String> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }
        public Builder entryPoint(String... entryPoint) {
            return entryPoint(List.of(entryPoint));
        }
        @CustomType.Setter
        public Builder environment(@Nullable List<TaskDefinitionKeyValuePair> environment) {
            this.environment = environment;
            return this;
        }
        public Builder environment(TaskDefinitionKeyValuePair... environment) {
            return environment(List.of(environment));
        }
        @CustomType.Setter
        public Builder environmentFiles(@Nullable List<TaskDefinitionEnvironmentFile> environmentFiles) {
            this.environmentFiles = environmentFiles;
            return this;
        }
        public Builder environmentFiles(TaskDefinitionEnvironmentFile... environmentFiles) {
            return environmentFiles(List.of(environmentFiles));
        }
        @CustomType.Setter
        public Builder essential(@Nullable Boolean essential) {
            this.essential = essential;
            return this;
        }
        @CustomType.Setter
        public Builder extraHosts(@Nullable List<TaskDefinitionHostEntry> extraHosts) {
            this.extraHosts = extraHosts;
            return this;
        }
        public Builder extraHosts(TaskDefinitionHostEntry... extraHosts) {
            return extraHosts(List.of(extraHosts));
        }
        @CustomType.Setter
        public Builder firelensConfiguration(@Nullable TaskDefinitionFirelensConfiguration firelensConfiguration) {
            this.firelensConfiguration = firelensConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(@Nullable TaskDefinitionHealthCheck healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder interactive(@Nullable Boolean interactive) {
            this.interactive = interactive;
            return this;
        }
        @CustomType.Setter
        public Builder links(@Nullable List<String> links) {
            this.links = links;
            return this;
        }
        public Builder links(String... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder linuxParameters(@Nullable TaskDefinitionLinuxParameters linuxParameters) {
            this.linuxParameters = linuxParameters;
            return this;
        }
        @CustomType.Setter
        public Builder logConfiguration(@Nullable TaskDefinitionLogConfiguration logConfiguration) {
            this.logConfiguration = logConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder memory(@Nullable Integer memory) {
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder memoryReservation(@Nullable Integer memoryReservation) {
            this.memoryReservation = memoryReservation;
            return this;
        }
        @CustomType.Setter
        public Builder mountPoints(@Nullable List<TaskDefinitionMountPoint> mountPoints) {
            this.mountPoints = mountPoints;
            return this;
        }
        public Builder mountPoints(TaskDefinitionMountPoint... mountPoints) {
            return mountPoints(List.of(mountPoints));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder portMappings(@Nullable List<TaskDefinitionPortMapping> portMappings) {
            this.portMappings = portMappings;
            return this;
        }
        public Builder portMappings(TaskDefinitionPortMapping... portMappings) {
            return portMappings(List.of(portMappings));
        }
        @CustomType.Setter
        public Builder privileged(@Nullable Boolean privileged) {
            this.privileged = privileged;
            return this;
        }
        @CustomType.Setter
        public Builder pseudoTerminal(@Nullable Boolean pseudoTerminal) {
            this.pseudoTerminal = pseudoTerminal;
            return this;
        }
        @CustomType.Setter
        public Builder readonlyRootFilesystem(@Nullable Boolean readonlyRootFilesystem) {
            this.readonlyRootFilesystem = readonlyRootFilesystem;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryCredentials(@Nullable TaskDefinitionRepositoryCredentials repositoryCredentials) {
            this.repositoryCredentials = repositoryCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder resourceRequirements(@Nullable List<TaskDefinitionResourceRequirement> resourceRequirements) {
            this.resourceRequirements = resourceRequirements;
            return this;
        }
        public Builder resourceRequirements(TaskDefinitionResourceRequirement... resourceRequirements) {
            return resourceRequirements(List.of(resourceRequirements));
        }
        @CustomType.Setter
        public Builder secrets(@Nullable List<TaskDefinitionSecret> secrets) {
            this.secrets = secrets;
            return this;
        }
        public Builder secrets(TaskDefinitionSecret... secrets) {
            return secrets(List.of(secrets));
        }
        @CustomType.Setter
        public Builder startTimeout(@Nullable Integer startTimeout) {
            this.startTimeout = startTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder stopTimeout(@Nullable Integer stopTimeout) {
            this.stopTimeout = stopTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder systemControls(@Nullable List<TaskDefinitionSystemControl> systemControls) {
            this.systemControls = systemControls;
            return this;
        }
        public Builder systemControls(TaskDefinitionSystemControl... systemControls) {
            return systemControls(List.of(systemControls));
        }
        @CustomType.Setter
        public Builder ulimits(@Nullable List<TaskDefinitionUlimit> ulimits) {
            this.ulimits = ulimits;
            return this;
        }
        public Builder ulimits(TaskDefinitionUlimit... ulimits) {
            return ulimits(List.of(ulimits));
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder volumesFrom(@Nullable List<TaskDefinitionVolumeFrom> volumesFrom) {
            this.volumesFrom = volumesFrom;
            return this;
        }
        public Builder volumesFrom(TaskDefinitionVolumeFrom... volumesFrom) {
            return volumesFrom(List.of(volumesFrom));
        }
        @CustomType.Setter
        public Builder workingDirectory(@Nullable String workingDirectory) {
            this.workingDirectory = workingDirectory;
            return this;
        }
        public TaskDefinitionContainerDefinition build() {
            final var o = new TaskDefinitionContainerDefinition();
            o.command = command;
            o.cpu = cpu;
            o.dependsOn = dependsOn;
            o.disableNetworking = disableNetworking;
            o.dnsSearchDomains = dnsSearchDomains;
            o.dnsServers = dnsServers;
            o.dockerLabels = dockerLabels;
            o.dockerSecurityOptions = dockerSecurityOptions;
            o.entryPoint = entryPoint;
            o.environment = environment;
            o.environmentFiles = environmentFiles;
            o.essential = essential;
            o.extraHosts = extraHosts;
            o.firelensConfiguration = firelensConfiguration;
            o.healthCheck = healthCheck;
            o.hostname = hostname;
            o.image = image;
            o.interactive = interactive;
            o.links = links;
            o.linuxParameters = linuxParameters;
            o.logConfiguration = logConfiguration;
            o.memory = memory;
            o.memoryReservation = memoryReservation;
            o.mountPoints = mountPoints;
            o.name = name;
            o.portMappings = portMappings;
            o.privileged = privileged;
            o.pseudoTerminal = pseudoTerminal;
            o.readonlyRootFilesystem = readonlyRootFilesystem;
            o.repositoryCredentials = repositoryCredentials;
            o.resourceRequirements = resourceRequirements;
            o.secrets = secrets;
            o.startTimeout = startTimeout;
            o.stopTimeout = stopTimeout;
            o.systemControls = systemControls;
            o.ulimits = ulimits;
            o.user = user;
            o.volumesFrom = volumesFrom;
            o.workingDirectory = workingDirectory;
            return o;
        }
    }
}
