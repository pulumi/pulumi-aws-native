// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssmincidents;

import com.pulumi.awsnative.ssmincidents.inputs.ResponsePlanActionArgs;
import com.pulumi.awsnative.ssmincidents.inputs.ResponsePlanChatChannelArgs;
import com.pulumi.awsnative.ssmincidents.inputs.ResponsePlanIncidentTemplateArgs;
import com.pulumi.awsnative.ssmincidents.inputs.ResponsePlanTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResponsePlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponsePlanArgs Empty = new ResponsePlanArgs();

    /**
     * The list of actions.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<ResponsePlanActionArgs>> actions;

    /**
     * @return The list of actions.
     * 
     */
    public Optional<Output<List<ResponsePlanActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="chatChannel")
    private @Nullable Output<ResponsePlanChatChannelArgs> chatChannel;

    public Optional<Output<ResponsePlanChatChannelArgs>> chatChannel() {
        return Optional.ofNullable(this.chatChannel);
    }

    /**
     * The display name of the response plan.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the response plan.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The list of engagements to use.
     * 
     */
    @Import(name="engagements")
    private @Nullable Output<List<String>> engagements;

    /**
     * @return The list of engagements to use.
     * 
     */
    public Optional<Output<List<String>>> engagements() {
        return Optional.ofNullable(this.engagements);
    }

    @Import(name="incidentTemplate", required=true)
    private Output<ResponsePlanIncidentTemplateArgs> incidentTemplate;

    public Output<ResponsePlanIncidentTemplateArgs> incidentTemplate() {
        return this.incidentTemplate;
    }

    /**
     * The name of the response plan.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the response plan.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The tags to apply to the response plan.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ResponsePlanTagArgs>> tags;

    /**
     * @return The tags to apply to the response plan.
     * 
     */
    public Optional<Output<List<ResponsePlanTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ResponsePlanArgs() {}

    private ResponsePlanArgs(ResponsePlanArgs $) {
        this.actions = $.actions;
        this.chatChannel = $.chatChannel;
        this.displayName = $.displayName;
        this.engagements = $.engagements;
        this.incidentTemplate = $.incidentTemplate;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponsePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponsePlanArgs $;

        public Builder() {
            $ = new ResponsePlanArgs();
        }

        public Builder(ResponsePlanArgs defaults) {
            $ = new ResponsePlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions The list of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<ResponsePlanActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions The list of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<ResponsePlanActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions The list of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(ResponsePlanActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder chatChannel(@Nullable Output<ResponsePlanChatChannelArgs> chatChannel) {
            $.chatChannel = chatChannel;
            return this;
        }

        public Builder chatChannel(ResponsePlanChatChannelArgs chatChannel) {
            return chatChannel(Output.of(chatChannel));
        }

        /**
         * @param displayName The display name of the response plan.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the response plan.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param engagements The list of engagements to use.
         * 
         * @return builder
         * 
         */
        public Builder engagements(@Nullable Output<List<String>> engagements) {
            $.engagements = engagements;
            return this;
        }

        /**
         * @param engagements The list of engagements to use.
         * 
         * @return builder
         * 
         */
        public Builder engagements(List<String> engagements) {
            return engagements(Output.of(engagements));
        }

        /**
         * @param engagements The list of engagements to use.
         * 
         * @return builder
         * 
         */
        public Builder engagements(String... engagements) {
            return engagements(List.of(engagements));
        }

        public Builder incidentTemplate(Output<ResponsePlanIncidentTemplateArgs> incidentTemplate) {
            $.incidentTemplate = incidentTemplate;
            return this;
        }

        public Builder incidentTemplate(ResponsePlanIncidentTemplateArgs incidentTemplate) {
            return incidentTemplate(Output.of(incidentTemplate));
        }

        /**
         * @param name The name of the response plan.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the response plan.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags The tags to apply to the response plan.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ResponsePlanTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags to apply to the response plan.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ResponsePlanTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags to apply to the response plan.
         * 
         * @return builder
         * 
         */
        public Builder tags(ResponsePlanTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ResponsePlanArgs build() {
            $.incidentTemplate = Objects.requireNonNull($.incidentTemplate, "expected parameter 'incidentTemplate' to be non-null");
            return $;
        }
    }

}
