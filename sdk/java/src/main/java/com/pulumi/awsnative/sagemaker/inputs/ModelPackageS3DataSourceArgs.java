// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageS3DataSourceS3DataType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Describes the S3 data source.
 * 
 */
public final class ModelPackageS3DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageS3DataSourceArgs Empty = new ModelPackageS3DataSourceArgs();

    /**
     * The S3 Data Source Type
     * 
     */
    @Import(name="s3DataType", required=true)
    private Output<ModelPackageS3DataSourceS3DataType> s3DataType;

    /**
     * @return The S3 Data Source Type
     * 
     */
    public Output<ModelPackageS3DataSourceS3DataType> s3DataType() {
        return this.s3DataType;
    }

    /**
     * Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
     * 
     */
    @Import(name="s3Uri", required=true)
    private Output<String> s3Uri;

    /**
     * @return Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
     * 
     */
    public Output<String> s3Uri() {
        return this.s3Uri;
    }

    private ModelPackageS3DataSourceArgs() {}

    private ModelPackageS3DataSourceArgs(ModelPackageS3DataSourceArgs $) {
        this.s3DataType = $.s3DataType;
        this.s3Uri = $.s3Uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageS3DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageS3DataSourceArgs $;

        public Builder() {
            $ = new ModelPackageS3DataSourceArgs();
        }

        public Builder(ModelPackageS3DataSourceArgs defaults) {
            $ = new ModelPackageS3DataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param s3DataType The S3 Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder s3DataType(Output<ModelPackageS3DataSourceS3DataType> s3DataType) {
            $.s3DataType = s3DataType;
            return this;
        }

        /**
         * @param s3DataType The S3 Data Source Type
         * 
         * @return builder
         * 
         */
        public Builder s3DataType(ModelPackageS3DataSourceS3DataType s3DataType) {
            return s3DataType(Output.of(s3DataType));
        }

        /**
         * @param s3Uri Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(Output<String> s3Uri) {
            $.s3Uri = s3Uri;
            return this;
        }

        /**
         * @param s3Uri Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
         * 
         * @return builder
         * 
         */
        public Builder s3Uri(String s3Uri) {
            return s3Uri(Output.of(s3Uri));
        }

        public ModelPackageS3DataSourceArgs build() {
            $.s3DataType = Objects.requireNonNull($.s3DataType, "expected parameter 's3DataType' to be non-null");
            $.s3Uri = Objects.requireNonNull($.s3Uri, "expected parameter 's3Uri' to be non-null");
            return $;
        }
    }

}
