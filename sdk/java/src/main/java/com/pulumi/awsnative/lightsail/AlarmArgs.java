// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlarmArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlarmArgs Empty = new AlarmArgs();

    /**
     * The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
     * 
     */
    @Import(name="alarmName")
    private @Nullable Output<String> alarmName;

    /**
     * @return The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
     * 
     */
    public Optional<Output<String>> alarmName() {
        return Optional.ofNullable(this.alarmName);
    }

    /**
     * The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    @Import(name="comparisonOperator", required=true)
    private Output<String> comparisonOperator;

    /**
     * @return The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    public Output<String> comparisonOperator() {
        return this.comparisonOperator;
    }

    /**
     * The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    @Import(name="contactProtocols")
    private @Nullable Output<List<String>> contactProtocols;

    /**
     * @return The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    public Optional<Output<List<String>>> contactProtocols() {
        return Optional.ofNullable(this.contactProtocols);
    }

    /**
     * The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    @Import(name="datapointsToAlarm")
    private @Nullable Output<Integer> datapointsToAlarm;

    /**
     * @return The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    public Optional<Output<Integer>> datapointsToAlarm() {
        return Optional.ofNullable(this.datapointsToAlarm);
    }

    /**
     * The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
     * 
     */
    @Import(name="evaluationPeriods", required=true)
    private Output<Integer> evaluationPeriods;

    /**
     * @return The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
     * 
     */
    public Output<Integer> evaluationPeriods() {
        return this.evaluationPeriods;
    }

    /**
     * The name of the metric to associate with the alarm.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The name of the metric to associate with the alarm.
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The validation status of the SSL/TLS certificate.
     * 
     */
    @Import(name="monitoredResourceName", required=true)
    private Output<String> monitoredResourceName;

    /**
     * @return The validation status of the SSL/TLS certificate.
     * 
     */
    public Output<String> monitoredResourceName() {
        return this.monitoredResourceName;
    }

    /**
     * Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
     * 
     */
    @Import(name="notificationEnabled")
    private @Nullable Output<Boolean> notificationEnabled;

    /**
     * @return Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
     * 
     */
    public Optional<Output<Boolean>> notificationEnabled() {
        return Optional.ofNullable(this.notificationEnabled);
    }

    /**
     * The alarm states that trigger a notification.
     * 
     */
    @Import(name="notificationTriggers")
    private @Nullable Output<List<String>> notificationTriggers;

    /**
     * @return The alarm states that trigger a notification.
     * 
     */
    public Optional<Output<List<String>>> notificationTriggers() {
        return Optional.ofNullable(this.notificationTriggers);
    }

    /**
     * The value against which the specified statistic is compared.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The value against which the specified statistic is compared.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * Sets how this alarm will handle missing data points.
     * 
     */
    @Import(name="treatMissingData")
    private @Nullable Output<String> treatMissingData;

    /**
     * @return Sets how this alarm will handle missing data points.
     * 
     */
    public Optional<Output<String>> treatMissingData() {
        return Optional.ofNullable(this.treatMissingData);
    }

    private AlarmArgs() {}

    private AlarmArgs(AlarmArgs $) {
        this.alarmName = $.alarmName;
        this.comparisonOperator = $.comparisonOperator;
        this.contactProtocols = $.contactProtocols;
        this.datapointsToAlarm = $.datapointsToAlarm;
        this.evaluationPeriods = $.evaluationPeriods;
        this.metricName = $.metricName;
        this.monitoredResourceName = $.monitoredResourceName;
        this.notificationEnabled = $.notificationEnabled;
        this.notificationTriggers = $.notificationTriggers;
        this.threshold = $.threshold;
        this.treatMissingData = $.treatMissingData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlarmArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlarmArgs $;

        public Builder() {
            $ = new AlarmArgs();
        }

        public Builder(AlarmArgs defaults) {
            $ = new AlarmArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alarmName The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarmName(@Nullable Output<String> alarmName) {
            $.alarmName = alarmName;
            return this;
        }

        /**
         * @param alarmName The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
         * 
         * @return builder
         * 
         */
        public Builder alarmName(String alarmName) {
            return alarmName(Output.of(alarmName));
        }

        /**
         * @param comparisonOperator The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(Output<String> comparisonOperator) {
            $.comparisonOperator = comparisonOperator;
            return this;
        }

        /**
         * @param comparisonOperator The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
         * 
         * @return builder
         * 
         */
        public Builder comparisonOperator(String comparisonOperator) {
            return comparisonOperator(Output.of(comparisonOperator));
        }

        /**
         * @param contactProtocols The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
         * 
         * @return builder
         * 
         */
        public Builder contactProtocols(@Nullable Output<List<String>> contactProtocols) {
            $.contactProtocols = contactProtocols;
            return this;
        }

        /**
         * @param contactProtocols The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
         * 
         * @return builder
         * 
         */
        public Builder contactProtocols(List<String> contactProtocols) {
            return contactProtocols(Output.of(contactProtocols));
        }

        /**
         * @param contactProtocols The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
         * 
         * @return builder
         * 
         */
        public Builder contactProtocols(String... contactProtocols) {
            return contactProtocols(List.of(contactProtocols));
        }

        /**
         * @param datapointsToAlarm The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
         * 
         * @return builder
         * 
         */
        public Builder datapointsToAlarm(@Nullable Output<Integer> datapointsToAlarm) {
            $.datapointsToAlarm = datapointsToAlarm;
            return this;
        }

        /**
         * @param datapointsToAlarm The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
         * 
         * @return builder
         * 
         */
        public Builder datapointsToAlarm(Integer datapointsToAlarm) {
            return datapointsToAlarm(Output.of(datapointsToAlarm));
        }

        /**
         * @param evaluationPeriods The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(Output<Integer> evaluationPeriods) {
            $.evaluationPeriods = evaluationPeriods;
            return this;
        }

        /**
         * @param evaluationPeriods The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
         * 
         * @return builder
         * 
         */
        public Builder evaluationPeriods(Integer evaluationPeriods) {
            return evaluationPeriods(Output.of(evaluationPeriods));
        }

        /**
         * @param metricName The name of the metric to associate with the alarm.
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the metric to associate with the alarm.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param monitoredResourceName The validation status of the SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder monitoredResourceName(Output<String> monitoredResourceName) {
            $.monitoredResourceName = monitoredResourceName;
            return this;
        }

        /**
         * @param monitoredResourceName The validation status of the SSL/TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder monitoredResourceName(String monitoredResourceName) {
            return monitoredResourceName(Output.of(monitoredResourceName));
        }

        /**
         * @param notificationEnabled Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
         * 
         * @return builder
         * 
         */
        public Builder notificationEnabled(@Nullable Output<Boolean> notificationEnabled) {
            $.notificationEnabled = notificationEnabled;
            return this;
        }

        /**
         * @param notificationEnabled Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
         * 
         * @return builder
         * 
         */
        public Builder notificationEnabled(Boolean notificationEnabled) {
            return notificationEnabled(Output.of(notificationEnabled));
        }

        /**
         * @param notificationTriggers The alarm states that trigger a notification.
         * 
         * @return builder
         * 
         */
        public Builder notificationTriggers(@Nullable Output<List<String>> notificationTriggers) {
            $.notificationTriggers = notificationTriggers;
            return this;
        }

        /**
         * @param notificationTriggers The alarm states that trigger a notification.
         * 
         * @return builder
         * 
         */
        public Builder notificationTriggers(List<String> notificationTriggers) {
            return notificationTriggers(Output.of(notificationTriggers));
        }

        /**
         * @param notificationTriggers The alarm states that trigger a notification.
         * 
         * @return builder
         * 
         */
        public Builder notificationTriggers(String... notificationTriggers) {
            return notificationTriggers(List.of(notificationTriggers));
        }

        /**
         * @param threshold The value against which the specified statistic is compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The value against which the specified statistic is compared.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param treatMissingData Sets how this alarm will handle missing data points.
         * 
         * @return builder
         * 
         */
        public Builder treatMissingData(@Nullable Output<String> treatMissingData) {
            $.treatMissingData = treatMissingData;
            return this;
        }

        /**
         * @param treatMissingData Sets how this alarm will handle missing data points.
         * 
         * @return builder
         * 
         */
        public Builder treatMissingData(String treatMissingData) {
            return treatMissingData(Output.of(treatMissingData));
        }

        public AlarmArgs build() {
            $.comparisonOperator = Objects.requireNonNull($.comparisonOperator, "expected parameter 'comparisonOperator' to be non-null");
            $.evaluationPeriods = Objects.requireNonNull($.evaluationPeriods, "expected parameter 'evaluationPeriods' to be non-null");
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.monitoredResourceName = Objects.requireNonNull($.monitoredResourceName, "expected parameter 'monitoredResourceName' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            return $;
        }
    }

}
