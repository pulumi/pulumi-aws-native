// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker;

import com.pulumi.awsnative.sagemaker.enums.AppType;
import com.pulumi.awsnative.sagemaker.inputs.AppResourceSpecArgs;
import com.pulumi.awsnative.sagemaker.inputs.AppTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * The name of the app.
     * 
     */
    @Import(name="appName")
    private @Nullable Output<String> appName;

    /**
     * @return The name of the app.
     * 
     */
    public Optional<Output<String>> appName() {
        return Optional.ofNullable(this.appName);
    }

    /**
     * The type of app.
     * 
     */
    @Import(name="appType", required=true)
    private Output<AppType> appType;

    /**
     * @return The type of app.
     * 
     */
    public Output<AppType> appType() {
        return this.appType;
    }

    /**
     * The domain ID.
     * 
     */
    @Import(name="domainId", required=true)
    private Output<String> domainId;

    /**
     * @return The domain ID.
     * 
     */
    public Output<String> domainId() {
        return this.domainId;
    }

    /**
     * The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
     * 
     */
    @Import(name="resourceSpec")
    private @Nullable Output<AppResourceSpecArgs> resourceSpec;

    /**
     * @return The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
     * 
     */
    public Optional<Output<AppResourceSpecArgs>> resourceSpec() {
        return Optional.ofNullable(this.resourceSpec);
    }

    /**
     * A list of tags to apply to the app.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AppTagArgs>> tags;

    /**
     * @return A list of tags to apply to the app.
     * 
     */
    public Optional<Output<List<AppTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The user profile name.
     * 
     */
    @Import(name="userProfileName", required=true)
    private Output<String> userProfileName;

    /**
     * @return The user profile name.
     * 
     */
    public Output<String> userProfileName() {
        return this.userProfileName;
    }

    private AppArgs() {}

    private AppArgs(AppArgs $) {
        this.appName = $.appName;
        this.appType = $.appType;
        this.domainId = $.domainId;
        this.resourceSpec = $.resourceSpec;
        this.tags = $.tags;
        this.userProfileName = $.userProfileName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppArgs $;

        public Builder() {
            $ = new AppArgs();
        }

        public Builder(AppArgs defaults) {
            $ = new AppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appName The name of the app.
         * 
         * @return builder
         * 
         */
        public Builder appName(@Nullable Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName The name of the app.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param appType The type of app.
         * 
         * @return builder
         * 
         */
        public Builder appType(Output<AppType> appType) {
            $.appType = appType;
            return this;
        }

        /**
         * @param appType The type of app.
         * 
         * @return builder
         * 
         */
        public Builder appType(AppType appType) {
            return appType(Output.of(appType));
        }

        /**
         * @param domainId The domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId The domain ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param resourceSpec The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(@Nullable Output<AppResourceSpecArgs> resourceSpec) {
            $.resourceSpec = resourceSpec;
            return this;
        }

        /**
         * @param resourceSpec The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
         * 
         * @return builder
         * 
         */
        public Builder resourceSpec(AppResourceSpecArgs resourceSpec) {
            return resourceSpec(Output.of(resourceSpec));
        }

        /**
         * @param tags A list of tags to apply to the app.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AppTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags to apply to the app.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AppTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags to apply to the app.
         * 
         * @return builder
         * 
         */
        public Builder tags(AppTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param userProfileName The user profile name.
         * 
         * @return builder
         * 
         */
        public Builder userProfileName(Output<String> userProfileName) {
            $.userProfileName = userProfileName;
            return this;
        }

        /**
         * @param userProfileName The user profile name.
         * 
         * @return builder
         * 
         */
        public Builder userProfileName(String userProfileName) {
            return userProfileName(Output.of(userProfileName));
        }

        public AppArgs build() {
            $.appType = Objects.requireNonNull($.appType, "expected parameter 'appType' to be non-null");
            $.domainId = Objects.requireNonNull($.domainId, "expected parameter 'domainId' to be non-null");
            $.userProfileName = Objects.requireNonNull($.userProfileName, "expected parameter 'userProfileName' to be non-null");
            return $;
        }
    }

}
