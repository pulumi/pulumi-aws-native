// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.personalize.inputs;

import com.pulumi.awsnative.personalize.inputs.SolutionConfigAutoMLConfigPropertiesArgs;
import com.pulumi.awsnative.personalize.inputs.SolutionConfigHpoConfigPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the autoMLConfig section of the solution configuration.
 * 
 */
public final class SolutionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionConfigArgs Empty = new SolutionConfigArgs();

    /**
     * Lists the hyperparameter names and ranges.
     * 
     */
    @Import(name="algorithmHyperParameters")
    private @Nullable Output<Object> algorithmHyperParameters;

    /**
     * @return Lists the hyperparameter names and ranges.
     * 
     */
    public Optional<Output<Object>> algorithmHyperParameters() {
        return Optional.ofNullable(this.algorithmHyperParameters);
    }

    /**
     * The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
     * 
     */
    @Import(name="autoMLConfig")
    private @Nullable Output<SolutionConfigAutoMLConfigPropertiesArgs> autoMLConfig;

    /**
     * @return The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
     * 
     */
    public Optional<Output<SolutionConfigAutoMLConfigPropertiesArgs>> autoMLConfig() {
        return Optional.ofNullable(this.autoMLConfig);
    }

    /**
     * Only events with a value greater than or equal to this threshold are used for training a model.
     * 
     */
    @Import(name="eventValueThreshold")
    private @Nullable Output<String> eventValueThreshold;

    /**
     * @return Only events with a value greater than or equal to this threshold are used for training a model.
     * 
     */
    public Optional<Output<String>> eventValueThreshold() {
        return Optional.ofNullable(this.eventValueThreshold);
    }

    /**
     * Lists the feature transformation parameters.
     * 
     */
    @Import(name="featureTransformationParameters")
    private @Nullable Output<Object> featureTransformationParameters;

    /**
     * @return Lists the feature transformation parameters.
     * 
     */
    public Optional<Output<Object>> featureTransformationParameters() {
        return Optional.ofNullable(this.featureTransformationParameters);
    }

    /**
     * Describes the properties for hyperparameter optimization (HPO)
     * 
     */
    @Import(name="hpoConfig")
    private @Nullable Output<SolutionConfigHpoConfigPropertiesArgs> hpoConfig;

    /**
     * @return Describes the properties for hyperparameter optimization (HPO)
     * 
     */
    public Optional<Output<SolutionConfigHpoConfigPropertiesArgs>> hpoConfig() {
        return Optional.ofNullable(this.hpoConfig);
    }

    private SolutionConfigArgs() {}

    private SolutionConfigArgs(SolutionConfigArgs $) {
        this.algorithmHyperParameters = $.algorithmHyperParameters;
        this.autoMLConfig = $.autoMLConfig;
        this.eventValueThreshold = $.eventValueThreshold;
        this.featureTransformationParameters = $.featureTransformationParameters;
        this.hpoConfig = $.hpoConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionConfigArgs $;

        public Builder() {
            $ = new SolutionConfigArgs();
        }

        public Builder(SolutionConfigArgs defaults) {
            $ = new SolutionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithmHyperParameters Lists the hyperparameter names and ranges.
         * 
         * @return builder
         * 
         */
        public Builder algorithmHyperParameters(@Nullable Output<Object> algorithmHyperParameters) {
            $.algorithmHyperParameters = algorithmHyperParameters;
            return this;
        }

        /**
         * @param algorithmHyperParameters Lists the hyperparameter names and ranges.
         * 
         * @return builder
         * 
         */
        public Builder algorithmHyperParameters(Object algorithmHyperParameters) {
            return algorithmHyperParameters(Output.of(algorithmHyperParameters));
        }

        /**
         * @param autoMLConfig The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
         * 
         * @return builder
         * 
         */
        public Builder autoMLConfig(@Nullable Output<SolutionConfigAutoMLConfigPropertiesArgs> autoMLConfig) {
            $.autoMLConfig = autoMLConfig;
            return this;
        }

        /**
         * @param autoMLConfig The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
         * 
         * @return builder
         * 
         */
        public Builder autoMLConfig(SolutionConfigAutoMLConfigPropertiesArgs autoMLConfig) {
            return autoMLConfig(Output.of(autoMLConfig));
        }

        /**
         * @param eventValueThreshold Only events with a value greater than or equal to this threshold are used for training a model.
         * 
         * @return builder
         * 
         */
        public Builder eventValueThreshold(@Nullable Output<String> eventValueThreshold) {
            $.eventValueThreshold = eventValueThreshold;
            return this;
        }

        /**
         * @param eventValueThreshold Only events with a value greater than or equal to this threshold are used for training a model.
         * 
         * @return builder
         * 
         */
        public Builder eventValueThreshold(String eventValueThreshold) {
            return eventValueThreshold(Output.of(eventValueThreshold));
        }

        /**
         * @param featureTransformationParameters Lists the feature transformation parameters.
         * 
         * @return builder
         * 
         */
        public Builder featureTransformationParameters(@Nullable Output<Object> featureTransformationParameters) {
            $.featureTransformationParameters = featureTransformationParameters;
            return this;
        }

        /**
         * @param featureTransformationParameters Lists the feature transformation parameters.
         * 
         * @return builder
         * 
         */
        public Builder featureTransformationParameters(Object featureTransformationParameters) {
            return featureTransformationParameters(Output.of(featureTransformationParameters));
        }

        /**
         * @param hpoConfig Describes the properties for hyperparameter optimization (HPO)
         * 
         * @return builder
         * 
         */
        public Builder hpoConfig(@Nullable Output<SolutionConfigHpoConfigPropertiesArgs> hpoConfig) {
            $.hpoConfig = hpoConfig;
            return this;
        }

        /**
         * @param hpoConfig Describes the properties for hyperparameter optimization (HPO)
         * 
         * @return builder
         * 
         */
        public Builder hpoConfig(SolutionConfigHpoConfigPropertiesArgs hpoConfig) {
            return hpoConfig(Output.of(hpoConfig));
        }

        public SolutionConfigArgs build() {
            return $;
        }
    }

}
