// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.imagebuilder;

import com.pulumi.awsnative.imagebuilder.enums.ComponentPlatform;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComponentArgs Empty = new ComponentArgs();

    /**
     * The change description of the component.
     * 
     */
    @Import(name="changeDescription")
    private @Nullable Output<String> changeDescription;

    /**
     * @return The change description of the component.
     * 
     */
    public Optional<Output<String>> changeDescription() {
        return Optional.ofNullable(this.changeDescription);
    }

    /**
     * The data of the component.
     * 
     */
    @Import(name="data")
    private @Nullable Output<String> data;

    /**
     * @return The data of the component.
     * 
     */
    public Optional<Output<String>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * The description of the component.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the component.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The KMS key identifier used to encrypt the component.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The KMS key identifier used to encrypt the component.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The name of the component.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the component.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The platform of the component.
     * 
     */
    @Import(name="platform", required=true)
    private Output<ComponentPlatform> platform;

    /**
     * @return The platform of the component.
     * 
     */
    public Output<ComponentPlatform> platform() {
        return this.platform;
    }

    /**
     * The operating system (OS) version supported by the component.
     * 
     */
    @Import(name="supportedOsVersions")
    private @Nullable Output<List<String>> supportedOsVersions;

    /**
     * @return The operating system (OS) version supported by the component.
     * 
     */
    public Optional<Output<List<String>>> supportedOsVersions() {
        return Optional.ofNullable(this.supportedOsVersions);
    }

    /**
     * The tags associated with the component.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return The tags associated with the component.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The uri of the component.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The uri of the component.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The version of the component.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the component.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private ComponentArgs() {}

    private ComponentArgs(ComponentArgs $) {
        this.changeDescription = $.changeDescription;
        this.data = $.data;
        this.description = $.description;
        this.kmsKeyId = $.kmsKeyId;
        this.name = $.name;
        this.platform = $.platform;
        this.supportedOsVersions = $.supportedOsVersions;
        this.tags = $.tags;
        this.uri = $.uri;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComponentArgs $;

        public Builder() {
            $ = new ComponentArgs();
        }

        public Builder(ComponentArgs defaults) {
            $ = new ComponentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeDescription The change description of the component.
         * 
         * @return builder
         * 
         */
        public Builder changeDescription(@Nullable Output<String> changeDescription) {
            $.changeDescription = changeDescription;
            return this;
        }

        /**
         * @param changeDescription The change description of the component.
         * 
         * @return builder
         * 
         */
        public Builder changeDescription(String changeDescription) {
            return changeDescription(Output.of(changeDescription));
        }

        /**
         * @param data The data of the component.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<String> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data The data of the component.
         * 
         * @return builder
         * 
         */
        public Builder data(String data) {
            return data(Output.of(data));
        }

        /**
         * @param description The description of the component.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the component.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kmsKeyId The KMS key identifier used to encrypt the component.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The KMS key identifier used to encrypt the component.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param platform The platform of the component.
         * 
         * @return builder
         * 
         */
        public Builder platform(Output<ComponentPlatform> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The platform of the component.
         * 
         * @return builder
         * 
         */
        public Builder platform(ComponentPlatform platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param supportedOsVersions The operating system (OS) version supported by the component.
         * 
         * @return builder
         * 
         */
        public Builder supportedOsVersions(@Nullable Output<List<String>> supportedOsVersions) {
            $.supportedOsVersions = supportedOsVersions;
            return this;
        }

        /**
         * @param supportedOsVersions The operating system (OS) version supported by the component.
         * 
         * @return builder
         * 
         */
        public Builder supportedOsVersions(List<String> supportedOsVersions) {
            return supportedOsVersions(Output.of(supportedOsVersions));
        }

        /**
         * @param supportedOsVersions The operating system (OS) version supported by the component.
         * 
         * @return builder
         * 
         */
        public Builder supportedOsVersions(String... supportedOsVersions) {
            return supportedOsVersions(List.of(supportedOsVersions));
        }

        /**
         * @param tags The tags associated with the component.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags associated with the component.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param uri The uri of the component.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The uri of the component.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param version The version of the component.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the component.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ComponentArgs build() {
            $.platform = Objects.requireNonNull($.platform, "expected parameter 'platform' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
