// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashPackagePeriodTriggersItem;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashPackageSegmentTemplateFormat;
import com.pulumi.awsnative.mediapackage.inputs.PackagingConfigurationDashEncryptionArgs;
import com.pulumi.awsnative.mediapackage.inputs.PackagingConfigurationDashManifestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
 * 
 */
public final class PackagingConfigurationDashPackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackagingConfigurationDashPackageArgs Empty = new PackagingConfigurationDashPackageArgs();

    /**
     * A list of DASH manifest configurations.
     * 
     */
    @Import(name="dashManifests", required=true)
    private Output<List<PackagingConfigurationDashManifestArgs>> dashManifests;

    /**
     * @return A list of DASH manifest configurations.
     * 
     */
    public Output<List<PackagingConfigurationDashManifestArgs>> dashManifests() {
        return this.dashManifests;
    }

    @Import(name="encryption")
    private @Nullable Output<PackagingConfigurationDashEncryptionArgs> encryption;

    public Optional<Output<PackagingConfigurationDashEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
     * 
     */
    @Import(name="includeEncoderConfigurationInSegments")
    private @Nullable Output<Boolean> includeEncoderConfigurationInSegments;

    /**
     * @return When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
     * 
     */
    public Optional<Output<Boolean>> includeEncoderConfigurationInSegments() {
        return Optional.ofNullable(this.includeEncoderConfigurationInSegments);
    }

    /**
     * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
     * 
     */
    @Import(name="periodTriggers")
    private @Nullable Output<List<PackagingConfigurationDashPackagePeriodTriggersItem>> periodTriggers;

    /**
     * @return A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
     * 
     */
    public Optional<Output<List<PackagingConfigurationDashPackagePeriodTriggersItem>>> periodTriggers() {
        return Optional.ofNullable(this.periodTriggers);
    }

    @Import(name="segmentDurationSeconds")
    private @Nullable Output<Integer> segmentDurationSeconds;

    public Optional<Output<Integer>> segmentDurationSeconds() {
        return Optional.ofNullable(this.segmentDurationSeconds);
    }

    /**
     * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
     * 
     */
    @Import(name="segmentTemplateFormat")
    private @Nullable Output<PackagingConfigurationDashPackageSegmentTemplateFormat> segmentTemplateFormat;

    /**
     * @return Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
     * 
     */
    public Optional<Output<PackagingConfigurationDashPackageSegmentTemplateFormat>> segmentTemplateFormat() {
        return Optional.ofNullable(this.segmentTemplateFormat);
    }

    private PackagingConfigurationDashPackageArgs() {}

    private PackagingConfigurationDashPackageArgs(PackagingConfigurationDashPackageArgs $) {
        this.dashManifests = $.dashManifests;
        this.encryption = $.encryption;
        this.includeEncoderConfigurationInSegments = $.includeEncoderConfigurationInSegments;
        this.periodTriggers = $.periodTriggers;
        this.segmentDurationSeconds = $.segmentDurationSeconds;
        this.segmentTemplateFormat = $.segmentTemplateFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackagingConfigurationDashPackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackagingConfigurationDashPackageArgs $;

        public Builder() {
            $ = new PackagingConfigurationDashPackageArgs();
        }

        public Builder(PackagingConfigurationDashPackageArgs defaults) {
            $ = new PackagingConfigurationDashPackageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dashManifests A list of DASH manifest configurations.
         * 
         * @return builder
         * 
         */
        public Builder dashManifests(Output<List<PackagingConfigurationDashManifestArgs>> dashManifests) {
            $.dashManifests = dashManifests;
            return this;
        }

        /**
         * @param dashManifests A list of DASH manifest configurations.
         * 
         * @return builder
         * 
         */
        public Builder dashManifests(List<PackagingConfigurationDashManifestArgs> dashManifests) {
            return dashManifests(Output.of(dashManifests));
        }

        /**
         * @param dashManifests A list of DASH manifest configurations.
         * 
         * @return builder
         * 
         */
        public Builder dashManifests(PackagingConfigurationDashManifestArgs... dashManifests) {
            return dashManifests(List.of(dashManifests));
        }

        public Builder encryption(@Nullable Output<PackagingConfigurationDashEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(PackagingConfigurationDashEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param includeEncoderConfigurationInSegments When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         * 
         * @return builder
         * 
         */
        public Builder includeEncoderConfigurationInSegments(@Nullable Output<Boolean> includeEncoderConfigurationInSegments) {
            $.includeEncoderConfigurationInSegments = includeEncoderConfigurationInSegments;
            return this;
        }

        /**
         * @param includeEncoderConfigurationInSegments When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         * 
         * @return builder
         * 
         */
        public Builder includeEncoderConfigurationInSegments(Boolean includeEncoderConfigurationInSegments) {
            return includeEncoderConfigurationInSegments(Output.of(includeEncoderConfigurationInSegments));
        }

        /**
         * @param periodTriggers A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
         * 
         * @return builder
         * 
         */
        public Builder periodTriggers(@Nullable Output<List<PackagingConfigurationDashPackagePeriodTriggersItem>> periodTriggers) {
            $.periodTriggers = periodTriggers;
            return this;
        }

        /**
         * @param periodTriggers A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
         * 
         * @return builder
         * 
         */
        public Builder periodTriggers(List<PackagingConfigurationDashPackagePeriodTriggersItem> periodTriggers) {
            return periodTriggers(Output.of(periodTriggers));
        }

        /**
         * @param periodTriggers A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
         * 
         * @return builder
         * 
         */
        public Builder periodTriggers(PackagingConfigurationDashPackagePeriodTriggersItem... periodTriggers) {
            return periodTriggers(List.of(periodTriggers));
        }

        public Builder segmentDurationSeconds(@Nullable Output<Integer> segmentDurationSeconds) {
            $.segmentDurationSeconds = segmentDurationSeconds;
            return this;
        }

        public Builder segmentDurationSeconds(Integer segmentDurationSeconds) {
            return segmentDurationSeconds(Output.of(segmentDurationSeconds));
        }

        /**
         * @param segmentTemplateFormat Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         * 
         * @return builder
         * 
         */
        public Builder segmentTemplateFormat(@Nullable Output<PackagingConfigurationDashPackageSegmentTemplateFormat> segmentTemplateFormat) {
            $.segmentTemplateFormat = segmentTemplateFormat;
            return this;
        }

        /**
         * @param segmentTemplateFormat Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         * 
         * @return builder
         * 
         */
        public Builder segmentTemplateFormat(PackagingConfigurationDashPackageSegmentTemplateFormat segmentTemplateFormat) {
            return segmentTemplateFormat(Output.of(segmentTemplateFormat));
        }

        public PackagingConfigurationDashPackageArgs build() {
            $.dashManifests = Objects.requireNonNull($.dashManifests, "expected parameter 'dashManifests' to be non-null");
            return $;
        }
    }

}
