// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appflow.inputs;

import com.pulumi.awsnative.appflow.enums.FlowConnectorType;
import com.pulumi.awsnative.appflow.inputs.FlowIncrementalPullConfigArgs;
import com.pulumi.awsnative.appflow.inputs.FlowSourceConnectorPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configurations of Source connector of the flow.
 * 
 */
public final class FlowSourceFlowConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowSourceFlowConfigArgs Empty = new FlowSourceFlowConfigArgs();

    /**
     * Name of source connector profile
     * 
     */
    @Import(name="connectorProfileName")
    private @Nullable Output<String> connectorProfileName;

    /**
     * @return Name of source connector profile
     * 
     */
    public Optional<Output<String>> connectorProfileName() {
        return Optional.ofNullable(this.connectorProfileName);
    }

    /**
     * Type of source connector
     * 
     */
    @Import(name="connectorType", required=true)
    private Output<FlowConnectorType> connectorType;

    /**
     * @return Type of source connector
     * 
     */
    public Output<FlowConnectorType> connectorType() {
        return this.connectorType;
    }

    /**
     * Configuration for scheduled incremental data pull
     * 
     */
    @Import(name="incrementalPullConfig")
    private @Nullable Output<FlowIncrementalPullConfigArgs> incrementalPullConfig;

    /**
     * @return Configuration for scheduled incremental data pull
     * 
     */
    public Optional<Output<FlowIncrementalPullConfigArgs>> incrementalPullConfig() {
        return Optional.ofNullable(this.incrementalPullConfig);
    }

    /**
     * Source connector details required to query a connector
     * 
     */
    @Import(name="sourceConnectorProperties", required=true)
    private Output<FlowSourceConnectorPropertiesArgs> sourceConnectorProperties;

    /**
     * @return Source connector details required to query a connector
     * 
     */
    public Output<FlowSourceConnectorPropertiesArgs> sourceConnectorProperties() {
        return this.sourceConnectorProperties;
    }

    private FlowSourceFlowConfigArgs() {}

    private FlowSourceFlowConfigArgs(FlowSourceFlowConfigArgs $) {
        this.connectorProfileName = $.connectorProfileName;
        this.connectorType = $.connectorType;
        this.incrementalPullConfig = $.incrementalPullConfig;
        this.sourceConnectorProperties = $.sourceConnectorProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowSourceFlowConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowSourceFlowConfigArgs $;

        public Builder() {
            $ = new FlowSourceFlowConfigArgs();
        }

        public Builder(FlowSourceFlowConfigArgs defaults) {
            $ = new FlowSourceFlowConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorProfileName Name of source connector profile
         * 
         * @return builder
         * 
         */
        public Builder connectorProfileName(@Nullable Output<String> connectorProfileName) {
            $.connectorProfileName = connectorProfileName;
            return this;
        }

        /**
         * @param connectorProfileName Name of source connector profile
         * 
         * @return builder
         * 
         */
        public Builder connectorProfileName(String connectorProfileName) {
            return connectorProfileName(Output.of(connectorProfileName));
        }

        /**
         * @param connectorType Type of source connector
         * 
         * @return builder
         * 
         */
        public Builder connectorType(Output<FlowConnectorType> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param connectorType Type of source connector
         * 
         * @return builder
         * 
         */
        public Builder connectorType(FlowConnectorType connectorType) {
            return connectorType(Output.of(connectorType));
        }

        /**
         * @param incrementalPullConfig Configuration for scheduled incremental data pull
         * 
         * @return builder
         * 
         */
        public Builder incrementalPullConfig(@Nullable Output<FlowIncrementalPullConfigArgs> incrementalPullConfig) {
            $.incrementalPullConfig = incrementalPullConfig;
            return this;
        }

        /**
         * @param incrementalPullConfig Configuration for scheduled incremental data pull
         * 
         * @return builder
         * 
         */
        public Builder incrementalPullConfig(FlowIncrementalPullConfigArgs incrementalPullConfig) {
            return incrementalPullConfig(Output.of(incrementalPullConfig));
        }

        /**
         * @param sourceConnectorProperties Source connector details required to query a connector
         * 
         * @return builder
         * 
         */
        public Builder sourceConnectorProperties(Output<FlowSourceConnectorPropertiesArgs> sourceConnectorProperties) {
            $.sourceConnectorProperties = sourceConnectorProperties;
            return this;
        }

        /**
         * @param sourceConnectorProperties Source connector details required to query a connector
         * 
         * @return builder
         * 
         */
        public Builder sourceConnectorProperties(FlowSourceConnectorPropertiesArgs sourceConnectorProperties) {
            return sourceConnectorProperties(Output.of(sourceConnectorProperties));
        }

        public FlowSourceFlowConfigArgs build() {
            $.connectorType = Objects.requireNonNull($.connectorType, "expected parameter 'connectorType' to be non-null");
            $.sourceConnectorProperties = Objects.requireNonNull($.sourceConnectorProperties, "expected parameter 'sourceConnectorProperties' to be non-null");
            return $;
        }
    }

}
