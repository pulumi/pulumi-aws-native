// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio;

import com.pulumi.awsnative.nimblestudio.enums.StudioComponentSubtype;
import com.pulumi.awsnative.nimblestudio.enums.StudioComponentType;
import com.pulumi.awsnative.nimblestudio.inputs.StudioComponentConfigurationArgs;
import com.pulumi.awsnative.nimblestudio.inputs.StudioComponentInitializationScriptArgs;
import com.pulumi.awsnative.nimblestudio.inputs.StudioComponentScriptParameterKeyValueArgs;
import com.pulumi.awsnative.nimblestudio.inputs.StudioComponentTagsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StudioComponentArgs extends com.pulumi.resources.ResourceArgs {

    public static final StudioComponentArgs Empty = new StudioComponentArgs();

    @Import(name="configuration")
    private @Nullable Output<StudioComponentConfigurationArgs> configuration;

    public Optional<Output<StudioComponentConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * &lt;p&gt;The description.&lt;/p&gt;
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return &lt;p&gt;The description.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * &lt;p&gt;The EC2 security groups that control access to the studio component.&lt;/p&gt;
     * 
     */
    @Import(name="ec2SecurityGroupIds")
    private @Nullable Output<List<String>> ec2SecurityGroupIds;

    /**
     * @return &lt;p&gt;The EC2 security groups that control access to the studio component.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<String>>> ec2SecurityGroupIds() {
        return Optional.ofNullable(this.ec2SecurityGroupIds);
    }

    /**
     * &lt;p&gt;Initialization scripts for studio components.&lt;/p&gt;
     * 
     */
    @Import(name="initializationScripts")
    private @Nullable Output<List<StudioComponentInitializationScriptArgs>> initializationScripts;

    /**
     * @return &lt;p&gt;Initialization scripts for studio components.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<StudioComponentInitializationScriptArgs>>> initializationScripts() {
        return Optional.ofNullable(this.initializationScripts);
    }

    /**
     * &lt;p&gt;The name for the studio component.&lt;/p&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &lt;p&gt;The name for the studio component.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * &lt;p&gt;Parameters for the studio component scripts.&lt;/p&gt;
     * 
     */
    @Import(name="scriptParameters")
    private @Nullable Output<List<StudioComponentScriptParameterKeyValueArgs>> scriptParameters;

    /**
     * @return &lt;p&gt;Parameters for the studio component scripts.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<StudioComponentScriptParameterKeyValueArgs>>> scriptParameters() {
        return Optional.ofNullable(this.scriptParameters);
    }

    /**
     * &lt;p&gt;The studioId. &lt;/p&gt;
     * 
     */
    @Import(name="studioId", required=true)
    private Output<String> studioId;

    /**
     * @return &lt;p&gt;The studioId. &lt;/p&gt;
     * 
     */
    public Output<String> studioId() {
        return this.studioId;
    }

    @Import(name="subtype")
    private @Nullable Output<StudioComponentSubtype> subtype;

    public Optional<Output<StudioComponentSubtype>> subtype() {
        return Optional.ofNullable(this.subtype);
    }

    @Import(name="tags")
    private @Nullable Output<StudioComponentTagsArgs> tags;

    public Optional<Output<StudioComponentTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type", required=true)
    private Output<StudioComponentType> type;

    public Output<StudioComponentType> type() {
        return this.type;
    }

    private StudioComponentArgs() {}

    private StudioComponentArgs(StudioComponentArgs $) {
        this.configuration = $.configuration;
        this.description = $.description;
        this.ec2SecurityGroupIds = $.ec2SecurityGroupIds;
        this.initializationScripts = $.initializationScripts;
        this.name = $.name;
        this.scriptParameters = $.scriptParameters;
        this.studioId = $.studioId;
        this.subtype = $.subtype;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StudioComponentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StudioComponentArgs $;

        public Builder() {
            $ = new StudioComponentArgs();
        }

        public Builder(StudioComponentArgs defaults) {
            $ = new StudioComponentArgs(Objects.requireNonNull(defaults));
        }

        public Builder configuration(@Nullable Output<StudioComponentConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(StudioComponentConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param description &lt;p&gt;The description.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description &lt;p&gt;The description.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ec2SecurityGroupIds &lt;p&gt;The EC2 security groups that control access to the studio component.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2SecurityGroupIds(@Nullable Output<List<String>> ec2SecurityGroupIds) {
            $.ec2SecurityGroupIds = ec2SecurityGroupIds;
            return this;
        }

        /**
         * @param ec2SecurityGroupIds &lt;p&gt;The EC2 security groups that control access to the studio component.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2SecurityGroupIds(List<String> ec2SecurityGroupIds) {
            return ec2SecurityGroupIds(Output.of(ec2SecurityGroupIds));
        }

        /**
         * @param ec2SecurityGroupIds &lt;p&gt;The EC2 security groups that control access to the studio component.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2SecurityGroupIds(String... ec2SecurityGroupIds) {
            return ec2SecurityGroupIds(List.of(ec2SecurityGroupIds));
        }

        /**
         * @param initializationScripts &lt;p&gt;Initialization scripts for studio components.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder initializationScripts(@Nullable Output<List<StudioComponentInitializationScriptArgs>> initializationScripts) {
            $.initializationScripts = initializationScripts;
            return this;
        }

        /**
         * @param initializationScripts &lt;p&gt;Initialization scripts for studio components.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder initializationScripts(List<StudioComponentInitializationScriptArgs> initializationScripts) {
            return initializationScripts(Output.of(initializationScripts));
        }

        /**
         * @param initializationScripts &lt;p&gt;Initialization scripts for studio components.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder initializationScripts(StudioComponentInitializationScriptArgs... initializationScripts) {
            return initializationScripts(List.of(initializationScripts));
        }

        /**
         * @param name &lt;p&gt;The name for the studio component.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;The name for the studio component.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scriptParameters &lt;p&gt;Parameters for the studio component scripts.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(@Nullable Output<List<StudioComponentScriptParameterKeyValueArgs>> scriptParameters) {
            $.scriptParameters = scriptParameters;
            return this;
        }

        /**
         * @param scriptParameters &lt;p&gt;Parameters for the studio component scripts.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(List<StudioComponentScriptParameterKeyValueArgs> scriptParameters) {
            return scriptParameters(Output.of(scriptParameters));
        }

        /**
         * @param scriptParameters &lt;p&gt;Parameters for the studio component scripts.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder scriptParameters(StudioComponentScriptParameterKeyValueArgs... scriptParameters) {
            return scriptParameters(List.of(scriptParameters));
        }

        /**
         * @param studioId &lt;p&gt;The studioId. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder studioId(Output<String> studioId) {
            $.studioId = studioId;
            return this;
        }

        /**
         * @param studioId &lt;p&gt;The studioId. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder studioId(String studioId) {
            return studioId(Output.of(studioId));
        }

        public Builder subtype(@Nullable Output<StudioComponentSubtype> subtype) {
            $.subtype = subtype;
            return this;
        }

        public Builder subtype(StudioComponentSubtype subtype) {
            return subtype(Output.of(subtype));
        }

        public Builder tags(@Nullable Output<StudioComponentTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(StudioComponentTagsArgs tags) {
            return tags(Output.of(tags));
        }

        public Builder type(Output<StudioComponentType> type) {
            $.type = type;
            return this;
        }

        public Builder type(StudioComponentType type) {
            return type(Output.of(type));
        }

        public StudioComponentArgs build() {
            $.studioId = Objects.requireNonNull($.studioId, "expected parameter 'studioId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
