// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.athena.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetPreparedStatementArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPreparedStatementArgs Empty = new GetPreparedStatementArgs();

    /**
     * The name of the prepared statement.
     * 
     */
    @Import(name="statementName", required=true)
    private Output<String> statementName;

    /**
     * @return The name of the prepared statement.
     * 
     */
    public Output<String> statementName() {
        return this.statementName;
    }

    /**
     * The name of the workgroup to which the prepared statement belongs.
     * 
     */
    @Import(name="workGroup", required=true)
    private Output<String> workGroup;

    /**
     * @return The name of the workgroup to which the prepared statement belongs.
     * 
     */
    public Output<String> workGroup() {
        return this.workGroup;
    }

    private GetPreparedStatementArgs() {}

    private GetPreparedStatementArgs(GetPreparedStatementArgs $) {
        this.statementName = $.statementName;
        this.workGroup = $.workGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPreparedStatementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPreparedStatementArgs $;

        public Builder() {
            $ = new GetPreparedStatementArgs();
        }

        public Builder(GetPreparedStatementArgs defaults) {
            $ = new GetPreparedStatementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param statementName The name of the prepared statement.
         * 
         * @return builder
         * 
         */
        public Builder statementName(Output<String> statementName) {
            $.statementName = statementName;
            return this;
        }

        /**
         * @param statementName The name of the prepared statement.
         * 
         * @return builder
         * 
         */
        public Builder statementName(String statementName) {
            return statementName(Output.of(statementName));
        }

        /**
         * @param workGroup The name of the workgroup to which the prepared statement belongs.
         * 
         * @return builder
         * 
         */
        public Builder workGroup(Output<String> workGroup) {
            $.workGroup = workGroup;
            return this;
        }

        /**
         * @param workGroup The name of the workgroup to which the prepared statement belongs.
         * 
         * @return builder
         * 
         */
        public Builder workGroup(String workGroup) {
            return workGroup(Output.of(workGroup));
        }

        public GetPreparedStatementArgs build() {
            $.statementName = Objects.requireNonNull($.statementName, "expected parameter 'statementName' to be non-null");
            $.workGroup = Objects.requireNonNull($.workGroup, "expected parameter 'workGroup' to be non-null");
            return $;
        }
    }

}
