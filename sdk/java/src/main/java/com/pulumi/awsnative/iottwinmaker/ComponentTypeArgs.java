// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iottwinmaker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComponentTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComponentTypeArgs Empty = new ComponentTypeArgs();

    /**
     * The ID of the component type.
     * 
     */
    @Import(name="componentTypeId", required=true)
    private Output<String> componentTypeId;

    /**
     * @return The ID of the component type.
     * 
     */
    public Output<String> componentTypeId() {
        return this.componentTypeId;
    }

    /**
     * The description of the component type.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the component type.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the parent component type to extend.
     * 
     */
    @Import(name="extendsFrom")
    private @Nullable Output<List<String>> extendsFrom;

    /**
     * @return Specifies the parent component type to extend.
     * 
     */
    public Optional<Output<List<String>>> extendsFrom() {
        return Optional.ofNullable(this.extendsFrom);
    }

    /**
     * a Map of functions in the component type. Each function&#39;s key must be unique to this map.
     * 
     */
    @Import(name="functions")
    private @Nullable Output<Object> functions;

    /**
     * @return a Map of functions in the component type. Each function&#39;s key must be unique to this map.
     * 
     */
    public Optional<Output<Object>> functions() {
        return Optional.ofNullable(this.functions);
    }

    /**
     * A Boolean value that specifies whether an entity can have more than one component of this type.
     * 
     */
    @Import(name="isSingleton")
    private @Nullable Output<Boolean> isSingleton;

    /**
     * @return A Boolean value that specifies whether an entity can have more than one component of this type.
     * 
     */
    public Optional<Output<Boolean>> isSingleton() {
        return Optional.ofNullable(this.isSingleton);
    }

    /**
     * An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
     * 
     */
    @Import(name="propertyDefinitions")
    private @Nullable Output<Object> propertyDefinitions;

    /**
     * @return An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
     * 
     */
    public Optional<Output<Object>> propertyDefinitions() {
        return Optional.ofNullable(this.propertyDefinitions);
    }

    /**
     * A map of key-value pairs to associate with a resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return A map of key-value pairs to associate with a resource.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the workspace that contains the component type.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace that contains the component type.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private ComponentTypeArgs() {}

    private ComponentTypeArgs(ComponentTypeArgs $) {
        this.componentTypeId = $.componentTypeId;
        this.description = $.description;
        this.extendsFrom = $.extendsFrom;
        this.functions = $.functions;
        this.isSingleton = $.isSingleton;
        this.propertyDefinitions = $.propertyDefinitions;
        this.tags = $.tags;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComponentTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComponentTypeArgs $;

        public Builder() {
            $ = new ComponentTypeArgs();
        }

        public Builder(ComponentTypeArgs defaults) {
            $ = new ComponentTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param componentTypeId The ID of the component type.
         * 
         * @return builder
         * 
         */
        public Builder componentTypeId(Output<String> componentTypeId) {
            $.componentTypeId = componentTypeId;
            return this;
        }

        /**
         * @param componentTypeId The ID of the component type.
         * 
         * @return builder
         * 
         */
        public Builder componentTypeId(String componentTypeId) {
            return componentTypeId(Output.of(componentTypeId));
        }

        /**
         * @param description The description of the component type.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the component type.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param extendsFrom Specifies the parent component type to extend.
         * 
         * @return builder
         * 
         */
        public Builder extendsFrom(@Nullable Output<List<String>> extendsFrom) {
            $.extendsFrom = extendsFrom;
            return this;
        }

        /**
         * @param extendsFrom Specifies the parent component type to extend.
         * 
         * @return builder
         * 
         */
        public Builder extendsFrom(List<String> extendsFrom) {
            return extendsFrom(Output.of(extendsFrom));
        }

        /**
         * @param extendsFrom Specifies the parent component type to extend.
         * 
         * @return builder
         * 
         */
        public Builder extendsFrom(String... extendsFrom) {
            return extendsFrom(List.of(extendsFrom));
        }

        /**
         * @param functions a Map of functions in the component type. Each function&#39;s key must be unique to this map.
         * 
         * @return builder
         * 
         */
        public Builder functions(@Nullable Output<Object> functions) {
            $.functions = functions;
            return this;
        }

        /**
         * @param functions a Map of functions in the component type. Each function&#39;s key must be unique to this map.
         * 
         * @return builder
         * 
         */
        public Builder functions(Object functions) {
            return functions(Output.of(functions));
        }

        /**
         * @param isSingleton A Boolean value that specifies whether an entity can have more than one component of this type.
         * 
         * @return builder
         * 
         */
        public Builder isSingleton(@Nullable Output<Boolean> isSingleton) {
            $.isSingleton = isSingleton;
            return this;
        }

        /**
         * @param isSingleton A Boolean value that specifies whether an entity can have more than one component of this type.
         * 
         * @return builder
         * 
         */
        public Builder isSingleton(Boolean isSingleton) {
            return isSingleton(Output.of(isSingleton));
        }

        /**
         * @param propertyDefinitions An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
         * 
         * @return builder
         * 
         */
        public Builder propertyDefinitions(@Nullable Output<Object> propertyDefinitions) {
            $.propertyDefinitions = propertyDefinitions;
            return this;
        }

        /**
         * @param propertyDefinitions An map of the property definitions in the component type. Each property definition&#39;s key must be unique to this map.
         * 
         * @return builder
         * 
         */
        public Builder propertyDefinitions(Object propertyDefinitions) {
            return propertyDefinitions(Output.of(propertyDefinitions));
        }

        /**
         * @param tags A map of key-value pairs to associate with a resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of key-value pairs to associate with a resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param workspaceId The ID of the workspace that contains the component type.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace that contains the component type.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public ComponentTypeArgs build() {
            $.componentTypeId = Objects.requireNonNull($.componentTypeId, "expected parameter 'componentTypeId' to be non-null");
            $.workspaceId = Objects.requireNonNull($.workspaceId, "expected parameter 'workspaceId' to be non-null");
            return $;
        }
    }

}
