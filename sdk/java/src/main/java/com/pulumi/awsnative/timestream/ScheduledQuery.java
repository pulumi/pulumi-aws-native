// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.timestream;

import com.pulumi.awsnative.Utilities;
import com.pulumi.awsnative.timestream.ScheduledQueryArgs;
import com.pulumi.awsnative.timestream.outputs.ScheduledQueryErrorReportConfiguration;
import com.pulumi.awsnative.timestream.outputs.ScheduledQueryNotificationConfiguration;
import com.pulumi.awsnative.timestream.outputs.ScheduledQueryScheduleConfiguration;
import com.pulumi.awsnative.timestream.outputs.ScheduledQueryTag;
import com.pulumi.awsnative.timestream.outputs.ScheduledQueryTargetConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
 * 
 */
@ResourceType(type="aws-native:timestream:ScheduledQuery")
public class ScheduledQuery extends com.pulumi.resources.CustomResource {
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    public Output<String> arn() {
        return this.arn;
    }
    @Export(name="clientToken", type=String.class, parameters={})
    private Output</* @Nullable */ String> clientToken;

    public Output<Optional<String>> clientToken() {
        return Codegen.optional(this.clientToken);
    }
    @Export(name="errorReportConfiguration", type=ScheduledQueryErrorReportConfiguration.class, parameters={})
    private Output<ScheduledQueryErrorReportConfiguration> errorReportConfiguration;

    public Output<ScheduledQueryErrorReportConfiguration> errorReportConfiguration() {
        return this.errorReportConfiguration;
    }
    @Export(name="kmsKeyId", type=String.class, parameters={})
    private Output</* @Nullable */ String> kmsKeyId;

    public Output<Optional<String>> kmsKeyId() {
        return Codegen.optional(this.kmsKeyId);
    }
    @Export(name="notificationConfiguration", type=ScheduledQueryNotificationConfiguration.class, parameters={})
    private Output<ScheduledQueryNotificationConfiguration> notificationConfiguration;

    public Output<ScheduledQueryNotificationConfiguration> notificationConfiguration() {
        return this.notificationConfiguration;
    }
    @Export(name="queryString", type=String.class, parameters={})
    private Output<String> queryString;

    public Output<String> queryString() {
        return this.queryString;
    }
    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     * 
     */
    @Export(name="sQErrorReportConfiguration", type=String.class, parameters={})
    private Output<String> sQErrorReportConfiguration;

    /**
     * @return Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     * 
     */
    public Output<String> sQErrorReportConfiguration() {
        return this.sQErrorReportConfiguration;
    }
    /**
     * The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     * 
     */
    @Export(name="sQKmsKeyId", type=String.class, parameters={})
    private Output<String> sQKmsKeyId;

    /**
     * @return The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
     * 
     */
    public Output<String> sQKmsKeyId() {
        return this.sQKmsKeyId;
    }
    /**
     * The name of the scheduled query. Scheduled query names must be unique within each Region.
     * 
     */
    @Export(name="sQName", type=String.class, parameters={})
    private Output<String> sQName;

    /**
     * @return The name of the scheduled query. Scheduled query names must be unique within each Region.
     * 
     */
    public Output<String> sQName() {
        return this.sQName;
    }
    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     * 
     */
    @Export(name="sQNotificationConfiguration", type=String.class, parameters={})
    private Output<String> sQNotificationConfiguration;

    /**
     * @return Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     * 
     */
    public Output<String> sQNotificationConfiguration() {
        return this.sQNotificationConfiguration;
    }
    /**
     * The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     * 
     */
    @Export(name="sQQueryString", type=String.class, parameters={})
    private Output<String> sQQueryString;

    /**
     * @return The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
     * 
     */
    public Output<String> sQQueryString() {
        return this.sQQueryString;
    }
    /**
     * Configuration for when the scheduled query is executed.
     * 
     */
    @Export(name="sQScheduleConfiguration", type=String.class, parameters={})
    private Output<String> sQScheduleConfiguration;

    /**
     * @return Configuration for when the scheduled query is executed.
     * 
     */
    public Output<String> sQScheduleConfiguration() {
        return this.sQScheduleConfiguration;
    }
    /**
     * The ARN for the IAM role that Timestream will assume when running the scheduled query.
     * 
     */
    @Export(name="sQScheduledQueryExecutionRoleArn", type=String.class, parameters={})
    private Output<String> sQScheduledQueryExecutionRoleArn;

    /**
     * @return The ARN for the IAM role that Timestream will assume when running the scheduled query.
     * 
     */
    public Output<String> sQScheduledQueryExecutionRoleArn() {
        return this.sQScheduledQueryExecutionRoleArn;
    }
    /**
     * Configuration of target store where scheduled query results are written to.
     * 
     */
    @Export(name="sQTargetConfiguration", type=String.class, parameters={})
    private Output<String> sQTargetConfiguration;

    /**
     * @return Configuration of target store where scheduled query results are written to.
     * 
     */
    public Output<String> sQTargetConfiguration() {
        return this.sQTargetConfiguration;
    }
    @Export(name="scheduleConfiguration", type=ScheduledQueryScheduleConfiguration.class, parameters={})
    private Output<ScheduledQueryScheduleConfiguration> scheduleConfiguration;

    public Output<ScheduledQueryScheduleConfiguration> scheduleConfiguration() {
        return this.scheduleConfiguration;
    }
    @Export(name="scheduledQueryExecutionRoleArn", type=String.class, parameters={})
    private Output<String> scheduledQueryExecutionRoleArn;

    public Output<String> scheduledQueryExecutionRoleArn() {
        return this.scheduledQueryExecutionRoleArn;
    }
    @Export(name="scheduledQueryName", type=String.class, parameters={})
    private Output</* @Nullable */ String> scheduledQueryName;

    public Output<Optional<String>> scheduledQueryName() {
        return Codegen.optional(this.scheduledQueryName);
    }
    @Export(name="tags", type=List.class, parameters={ScheduledQueryTag.class})
    private Output</* @Nullable */ List<ScheduledQueryTag>> tags;

    public Output<Optional<List<ScheduledQueryTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="targetConfiguration", type=ScheduledQueryTargetConfiguration.class, parameters={})
    private Output</* @Nullable */ ScheduledQueryTargetConfiguration> targetConfiguration;

    public Output<Optional<ScheduledQueryTargetConfiguration>> targetConfiguration() {
        return Codegen.optional(this.targetConfiguration);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ScheduledQuery(String name) {
        this(name, ScheduledQueryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ScheduledQuery(String name, ScheduledQueryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ScheduledQuery(String name, ScheduledQueryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:timestream:ScheduledQuery", name, args == null ? ScheduledQueryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ScheduledQuery(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:timestream:ScheduledQuery", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ScheduledQuery get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ScheduledQuery(name, id, options);
    }
}
