// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53.inputs;

import com.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesInsufficientDataHealthStatus;
import com.pulumi.awsnative.route53.enums.HealthCheckConfigPropertiesType;
import com.pulumi.awsnative.route53.inputs.HealthCheckAlarmIdentifierArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A complex type that contains information about the health check.
 * 
 */
public final class HealthCheckConfigPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final HealthCheckConfigPropertiesArgs Empty = new HealthCheckConfigPropertiesArgs();

    @Import(name="alarmIdentifier")
    private @Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier;

    public Optional<Output<HealthCheckAlarmIdentifierArgs>> alarmIdentifier() {
        return Optional.ofNullable(this.alarmIdentifier);
    }

    @Import(name="childHealthChecks")
    private @Nullable Output<List<String>> childHealthChecks;

    public Optional<Output<List<String>>> childHealthChecks() {
        return Optional.ofNullable(this.childHealthChecks);
    }

    @Import(name="enableSNI")
    private @Nullable Output<Boolean> enableSNI;

    public Optional<Output<Boolean>> enableSNI() {
        return Optional.ofNullable(this.enableSNI);
    }

    @Import(name="failureThreshold")
    private @Nullable Output<Integer> failureThreshold;

    public Optional<Output<Integer>> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }

    @Import(name="fullyQualifiedDomainName")
    private @Nullable Output<String> fullyQualifiedDomainName;

    public Optional<Output<String>> fullyQualifiedDomainName() {
        return Optional.ofNullable(this.fullyQualifiedDomainName);
    }

    @Import(name="healthThreshold")
    private @Nullable Output<Integer> healthThreshold;

    public Optional<Output<Integer>> healthThreshold() {
        return Optional.ofNullable(this.healthThreshold);
    }

    @Import(name="iPAddress")
    private @Nullable Output<String> iPAddress;

    public Optional<Output<String>> iPAddress() {
        return Optional.ofNullable(this.iPAddress);
    }

    @Import(name="insufficientDataHealthStatus")
    private @Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus;

    public Optional<Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus>> insufficientDataHealthStatus() {
        return Optional.ofNullable(this.insufficientDataHealthStatus);
    }

    @Import(name="inverted")
    private @Nullable Output<Boolean> inverted;

    public Optional<Output<Boolean>> inverted() {
        return Optional.ofNullable(this.inverted);
    }

    @Import(name="measureLatency")
    private @Nullable Output<Boolean> measureLatency;

    public Optional<Output<Boolean>> measureLatency() {
        return Optional.ofNullable(this.measureLatency);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    @Import(name="requestInterval")
    private @Nullable Output<Integer> requestInterval;

    public Optional<Output<Integer>> requestInterval() {
        return Optional.ofNullable(this.requestInterval);
    }

    @Import(name="resourcePath")
    private @Nullable Output<String> resourcePath;

    public Optional<Output<String>> resourcePath() {
        return Optional.ofNullable(this.resourcePath);
    }

    @Import(name="routingControlArn")
    private @Nullable Output<String> routingControlArn;

    public Optional<Output<String>> routingControlArn() {
        return Optional.ofNullable(this.routingControlArn);
    }

    @Import(name="searchString")
    private @Nullable Output<String> searchString;

    public Optional<Output<String>> searchString() {
        return Optional.ofNullable(this.searchString);
    }

    @Import(name="type", required=true)
    private Output<HealthCheckConfigPropertiesType> type;

    public Output<HealthCheckConfigPropertiesType> type() {
        return this.type;
    }

    private HealthCheckConfigPropertiesArgs() {}

    private HealthCheckConfigPropertiesArgs(HealthCheckConfigPropertiesArgs $) {
        this.alarmIdentifier = $.alarmIdentifier;
        this.childHealthChecks = $.childHealthChecks;
        this.enableSNI = $.enableSNI;
        this.failureThreshold = $.failureThreshold;
        this.fullyQualifiedDomainName = $.fullyQualifiedDomainName;
        this.healthThreshold = $.healthThreshold;
        this.iPAddress = $.iPAddress;
        this.insufficientDataHealthStatus = $.insufficientDataHealthStatus;
        this.inverted = $.inverted;
        this.measureLatency = $.measureLatency;
        this.port = $.port;
        this.regions = $.regions;
        this.requestInterval = $.requestInterval;
        this.resourcePath = $.resourcePath;
        this.routingControlArn = $.routingControlArn;
        this.searchString = $.searchString;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthCheckConfigPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthCheckConfigPropertiesArgs $;

        public Builder() {
            $ = new HealthCheckConfigPropertiesArgs();
        }

        public Builder(HealthCheckConfigPropertiesArgs defaults) {
            $ = new HealthCheckConfigPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder alarmIdentifier(@Nullable Output<HealthCheckAlarmIdentifierArgs> alarmIdentifier) {
            $.alarmIdentifier = alarmIdentifier;
            return this;
        }

        public Builder alarmIdentifier(HealthCheckAlarmIdentifierArgs alarmIdentifier) {
            return alarmIdentifier(Output.of(alarmIdentifier));
        }

        public Builder childHealthChecks(@Nullable Output<List<String>> childHealthChecks) {
            $.childHealthChecks = childHealthChecks;
            return this;
        }

        public Builder childHealthChecks(List<String> childHealthChecks) {
            return childHealthChecks(Output.of(childHealthChecks));
        }

        public Builder childHealthChecks(String... childHealthChecks) {
            return childHealthChecks(List.of(childHealthChecks));
        }

        public Builder enableSNI(@Nullable Output<Boolean> enableSNI) {
            $.enableSNI = enableSNI;
            return this;
        }

        public Builder enableSNI(Boolean enableSNI) {
            return enableSNI(Output.of(enableSNI));
        }

        public Builder failureThreshold(@Nullable Output<Integer> failureThreshold) {
            $.failureThreshold = failureThreshold;
            return this;
        }

        public Builder failureThreshold(Integer failureThreshold) {
            return failureThreshold(Output.of(failureThreshold));
        }

        public Builder fullyQualifiedDomainName(@Nullable Output<String> fullyQualifiedDomainName) {
            $.fullyQualifiedDomainName = fullyQualifiedDomainName;
            return this;
        }

        public Builder fullyQualifiedDomainName(String fullyQualifiedDomainName) {
            return fullyQualifiedDomainName(Output.of(fullyQualifiedDomainName));
        }

        public Builder healthThreshold(@Nullable Output<Integer> healthThreshold) {
            $.healthThreshold = healthThreshold;
            return this;
        }

        public Builder healthThreshold(Integer healthThreshold) {
            return healthThreshold(Output.of(healthThreshold));
        }

        public Builder iPAddress(@Nullable Output<String> iPAddress) {
            $.iPAddress = iPAddress;
            return this;
        }

        public Builder iPAddress(String iPAddress) {
            return iPAddress(Output.of(iPAddress));
        }

        public Builder insufficientDataHealthStatus(@Nullable Output<HealthCheckConfigPropertiesInsufficientDataHealthStatus> insufficientDataHealthStatus) {
            $.insufficientDataHealthStatus = insufficientDataHealthStatus;
            return this;
        }

        public Builder insufficientDataHealthStatus(HealthCheckConfigPropertiesInsufficientDataHealthStatus insufficientDataHealthStatus) {
            return insufficientDataHealthStatus(Output.of(insufficientDataHealthStatus));
        }

        public Builder inverted(@Nullable Output<Boolean> inverted) {
            $.inverted = inverted;
            return this;
        }

        public Builder inverted(Boolean inverted) {
            return inverted(Output.of(inverted));
        }

        public Builder measureLatency(@Nullable Output<Boolean> measureLatency) {
            $.measureLatency = measureLatency;
            return this;
        }

        public Builder measureLatency(Boolean measureLatency) {
            return measureLatency(Output.of(measureLatency));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        public Builder requestInterval(@Nullable Output<Integer> requestInterval) {
            $.requestInterval = requestInterval;
            return this;
        }

        public Builder requestInterval(Integer requestInterval) {
            return requestInterval(Output.of(requestInterval));
        }

        public Builder resourcePath(@Nullable Output<String> resourcePath) {
            $.resourcePath = resourcePath;
            return this;
        }

        public Builder resourcePath(String resourcePath) {
            return resourcePath(Output.of(resourcePath));
        }

        public Builder routingControlArn(@Nullable Output<String> routingControlArn) {
            $.routingControlArn = routingControlArn;
            return this;
        }

        public Builder routingControlArn(String routingControlArn) {
            return routingControlArn(Output.of(routingControlArn));
        }

        public Builder searchString(@Nullable Output<String> searchString) {
            $.searchString = searchString;
            return this;
        }

        public Builder searchString(String searchString) {
            return searchString(Output.of(searchString));
        }

        public Builder type(Output<HealthCheckConfigPropertiesType> type) {
            $.type = type;
            return this;
        }

        public Builder type(HealthCheckConfigPropertiesType type) {
            return type(Output.of(type));
        }

        public HealthCheckConfigPropertiesArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
