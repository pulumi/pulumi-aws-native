// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.rekognition.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;


/**
 * An (X, Y) cartesian coordinate denoting a point on the frame
 * 
 */
public final class StreamProcessorPointArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorPointArgs Empty = new StreamProcessorPointArgs();

    /**
     * The X coordinate of the point.
     * 
     */
    @Import(name="x", required=true)
    private Output<Double> x;

    /**
     * @return The X coordinate of the point.
     * 
     */
    public Output<Double> x() {
        return this.x;
    }

    /**
     * The Y coordinate of the point.
     * 
     */
    @Import(name="y", required=true)
    private Output<Double> y;

    /**
     * @return The Y coordinate of the point.
     * 
     */
    public Output<Double> y() {
        return this.y;
    }

    private StreamProcessorPointArgs() {}

    private StreamProcessorPointArgs(StreamProcessorPointArgs $) {
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorPointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorPointArgs $;

        public Builder() {
            $ = new StreamProcessorPointArgs();
        }

        public Builder(StreamProcessorPointArgs defaults) {
            $ = new StreamProcessorPointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param x The X coordinate of the point.
         * 
         * @return builder
         * 
         */
        public Builder x(Output<Double> x) {
            $.x = x;
            return this;
        }

        /**
         * @param x The X coordinate of the point.
         * 
         * @return builder
         * 
         */
        public Builder x(Double x) {
            return x(Output.of(x));
        }

        /**
         * @param y The Y coordinate of the point.
         * 
         * @return builder
         * 
         */
        public Builder y(Output<Double> y) {
            $.y = y;
            return this;
        }

        /**
         * @param y The Y coordinate of the point.
         * 
         * @return builder
         * 
         */
        public Builder y(Double y) {
            return y(Output.of(y));
        }

        public StreamProcessorPointArgs build() {
            $.x = Objects.requireNonNull($.x, "expected parameter 'x' to be non-null");
            $.y = Objects.requireNonNull($.y, "expected parameter 'y' to be non-null");
            return $;
        }
    }

}
