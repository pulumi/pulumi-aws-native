// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.location;

import com.pulumi.awsnative.location.enums.GeofenceCollectionPricingPlan;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GeofenceCollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GeofenceCollectionArgs Empty = new GeofenceCollectionArgs();

    @Import(name="collectionName", required=true)
    private Output<String> collectionName;

    public Output<String> collectionName() {
        return this.collectionName;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    @Import(name="pricingPlan")
    private @Nullable Output<GeofenceCollectionPricingPlan> pricingPlan;

    public Optional<Output<GeofenceCollectionPricingPlan>> pricingPlan() {
        return Optional.ofNullable(this.pricingPlan);
    }

    @Import(name="pricingPlanDataSource")
    private @Nullable Output<String> pricingPlanDataSource;

    public Optional<Output<String>> pricingPlanDataSource() {
        return Optional.ofNullable(this.pricingPlanDataSource);
    }

    private GeofenceCollectionArgs() {}

    private GeofenceCollectionArgs(GeofenceCollectionArgs $) {
        this.collectionName = $.collectionName;
        this.description = $.description;
        this.kmsKeyId = $.kmsKeyId;
        this.pricingPlan = $.pricingPlan;
        this.pricingPlanDataSource = $.pricingPlanDataSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GeofenceCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GeofenceCollectionArgs $;

        public Builder() {
            $ = new GeofenceCollectionArgs();
        }

        public Builder(GeofenceCollectionArgs defaults) {
            $ = new GeofenceCollectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder collectionName(Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public Builder pricingPlan(@Nullable Output<GeofenceCollectionPricingPlan> pricingPlan) {
            $.pricingPlan = pricingPlan;
            return this;
        }

        public Builder pricingPlan(GeofenceCollectionPricingPlan pricingPlan) {
            return pricingPlan(Output.of(pricingPlan));
        }

        public Builder pricingPlanDataSource(@Nullable Output<String> pricingPlanDataSource) {
            $.pricingPlanDataSource = pricingPlanDataSource;
            return this;
        }

        public Builder pricingPlanDataSource(String pricingPlanDataSource) {
            return pricingPlanDataSource(Output.of(pricingPlanDataSource));
        }

        public GeofenceCollectionArgs build() {
            $.collectionName = Objects.requireNonNull($.collectionName, "expected parameter 'collectionName' to be non-null");
            return $;
        }
    }

}
