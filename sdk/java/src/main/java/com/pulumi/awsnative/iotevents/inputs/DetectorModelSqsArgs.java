// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotevents.inputs;

import com.pulumi.awsnative.iotevents.inputs.DetectorModelPayloadArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorModelSqsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorModelSqsArgs Empty = new DetectorModelSqsArgs();

    @Import(name="payload")
    private @Nullable Output<DetectorModelPayloadArgs> payload;

    public Optional<Output<DetectorModelPayloadArgs>> payload() {
        return Optional.ofNullable(this.payload);
    }

    /**
     * The URL of the SQS queue where the data is written.
     * 
     */
    @Import(name="queueUrl", required=true)
    private Output<String> queueUrl;

    /**
     * @return The URL of the SQS queue where the data is written.
     * 
     */
    public Output<String> queueUrl() {
        return this.queueUrl;
    }

    /**
     * Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
     * 
     */
    @Import(name="useBase64")
    private @Nullable Output<Boolean> useBase64;

    /**
     * @return Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
     * 
     */
    public Optional<Output<Boolean>> useBase64() {
        return Optional.ofNullable(this.useBase64);
    }

    private DetectorModelSqsArgs() {}

    private DetectorModelSqsArgs(DetectorModelSqsArgs $) {
        this.payload = $.payload;
        this.queueUrl = $.queueUrl;
        this.useBase64 = $.useBase64;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorModelSqsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorModelSqsArgs $;

        public Builder() {
            $ = new DetectorModelSqsArgs();
        }

        public Builder(DetectorModelSqsArgs defaults) {
            $ = new DetectorModelSqsArgs(Objects.requireNonNull(defaults));
        }

        public Builder payload(@Nullable Output<DetectorModelPayloadArgs> payload) {
            $.payload = payload;
            return this;
        }

        public Builder payload(DetectorModelPayloadArgs payload) {
            return payload(Output.of(payload));
        }

        /**
         * @param queueUrl The URL of the SQS queue where the data is written.
         * 
         * @return builder
         * 
         */
        public Builder queueUrl(Output<String> queueUrl) {
            $.queueUrl = queueUrl;
            return this;
        }

        /**
         * @param queueUrl The URL of the SQS queue where the data is written.
         * 
         * @return builder
         * 
         */
        public Builder queueUrl(String queueUrl) {
            return queueUrl(Output.of(queueUrl));
        }

        /**
         * @param useBase64 Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         * 
         * @return builder
         * 
         */
        public Builder useBase64(@Nullable Output<Boolean> useBase64) {
            $.useBase64 = useBase64;
            return this;
        }

        /**
         * @param useBase64 Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         * 
         * @return builder
         * 
         */
        public Builder useBase64(Boolean useBase64) {
            return useBase64(Output.of(useBase64));
        }

        public DetectorModelSqsArgs build() {
            $.queueUrl = Objects.requireNonNull($.queueUrl, "expected parameter 'queueUrl' to be non-null");
            return $;
        }
    }

}
