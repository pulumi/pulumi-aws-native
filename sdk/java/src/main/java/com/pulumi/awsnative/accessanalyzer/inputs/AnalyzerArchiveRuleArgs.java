// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.accessanalyzer.inputs;

import com.pulumi.awsnative.accessanalyzer.inputs.AnalyzerFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
 * 
 */
public final class AnalyzerArchiveRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyzerArchiveRuleArgs Empty = new AnalyzerArchiveRuleArgs();

    @Import(name="filter", required=true)
    private Output<List<AnalyzerFilterArgs>> filter;

    public Output<List<AnalyzerFilterArgs>> filter() {
        return this.filter;
    }

    /**
     * The archive rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The archive rule name
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    private AnalyzerArchiveRuleArgs() {}

    private AnalyzerArchiveRuleArgs(AnalyzerArchiveRuleArgs $) {
        this.filter = $.filter;
        this.ruleName = $.ruleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyzerArchiveRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyzerArchiveRuleArgs $;

        public Builder() {
            $ = new AnalyzerArchiveRuleArgs();
        }

        public Builder(AnalyzerArchiveRuleArgs defaults) {
            $ = new AnalyzerArchiveRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder filter(Output<List<AnalyzerFilterArgs>> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(List<AnalyzerFilterArgs> filter) {
            return filter(Output.of(filter));
        }

        public Builder filter(AnalyzerFilterArgs... filter) {
            return filter(List.of(filter));
        }

        /**
         * @param ruleName The archive rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The archive rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public AnalyzerArchiveRuleArgs build() {
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            return $;
        }
    }

}
