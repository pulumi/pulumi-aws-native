// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3outposts;

import com.pulumi.awsnative.s3outposts.inputs.BucketLifecycleConfigurationArgs;
import com.pulumi.awsnative.s3outposts.inputs.BucketTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketArgs Empty = new BucketArgs();

    /**
     * A name for the bucket.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return A name for the bucket.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * Rules that define how Amazon S3Outposts manages objects during their lifetime.
     * 
     */
    @Import(name="lifecycleConfiguration")
    private @Nullable Output<BucketLifecycleConfigurationArgs> lifecycleConfiguration;

    /**
     * @return Rules that define how Amazon S3Outposts manages objects during their lifetime.
     * 
     */
    public Optional<Output<BucketLifecycleConfigurationArgs>> lifecycleConfiguration() {
        return Optional.ofNullable(this.lifecycleConfiguration);
    }

    /**
     * The id of the customer outpost on which the bucket resides.
     * 
     */
    @Import(name="outpostId", required=true)
    private Output<String> outpostId;

    /**
     * @return The id of the customer outpost on which the bucket resides.
     * 
     */
    public Output<String> outpostId() {
        return this.outpostId;
    }

    /**
     * An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<BucketTagArgs>> tags;

    /**
     * @return An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
     * 
     */
    public Optional<Output<List<BucketTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private BucketArgs() {}

    private BucketArgs(BucketArgs $) {
        this.bucketName = $.bucketName;
        this.lifecycleConfiguration = $.lifecycleConfiguration;
        this.outpostId = $.outpostId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketArgs $;

        public Builder() {
            $ = new BucketArgs();
        }

        public Builder(BucketArgs defaults) {
            $ = new BucketArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName A name for the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName A name for the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param lifecycleConfiguration Rules that define how Amazon S3Outposts manages objects during their lifetime.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleConfiguration(@Nullable Output<BucketLifecycleConfigurationArgs> lifecycleConfiguration) {
            $.lifecycleConfiguration = lifecycleConfiguration;
            return this;
        }

        /**
         * @param lifecycleConfiguration Rules that define how Amazon S3Outposts manages objects during their lifetime.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleConfiguration(BucketLifecycleConfigurationArgs lifecycleConfiguration) {
            return lifecycleConfiguration(Output.of(lifecycleConfiguration));
        }

        /**
         * @param outpostId The id of the customer outpost on which the bucket resides.
         * 
         * @return builder
         * 
         */
        public Builder outpostId(Output<String> outpostId) {
            $.outpostId = outpostId;
            return this;
        }

        /**
         * @param outpostId The id of the customer outpost on which the bucket resides.
         * 
         * @return builder
         * 
         */
        public Builder outpostId(String outpostId) {
            return outpostId(Output.of(outpostId));
        }

        /**
         * @param tags An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<BucketTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<BucketTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
         * 
         * @return builder
         * 
         */
        public Builder tags(BucketTagArgs... tags) {
            return tags(List.of(tags));
        }

        public BucketArgs build() {
            $.outpostId = Objects.requireNonNull($.outpostId, "expected parameter 'outpostId' to be non-null");
            return $;
        }
    }

}
