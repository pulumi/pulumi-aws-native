// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.enums.JobOutputCompressionFormat;
import com.pulumi.awsnative.databrew.enums.JobOutputFormat;
import com.pulumi.awsnative.databrew.inputs.JobOutputFormatOptionsArgs;
import com.pulumi.awsnative.databrew.inputs.JobS3LocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobOutputArgs Empty = new JobOutputArgs();

    @Import(name="compressionFormat")
    private @Nullable Output<JobOutputCompressionFormat> compressionFormat;

    public Optional<Output<JobOutputCompressionFormat>> compressionFormat() {
        return Optional.ofNullable(this.compressionFormat);
    }

    @Import(name="format")
    private @Nullable Output<JobOutputFormat> format;

    public Optional<Output<JobOutputFormat>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="formatOptions")
    private @Nullable Output<JobOutputFormatOptionsArgs> formatOptions;

    public Optional<Output<JobOutputFormatOptionsArgs>> formatOptions() {
        return Optional.ofNullable(this.formatOptions);
    }

    @Import(name="location", required=true)
    private Output<JobS3LocationArgs> location;

    public Output<JobS3LocationArgs> location() {
        return this.location;
    }

    @Import(name="maxOutputFiles")
    private @Nullable Output<Integer> maxOutputFiles;

    public Optional<Output<Integer>> maxOutputFiles() {
        return Optional.ofNullable(this.maxOutputFiles);
    }

    @Import(name="overwrite")
    private @Nullable Output<Boolean> overwrite;

    public Optional<Output<Boolean>> overwrite() {
        return Optional.ofNullable(this.overwrite);
    }

    @Import(name="partitionColumns")
    private @Nullable Output<List<String>> partitionColumns;

    public Optional<Output<List<String>>> partitionColumns() {
        return Optional.ofNullable(this.partitionColumns);
    }

    private JobOutputArgs() {}

    private JobOutputArgs(JobOutputArgs $) {
        this.compressionFormat = $.compressionFormat;
        this.format = $.format;
        this.formatOptions = $.formatOptions;
        this.location = $.location;
        this.maxOutputFiles = $.maxOutputFiles;
        this.overwrite = $.overwrite;
        this.partitionColumns = $.partitionColumns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobOutputArgs $;

        public Builder() {
            $ = new JobOutputArgs();
        }

        public Builder(JobOutputArgs defaults) {
            $ = new JobOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder compressionFormat(@Nullable Output<JobOutputCompressionFormat> compressionFormat) {
            $.compressionFormat = compressionFormat;
            return this;
        }

        public Builder compressionFormat(JobOutputCompressionFormat compressionFormat) {
            return compressionFormat(Output.of(compressionFormat));
        }

        public Builder format(@Nullable Output<JobOutputFormat> format) {
            $.format = format;
            return this;
        }

        public Builder format(JobOutputFormat format) {
            return format(Output.of(format));
        }

        public Builder formatOptions(@Nullable Output<JobOutputFormatOptionsArgs> formatOptions) {
            $.formatOptions = formatOptions;
            return this;
        }

        public Builder formatOptions(JobOutputFormatOptionsArgs formatOptions) {
            return formatOptions(Output.of(formatOptions));
        }

        public Builder location(Output<JobS3LocationArgs> location) {
            $.location = location;
            return this;
        }

        public Builder location(JobS3LocationArgs location) {
            return location(Output.of(location));
        }

        public Builder maxOutputFiles(@Nullable Output<Integer> maxOutputFiles) {
            $.maxOutputFiles = maxOutputFiles;
            return this;
        }

        public Builder maxOutputFiles(Integer maxOutputFiles) {
            return maxOutputFiles(Output.of(maxOutputFiles));
        }

        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            $.overwrite = overwrite;
            return this;
        }

        public Builder overwrite(Boolean overwrite) {
            return overwrite(Output.of(overwrite));
        }

        public Builder partitionColumns(@Nullable Output<List<String>> partitionColumns) {
            $.partitionColumns = partitionColumns;
            return this;
        }

        public Builder partitionColumns(List<String> partitionColumns) {
            return partitionColumns(Output.of(partitionColumns));
        }

        public Builder partitionColumns(String... partitionColumns) {
            return partitionColumns(List.of(partitionColumns));
        }

        public JobOutputArgs build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
