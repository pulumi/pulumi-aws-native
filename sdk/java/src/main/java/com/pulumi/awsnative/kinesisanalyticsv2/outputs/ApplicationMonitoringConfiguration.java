// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.outputs;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationConfigurationType;
import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationLogLevel;
import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMonitoringConfigurationMetricsLevel;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationMonitoringConfiguration {
    /**
     * @return Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
     * 
     */
    private ApplicationMonitoringConfigurationConfigurationType configurationType;
    /**
     * @return Describes the verbosity of the CloudWatch Logs for an application.
     * 
     */
    private @Nullable ApplicationMonitoringConfigurationLogLevel logLevel;
    /**
     * @return Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
     * 
     */
    private @Nullable ApplicationMonitoringConfigurationMetricsLevel metricsLevel;

    private ApplicationMonitoringConfiguration() {}
    /**
     * @return Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
     * 
     */
    public ApplicationMonitoringConfigurationConfigurationType configurationType() {
        return this.configurationType;
    }
    /**
     * @return Describes the verbosity of the CloudWatch Logs for an application.
     * 
     */
    public Optional<ApplicationMonitoringConfigurationLogLevel> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }
    /**
     * @return Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
     * 
     */
    public Optional<ApplicationMonitoringConfigurationMetricsLevel> metricsLevel() {
        return Optional.ofNullable(this.metricsLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationMonitoringConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ApplicationMonitoringConfigurationConfigurationType configurationType;
        private @Nullable ApplicationMonitoringConfigurationLogLevel logLevel;
        private @Nullable ApplicationMonitoringConfigurationMetricsLevel metricsLevel;
        public Builder() {}
        public Builder(ApplicationMonitoringConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationType = defaults.configurationType;
    	      this.logLevel = defaults.logLevel;
    	      this.metricsLevel = defaults.metricsLevel;
        }

        @CustomType.Setter
        public Builder configurationType(ApplicationMonitoringConfigurationConfigurationType configurationType) {
            this.configurationType = Objects.requireNonNull(configurationType);
            return this;
        }
        @CustomType.Setter
        public Builder logLevel(@Nullable ApplicationMonitoringConfigurationLogLevel logLevel) {
            this.logLevel = logLevel;
            return this;
        }
        @CustomType.Setter
        public Builder metricsLevel(@Nullable ApplicationMonitoringConfigurationMetricsLevel metricsLevel) {
            this.metricsLevel = metricsLevel;
            return this;
        }
        public ApplicationMonitoringConfiguration build() {
            final var o = new ApplicationMonitoringConfiguration();
            o.configurationType = configurationType;
            o.logLevel = logLevel;
            o.metricsLevel = metricsLevel;
            return o;
        }
    }
}
