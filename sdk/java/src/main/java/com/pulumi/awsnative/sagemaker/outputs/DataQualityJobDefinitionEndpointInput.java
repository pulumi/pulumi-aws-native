// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.outputs;

import com.pulumi.awsnative.sagemaker.enums.DataQualityJobDefinitionEndpointInputS3DataDistributionType;
import com.pulumi.awsnative.sagemaker.enums.DataQualityJobDefinitionEndpointInputS3InputMode;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataQualityJobDefinitionEndpointInput {
    private String endpointName;
    /**
     * @return Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    private String localPath;
    /**
     * @return Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    private @Nullable DataQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType;
    /**
     * @return Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    private @Nullable DataQualityJobDefinitionEndpointInputS3InputMode s3InputMode;

    private DataQualityJobDefinitionEndpointInput() {}
    public String endpointName() {
        return this.endpointName;
    }
    /**
     * @return Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    public String localPath() {
        return this.localPath;
    }
    /**
     * @return Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    public Optional<DataQualityJobDefinitionEndpointInputS3DataDistributionType> s3DataDistributionType() {
        return Optional.ofNullable(this.s3DataDistributionType);
    }
    /**
     * @return Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    public Optional<DataQualityJobDefinitionEndpointInputS3InputMode> s3InputMode() {
        return Optional.ofNullable(this.s3InputMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataQualityJobDefinitionEndpointInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String endpointName;
        private String localPath;
        private @Nullable DataQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType;
        private @Nullable DataQualityJobDefinitionEndpointInputS3InputMode s3InputMode;
        public Builder() {}
        public Builder(DataQualityJobDefinitionEndpointInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endpointName = defaults.endpointName;
    	      this.localPath = defaults.localPath;
    	      this.s3DataDistributionType = defaults.s3DataDistributionType;
    	      this.s3InputMode = defaults.s3InputMode;
        }

        @CustomType.Setter
        public Builder endpointName(String endpointName) {
            this.endpointName = Objects.requireNonNull(endpointName);
            return this;
        }
        @CustomType.Setter
        public Builder localPath(String localPath) {
            this.localPath = Objects.requireNonNull(localPath);
            return this;
        }
        @CustomType.Setter
        public Builder s3DataDistributionType(@Nullable DataQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType) {
            this.s3DataDistributionType = s3DataDistributionType;
            return this;
        }
        @CustomType.Setter
        public Builder s3InputMode(@Nullable DataQualityJobDefinitionEndpointInputS3InputMode s3InputMode) {
            this.s3InputMode = s3InputMode;
            return this;
        }
        public DataQualityJobDefinitionEndpointInput build() {
            final var o = new DataQualityJobDefinitionEndpointInput();
            o.endpointName = endpointName;
            o.localPath = localPath;
            o.s3DataDistributionType = s3DataDistributionType;
            o.s3InputMode = s3InputMode;
            return o;
        }
    }
}
