// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.datasync;

import com.pulumi.awsnative.datasync.enums.LocationObjectStorageServerProtocol;
import com.pulumi.awsnative.datasync.inputs.LocationObjectStorageTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocationObjectStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocationObjectStorageArgs Empty = new LocationObjectStorageArgs();

    /**
     * Optional. The access key is used if credentials are required to access the self-managed object storage server.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return Optional. The access key is used if credentials are required to access the self-managed object storage server.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
     * 
     */
    @Import(name="agentArns", required=true)
    private Output<List<String>> agentArns;

    /**
     * @return The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
     * 
     */
    public Output<List<String>> agentArns() {
        return this.agentArns;
    }

    /**
     * The name of the bucket on the self-managed object storage server.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return The name of the bucket on the self-managed object storage server.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Optional. The secret key is used if credentials are required to access the self-managed object storage server.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Optional. The secret key is used if credentials are required to access the self-managed object storage server.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server.
     * 
     */
    @Import(name="serverHostname", required=true)
    private Output<String> serverHostname;

    /**
     * @return The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server.
     * 
     */
    public Output<String> serverHostname() {
        return this.serverHostname;
    }

    /**
     * The port that your self-managed server accepts inbound network traffic on.
     * 
     */
    @Import(name="serverPort")
    private @Nullable Output<Integer> serverPort;

    /**
     * @return The port that your self-managed server accepts inbound network traffic on.
     * 
     */
    public Optional<Output<Integer>> serverPort() {
        return Optional.ofNullable(this.serverPort);
    }

    /**
     * The protocol that the object storage server uses to communicate.
     * 
     */
    @Import(name="serverProtocol")
    private @Nullable Output<LocationObjectStorageServerProtocol> serverProtocol;

    /**
     * @return The protocol that the object storage server uses to communicate.
     * 
     */
    public Optional<Output<LocationObjectStorageServerProtocol>> serverProtocol() {
        return Optional.ofNullable(this.serverProtocol);
    }

    /**
     * The subdirectory in the self-managed object storage server that is used to read data from.
     * 
     */
    @Import(name="subdirectory")
    private @Nullable Output<String> subdirectory;

    /**
     * @return The subdirectory in the self-managed object storage server that is used to read data from.
     * 
     */
    public Optional<Output<String>> subdirectory() {
        return Optional.ofNullable(this.subdirectory);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LocationObjectStorageTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<LocationObjectStorageTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LocationObjectStorageArgs() {}

    private LocationObjectStorageArgs(LocationObjectStorageArgs $) {
        this.accessKey = $.accessKey;
        this.agentArns = $.agentArns;
        this.bucketName = $.bucketName;
        this.secretKey = $.secretKey;
        this.serverHostname = $.serverHostname;
        this.serverPort = $.serverPort;
        this.serverProtocol = $.serverProtocol;
        this.subdirectory = $.subdirectory;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationObjectStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationObjectStorageArgs $;

        public Builder() {
            $ = new LocationObjectStorageArgs();
        }

        public Builder(LocationObjectStorageArgs defaults) {
            $ = new LocationObjectStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey Optional. The access key is used if credentials are required to access the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey Optional. The access key is used if credentials are required to access the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param agentArns The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
         * 
         * @return builder
         * 
         */
        public Builder agentArns(Output<List<String>> agentArns) {
            $.agentArns = agentArns;
            return this;
        }

        /**
         * @param agentArns The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
         * 
         * @return builder
         * 
         */
        public Builder agentArns(List<String> agentArns) {
            return agentArns(Output.of(agentArns));
        }

        /**
         * @param agentArns The Amazon Resource Name (ARN) of the agents associated with the self-managed object storage server location.
         * 
         * @return builder
         * 
         */
        public Builder agentArns(String... agentArns) {
            return agentArns(List.of(agentArns));
        }

        /**
         * @param bucketName The name of the bucket on the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of the bucket on the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param secretKey Optional. The secret key is used if credentials are required to access the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Optional. The secret key is used if credentials are required to access the self-managed object storage server.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param serverHostname The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server.
         * 
         * @return builder
         * 
         */
        public Builder serverHostname(Output<String> serverHostname) {
            $.serverHostname = serverHostname;
            return this;
        }

        /**
         * @param serverHostname The name of the self-managed object storage server. This value is the IP address or Domain Name Service (DNS) name of the object storage server.
         * 
         * @return builder
         * 
         */
        public Builder serverHostname(String serverHostname) {
            return serverHostname(Output.of(serverHostname));
        }

        /**
         * @param serverPort The port that your self-managed server accepts inbound network traffic on.
         * 
         * @return builder
         * 
         */
        public Builder serverPort(@Nullable Output<Integer> serverPort) {
            $.serverPort = serverPort;
            return this;
        }

        /**
         * @param serverPort The port that your self-managed server accepts inbound network traffic on.
         * 
         * @return builder
         * 
         */
        public Builder serverPort(Integer serverPort) {
            return serverPort(Output.of(serverPort));
        }

        /**
         * @param serverProtocol The protocol that the object storage server uses to communicate.
         * 
         * @return builder
         * 
         */
        public Builder serverProtocol(@Nullable Output<LocationObjectStorageServerProtocol> serverProtocol) {
            $.serverProtocol = serverProtocol;
            return this;
        }

        /**
         * @param serverProtocol The protocol that the object storage server uses to communicate.
         * 
         * @return builder
         * 
         */
        public Builder serverProtocol(LocationObjectStorageServerProtocol serverProtocol) {
            return serverProtocol(Output.of(serverProtocol));
        }

        /**
         * @param subdirectory The subdirectory in the self-managed object storage server that is used to read data from.
         * 
         * @return builder
         * 
         */
        public Builder subdirectory(@Nullable Output<String> subdirectory) {
            $.subdirectory = subdirectory;
            return this;
        }

        /**
         * @param subdirectory The subdirectory in the self-managed object storage server that is used to read data from.
         * 
         * @return builder
         * 
         */
        public Builder subdirectory(String subdirectory) {
            return subdirectory(Output.of(subdirectory));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LocationObjectStorageTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LocationObjectStorageTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(LocationObjectStorageTagArgs... tags) {
            return tags(List.of(tags));
        }

        public LocationObjectStorageArgs build() {
            $.agentArns = Objects.requireNonNull($.agentArns, "expected parameter 'agentArns' to be non-null");
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.serverHostname = Objects.requireNonNull($.serverHostname, "expected parameter 'serverHostname' to be non-null");
            return $;
        }
    }

}
