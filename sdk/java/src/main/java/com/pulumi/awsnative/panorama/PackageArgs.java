// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.panorama;

import com.pulumi.awsnative.panorama.inputs.PackageTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageArgs Empty = new PackageArgs();

    @Import(name="packageName")
    private @Nullable Output<String> packageName;

    public Optional<Output<String>> packageName() {
        return Optional.ofNullable(this.packageName);
    }

    @Import(name="tags")
    private @Nullable Output<List<PackageTagArgs>> tags;

    public Optional<Output<List<PackageTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PackageArgs() {}

    private PackageArgs(PackageArgs $) {
        this.packageName = $.packageName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageArgs $;

        public Builder() {
            $ = new PackageArgs();
        }

        public Builder(PackageArgs defaults) {
            $ = new PackageArgs(Objects.requireNonNull(defaults));
        }

        public Builder packageName(@Nullable Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        public Builder tags(@Nullable Output<List<PackageTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<PackageTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(PackageTagArgs... tags) {
            return tags(List.of(tags));
        }

        public PackageArgs build() {
            return $;
        }
    }

}
