// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2;

import com.pulumi.awsnative.ec2.enums.KeyPairKeyType;
import com.pulumi.awsnative.ec2.inputs.KeyPairTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyPairArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyPairArgs Empty = new KeyPairArgs();

    /**
     * The name of the SSH key pair
     * 
     */
    @Import(name="keyName", required=true)
    private Output<String> keyName;

    /**
     * @return The name of the SSH key pair
     * 
     */
    public Output<String> keyName() {
        return this.keyName;
    }

    /**
     * The title of the TPS report is a mandatory element.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<KeyPairKeyType> keyType;

    /**
     * @return The title of the TPS report is a mandatory element.
     * 
     */
    public Optional<Output<KeyPairKeyType>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * Plain text public key to import
     * 
     */
    @Import(name="publicKeyMaterial")
    private @Nullable Output<String> publicKeyMaterial;

    /**
     * @return Plain text public key to import
     * 
     */
    public Optional<Output<String>> publicKeyMaterial() {
        return Optional.ofNullable(this.publicKeyMaterial);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<KeyPairTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<KeyPairTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private KeyPairArgs() {}

    private KeyPairArgs(KeyPairArgs $) {
        this.keyName = $.keyName;
        this.keyType = $.keyType;
        this.publicKeyMaterial = $.publicKeyMaterial;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyPairArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyPairArgs $;

        public Builder() {
            $ = new KeyPairArgs();
        }

        public Builder(KeyPairArgs defaults) {
            $ = new KeyPairArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName The name of the SSH key pair
         * 
         * @return builder
         * 
         */
        public Builder keyName(Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The name of the SSH key pair
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyType The title of the TPS report is a mandatory element.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<KeyPairKeyType> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType The title of the TPS report is a mandatory element.
         * 
         * @return builder
         * 
         */
        public Builder keyType(KeyPairKeyType keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param publicKeyMaterial Plain text public key to import
         * 
         * @return builder
         * 
         */
        public Builder publicKeyMaterial(@Nullable Output<String> publicKeyMaterial) {
            $.publicKeyMaterial = publicKeyMaterial;
            return this;
        }

        /**
         * @param publicKeyMaterial Plain text public key to import
         * 
         * @return builder
         * 
         */
        public Builder publicKeyMaterial(String publicKeyMaterial) {
            return publicKeyMaterial(Output.of(publicKeyMaterial));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<KeyPairTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<KeyPairTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(KeyPairTagArgs... tags) {
            return tags(List.of(tags));
        }

        public KeyPairArgs build() {
            $.keyName = Objects.requireNonNull($.keyName, "expected parameter 'keyName' to be non-null");
            return $;
        }
    }

}
