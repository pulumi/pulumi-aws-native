// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.enums.BucketNoncurrentVersionTransitionStorageClass;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container for the transition rule that describes when noncurrent objects transition to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the STANDARD_IA, ONEZONE_IA, INTELLIGENT_TIERING, GLACIER_IR, GLACIER, or DEEP_ARCHIVE storage class at a specific period in the object&#39;s lifetime.
 * 
 */
public final class BucketNoncurrentVersionTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketNoncurrentVersionTransitionArgs Empty = new BucketNoncurrentVersionTransitionArgs();

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    @Import(name="newerNoncurrentVersions")
    private @Nullable Output<Integer> newerNoncurrentVersions;

    /**
     * @return Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    public Optional<Output<Integer>> newerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }

    /**
     * The class of storage used to store the object.
     * 
     */
    @Import(name="storageClass", required=true)
    private Output<BucketNoncurrentVersionTransitionStorageClass> storageClass;

    /**
     * @return The class of storage used to store the object.
     * 
     */
    public Output<BucketNoncurrentVersionTransitionStorageClass> storageClass() {
        return this.storageClass;
    }

    /**
     * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    @Import(name="transitionInDays", required=true)
    private Output<Integer> transitionInDays;

    /**
     * @return Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
     * 
     */
    public Output<Integer> transitionInDays() {
        return this.transitionInDays;
    }

    private BucketNoncurrentVersionTransitionArgs() {}

    private BucketNoncurrentVersionTransitionArgs(BucketNoncurrentVersionTransitionArgs $) {
        this.newerNoncurrentVersions = $.newerNoncurrentVersions;
        this.storageClass = $.storageClass;
        this.transitionInDays = $.transitionInDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketNoncurrentVersionTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketNoncurrentVersionTransitionArgs $;

        public Builder() {
            $ = new BucketNoncurrentVersionTransitionArgs();
        }

        public Builder(BucketNoncurrentVersionTransitionArgs defaults) {
            $ = new BucketNoncurrentVersionTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param newerNoncurrentVersions Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(@Nullable Output<Integer> newerNoncurrentVersions) {
            $.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        /**
         * @param newerNoncurrentVersions Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(Integer newerNoncurrentVersions) {
            return newerNoncurrentVersions(Output.of(newerNoncurrentVersions));
        }

        /**
         * @param storageClass The class of storage used to store the object.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(Output<BucketNoncurrentVersionTransitionStorageClass> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass The class of storage used to store the object.
         * 
         * @return builder
         * 
         */
        public Builder storageClass(BucketNoncurrentVersionTransitionStorageClass storageClass) {
            return storageClass(Output.of(storageClass));
        }

        /**
         * @param transitionInDays Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
         * 
         * @return builder
         * 
         */
        public Builder transitionInDays(Output<Integer> transitionInDays) {
            $.transitionInDays = transitionInDays;
            return this;
        }

        /**
         * @param transitionInDays Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action.
         * 
         * @return builder
         * 
         */
        public Builder transitionInDays(Integer transitionInDays) {
            return transitionInDays(Output.of(transitionInDays));
        }

        public BucketNoncurrentVersionTransitionArgs build() {
            $.storageClass = Objects.requireNonNull($.storageClass, "expected parameter 'storageClass' to be non-null");
            $.transitionInDays = Objects.requireNonNull($.transitionInDays, "expected parameter 'transitionInDays' to be non-null");
            return $;
        }
    }

}
