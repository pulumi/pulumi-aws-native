// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.OriginEndpointAdsOnDeliveryRestrictions;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackageAdMarkers;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackageAdTriggersItem;
import com.pulumi.awsnative.mediapackage.enums.OriginEndpointHlsPackagePlaylistType;
import com.pulumi.awsnative.mediapackage.inputs.OriginEndpointHlsEncryptionArgs;
import com.pulumi.awsnative.mediapackage.inputs.OriginEndpointStreamSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An HTTP Live Streaming (HLS) packaging configuration.
 * 
 */
public final class OriginEndpointHlsPackageArgs extends com.pulumi.resources.ResourceArgs {

    public static final OriginEndpointHlsPackageArgs Empty = new OriginEndpointHlsPackageArgs();

    /**
     * This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
     * 
     */
    @Import(name="adMarkers")
    private @Nullable Output<OriginEndpointHlsPackageAdMarkers> adMarkers;

    /**
     * @return This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
     * 
     */
    public Optional<Output<OriginEndpointHlsPackageAdMarkers>> adMarkers() {
        return Optional.ofNullable(this.adMarkers);
    }

    /**
     * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
     * 
     */
    @Import(name="adTriggers")
    private @Nullable Output<List<OriginEndpointHlsPackageAdTriggersItem>> adTriggers;

    /**
     * @return A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
     * 
     */
    public Optional<Output<List<OriginEndpointHlsPackageAdTriggersItem>>> adTriggers() {
        return Optional.ofNullable(this.adTriggers);
    }

    @Import(name="adsOnDeliveryRestrictions")
    private @Nullable Output<OriginEndpointAdsOnDeliveryRestrictions> adsOnDeliveryRestrictions;

    public Optional<Output<OriginEndpointAdsOnDeliveryRestrictions>> adsOnDeliveryRestrictions() {
        return Optional.ofNullable(this.adsOnDeliveryRestrictions);
    }

    @Import(name="encryption")
    private @Nullable Output<OriginEndpointHlsEncryptionArgs> encryption;

    public Optional<Output<OriginEndpointHlsEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    @Import(name="includeIframeOnlyStream")
    private @Nullable Output<Boolean> includeIframeOnlyStream;

    /**
     * @return When enabled, an I-Frame only stream will be included in the output.
     * 
     */
    public Optional<Output<Boolean>> includeIframeOnlyStream() {
        return Optional.ofNullable(this.includeIframeOnlyStream);
    }

    /**
     * The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
     * 
     */
    @Import(name="playlistType")
    private @Nullable Output<OriginEndpointHlsPackagePlaylistType> playlistType;

    /**
     * @return The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
     * 
     */
    public Optional<Output<OriginEndpointHlsPackagePlaylistType>> playlistType() {
        return Optional.ofNullable(this.playlistType);
    }

    /**
     * Time window (in seconds) contained in each parent manifest.
     * 
     */
    @Import(name="playlistWindowSeconds")
    private @Nullable Output<Integer> playlistWindowSeconds;

    /**
     * @return Time window (in seconds) contained in each parent manifest.
     * 
     */
    public Optional<Output<Integer>> playlistWindowSeconds() {
        return Optional.ofNullable(this.playlistWindowSeconds);
    }

    /**
     * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    @Import(name="programDateTimeIntervalSeconds")
    private @Nullable Output<Integer> programDateTimeIntervalSeconds;

    /**
     * @return The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
     * 
     */
    public Optional<Output<Integer>> programDateTimeIntervalSeconds() {
        return Optional.ofNullable(this.programDateTimeIntervalSeconds);
    }

    /**
     * Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
     * 
     */
    @Import(name="segmentDurationSeconds")
    private @Nullable Output<Integer> segmentDurationSeconds;

    /**
     * @return Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
     * 
     */
    public Optional<Output<Integer>> segmentDurationSeconds() {
        return Optional.ofNullable(this.segmentDurationSeconds);
    }

    @Import(name="streamSelection")
    private @Nullable Output<OriginEndpointStreamSelectionArgs> streamSelection;

    public Optional<Output<OriginEndpointStreamSelectionArgs>> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    /**
     * When enabled, audio streams will be placed in rendition groups in the output.
     * 
     */
    @Import(name="useAudioRenditionGroup")
    private @Nullable Output<Boolean> useAudioRenditionGroup;

    /**
     * @return When enabled, audio streams will be placed in rendition groups in the output.
     * 
     */
    public Optional<Output<Boolean>> useAudioRenditionGroup() {
        return Optional.ofNullable(this.useAudioRenditionGroup);
    }

    private OriginEndpointHlsPackageArgs() {}

    private OriginEndpointHlsPackageArgs(OriginEndpointHlsPackageArgs $) {
        this.adMarkers = $.adMarkers;
        this.adTriggers = $.adTriggers;
        this.adsOnDeliveryRestrictions = $.adsOnDeliveryRestrictions;
        this.encryption = $.encryption;
        this.includeIframeOnlyStream = $.includeIframeOnlyStream;
        this.playlistType = $.playlistType;
        this.playlistWindowSeconds = $.playlistWindowSeconds;
        this.programDateTimeIntervalSeconds = $.programDateTimeIntervalSeconds;
        this.segmentDurationSeconds = $.segmentDurationSeconds;
        this.streamSelection = $.streamSelection;
        this.useAudioRenditionGroup = $.useAudioRenditionGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OriginEndpointHlsPackageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OriginEndpointHlsPackageArgs $;

        public Builder() {
            $ = new OriginEndpointHlsPackageArgs();
        }

        public Builder(OriginEndpointHlsPackageArgs defaults) {
            $ = new OriginEndpointHlsPackageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adMarkers This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder adMarkers(@Nullable Output<OriginEndpointHlsPackageAdMarkers> adMarkers) {
            $.adMarkers = adMarkers;
            return this;
        }

        /**
         * @param adMarkers This setting controls how ad markers are included in the packaged OriginEndpoint. &#34;NONE&#34; will omit all SCTE-35 ad markers from the output. &#34;PASSTHROUGH&#34; causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. &#34;SCTE35_ENHANCED&#34; generates ad markers and blackout tags based on SCTE-35 messages in the input source. &#34;DATERANGE&#34; inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         * 
         * @return builder
         * 
         */
        public Builder adMarkers(OriginEndpointHlsPackageAdMarkers adMarkers) {
            return adMarkers(Output.of(adMarkers));
        }

        /**
         * @param adTriggers A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         * 
         * @return builder
         * 
         */
        public Builder adTriggers(@Nullable Output<List<OriginEndpointHlsPackageAdTriggersItem>> adTriggers) {
            $.adTriggers = adTriggers;
            return this;
        }

        /**
         * @param adTriggers A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         * 
         * @return builder
         * 
         */
        public Builder adTriggers(List<OriginEndpointHlsPackageAdTriggersItem> adTriggers) {
            return adTriggers(Output.of(adTriggers));
        }

        /**
         * @param adTriggers A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         * 
         * @return builder
         * 
         */
        public Builder adTriggers(OriginEndpointHlsPackageAdTriggersItem... adTriggers) {
            return adTriggers(List.of(adTriggers));
        }

        public Builder adsOnDeliveryRestrictions(@Nullable Output<OriginEndpointAdsOnDeliveryRestrictions> adsOnDeliveryRestrictions) {
            $.adsOnDeliveryRestrictions = adsOnDeliveryRestrictions;
            return this;
        }

        public Builder adsOnDeliveryRestrictions(OriginEndpointAdsOnDeliveryRestrictions adsOnDeliveryRestrictions) {
            return adsOnDeliveryRestrictions(Output.of(adsOnDeliveryRestrictions));
        }

        public Builder encryption(@Nullable Output<OriginEndpointHlsEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(OriginEndpointHlsEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param includeIframeOnlyStream When enabled, an I-Frame only stream will be included in the output.
         * 
         * @return builder
         * 
         */
        public Builder includeIframeOnlyStream(@Nullable Output<Boolean> includeIframeOnlyStream) {
            $.includeIframeOnlyStream = includeIframeOnlyStream;
            return this;
        }

        /**
         * @param includeIframeOnlyStream When enabled, an I-Frame only stream will be included in the output.
         * 
         * @return builder
         * 
         */
        public Builder includeIframeOnlyStream(Boolean includeIframeOnlyStream) {
            return includeIframeOnlyStream(Output.of(includeIframeOnlyStream));
        }

        /**
         * @param playlistType The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         * 
         * @return builder
         * 
         */
        public Builder playlistType(@Nullable Output<OriginEndpointHlsPackagePlaylistType> playlistType) {
            $.playlistType = playlistType;
            return this;
        }

        /**
         * @param playlistType The HTTP Live Streaming (HLS) playlist type. When either &#34;EVENT&#34; or &#34;VOD&#34; is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         * 
         * @return builder
         * 
         */
        public Builder playlistType(OriginEndpointHlsPackagePlaylistType playlistType) {
            return playlistType(Output.of(playlistType));
        }

        /**
         * @param playlistWindowSeconds Time window (in seconds) contained in each parent manifest.
         * 
         * @return builder
         * 
         */
        public Builder playlistWindowSeconds(@Nullable Output<Integer> playlistWindowSeconds) {
            $.playlistWindowSeconds = playlistWindowSeconds;
            return this;
        }

        /**
         * @param playlistWindowSeconds Time window (in seconds) contained in each parent manifest.
         * 
         * @return builder
         * 
         */
        public Builder playlistWindowSeconds(Integer playlistWindowSeconds) {
            return playlistWindowSeconds(Output.of(playlistWindowSeconds));
        }

        /**
         * @param programDateTimeIntervalSeconds The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         * 
         * @return builder
         * 
         */
        public Builder programDateTimeIntervalSeconds(@Nullable Output<Integer> programDateTimeIntervalSeconds) {
            $.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
            return this;
        }

        /**
         * @param programDateTimeIntervalSeconds The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         * 
         * @return builder
         * 
         */
        public Builder programDateTimeIntervalSeconds(Integer programDateTimeIntervalSeconds) {
            return programDateTimeIntervalSeconds(Output.of(programDateTimeIntervalSeconds));
        }

        /**
         * @param segmentDurationSeconds Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
         * 
         * @return builder
         * 
         */
        public Builder segmentDurationSeconds(@Nullable Output<Integer> segmentDurationSeconds) {
            $.segmentDurationSeconds = segmentDurationSeconds;
            return this;
        }

        /**
         * @param segmentDurationSeconds Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
         * 
         * @return builder
         * 
         */
        public Builder segmentDurationSeconds(Integer segmentDurationSeconds) {
            return segmentDurationSeconds(Output.of(segmentDurationSeconds));
        }

        public Builder streamSelection(@Nullable Output<OriginEndpointStreamSelectionArgs> streamSelection) {
            $.streamSelection = streamSelection;
            return this;
        }

        public Builder streamSelection(OriginEndpointStreamSelectionArgs streamSelection) {
            return streamSelection(Output.of(streamSelection));
        }

        /**
         * @param useAudioRenditionGroup When enabled, audio streams will be placed in rendition groups in the output.
         * 
         * @return builder
         * 
         */
        public Builder useAudioRenditionGroup(@Nullable Output<Boolean> useAudioRenditionGroup) {
            $.useAudioRenditionGroup = useAudioRenditionGroup;
            return this;
        }

        /**
         * @param useAudioRenditionGroup When enabled, audio streams will be placed in rendition groups in the output.
         * 
         * @return builder
         * 
         */
        public Builder useAudioRenditionGroup(Boolean useAudioRenditionGroup) {
            return useAudioRenditionGroup(Output.of(useAudioRenditionGroup));
        }

        public OriginEndpointHlsPackageArgs build() {
            return $;
        }
    }

}
