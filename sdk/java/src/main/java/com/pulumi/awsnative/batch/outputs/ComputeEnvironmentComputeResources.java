// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.batch.outputs;

import com.pulumi.awsnative.batch.outputs.ComputeEnvironmentEc2ConfigurationObject;
import com.pulumi.awsnative.batch.outputs.ComputeEnvironmentLaunchTemplateSpecification;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ComputeEnvironmentComputeResources {
    private @Nullable String allocationStrategy;
    private @Nullable Integer bidPercentage;
    private @Nullable Integer desiredvCpus;
    private @Nullable List<ComputeEnvironmentEc2ConfigurationObject> ec2Configuration;
    private @Nullable String ec2KeyPair;
    private @Nullable String imageId;
    private @Nullable String instanceRole;
    private @Nullable List<String> instanceTypes;
    private @Nullable ComputeEnvironmentLaunchTemplateSpecification launchTemplate;
    private Integer maxvCpus;
    private @Nullable Integer minvCpus;
    private @Nullable String placementGroup;
    private @Nullable List<String> securityGroupIds;
    private @Nullable String spotIamFleetRole;
    private List<String> subnets;
    /**
     * @return A key-value pair to associate with a resource.
     * 
     */
    private @Nullable Object tags;
    private String type;
    private @Nullable Boolean updateToLatestImageVersion;

    private ComputeEnvironmentComputeResources() {}
    public Optional<String> allocationStrategy() {
        return Optional.ofNullable(this.allocationStrategy);
    }
    public Optional<Integer> bidPercentage() {
        return Optional.ofNullable(this.bidPercentage);
    }
    public Optional<Integer> desiredvCpus() {
        return Optional.ofNullable(this.desiredvCpus);
    }
    public List<ComputeEnvironmentEc2ConfigurationObject> ec2Configuration() {
        return this.ec2Configuration == null ? List.of() : this.ec2Configuration;
    }
    public Optional<String> ec2KeyPair() {
        return Optional.ofNullable(this.ec2KeyPair);
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    public Optional<String> instanceRole() {
        return Optional.ofNullable(this.instanceRole);
    }
    public List<String> instanceTypes() {
        return this.instanceTypes == null ? List.of() : this.instanceTypes;
    }
    public Optional<ComputeEnvironmentLaunchTemplateSpecification> launchTemplate() {
        return Optional.ofNullable(this.launchTemplate);
    }
    public Integer maxvCpus() {
        return this.maxvCpus;
    }
    public Optional<Integer> minvCpus() {
        return Optional.ofNullable(this.minvCpus);
    }
    public Optional<String> placementGroup() {
        return Optional.ofNullable(this.placementGroup);
    }
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    public Optional<String> spotIamFleetRole() {
        return Optional.ofNullable(this.spotIamFleetRole);
    }
    public List<String> subnets() {
        return this.subnets;
    }
    /**
     * @return A key-value pair to associate with a resource.
     * 
     */
    public Optional<Object> tags() {
        return Optional.ofNullable(this.tags);
    }
    public String type() {
        return this.type;
    }
    public Optional<Boolean> updateToLatestImageVersion() {
        return Optional.ofNullable(this.updateToLatestImageVersion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ComputeEnvironmentComputeResources defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allocationStrategy;
        private @Nullable Integer bidPercentage;
        private @Nullable Integer desiredvCpus;
        private @Nullable List<ComputeEnvironmentEc2ConfigurationObject> ec2Configuration;
        private @Nullable String ec2KeyPair;
        private @Nullable String imageId;
        private @Nullable String instanceRole;
        private @Nullable List<String> instanceTypes;
        private @Nullable ComputeEnvironmentLaunchTemplateSpecification launchTemplate;
        private Integer maxvCpus;
        private @Nullable Integer minvCpus;
        private @Nullable String placementGroup;
        private @Nullable List<String> securityGroupIds;
        private @Nullable String spotIamFleetRole;
        private List<String> subnets;
        private @Nullable Object tags;
        private String type;
        private @Nullable Boolean updateToLatestImageVersion;
        public Builder() {}
        public Builder(ComputeEnvironmentComputeResources defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationStrategy = defaults.allocationStrategy;
    	      this.bidPercentage = defaults.bidPercentage;
    	      this.desiredvCpus = defaults.desiredvCpus;
    	      this.ec2Configuration = defaults.ec2Configuration;
    	      this.ec2KeyPair = defaults.ec2KeyPair;
    	      this.imageId = defaults.imageId;
    	      this.instanceRole = defaults.instanceRole;
    	      this.instanceTypes = defaults.instanceTypes;
    	      this.launchTemplate = defaults.launchTemplate;
    	      this.maxvCpus = defaults.maxvCpus;
    	      this.minvCpus = defaults.minvCpus;
    	      this.placementGroup = defaults.placementGroup;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.spotIamFleetRole = defaults.spotIamFleetRole;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.updateToLatestImageVersion = defaults.updateToLatestImageVersion;
        }

        @CustomType.Setter
        public Builder allocationStrategy(@Nullable String allocationStrategy) {
            this.allocationStrategy = allocationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder bidPercentage(@Nullable Integer bidPercentage) {
            this.bidPercentage = bidPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder desiredvCpus(@Nullable Integer desiredvCpus) {
            this.desiredvCpus = desiredvCpus;
            return this;
        }
        @CustomType.Setter
        public Builder ec2Configuration(@Nullable List<ComputeEnvironmentEc2ConfigurationObject> ec2Configuration) {
            this.ec2Configuration = ec2Configuration;
            return this;
        }
        public Builder ec2Configuration(ComputeEnvironmentEc2ConfigurationObject... ec2Configuration) {
            return ec2Configuration(List.of(ec2Configuration));
        }
        @CustomType.Setter
        public Builder ec2KeyPair(@Nullable String ec2KeyPair) {
            this.ec2KeyPair = ec2KeyPair;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceRole(@Nullable String instanceRole) {
            this.instanceRole = instanceRole;
            return this;
        }
        @CustomType.Setter
        public Builder instanceTypes(@Nullable List<String> instanceTypes) {
            this.instanceTypes = instanceTypes;
            return this;
        }
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }
        @CustomType.Setter
        public Builder launchTemplate(@Nullable ComputeEnvironmentLaunchTemplateSpecification launchTemplate) {
            this.launchTemplate = launchTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder maxvCpus(Integer maxvCpus) {
            this.maxvCpus = Objects.requireNonNull(maxvCpus);
            return this;
        }
        @CustomType.Setter
        public Builder minvCpus(@Nullable Integer minvCpus) {
            this.minvCpus = minvCpus;
            return this;
        }
        @CustomType.Setter
        public Builder placementGroup(@Nullable String placementGroup) {
            this.placementGroup = placementGroup;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder spotIamFleetRole(@Nullable String spotIamFleetRole) {
            this.spotIamFleetRole = spotIamFleetRole;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Object tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder updateToLatestImageVersion(@Nullable Boolean updateToLatestImageVersion) {
            this.updateToLatestImageVersion = updateToLatestImageVersion;
            return this;
        }
        public ComputeEnvironmentComputeResources build() {
            final var o = new ComputeEnvironmentComputeResources();
            o.allocationStrategy = allocationStrategy;
            o.bidPercentage = bidPercentage;
            o.desiredvCpus = desiredvCpus;
            o.ec2Configuration = ec2Configuration;
            o.ec2KeyPair = ec2KeyPair;
            o.imageId = imageId;
            o.instanceRole = instanceRole;
            o.instanceTypes = instanceTypes;
            o.launchTemplate = launchTemplate;
            o.maxvCpus = maxvCpus;
            o.minvCpus = minvCpus;
            o.placementGroup = placementGroup;
            o.securityGroupIds = securityGroupIds;
            o.spotIamFleetRole = spotIamFleetRole;
            o.subnets = subnets;
            o.tags = tags;
            o.type = type;
            o.updateToLatestImageVersion = updateToLatestImageVersion;
            return o;
        }
    }
}
