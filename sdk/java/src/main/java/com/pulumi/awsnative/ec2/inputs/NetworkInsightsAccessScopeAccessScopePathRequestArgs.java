// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2.inputs;

import com.pulumi.awsnative.ec2.inputs.NetworkInsightsAccessScopePathStatementRequestArgs;
import com.pulumi.awsnative.ec2.inputs.NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkInsightsAccessScopeAccessScopePathRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInsightsAccessScopeAccessScopePathRequestArgs Empty = new NetworkInsightsAccessScopeAccessScopePathRequestArgs();

    @Import(name="destination")
    private @Nullable Output<NetworkInsightsAccessScopePathStatementRequestArgs> destination;

    public Optional<Output<NetworkInsightsAccessScopePathStatementRequestArgs>> destination() {
        return Optional.ofNullable(this.destination);
    }

    @Import(name="source")
    private @Nullable Output<NetworkInsightsAccessScopePathStatementRequestArgs> source;

    public Optional<Output<NetworkInsightsAccessScopePathStatementRequestArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="throughResources")
    private @Nullable Output<List<NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs>> throughResources;

    public Optional<Output<List<NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs>>> throughResources() {
        return Optional.ofNullable(this.throughResources);
    }

    private NetworkInsightsAccessScopeAccessScopePathRequestArgs() {}

    private NetworkInsightsAccessScopeAccessScopePathRequestArgs(NetworkInsightsAccessScopeAccessScopePathRequestArgs $) {
        this.destination = $.destination;
        this.source = $.source;
        this.throughResources = $.throughResources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInsightsAccessScopeAccessScopePathRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInsightsAccessScopeAccessScopePathRequestArgs $;

        public Builder() {
            $ = new NetworkInsightsAccessScopeAccessScopePathRequestArgs();
        }

        public Builder(NetworkInsightsAccessScopeAccessScopePathRequestArgs defaults) {
            $ = new NetworkInsightsAccessScopeAccessScopePathRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder destination(@Nullable Output<NetworkInsightsAccessScopePathStatementRequestArgs> destination) {
            $.destination = destination;
            return this;
        }

        public Builder destination(NetworkInsightsAccessScopePathStatementRequestArgs destination) {
            return destination(Output.of(destination));
        }

        public Builder source(@Nullable Output<NetworkInsightsAccessScopePathStatementRequestArgs> source) {
            $.source = source;
            return this;
        }

        public Builder source(NetworkInsightsAccessScopePathStatementRequestArgs source) {
            return source(Output.of(source));
        }

        public Builder throughResources(@Nullable Output<List<NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs>> throughResources) {
            $.throughResources = throughResources;
            return this;
        }

        public Builder throughResources(List<NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs> throughResources) {
            return throughResources(Output.of(throughResources));
        }

        public Builder throughResources(NetworkInsightsAccessScopeThroughResourcesStatementRequestArgs... throughResources) {
            return throughResources(List.of(throughResources));
        }

        public NetworkInsightsAccessScopeAccessScopePathRequestArgs build() {
            return $;
        }
    }

}
