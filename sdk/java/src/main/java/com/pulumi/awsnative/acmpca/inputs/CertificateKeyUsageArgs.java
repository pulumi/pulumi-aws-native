// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.acmpca.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Structure that contains X.509 KeyUsage information.
 * 
 */
public final class CertificateKeyUsageArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateKeyUsageArgs Empty = new CertificateKeyUsageArgs();

    @Import(name="cRLSign")
    private @Nullable Output<Boolean> cRLSign;

    public Optional<Output<Boolean>> cRLSign() {
        return Optional.ofNullable(this.cRLSign);
    }

    @Import(name="dataEncipherment")
    private @Nullable Output<Boolean> dataEncipherment;

    public Optional<Output<Boolean>> dataEncipherment() {
        return Optional.ofNullable(this.dataEncipherment);
    }

    @Import(name="decipherOnly")
    private @Nullable Output<Boolean> decipherOnly;

    public Optional<Output<Boolean>> decipherOnly() {
        return Optional.ofNullable(this.decipherOnly);
    }

    @Import(name="digitalSignature")
    private @Nullable Output<Boolean> digitalSignature;

    public Optional<Output<Boolean>> digitalSignature() {
        return Optional.ofNullable(this.digitalSignature);
    }

    @Import(name="encipherOnly")
    private @Nullable Output<Boolean> encipherOnly;

    public Optional<Output<Boolean>> encipherOnly() {
        return Optional.ofNullable(this.encipherOnly);
    }

    @Import(name="keyAgreement")
    private @Nullable Output<Boolean> keyAgreement;

    public Optional<Output<Boolean>> keyAgreement() {
        return Optional.ofNullable(this.keyAgreement);
    }

    @Import(name="keyCertSign")
    private @Nullable Output<Boolean> keyCertSign;

    public Optional<Output<Boolean>> keyCertSign() {
        return Optional.ofNullable(this.keyCertSign);
    }

    @Import(name="keyEncipherment")
    private @Nullable Output<Boolean> keyEncipherment;

    public Optional<Output<Boolean>> keyEncipherment() {
        return Optional.ofNullable(this.keyEncipherment);
    }

    @Import(name="nonRepudiation")
    private @Nullable Output<Boolean> nonRepudiation;

    public Optional<Output<Boolean>> nonRepudiation() {
        return Optional.ofNullable(this.nonRepudiation);
    }

    private CertificateKeyUsageArgs() {}

    private CertificateKeyUsageArgs(CertificateKeyUsageArgs $) {
        this.cRLSign = $.cRLSign;
        this.dataEncipherment = $.dataEncipherment;
        this.decipherOnly = $.decipherOnly;
        this.digitalSignature = $.digitalSignature;
        this.encipherOnly = $.encipherOnly;
        this.keyAgreement = $.keyAgreement;
        this.keyCertSign = $.keyCertSign;
        this.keyEncipherment = $.keyEncipherment;
        this.nonRepudiation = $.nonRepudiation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateKeyUsageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateKeyUsageArgs $;

        public Builder() {
            $ = new CertificateKeyUsageArgs();
        }

        public Builder(CertificateKeyUsageArgs defaults) {
            $ = new CertificateKeyUsageArgs(Objects.requireNonNull(defaults));
        }

        public Builder cRLSign(@Nullable Output<Boolean> cRLSign) {
            $.cRLSign = cRLSign;
            return this;
        }

        public Builder cRLSign(Boolean cRLSign) {
            return cRLSign(Output.of(cRLSign));
        }

        public Builder dataEncipherment(@Nullable Output<Boolean> dataEncipherment) {
            $.dataEncipherment = dataEncipherment;
            return this;
        }

        public Builder dataEncipherment(Boolean dataEncipherment) {
            return dataEncipherment(Output.of(dataEncipherment));
        }

        public Builder decipherOnly(@Nullable Output<Boolean> decipherOnly) {
            $.decipherOnly = decipherOnly;
            return this;
        }

        public Builder decipherOnly(Boolean decipherOnly) {
            return decipherOnly(Output.of(decipherOnly));
        }

        public Builder digitalSignature(@Nullable Output<Boolean> digitalSignature) {
            $.digitalSignature = digitalSignature;
            return this;
        }

        public Builder digitalSignature(Boolean digitalSignature) {
            return digitalSignature(Output.of(digitalSignature));
        }

        public Builder encipherOnly(@Nullable Output<Boolean> encipherOnly) {
            $.encipherOnly = encipherOnly;
            return this;
        }

        public Builder encipherOnly(Boolean encipherOnly) {
            return encipherOnly(Output.of(encipherOnly));
        }

        public Builder keyAgreement(@Nullable Output<Boolean> keyAgreement) {
            $.keyAgreement = keyAgreement;
            return this;
        }

        public Builder keyAgreement(Boolean keyAgreement) {
            return keyAgreement(Output.of(keyAgreement));
        }

        public Builder keyCertSign(@Nullable Output<Boolean> keyCertSign) {
            $.keyCertSign = keyCertSign;
            return this;
        }

        public Builder keyCertSign(Boolean keyCertSign) {
            return keyCertSign(Output.of(keyCertSign));
        }

        public Builder keyEncipherment(@Nullable Output<Boolean> keyEncipherment) {
            $.keyEncipherment = keyEncipherment;
            return this;
        }

        public Builder keyEncipherment(Boolean keyEncipherment) {
            return keyEncipherment(Output.of(keyEncipherment));
        }

        public Builder nonRepudiation(@Nullable Output<Boolean> nonRepudiation) {
            $.nonRepudiation = nonRepudiation;
            return this;
        }

        public Builder nonRepudiation(Boolean nonRepudiation) {
            return nonRepudiation(Output.of(nonRepudiation));
        }

        public CertificateKeyUsageArgs build() {
            return $;
        }
    }

}
