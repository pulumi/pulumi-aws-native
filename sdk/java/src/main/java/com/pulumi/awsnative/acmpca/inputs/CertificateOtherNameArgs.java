// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.acmpca.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Structure that contains X.509 OtherName information.
 * 
 */
public final class CertificateOtherNameArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateOtherNameArgs Empty = new CertificateOtherNameArgs();

    @Import(name="typeId", required=true)
    private Output<String> typeId;

    public Output<String> typeId() {
        return this.typeId;
    }

    @Import(name="value", required=true)
    private Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    private CertificateOtherNameArgs() {}

    private CertificateOtherNameArgs(CertificateOtherNameArgs $) {
        this.typeId = $.typeId;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateOtherNameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateOtherNameArgs $;

        public Builder() {
            $ = new CertificateOtherNameArgs();
        }

        public Builder(CertificateOtherNameArgs defaults) {
            $ = new CertificateOtherNameArgs(Objects.requireNonNull(defaults));
        }

        public Builder typeId(Output<String> typeId) {
            $.typeId = typeId;
            return this;
        }

        public Builder typeId(String typeId) {
            return typeId(Output.of(typeId));
        }

        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public CertificateOtherNameArgs build() {
            $.typeId = Objects.requireNonNull($.typeId, "expected parameter 'typeId' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
