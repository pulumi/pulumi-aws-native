// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.elasticache;

import com.pulumi.awsnative.elasticache.inputs.GlobalReplicationGroupMemberArgs;
import com.pulumi.awsnative.elasticache.inputs.GlobalReplicationGroupRegionalConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalReplicationGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalReplicationGroupArgs Empty = new GlobalReplicationGroupArgs();

    /**
     * AutomaticFailoverEnabled
     * 
     */
    @Import(name="automaticFailoverEnabled")
    private @Nullable Output<Boolean> automaticFailoverEnabled;

    /**
     * @return AutomaticFailoverEnabled
     * 
     */
    public Optional<Output<Boolean>> automaticFailoverEnabled() {
        return Optional.ofNullable(this.automaticFailoverEnabled);
    }

    /**
     * The cache node type of the Global Datastore
     * 
     */
    @Import(name="cacheNodeType")
    private @Nullable Output<String> cacheNodeType;

    /**
     * @return The cache node type of the Global Datastore
     * 
     */
    public Optional<Output<String>> cacheNodeType() {
        return Optional.ofNullable(this.cacheNodeType);
    }

    /**
     * Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
     * 
     */
    @Import(name="cacheParameterGroupName")
    private @Nullable Output<String> cacheParameterGroupName;

    /**
     * @return Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
     * 
     */
    public Optional<Output<String>> cacheParameterGroupName() {
        return Optional.ofNullable(this.cacheParameterGroupName);
    }

    /**
     * The engine version of the Global Datastore.
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return The engine version of the Global Datastore.
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * Indicates the number of node groups in the Global Datastore.
     * 
     */
    @Import(name="globalNodeGroupCount")
    private @Nullable Output<Integer> globalNodeGroupCount;

    /**
     * @return Indicates the number of node groups in the Global Datastore.
     * 
     */
    public Optional<Output<Integer>> globalNodeGroupCount() {
        return Optional.ofNullable(this.globalNodeGroupCount);
    }

    /**
     * The optional description of the Global Datastore
     * 
     */
    @Import(name="globalReplicationGroupDescription")
    private @Nullable Output<String> globalReplicationGroupDescription;

    /**
     * @return The optional description of the Global Datastore
     * 
     */
    public Optional<Output<String>> globalReplicationGroupDescription() {
        return Optional.ofNullable(this.globalReplicationGroupDescription);
    }

    /**
     * The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix.
     * 
     */
    @Import(name="globalReplicationGroupIdSuffix")
    private @Nullable Output<String> globalReplicationGroupIdSuffix;

    /**
     * @return The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix.
     * 
     */
    public Optional<Output<String>> globalReplicationGroupIdSuffix() {
        return Optional.ofNullable(this.globalReplicationGroupIdSuffix);
    }

    /**
     * The replication groups that comprise the Global Datastore.
     * 
     */
    @Import(name="members", required=true)
    private Output<List<GlobalReplicationGroupMemberArgs>> members;

    /**
     * @return The replication groups that comprise the Global Datastore.
     * 
     */
    public Output<List<GlobalReplicationGroupMemberArgs>> members() {
        return this.members;
    }

    /**
     * Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore
     * 
     */
    @Import(name="regionalConfigurations")
    private @Nullable Output<List<GlobalReplicationGroupRegionalConfigurationArgs>> regionalConfigurations;

    /**
     * @return Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore
     * 
     */
    public Optional<Output<List<GlobalReplicationGroupRegionalConfigurationArgs>>> regionalConfigurations() {
        return Optional.ofNullable(this.regionalConfigurations);
    }

    private GlobalReplicationGroupArgs() {}

    private GlobalReplicationGroupArgs(GlobalReplicationGroupArgs $) {
        this.automaticFailoverEnabled = $.automaticFailoverEnabled;
        this.cacheNodeType = $.cacheNodeType;
        this.cacheParameterGroupName = $.cacheParameterGroupName;
        this.engineVersion = $.engineVersion;
        this.globalNodeGroupCount = $.globalNodeGroupCount;
        this.globalReplicationGroupDescription = $.globalReplicationGroupDescription;
        this.globalReplicationGroupIdSuffix = $.globalReplicationGroupIdSuffix;
        this.members = $.members;
        this.regionalConfigurations = $.regionalConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalReplicationGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalReplicationGroupArgs $;

        public Builder() {
            $ = new GlobalReplicationGroupArgs();
        }

        public Builder(GlobalReplicationGroupArgs defaults) {
            $ = new GlobalReplicationGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param automaticFailoverEnabled AutomaticFailoverEnabled
         * 
         * @return builder
         * 
         */
        public Builder automaticFailoverEnabled(@Nullable Output<Boolean> automaticFailoverEnabled) {
            $.automaticFailoverEnabled = automaticFailoverEnabled;
            return this;
        }

        /**
         * @param automaticFailoverEnabled AutomaticFailoverEnabled
         * 
         * @return builder
         * 
         */
        public Builder automaticFailoverEnabled(Boolean automaticFailoverEnabled) {
            return automaticFailoverEnabled(Output.of(automaticFailoverEnabled));
        }

        /**
         * @param cacheNodeType The cache node type of the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder cacheNodeType(@Nullable Output<String> cacheNodeType) {
            $.cacheNodeType = cacheNodeType;
            return this;
        }

        /**
         * @param cacheNodeType The cache node type of the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder cacheNodeType(String cacheNodeType) {
            return cacheNodeType(Output.of(cacheNodeType));
        }

        /**
         * @param cacheParameterGroupName Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
         * 
         * @return builder
         * 
         */
        public Builder cacheParameterGroupName(@Nullable Output<String> cacheParameterGroupName) {
            $.cacheParameterGroupName = cacheParameterGroupName;
            return this;
        }

        /**
         * @param cacheParameterGroupName Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
         * 
         * @return builder
         * 
         */
        public Builder cacheParameterGroupName(String cacheParameterGroupName) {
            return cacheParameterGroupName(Output.of(cacheParameterGroupName));
        }

        /**
         * @param engineVersion The engine version of the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion The engine version of the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param globalNodeGroupCount Indicates the number of node groups in the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder globalNodeGroupCount(@Nullable Output<Integer> globalNodeGroupCount) {
            $.globalNodeGroupCount = globalNodeGroupCount;
            return this;
        }

        /**
         * @param globalNodeGroupCount Indicates the number of node groups in the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder globalNodeGroupCount(Integer globalNodeGroupCount) {
            return globalNodeGroupCount(Output.of(globalNodeGroupCount));
        }

        /**
         * @param globalReplicationGroupDescription The optional description of the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder globalReplicationGroupDescription(@Nullable Output<String> globalReplicationGroupDescription) {
            $.globalReplicationGroupDescription = globalReplicationGroupDescription;
            return this;
        }

        /**
         * @param globalReplicationGroupDescription The optional description of the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder globalReplicationGroupDescription(String globalReplicationGroupDescription) {
            return globalReplicationGroupDescription(Output.of(globalReplicationGroupDescription));
        }

        /**
         * @param globalReplicationGroupIdSuffix The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix.
         * 
         * @return builder
         * 
         */
        public Builder globalReplicationGroupIdSuffix(@Nullable Output<String> globalReplicationGroupIdSuffix) {
            $.globalReplicationGroupIdSuffix = globalReplicationGroupIdSuffix;
            return this;
        }

        /**
         * @param globalReplicationGroupIdSuffix The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix.
         * 
         * @return builder
         * 
         */
        public Builder globalReplicationGroupIdSuffix(String globalReplicationGroupIdSuffix) {
            return globalReplicationGroupIdSuffix(Output.of(globalReplicationGroupIdSuffix));
        }

        /**
         * @param members The replication groups that comprise the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder members(Output<List<GlobalReplicationGroupMemberArgs>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members The replication groups that comprise the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder members(List<GlobalReplicationGroupMemberArgs> members) {
            return members(Output.of(members));
        }

        /**
         * @param members The replication groups that comprise the Global Datastore.
         * 
         * @return builder
         * 
         */
        public Builder members(GlobalReplicationGroupMemberArgs... members) {
            return members(List.of(members));
        }

        /**
         * @param regionalConfigurations Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder regionalConfigurations(@Nullable Output<List<GlobalReplicationGroupRegionalConfigurationArgs>> regionalConfigurations) {
            $.regionalConfigurations = regionalConfigurations;
            return this;
        }

        /**
         * @param regionalConfigurations Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder regionalConfigurations(List<GlobalReplicationGroupRegionalConfigurationArgs> regionalConfigurations) {
            return regionalConfigurations(Output.of(regionalConfigurations));
        }

        /**
         * @param regionalConfigurations Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore
         * 
         * @return builder
         * 
         */
        public Builder regionalConfigurations(GlobalReplicationGroupRegionalConfigurationArgs... regionalConfigurations) {
            return regionalConfigurations(List.of(regionalConfigurations));
        }

        public GlobalReplicationGroupArgs build() {
            $.members = Objects.requireNonNull($.members, "expected parameter 'members' to be non-null");
            return $;
        }
    }

}
