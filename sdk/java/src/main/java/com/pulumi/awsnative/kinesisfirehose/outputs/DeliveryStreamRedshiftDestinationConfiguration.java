// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisfirehose.outputs;

import com.pulumi.awsnative.kinesisfirehose.enums.DeliveryStreamRedshiftDestinationConfigurationS3BackupMode;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamCloudWatchLoggingOptions;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamCopyCommand;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamProcessingConfiguration;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamRedshiftRetryOptions;
import com.pulumi.awsnative.kinesisfirehose.outputs.DeliveryStreamS3DestinationConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeliveryStreamRedshiftDestinationConfiguration {
    private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
    private String clusterJDBCURL;
    private DeliveryStreamCopyCommand copyCommand;
    private String password;
    private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
    private @Nullable DeliveryStreamRedshiftRetryOptions retryOptions;
    private String roleARN;
    private @Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration;
    private @Nullable DeliveryStreamRedshiftDestinationConfigurationS3BackupMode s3BackupMode;
    private DeliveryStreamS3DestinationConfiguration s3Configuration;
    private String username;

    private DeliveryStreamRedshiftDestinationConfiguration() {}
    public Optional<DeliveryStreamCloudWatchLoggingOptions> cloudWatchLoggingOptions() {
        return Optional.ofNullable(this.cloudWatchLoggingOptions);
    }
    public String clusterJDBCURL() {
        return this.clusterJDBCURL;
    }
    public DeliveryStreamCopyCommand copyCommand() {
        return this.copyCommand;
    }
    public String password() {
        return this.password;
    }
    public Optional<DeliveryStreamProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    public Optional<DeliveryStreamRedshiftRetryOptions> retryOptions() {
        return Optional.ofNullable(this.retryOptions);
    }
    public String roleARN() {
        return this.roleARN;
    }
    public Optional<DeliveryStreamS3DestinationConfiguration> s3BackupConfiguration() {
        return Optional.ofNullable(this.s3BackupConfiguration);
    }
    public Optional<DeliveryStreamRedshiftDestinationConfigurationS3BackupMode> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }
    public DeliveryStreamS3DestinationConfiguration s3Configuration() {
        return this.s3Configuration;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeliveryStreamRedshiftDestinationConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions;
        private String clusterJDBCURL;
        private DeliveryStreamCopyCommand copyCommand;
        private String password;
        private @Nullable DeliveryStreamProcessingConfiguration processingConfiguration;
        private @Nullable DeliveryStreamRedshiftRetryOptions retryOptions;
        private String roleARN;
        private @Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration;
        private @Nullable DeliveryStreamRedshiftDestinationConfigurationS3BackupMode s3BackupMode;
        private DeliveryStreamS3DestinationConfiguration s3Configuration;
        private String username;
        public Builder() {}
        public Builder(DeliveryStreamRedshiftDestinationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudWatchLoggingOptions = defaults.cloudWatchLoggingOptions;
    	      this.clusterJDBCURL = defaults.clusterJDBCURL;
    	      this.copyCommand = defaults.copyCommand;
    	      this.password = defaults.password;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryOptions = defaults.retryOptions;
    	      this.roleARN = defaults.roleARN;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.s3Configuration = defaults.s3Configuration;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder cloudWatchLoggingOptions(@Nullable DeliveryStreamCloudWatchLoggingOptions cloudWatchLoggingOptions) {
            this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder clusterJDBCURL(String clusterJDBCURL) {
            this.clusterJDBCURL = Objects.requireNonNull(clusterJDBCURL);
            return this;
        }
        @CustomType.Setter
        public Builder copyCommand(DeliveryStreamCopyCommand copyCommand) {
            this.copyCommand = Objects.requireNonNull(copyCommand);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder processingConfiguration(@Nullable DeliveryStreamProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder retryOptions(@Nullable DeliveryStreamRedshiftRetryOptions retryOptions) {
            this.retryOptions = retryOptions;
            return this;
        }
        @CustomType.Setter
        public Builder roleARN(String roleARN) {
            this.roleARN = Objects.requireNonNull(roleARN);
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupConfiguration(@Nullable DeliveryStreamS3DestinationConfiguration s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder s3BackupMode(@Nullable DeliveryStreamRedshiftDestinationConfigurationS3BackupMode s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        @CustomType.Setter
        public Builder s3Configuration(DeliveryStreamS3DestinationConfiguration s3Configuration) {
            this.s3Configuration = Objects.requireNonNull(s3Configuration);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public DeliveryStreamRedshiftDestinationConfiguration build() {
            final var o = new DeliveryStreamRedshiftDestinationConfiguration();
            o.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
            o.clusterJDBCURL = clusterJDBCURL;
            o.copyCommand = copyCommand;
            o.password = password;
            o.processingConfiguration = processingConfiguration;
            o.retryOptions = retryOptions;
            o.roleARN = roleARN;
            o.s3BackupConfiguration = s3BackupConfiguration;
            o.s3BackupMode = s3BackupMode;
            o.s3Configuration = s3Configuration;
            o.username = username;
            return o;
        }
    }
}
