// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.eks.inputs;

import com.pulumi.awsnative.eks.inputs.IdentityProviderConfigRequiredClaimArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An object representing an OpenID Connect (OIDC) configuration.
 * 
 */
public final class IdentityProviderConfigOidcIdentityProviderConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderConfigOidcIdentityProviderConfigArgs Empty = new IdentityProviderConfigOidcIdentityProviderConfigArgs();

    /**
     * This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The JWT claim that the provider uses to return your groups.
     * 
     */
    @Import(name="groupsClaim")
    private @Nullable Output<String> groupsClaim;

    /**
     * @return The JWT claim that the provider uses to return your groups.
     * 
     */
    public Optional<Output<String>> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }

    /**
     * The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
     * 
     */
    @Import(name="groupsPrefix")
    private @Nullable Output<String> groupsPrefix;

    /**
     * @return The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
     * 
     */
    public Optional<Output<String>> groupsPrefix() {
        return Optional.ofNullable(this.groupsPrefix);
    }

    /**
     * The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
     * 
     */
    @Import(name="issuerUrl", required=true)
    private Output<String> issuerUrl;

    /**
     * @return The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
     * 
     */
    public Output<String> issuerUrl() {
        return this.issuerUrl;
    }

    @Import(name="requiredClaims")
    private @Nullable Output<List<IdentityProviderConfigRequiredClaimArgs>> requiredClaims;

    public Optional<Output<List<IdentityProviderConfigRequiredClaimArgs>>> requiredClaims() {
        return Optional.ofNullable(this.requiredClaims);
    }

    /**
     * The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
     * 
     */
    @Import(name="usernameClaim")
    private @Nullable Output<String> usernameClaim;

    /**
     * @return The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
     * 
     */
    public Optional<Output<String>> usernameClaim() {
        return Optional.ofNullable(this.usernameClaim);
    }

    /**
     * The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
     * 
     */
    @Import(name="usernamePrefix")
    private @Nullable Output<String> usernamePrefix;

    /**
     * @return The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
     * 
     */
    public Optional<Output<String>> usernamePrefix() {
        return Optional.ofNullable(this.usernamePrefix);
    }

    private IdentityProviderConfigOidcIdentityProviderConfigArgs() {}

    private IdentityProviderConfigOidcIdentityProviderConfigArgs(IdentityProviderConfigOidcIdentityProviderConfigArgs $) {
        this.clientId = $.clientId;
        this.groupsClaim = $.groupsClaim;
        this.groupsPrefix = $.groupsPrefix;
        this.issuerUrl = $.issuerUrl;
        this.requiredClaims = $.requiredClaims;
        this.usernameClaim = $.usernameClaim;
        this.usernamePrefix = $.usernamePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderConfigOidcIdentityProviderConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderConfigOidcIdentityProviderConfigArgs $;

        public Builder() {
            $ = new IdentityProviderConfigOidcIdentityProviderConfigArgs();
        }

        public Builder(IdentityProviderConfigOidcIdentityProviderConfigArgs defaults) {
            $ = new IdentityProviderConfigOidcIdentityProviderConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param groupsClaim The JWT claim that the provider uses to return your groups.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            $.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * @param groupsClaim The JWT claim that the provider uses to return your groups.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(String groupsClaim) {
            return groupsClaim(Output.of(groupsClaim));
        }

        /**
         * @param groupsPrefix The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(@Nullable Output<String> groupsPrefix) {
            $.groupsPrefix = groupsPrefix;
            return this;
        }

        /**
         * @param groupsPrefix The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
         * 
         * @return builder
         * 
         */
        public Builder groupsPrefix(String groupsPrefix) {
            return groupsPrefix(Output.of(groupsPrefix));
        }

        /**
         * @param issuerUrl The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(Output<String> issuerUrl) {
            $.issuerUrl = issuerUrl;
            return this;
        }

        /**
         * @param issuerUrl The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
         * 
         * @return builder
         * 
         */
        public Builder issuerUrl(String issuerUrl) {
            return issuerUrl(Output.of(issuerUrl));
        }

        public Builder requiredClaims(@Nullable Output<List<IdentityProviderConfigRequiredClaimArgs>> requiredClaims) {
            $.requiredClaims = requiredClaims;
            return this;
        }

        public Builder requiredClaims(List<IdentityProviderConfigRequiredClaimArgs> requiredClaims) {
            return requiredClaims(Output.of(requiredClaims));
        }

        public Builder requiredClaims(IdentityProviderConfigRequiredClaimArgs... requiredClaims) {
            return requiredClaims(List.of(requiredClaims));
        }

        /**
         * @param usernameClaim The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(@Nullable Output<String> usernameClaim) {
            $.usernameClaim = usernameClaim;
            return this;
        }

        /**
         * @param usernameClaim The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
         * 
         * @return builder
         * 
         */
        public Builder usernameClaim(String usernameClaim) {
            return usernameClaim(Output.of(usernameClaim));
        }

        /**
         * @param usernamePrefix The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(@Nullable Output<String> usernamePrefix) {
            $.usernamePrefix = usernamePrefix;
            return this;
        }

        /**
         * @param usernamePrefix The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
         * 
         * @return builder
         * 
         */
        public Builder usernamePrefix(String usernamePrefix) {
            return usernamePrefix(Output.of(usernamePrefix));
        }

        public IdentityProviderConfigOidcIdentityProviderConfigArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.issuerUrl = Objects.requireNonNull($.issuerUrl, "expected parameter 'issuerUrl' to be non-null");
            return $;
        }
    }

}
