// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediatailor.inputs;

import com.pulumi.awsnative.mediatailor.enums.PlaybackConfigurationDashConfigurationOriginManifestType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration for DASH PUT operations.
 * 
 */
public final class PlaybackConfigurationDashConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PlaybackConfigurationDashConfigurationArgs Empty = new PlaybackConfigurationDashConfigurationArgs();

    /**
     * The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
     * 
     */
    @Import(name="manifestEndpointPrefix")
    private @Nullable Output<String> manifestEndpointPrefix;

    /**
     * @return The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
     * 
     */
    public Optional<Output<String>> manifestEndpointPrefix() {
        return Optional.ofNullable(this.manifestEndpointPrefix);
    }

    /**
     * The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
     * 
     */
    @Import(name="mpdLocation")
    private @Nullable Output<String> mpdLocation;

    /**
     * @return The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
     * 
     */
    public Optional<Output<String>> mpdLocation() {
        return Optional.ofNullable(this.mpdLocation);
    }

    /**
     * The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
     * 
     */
    @Import(name="originManifestType")
    private @Nullable Output<PlaybackConfigurationDashConfigurationOriginManifestType> originManifestType;

    /**
     * @return The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
     * 
     */
    public Optional<Output<PlaybackConfigurationDashConfigurationOriginManifestType>> originManifestType() {
        return Optional.ofNullable(this.originManifestType);
    }

    private PlaybackConfigurationDashConfigurationArgs() {}

    private PlaybackConfigurationDashConfigurationArgs(PlaybackConfigurationDashConfigurationArgs $) {
        this.manifestEndpointPrefix = $.manifestEndpointPrefix;
        this.mpdLocation = $.mpdLocation;
        this.originManifestType = $.originManifestType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PlaybackConfigurationDashConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PlaybackConfigurationDashConfigurationArgs $;

        public Builder() {
            $ = new PlaybackConfigurationDashConfigurationArgs();
        }

        public Builder(PlaybackConfigurationDashConfigurationArgs defaults) {
            $ = new PlaybackConfigurationDashConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manifestEndpointPrefix The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
         * 
         * @return builder
         * 
         */
        public Builder manifestEndpointPrefix(@Nullable Output<String> manifestEndpointPrefix) {
            $.manifestEndpointPrefix = manifestEndpointPrefix;
            return this;
        }

        /**
         * @param manifestEndpointPrefix The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
         * 
         * @return builder
         * 
         */
        public Builder manifestEndpointPrefix(String manifestEndpointPrefix) {
            return manifestEndpointPrefix(Output.of(manifestEndpointPrefix));
        }

        /**
         * @param mpdLocation The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
         * 
         * @return builder
         * 
         */
        public Builder mpdLocation(@Nullable Output<String> mpdLocation) {
            $.mpdLocation = mpdLocation;
            return this;
        }

        /**
         * @param mpdLocation The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
         * 
         * @return builder
         * 
         */
        public Builder mpdLocation(String mpdLocation) {
            return mpdLocation(Output.of(mpdLocation));
        }

        /**
         * @param originManifestType The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
         * 
         * @return builder
         * 
         */
        public Builder originManifestType(@Nullable Output<PlaybackConfigurationDashConfigurationOriginManifestType> originManifestType) {
            $.originManifestType = originManifestType;
            return this;
        }

        /**
         * @param originManifestType The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
         * 
         * @return builder
         * 
         */
        public Builder originManifestType(PlaybackConfigurationDashConfigurationOriginManifestType originManifestType) {
            return originManifestType(Output.of(originManifestType));
        }

        public PlaybackConfigurationDashConfigurationArgs build() {
            return $;
        }
    }

}
