// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.resiliencehub.inputs;

import com.pulumi.awsnative.resiliencehub.inputs.AppPhysicalResourceIdArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Resource mapping is used to map logical resources from template to physical resource
 * 
 */
public final class AppResourceMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppResourceMappingArgs Empty = new AppResourceMappingArgs();

    @Import(name="logicalStackName")
    private @Nullable Output<String> logicalStackName;

    public Optional<Output<String>> logicalStackName() {
        return Optional.ofNullable(this.logicalStackName);
    }

    @Import(name="mappingType", required=true)
    private Output<String> mappingType;

    public Output<String> mappingType() {
        return this.mappingType;
    }

    @Import(name="physicalResourceId", required=true)
    private Output<AppPhysicalResourceIdArgs> physicalResourceId;

    public Output<AppPhysicalResourceIdArgs> physicalResourceId() {
        return this.physicalResourceId;
    }

    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    @Import(name="terraformSourceName")
    private @Nullable Output<String> terraformSourceName;

    public Optional<Output<String>> terraformSourceName() {
        return Optional.ofNullable(this.terraformSourceName);
    }

    private AppResourceMappingArgs() {}

    private AppResourceMappingArgs(AppResourceMappingArgs $) {
        this.logicalStackName = $.logicalStackName;
        this.mappingType = $.mappingType;
        this.physicalResourceId = $.physicalResourceId;
        this.resourceName = $.resourceName;
        this.terraformSourceName = $.terraformSourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppResourceMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppResourceMappingArgs $;

        public Builder() {
            $ = new AppResourceMappingArgs();
        }

        public Builder(AppResourceMappingArgs defaults) {
            $ = new AppResourceMappingArgs(Objects.requireNonNull(defaults));
        }

        public Builder logicalStackName(@Nullable Output<String> logicalStackName) {
            $.logicalStackName = logicalStackName;
            return this;
        }

        public Builder logicalStackName(String logicalStackName) {
            return logicalStackName(Output.of(logicalStackName));
        }

        public Builder mappingType(Output<String> mappingType) {
            $.mappingType = mappingType;
            return this;
        }

        public Builder mappingType(String mappingType) {
            return mappingType(Output.of(mappingType));
        }

        public Builder physicalResourceId(Output<AppPhysicalResourceIdArgs> physicalResourceId) {
            $.physicalResourceId = physicalResourceId;
            return this;
        }

        public Builder physicalResourceId(AppPhysicalResourceIdArgs physicalResourceId) {
            return physicalResourceId(Output.of(physicalResourceId));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder terraformSourceName(@Nullable Output<String> terraformSourceName) {
            $.terraformSourceName = terraformSourceName;
            return this;
        }

        public Builder terraformSourceName(String terraformSourceName) {
            return terraformSourceName(Output.of(terraformSourceName));
        }

        public AppResourceMappingArgs build() {
            $.mappingType = Objects.requireNonNull($.mappingType, "expected parameter 'mappingType' to be non-null");
            $.physicalResourceId = Objects.requireNonNull($.physicalResourceId, "expected parameter 'physicalResourceId' to be non-null");
            return $;
        }
    }

}
