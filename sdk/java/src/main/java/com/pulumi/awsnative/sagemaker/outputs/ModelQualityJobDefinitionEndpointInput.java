// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.outputs;

import com.pulumi.awsnative.sagemaker.enums.ModelQualityJobDefinitionEndpointInputS3DataDistributionType;
import com.pulumi.awsnative.sagemaker.enums.ModelQualityJobDefinitionEndpointInputS3InputMode;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelQualityJobDefinitionEndpointInput {
    /**
     * @return Monitoring end time offset, e.g. PT0H
     * 
     */
    private @Nullable String endTimeOffset;
    private String endpointName;
    /**
     * @return Index or JSONpath to locate predicted label(s)
     * 
     */
    private @Nullable String inferenceAttribute;
    /**
     * @return Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    private String localPath;
    /**
     * @return Index or JSONpath to locate probabilities
     * 
     */
    private @Nullable String probabilityAttribute;
    private @Nullable Double probabilityThresholdAttribute;
    /**
     * @return Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    private @Nullable ModelQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType;
    /**
     * @return Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    private @Nullable ModelQualityJobDefinitionEndpointInputS3InputMode s3InputMode;
    /**
     * @return Monitoring start time offset, e.g. -PT1H
     * 
     */
    private @Nullable String startTimeOffset;

    private ModelQualityJobDefinitionEndpointInput() {}
    /**
     * @return Monitoring end time offset, e.g. PT0H
     * 
     */
    public Optional<String> endTimeOffset() {
        return Optional.ofNullable(this.endTimeOffset);
    }
    public String endpointName() {
        return this.endpointName;
    }
    /**
     * @return Index or JSONpath to locate predicted label(s)
     * 
     */
    public Optional<String> inferenceAttribute() {
        return Optional.ofNullable(this.inferenceAttribute);
    }
    /**
     * @return Path to the filesystem where the endpoint data is available to the container.
     * 
     */
    public String localPath() {
        return this.localPath;
    }
    /**
     * @return Index or JSONpath to locate probabilities
     * 
     */
    public Optional<String> probabilityAttribute() {
        return Optional.ofNullable(this.probabilityAttribute);
    }
    public Optional<Double> probabilityThresholdAttribute() {
        return Optional.ofNullable(this.probabilityThresholdAttribute);
    }
    /**
     * @return Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
     * 
     */
    public Optional<ModelQualityJobDefinitionEndpointInputS3DataDistributionType> s3DataDistributionType() {
        return Optional.ofNullable(this.s3DataDistributionType);
    }
    /**
     * @return Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
     * 
     */
    public Optional<ModelQualityJobDefinitionEndpointInputS3InputMode> s3InputMode() {
        return Optional.ofNullable(this.s3InputMode);
    }
    /**
     * @return Monitoring start time offset, e.g. -PT1H
     * 
     */
    public Optional<String> startTimeOffset() {
        return Optional.ofNullable(this.startTimeOffset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelQualityJobDefinitionEndpointInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String endTimeOffset;
        private String endpointName;
        private @Nullable String inferenceAttribute;
        private String localPath;
        private @Nullable String probabilityAttribute;
        private @Nullable Double probabilityThresholdAttribute;
        private @Nullable ModelQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType;
        private @Nullable ModelQualityJobDefinitionEndpointInputS3InputMode s3InputMode;
        private @Nullable String startTimeOffset;
        public Builder() {}
        public Builder(ModelQualityJobDefinitionEndpointInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTimeOffset = defaults.endTimeOffset;
    	      this.endpointName = defaults.endpointName;
    	      this.inferenceAttribute = defaults.inferenceAttribute;
    	      this.localPath = defaults.localPath;
    	      this.probabilityAttribute = defaults.probabilityAttribute;
    	      this.probabilityThresholdAttribute = defaults.probabilityThresholdAttribute;
    	      this.s3DataDistributionType = defaults.s3DataDistributionType;
    	      this.s3InputMode = defaults.s3InputMode;
    	      this.startTimeOffset = defaults.startTimeOffset;
        }

        @CustomType.Setter
        public Builder endTimeOffset(@Nullable String endTimeOffset) {
            this.endTimeOffset = endTimeOffset;
            return this;
        }
        @CustomType.Setter
        public Builder endpointName(String endpointName) {
            this.endpointName = Objects.requireNonNull(endpointName);
            return this;
        }
        @CustomType.Setter
        public Builder inferenceAttribute(@Nullable String inferenceAttribute) {
            this.inferenceAttribute = inferenceAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder localPath(String localPath) {
            this.localPath = Objects.requireNonNull(localPath);
            return this;
        }
        @CustomType.Setter
        public Builder probabilityAttribute(@Nullable String probabilityAttribute) {
            this.probabilityAttribute = probabilityAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder probabilityThresholdAttribute(@Nullable Double probabilityThresholdAttribute) {
            this.probabilityThresholdAttribute = probabilityThresholdAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder s3DataDistributionType(@Nullable ModelQualityJobDefinitionEndpointInputS3DataDistributionType s3DataDistributionType) {
            this.s3DataDistributionType = s3DataDistributionType;
            return this;
        }
        @CustomType.Setter
        public Builder s3InputMode(@Nullable ModelQualityJobDefinitionEndpointInputS3InputMode s3InputMode) {
            this.s3InputMode = s3InputMode;
            return this;
        }
        @CustomType.Setter
        public Builder startTimeOffset(@Nullable String startTimeOffset) {
            this.startTimeOffset = startTimeOffset;
            return this;
        }
        public ModelQualityJobDefinitionEndpointInput build() {
            final var o = new ModelQualityJobDefinitionEndpointInput();
            o.endTimeOffset = endTimeOffset;
            o.endpointName = endpointName;
            o.inferenceAttribute = inferenceAttribute;
            o.localPath = localPath;
            o.probabilityAttribute = probabilityAttribute;
            o.probabilityThresholdAttribute = probabilityThresholdAttribute;
            o.s3DataDistributionType = s3DataDistributionType;
            o.s3InputMode = s3InputMode;
            o.startTimeOffset = startTimeOffset;
            return o;
        }
    }
}
