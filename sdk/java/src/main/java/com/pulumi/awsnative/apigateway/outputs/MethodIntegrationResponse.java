// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.outputs;

import com.pulumi.awsnative.apigateway.enums.MethodIntegrationResponseContentHandling;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MethodIntegrationResponse {
    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    private @Nullable MethodIntegrationResponseContentHandling contentHandling;
    /**
     * @return The response parameters from the backend response that API Gateway sends to the method response.
     * 
     */
    private @Nullable Object responseParameters;
    /**
     * @return The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
     * 
     */
    private @Nullable Object responseTemplates;
    /**
     * @return A regular expression that specifies which error strings or status codes from the backend map to the integration response.
     * 
     */
    private @Nullable String selectionPattern;
    /**
     * @return The status code that API Gateway uses to map the integration response to a MethodResponse status code.
     * 
     */
    private String statusCode;

    private MethodIntegrationResponse() {}
    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    public Optional<MethodIntegrationResponseContentHandling> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }
    /**
     * @return The response parameters from the backend response that API Gateway sends to the method response.
     * 
     */
    public Optional<Object> responseParameters() {
        return Optional.ofNullable(this.responseParameters);
    }
    /**
     * @return The templates that are used to transform the integration response body. Specify templates as key-value pairs (string-to-string mappings), with a content type as the key and a template as the value.
     * 
     */
    public Optional<Object> responseTemplates() {
        return Optional.ofNullable(this.responseTemplates);
    }
    /**
     * @return A regular expression that specifies which error strings or status codes from the backend map to the integration response.
     * 
     */
    public Optional<String> selectionPattern() {
        return Optional.ofNullable(this.selectionPattern);
    }
    /**
     * @return The status code that API Gateway uses to map the integration response to a MethodResponse status code.
     * 
     */
    public String statusCode() {
        return this.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodIntegrationResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable MethodIntegrationResponseContentHandling contentHandling;
        private @Nullable Object responseParameters;
        private @Nullable Object responseTemplates;
        private @Nullable String selectionPattern;
        private String statusCode;
        public Builder() {}
        public Builder(MethodIntegrationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentHandling = defaults.contentHandling;
    	      this.responseParameters = defaults.responseParameters;
    	      this.responseTemplates = defaults.responseTemplates;
    	      this.selectionPattern = defaults.selectionPattern;
    	      this.statusCode = defaults.statusCode;
        }

        @CustomType.Setter
        public Builder contentHandling(@Nullable MethodIntegrationResponseContentHandling contentHandling) {
            this.contentHandling = contentHandling;
            return this;
        }
        @CustomType.Setter
        public Builder responseParameters(@Nullable Object responseParameters) {
            this.responseParameters = responseParameters;
            return this;
        }
        @CustomType.Setter
        public Builder responseTemplates(@Nullable Object responseTemplates) {
            this.responseTemplates = responseTemplates;
            return this;
        }
        @CustomType.Setter
        public Builder selectionPattern(@Nullable String selectionPattern) {
            this.selectionPattern = selectionPattern;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(String statusCode) {
            this.statusCode = Objects.requireNonNull(statusCode);
            return this;
        }
        public MethodIntegrationResponse build() {
            final var o = new MethodIntegrationResponse();
            o.contentHandling = contentHandling;
            o.responseParameters = responseParameters;
            o.responseTemplates = responseTemplates;
            o.selectionPattern = selectionPattern;
            o.statusCode = statusCode;
            return o;
        }
    }
}
