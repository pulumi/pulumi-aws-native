// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect;

import com.pulumi.awsnative.mediaconnect.enums.FlowEntitlementEntitlementStatus;
import com.pulumi.awsnative.mediaconnect.inputs.FlowEntitlementEncryptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowEntitlementArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowEntitlementArgs Empty = new FlowEntitlementArgs();

    /**
     * Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     * 
     */
    @Import(name="dataTransferSubscriberFeePercent")
    private @Nullable Output<Integer> dataTransferSubscriberFeePercent;

    /**
     * @return Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
     * 
     */
    public Optional<Output<Integer>> dataTransferSubscriberFeePercent() {
        return Optional.ofNullable(this.dataTransferSubscriberFeePercent);
    }

    /**
     * A description of the entitlement.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description of the entitlement.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The type of encryption that will be used on the output that is associated with this entitlement.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<FlowEntitlementEncryptionArgs> encryption;

    /**
     * @return The type of encryption that will be used on the output that is associated with this entitlement.
     * 
     */
    public Optional<Output<FlowEntitlementEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     *  An indication of whether the entitlement is enabled.
     * 
     */
    @Import(name="entitlementStatus")
    private @Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus;

    /**
     * @return  An indication of whether the entitlement is enabled.
     * 
     */
    public Optional<Output<FlowEntitlementEntitlementStatus>> entitlementStatus() {
        return Optional.ofNullable(this.entitlementStatus);
    }

    /**
     * The ARN of the flow.
     * 
     */
    @Import(name="flowArn", required=true)
    private Output<String> flowArn;

    /**
     * @return The ARN of the flow.
     * 
     */
    public Output<String> flowArn() {
        return this.flowArn;
    }

    /**
     * The name of the entitlement.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the entitlement.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
     * 
     */
    @Import(name="subscribers", required=true)
    private Output<List<String>> subscribers;

    /**
     * @return The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
     * 
     */
    public Output<List<String>> subscribers() {
        return this.subscribers;
    }

    private FlowEntitlementArgs() {}

    private FlowEntitlementArgs(FlowEntitlementArgs $) {
        this.dataTransferSubscriberFeePercent = $.dataTransferSubscriberFeePercent;
        this.description = $.description;
        this.encryption = $.encryption;
        this.entitlementStatus = $.entitlementStatus;
        this.flowArn = $.flowArn;
        this.name = $.name;
        this.subscribers = $.subscribers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowEntitlementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowEntitlementArgs $;

        public Builder() {
            $ = new FlowEntitlementArgs();
        }

        public Builder(FlowEntitlementArgs defaults) {
            $ = new FlowEntitlementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataTransferSubscriberFeePercent Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder dataTransferSubscriberFeePercent(@Nullable Output<Integer> dataTransferSubscriberFeePercent) {
            $.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
            return this;
        }

        /**
         * @param dataTransferSubscriberFeePercent Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder dataTransferSubscriberFeePercent(Integer dataTransferSubscriberFeePercent) {
            return dataTransferSubscriberFeePercent(Output.of(dataTransferSubscriberFeePercent));
        }

        /**
         * @param description A description of the entitlement.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the entitlement.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryption The type of encryption that will be used on the output that is associated with this entitlement.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<FlowEntitlementEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption The type of encryption that will be used on the output that is associated with this entitlement.
         * 
         * @return builder
         * 
         */
        public Builder encryption(FlowEntitlementEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param entitlementStatus  An indication of whether the entitlement is enabled.
         * 
         * @return builder
         * 
         */
        public Builder entitlementStatus(@Nullable Output<FlowEntitlementEntitlementStatus> entitlementStatus) {
            $.entitlementStatus = entitlementStatus;
            return this;
        }

        /**
         * @param entitlementStatus  An indication of whether the entitlement is enabled.
         * 
         * @return builder
         * 
         */
        public Builder entitlementStatus(FlowEntitlementEntitlementStatus entitlementStatus) {
            return entitlementStatus(Output.of(entitlementStatus));
        }

        /**
         * @param flowArn The ARN of the flow.
         * 
         * @return builder
         * 
         */
        public Builder flowArn(Output<String> flowArn) {
            $.flowArn = flowArn;
            return this;
        }

        /**
         * @param flowArn The ARN of the flow.
         * 
         * @return builder
         * 
         */
        public Builder flowArn(String flowArn) {
            return flowArn(Output.of(flowArn));
        }

        /**
         * @param name The name of the entitlement.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the entitlement.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param subscribers The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
         * 
         * @return builder
         * 
         */
        public Builder subscribers(Output<List<String>> subscribers) {
            $.subscribers = subscribers;
            return this;
        }

        /**
         * @param subscribers The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
         * 
         * @return builder
         * 
         */
        public Builder subscribers(List<String> subscribers) {
            return subscribers(Output.of(subscribers));
        }

        /**
         * @param subscribers The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
         * 
         * @return builder
         * 
         */
        public Builder subscribers(String... subscribers) {
            return subscribers(List.of(subscribers));
        }

        public FlowEntitlementArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.flowArn = Objects.requireNonNull($.flowArn, "expected parameter 'flowArn' to be non-null");
            $.subscribers = Objects.requireNonNull($.subscribers, "expected parameter 'subscribers' to be non-null");
            return $;
        }
    }

}
