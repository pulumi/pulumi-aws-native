// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew;

import com.pulumi.awsnative.databrew.enums.DatasetFormat;
import com.pulumi.awsnative.databrew.inputs.DatasetFormatOptionsArgs;
import com.pulumi.awsnative.databrew.inputs.DatasetInputArgs;
import com.pulumi.awsnative.databrew.inputs.DatasetPathOptionsArgs;
import com.pulumi.awsnative.databrew.inputs.DatasetTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * Dataset format
     * 
     */
    @Import(name="format")
    private @Nullable Output<DatasetFormat> format;

    /**
     * @return Dataset format
     * 
     */
    public Optional<Output<DatasetFormat>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Format options for dataset
     * 
     */
    @Import(name="formatOptions")
    private @Nullable Output<DatasetFormatOptionsArgs> formatOptions;

    /**
     * @return Format options for dataset
     * 
     */
    public Optional<Output<DatasetFormatOptionsArgs>> formatOptions() {
        return Optional.ofNullable(this.formatOptions);
    }

    /**
     * Input
     * 
     */
    @Import(name="input", required=true)
    private Output<DatasetInputArgs> input;

    /**
     * @return Input
     * 
     */
    public Output<DatasetInputArgs> input() {
        return this.input;
    }

    /**
     * Dataset name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Dataset name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * PathOptions
     * 
     */
    @Import(name="pathOptions")
    private @Nullable Output<DatasetPathOptionsArgs> pathOptions;

    /**
     * @return PathOptions
     * 
     */
    public Optional<Output<DatasetPathOptionsArgs>> pathOptions() {
        return Optional.ofNullable(this.pathOptions);
    }

    @Import(name="tags")
    private @Nullable Output<List<DatasetTagArgs>> tags;

    public Optional<Output<List<DatasetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DatasetArgs() {}

    private DatasetArgs(DatasetArgs $) {
        this.format = $.format;
        this.formatOptions = $.formatOptions;
        this.input = $.input;
        this.name = $.name;
        this.pathOptions = $.pathOptions;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetArgs $;

        public Builder() {
            $ = new DatasetArgs();
        }

        public Builder(DatasetArgs defaults) {
            $ = new DatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format Dataset format
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<DatasetFormat> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Dataset format
         * 
         * @return builder
         * 
         */
        public Builder format(DatasetFormat format) {
            return format(Output.of(format));
        }

        /**
         * @param formatOptions Format options for dataset
         * 
         * @return builder
         * 
         */
        public Builder formatOptions(@Nullable Output<DatasetFormatOptionsArgs> formatOptions) {
            $.formatOptions = formatOptions;
            return this;
        }

        /**
         * @param formatOptions Format options for dataset
         * 
         * @return builder
         * 
         */
        public Builder formatOptions(DatasetFormatOptionsArgs formatOptions) {
            return formatOptions(Output.of(formatOptions));
        }

        /**
         * @param input Input
         * 
         * @return builder
         * 
         */
        public Builder input(Output<DatasetInputArgs> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input Input
         * 
         * @return builder
         * 
         */
        public Builder input(DatasetInputArgs input) {
            return input(Output.of(input));
        }

        /**
         * @param name Dataset name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Dataset name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pathOptions PathOptions
         * 
         * @return builder
         * 
         */
        public Builder pathOptions(@Nullable Output<DatasetPathOptionsArgs> pathOptions) {
            $.pathOptions = pathOptions;
            return this;
        }

        /**
         * @param pathOptions PathOptions
         * 
         * @return builder
         * 
         */
        public Builder pathOptions(DatasetPathOptionsArgs pathOptions) {
            return pathOptions(Output.of(pathOptions));
        }

        public Builder tags(@Nullable Output<List<DatasetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<DatasetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(DatasetTagArgs... tags) {
            return tags(List.of(tags));
        }

        public DatasetArgs build() {
            $.input = Objects.requireNonNull($.input, "expected parameter 'input' to be non-null");
            return $;
        }
    }

}
