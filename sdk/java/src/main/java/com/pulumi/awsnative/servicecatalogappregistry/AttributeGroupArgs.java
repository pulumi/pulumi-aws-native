// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.servicecatalogappregistry;

import com.pulumi.awsnative.servicecatalogappregistry.inputs.AttributeGroupTagsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttributeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttributeGroupArgs Empty = new AttributeGroupArgs();

    @Import(name="attributes", required=true)
    private Output<Object> attributes;

    public Output<Object> attributes() {
        return this.attributes;
    }

    /**
     * The description of the attribute group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the attribute group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the attribute group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the attribute group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="tags")
    private @Nullable Output<AttributeGroupTagsArgs> tags;

    public Optional<Output<AttributeGroupTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AttributeGroupArgs() {}

    private AttributeGroupArgs(AttributeGroupArgs $) {
        this.attributes = $.attributes;
        this.description = $.description;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttributeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttributeGroupArgs $;

        public Builder() {
            $ = new AttributeGroupArgs();
        }

        public Builder(AttributeGroupArgs defaults) {
            $ = new AttributeGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(Output<Object> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Object attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param description The description of the attribute group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the attribute group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the attribute group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tags(@Nullable Output<AttributeGroupTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(AttributeGroupTagsArgs tags) {
            return tags(Output.of(tags));
        }

        public AttributeGroupArgs build() {
            $.attributes = Objects.requireNonNull($.attributes, "expected parameter 'attributes' to be non-null");
            return $;
        }
    }

}
