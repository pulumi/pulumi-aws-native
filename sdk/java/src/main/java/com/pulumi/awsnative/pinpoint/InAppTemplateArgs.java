// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.pinpoint;

import com.pulumi.awsnative.pinpoint.enums.InAppTemplateLayout;
import com.pulumi.awsnative.pinpoint.inputs.InAppTemplateInAppMessageContentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InAppTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final InAppTemplateArgs Empty = new InAppTemplateArgs();

    @Import(name="content")
    private @Nullable Output<List<InAppTemplateInAppMessageContentArgs>> content;

    public Optional<Output<List<InAppTemplateInAppMessageContentArgs>>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="customConfig")
    private @Nullable Output<Object> customConfig;

    public Optional<Output<Object>> customConfig() {
        return Optional.ofNullable(this.customConfig);
    }

    @Import(name="layout")
    private @Nullable Output<InAppTemplateLayout> layout;

    public Optional<Output<InAppTemplateLayout>> layout() {
        return Optional.ofNullable(this.layout);
    }

    @Import(name="tags")
    private @Nullable Output<Object> tags;

    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="templateDescription")
    private @Nullable Output<String> templateDescription;

    public Optional<Output<String>> templateDescription() {
        return Optional.ofNullable(this.templateDescription);
    }

    @Import(name="templateName", required=true)
    private Output<String> templateName;

    public Output<String> templateName() {
        return this.templateName;
    }

    private InAppTemplateArgs() {}

    private InAppTemplateArgs(InAppTemplateArgs $) {
        this.content = $.content;
        this.customConfig = $.customConfig;
        this.layout = $.layout;
        this.tags = $.tags;
        this.templateDescription = $.templateDescription;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InAppTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InAppTemplateArgs $;

        public Builder() {
            $ = new InAppTemplateArgs();
        }

        public Builder(InAppTemplateArgs defaults) {
            $ = new InAppTemplateArgs(Objects.requireNonNull(defaults));
        }

        public Builder content(@Nullable Output<List<InAppTemplateInAppMessageContentArgs>> content) {
            $.content = content;
            return this;
        }

        public Builder content(List<InAppTemplateInAppMessageContentArgs> content) {
            return content(Output.of(content));
        }

        public Builder content(InAppTemplateInAppMessageContentArgs... content) {
            return content(List.of(content));
        }

        public Builder customConfig(@Nullable Output<Object> customConfig) {
            $.customConfig = customConfig;
            return this;
        }

        public Builder customConfig(Object customConfig) {
            return customConfig(Output.of(customConfig));
        }

        public Builder layout(@Nullable Output<InAppTemplateLayout> layout) {
            $.layout = layout;
            return this;
        }

        public Builder layout(InAppTemplateLayout layout) {
            return layout(Output.of(layout));
        }

        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        public Builder templateDescription(@Nullable Output<String> templateDescription) {
            $.templateDescription = templateDescription;
            return this;
        }

        public Builder templateDescription(String templateDescription) {
            return templateDescription(Output.of(templateDescription));
        }

        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public InAppTemplateArgs build() {
            $.templateName = Objects.requireNonNull($.templateName, "expected parameter 'templateName' to be non-null");
            return $;
        }
    }

}
