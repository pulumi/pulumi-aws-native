// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kms.outputs;

import com.pulumi.awsnative.kms.enums.KeySpec;
import com.pulumi.awsnative.kms.enums.KeyUsage;
import com.pulumi.awsnative.kms.outputs.KeyTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetKeyResult {
    private @Nullable String arn;
    /**
     * @return A description of the AWS KMS key. Use a description that helps you to distinguish this AWS KMS key from others in the account, such as its intended use.
     * 
     */
    private @Nullable String description;
    /**
     * @return Enables automatic rotation of the key material for the specified AWS KMS key. By default, automation key rotation is not enabled.
     * 
     */
    private @Nullable Boolean enableKeyRotation;
    /**
     * @return Specifies whether the AWS KMS key is enabled. Disabled AWS KMS keys cannot be used in cryptographic operations.
     * 
     */
    private @Nullable Boolean enabled;
    private @Nullable String keyId;
    /**
     * @return The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
     * 
     */
    private @Nullable Object keyPolicy;
    /**
     * @return Specifies the type of AWS KMS key to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric AWS KMS keys. You can&#39;t change the KeySpec value after the AWS KMS key is created.
     * 
     */
    private @Nullable KeySpec keySpec;
    /**
     * @return Determines the cryptographic operations for which you can use the AWS KMS key. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric AWS KMS keys. You can&#39;t change the KeyUsage value after the AWS KMS key is created.
     * 
     */
    private @Nullable KeyUsage keyUsage;
    /**
     * @return Specifies whether the AWS KMS key should be Multi-Region. You can&#39;t change the MultiRegion value after the AWS KMS key is created.
     * 
     */
    private @Nullable Boolean multiRegion;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<KeyTag> tags;

    private GetKeyResult() {}
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return A description of the AWS KMS key. Use a description that helps you to distinguish this AWS KMS key from others in the account, such as its intended use.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Enables automatic rotation of the key material for the specified AWS KMS key. By default, automation key rotation is not enabled.
     * 
     */
    public Optional<Boolean> enableKeyRotation() {
        return Optional.ofNullable(this.enableKeyRotation);
    }
    /**
     * @return Specifies whether the AWS KMS key is enabled. Disabled AWS KMS keys cannot be used in cryptographic operations.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return The key policy that authorizes use of the AWS KMS key. The key policy must observe the following rules.
     * 
     */
    public Optional<Object> keyPolicy() {
        return Optional.ofNullable(this.keyPolicy);
    }
    /**
     * @return Specifies the type of AWS KMS key to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric AWS KMS keys. You can&#39;t change the KeySpec value after the AWS KMS key is created.
     * 
     */
    public Optional<KeySpec> keySpec() {
        return Optional.ofNullable(this.keySpec);
    }
    /**
     * @return Determines the cryptographic operations for which you can use the AWS KMS key. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric AWS KMS keys. You can&#39;t change the KeyUsage value after the AWS KMS key is created.
     * 
     */
    public Optional<KeyUsage> keyUsage() {
        return Optional.ofNullable(this.keyUsage);
    }
    /**
     * @return Specifies whether the AWS KMS key should be Multi-Region. You can&#39;t change the MultiRegion value after the AWS KMS key is created.
     * 
     */
    public Optional<Boolean> multiRegion() {
        return Optional.ofNullable(this.multiRegion);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<KeyTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String description;
        private @Nullable Boolean enableKeyRotation;
        private @Nullable Boolean enabled;
        private @Nullable String keyId;
        private @Nullable Object keyPolicy;
        private @Nullable KeySpec keySpec;
        private @Nullable KeyUsage keyUsage;
        private @Nullable Boolean multiRegion;
        private @Nullable List<KeyTag> tags;
        public Builder() {}
        public Builder(GetKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.enableKeyRotation = defaults.enableKeyRotation;
    	      this.enabled = defaults.enabled;
    	      this.keyId = defaults.keyId;
    	      this.keyPolicy = defaults.keyPolicy;
    	      this.keySpec = defaults.keySpec;
    	      this.keyUsage = defaults.keyUsage;
    	      this.multiRegion = defaults.multiRegion;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableKeyRotation(@Nullable Boolean enableKeyRotation) {
            this.enableKeyRotation = enableKeyRotation;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder keyPolicy(@Nullable Object keyPolicy) {
            this.keyPolicy = keyPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder keySpec(@Nullable KeySpec keySpec) {
            this.keySpec = keySpec;
            return this;
        }
        @CustomType.Setter
        public Builder keyUsage(@Nullable KeyUsage keyUsage) {
            this.keyUsage = keyUsage;
            return this;
        }
        @CustomType.Setter
        public Builder multiRegion(@Nullable Boolean multiRegion) {
            this.multiRegion = multiRegion;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<KeyTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(KeyTag... tags) {
            return tags(List.of(tags));
        }
        public GetKeyResult build() {
            final var o = new GetKeyResult();
            o.arn = arn;
            o.description = description;
            o.enableKeyRotation = enableKeyRotation;
            o.enabled = enabled;
            o.keyId = keyId;
            o.keyPolicy = keyPolicy;
            o.keySpec = keySpec;
            o.keyUsage = keyUsage;
            o.multiRegion = multiRegion;
            o.tags = tags;
            return o;
        }
    }
}
