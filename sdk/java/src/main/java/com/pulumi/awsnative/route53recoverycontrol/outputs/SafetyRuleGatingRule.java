// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53recoverycontrol.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class SafetyRuleGatingRule {
    /**
     * @return The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
     * 
     */
    private List<String> gatingControls;
    /**
     * @return Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true.
     * In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
     * 
     */
    private List<String> targetControls;
    /**
     * @return An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
     * 
     */
    private Integer waitPeriodMs;

    private SafetyRuleGatingRule() {}
    /**
     * @return The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
     * 
     */
    public List<String> gatingControls() {
        return this.gatingControls;
    }
    /**
     * @return Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true.
     * In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
     * 
     */
    public List<String> targetControls() {
        return this.targetControls;
    }
    /**
     * @return An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
     * 
     */
    public Integer waitPeriodMs() {
        return this.waitPeriodMs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SafetyRuleGatingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> gatingControls;
        private List<String> targetControls;
        private Integer waitPeriodMs;
        public Builder() {}
        public Builder(SafetyRuleGatingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gatingControls = defaults.gatingControls;
    	      this.targetControls = defaults.targetControls;
    	      this.waitPeriodMs = defaults.waitPeriodMs;
        }

        @CustomType.Setter
        public Builder gatingControls(List<String> gatingControls) {
            this.gatingControls = Objects.requireNonNull(gatingControls);
            return this;
        }
        public Builder gatingControls(String... gatingControls) {
            return gatingControls(List.of(gatingControls));
        }
        @CustomType.Setter
        public Builder targetControls(List<String> targetControls) {
            this.targetControls = Objects.requireNonNull(targetControls);
            return this;
        }
        public Builder targetControls(String... targetControls) {
            return targetControls(List.of(targetControls));
        }
        @CustomType.Setter
        public Builder waitPeriodMs(Integer waitPeriodMs) {
            this.waitPeriodMs = Objects.requireNonNull(waitPeriodMs);
            return this;
        }
        public SafetyRuleGatingRule build() {
            final var o = new SafetyRuleGatingRule();
            o.gatingControls = gatingControls;
            o.targetControls = targetControls;
            o.waitPeriodMs = waitPeriodMs;
            return o;
        }
    }
}
