// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kafkaconnect;

import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorCapacityArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorKafkaClusterArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorKafkaClusterClientAuthenticationArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorKafkaClusterEncryptionInTransitArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorLogDeliveryArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorPluginArgs;
import com.pulumi.awsnative.kafkaconnect.inputs.ConnectorWorkerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorArgs Empty = new ConnectorArgs();

    @Import(name="capacity", required=true)
    private Output<ConnectorCapacityArgs> capacity;

    public Output<ConnectorCapacityArgs> capacity() {
        return this.capacity;
    }

    /**
     * The configuration for the connector.
     * 
     */
    @Import(name="connectorConfiguration", required=true)
    private Output<Object> connectorConfiguration;

    /**
     * @return The configuration for the connector.
     * 
     */
    public Output<Object> connectorConfiguration() {
        return this.connectorConfiguration;
    }

    /**
     * A summary description of the connector.
     * 
     */
    @Import(name="connectorDescription")
    private @Nullable Output<String> connectorDescription;

    /**
     * @return A summary description of the connector.
     * 
     */
    public Optional<Output<String>> connectorDescription() {
        return Optional.ofNullable(this.connectorDescription);
    }

    /**
     * The name of the connector.
     * 
     */
    @Import(name="connectorName")
    private @Nullable Output<String> connectorName;

    /**
     * @return The name of the connector.
     * 
     */
    public Optional<Output<String>> connectorName() {
        return Optional.ofNullable(this.connectorName);
    }

    @Import(name="kafkaCluster", required=true)
    private Output<ConnectorKafkaClusterArgs> kafkaCluster;

    public Output<ConnectorKafkaClusterArgs> kafkaCluster() {
        return this.kafkaCluster;
    }

    @Import(name="kafkaClusterClientAuthentication", required=true)
    private Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication;

    public Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication() {
        return this.kafkaClusterClientAuthentication;
    }

    @Import(name="kafkaClusterEncryptionInTransit", required=true)
    private Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit;

    public Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit() {
        return this.kafkaClusterEncryptionInTransit;
    }

    /**
     * The version of Kafka Connect. It has to be compatible with both the Kafka cluster&#39;s version and the plugins.
     * 
     */
    @Import(name="kafkaConnectVersion", required=true)
    private Output<String> kafkaConnectVersion;

    /**
     * @return The version of Kafka Connect. It has to be compatible with both the Kafka cluster&#39;s version and the plugins.
     * 
     */
    public Output<String> kafkaConnectVersion() {
        return this.kafkaConnectVersion;
    }

    @Import(name="logDelivery")
    private @Nullable Output<ConnectorLogDeliveryArgs> logDelivery;

    public Optional<Output<ConnectorLogDeliveryArgs>> logDelivery() {
        return Optional.ofNullable(this.logDelivery);
    }

    /**
     * List of plugins to use with the connector.
     * 
     */
    @Import(name="plugins", required=true)
    private Output<List<ConnectorPluginArgs>> plugins;

    /**
     * @return List of plugins to use with the connector.
     * 
     */
    public Output<List<ConnectorPluginArgs>> plugins() {
        return this.plugins;
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
     * 
     */
    @Import(name="serviceExecutionRoleArn", required=true)
    private Output<String> serviceExecutionRoleArn;

    /**
     * @return The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
     * 
     */
    public Output<String> serviceExecutionRoleArn() {
        return this.serviceExecutionRoleArn;
    }

    @Import(name="workerConfiguration")
    private @Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration;

    public Optional<Output<ConnectorWorkerConfigurationArgs>> workerConfiguration() {
        return Optional.ofNullable(this.workerConfiguration);
    }

    private ConnectorArgs() {}

    private ConnectorArgs(ConnectorArgs $) {
        this.capacity = $.capacity;
        this.connectorConfiguration = $.connectorConfiguration;
        this.connectorDescription = $.connectorDescription;
        this.connectorName = $.connectorName;
        this.kafkaCluster = $.kafkaCluster;
        this.kafkaClusterClientAuthentication = $.kafkaClusterClientAuthentication;
        this.kafkaClusterEncryptionInTransit = $.kafkaClusterEncryptionInTransit;
        this.kafkaConnectVersion = $.kafkaConnectVersion;
        this.logDelivery = $.logDelivery;
        this.plugins = $.plugins;
        this.serviceExecutionRoleArn = $.serviceExecutionRoleArn;
        this.workerConfiguration = $.workerConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorArgs $;

        public Builder() {
            $ = new ConnectorArgs();
        }

        public Builder(ConnectorArgs defaults) {
            $ = new ConnectorArgs(Objects.requireNonNull(defaults));
        }

        public Builder capacity(Output<ConnectorCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder capacity(ConnectorCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param connectorConfiguration The configuration for the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorConfiguration(Output<Object> connectorConfiguration) {
            $.connectorConfiguration = connectorConfiguration;
            return this;
        }

        /**
         * @param connectorConfiguration The configuration for the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorConfiguration(Object connectorConfiguration) {
            return connectorConfiguration(Output.of(connectorConfiguration));
        }

        /**
         * @param connectorDescription A summary description of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDescription(@Nullable Output<String> connectorDescription) {
            $.connectorDescription = connectorDescription;
            return this;
        }

        /**
         * @param connectorDescription A summary description of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorDescription(String connectorDescription) {
            return connectorDescription(Output.of(connectorDescription));
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(@Nullable Output<String> connectorName) {
            $.connectorName = connectorName;
            return this;
        }

        /**
         * @param connectorName The name of the connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorName(String connectorName) {
            return connectorName(Output.of(connectorName));
        }

        public Builder kafkaCluster(Output<ConnectorKafkaClusterArgs> kafkaCluster) {
            $.kafkaCluster = kafkaCluster;
            return this;
        }

        public Builder kafkaCluster(ConnectorKafkaClusterArgs kafkaCluster) {
            return kafkaCluster(Output.of(kafkaCluster));
        }

        public Builder kafkaClusterClientAuthentication(Output<ConnectorKafkaClusterClientAuthenticationArgs> kafkaClusterClientAuthentication) {
            $.kafkaClusterClientAuthentication = kafkaClusterClientAuthentication;
            return this;
        }

        public Builder kafkaClusterClientAuthentication(ConnectorKafkaClusterClientAuthenticationArgs kafkaClusterClientAuthentication) {
            return kafkaClusterClientAuthentication(Output.of(kafkaClusterClientAuthentication));
        }

        public Builder kafkaClusterEncryptionInTransit(Output<ConnectorKafkaClusterEncryptionInTransitArgs> kafkaClusterEncryptionInTransit) {
            $.kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransit;
            return this;
        }

        public Builder kafkaClusterEncryptionInTransit(ConnectorKafkaClusterEncryptionInTransitArgs kafkaClusterEncryptionInTransit) {
            return kafkaClusterEncryptionInTransit(Output.of(kafkaClusterEncryptionInTransit));
        }

        /**
         * @param kafkaConnectVersion The version of Kafka Connect. It has to be compatible with both the Kafka cluster&#39;s version and the plugins.
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectVersion(Output<String> kafkaConnectVersion) {
            $.kafkaConnectVersion = kafkaConnectVersion;
            return this;
        }

        /**
         * @param kafkaConnectVersion The version of Kafka Connect. It has to be compatible with both the Kafka cluster&#39;s version and the plugins.
         * 
         * @return builder
         * 
         */
        public Builder kafkaConnectVersion(String kafkaConnectVersion) {
            return kafkaConnectVersion(Output.of(kafkaConnectVersion));
        }

        public Builder logDelivery(@Nullable Output<ConnectorLogDeliveryArgs> logDelivery) {
            $.logDelivery = logDelivery;
            return this;
        }

        public Builder logDelivery(ConnectorLogDeliveryArgs logDelivery) {
            return logDelivery(Output.of(logDelivery));
        }

        /**
         * @param plugins List of plugins to use with the connector.
         * 
         * @return builder
         * 
         */
        public Builder plugins(Output<List<ConnectorPluginArgs>> plugins) {
            $.plugins = plugins;
            return this;
        }

        /**
         * @param plugins List of plugins to use with the connector.
         * 
         * @return builder
         * 
         */
        public Builder plugins(List<ConnectorPluginArgs> plugins) {
            return plugins(Output.of(plugins));
        }

        /**
         * @param plugins List of plugins to use with the connector.
         * 
         * @return builder
         * 
         */
        public Builder plugins(ConnectorPluginArgs... plugins) {
            return plugins(List.of(plugins));
        }

        /**
         * @param serviceExecutionRoleArn The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(Output<String> serviceExecutionRoleArn) {
            $.serviceExecutionRoleArn = serviceExecutionRoleArn;
            return this;
        }

        /**
         * @param serviceExecutionRoleArn The Amazon Resource Name (ARN) of the IAM role used by the connector to access Amazon S3 objects and other external resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRoleArn(String serviceExecutionRoleArn) {
            return serviceExecutionRoleArn(Output.of(serviceExecutionRoleArn));
        }

        public Builder workerConfiguration(@Nullable Output<ConnectorWorkerConfigurationArgs> workerConfiguration) {
            $.workerConfiguration = workerConfiguration;
            return this;
        }

        public Builder workerConfiguration(ConnectorWorkerConfigurationArgs workerConfiguration) {
            return workerConfiguration(Output.of(workerConfiguration));
        }

        public ConnectorArgs build() {
            $.capacity = Objects.requireNonNull($.capacity, "expected parameter 'capacity' to be non-null");
            $.connectorConfiguration = Objects.requireNonNull($.connectorConfiguration, "expected parameter 'connectorConfiguration' to be non-null");
            $.kafkaCluster = Objects.requireNonNull($.kafkaCluster, "expected parameter 'kafkaCluster' to be non-null");
            $.kafkaClusterClientAuthentication = Objects.requireNonNull($.kafkaClusterClientAuthentication, "expected parameter 'kafkaClusterClientAuthentication' to be non-null");
            $.kafkaClusterEncryptionInTransit = Objects.requireNonNull($.kafkaClusterEncryptionInTransit, "expected parameter 'kafkaClusterEncryptionInTransit' to be non-null");
            $.kafkaConnectVersion = Objects.requireNonNull($.kafkaConnectVersion, "expected parameter 'kafkaConnectVersion' to be non-null");
            $.plugins = Objects.requireNonNull($.plugins, "expected parameter 'plugins' to be non-null");
            $.serviceExecutionRoleArn = Objects.requireNonNull($.serviceExecutionRoleArn, "expected parameter 'serviceExecutionRoleArn' to be non-null");
            return $;
        }
    }

}
