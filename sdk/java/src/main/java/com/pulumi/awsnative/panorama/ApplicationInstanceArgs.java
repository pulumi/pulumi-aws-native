// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.panorama;

import com.pulumi.awsnative.panorama.enums.ApplicationInstanceStatusFilter;
import com.pulumi.awsnative.panorama.inputs.ApplicationInstanceManifestOverridesPayloadArgs;
import com.pulumi.awsnative.panorama.inputs.ApplicationInstanceManifestPayloadArgs;
import com.pulumi.awsnative.panorama.inputs.ApplicationInstanceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationInstanceArgs Empty = new ApplicationInstanceArgs();

    @Import(name="applicationInstanceIdToReplace")
    private @Nullable Output<String> applicationInstanceIdToReplace;

    public Optional<Output<String>> applicationInstanceIdToReplace() {
        return Optional.ofNullable(this.applicationInstanceIdToReplace);
    }

    @Import(name="defaultRuntimeContextDevice", required=true)
    private Output<String> defaultRuntimeContextDevice;

    public Output<String> defaultRuntimeContextDevice() {
        return this.defaultRuntimeContextDevice;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    @Import(name="manifestOverridesPayload")
    private @Nullable Output<ApplicationInstanceManifestOverridesPayloadArgs> manifestOverridesPayload;

    public Optional<Output<ApplicationInstanceManifestOverridesPayloadArgs>> manifestOverridesPayload() {
        return Optional.ofNullable(this.manifestOverridesPayload);
    }

    @Import(name="manifestPayload", required=true)
    private Output<ApplicationInstanceManifestPayloadArgs> manifestPayload;

    public Output<ApplicationInstanceManifestPayloadArgs> manifestPayload() {
        return this.manifestPayload;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="runtimeRoleArn")
    private @Nullable Output<String> runtimeRoleArn;

    public Optional<Output<String>> runtimeRoleArn() {
        return Optional.ofNullable(this.runtimeRoleArn);
    }

    @Import(name="statusFilter")
    private @Nullable Output<ApplicationInstanceStatusFilter> statusFilter;

    public Optional<Output<ApplicationInstanceStatusFilter>> statusFilter() {
        return Optional.ofNullable(this.statusFilter);
    }

    @Import(name="tags")
    private @Nullable Output<List<ApplicationInstanceTagArgs>> tags;

    public Optional<Output<List<ApplicationInstanceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ApplicationInstanceArgs() {}

    private ApplicationInstanceArgs(ApplicationInstanceArgs $) {
        this.applicationInstanceIdToReplace = $.applicationInstanceIdToReplace;
        this.defaultRuntimeContextDevice = $.defaultRuntimeContextDevice;
        this.description = $.description;
        this.deviceId = $.deviceId;
        this.manifestOverridesPayload = $.manifestOverridesPayload;
        this.manifestPayload = $.manifestPayload;
        this.name = $.name;
        this.runtimeRoleArn = $.runtimeRoleArn;
        this.statusFilter = $.statusFilter;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationInstanceArgs $;

        public Builder() {
            $ = new ApplicationInstanceArgs();
        }

        public Builder(ApplicationInstanceArgs defaults) {
            $ = new ApplicationInstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationInstanceIdToReplace(@Nullable Output<String> applicationInstanceIdToReplace) {
            $.applicationInstanceIdToReplace = applicationInstanceIdToReplace;
            return this;
        }

        public Builder applicationInstanceIdToReplace(String applicationInstanceIdToReplace) {
            return applicationInstanceIdToReplace(Output.of(applicationInstanceIdToReplace));
        }

        public Builder defaultRuntimeContextDevice(Output<String> defaultRuntimeContextDevice) {
            $.defaultRuntimeContextDevice = defaultRuntimeContextDevice;
            return this;
        }

        public Builder defaultRuntimeContextDevice(String defaultRuntimeContextDevice) {
            return defaultRuntimeContextDevice(Output.of(defaultRuntimeContextDevice));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        public Builder manifestOverridesPayload(@Nullable Output<ApplicationInstanceManifestOverridesPayloadArgs> manifestOverridesPayload) {
            $.manifestOverridesPayload = manifestOverridesPayload;
            return this;
        }

        public Builder manifestOverridesPayload(ApplicationInstanceManifestOverridesPayloadArgs manifestOverridesPayload) {
            return manifestOverridesPayload(Output.of(manifestOverridesPayload));
        }

        public Builder manifestPayload(Output<ApplicationInstanceManifestPayloadArgs> manifestPayload) {
            $.manifestPayload = manifestPayload;
            return this;
        }

        public Builder manifestPayload(ApplicationInstanceManifestPayloadArgs manifestPayload) {
            return manifestPayload(Output.of(manifestPayload));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder runtimeRoleArn(@Nullable Output<String> runtimeRoleArn) {
            $.runtimeRoleArn = runtimeRoleArn;
            return this;
        }

        public Builder runtimeRoleArn(String runtimeRoleArn) {
            return runtimeRoleArn(Output.of(runtimeRoleArn));
        }

        public Builder statusFilter(@Nullable Output<ApplicationInstanceStatusFilter> statusFilter) {
            $.statusFilter = statusFilter;
            return this;
        }

        public Builder statusFilter(ApplicationInstanceStatusFilter statusFilter) {
            return statusFilter(Output.of(statusFilter));
        }

        public Builder tags(@Nullable Output<List<ApplicationInstanceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ApplicationInstanceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ApplicationInstanceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ApplicationInstanceArgs build() {
            $.defaultRuntimeContextDevice = Objects.requireNonNull($.defaultRuntimeContextDevice, "expected parameter 'defaultRuntimeContextDevice' to be non-null");
            $.manifestPayload = Objects.requireNonNull($.manifestPayload, "expected parameter 'manifestPayload' to be non-null");
            return $;
        }
    }

}
