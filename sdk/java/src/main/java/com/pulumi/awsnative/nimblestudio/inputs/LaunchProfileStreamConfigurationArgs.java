// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio.inputs;

import com.pulumi.awsnative.nimblestudio.enums.LaunchProfileStreamingClipboardMode;
import com.pulumi.awsnative.nimblestudio.enums.LaunchProfileStreamingInstanceType;
import com.pulumi.awsnative.nimblestudio.inputs.LaunchProfileStreamConfigurationSessionStorageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;A configuration for a streaming session.&lt;/p&gt;
 * 
 */
public final class LaunchProfileStreamConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LaunchProfileStreamConfigurationArgs Empty = new LaunchProfileStreamConfigurationArgs();

    @Import(name="clipboardMode", required=true)
    private Output<LaunchProfileStreamingClipboardMode> clipboardMode;

    public Output<LaunchProfileStreamingClipboardMode> clipboardMode() {
        return this.clipboardMode;
    }

    /**
     * &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    @Import(name="ec2InstanceTypes", required=true)
    private Output<List<LaunchProfileStreamingInstanceType>> ec2InstanceTypes;

    /**
     * @return &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    public Output<List<LaunchProfileStreamingInstanceType>> ec2InstanceTypes() {
        return this.ec2InstanceTypes;
    }

    /**
     * &lt;p&gt;The length of time, in minutes, that a streaming session can be active before it is
     *             stopped or terminated. After this point, Nimble Studio automatically terminates or
     *             stops the session. The default length of time is 690 minutes, and the maximum length of
     *             time is 30 days.&lt;/p&gt;
     * 
     */
    @Import(name="maxSessionLengthInMinutes")
    private @Nullable Output<Double> maxSessionLengthInMinutes;

    /**
     * @return &lt;p&gt;The length of time, in minutes, that a streaming session can be active before it is
     *             stopped or terminated. After this point, Nimble Studio automatically terminates or
     *             stops the session. The default length of time is 690 minutes, and the maximum length of
     *             time is 30 days.&lt;/p&gt;
     * 
     */
    public Optional<Output<Double>> maxSessionLengthInMinutes() {
        return Optional.ofNullable(this.maxSessionLengthInMinutes);
    }

    /**
     * &lt;p&gt;Integer that determines if you can start and stop your sessions and how long a session
     *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.&lt;/p&gt;
     *         &lt;p&gt;If the value is missing or set to 0, your sessions can’t be stopped. If you then call
     *             StopStreamingSession, the session fails. If the time that a session stays in the READY
     *             state exceeds the maxSessionLengthInMinutes value, the session will automatically be
     *             terminated by AWS (instead of stopped).&lt;/p&gt;
     *         &lt;p&gt;If the value is set to a positive number, the session can be stopped. You can call
     *             StopStreamingSession to stop sessions in the READY state. If the time that a session
     *             stays in the READY state exceeds the maxSessionLengthInMinutes value, the session will
     *             automatically be stopped by AWS (instead of terminated).&lt;/p&gt;
     * 
     */
    @Import(name="maxStoppedSessionLengthInMinutes")
    private @Nullable Output<Double> maxStoppedSessionLengthInMinutes;

    /**
     * @return &lt;p&gt;Integer that determines if you can start and stop your sessions and how long a session
     *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.&lt;/p&gt;
     *         &lt;p&gt;If the value is missing or set to 0, your sessions can’t be stopped. If you then call
     *             StopStreamingSession, the session fails. If the time that a session stays in the READY
     *             state exceeds the maxSessionLengthInMinutes value, the session will automatically be
     *             terminated by AWS (instead of stopped).&lt;/p&gt;
     *         &lt;p&gt;If the value is set to a positive number, the session can be stopped. You can call
     *             StopStreamingSession to stop sessions in the READY state. If the time that a session
     *             stays in the READY state exceeds the maxSessionLengthInMinutes value, the session will
     *             automatically be stopped by AWS (instead of terminated).&lt;/p&gt;
     * 
     */
    public Optional<Output<Double>> maxStoppedSessionLengthInMinutes() {
        return Optional.ofNullable(this.maxStoppedSessionLengthInMinutes);
    }

    @Import(name="sessionStorage")
    private @Nullable Output<LaunchProfileStreamConfigurationSessionStorageArgs> sessionStorage;

    public Optional<Output<LaunchProfileStreamConfigurationSessionStorageArgs>> sessionStorage() {
        return Optional.ofNullable(this.sessionStorage);
    }

    /**
     * &lt;p&gt;The streaming images that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    @Import(name="streamingImageIds", required=true)
    private Output<List<String>> streamingImageIds;

    /**
     * @return &lt;p&gt;The streaming images that users can select from when launching a streaming session
     *             with this launch profile.&lt;/p&gt;
     * 
     */
    public Output<List<String>> streamingImageIds() {
        return this.streamingImageIds;
    }

    private LaunchProfileStreamConfigurationArgs() {}

    private LaunchProfileStreamConfigurationArgs(LaunchProfileStreamConfigurationArgs $) {
        this.clipboardMode = $.clipboardMode;
        this.ec2InstanceTypes = $.ec2InstanceTypes;
        this.maxSessionLengthInMinutes = $.maxSessionLengthInMinutes;
        this.maxStoppedSessionLengthInMinutes = $.maxStoppedSessionLengthInMinutes;
        this.sessionStorage = $.sessionStorage;
        this.streamingImageIds = $.streamingImageIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchProfileStreamConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchProfileStreamConfigurationArgs $;

        public Builder() {
            $ = new LaunchProfileStreamConfigurationArgs();
        }

        public Builder(LaunchProfileStreamConfigurationArgs defaults) {
            $ = new LaunchProfileStreamConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder clipboardMode(Output<LaunchProfileStreamingClipboardMode> clipboardMode) {
            $.clipboardMode = clipboardMode;
            return this;
        }

        public Builder clipboardMode(LaunchProfileStreamingClipboardMode clipboardMode) {
            return clipboardMode(Output.of(clipboardMode));
        }

        /**
         * @param ec2InstanceTypes &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceTypes(Output<List<LaunchProfileStreamingInstanceType>> ec2InstanceTypes) {
            $.ec2InstanceTypes = ec2InstanceTypes;
            return this;
        }

        /**
         * @param ec2InstanceTypes &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceTypes(List<LaunchProfileStreamingInstanceType> ec2InstanceTypes) {
            return ec2InstanceTypes(Output.of(ec2InstanceTypes));
        }

        /**
         * @param ec2InstanceTypes &lt;p&gt;The EC2 instance types that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder ec2InstanceTypes(LaunchProfileStreamingInstanceType... ec2InstanceTypes) {
            return ec2InstanceTypes(List.of(ec2InstanceTypes));
        }

        /**
         * @param maxSessionLengthInMinutes &lt;p&gt;The length of time, in minutes, that a streaming session can be active before it is
         *             stopped or terminated. After this point, Nimble Studio automatically terminates or
         *             stops the session. The default length of time is 690 minutes, and the maximum length of
         *             time is 30 days.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxSessionLengthInMinutes(@Nullable Output<Double> maxSessionLengthInMinutes) {
            $.maxSessionLengthInMinutes = maxSessionLengthInMinutes;
            return this;
        }

        /**
         * @param maxSessionLengthInMinutes &lt;p&gt;The length of time, in minutes, that a streaming session can be active before it is
         *             stopped or terminated. After this point, Nimble Studio automatically terminates or
         *             stops the session. The default length of time is 690 minutes, and the maximum length of
         *             time is 30 days.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxSessionLengthInMinutes(Double maxSessionLengthInMinutes) {
            return maxSessionLengthInMinutes(Output.of(maxSessionLengthInMinutes));
        }

        /**
         * @param maxStoppedSessionLengthInMinutes &lt;p&gt;Integer that determines if you can start and stop your sessions and how long a session
         *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.&lt;/p&gt;
         *         &lt;p&gt;If the value is missing or set to 0, your sessions can’t be stopped. If you then call
         *             StopStreamingSession, the session fails. If the time that a session stays in the READY
         *             state exceeds the maxSessionLengthInMinutes value, the session will automatically be
         *             terminated by AWS (instead of stopped).&lt;/p&gt;
         *         &lt;p&gt;If the value is set to a positive number, the session can be stopped. You can call
         *             StopStreamingSession to stop sessions in the READY state. If the time that a session
         *             stays in the READY state exceeds the maxSessionLengthInMinutes value, the session will
         *             automatically be stopped by AWS (instead of terminated).&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxStoppedSessionLengthInMinutes(@Nullable Output<Double> maxStoppedSessionLengthInMinutes) {
            $.maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutes;
            return this;
        }

        /**
         * @param maxStoppedSessionLengthInMinutes &lt;p&gt;Integer that determines if you can start and stop your sessions and how long a session
         *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.&lt;/p&gt;
         *         &lt;p&gt;If the value is missing or set to 0, your sessions can’t be stopped. If you then call
         *             StopStreamingSession, the session fails. If the time that a session stays in the READY
         *             state exceeds the maxSessionLengthInMinutes value, the session will automatically be
         *             terminated by AWS (instead of stopped).&lt;/p&gt;
         *         &lt;p&gt;If the value is set to a positive number, the session can be stopped. You can call
         *             StopStreamingSession to stop sessions in the READY state. If the time that a session
         *             stays in the READY state exceeds the maxSessionLengthInMinutes value, the session will
         *             automatically be stopped by AWS (instead of terminated).&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder maxStoppedSessionLengthInMinutes(Double maxStoppedSessionLengthInMinutes) {
            return maxStoppedSessionLengthInMinutes(Output.of(maxStoppedSessionLengthInMinutes));
        }

        public Builder sessionStorage(@Nullable Output<LaunchProfileStreamConfigurationSessionStorageArgs> sessionStorage) {
            $.sessionStorage = sessionStorage;
            return this;
        }

        public Builder sessionStorage(LaunchProfileStreamConfigurationSessionStorageArgs sessionStorage) {
            return sessionStorage(Output.of(sessionStorage));
        }

        /**
         * @param streamingImageIds &lt;p&gt;The streaming images that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder streamingImageIds(Output<List<String>> streamingImageIds) {
            $.streamingImageIds = streamingImageIds;
            return this;
        }

        /**
         * @param streamingImageIds &lt;p&gt;The streaming images that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder streamingImageIds(List<String> streamingImageIds) {
            return streamingImageIds(Output.of(streamingImageIds));
        }

        /**
         * @param streamingImageIds &lt;p&gt;The streaming images that users can select from when launching a streaming session
         *             with this launch profile.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder streamingImageIds(String... streamingImageIds) {
            return streamingImageIds(List.of(streamingImageIds));
        }

        public LaunchProfileStreamConfigurationArgs build() {
            $.clipboardMode = Objects.requireNonNull($.clipboardMode, "expected parameter 'clipboardMode' to be non-null");
            $.ec2InstanceTypes = Objects.requireNonNull($.ec2InstanceTypes, "expected parameter 'ec2InstanceTypes' to be non-null");
            $.streamingImageIds = Objects.requireNonNull($.streamingImageIds, "expected parameter 'streamingImageIds' to be non-null");
            return $;
        }
    }

}
