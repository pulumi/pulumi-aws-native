// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class CidrArgs extends com.pulumi.resources.InvokeArgs {

    public static final CidrArgs Empty = new CidrArgs();

    @Import(name="cidrBits", required=true)
    private Output<Integer> cidrBits;

    public Output<Integer> cidrBits() {
        return this.cidrBits;
    }

    @Import(name="count", required=true)
    private Output<Integer> count;

    public Output<Integer> count() {
        return this.count;
    }

    @Import(name="ipBlock", required=true)
    private Output<String> ipBlock;

    public Output<String> ipBlock() {
        return this.ipBlock;
    }

    private CidrArgs() {}

    private CidrArgs(CidrArgs $) {
        this.cidrBits = $.cidrBits;
        this.count = $.count;
        this.ipBlock = $.ipBlock;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CidrArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CidrArgs $;

        public Builder() {
            $ = new CidrArgs();
        }

        public Builder(CidrArgs defaults) {
            $ = new CidrArgs(Objects.requireNonNull(defaults));
        }

        public Builder cidrBits(Output<Integer> cidrBits) {
            $.cidrBits = cidrBits;
            return this;
        }

        public Builder cidrBits(Integer cidrBits) {
            return cidrBits(Output.of(cidrBits));
        }

        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public Builder ipBlock(Output<String> ipBlock) {
            $.ipBlock = ipBlock;
            return this;
        }

        public Builder ipBlock(String ipBlock) {
            return ipBlock(Output.of(ipBlock));
        }

        public CidrArgs build() {
            $.cidrBits = Objects.requireNonNull($.cidrBits, "expected parameter 'cidrBits' to be non-null");
            $.count = Objects.requireNonNull($.count, "expected parameter 'count' to be non-null");
            $.ipBlock = Objects.requireNonNull($.ipBlock, "expected parameter 'ipBlock' to be non-null");
            return $;
        }
    }

}
