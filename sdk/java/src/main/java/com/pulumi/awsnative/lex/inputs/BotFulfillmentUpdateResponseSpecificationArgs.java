// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lex.inputs;

import com.pulumi.awsnative.lex.inputs.BotMessageGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
 * 
 */
public final class BotFulfillmentUpdateResponseSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BotFulfillmentUpdateResponseSpecificationArgs Empty = new BotFulfillmentUpdateResponseSpecificationArgs();

    /**
     * Determines whether the user can interrupt an update message while it is playing.
     * 
     */
    @Import(name="allowInterrupt")
    private @Nullable Output<Boolean> allowInterrupt;

    /**
     * @return Determines whether the user can interrupt an update message while it is playing.
     * 
     */
    public Optional<Output<Boolean>> allowInterrupt() {
        return Optional.ofNullable(this.allowInterrupt);
    }

    /**
     * The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
     * 
     */
    @Import(name="frequencyInSeconds", required=true)
    private Output<Integer> frequencyInSeconds;

    /**
     * @return The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
     * 
     */
    public Output<Integer> frequencyInSeconds() {
        return this.frequencyInSeconds;
    }

    @Import(name="messageGroups", required=true)
    private Output<List<BotMessageGroupArgs>> messageGroups;

    public Output<List<BotMessageGroupArgs>> messageGroups() {
        return this.messageGroups;
    }

    private BotFulfillmentUpdateResponseSpecificationArgs() {}

    private BotFulfillmentUpdateResponseSpecificationArgs(BotFulfillmentUpdateResponseSpecificationArgs $) {
        this.allowInterrupt = $.allowInterrupt;
        this.frequencyInSeconds = $.frequencyInSeconds;
        this.messageGroups = $.messageGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BotFulfillmentUpdateResponseSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BotFulfillmentUpdateResponseSpecificationArgs $;

        public Builder() {
            $ = new BotFulfillmentUpdateResponseSpecificationArgs();
        }

        public Builder(BotFulfillmentUpdateResponseSpecificationArgs defaults) {
            $ = new BotFulfillmentUpdateResponseSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInterrupt Determines whether the user can interrupt an update message while it is playing.
         * 
         * @return builder
         * 
         */
        public Builder allowInterrupt(@Nullable Output<Boolean> allowInterrupt) {
            $.allowInterrupt = allowInterrupt;
            return this;
        }

        /**
         * @param allowInterrupt Determines whether the user can interrupt an update message while it is playing.
         * 
         * @return builder
         * 
         */
        public Builder allowInterrupt(Boolean allowInterrupt) {
            return allowInterrupt(Output.of(allowInterrupt));
        }

        /**
         * @param frequencyInSeconds The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
         * 
         * @return builder
         * 
         */
        public Builder frequencyInSeconds(Output<Integer> frequencyInSeconds) {
            $.frequencyInSeconds = frequencyInSeconds;
            return this;
        }

        /**
         * @param frequencyInSeconds The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
         * 
         * @return builder
         * 
         */
        public Builder frequencyInSeconds(Integer frequencyInSeconds) {
            return frequencyInSeconds(Output.of(frequencyInSeconds));
        }

        public Builder messageGroups(Output<List<BotMessageGroupArgs>> messageGroups) {
            $.messageGroups = messageGroups;
            return this;
        }

        public Builder messageGroups(List<BotMessageGroupArgs> messageGroups) {
            return messageGroups(Output.of(messageGroups));
        }

        public Builder messageGroups(BotMessageGroupArgs... messageGroups) {
            return messageGroups(List.of(messageGroups));
        }

        public BotFulfillmentUpdateResponseSpecificationArgs build() {
            $.frequencyInSeconds = Objects.requireNonNull($.frequencyInSeconds, "expected parameter 'frequencyInSeconds' to be non-null");
            $.messageGroups = Objects.requireNonNull($.messageGroups, "expected parameter 'messageGroups' to be non-null");
            return $;
        }
    }

}
