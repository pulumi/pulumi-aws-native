// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationStreamSelectionStreamOrder;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A StreamSelection configuration.
 * 
 */
public final class PackagingConfigurationStreamSelectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackagingConfigurationStreamSelectionArgs Empty = new PackagingConfigurationStreamSelectionArgs();

    /**
     * The maximum video bitrate (bps) to include in output.
     * 
     */
    @Import(name="maxVideoBitsPerSecond")
    private @Nullable Output<Integer> maxVideoBitsPerSecond;

    /**
     * @return The maximum video bitrate (bps) to include in output.
     * 
     */
    public Optional<Output<Integer>> maxVideoBitsPerSecond() {
        return Optional.ofNullable(this.maxVideoBitsPerSecond);
    }

    /**
     * The minimum video bitrate (bps) to include in output.
     * 
     */
    @Import(name="minVideoBitsPerSecond")
    private @Nullable Output<Integer> minVideoBitsPerSecond;

    /**
     * @return The minimum video bitrate (bps) to include in output.
     * 
     */
    public Optional<Output<Integer>> minVideoBitsPerSecond() {
        return Optional.ofNullable(this.minVideoBitsPerSecond);
    }

    /**
     * A directive that determines the order of streams in the output.
     * 
     */
    @Import(name="streamOrder")
    private @Nullable Output<PackagingConfigurationStreamSelectionStreamOrder> streamOrder;

    /**
     * @return A directive that determines the order of streams in the output.
     * 
     */
    public Optional<Output<PackagingConfigurationStreamSelectionStreamOrder>> streamOrder() {
        return Optional.ofNullable(this.streamOrder);
    }

    private PackagingConfigurationStreamSelectionArgs() {}

    private PackagingConfigurationStreamSelectionArgs(PackagingConfigurationStreamSelectionArgs $) {
        this.maxVideoBitsPerSecond = $.maxVideoBitsPerSecond;
        this.minVideoBitsPerSecond = $.minVideoBitsPerSecond;
        this.streamOrder = $.streamOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackagingConfigurationStreamSelectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackagingConfigurationStreamSelectionArgs $;

        public Builder() {
            $ = new PackagingConfigurationStreamSelectionArgs();
        }

        public Builder(PackagingConfigurationStreamSelectionArgs defaults) {
            $ = new PackagingConfigurationStreamSelectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxVideoBitsPerSecond The maximum video bitrate (bps) to include in output.
         * 
         * @return builder
         * 
         */
        public Builder maxVideoBitsPerSecond(@Nullable Output<Integer> maxVideoBitsPerSecond) {
            $.maxVideoBitsPerSecond = maxVideoBitsPerSecond;
            return this;
        }

        /**
         * @param maxVideoBitsPerSecond The maximum video bitrate (bps) to include in output.
         * 
         * @return builder
         * 
         */
        public Builder maxVideoBitsPerSecond(Integer maxVideoBitsPerSecond) {
            return maxVideoBitsPerSecond(Output.of(maxVideoBitsPerSecond));
        }

        /**
         * @param minVideoBitsPerSecond The minimum video bitrate (bps) to include in output.
         * 
         * @return builder
         * 
         */
        public Builder minVideoBitsPerSecond(@Nullable Output<Integer> minVideoBitsPerSecond) {
            $.minVideoBitsPerSecond = minVideoBitsPerSecond;
            return this;
        }

        /**
         * @param minVideoBitsPerSecond The minimum video bitrate (bps) to include in output.
         * 
         * @return builder
         * 
         */
        public Builder minVideoBitsPerSecond(Integer minVideoBitsPerSecond) {
            return minVideoBitsPerSecond(Output.of(minVideoBitsPerSecond));
        }

        /**
         * @param streamOrder A directive that determines the order of streams in the output.
         * 
         * @return builder
         * 
         */
        public Builder streamOrder(@Nullable Output<PackagingConfigurationStreamSelectionStreamOrder> streamOrder) {
            $.streamOrder = streamOrder;
            return this;
        }

        /**
         * @param streamOrder A directive that determines the order of streams in the output.
         * 
         * @return builder
         * 
         */
        public Builder streamOrder(PackagingConfigurationStreamSelectionStreamOrder streamOrder) {
            return streamOrder(Output.of(streamOrder));
        }

        public PackagingConfigurationStreamSelectionArgs build() {
            return $;
        }
    }

}
