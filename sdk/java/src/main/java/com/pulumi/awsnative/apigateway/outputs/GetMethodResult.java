// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.outputs;

import com.pulumi.awsnative.apigateway.enums.MethodAuthorizationType;
import com.pulumi.awsnative.apigateway.outputs.MethodIntegration;
import com.pulumi.awsnative.apigateway.outputs.MethodResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMethodResult {
    /**
     * @return Indicates whether the method requires clients to submit a valid API key.
     * 
     */
    private @Nullable Boolean apiKeyRequired;
    /**
     * @return A list of authorization scopes configured on the method.
     * 
     */
    private @Nullable List<String> authorizationScopes;
    /**
     * @return The method&#39;s authorization type.
     * 
     */
    private @Nullable MethodAuthorizationType authorizationType;
    /**
     * @return The identifier of the authorizer to use on this method.
     * 
     */
    private @Nullable String authorizerId;
    /**
     * @return The backend system that the method calls when it receives a request.
     * 
     */
    private @Nullable MethodIntegration integration;
    /**
     * @return The responses that can be sent to the client who calls the method.
     * 
     */
    private @Nullable List<MethodResponse> methodResponses;
    /**
     * @return A friendly operation name for the method.
     * 
     */
    private @Nullable String operationName;
    /**
     * @return The resources that are used for the request&#39;s content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
     * 
     */
    private @Nullable Object requestModels;
    /**
     * @return The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
     * 
     */
    private @Nullable Object requestParameters;
    /**
     * @return The ID of the associated request validator.
     * 
     */
    private @Nullable String requestValidatorId;

    private GetMethodResult() {}
    /**
     * @return Indicates whether the method requires clients to submit a valid API key.
     * 
     */
    public Optional<Boolean> apiKeyRequired() {
        return Optional.ofNullable(this.apiKeyRequired);
    }
    /**
     * @return A list of authorization scopes configured on the method.
     * 
     */
    public List<String> authorizationScopes() {
        return this.authorizationScopes == null ? List.of() : this.authorizationScopes;
    }
    /**
     * @return The method&#39;s authorization type.
     * 
     */
    public Optional<MethodAuthorizationType> authorizationType() {
        return Optional.ofNullable(this.authorizationType);
    }
    /**
     * @return The identifier of the authorizer to use on this method.
     * 
     */
    public Optional<String> authorizerId() {
        return Optional.ofNullable(this.authorizerId);
    }
    /**
     * @return The backend system that the method calls when it receives a request.
     * 
     */
    public Optional<MethodIntegration> integration() {
        return Optional.ofNullable(this.integration);
    }
    /**
     * @return The responses that can be sent to the client who calls the method.
     * 
     */
    public List<MethodResponse> methodResponses() {
        return this.methodResponses == null ? List.of() : this.methodResponses;
    }
    /**
     * @return A friendly operation name for the method.
     * 
     */
    public Optional<String> operationName() {
        return Optional.ofNullable(this.operationName);
    }
    /**
     * @return The resources that are used for the request&#39;s content type. Specify request models as key-value pairs (string-to-string mapping), with a content type as the key and a Model resource name as the value.
     * 
     */
    public Optional<Object> requestModels() {
        return Optional.ofNullable(this.requestModels);
    }
    /**
     * @return The request parameters that API Gateway accepts. Specify request parameters as key-value pairs (string-to-Boolean mapping), with a source as the key and a Boolean as the value.
     * 
     */
    public Optional<Object> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }
    /**
     * @return The ID of the associated request validator.
     * 
     */
    public Optional<String> requestValidatorId() {
        return Optional.ofNullable(this.requestValidatorId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMethodResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean apiKeyRequired;
        private @Nullable List<String> authorizationScopes;
        private @Nullable MethodAuthorizationType authorizationType;
        private @Nullable String authorizerId;
        private @Nullable MethodIntegration integration;
        private @Nullable List<MethodResponse> methodResponses;
        private @Nullable String operationName;
        private @Nullable Object requestModels;
        private @Nullable Object requestParameters;
        private @Nullable String requestValidatorId;
        public Builder() {}
        public Builder(GetMethodResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKeyRequired = defaults.apiKeyRequired;
    	      this.authorizationScopes = defaults.authorizationScopes;
    	      this.authorizationType = defaults.authorizationType;
    	      this.authorizerId = defaults.authorizerId;
    	      this.integration = defaults.integration;
    	      this.methodResponses = defaults.methodResponses;
    	      this.operationName = defaults.operationName;
    	      this.requestModels = defaults.requestModels;
    	      this.requestParameters = defaults.requestParameters;
    	      this.requestValidatorId = defaults.requestValidatorId;
        }

        @CustomType.Setter
        public Builder apiKeyRequired(@Nullable Boolean apiKeyRequired) {
            this.apiKeyRequired = apiKeyRequired;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationScopes(@Nullable List<String> authorizationScopes) {
            this.authorizationScopes = authorizationScopes;
            return this;
        }
        public Builder authorizationScopes(String... authorizationScopes) {
            return authorizationScopes(List.of(authorizationScopes));
        }
        @CustomType.Setter
        public Builder authorizationType(@Nullable MethodAuthorizationType authorizationType) {
            this.authorizationType = authorizationType;
            return this;
        }
        @CustomType.Setter
        public Builder authorizerId(@Nullable String authorizerId) {
            this.authorizerId = authorizerId;
            return this;
        }
        @CustomType.Setter
        public Builder integration(@Nullable MethodIntegration integration) {
            this.integration = integration;
            return this;
        }
        @CustomType.Setter
        public Builder methodResponses(@Nullable List<MethodResponse> methodResponses) {
            this.methodResponses = methodResponses;
            return this;
        }
        public Builder methodResponses(MethodResponse... methodResponses) {
            return methodResponses(List.of(methodResponses));
        }
        @CustomType.Setter
        public Builder operationName(@Nullable String operationName) {
            this.operationName = operationName;
            return this;
        }
        @CustomType.Setter
        public Builder requestModels(@Nullable Object requestModels) {
            this.requestModels = requestModels;
            return this;
        }
        @CustomType.Setter
        public Builder requestParameters(@Nullable Object requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }
        @CustomType.Setter
        public Builder requestValidatorId(@Nullable String requestValidatorId) {
            this.requestValidatorId = requestValidatorId;
            return this;
        }
        public GetMethodResult build() {
            final var o = new GetMethodResult();
            o.apiKeyRequired = apiKeyRequired;
            o.authorizationScopes = authorizationScopes;
            o.authorizationType = authorizationType;
            o.authorizerId = authorizerId;
            o.integration = integration;
            o.methodResponses = methodResponses;
            o.operationName = operationName;
            o.requestModels = requestModels;
            o.requestParameters = requestParameters;
            o.requestValidatorId = requestValidatorId;
            return o;
        }
    }
}
