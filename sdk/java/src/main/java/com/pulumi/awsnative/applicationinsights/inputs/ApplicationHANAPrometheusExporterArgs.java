// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.applicationinsights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The HANA DB Prometheus Exporter settings.
 * 
 */
public final class ApplicationHANAPrometheusExporterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationHANAPrometheusExporterArgs Empty = new ApplicationHANAPrometheusExporterArgs();

    /**
     * A flag which indicates agreeing to install SAP HANA DB client.
     * 
     */
    @Import(name="agreeToInstallHANADBClient", required=true)
    private Output<Boolean> agreeToInstallHANADBClient;

    /**
     * @return A flag which indicates agreeing to install SAP HANA DB client.
     * 
     */
    public Output<Boolean> agreeToInstallHANADBClient() {
        return this.agreeToInstallHANADBClient;
    }

    /**
     * The HANA DB port.
     * 
     */
    @Import(name="hANAPort", required=true)
    private Output<String> hANAPort;

    /**
     * @return The HANA DB port.
     * 
     */
    public Output<String> hANAPort() {
        return this.hANAPort;
    }

    /**
     * HANA DB SID.
     * 
     */
    @Import(name="hANASID", required=true)
    private Output<String> hANASID;

    /**
     * @return HANA DB SID.
     * 
     */
    public Output<String> hANASID() {
        return this.hANASID;
    }

    /**
     * The secret name which manages the HANA DB credentials e.g. {
     *   &#34;username&#34;: &#34;&lt;&gt;&#34;,
     *   &#34;password&#34;: &#34;&lt;&gt;&#34;
     * }.
     * 
     */
    @Import(name="hANASecretName", required=true)
    private Output<String> hANASecretName;

    /**
     * @return The secret name which manages the HANA DB credentials e.g. {
     *   &#34;username&#34;: &#34;&lt;&gt;&#34;,
     *   &#34;password&#34;: &#34;&lt;&gt;&#34;
     * }.
     * 
     */
    public Output<String> hANASecretName() {
        return this.hANASecretName;
    }

    /**
     * Prometheus exporter port.
     * 
     */
    @Import(name="prometheusPort")
    private @Nullable Output<String> prometheusPort;

    /**
     * @return Prometheus exporter port.
     * 
     */
    public Optional<Output<String>> prometheusPort() {
        return Optional.ofNullable(this.prometheusPort);
    }

    private ApplicationHANAPrometheusExporterArgs() {}

    private ApplicationHANAPrometheusExporterArgs(ApplicationHANAPrometheusExporterArgs $) {
        this.agreeToInstallHANADBClient = $.agreeToInstallHANADBClient;
        this.hANAPort = $.hANAPort;
        this.hANASID = $.hANASID;
        this.hANASecretName = $.hANASecretName;
        this.prometheusPort = $.prometheusPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationHANAPrometheusExporterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationHANAPrometheusExporterArgs $;

        public Builder() {
            $ = new ApplicationHANAPrometheusExporterArgs();
        }

        public Builder(ApplicationHANAPrometheusExporterArgs defaults) {
            $ = new ApplicationHANAPrometheusExporterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agreeToInstallHANADBClient A flag which indicates agreeing to install SAP HANA DB client.
         * 
         * @return builder
         * 
         */
        public Builder agreeToInstallHANADBClient(Output<Boolean> agreeToInstallHANADBClient) {
            $.agreeToInstallHANADBClient = agreeToInstallHANADBClient;
            return this;
        }

        /**
         * @param agreeToInstallHANADBClient A flag which indicates agreeing to install SAP HANA DB client.
         * 
         * @return builder
         * 
         */
        public Builder agreeToInstallHANADBClient(Boolean agreeToInstallHANADBClient) {
            return agreeToInstallHANADBClient(Output.of(agreeToInstallHANADBClient));
        }

        /**
         * @param hANAPort The HANA DB port.
         * 
         * @return builder
         * 
         */
        public Builder hANAPort(Output<String> hANAPort) {
            $.hANAPort = hANAPort;
            return this;
        }

        /**
         * @param hANAPort The HANA DB port.
         * 
         * @return builder
         * 
         */
        public Builder hANAPort(String hANAPort) {
            return hANAPort(Output.of(hANAPort));
        }

        /**
         * @param hANASID HANA DB SID.
         * 
         * @return builder
         * 
         */
        public Builder hANASID(Output<String> hANASID) {
            $.hANASID = hANASID;
            return this;
        }

        /**
         * @param hANASID HANA DB SID.
         * 
         * @return builder
         * 
         */
        public Builder hANASID(String hANASID) {
            return hANASID(Output.of(hANASID));
        }

        /**
         * @param hANASecretName The secret name which manages the HANA DB credentials e.g. {
         *   &#34;username&#34;: &#34;&lt;&gt;&#34;,
         *   &#34;password&#34;: &#34;&lt;&gt;&#34;
         * }.
         * 
         * @return builder
         * 
         */
        public Builder hANASecretName(Output<String> hANASecretName) {
            $.hANASecretName = hANASecretName;
            return this;
        }

        /**
         * @param hANASecretName The secret name which manages the HANA DB credentials e.g. {
         *   &#34;username&#34;: &#34;&lt;&gt;&#34;,
         *   &#34;password&#34;: &#34;&lt;&gt;&#34;
         * }.
         * 
         * @return builder
         * 
         */
        public Builder hANASecretName(String hANASecretName) {
            return hANASecretName(Output.of(hANASecretName));
        }

        /**
         * @param prometheusPort Prometheus exporter port.
         * 
         * @return builder
         * 
         */
        public Builder prometheusPort(@Nullable Output<String> prometheusPort) {
            $.prometheusPort = prometheusPort;
            return this;
        }

        /**
         * @param prometheusPort Prometheus exporter port.
         * 
         * @return builder
         * 
         */
        public Builder prometheusPort(String prometheusPort) {
            return prometheusPort(Output.of(prometheusPort));
        }

        public ApplicationHANAPrometheusExporterArgs build() {
            $.agreeToInstallHANADBClient = Objects.requireNonNull($.agreeToInstallHANADBClient, "expected parameter 'agreeToInstallHANADBClient' to be non-null");
            $.hANAPort = Objects.requireNonNull($.hANAPort, "expected parameter 'hANAPort' to be non-null");
            $.hANASID = Objects.requireNonNull($.hANASID, "expected parameter 'hANASID' to be non-null");
            $.hANASecretName = Objects.requireNonNull($.hANASecretName, "expected parameter 'hANASecretName' to be non-null");
            return $;
        }
    }

}
