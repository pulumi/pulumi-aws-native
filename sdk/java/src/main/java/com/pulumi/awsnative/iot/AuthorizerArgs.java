// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot;

import com.pulumi.awsnative.iot.enums.AuthorizerStatus;
import com.pulumi.awsnative.iot.inputs.AuthorizerTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizerArgs Empty = new AuthorizerArgs();

    @Import(name="authorizerFunctionArn", required=true)
    private Output<String> authorizerFunctionArn;

    public Output<String> authorizerFunctionArn() {
        return this.authorizerFunctionArn;
    }

    @Import(name="authorizerName")
    private @Nullable Output<String> authorizerName;

    public Optional<Output<String>> authorizerName() {
        return Optional.ofNullable(this.authorizerName);
    }

    @Import(name="enableCachingForHttp")
    private @Nullable Output<Boolean> enableCachingForHttp;

    public Optional<Output<Boolean>> enableCachingForHttp() {
        return Optional.ofNullable(this.enableCachingForHttp);
    }

    @Import(name="signingDisabled")
    private @Nullable Output<Boolean> signingDisabled;

    public Optional<Output<Boolean>> signingDisabled() {
        return Optional.ofNullable(this.signingDisabled);
    }

    @Import(name="status")
    private @Nullable Output<AuthorizerStatus> status;

    public Optional<Output<AuthorizerStatus>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<AuthorizerTagArgs>> tags;

    public Optional<Output<List<AuthorizerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="tokenKeyName")
    private @Nullable Output<String> tokenKeyName;

    public Optional<Output<String>> tokenKeyName() {
        return Optional.ofNullable(this.tokenKeyName);
    }

    @Import(name="tokenSigningPublicKeys")
    private @Nullable Output<Object> tokenSigningPublicKeys;

    public Optional<Output<Object>> tokenSigningPublicKeys() {
        return Optional.ofNullable(this.tokenSigningPublicKeys);
    }

    private AuthorizerArgs() {}

    private AuthorizerArgs(AuthorizerArgs $) {
        this.authorizerFunctionArn = $.authorizerFunctionArn;
        this.authorizerName = $.authorizerName;
        this.enableCachingForHttp = $.enableCachingForHttp;
        this.signingDisabled = $.signingDisabled;
        this.status = $.status;
        this.tags = $.tags;
        this.tokenKeyName = $.tokenKeyName;
        this.tokenSigningPublicKeys = $.tokenSigningPublicKeys;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizerArgs $;

        public Builder() {
            $ = new AuthorizerArgs();
        }

        public Builder(AuthorizerArgs defaults) {
            $ = new AuthorizerArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorizerFunctionArn(Output<String> authorizerFunctionArn) {
            $.authorizerFunctionArn = authorizerFunctionArn;
            return this;
        }

        public Builder authorizerFunctionArn(String authorizerFunctionArn) {
            return authorizerFunctionArn(Output.of(authorizerFunctionArn));
        }

        public Builder authorizerName(@Nullable Output<String> authorizerName) {
            $.authorizerName = authorizerName;
            return this;
        }

        public Builder authorizerName(String authorizerName) {
            return authorizerName(Output.of(authorizerName));
        }

        public Builder enableCachingForHttp(@Nullable Output<Boolean> enableCachingForHttp) {
            $.enableCachingForHttp = enableCachingForHttp;
            return this;
        }

        public Builder enableCachingForHttp(Boolean enableCachingForHttp) {
            return enableCachingForHttp(Output.of(enableCachingForHttp));
        }

        public Builder signingDisabled(@Nullable Output<Boolean> signingDisabled) {
            $.signingDisabled = signingDisabled;
            return this;
        }

        public Builder signingDisabled(Boolean signingDisabled) {
            return signingDisabled(Output.of(signingDisabled));
        }

        public Builder status(@Nullable Output<AuthorizerStatus> status) {
            $.status = status;
            return this;
        }

        public Builder status(AuthorizerStatus status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<AuthorizerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<AuthorizerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(AuthorizerTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder tokenKeyName(@Nullable Output<String> tokenKeyName) {
            $.tokenKeyName = tokenKeyName;
            return this;
        }

        public Builder tokenKeyName(String tokenKeyName) {
            return tokenKeyName(Output.of(tokenKeyName));
        }

        public Builder tokenSigningPublicKeys(@Nullable Output<Object> tokenSigningPublicKeys) {
            $.tokenSigningPublicKeys = tokenSigningPublicKeys;
            return this;
        }

        public Builder tokenSigningPublicKeys(Object tokenSigningPublicKeys) {
            return tokenSigningPublicKeys(Output.of(tokenSigningPublicKeys));
        }

        public AuthorizerArgs build() {
            $.authorizerFunctionArn = Objects.requireNonNull($.authorizerFunctionArn, "expected parameter 'authorizerFunctionArn' to be non-null");
            return $;
        }
    }

}
