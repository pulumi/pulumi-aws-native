// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.configuration;

import com.pulumi.awsnative.configuration.inputs.ConfigurationAggregatorAccountAggregationSourceArgs;
import com.pulumi.awsnative.configuration.inputs.ConfigurationAggregatorOrganizationAggregationSourceArgs;
import com.pulumi.awsnative.configuration.inputs.ConfigurationAggregatorTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationAggregatorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationAggregatorArgs Empty = new ConfigurationAggregatorArgs();

    @Import(name="accountAggregationSources")
    private @Nullable Output<List<ConfigurationAggregatorAccountAggregationSourceArgs>> accountAggregationSources;

    public Optional<Output<List<ConfigurationAggregatorAccountAggregationSourceArgs>>> accountAggregationSources() {
        return Optional.ofNullable(this.accountAggregationSources);
    }

    /**
     * The name of the aggregator.
     * 
     */
    @Import(name="configurationAggregatorName")
    private @Nullable Output<String> configurationAggregatorName;

    /**
     * @return The name of the aggregator.
     * 
     */
    public Optional<Output<String>> configurationAggregatorName() {
        return Optional.ofNullable(this.configurationAggregatorName);
    }

    @Import(name="organizationAggregationSource")
    private @Nullable Output<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource;

    public Optional<Output<ConfigurationAggregatorOrganizationAggregationSourceArgs>> organizationAggregationSource() {
        return Optional.ofNullable(this.organizationAggregationSource);
    }

    /**
     * The tags for the configuration aggregator.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ConfigurationAggregatorTagArgs>> tags;

    /**
     * @return The tags for the configuration aggregator.
     * 
     */
    public Optional<Output<List<ConfigurationAggregatorTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConfigurationAggregatorArgs() {}

    private ConfigurationAggregatorArgs(ConfigurationAggregatorArgs $) {
        this.accountAggregationSources = $.accountAggregationSources;
        this.configurationAggregatorName = $.configurationAggregatorName;
        this.organizationAggregationSource = $.organizationAggregationSource;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationAggregatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationAggregatorArgs $;

        public Builder() {
            $ = new ConfigurationAggregatorArgs();
        }

        public Builder(ConfigurationAggregatorArgs defaults) {
            $ = new ConfigurationAggregatorArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountAggregationSources(@Nullable Output<List<ConfigurationAggregatorAccountAggregationSourceArgs>> accountAggregationSources) {
            $.accountAggregationSources = accountAggregationSources;
            return this;
        }

        public Builder accountAggregationSources(List<ConfigurationAggregatorAccountAggregationSourceArgs> accountAggregationSources) {
            return accountAggregationSources(Output.of(accountAggregationSources));
        }

        public Builder accountAggregationSources(ConfigurationAggregatorAccountAggregationSourceArgs... accountAggregationSources) {
            return accountAggregationSources(List.of(accountAggregationSources));
        }

        /**
         * @param configurationAggregatorName The name of the aggregator.
         * 
         * @return builder
         * 
         */
        public Builder configurationAggregatorName(@Nullable Output<String> configurationAggregatorName) {
            $.configurationAggregatorName = configurationAggregatorName;
            return this;
        }

        /**
         * @param configurationAggregatorName The name of the aggregator.
         * 
         * @return builder
         * 
         */
        public Builder configurationAggregatorName(String configurationAggregatorName) {
            return configurationAggregatorName(Output.of(configurationAggregatorName));
        }

        public Builder organizationAggregationSource(@Nullable Output<ConfigurationAggregatorOrganizationAggregationSourceArgs> organizationAggregationSource) {
            $.organizationAggregationSource = organizationAggregationSource;
            return this;
        }

        public Builder organizationAggregationSource(ConfigurationAggregatorOrganizationAggregationSourceArgs organizationAggregationSource) {
            return organizationAggregationSource(Output.of(organizationAggregationSource));
        }

        /**
         * @param tags The tags for the configuration aggregator.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ConfigurationAggregatorTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags for the configuration aggregator.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ConfigurationAggregatorTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags for the configuration aggregator.
         * 
         * @return builder
         * 
         */
        public Builder tags(ConfigurationAggregatorTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ConfigurationAggregatorArgs build() {
            return $;
        }
    }

}
