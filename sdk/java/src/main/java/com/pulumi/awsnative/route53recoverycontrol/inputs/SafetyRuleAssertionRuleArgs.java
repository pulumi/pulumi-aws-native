// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53recoverycontrol.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
 * 
 */
public final class SafetyRuleAssertionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SafetyRuleAssertionRuleArgs Empty = new SafetyRuleAssertionRuleArgs();

    /**
     * The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
     * 
     */
    @Import(name="assertedControls", required=true)
    private Output<List<String>> assertedControls;

    /**
     * @return The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
     * 
     */
    public Output<List<String>> assertedControls() {
        return this.assertedControls;
    }

    /**
     * An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
     * 
     */
    @Import(name="waitPeriodMs", required=true)
    private Output<Integer> waitPeriodMs;

    /**
     * @return An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
     * 
     */
    public Output<Integer> waitPeriodMs() {
        return this.waitPeriodMs;
    }

    private SafetyRuleAssertionRuleArgs() {}

    private SafetyRuleAssertionRuleArgs(SafetyRuleAssertionRuleArgs $) {
        this.assertedControls = $.assertedControls;
        this.waitPeriodMs = $.waitPeriodMs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SafetyRuleAssertionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SafetyRuleAssertionRuleArgs $;

        public Builder() {
            $ = new SafetyRuleAssertionRuleArgs();
        }

        public Builder(SafetyRuleAssertionRuleArgs defaults) {
            $ = new SafetyRuleAssertionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assertedControls The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
         * 
         * @return builder
         * 
         */
        public Builder assertedControls(Output<List<String>> assertedControls) {
            $.assertedControls = assertedControls;
            return this;
        }

        /**
         * @param assertedControls The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
         * 
         * @return builder
         * 
         */
        public Builder assertedControls(List<String> assertedControls) {
            return assertedControls(Output.of(assertedControls));
        }

        /**
         * @param assertedControls The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
         * 
         * @return builder
         * 
         */
        public Builder assertedControls(String... assertedControls) {
            return assertedControls(List.of(assertedControls));
        }

        /**
         * @param waitPeriodMs An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
         * 
         * @return builder
         * 
         */
        public Builder waitPeriodMs(Output<Integer> waitPeriodMs) {
            $.waitPeriodMs = waitPeriodMs;
            return this;
        }

        /**
         * @param waitPeriodMs An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent &#34;flapping&#34; of state. The wait period is 5000 ms by default, but you can choose a custom value.
         * 
         * @return builder
         * 
         */
        public Builder waitPeriodMs(Integer waitPeriodMs) {
            return waitPeriodMs(Output.of(waitPeriodMs));
        }

        public SafetyRuleAssertionRuleArgs build() {
            $.assertedControls = Objects.requireNonNull($.assertedControls, "expected parameter 'assertedControls' to be non-null");
            $.waitPeriodMs = Objects.requireNonNull($.waitPeriodMs, "expected parameter 'waitPeriodMs' to be non-null");
            return $;
        }
    }

}
