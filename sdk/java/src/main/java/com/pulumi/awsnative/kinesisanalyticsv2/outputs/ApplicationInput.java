// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.outputs;

import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationInputParallelism;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationInputProcessingConfiguration;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationInputSchema;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationKinesisFirehoseInput;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationKinesisStreamsInput;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationInput {
    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    private @Nullable ApplicationInputParallelism inputParallelism;
    /**
     * @return The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
     * 
     */
    private @Nullable ApplicationInputProcessingConfiguration inputProcessingConfiguration;
    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    private ApplicationInputSchema inputSchema;
    /**
     * @return If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    private @Nullable ApplicationKinesisFirehoseInput kinesisFirehoseInput;
    /**
     * @return If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    private @Nullable ApplicationKinesisStreamsInput kinesisStreamsInput;
    /**
     * @return The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
     * 
     */
    private String namePrefix;

    private ApplicationInput() {}
    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    public Optional<ApplicationInputParallelism> inputParallelism() {
        return Optional.ofNullable(this.inputParallelism);
    }
    /**
     * @return The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
     * 
     */
    public Optional<ApplicationInputProcessingConfiguration> inputProcessingConfiguration() {
        return Optional.ofNullable(this.inputProcessingConfiguration);
    }
    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    public ApplicationInputSchema inputSchema() {
        return this.inputSchema;
    }
    /**
     * @return If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    public Optional<ApplicationKinesisFirehoseInput> kinesisFirehoseInput() {
        return Optional.ofNullable(this.kinesisFirehoseInput);
    }
    /**
     * @return If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    public Optional<ApplicationKinesisStreamsInput> kinesisStreamsInput() {
        return Optional.ofNullable(this.kinesisStreamsInput);
    }
    /**
     * @return The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
     * 
     */
    public String namePrefix() {
        return this.namePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ApplicationInputParallelism inputParallelism;
        private @Nullable ApplicationInputProcessingConfiguration inputProcessingConfiguration;
        private ApplicationInputSchema inputSchema;
        private @Nullable ApplicationKinesisFirehoseInput kinesisFirehoseInput;
        private @Nullable ApplicationKinesisStreamsInput kinesisStreamsInput;
        private String namePrefix;
        public Builder() {}
        public Builder(ApplicationInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputParallelism = defaults.inputParallelism;
    	      this.inputProcessingConfiguration = defaults.inputProcessingConfiguration;
    	      this.inputSchema = defaults.inputSchema;
    	      this.kinesisFirehoseInput = defaults.kinesisFirehoseInput;
    	      this.kinesisStreamsInput = defaults.kinesisStreamsInput;
    	      this.namePrefix = defaults.namePrefix;
        }

        @CustomType.Setter
        public Builder inputParallelism(@Nullable ApplicationInputParallelism inputParallelism) {
            this.inputParallelism = inputParallelism;
            return this;
        }
        @CustomType.Setter
        public Builder inputProcessingConfiguration(@Nullable ApplicationInputProcessingConfiguration inputProcessingConfiguration) {
            this.inputProcessingConfiguration = inputProcessingConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder inputSchema(ApplicationInputSchema inputSchema) {
            this.inputSchema = Objects.requireNonNull(inputSchema);
            return this;
        }
        @CustomType.Setter
        public Builder kinesisFirehoseInput(@Nullable ApplicationKinesisFirehoseInput kinesisFirehoseInput) {
            this.kinesisFirehoseInput = kinesisFirehoseInput;
            return this;
        }
        @CustomType.Setter
        public Builder kinesisStreamsInput(@Nullable ApplicationKinesisStreamsInput kinesisStreamsInput) {
            this.kinesisStreamsInput = kinesisStreamsInput;
            return this;
        }
        @CustomType.Setter
        public Builder namePrefix(String namePrefix) {
            this.namePrefix = Objects.requireNonNull(namePrefix);
            return this;
        }
        public ApplicationInput build() {
            final var o = new ApplicationInput();
            o.inputParallelism = inputParallelism;
            o.inputProcessingConfiguration = inputProcessingConfiguration;
            o.inputSchema = inputSchema;
            o.kinesisFirehoseInput = kinesisFirehoseInput;
            o.kinesisStreamsInput = kinesisStreamsInput;
            o.namePrefix = namePrefix;
            return o;
        }
    }
}
