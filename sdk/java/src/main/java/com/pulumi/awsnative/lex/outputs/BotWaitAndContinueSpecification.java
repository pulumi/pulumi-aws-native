// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lex.outputs;

import com.pulumi.awsnative.lex.outputs.BotResponseSpecification;
import com.pulumi.awsnative.lex.outputs.BotStillWaitingResponseSpecification;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BotWaitAndContinueSpecification {
    /**
     * @return The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
     * 
     */
    private BotResponseSpecification continueResponse;
    /**
     * @return Specifies whether the bot will wait for a user to respond.
     * 
     */
    private @Nullable Boolean isActive;
    /**
     * @return The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
     * 
     */
    private @Nullable BotStillWaitingResponseSpecification stillWaitingResponse;
    /**
     * @return The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
     * 
     */
    private BotResponseSpecification waitingResponse;

    private BotWaitAndContinueSpecification() {}
    /**
     * @return The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
     * 
     */
    public BotResponseSpecification continueResponse() {
        return this.continueResponse;
    }
    /**
     * @return Specifies whether the bot will wait for a user to respond.
     * 
     */
    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }
    /**
     * @return The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
     * 
     */
    public Optional<BotStillWaitingResponseSpecification> stillWaitingResponse() {
        return Optional.ofNullable(this.stillWaitingResponse);
    }
    /**
     * @return The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
     * 
     */
    public BotResponseSpecification waitingResponse() {
        return this.waitingResponse;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BotWaitAndContinueSpecification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private BotResponseSpecification continueResponse;
        private @Nullable Boolean isActive;
        private @Nullable BotStillWaitingResponseSpecification stillWaitingResponse;
        private BotResponseSpecification waitingResponse;
        public Builder() {}
        public Builder(BotWaitAndContinueSpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.continueResponse = defaults.continueResponse;
    	      this.isActive = defaults.isActive;
    	      this.stillWaitingResponse = defaults.stillWaitingResponse;
    	      this.waitingResponse = defaults.waitingResponse;
        }

        @CustomType.Setter
        public Builder continueResponse(BotResponseSpecification continueResponse) {
            this.continueResponse = Objects.requireNonNull(continueResponse);
            return this;
        }
        @CustomType.Setter
        public Builder isActive(@Nullable Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder stillWaitingResponse(@Nullable BotStillWaitingResponseSpecification stillWaitingResponse) {
            this.stillWaitingResponse = stillWaitingResponse;
            return this;
        }
        @CustomType.Setter
        public Builder waitingResponse(BotResponseSpecification waitingResponse) {
            this.waitingResponse = Objects.requireNonNull(waitingResponse);
            return this;
        }
        public BotWaitAndContinueSpecification build() {
            final var o = new BotWaitAndContinueSpecification();
            o.continueResponse = continueResponse;
            o.isActive = isActive;
            o.stillWaitingResponse = stillWaitingResponse;
            o.waitingResponse = waitingResponse;
            return o;
        }
    }
}
