// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.outputs;

import com.pulumi.awsnative.quicksight.enums.DataSetImportMode;
import com.pulumi.awsnative.quicksight.outputs.DataSetColumnGroup;
import com.pulumi.awsnative.quicksight.outputs.DataSetColumnLevelPermissionRule;
import com.pulumi.awsnative.quicksight.outputs.DataSetLogicalTableMap;
import com.pulumi.awsnative.quicksight.outputs.DataSetOutputColumn;
import com.pulumi.awsnative.quicksight.outputs.DataSetPhysicalTableMap;
import com.pulumi.awsnative.quicksight.outputs.DataSetResourcePermission;
import com.pulumi.awsnative.quicksight.outputs.DataSetRowLevelPermissionDataSet;
import com.pulumi.awsnative.quicksight.outputs.DataSetTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSetResult {
    /**
     * @return &lt;p&gt;The Amazon Resource Name (ARN) of the resource.&lt;/p&gt;
     * 
     */
    private @Nullable String arn;
    /**
     * @return &lt;p&gt;Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSetColumnGroup> columnGroups;
    private @Nullable List<DataSetColumnLevelPermissionRule> columnLevelPermissionRules;
    /**
     * @return &lt;p&gt;The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn&#39;t
     *             imported into SPICE.&lt;/p&gt;
     * 
     */
    private @Nullable Double consumedSpiceCapacityInBytes;
    /**
     * @return &lt;p&gt;The time that this dataset was created.&lt;/p&gt;
     * 
     */
    private @Nullable String createdTime;
    private @Nullable DataSetImportMode importMode;
    /**
     * @return &lt;p&gt;The last time that this dataset was updated.&lt;/p&gt;
     * 
     */
    private @Nullable String lastUpdatedTime;
    private @Nullable DataSetLogicalTableMap logicalTableMap;
    /**
     * @return &lt;p&gt;The display name for the dataset.&lt;/p&gt;
     * 
     */
    private @Nullable String name;
    /**
     * @return &lt;p&gt;The list of columns after all transforms. These columns are available in templates,
     *             analyses, and dashboards.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSetOutputColumn> outputColumns;
    /**
     * @return &lt;p&gt;A list of resource permissions on the dataset.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSetResourcePermission> permissions;
    private @Nullable DataSetPhysicalTableMap physicalTableMap;
    private @Nullable DataSetRowLevelPermissionDataSet rowLevelPermissionDataSet;
    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSetTag> tags;

    private GetDataSetResult() {}
    /**
     * @return &lt;p&gt;The Amazon Resource Name (ARN) of the resource.&lt;/p&gt;
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return &lt;p&gt;Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.&lt;/p&gt;
     * 
     */
    public List<DataSetColumnGroup> columnGroups() {
        return this.columnGroups == null ? List.of() : this.columnGroups;
    }
    public List<DataSetColumnLevelPermissionRule> columnLevelPermissionRules() {
        return this.columnLevelPermissionRules == null ? List.of() : this.columnLevelPermissionRules;
    }
    /**
     * @return &lt;p&gt;The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn&#39;t
     *             imported into SPICE.&lt;/p&gt;
     * 
     */
    public Optional<Double> consumedSpiceCapacityInBytes() {
        return Optional.ofNullable(this.consumedSpiceCapacityInBytes);
    }
    /**
     * @return &lt;p&gt;The time that this dataset was created.&lt;/p&gt;
     * 
     */
    public Optional<String> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }
    public Optional<DataSetImportMode> importMode() {
        return Optional.ofNullable(this.importMode);
    }
    /**
     * @return &lt;p&gt;The last time that this dataset was updated.&lt;/p&gt;
     * 
     */
    public Optional<String> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }
    public Optional<DataSetLogicalTableMap> logicalTableMap() {
        return Optional.ofNullable(this.logicalTableMap);
    }
    /**
     * @return &lt;p&gt;The display name for the dataset.&lt;/p&gt;
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return &lt;p&gt;The list of columns after all transforms. These columns are available in templates,
     *             analyses, and dashboards.&lt;/p&gt;
     * 
     */
    public List<DataSetOutputColumn> outputColumns() {
        return this.outputColumns == null ? List.of() : this.outputColumns;
    }
    /**
     * @return &lt;p&gt;A list of resource permissions on the dataset.&lt;/p&gt;
     * 
     */
    public List<DataSetResourcePermission> permissions() {
        return this.permissions == null ? List.of() : this.permissions;
    }
    public Optional<DataSetPhysicalTableMap> physicalTableMap() {
        return Optional.ofNullable(this.physicalTableMap);
    }
    public Optional<DataSetRowLevelPermissionDataSet> rowLevelPermissionDataSet() {
        return Optional.ofNullable(this.rowLevelPermissionDataSet);
    }
    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.&lt;/p&gt;
     * 
     */
    public List<DataSetTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable List<DataSetColumnGroup> columnGroups;
        private @Nullable List<DataSetColumnLevelPermissionRule> columnLevelPermissionRules;
        private @Nullable Double consumedSpiceCapacityInBytes;
        private @Nullable String createdTime;
        private @Nullable DataSetImportMode importMode;
        private @Nullable String lastUpdatedTime;
        private @Nullable DataSetLogicalTableMap logicalTableMap;
        private @Nullable String name;
        private @Nullable List<DataSetOutputColumn> outputColumns;
        private @Nullable List<DataSetResourcePermission> permissions;
        private @Nullable DataSetPhysicalTableMap physicalTableMap;
        private @Nullable DataSetRowLevelPermissionDataSet rowLevelPermissionDataSet;
        private @Nullable List<DataSetTag> tags;
        public Builder() {}
        public Builder(GetDataSetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.columnGroups = defaults.columnGroups;
    	      this.columnLevelPermissionRules = defaults.columnLevelPermissionRules;
    	      this.consumedSpiceCapacityInBytes = defaults.consumedSpiceCapacityInBytes;
    	      this.createdTime = defaults.createdTime;
    	      this.importMode = defaults.importMode;
    	      this.lastUpdatedTime = defaults.lastUpdatedTime;
    	      this.logicalTableMap = defaults.logicalTableMap;
    	      this.name = defaults.name;
    	      this.outputColumns = defaults.outputColumns;
    	      this.permissions = defaults.permissions;
    	      this.physicalTableMap = defaults.physicalTableMap;
    	      this.rowLevelPermissionDataSet = defaults.rowLevelPermissionDataSet;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder columnGroups(@Nullable List<DataSetColumnGroup> columnGroups) {
            this.columnGroups = columnGroups;
            return this;
        }
        public Builder columnGroups(DataSetColumnGroup... columnGroups) {
            return columnGroups(List.of(columnGroups));
        }
        @CustomType.Setter
        public Builder columnLevelPermissionRules(@Nullable List<DataSetColumnLevelPermissionRule> columnLevelPermissionRules) {
            this.columnLevelPermissionRules = columnLevelPermissionRules;
            return this;
        }
        public Builder columnLevelPermissionRules(DataSetColumnLevelPermissionRule... columnLevelPermissionRules) {
            return columnLevelPermissionRules(List.of(columnLevelPermissionRules));
        }
        @CustomType.Setter
        public Builder consumedSpiceCapacityInBytes(@Nullable Double consumedSpiceCapacityInBytes) {
            this.consumedSpiceCapacityInBytes = consumedSpiceCapacityInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(@Nullable String createdTime) {
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder importMode(@Nullable DataSetImportMode importMode) {
            this.importMode = importMode;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedTime(@Nullable String lastUpdatedTime) {
            this.lastUpdatedTime = lastUpdatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder logicalTableMap(@Nullable DataSetLogicalTableMap logicalTableMap) {
            this.logicalTableMap = logicalTableMap;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder outputColumns(@Nullable List<DataSetOutputColumn> outputColumns) {
            this.outputColumns = outputColumns;
            return this;
        }
        public Builder outputColumns(DataSetOutputColumn... outputColumns) {
            return outputColumns(List.of(outputColumns));
        }
        @CustomType.Setter
        public Builder permissions(@Nullable List<DataSetResourcePermission> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(DataSetResourcePermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder physicalTableMap(@Nullable DataSetPhysicalTableMap physicalTableMap) {
            this.physicalTableMap = physicalTableMap;
            return this;
        }
        @CustomType.Setter
        public Builder rowLevelPermissionDataSet(@Nullable DataSetRowLevelPermissionDataSet rowLevelPermissionDataSet) {
            this.rowLevelPermissionDataSet = rowLevelPermissionDataSet;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DataSetTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DataSetTag... tags) {
            return tags(List.of(tags));
        }
        public GetDataSetResult build() {
            final var o = new GetDataSetResult();
            o.arn = arn;
            o.columnGroups = columnGroups;
            o.columnLevelPermissionRules = columnLevelPermissionRules;
            o.consumedSpiceCapacityInBytes = consumedSpiceCapacityInBytes;
            o.createdTime = createdTime;
            o.importMode = importMode;
            o.lastUpdatedTime = lastUpdatedTime;
            o.logicalTableMap = logicalTableMap;
            o.name = name;
            o.outputColumns = outputColumns;
            o.permissions = permissions;
            o.physicalTableMap = physicalTableMap;
            o.rowLevelPermissionDataSet = rowLevelPermissionDataSet;
            o.tags = tags;
            return o;
        }
    }
}
