// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.customerprofiles.inputs;

import com.pulumi.awsnative.customerprofiles.enums.ObjectTypeKeyStandardIdentifiersItem;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
 * 
 */
public final class ObjectTypeKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectTypeKeyArgs Empty = new ObjectTypeKeyArgs();

    /**
     * The reference for the key name of the fields map.
     * 
     */
    @Import(name="fieldNames")
    private @Nullable Output<List<String>> fieldNames;

    /**
     * @return The reference for the key name of the fields map.
     * 
     */
    public Optional<Output<List<String>>> fieldNames() {
        return Optional.ofNullable(this.fieldNames);
    }

    /**
     * The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
     * 
     */
    @Import(name="standardIdentifiers")
    private @Nullable Output<List<ObjectTypeKeyStandardIdentifiersItem>> standardIdentifiers;

    /**
     * @return The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
     * 
     */
    public Optional<Output<List<ObjectTypeKeyStandardIdentifiersItem>>> standardIdentifiers() {
        return Optional.ofNullable(this.standardIdentifiers);
    }

    private ObjectTypeKeyArgs() {}

    private ObjectTypeKeyArgs(ObjectTypeKeyArgs $) {
        this.fieldNames = $.fieldNames;
        this.standardIdentifiers = $.standardIdentifiers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectTypeKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectTypeKeyArgs $;

        public Builder() {
            $ = new ObjectTypeKeyArgs();
        }

        public Builder(ObjectTypeKeyArgs defaults) {
            $ = new ObjectTypeKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fieldNames The reference for the key name of the fields map.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(@Nullable Output<List<String>> fieldNames) {
            $.fieldNames = fieldNames;
            return this;
        }

        /**
         * @param fieldNames The reference for the key name of the fields map.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(List<String> fieldNames) {
            return fieldNames(Output.of(fieldNames));
        }

        /**
         * @param fieldNames The reference for the key name of the fields map.
         * 
         * @return builder
         * 
         */
        public Builder fieldNames(String... fieldNames) {
            return fieldNames(List.of(fieldNames));
        }

        /**
         * @param standardIdentifiers The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
         * 
         * @return builder
         * 
         */
        public Builder standardIdentifiers(@Nullable Output<List<ObjectTypeKeyStandardIdentifiersItem>> standardIdentifiers) {
            $.standardIdentifiers = standardIdentifiers;
            return this;
        }

        /**
         * @param standardIdentifiers The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
         * 
         * @return builder
         * 
         */
        public Builder standardIdentifiers(List<ObjectTypeKeyStandardIdentifiersItem> standardIdentifiers) {
            return standardIdentifiers(Output.of(standardIdentifiers));
        }

        /**
         * @param standardIdentifiers The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
         * 
         * @return builder
         * 
         */
        public Builder standardIdentifiers(ObjectTypeKeyStandardIdentifiersItem... standardIdentifiers) {
            return standardIdentifiers(List.of(standardIdentifiers));
        }

        public ObjectTypeKeyArgs build() {
            return $;
        }
    }

}
