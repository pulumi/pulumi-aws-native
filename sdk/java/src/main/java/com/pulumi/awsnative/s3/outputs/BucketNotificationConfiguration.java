// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.outputs;

import com.pulumi.awsnative.s3.outputs.BucketEventBridgeConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketLambdaConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketQueueConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketTopicConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketNotificationConfiguration {
    private @Nullable BucketEventBridgeConfiguration eventBridgeConfiguration;
    private @Nullable List<BucketLambdaConfiguration> lambdaConfigurations;
    private @Nullable List<BucketQueueConfiguration> queueConfigurations;
    private @Nullable List<BucketTopicConfiguration> topicConfigurations;

    private BucketNotificationConfiguration() {}
    public Optional<BucketEventBridgeConfiguration> eventBridgeConfiguration() {
        return Optional.ofNullable(this.eventBridgeConfiguration);
    }
    public List<BucketLambdaConfiguration> lambdaConfigurations() {
        return this.lambdaConfigurations == null ? List.of() : this.lambdaConfigurations;
    }
    public List<BucketQueueConfiguration> queueConfigurations() {
        return this.queueConfigurations == null ? List.of() : this.queueConfigurations;
    }
    public List<BucketTopicConfiguration> topicConfigurations() {
        return this.topicConfigurations == null ? List.of() : this.topicConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketNotificationConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BucketEventBridgeConfiguration eventBridgeConfiguration;
        private @Nullable List<BucketLambdaConfiguration> lambdaConfigurations;
        private @Nullable List<BucketQueueConfiguration> queueConfigurations;
        private @Nullable List<BucketTopicConfiguration> topicConfigurations;
        public Builder() {}
        public Builder(BucketNotificationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventBridgeConfiguration = defaults.eventBridgeConfiguration;
    	      this.lambdaConfigurations = defaults.lambdaConfigurations;
    	      this.queueConfigurations = defaults.queueConfigurations;
    	      this.topicConfigurations = defaults.topicConfigurations;
        }

        @CustomType.Setter
        public Builder eventBridgeConfiguration(@Nullable BucketEventBridgeConfiguration eventBridgeConfiguration) {
            this.eventBridgeConfiguration = eventBridgeConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder lambdaConfigurations(@Nullable List<BucketLambdaConfiguration> lambdaConfigurations) {
            this.lambdaConfigurations = lambdaConfigurations;
            return this;
        }
        public Builder lambdaConfigurations(BucketLambdaConfiguration... lambdaConfigurations) {
            return lambdaConfigurations(List.of(lambdaConfigurations));
        }
        @CustomType.Setter
        public Builder queueConfigurations(@Nullable List<BucketQueueConfiguration> queueConfigurations) {
            this.queueConfigurations = queueConfigurations;
            return this;
        }
        public Builder queueConfigurations(BucketQueueConfiguration... queueConfigurations) {
            return queueConfigurations(List.of(queueConfigurations));
        }
        @CustomType.Setter
        public Builder topicConfigurations(@Nullable List<BucketTopicConfiguration> topicConfigurations) {
            this.topicConfigurations = topicConfigurations;
            return this;
        }
        public Builder topicConfigurations(BucketTopicConfiguration... topicConfigurations) {
            return topicConfigurations(List.of(topicConfigurations));
        }
        public BucketNotificationConfiguration build() {
            final var o = new BucketNotificationConfiguration();
            o.eventBridgeConfiguration = eventBridgeConfiguration;
            o.lambdaConfigurations = lambdaConfigurations;
            o.queueConfigurations = queueConfigurations;
            o.topicConfigurations = topicConfigurations;
            return o;
        }
    }
}
