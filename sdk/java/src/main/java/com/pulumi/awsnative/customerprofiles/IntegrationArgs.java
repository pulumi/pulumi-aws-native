// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.customerprofiles;

import com.pulumi.awsnative.customerprofiles.inputs.IntegrationFlowDefinitionArgs;
import com.pulumi.awsnative.customerprofiles.inputs.IntegrationObjectTypeMappingArgs;
import com.pulumi.awsnative.customerprofiles.inputs.IntegrationTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationArgs Empty = new IntegrationArgs();

    /**
     * The unique name of the domain.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The unique name of the domain.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    @Import(name="flowDefinition")
    private @Nullable Output<IntegrationFlowDefinitionArgs> flowDefinition;

    public Optional<Output<IntegrationFlowDefinitionArgs>> flowDefinition() {
        return Optional.ofNullable(this.flowDefinition);
    }

    /**
     * The name of the ObjectType defined for the 3rd party data in Profile Service
     * 
     */
    @Import(name="objectTypeName")
    private @Nullable Output<String> objectTypeName;

    /**
     * @return The name of the ObjectType defined for the 3rd party data in Profile Service
     * 
     */
    public Optional<Output<String>> objectTypeName() {
        return Optional.ofNullable(this.objectTypeName);
    }

    /**
     * The mapping between 3rd party event types and ObjectType names
     * 
     */
    @Import(name="objectTypeNames")
    private @Nullable Output<List<IntegrationObjectTypeMappingArgs>> objectTypeNames;

    /**
     * @return The mapping between 3rd party event types and ObjectType names
     * 
     */
    public Optional<Output<List<IntegrationObjectTypeMappingArgs>>> objectTypeNames() {
        return Optional.ofNullable(this.objectTypeNames);
    }

    /**
     * The tags (keys and values) associated with the integration
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<IntegrationTagArgs>> tags;

    /**
     * @return The tags (keys and values) associated with the integration
     * 
     */
    public Optional<Output<List<IntegrationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The URI of the S3 bucket or any other type of data source.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The URI of the S3 bucket or any other type of data source.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private IntegrationArgs() {}

    private IntegrationArgs(IntegrationArgs $) {
        this.domainName = $.domainName;
        this.flowDefinition = $.flowDefinition;
        this.objectTypeName = $.objectTypeName;
        this.objectTypeNames = $.objectTypeNames;
        this.tags = $.tags;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationArgs $;

        public Builder() {
            $ = new IntegrationArgs();
        }

        public Builder(IntegrationArgs defaults) {
            $ = new IntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName The unique name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The unique name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder flowDefinition(@Nullable Output<IntegrationFlowDefinitionArgs> flowDefinition) {
            $.flowDefinition = flowDefinition;
            return this;
        }

        public Builder flowDefinition(IntegrationFlowDefinitionArgs flowDefinition) {
            return flowDefinition(Output.of(flowDefinition));
        }

        /**
         * @param objectTypeName The name of the ObjectType defined for the 3rd party data in Profile Service
         * 
         * @return builder
         * 
         */
        public Builder objectTypeName(@Nullable Output<String> objectTypeName) {
            $.objectTypeName = objectTypeName;
            return this;
        }

        /**
         * @param objectTypeName The name of the ObjectType defined for the 3rd party data in Profile Service
         * 
         * @return builder
         * 
         */
        public Builder objectTypeName(String objectTypeName) {
            return objectTypeName(Output.of(objectTypeName));
        }

        /**
         * @param objectTypeNames The mapping between 3rd party event types and ObjectType names
         * 
         * @return builder
         * 
         */
        public Builder objectTypeNames(@Nullable Output<List<IntegrationObjectTypeMappingArgs>> objectTypeNames) {
            $.objectTypeNames = objectTypeNames;
            return this;
        }

        /**
         * @param objectTypeNames The mapping between 3rd party event types and ObjectType names
         * 
         * @return builder
         * 
         */
        public Builder objectTypeNames(List<IntegrationObjectTypeMappingArgs> objectTypeNames) {
            return objectTypeNames(Output.of(objectTypeNames));
        }

        /**
         * @param objectTypeNames The mapping between 3rd party event types and ObjectType names
         * 
         * @return builder
         * 
         */
        public Builder objectTypeNames(IntegrationObjectTypeMappingArgs... objectTypeNames) {
            return objectTypeNames(List.of(objectTypeNames));
        }

        /**
         * @param tags The tags (keys and values) associated with the integration
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<IntegrationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags (keys and values) associated with the integration
         * 
         * @return builder
         * 
         */
        public Builder tags(List<IntegrationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags (keys and values) associated with the integration
         * 
         * @return builder
         * 
         */
        public Builder tags(IntegrationTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param uri The URI of the S3 bucket or any other type of data source.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI of the S3 bucket or any other type of data source.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public IntegrationArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            return $;
        }
    }

}
