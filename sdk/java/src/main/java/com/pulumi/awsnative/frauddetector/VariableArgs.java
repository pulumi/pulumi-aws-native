// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.frauddetector;

import com.pulumi.awsnative.frauddetector.enums.VariableDataSource;
import com.pulumi.awsnative.frauddetector.enums.VariableDataType;
import com.pulumi.awsnative.frauddetector.enums.VariableType;
import com.pulumi.awsnative.frauddetector.inputs.VariableTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final VariableArgs Empty = new VariableArgs();

    /**
     * The source of the data.
     * 
     */
    @Import(name="dataSource", required=true)
    private Output<VariableDataSource> dataSource;

    /**
     * @return The source of the data.
     * 
     */
    public Output<VariableDataSource> dataSource() {
        return this.dataSource;
    }

    /**
     * The data type.
     * 
     */
    @Import(name="dataType", required=true)
    private Output<VariableDataType> dataType;

    /**
     * @return The data type.
     * 
     */
    public Output<VariableDataType> dataType() {
        return this.dataType;
    }

    /**
     * The default value for the variable when no value is received.
     * 
     */
    @Import(name="defaultValue", required=true)
    private Output<String> defaultValue;

    /**
     * @return The default value for the variable when no value is received.
     * 
     */
    public Output<String> defaultValue() {
        return this.defaultValue;
    }

    /**
     * The description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the variable.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the variable.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tags associated with this variable.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VariableTagArgs>> tags;

    /**
     * @return Tags associated with this variable.
     * 
     */
    public Optional<Output<List<VariableTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The variable type. For more information see https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types
     * 
     */
    @Import(name="variableType")
    private @Nullable Output<VariableType> variableType;

    /**
     * @return The variable type. For more information see https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types
     * 
     */
    public Optional<Output<VariableType>> variableType() {
        return Optional.ofNullable(this.variableType);
    }

    private VariableArgs() {}

    private VariableArgs(VariableArgs $) {
        this.dataSource = $.dataSource;
        this.dataType = $.dataType;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.name = $.name;
        this.tags = $.tags;
        this.variableType = $.variableType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VariableArgs $;

        public Builder() {
            $ = new VariableArgs();
        }

        public Builder(VariableArgs defaults) {
            $ = new VariableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSource The source of the data.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(Output<VariableDataSource> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource The source of the data.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(VariableDataSource dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param dataType The data type.
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<VariableDataType> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type.
         * 
         * @return builder
         * 
         */
        public Builder dataType(VariableDataType dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param defaultValue The default value for the variable when no value is received.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue The default value for the variable when no value is received.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the variable.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Tags associated with this variable.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VariableTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with this variable.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VariableTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with this variable.
         * 
         * @return builder
         * 
         */
        public Builder tags(VariableTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param variableType The variable type. For more information see https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types
         * 
         * @return builder
         * 
         */
        public Builder variableType(@Nullable Output<VariableType> variableType) {
            $.variableType = variableType;
            return this;
        }

        /**
         * @param variableType The variable type. For more information see https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types
         * 
         * @return builder
         * 
         */
        public Builder variableType(VariableType variableType) {
            return variableType(Output.of(variableType));
        }

        public VariableArgs build() {
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            $.dataType = Objects.requireNonNull($.dataType, "expected parameter 'dataType' to be non-null");
            $.defaultValue = Objects.requireNonNull($.defaultValue, "expected parameter 'defaultValue' to be non-null");
            return $;
        }
    }

}
