// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.emrcontainers;

import com.pulumi.awsnative.emrcontainers.inputs.VirtualClusterContainerProviderArgs;
import com.pulumi.awsnative.emrcontainers.inputs.VirtualClusterTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualClusterArgs Empty = new VirtualClusterArgs();

    /**
     * Container provider of the virtual cluster.
     * 
     */
    @Import(name="containerProvider", required=true)
    private Output<VirtualClusterContainerProviderArgs> containerProvider;

    /**
     * @return Container provider of the virtual cluster.
     * 
     */
    public Output<VirtualClusterContainerProviderArgs> containerProvider() {
        return this.containerProvider;
    }

    /**
     * Name of the virtual cluster.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the virtual cluster.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * An array of key-value pairs to apply to this virtual cluster.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VirtualClusterTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this virtual cluster.
     * 
     */
    public Optional<Output<List<VirtualClusterTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VirtualClusterArgs() {}

    private VirtualClusterArgs(VirtualClusterArgs $) {
        this.containerProvider = $.containerProvider;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualClusterArgs $;

        public Builder() {
            $ = new VirtualClusterArgs();
        }

        public Builder(VirtualClusterArgs defaults) {
            $ = new VirtualClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerProvider Container provider of the virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder containerProvider(Output<VirtualClusterContainerProviderArgs> containerProvider) {
            $.containerProvider = containerProvider;
            return this;
        }

        /**
         * @param containerProvider Container provider of the virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder containerProvider(VirtualClusterContainerProviderArgs containerProvider) {
            return containerProvider(Output.of(containerProvider));
        }

        /**
         * @param name Name of the virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags An array of key-value pairs to apply to this virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VirtualClusterTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VirtualClusterTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this virtual cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(VirtualClusterTagArgs... tags) {
            return tags(List.of(tags));
        }

        public VirtualClusterArgs build() {
            $.containerProvider = Objects.requireNonNull($.containerProvider, "expected parameter 'containerProvider' to be non-null");
            return $;
        }
    }

}
