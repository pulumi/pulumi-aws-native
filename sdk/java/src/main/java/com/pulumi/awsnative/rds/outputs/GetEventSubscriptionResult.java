// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.rds.outputs;

import com.pulumi.awsnative.rds.enums.EventSubscriptionSourceType;
import com.pulumi.awsnative.rds.outputs.EventSubscriptionTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEventSubscriptionResult {
    /**
     * @return A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
     * 
     */
    private @Nullable List<String> eventCategories;
    /**
     * @return The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     * 
     */
    private @Nullable List<String> sourceIds;
    /**
     * @return The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
     * 
     */
    private @Nullable EventSubscriptionSourceType sourceType;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<EventSubscriptionTag> tags;

    private GetEventSubscriptionResult() {}
    /**
     * @return A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
     * 
     */
    public List<String> eventCategories() {
        return this.eventCategories == null ? List.of() : this.eventCategories;
    }
    /**
     * @return The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     * 
     */
    public List<String> sourceIds() {
        return this.sourceIds == null ? List.of() : this.sourceIds;
    }
    /**
     * @return The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
     * 
     */
    public Optional<EventSubscriptionSourceType> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<EventSubscriptionTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable List<String> eventCategories;
        private @Nullable List<String> sourceIds;
        private @Nullable EventSubscriptionSourceType sourceType;
        private @Nullable List<EventSubscriptionTag> tags;
        public Builder() {}
        public Builder(GetEventSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.eventCategories = defaults.eventCategories;
    	      this.sourceIds = defaults.sourceIds;
    	      this.sourceType = defaults.sourceType;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder eventCategories(@Nullable List<String> eventCategories) {
            this.eventCategories = eventCategories;
            return this;
        }
        public Builder eventCategories(String... eventCategories) {
            return eventCategories(List.of(eventCategories));
        }
        @CustomType.Setter
        public Builder sourceIds(@Nullable List<String> sourceIds) {
            this.sourceIds = sourceIds;
            return this;
        }
        public Builder sourceIds(String... sourceIds) {
            return sourceIds(List.of(sourceIds));
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable EventSubscriptionSourceType sourceType) {
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<EventSubscriptionTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(EventSubscriptionTag... tags) {
            return tags(List.of(tags));
        }
        public GetEventSubscriptionResult build() {
            final var o = new GetEventSubscriptionResult();
            o.enabled = enabled;
            o.eventCategories = eventCategories;
            o.sourceIds = sourceIds;
            o.sourceType = sourceType;
            o.tags = tags;
            return o;
        }
    }
}
