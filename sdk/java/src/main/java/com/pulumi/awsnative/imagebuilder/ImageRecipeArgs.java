// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.imagebuilder;

import com.pulumi.awsnative.imagebuilder.inputs.ImageRecipeAdditionalInstanceConfigurationArgs;
import com.pulumi.awsnative.imagebuilder.inputs.ImageRecipeComponentConfigurationArgs;
import com.pulumi.awsnative.imagebuilder.inputs.ImageRecipeInstanceBlockDeviceMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageRecipeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageRecipeArgs Empty = new ImageRecipeArgs();

    /**
     * Specify additional settings and launch scripts for your build instances.
     * 
     */
    @Import(name="additionalInstanceConfiguration")
    private @Nullable Output<ImageRecipeAdditionalInstanceConfigurationArgs> additionalInstanceConfiguration;

    /**
     * @return Specify additional settings and launch scripts for your build instances.
     * 
     */
    public Optional<Output<ImageRecipeAdditionalInstanceConfigurationArgs>> additionalInstanceConfiguration() {
        return Optional.ofNullable(this.additionalInstanceConfiguration);
    }

    /**
     * The block device mappings to apply when creating images from this recipe.
     * 
     */
    @Import(name="blockDeviceMappings")
    private @Nullable Output<List<ImageRecipeInstanceBlockDeviceMappingArgs>> blockDeviceMappings;

    /**
     * @return The block device mappings to apply when creating images from this recipe.
     * 
     */
    public Optional<Output<List<ImageRecipeInstanceBlockDeviceMappingArgs>>> blockDeviceMappings() {
        return Optional.ofNullable(this.blockDeviceMappings);
    }

    /**
     * The components of the image recipe.
     * 
     */
    @Import(name="components", required=true)
    private Output<List<ImageRecipeComponentConfigurationArgs>> components;

    /**
     * @return The components of the image recipe.
     * 
     */
    public Output<List<ImageRecipeComponentConfigurationArgs>> components() {
        return this.components;
    }

    /**
     * The description of the image recipe.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the image recipe.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the image recipe.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the image recipe.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent image of the image recipe.
     * 
     */
    @Import(name="parentImage", required=true)
    private Output<String> parentImage;

    /**
     * @return The parent image of the image recipe.
     * 
     */
    public Output<String> parentImage() {
        return this.parentImage;
    }

    /**
     * The tags of the image recipe.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return The tags of the image recipe.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The version of the image recipe.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The version of the image recipe.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     * The working directory to be used during build and test workflows.
     * 
     */
    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    /**
     * @return The working directory to be used during build and test workflows.
     * 
     */
    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    private ImageRecipeArgs() {}

    private ImageRecipeArgs(ImageRecipeArgs $) {
        this.additionalInstanceConfiguration = $.additionalInstanceConfiguration;
        this.blockDeviceMappings = $.blockDeviceMappings;
        this.components = $.components;
        this.description = $.description;
        this.name = $.name;
        this.parentImage = $.parentImage;
        this.tags = $.tags;
        this.version = $.version;
        this.workingDirectory = $.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageRecipeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageRecipeArgs $;

        public Builder() {
            $ = new ImageRecipeArgs();
        }

        public Builder(ImageRecipeArgs defaults) {
            $ = new ImageRecipeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalInstanceConfiguration Specify additional settings and launch scripts for your build instances.
         * 
         * @return builder
         * 
         */
        public Builder additionalInstanceConfiguration(@Nullable Output<ImageRecipeAdditionalInstanceConfigurationArgs> additionalInstanceConfiguration) {
            $.additionalInstanceConfiguration = additionalInstanceConfiguration;
            return this;
        }

        /**
         * @param additionalInstanceConfiguration Specify additional settings and launch scripts for your build instances.
         * 
         * @return builder
         * 
         */
        public Builder additionalInstanceConfiguration(ImageRecipeAdditionalInstanceConfigurationArgs additionalInstanceConfiguration) {
            return additionalInstanceConfiguration(Output.of(additionalInstanceConfiguration));
        }

        /**
         * @param blockDeviceMappings The block device mappings to apply when creating images from this recipe.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(@Nullable Output<List<ImageRecipeInstanceBlockDeviceMappingArgs>> blockDeviceMappings) {
            $.blockDeviceMappings = blockDeviceMappings;
            return this;
        }

        /**
         * @param blockDeviceMappings The block device mappings to apply when creating images from this recipe.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(List<ImageRecipeInstanceBlockDeviceMappingArgs> blockDeviceMappings) {
            return blockDeviceMappings(Output.of(blockDeviceMappings));
        }

        /**
         * @param blockDeviceMappings The block device mappings to apply when creating images from this recipe.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(ImageRecipeInstanceBlockDeviceMappingArgs... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }

        /**
         * @param components The components of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder components(Output<List<ImageRecipeComponentConfigurationArgs>> components) {
            $.components = components;
            return this;
        }

        /**
         * @param components The components of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder components(List<ImageRecipeComponentConfigurationArgs> components) {
            return components(Output.of(components));
        }

        /**
         * @param components The components of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder components(ImageRecipeComponentConfigurationArgs... components) {
            return components(List.of(components));
        }

        /**
         * @param description The description of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentImage The parent image of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder parentImage(Output<String> parentImage) {
            $.parentImage = parentImage;
            return this;
        }

        /**
         * @param parentImage The parent image of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder parentImage(String parentImage) {
            return parentImage(Output.of(parentImage));
        }

        /**
         * @param tags The tags of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param version The version of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the image recipe.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param workingDirectory The working directory to be used during build and test workflows.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        /**
         * @param workingDirectory The working directory to be used during build and test workflows.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        public ImageRecipeArgs build() {
            $.components = Objects.requireNonNull($.components, "expected parameter 'components' to be non-null");
            $.parentImage = Objects.requireNonNull($.parentImage, "expected parameter 'parentImage' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
