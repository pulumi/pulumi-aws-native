// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.outputs;

import com.pulumi.awsnative.apigateway.enums.MethodIntegrationConnectionType;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationContentHandling;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationPassthroughBehavior;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationType;
import com.pulumi.awsnative.apigateway.outputs.MethodIntegrationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MethodIntegration {
    /**
     * @return A list of request parameters whose values API Gateway caches.
     * 
     */
    private @Nullable List<String> cacheKeyParameters;
    /**
     * @return An API-specific tag group of related cached parameters.
     * 
     */
    private @Nullable String cacheNamespace;
    /**
     * @return The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    private @Nullable String connectionId;
    /**
     * @return The type of the network connection to the integration endpoint.
     * 
     */
    private @Nullable MethodIntegrationConnectionType connectionType;
    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    private @Nullable MethodIntegrationContentHandling contentHandling;
    /**
     * @return The credentials that are required for the integration.
     * 
     */
    private @Nullable String credentials;
    /**
     * @return The integration&#39;s HTTP method type.
     * 
     */
    private @Nullable String integrationHttpMethod;
    /**
     * @return The response that API Gateway provides after a method&#39;s backend completes processing a request.
     * 
     */
    private @Nullable List<MethodIntegrationResponse> integrationResponses;
    /**
     * @return Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    private @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior;
    /**
     * @return The request parameters that API Gateway sends with the backend request.
     * 
     */
    private @Nullable Object requestParameters;
    /**
     * @return A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    private @Nullable Object requestTemplates;
    /**
     * @return Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    private @Nullable Integer timeoutInMillis;
    /**
     * @return The type of backend that your method is running.
     * 
     */
    private MethodIntegrationType type;
    /**
     * @return The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    private @Nullable String uri;

    private MethodIntegration() {}
    /**
     * @return A list of request parameters whose values API Gateway caches.
     * 
     */
    public List<String> cacheKeyParameters() {
        return this.cacheKeyParameters == null ? List.of() : this.cacheKeyParameters;
    }
    /**
     * @return An API-specific tag group of related cached parameters.
     * 
     */
    public Optional<String> cacheNamespace() {
        return Optional.ofNullable(this.cacheNamespace);
    }
    /**
     * @return The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    public Optional<String> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }
    /**
     * @return The type of the network connection to the integration endpoint.
     * 
     */
    public Optional<MethodIntegrationConnectionType> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    public Optional<MethodIntegrationContentHandling> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }
    /**
     * @return The credentials that are required for the integration.
     * 
     */
    public Optional<String> credentials() {
        return Optional.ofNullable(this.credentials);
    }
    /**
     * @return The integration&#39;s HTTP method type.
     * 
     */
    public Optional<String> integrationHttpMethod() {
        return Optional.ofNullable(this.integrationHttpMethod);
    }
    /**
     * @return The response that API Gateway provides after a method&#39;s backend completes processing a request.
     * 
     */
    public List<MethodIntegrationResponse> integrationResponses() {
        return this.integrationResponses == null ? List.of() : this.integrationResponses;
    }
    /**
     * @return Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    public Optional<MethodIntegrationPassthroughBehavior> passthroughBehavior() {
        return Optional.ofNullable(this.passthroughBehavior);
    }
    /**
     * @return The request parameters that API Gateway sends with the backend request.
     * 
     */
    public Optional<Object> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }
    /**
     * @return A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    public Optional<Object> requestTemplates() {
        return Optional.ofNullable(this.requestTemplates);
    }
    /**
     * @return Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    public Optional<Integer> timeoutInMillis() {
        return Optional.ofNullable(this.timeoutInMillis);
    }
    /**
     * @return The type of backend that your method is running.
     * 
     */
    public MethodIntegrationType type() {
        return this.type;
    }
    /**
     * @return The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MethodIntegration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> cacheKeyParameters;
        private @Nullable String cacheNamespace;
        private @Nullable String connectionId;
        private @Nullable MethodIntegrationConnectionType connectionType;
        private @Nullable MethodIntegrationContentHandling contentHandling;
        private @Nullable String credentials;
        private @Nullable String integrationHttpMethod;
        private @Nullable List<MethodIntegrationResponse> integrationResponses;
        private @Nullable MethodIntegrationPassthroughBehavior passthroughBehavior;
        private @Nullable Object requestParameters;
        private @Nullable Object requestTemplates;
        private @Nullable Integer timeoutInMillis;
        private MethodIntegrationType type;
        private @Nullable String uri;
        public Builder() {}
        public Builder(MethodIntegration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheKeyParameters = defaults.cacheKeyParameters;
    	      this.cacheNamespace = defaults.cacheNamespace;
    	      this.connectionId = defaults.connectionId;
    	      this.connectionType = defaults.connectionType;
    	      this.contentHandling = defaults.contentHandling;
    	      this.credentials = defaults.credentials;
    	      this.integrationHttpMethod = defaults.integrationHttpMethod;
    	      this.integrationResponses = defaults.integrationResponses;
    	      this.passthroughBehavior = defaults.passthroughBehavior;
    	      this.requestParameters = defaults.requestParameters;
    	      this.requestTemplates = defaults.requestTemplates;
    	      this.timeoutInMillis = defaults.timeoutInMillis;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder cacheKeyParameters(@Nullable List<String> cacheKeyParameters) {
            this.cacheKeyParameters = cacheKeyParameters;
            return this;
        }
        public Builder cacheKeyParameters(String... cacheKeyParameters) {
            return cacheKeyParameters(List.of(cacheKeyParameters));
        }
        @CustomType.Setter
        public Builder cacheNamespace(@Nullable String cacheNamespace) {
            this.cacheNamespace = cacheNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(@Nullable String connectionId) {
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(@Nullable MethodIntegrationConnectionType connectionType) {
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder contentHandling(@Nullable MethodIntegrationContentHandling contentHandling) {
            this.contentHandling = contentHandling;
            return this;
        }
        @CustomType.Setter
        public Builder credentials(@Nullable String credentials) {
            this.credentials = credentials;
            return this;
        }
        @CustomType.Setter
        public Builder integrationHttpMethod(@Nullable String integrationHttpMethod) {
            this.integrationHttpMethod = integrationHttpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder integrationResponses(@Nullable List<MethodIntegrationResponse> integrationResponses) {
            this.integrationResponses = integrationResponses;
            return this;
        }
        public Builder integrationResponses(MethodIntegrationResponse... integrationResponses) {
            return integrationResponses(List.of(integrationResponses));
        }
        @CustomType.Setter
        public Builder passthroughBehavior(@Nullable MethodIntegrationPassthroughBehavior passthroughBehavior) {
            this.passthroughBehavior = passthroughBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder requestParameters(@Nullable Object requestParameters) {
            this.requestParameters = requestParameters;
            return this;
        }
        @CustomType.Setter
        public Builder requestTemplates(@Nullable Object requestTemplates) {
            this.requestTemplates = requestTemplates;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutInMillis(@Nullable Integer timeoutInMillis) {
            this.timeoutInMillis = timeoutInMillis;
            return this;
        }
        @CustomType.Setter
        public Builder type(MethodIntegrationType type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public MethodIntegration build() {
            final var o = new MethodIntegration();
            o.cacheKeyParameters = cacheKeyParameters;
            o.cacheNamespace = cacheNamespace;
            o.connectionId = connectionId;
            o.connectionType = connectionType;
            o.contentHandling = contentHandling;
            o.credentials = credentials;
            o.integrationHttpMethod = integrationHttpMethod;
            o.integrationResponses = integrationResponses;
            o.passthroughBehavior = passthroughBehavior;
            o.requestParameters = requestParameters;
            o.requestTemplates = requestTemplates;
            o.timeoutInMillis = timeoutInMillis;
            o.type = type;
            o.uri = uri;
            return o;
        }
    }
}
