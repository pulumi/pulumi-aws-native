// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot;

import com.pulumi.awsnative.iot.enums.CertificateMode;
import com.pulumi.awsnative.iot.enums.CertificateStatus;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    @Import(name="cACertificatePem")
    private @Nullable Output<String> cACertificatePem;

    public Optional<Output<String>> cACertificatePem() {
        return Optional.ofNullable(this.cACertificatePem);
    }

    @Import(name="certificateMode")
    private @Nullable Output<CertificateMode> certificateMode;

    public Optional<Output<CertificateMode>> certificateMode() {
        return Optional.ofNullable(this.certificateMode);
    }

    @Import(name="certificatePem")
    private @Nullable Output<String> certificatePem;

    public Optional<Output<String>> certificatePem() {
        return Optional.ofNullable(this.certificatePem);
    }

    @Import(name="certificateSigningRequest")
    private @Nullable Output<String> certificateSigningRequest;

    public Optional<Output<String>> certificateSigningRequest() {
        return Optional.ofNullable(this.certificateSigningRequest);
    }

    @Import(name="status", required=true)
    private Output<CertificateStatus> status;

    public Output<CertificateStatus> status() {
        return this.status;
    }

    private CertificateArgs() {}

    private CertificateArgs(CertificateArgs $) {
        this.cACertificatePem = $.cACertificatePem;
        this.certificateMode = $.certificateMode;
        this.certificatePem = $.certificatePem;
        this.certificateSigningRequest = $.certificateSigningRequest;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateArgs $;

        public Builder() {
            $ = new CertificateArgs();
        }

        public Builder(CertificateArgs defaults) {
            $ = new CertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder cACertificatePem(@Nullable Output<String> cACertificatePem) {
            $.cACertificatePem = cACertificatePem;
            return this;
        }

        public Builder cACertificatePem(String cACertificatePem) {
            return cACertificatePem(Output.of(cACertificatePem));
        }

        public Builder certificateMode(@Nullable Output<CertificateMode> certificateMode) {
            $.certificateMode = certificateMode;
            return this;
        }

        public Builder certificateMode(CertificateMode certificateMode) {
            return certificateMode(Output.of(certificateMode));
        }

        public Builder certificatePem(@Nullable Output<String> certificatePem) {
            $.certificatePem = certificatePem;
            return this;
        }

        public Builder certificatePem(String certificatePem) {
            return certificatePem(Output.of(certificatePem));
        }

        public Builder certificateSigningRequest(@Nullable Output<String> certificateSigningRequest) {
            $.certificateSigningRequest = certificateSigningRequest;
            return this;
        }

        public Builder certificateSigningRequest(String certificateSigningRequest) {
            return certificateSigningRequest(Output.of(certificateSigningRequest));
        }

        public Builder status(Output<CertificateStatus> status) {
            $.status = status;
            return this;
        }

        public Builder status(CertificateStatus status) {
            return status(Output.of(status));
        }

        public CertificateArgs build() {
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
