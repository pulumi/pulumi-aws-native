// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lambda;

import com.pulumi.awsnative.lambda.inputs.CodeSigningConfigAllowedPublishersArgs;
import com.pulumi.awsnative.lambda.inputs.CodeSigningConfigCodeSigningPoliciesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeSigningConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeSigningConfigArgs Empty = new CodeSigningConfigArgs();

    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
     * 
     */
    @Import(name="allowedPublishers", required=true)
    private Output<CodeSigningConfigAllowedPublishersArgs> allowedPublishers;

    /**
     * @return When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
     * 
     */
    public Output<CodeSigningConfigAllowedPublishersArgs> allowedPublishers() {
        return this.allowedPublishers;
    }

    /**
     * Policies to control how to act if a signature is invalid
     * 
     */
    @Import(name="codeSigningPolicies")
    private @Nullable Output<CodeSigningConfigCodeSigningPoliciesArgs> codeSigningPolicies;

    /**
     * @return Policies to control how to act if a signature is invalid
     * 
     */
    public Optional<Output<CodeSigningConfigCodeSigningPoliciesArgs>> codeSigningPolicies() {
        return Optional.ofNullable(this.codeSigningPolicies);
    }

    /**
     * A description of the CodeSigningConfig
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the CodeSigningConfig
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    private CodeSigningConfigArgs() {}

    private CodeSigningConfigArgs(CodeSigningConfigArgs $) {
        this.allowedPublishers = $.allowedPublishers;
        this.codeSigningPolicies = $.codeSigningPolicies;
        this.description = $.description;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeSigningConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeSigningConfigArgs $;

        public Builder() {
            $ = new CodeSigningConfigArgs();
        }

        public Builder(CodeSigningConfigArgs defaults) {
            $ = new CodeSigningConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedPublishers When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
         * 
         * @return builder
         * 
         */
        public Builder allowedPublishers(Output<CodeSigningConfigAllowedPublishersArgs> allowedPublishers) {
            $.allowedPublishers = allowedPublishers;
            return this;
        }

        /**
         * @param allowedPublishers When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
         * 
         * @return builder
         * 
         */
        public Builder allowedPublishers(CodeSigningConfigAllowedPublishersArgs allowedPublishers) {
            return allowedPublishers(Output.of(allowedPublishers));
        }

        /**
         * @param codeSigningPolicies Policies to control how to act if a signature is invalid
         * 
         * @return builder
         * 
         */
        public Builder codeSigningPolicies(@Nullable Output<CodeSigningConfigCodeSigningPoliciesArgs> codeSigningPolicies) {
            $.codeSigningPolicies = codeSigningPolicies;
            return this;
        }

        /**
         * @param codeSigningPolicies Policies to control how to act if a signature is invalid
         * 
         * @return builder
         * 
         */
        public Builder codeSigningPolicies(CodeSigningConfigCodeSigningPoliciesArgs codeSigningPolicies) {
            return codeSigningPolicies(Output.of(codeSigningPolicies));
        }

        /**
         * @param description A description of the CodeSigningConfig
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the CodeSigningConfig
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public CodeSigningConfigArgs build() {
            $.allowedPublishers = Objects.requireNonNull($.allowedPublishers, "expected parameter 'allowedPublishers' to be non-null");
            return $;
        }
    }

}
