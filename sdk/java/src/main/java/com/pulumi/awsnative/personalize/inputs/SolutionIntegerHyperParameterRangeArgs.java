// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.personalize.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides the name and range of an integer-valued hyperparameter.
 * 
 */
public final class SolutionIntegerHyperParameterRangeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionIntegerHyperParameterRangeArgs Empty = new SolutionIntegerHyperParameterRangeArgs();

    /**
     * The maximum allowable value for the hyperparameter.
     * 
     */
    @Import(name="maxValue")
    private @Nullable Output<Integer> maxValue;

    /**
     * @return The maximum allowable value for the hyperparameter.
     * 
     */
    public Optional<Output<Integer>> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }

    /**
     * The minimum allowable value for the hyperparameter.
     * 
     */
    @Import(name="minValue")
    private @Nullable Output<Integer> minValue;

    /**
     * @return The minimum allowable value for the hyperparameter.
     * 
     */
    public Optional<Output<Integer>> minValue() {
        return Optional.ofNullable(this.minValue);
    }

    /**
     * The name of the hyperparameter.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the hyperparameter.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SolutionIntegerHyperParameterRangeArgs() {}

    private SolutionIntegerHyperParameterRangeArgs(SolutionIntegerHyperParameterRangeArgs $) {
        this.maxValue = $.maxValue;
        this.minValue = $.minValue;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionIntegerHyperParameterRangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionIntegerHyperParameterRangeArgs $;

        public Builder() {
            $ = new SolutionIntegerHyperParameterRangeArgs();
        }

        public Builder(SolutionIntegerHyperParameterRangeArgs defaults) {
            $ = new SolutionIntegerHyperParameterRangeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxValue The maximum allowable value for the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(@Nullable Output<Integer> maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        /**
         * @param maxValue The maximum allowable value for the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder maxValue(Integer maxValue) {
            return maxValue(Output.of(maxValue));
        }

        /**
         * @param minValue The minimum allowable value for the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder minValue(@Nullable Output<Integer> minValue) {
            $.minValue = minValue;
            return this;
        }

        /**
         * @param minValue The minimum allowable value for the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder minValue(Integer minValue) {
            return minValue(Output.of(minValue));
        }

        /**
         * @param name The name of the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the hyperparameter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SolutionIntegerHyperParameterRangeArgs build() {
            return $;
        }
    }

}
