// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediatailor.outputs;

import com.pulumi.awsnative.mediatailor.enums.PlaybackConfigurationDashConfigurationOriginManifestType;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PlaybackConfigurationDashConfiguration {
    /**
     * @return The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
     * 
     */
    private @Nullable String manifestEndpointPrefix;
    /**
     * @return The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
     * 
     */
    private @Nullable String mpdLocation;
    /**
     * @return The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
     * 
     */
    private @Nullable PlaybackConfigurationDashConfigurationOriginManifestType originManifestType;

    private PlaybackConfigurationDashConfiguration() {}
    /**
     * @return The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
     * 
     */
    public Optional<String> manifestEndpointPrefix() {
        return Optional.ofNullable(this.manifestEndpointPrefix);
    }
    /**
     * @return The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don&#39;t support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
     * 
     */
    public Optional<String> mpdLocation() {
        return Optional.ofNullable(this.mpdLocation);
    }
    /**
     * @return The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
     * 
     */
    public Optional<PlaybackConfigurationDashConfigurationOriginManifestType> originManifestType() {
        return Optional.ofNullable(this.originManifestType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PlaybackConfigurationDashConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String manifestEndpointPrefix;
        private @Nullable String mpdLocation;
        private @Nullable PlaybackConfigurationDashConfigurationOriginManifestType originManifestType;
        public Builder() {}
        public Builder(PlaybackConfigurationDashConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manifestEndpointPrefix = defaults.manifestEndpointPrefix;
    	      this.mpdLocation = defaults.mpdLocation;
    	      this.originManifestType = defaults.originManifestType;
        }

        @CustomType.Setter
        public Builder manifestEndpointPrefix(@Nullable String manifestEndpointPrefix) {
            this.manifestEndpointPrefix = manifestEndpointPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder mpdLocation(@Nullable String mpdLocation) {
            this.mpdLocation = mpdLocation;
            return this;
        }
        @CustomType.Setter
        public Builder originManifestType(@Nullable PlaybackConfigurationDashConfigurationOriginManifestType originManifestType) {
            this.originManifestType = originManifestType;
            return this;
        }
        public PlaybackConfigurationDashConfiguration build() {
            final var o = new PlaybackConfigurationDashConfiguration();
            o.manifestEndpointPrefix = manifestEndpointPrefix;
            o.mpdLocation = mpdLocation;
            o.originManifestType = originManifestType;
            return o;
        }
    }
}
