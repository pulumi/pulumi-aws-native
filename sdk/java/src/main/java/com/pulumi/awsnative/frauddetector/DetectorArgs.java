// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.frauddetector;

import com.pulumi.awsnative.frauddetector.enums.DetectorRuleExecutionMode;
import com.pulumi.awsnative.frauddetector.enums.DetectorVersionStatus;
import com.pulumi.awsnative.frauddetector.inputs.DetectorEventTypeArgs;
import com.pulumi.awsnative.frauddetector.inputs.DetectorModelArgs;
import com.pulumi.awsnative.frauddetector.inputs.DetectorRuleArgs;
import com.pulumi.awsnative.frauddetector.inputs.DetectorTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DetectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final DetectorArgs Empty = new DetectorArgs();

    /**
     * The models to associate with this detector.
     * 
     */
    @Import(name="associatedModels")
    private @Nullable Output<List<DetectorModelArgs>> associatedModels;

    /**
     * @return The models to associate with this detector.
     * 
     */
    public Optional<Output<List<DetectorModelArgs>>> associatedModels() {
        return Optional.ofNullable(this.associatedModels);
    }

    /**
     * The description of the detector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the detector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the detector
     * 
     */
    @Import(name="detectorId", required=true)
    private Output<String> detectorId;

    /**
     * @return The ID of the detector
     * 
     */
    public Output<String> detectorId() {
        return this.detectorId;
    }

    /**
     * The desired detector version status for the detector
     * 
     */
    @Import(name="detectorVersionStatus")
    private @Nullable Output<DetectorVersionStatus> detectorVersionStatus;

    /**
     * @return The desired detector version status for the detector
     * 
     */
    public Optional<Output<DetectorVersionStatus>> detectorVersionStatus() {
        return Optional.ofNullable(this.detectorVersionStatus);
    }

    /**
     * The event type to associate this detector with.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<DetectorEventTypeArgs> eventType;

    /**
     * @return The event type to associate this detector with.
     * 
     */
    public Output<DetectorEventTypeArgs> eventType() {
        return this.eventType;
    }

    @Import(name="ruleExecutionMode")
    private @Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode;

    public Optional<Output<DetectorRuleExecutionMode>> ruleExecutionMode() {
        return Optional.ofNullable(this.ruleExecutionMode);
    }

    @Import(name="rules", required=true)
    private Output<List<DetectorRuleArgs>> rules;

    public Output<List<DetectorRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * Tags associated with this detector.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DetectorTagArgs>> tags;

    /**
     * @return Tags associated with this detector.
     * 
     */
    public Optional<Output<List<DetectorTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DetectorArgs() {}

    private DetectorArgs(DetectorArgs $) {
        this.associatedModels = $.associatedModels;
        this.description = $.description;
        this.detectorId = $.detectorId;
        this.detectorVersionStatus = $.detectorVersionStatus;
        this.eventType = $.eventType;
        this.ruleExecutionMode = $.ruleExecutionMode;
        this.rules = $.rules;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DetectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DetectorArgs $;

        public Builder() {
            $ = new DetectorArgs();
        }

        public Builder(DetectorArgs defaults) {
            $ = new DetectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedModels The models to associate with this detector.
         * 
         * @return builder
         * 
         */
        public Builder associatedModels(@Nullable Output<List<DetectorModelArgs>> associatedModels) {
            $.associatedModels = associatedModels;
            return this;
        }

        /**
         * @param associatedModels The models to associate with this detector.
         * 
         * @return builder
         * 
         */
        public Builder associatedModels(List<DetectorModelArgs> associatedModels) {
            return associatedModels(Output.of(associatedModels));
        }

        /**
         * @param associatedModels The models to associate with this detector.
         * 
         * @return builder
         * 
         */
        public Builder associatedModels(DetectorModelArgs... associatedModels) {
            return associatedModels(List.of(associatedModels));
        }

        /**
         * @param description The description of the detector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the detector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param detectorId The ID of the detector
         * 
         * @return builder
         * 
         */
        public Builder detectorId(Output<String> detectorId) {
            $.detectorId = detectorId;
            return this;
        }

        /**
         * @param detectorId The ID of the detector
         * 
         * @return builder
         * 
         */
        public Builder detectorId(String detectorId) {
            return detectorId(Output.of(detectorId));
        }

        /**
         * @param detectorVersionStatus The desired detector version status for the detector
         * 
         * @return builder
         * 
         */
        public Builder detectorVersionStatus(@Nullable Output<DetectorVersionStatus> detectorVersionStatus) {
            $.detectorVersionStatus = detectorVersionStatus;
            return this;
        }

        /**
         * @param detectorVersionStatus The desired detector version status for the detector
         * 
         * @return builder
         * 
         */
        public Builder detectorVersionStatus(DetectorVersionStatus detectorVersionStatus) {
            return detectorVersionStatus(Output.of(detectorVersionStatus));
        }

        /**
         * @param eventType The event type to associate this detector with.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<DetectorEventTypeArgs> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The event type to associate this detector with.
         * 
         * @return builder
         * 
         */
        public Builder eventType(DetectorEventTypeArgs eventType) {
            return eventType(Output.of(eventType));
        }

        public Builder ruleExecutionMode(@Nullable Output<DetectorRuleExecutionMode> ruleExecutionMode) {
            $.ruleExecutionMode = ruleExecutionMode;
            return this;
        }

        public Builder ruleExecutionMode(DetectorRuleExecutionMode ruleExecutionMode) {
            return ruleExecutionMode(Output.of(ruleExecutionMode));
        }

        public Builder rules(Output<List<DetectorRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<DetectorRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(DetectorRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param tags Tags associated with this detector.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DetectorTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with this detector.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DetectorTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with this detector.
         * 
         * @return builder
         * 
         */
        public Builder tags(DetectorTagArgs... tags) {
            return tags(List.of(tags));
        }

        public DetectorArgs build() {
            $.detectorId = Objects.requireNonNull($.detectorId, "expected parameter 'detectorId' to be non-null");
            $.eventType = Objects.requireNonNull($.eventType, "expected parameter 'eventType' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
