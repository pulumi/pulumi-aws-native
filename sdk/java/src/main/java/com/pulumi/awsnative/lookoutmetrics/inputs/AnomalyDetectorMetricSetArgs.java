// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lookoutmetrics.inputs;

import com.pulumi.awsnative.lookoutmetrics.enums.AnomalyDetectorMetricSetMetricSetFrequency;
import com.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorMetricArgs;
import com.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorMetricSourceArgs;
import com.pulumi.awsnative.lookoutmetrics.inputs.AnomalyDetectorTimestampColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnomalyDetectorMetricSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnomalyDetectorMetricSetArgs Empty = new AnomalyDetectorMetricSetArgs();

    /**
     * Dimensions for this MetricSet.
     * 
     */
    @Import(name="dimensionList")
    private @Nullable Output<List<String>> dimensionList;

    /**
     * @return Dimensions for this MetricSet.
     * 
     */
    public Optional<Output<List<String>>> dimensionList() {
        return Optional.ofNullable(this.dimensionList);
    }

    /**
     * Metrics captured by this MetricSet.
     * 
     */
    @Import(name="metricList", required=true)
    private Output<List<AnomalyDetectorMetricArgs>> metricList;

    /**
     * @return Metrics captured by this MetricSet.
     * 
     */
    public Output<List<AnomalyDetectorMetricArgs>> metricList() {
        return this.metricList;
    }

    /**
     * A description for the MetricSet.
     * 
     */
    @Import(name="metricSetDescription")
    private @Nullable Output<String> metricSetDescription;

    /**
     * @return A description for the MetricSet.
     * 
     */
    public Optional<Output<String>> metricSetDescription() {
        return Optional.ofNullable(this.metricSetDescription);
    }

    /**
     * A frequency period to aggregate the data
     * 
     */
    @Import(name="metricSetFrequency")
    private @Nullable Output<AnomalyDetectorMetricSetMetricSetFrequency> metricSetFrequency;

    /**
     * @return A frequency period to aggregate the data
     * 
     */
    public Optional<Output<AnomalyDetectorMetricSetMetricSetFrequency>> metricSetFrequency() {
        return Optional.ofNullable(this.metricSetFrequency);
    }

    /**
     * The name of the MetricSet.
     * 
     */
    @Import(name="metricSetName", required=true)
    private Output<String> metricSetName;

    /**
     * @return The name of the MetricSet.
     * 
     */
    public Output<String> metricSetName() {
        return this.metricSetName;
    }

    @Import(name="metricSource", required=true)
    private Output<AnomalyDetectorMetricSourceArgs> metricSource;

    public Output<AnomalyDetectorMetricSourceArgs> metricSource() {
        return this.metricSource;
    }

    /**
     * Offset, in seconds, between the frequency interval and the time at which the metrics are available.
     * 
     */
    @Import(name="offset")
    private @Nullable Output<Integer> offset;

    /**
     * @return Offset, in seconds, between the frequency interval and the time at which the metrics are available.
     * 
     */
    public Optional<Output<Integer>> offset() {
        return Optional.ofNullable(this.offset);
    }

    @Import(name="timestampColumn")
    private @Nullable Output<AnomalyDetectorTimestampColumnArgs> timestampColumn;

    public Optional<Output<AnomalyDetectorTimestampColumnArgs>> timestampColumn() {
        return Optional.ofNullable(this.timestampColumn);
    }

    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private AnomalyDetectorMetricSetArgs() {}

    private AnomalyDetectorMetricSetArgs(AnomalyDetectorMetricSetArgs $) {
        this.dimensionList = $.dimensionList;
        this.metricList = $.metricList;
        this.metricSetDescription = $.metricSetDescription;
        this.metricSetFrequency = $.metricSetFrequency;
        this.metricSetName = $.metricSetName;
        this.metricSource = $.metricSource;
        this.offset = $.offset;
        this.timestampColumn = $.timestampColumn;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnomalyDetectorMetricSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnomalyDetectorMetricSetArgs $;

        public Builder() {
            $ = new AnomalyDetectorMetricSetArgs();
        }

        public Builder(AnomalyDetectorMetricSetArgs defaults) {
            $ = new AnomalyDetectorMetricSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dimensionList Dimensions for this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder dimensionList(@Nullable Output<List<String>> dimensionList) {
            $.dimensionList = dimensionList;
            return this;
        }

        /**
         * @param dimensionList Dimensions for this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder dimensionList(List<String> dimensionList) {
            return dimensionList(Output.of(dimensionList));
        }

        /**
         * @param dimensionList Dimensions for this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder dimensionList(String... dimensionList) {
            return dimensionList(List.of(dimensionList));
        }

        /**
         * @param metricList Metrics captured by this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricList(Output<List<AnomalyDetectorMetricArgs>> metricList) {
            $.metricList = metricList;
            return this;
        }

        /**
         * @param metricList Metrics captured by this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricList(List<AnomalyDetectorMetricArgs> metricList) {
            return metricList(Output.of(metricList));
        }

        /**
         * @param metricList Metrics captured by this MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricList(AnomalyDetectorMetricArgs... metricList) {
            return metricList(List.of(metricList));
        }

        /**
         * @param metricSetDescription A description for the MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricSetDescription(@Nullable Output<String> metricSetDescription) {
            $.metricSetDescription = metricSetDescription;
            return this;
        }

        /**
         * @param metricSetDescription A description for the MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricSetDescription(String metricSetDescription) {
            return metricSetDescription(Output.of(metricSetDescription));
        }

        /**
         * @param metricSetFrequency A frequency period to aggregate the data
         * 
         * @return builder
         * 
         */
        public Builder metricSetFrequency(@Nullable Output<AnomalyDetectorMetricSetMetricSetFrequency> metricSetFrequency) {
            $.metricSetFrequency = metricSetFrequency;
            return this;
        }

        /**
         * @param metricSetFrequency A frequency period to aggregate the data
         * 
         * @return builder
         * 
         */
        public Builder metricSetFrequency(AnomalyDetectorMetricSetMetricSetFrequency metricSetFrequency) {
            return metricSetFrequency(Output.of(metricSetFrequency));
        }

        /**
         * @param metricSetName The name of the MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricSetName(Output<String> metricSetName) {
            $.metricSetName = metricSetName;
            return this;
        }

        /**
         * @param metricSetName The name of the MetricSet.
         * 
         * @return builder
         * 
         */
        public Builder metricSetName(String metricSetName) {
            return metricSetName(Output.of(metricSetName));
        }

        public Builder metricSource(Output<AnomalyDetectorMetricSourceArgs> metricSource) {
            $.metricSource = metricSource;
            return this;
        }

        public Builder metricSource(AnomalyDetectorMetricSourceArgs metricSource) {
            return metricSource(Output.of(metricSource));
        }

        /**
         * @param offset Offset, in seconds, between the frequency interval and the time at which the metrics are available.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        /**
         * @param offset Offset, in seconds, between the frequency interval and the time at which the metrics are available.
         * 
         * @return builder
         * 
         */
        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        public Builder timestampColumn(@Nullable Output<AnomalyDetectorTimestampColumnArgs> timestampColumn) {
            $.timestampColumn = timestampColumn;
            return this;
        }

        public Builder timestampColumn(AnomalyDetectorTimestampColumnArgs timestampColumn) {
            return timestampColumn(Output.of(timestampColumn));
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public AnomalyDetectorMetricSetArgs build() {
            $.metricList = Objects.requireNonNull($.metricList, "expected parameter 'metricList' to be non-null");
            $.metricSetName = Objects.requireNonNull($.metricSetName, "expected parameter 'metricSetName' to be non-null");
            $.metricSource = Objects.requireNonNull($.metricSource, "expected parameter 'metricSource' to be non-null");
            return $;
        }
    }

}
