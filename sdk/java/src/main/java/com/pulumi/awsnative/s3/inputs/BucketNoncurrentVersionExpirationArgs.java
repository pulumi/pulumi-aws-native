// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container for the expiration rule that describes when noncurrent objects are expired. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 expire noncurrent object versions at a specific period in the object&#39;s lifetime
 * 
 */
public final class BucketNoncurrentVersionExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketNoncurrentVersionExpirationArgs Empty = new BucketNoncurrentVersionExpirationArgs();

    /**
     * Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    @Import(name="newerNoncurrentVersions")
    private @Nullable Output<Integer> newerNoncurrentVersions;

    /**
     * @return Specified the number of newer noncurrent and current versions that must exists before performing the associated action
     * 
     */
    public Optional<Output<Integer>> newerNoncurrentVersions() {
        return Optional.ofNullable(this.newerNoncurrentVersions);
    }

    /**
     * Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
     * 
     */
    @Import(name="noncurrentDays", required=true)
    private Output<Integer> noncurrentDays;

    /**
     * @return Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
     * 
     */
    public Output<Integer> noncurrentDays() {
        return this.noncurrentDays;
    }

    private BucketNoncurrentVersionExpirationArgs() {}

    private BucketNoncurrentVersionExpirationArgs(BucketNoncurrentVersionExpirationArgs $) {
        this.newerNoncurrentVersions = $.newerNoncurrentVersions;
        this.noncurrentDays = $.noncurrentDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketNoncurrentVersionExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketNoncurrentVersionExpirationArgs $;

        public Builder() {
            $ = new BucketNoncurrentVersionExpirationArgs();
        }

        public Builder(BucketNoncurrentVersionExpirationArgs defaults) {
            $ = new BucketNoncurrentVersionExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param newerNoncurrentVersions Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(@Nullable Output<Integer> newerNoncurrentVersions) {
            $.newerNoncurrentVersions = newerNoncurrentVersions;
            return this;
        }

        /**
         * @param newerNoncurrentVersions Specified the number of newer noncurrent and current versions that must exists before performing the associated action
         * 
         * @return builder
         * 
         */
        public Builder newerNoncurrentVersions(Integer newerNoncurrentVersions) {
            return newerNoncurrentVersions(Output.of(newerNoncurrentVersions));
        }

        /**
         * @param noncurrentDays Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
         * 
         * @return builder
         * 
         */
        public Builder noncurrentDays(Output<Integer> noncurrentDays) {
            $.noncurrentDays = noncurrentDays;
            return this;
        }

        /**
         * @param noncurrentDays Specified the number of days an object is noncurrent before Amazon S3 can perform the associated action
         * 
         * @return builder
         * 
         */
        public Builder noncurrentDays(Integer noncurrentDays) {
            return noncurrentDays(Output.of(noncurrentDays));
        }

        public BucketNoncurrentVersionExpirationArgs build() {
            $.noncurrentDays = Objects.requireNonNull($.noncurrentDays, "expected parameter 'noncurrentDays' to be non-null");
            return $;
        }
    }

}
