// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.inputs;

import com.pulumi.awsnative.apigateway.enums.MethodIntegrationConnectionType;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationContentHandling;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationPassthroughBehavior;
import com.pulumi.awsnative.apigateway.enums.MethodIntegrationType;
import com.pulumi.awsnative.apigateway.inputs.MethodIntegrationResponseArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MethodIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MethodIntegrationArgs Empty = new MethodIntegrationArgs();

    /**
     * A list of request parameters whose values API Gateway caches.
     * 
     */
    @Import(name="cacheKeyParameters")
    private @Nullable Output<List<String>> cacheKeyParameters;

    /**
     * @return A list of request parameters whose values API Gateway caches.
     * 
     */
    public Optional<Output<List<String>>> cacheKeyParameters() {
        return Optional.ofNullable(this.cacheKeyParameters);
    }

    /**
     * An API-specific tag group of related cached parameters.
     * 
     */
    @Import(name="cacheNamespace")
    private @Nullable Output<String> cacheNamespace;

    /**
     * @return An API-specific tag group of related cached parameters.
     * 
     */
    public Optional<Output<String>> cacheNamespace() {
        return Optional.ofNullable(this.cacheNamespace);
    }

    /**
     * The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * The type of the network connection to the integration endpoint.
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<MethodIntegrationConnectionType> connectionType;

    /**
     * @return The type of the network connection to the integration endpoint.
     * 
     */
    public Optional<Output<MethodIntegrationConnectionType>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * Specifies how to handle request payload content type conversions.
     * 
     */
    @Import(name="contentHandling")
    private @Nullable Output<MethodIntegrationContentHandling> contentHandling;

    /**
     * @return Specifies how to handle request payload content type conversions.
     * 
     */
    public Optional<Output<MethodIntegrationContentHandling>> contentHandling() {
        return Optional.ofNullable(this.contentHandling);
    }

    /**
     * The credentials that are required for the integration.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<String> credentials;

    /**
     * @return The credentials that are required for the integration.
     * 
     */
    public Optional<Output<String>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The integration&#39;s HTTP method type.
     * 
     */
    @Import(name="integrationHttpMethod")
    private @Nullable Output<String> integrationHttpMethod;

    /**
     * @return The integration&#39;s HTTP method type.
     * 
     */
    public Optional<Output<String>> integrationHttpMethod() {
        return Optional.ofNullable(this.integrationHttpMethod);
    }

    /**
     * The response that API Gateway provides after a method&#39;s backend completes processing a request.
     * 
     */
    @Import(name="integrationResponses")
    private @Nullable Output<List<MethodIntegrationResponseArgs>> integrationResponses;

    /**
     * @return The response that API Gateway provides after a method&#39;s backend completes processing a request.
     * 
     */
    public Optional<Output<List<MethodIntegrationResponseArgs>>> integrationResponses() {
        return Optional.ofNullable(this.integrationResponses);
    }

    /**
     * Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    @Import(name="passthroughBehavior")
    private @Nullable Output<MethodIntegrationPassthroughBehavior> passthroughBehavior;

    /**
     * @return Indicates when API Gateway passes requests to the targeted backend.
     * 
     */
    public Optional<Output<MethodIntegrationPassthroughBehavior>> passthroughBehavior() {
        return Optional.ofNullable(this.passthroughBehavior);
    }

    /**
     * The request parameters that API Gateway sends with the backend request.
     * 
     */
    @Import(name="requestParameters")
    private @Nullable Output<Object> requestParameters;

    /**
     * @return The request parameters that API Gateway sends with the backend request.
     * 
     */
    public Optional<Output<Object>> requestParameters() {
        return Optional.ofNullable(this.requestParameters);
    }

    /**
     * A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    @Import(name="requestTemplates")
    private @Nullable Output<Object> requestTemplates;

    /**
     * @return A map of Apache Velocity templates that are applied on the request payload.
     * 
     */
    public Optional<Output<Object>> requestTemplates() {
        return Optional.ofNullable(this.requestTemplates);
    }

    /**
     * Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    @Import(name="timeoutInMillis")
    private @Nullable Output<Integer> timeoutInMillis;

    /**
     * @return Custom timeout between 50 and 29,000 milliseconds.
     * 
     */
    public Optional<Output<Integer>> timeoutInMillis() {
        return Optional.ofNullable(this.timeoutInMillis);
    }

    /**
     * The type of backend that your method is running.
     * 
     */
    @Import(name="type", required=true)
    private Output<MethodIntegrationType> type;

    /**
     * @return The type of backend that your method is running.
     * 
     */
    public Output<MethodIntegrationType> type() {
        return this.type;
    }

    /**
     * The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The Uniform Resource Identifier (URI) for the integration.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private MethodIntegrationArgs() {}

    private MethodIntegrationArgs(MethodIntegrationArgs $) {
        this.cacheKeyParameters = $.cacheKeyParameters;
        this.cacheNamespace = $.cacheNamespace;
        this.connectionId = $.connectionId;
        this.connectionType = $.connectionType;
        this.contentHandling = $.contentHandling;
        this.credentials = $.credentials;
        this.integrationHttpMethod = $.integrationHttpMethod;
        this.integrationResponses = $.integrationResponses;
        this.passthroughBehavior = $.passthroughBehavior;
        this.requestParameters = $.requestParameters;
        this.requestTemplates = $.requestTemplates;
        this.timeoutInMillis = $.timeoutInMillis;
        this.type = $.type;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MethodIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MethodIntegrationArgs $;

        public Builder() {
            $ = new MethodIntegrationArgs();
        }

        public Builder(MethodIntegrationArgs defaults) {
            $ = new MethodIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheKeyParameters A list of request parameters whose values API Gateway caches.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyParameters(@Nullable Output<List<String>> cacheKeyParameters) {
            $.cacheKeyParameters = cacheKeyParameters;
            return this;
        }

        /**
         * @param cacheKeyParameters A list of request parameters whose values API Gateway caches.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyParameters(List<String> cacheKeyParameters) {
            return cacheKeyParameters(Output.of(cacheKeyParameters));
        }

        /**
         * @param cacheKeyParameters A list of request parameters whose values API Gateway caches.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyParameters(String... cacheKeyParameters) {
            return cacheKeyParameters(List.of(cacheKeyParameters));
        }

        /**
         * @param cacheNamespace An API-specific tag group of related cached parameters.
         * 
         * @return builder
         * 
         */
        public Builder cacheNamespace(@Nullable Output<String> cacheNamespace) {
            $.cacheNamespace = cacheNamespace;
            return this;
        }

        /**
         * @param cacheNamespace An API-specific tag group of related cached parameters.
         * 
         * @return builder
         * 
         */
        public Builder cacheNamespace(String cacheNamespace) {
            return cacheNamespace(Output.of(cacheNamespace));
        }

        /**
         * @param connectionId The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId The ID of the VpcLink used for the integration when connectionType=VPC_LINK, otherwise undefined.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param connectionType The type of the network connection to the integration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<MethodIntegrationConnectionType> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType The type of the network connection to the integration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(MethodIntegrationConnectionType connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param contentHandling Specifies how to handle request payload content type conversions.
         * 
         * @return builder
         * 
         */
        public Builder contentHandling(@Nullable Output<MethodIntegrationContentHandling> contentHandling) {
            $.contentHandling = contentHandling;
            return this;
        }

        /**
         * @param contentHandling Specifies how to handle request payload content type conversions.
         * 
         * @return builder
         * 
         */
        public Builder contentHandling(MethodIntegrationContentHandling contentHandling) {
            return contentHandling(Output.of(contentHandling));
        }

        /**
         * @param credentials The credentials that are required for the integration.
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials The credentials that are required for the integration.
         * 
         * @return builder
         * 
         */
        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param integrationHttpMethod The integration&#39;s HTTP method type.
         * 
         * @return builder
         * 
         */
        public Builder integrationHttpMethod(@Nullable Output<String> integrationHttpMethod) {
            $.integrationHttpMethod = integrationHttpMethod;
            return this;
        }

        /**
         * @param integrationHttpMethod The integration&#39;s HTTP method type.
         * 
         * @return builder
         * 
         */
        public Builder integrationHttpMethod(String integrationHttpMethod) {
            return integrationHttpMethod(Output.of(integrationHttpMethod));
        }

        /**
         * @param integrationResponses The response that API Gateway provides after a method&#39;s backend completes processing a request.
         * 
         * @return builder
         * 
         */
        public Builder integrationResponses(@Nullable Output<List<MethodIntegrationResponseArgs>> integrationResponses) {
            $.integrationResponses = integrationResponses;
            return this;
        }

        /**
         * @param integrationResponses The response that API Gateway provides after a method&#39;s backend completes processing a request.
         * 
         * @return builder
         * 
         */
        public Builder integrationResponses(List<MethodIntegrationResponseArgs> integrationResponses) {
            return integrationResponses(Output.of(integrationResponses));
        }

        /**
         * @param integrationResponses The response that API Gateway provides after a method&#39;s backend completes processing a request.
         * 
         * @return builder
         * 
         */
        public Builder integrationResponses(MethodIntegrationResponseArgs... integrationResponses) {
            return integrationResponses(List.of(integrationResponses));
        }

        /**
         * @param passthroughBehavior Indicates when API Gateway passes requests to the targeted backend.
         * 
         * @return builder
         * 
         */
        public Builder passthroughBehavior(@Nullable Output<MethodIntegrationPassthroughBehavior> passthroughBehavior) {
            $.passthroughBehavior = passthroughBehavior;
            return this;
        }

        /**
         * @param passthroughBehavior Indicates when API Gateway passes requests to the targeted backend.
         * 
         * @return builder
         * 
         */
        public Builder passthroughBehavior(MethodIntegrationPassthroughBehavior passthroughBehavior) {
            return passthroughBehavior(Output.of(passthroughBehavior));
        }

        /**
         * @param requestParameters The request parameters that API Gateway sends with the backend request.
         * 
         * @return builder
         * 
         */
        public Builder requestParameters(@Nullable Output<Object> requestParameters) {
            $.requestParameters = requestParameters;
            return this;
        }

        /**
         * @param requestParameters The request parameters that API Gateway sends with the backend request.
         * 
         * @return builder
         * 
         */
        public Builder requestParameters(Object requestParameters) {
            return requestParameters(Output.of(requestParameters));
        }

        /**
         * @param requestTemplates A map of Apache Velocity templates that are applied on the request payload.
         * 
         * @return builder
         * 
         */
        public Builder requestTemplates(@Nullable Output<Object> requestTemplates) {
            $.requestTemplates = requestTemplates;
            return this;
        }

        /**
         * @param requestTemplates A map of Apache Velocity templates that are applied on the request payload.
         * 
         * @return builder
         * 
         */
        public Builder requestTemplates(Object requestTemplates) {
            return requestTemplates(Output.of(requestTemplates));
        }

        /**
         * @param timeoutInMillis Custom timeout between 50 and 29,000 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMillis(@Nullable Output<Integer> timeoutInMillis) {
            $.timeoutInMillis = timeoutInMillis;
            return this;
        }

        /**
         * @param timeoutInMillis Custom timeout between 50 and 29,000 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInMillis(Integer timeoutInMillis) {
            return timeoutInMillis(Output.of(timeoutInMillis));
        }

        /**
         * @param type The type of backend that your method is running.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<MethodIntegrationType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of backend that your method is running.
         * 
         * @return builder
         * 
         */
        public Builder type(MethodIntegrationType type) {
            return type(Output.of(type));
        }

        /**
         * @param uri The Uniform Resource Identifier (URI) for the integration.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The Uniform Resource Identifier (URI) for the integration.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public MethodIntegrationArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
