// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.outputs;

import com.pulumi.awsnative.databrew.outputs.RecipeParametersInputProperties;
import com.pulumi.awsnative.databrew.outputs.RecipeSecondaryInput;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecipeParameters {
    private @Nullable String aggregateFunction;
    private @Nullable String base;
    private @Nullable String caseStatement;
    private @Nullable String categoryMap;
    private @Nullable String charsToRemove;
    private @Nullable String collapseConsecutiveWhitespace;
    private @Nullable String columnDataType;
    private @Nullable String columnRange;
    private @Nullable String count;
    private @Nullable String customCharacters;
    private @Nullable String customStopWords;
    private @Nullable String customValue;
    private @Nullable String datasetsColumns;
    private @Nullable String dateAddValue;
    private @Nullable String dateTimeFormat;
    private @Nullable String dateTimeParameters;
    private @Nullable String deleteOtherRows;
    private @Nullable String delimiter;
    private @Nullable String endPattern;
    private @Nullable String endPosition;
    private @Nullable String endValue;
    private @Nullable String expandContractions;
    private @Nullable String exponent;
    private @Nullable String falseString;
    private @Nullable String groupByAggFunctionOptions;
    private @Nullable String groupByColumns;
    private @Nullable String hiddenColumns;
    private @Nullable String ignoreCase;
    private @Nullable String includeInSplit;
    /**
     * @return Input
     * 
     */
    private @Nullable RecipeParametersInputProperties input;
    private @Nullable String interval;
    private @Nullable String isText;
    private @Nullable String joinKeys;
    private @Nullable String joinType;
    private @Nullable String leftColumns;
    private @Nullable String limit;
    private @Nullable String lowerBound;
    private @Nullable String mapType;
    private @Nullable String modeType;
    private @Nullable Boolean multiLine;
    private @Nullable String numRows;
    private @Nullable String numRowsAfter;
    private @Nullable String numRowsBefore;
    private @Nullable String orderByColumn;
    private @Nullable String orderByColumns;
    private @Nullable String other;
    private @Nullable String pattern;
    private @Nullable String patternOption1;
    private @Nullable String patternOption2;
    private @Nullable String patternOptions;
    private @Nullable String period;
    private @Nullable String position;
    private @Nullable String removeAllPunctuation;
    private @Nullable String removeAllQuotes;
    private @Nullable String removeAllWhitespace;
    private @Nullable String removeCustomCharacters;
    private @Nullable String removeCustomValue;
    private @Nullable String removeLeadingAndTrailingPunctuation;
    private @Nullable String removeLeadingAndTrailingQuotes;
    private @Nullable String removeLeadingAndTrailingWhitespace;
    private @Nullable String removeLetters;
    private @Nullable String removeNumbers;
    private @Nullable String removeSourceColumn;
    private @Nullable String removeSpecialCharacters;
    private @Nullable String rightColumns;
    private @Nullable String sampleSize;
    private @Nullable String sampleType;
    private @Nullable String secondInput;
    private @Nullable List<RecipeSecondaryInput> secondaryInputs;
    private @Nullable List<Integer> sheetIndexes;
    private @Nullable List<String> sheetNames;
    private @Nullable String sourceColumn;
    private @Nullable String sourceColumn1;
    private @Nullable String sourceColumn2;
    private @Nullable String sourceColumns;
    private @Nullable String startColumnIndex;
    private @Nullable String startPattern;
    private @Nullable String startPosition;
    private @Nullable String startValue;
    private @Nullable String stemmingMode;
    private @Nullable String stepCount;
    private @Nullable String stepIndex;
    private @Nullable String stopWordsMode;
    private @Nullable String strategy;
    private @Nullable String targetColumn;
    private @Nullable String targetColumnNames;
    private @Nullable String targetDateFormat;
    private @Nullable String targetIndex;
    private @Nullable String timeZone;
    private @Nullable String tokenizerPattern;
    private @Nullable String trueString;
    private @Nullable String udfLang;
    private @Nullable String units;
    private @Nullable String unpivotColumn;
    private @Nullable String upperBound;
    private @Nullable String useNewDataFrame;
    private @Nullable String value;
    private @Nullable String value1;
    private @Nullable String value2;
    private @Nullable String valueColumn;
    private @Nullable String viewFrame;

    private RecipeParameters() {}
    public Optional<String> aggregateFunction() {
        return Optional.ofNullable(this.aggregateFunction);
    }
    public Optional<String> base() {
        return Optional.ofNullable(this.base);
    }
    public Optional<String> caseStatement() {
        return Optional.ofNullable(this.caseStatement);
    }
    public Optional<String> categoryMap() {
        return Optional.ofNullable(this.categoryMap);
    }
    public Optional<String> charsToRemove() {
        return Optional.ofNullable(this.charsToRemove);
    }
    public Optional<String> collapseConsecutiveWhitespace() {
        return Optional.ofNullable(this.collapseConsecutiveWhitespace);
    }
    public Optional<String> columnDataType() {
        return Optional.ofNullable(this.columnDataType);
    }
    public Optional<String> columnRange() {
        return Optional.ofNullable(this.columnRange);
    }
    public Optional<String> count() {
        return Optional.ofNullable(this.count);
    }
    public Optional<String> customCharacters() {
        return Optional.ofNullable(this.customCharacters);
    }
    public Optional<String> customStopWords() {
        return Optional.ofNullable(this.customStopWords);
    }
    public Optional<String> customValue() {
        return Optional.ofNullable(this.customValue);
    }
    public Optional<String> datasetsColumns() {
        return Optional.ofNullable(this.datasetsColumns);
    }
    public Optional<String> dateAddValue() {
        return Optional.ofNullable(this.dateAddValue);
    }
    public Optional<String> dateTimeFormat() {
        return Optional.ofNullable(this.dateTimeFormat);
    }
    public Optional<String> dateTimeParameters() {
        return Optional.ofNullable(this.dateTimeParameters);
    }
    public Optional<String> deleteOtherRows() {
        return Optional.ofNullable(this.deleteOtherRows);
    }
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    public Optional<String> endPattern() {
        return Optional.ofNullable(this.endPattern);
    }
    public Optional<String> endPosition() {
        return Optional.ofNullable(this.endPosition);
    }
    public Optional<String> endValue() {
        return Optional.ofNullable(this.endValue);
    }
    public Optional<String> expandContractions() {
        return Optional.ofNullable(this.expandContractions);
    }
    public Optional<String> exponent() {
        return Optional.ofNullable(this.exponent);
    }
    public Optional<String> falseString() {
        return Optional.ofNullable(this.falseString);
    }
    public Optional<String> groupByAggFunctionOptions() {
        return Optional.ofNullable(this.groupByAggFunctionOptions);
    }
    public Optional<String> groupByColumns() {
        return Optional.ofNullable(this.groupByColumns);
    }
    public Optional<String> hiddenColumns() {
        return Optional.ofNullable(this.hiddenColumns);
    }
    public Optional<String> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }
    public Optional<String> includeInSplit() {
        return Optional.ofNullable(this.includeInSplit);
    }
    /**
     * @return Input
     * 
     */
    public Optional<RecipeParametersInputProperties> input() {
        return Optional.ofNullable(this.input);
    }
    public Optional<String> interval() {
        return Optional.ofNullable(this.interval);
    }
    public Optional<String> isText() {
        return Optional.ofNullable(this.isText);
    }
    public Optional<String> joinKeys() {
        return Optional.ofNullable(this.joinKeys);
    }
    public Optional<String> joinType() {
        return Optional.ofNullable(this.joinType);
    }
    public Optional<String> leftColumns() {
        return Optional.ofNullable(this.leftColumns);
    }
    public Optional<String> limit() {
        return Optional.ofNullable(this.limit);
    }
    public Optional<String> lowerBound() {
        return Optional.ofNullable(this.lowerBound);
    }
    public Optional<String> mapType() {
        return Optional.ofNullable(this.mapType);
    }
    public Optional<String> modeType() {
        return Optional.ofNullable(this.modeType);
    }
    public Optional<Boolean> multiLine() {
        return Optional.ofNullable(this.multiLine);
    }
    public Optional<String> numRows() {
        return Optional.ofNullable(this.numRows);
    }
    public Optional<String> numRowsAfter() {
        return Optional.ofNullable(this.numRowsAfter);
    }
    public Optional<String> numRowsBefore() {
        return Optional.ofNullable(this.numRowsBefore);
    }
    public Optional<String> orderByColumn() {
        return Optional.ofNullable(this.orderByColumn);
    }
    public Optional<String> orderByColumns() {
        return Optional.ofNullable(this.orderByColumns);
    }
    public Optional<String> other() {
        return Optional.ofNullable(this.other);
    }
    public Optional<String> pattern() {
        return Optional.ofNullable(this.pattern);
    }
    public Optional<String> patternOption1() {
        return Optional.ofNullable(this.patternOption1);
    }
    public Optional<String> patternOption2() {
        return Optional.ofNullable(this.patternOption2);
    }
    public Optional<String> patternOptions() {
        return Optional.ofNullable(this.patternOptions);
    }
    public Optional<String> period() {
        return Optional.ofNullable(this.period);
    }
    public Optional<String> position() {
        return Optional.ofNullable(this.position);
    }
    public Optional<String> removeAllPunctuation() {
        return Optional.ofNullable(this.removeAllPunctuation);
    }
    public Optional<String> removeAllQuotes() {
        return Optional.ofNullable(this.removeAllQuotes);
    }
    public Optional<String> removeAllWhitespace() {
        return Optional.ofNullable(this.removeAllWhitespace);
    }
    public Optional<String> removeCustomCharacters() {
        return Optional.ofNullable(this.removeCustomCharacters);
    }
    public Optional<String> removeCustomValue() {
        return Optional.ofNullable(this.removeCustomValue);
    }
    public Optional<String> removeLeadingAndTrailingPunctuation() {
        return Optional.ofNullable(this.removeLeadingAndTrailingPunctuation);
    }
    public Optional<String> removeLeadingAndTrailingQuotes() {
        return Optional.ofNullable(this.removeLeadingAndTrailingQuotes);
    }
    public Optional<String> removeLeadingAndTrailingWhitespace() {
        return Optional.ofNullable(this.removeLeadingAndTrailingWhitespace);
    }
    public Optional<String> removeLetters() {
        return Optional.ofNullable(this.removeLetters);
    }
    public Optional<String> removeNumbers() {
        return Optional.ofNullable(this.removeNumbers);
    }
    public Optional<String> removeSourceColumn() {
        return Optional.ofNullable(this.removeSourceColumn);
    }
    public Optional<String> removeSpecialCharacters() {
        return Optional.ofNullable(this.removeSpecialCharacters);
    }
    public Optional<String> rightColumns() {
        return Optional.ofNullable(this.rightColumns);
    }
    public Optional<String> sampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }
    public Optional<String> sampleType() {
        return Optional.ofNullable(this.sampleType);
    }
    public Optional<String> secondInput() {
        return Optional.ofNullable(this.secondInput);
    }
    public List<RecipeSecondaryInput> secondaryInputs() {
        return this.secondaryInputs == null ? List.of() : this.secondaryInputs;
    }
    public List<Integer> sheetIndexes() {
        return this.sheetIndexes == null ? List.of() : this.sheetIndexes;
    }
    public List<String> sheetNames() {
        return this.sheetNames == null ? List.of() : this.sheetNames;
    }
    public Optional<String> sourceColumn() {
        return Optional.ofNullable(this.sourceColumn);
    }
    public Optional<String> sourceColumn1() {
        return Optional.ofNullable(this.sourceColumn1);
    }
    public Optional<String> sourceColumn2() {
        return Optional.ofNullable(this.sourceColumn2);
    }
    public Optional<String> sourceColumns() {
        return Optional.ofNullable(this.sourceColumns);
    }
    public Optional<String> startColumnIndex() {
        return Optional.ofNullable(this.startColumnIndex);
    }
    public Optional<String> startPattern() {
        return Optional.ofNullable(this.startPattern);
    }
    public Optional<String> startPosition() {
        return Optional.ofNullable(this.startPosition);
    }
    public Optional<String> startValue() {
        return Optional.ofNullable(this.startValue);
    }
    public Optional<String> stemmingMode() {
        return Optional.ofNullable(this.stemmingMode);
    }
    public Optional<String> stepCount() {
        return Optional.ofNullable(this.stepCount);
    }
    public Optional<String> stepIndex() {
        return Optional.ofNullable(this.stepIndex);
    }
    public Optional<String> stopWordsMode() {
        return Optional.ofNullable(this.stopWordsMode);
    }
    public Optional<String> strategy() {
        return Optional.ofNullable(this.strategy);
    }
    public Optional<String> targetColumn() {
        return Optional.ofNullable(this.targetColumn);
    }
    public Optional<String> targetColumnNames() {
        return Optional.ofNullable(this.targetColumnNames);
    }
    public Optional<String> targetDateFormat() {
        return Optional.ofNullable(this.targetDateFormat);
    }
    public Optional<String> targetIndex() {
        return Optional.ofNullable(this.targetIndex);
    }
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }
    public Optional<String> tokenizerPattern() {
        return Optional.ofNullable(this.tokenizerPattern);
    }
    public Optional<String> trueString() {
        return Optional.ofNullable(this.trueString);
    }
    public Optional<String> udfLang() {
        return Optional.ofNullable(this.udfLang);
    }
    public Optional<String> units() {
        return Optional.ofNullable(this.units);
    }
    public Optional<String> unpivotColumn() {
        return Optional.ofNullable(this.unpivotColumn);
    }
    public Optional<String> upperBound() {
        return Optional.ofNullable(this.upperBound);
    }
    public Optional<String> useNewDataFrame() {
        return Optional.ofNullable(this.useNewDataFrame);
    }
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    public Optional<String> value1() {
        return Optional.ofNullable(this.value1);
    }
    public Optional<String> value2() {
        return Optional.ofNullable(this.value2);
    }
    public Optional<String> valueColumn() {
        return Optional.ofNullable(this.valueColumn);
    }
    public Optional<String> viewFrame() {
        return Optional.ofNullable(this.viewFrame);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecipeParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aggregateFunction;
        private @Nullable String base;
        private @Nullable String caseStatement;
        private @Nullable String categoryMap;
        private @Nullable String charsToRemove;
        private @Nullable String collapseConsecutiveWhitespace;
        private @Nullable String columnDataType;
        private @Nullable String columnRange;
        private @Nullable String count;
        private @Nullable String customCharacters;
        private @Nullable String customStopWords;
        private @Nullable String customValue;
        private @Nullable String datasetsColumns;
        private @Nullable String dateAddValue;
        private @Nullable String dateTimeFormat;
        private @Nullable String dateTimeParameters;
        private @Nullable String deleteOtherRows;
        private @Nullable String delimiter;
        private @Nullable String endPattern;
        private @Nullable String endPosition;
        private @Nullable String endValue;
        private @Nullable String expandContractions;
        private @Nullable String exponent;
        private @Nullable String falseString;
        private @Nullable String groupByAggFunctionOptions;
        private @Nullable String groupByColumns;
        private @Nullable String hiddenColumns;
        private @Nullable String ignoreCase;
        private @Nullable String includeInSplit;
        private @Nullable RecipeParametersInputProperties input;
        private @Nullable String interval;
        private @Nullable String isText;
        private @Nullable String joinKeys;
        private @Nullable String joinType;
        private @Nullable String leftColumns;
        private @Nullable String limit;
        private @Nullable String lowerBound;
        private @Nullable String mapType;
        private @Nullable String modeType;
        private @Nullable Boolean multiLine;
        private @Nullable String numRows;
        private @Nullable String numRowsAfter;
        private @Nullable String numRowsBefore;
        private @Nullable String orderByColumn;
        private @Nullable String orderByColumns;
        private @Nullable String other;
        private @Nullable String pattern;
        private @Nullable String patternOption1;
        private @Nullable String patternOption2;
        private @Nullable String patternOptions;
        private @Nullable String period;
        private @Nullable String position;
        private @Nullable String removeAllPunctuation;
        private @Nullable String removeAllQuotes;
        private @Nullable String removeAllWhitespace;
        private @Nullable String removeCustomCharacters;
        private @Nullable String removeCustomValue;
        private @Nullable String removeLeadingAndTrailingPunctuation;
        private @Nullable String removeLeadingAndTrailingQuotes;
        private @Nullable String removeLeadingAndTrailingWhitespace;
        private @Nullable String removeLetters;
        private @Nullable String removeNumbers;
        private @Nullable String removeSourceColumn;
        private @Nullable String removeSpecialCharacters;
        private @Nullable String rightColumns;
        private @Nullable String sampleSize;
        private @Nullable String sampleType;
        private @Nullable String secondInput;
        private @Nullable List<RecipeSecondaryInput> secondaryInputs;
        private @Nullable List<Integer> sheetIndexes;
        private @Nullable List<String> sheetNames;
        private @Nullable String sourceColumn;
        private @Nullable String sourceColumn1;
        private @Nullable String sourceColumn2;
        private @Nullable String sourceColumns;
        private @Nullable String startColumnIndex;
        private @Nullable String startPattern;
        private @Nullable String startPosition;
        private @Nullable String startValue;
        private @Nullable String stemmingMode;
        private @Nullable String stepCount;
        private @Nullable String stepIndex;
        private @Nullable String stopWordsMode;
        private @Nullable String strategy;
        private @Nullable String targetColumn;
        private @Nullable String targetColumnNames;
        private @Nullable String targetDateFormat;
        private @Nullable String targetIndex;
        private @Nullable String timeZone;
        private @Nullable String tokenizerPattern;
        private @Nullable String trueString;
        private @Nullable String udfLang;
        private @Nullable String units;
        private @Nullable String unpivotColumn;
        private @Nullable String upperBound;
        private @Nullable String useNewDataFrame;
        private @Nullable String value;
        private @Nullable String value1;
        private @Nullable String value2;
        private @Nullable String valueColumn;
        private @Nullable String viewFrame;
        public Builder() {}
        public Builder(RecipeParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregateFunction = defaults.aggregateFunction;
    	      this.base = defaults.base;
    	      this.caseStatement = defaults.caseStatement;
    	      this.categoryMap = defaults.categoryMap;
    	      this.charsToRemove = defaults.charsToRemove;
    	      this.collapseConsecutiveWhitespace = defaults.collapseConsecutiveWhitespace;
    	      this.columnDataType = defaults.columnDataType;
    	      this.columnRange = defaults.columnRange;
    	      this.count = defaults.count;
    	      this.customCharacters = defaults.customCharacters;
    	      this.customStopWords = defaults.customStopWords;
    	      this.customValue = defaults.customValue;
    	      this.datasetsColumns = defaults.datasetsColumns;
    	      this.dateAddValue = defaults.dateAddValue;
    	      this.dateTimeFormat = defaults.dateTimeFormat;
    	      this.dateTimeParameters = defaults.dateTimeParameters;
    	      this.deleteOtherRows = defaults.deleteOtherRows;
    	      this.delimiter = defaults.delimiter;
    	      this.endPattern = defaults.endPattern;
    	      this.endPosition = defaults.endPosition;
    	      this.endValue = defaults.endValue;
    	      this.expandContractions = defaults.expandContractions;
    	      this.exponent = defaults.exponent;
    	      this.falseString = defaults.falseString;
    	      this.groupByAggFunctionOptions = defaults.groupByAggFunctionOptions;
    	      this.groupByColumns = defaults.groupByColumns;
    	      this.hiddenColumns = defaults.hiddenColumns;
    	      this.ignoreCase = defaults.ignoreCase;
    	      this.includeInSplit = defaults.includeInSplit;
    	      this.input = defaults.input;
    	      this.interval = defaults.interval;
    	      this.isText = defaults.isText;
    	      this.joinKeys = defaults.joinKeys;
    	      this.joinType = defaults.joinType;
    	      this.leftColumns = defaults.leftColumns;
    	      this.limit = defaults.limit;
    	      this.lowerBound = defaults.lowerBound;
    	      this.mapType = defaults.mapType;
    	      this.modeType = defaults.modeType;
    	      this.multiLine = defaults.multiLine;
    	      this.numRows = defaults.numRows;
    	      this.numRowsAfter = defaults.numRowsAfter;
    	      this.numRowsBefore = defaults.numRowsBefore;
    	      this.orderByColumn = defaults.orderByColumn;
    	      this.orderByColumns = defaults.orderByColumns;
    	      this.other = defaults.other;
    	      this.pattern = defaults.pattern;
    	      this.patternOption1 = defaults.patternOption1;
    	      this.patternOption2 = defaults.patternOption2;
    	      this.patternOptions = defaults.patternOptions;
    	      this.period = defaults.period;
    	      this.position = defaults.position;
    	      this.removeAllPunctuation = defaults.removeAllPunctuation;
    	      this.removeAllQuotes = defaults.removeAllQuotes;
    	      this.removeAllWhitespace = defaults.removeAllWhitespace;
    	      this.removeCustomCharacters = defaults.removeCustomCharacters;
    	      this.removeCustomValue = defaults.removeCustomValue;
    	      this.removeLeadingAndTrailingPunctuation = defaults.removeLeadingAndTrailingPunctuation;
    	      this.removeLeadingAndTrailingQuotes = defaults.removeLeadingAndTrailingQuotes;
    	      this.removeLeadingAndTrailingWhitespace = defaults.removeLeadingAndTrailingWhitespace;
    	      this.removeLetters = defaults.removeLetters;
    	      this.removeNumbers = defaults.removeNumbers;
    	      this.removeSourceColumn = defaults.removeSourceColumn;
    	      this.removeSpecialCharacters = defaults.removeSpecialCharacters;
    	      this.rightColumns = defaults.rightColumns;
    	      this.sampleSize = defaults.sampleSize;
    	      this.sampleType = defaults.sampleType;
    	      this.secondInput = defaults.secondInput;
    	      this.secondaryInputs = defaults.secondaryInputs;
    	      this.sheetIndexes = defaults.sheetIndexes;
    	      this.sheetNames = defaults.sheetNames;
    	      this.sourceColumn = defaults.sourceColumn;
    	      this.sourceColumn1 = defaults.sourceColumn1;
    	      this.sourceColumn2 = defaults.sourceColumn2;
    	      this.sourceColumns = defaults.sourceColumns;
    	      this.startColumnIndex = defaults.startColumnIndex;
    	      this.startPattern = defaults.startPattern;
    	      this.startPosition = defaults.startPosition;
    	      this.startValue = defaults.startValue;
    	      this.stemmingMode = defaults.stemmingMode;
    	      this.stepCount = defaults.stepCount;
    	      this.stepIndex = defaults.stepIndex;
    	      this.stopWordsMode = defaults.stopWordsMode;
    	      this.strategy = defaults.strategy;
    	      this.targetColumn = defaults.targetColumn;
    	      this.targetColumnNames = defaults.targetColumnNames;
    	      this.targetDateFormat = defaults.targetDateFormat;
    	      this.targetIndex = defaults.targetIndex;
    	      this.timeZone = defaults.timeZone;
    	      this.tokenizerPattern = defaults.tokenizerPattern;
    	      this.trueString = defaults.trueString;
    	      this.udfLang = defaults.udfLang;
    	      this.units = defaults.units;
    	      this.unpivotColumn = defaults.unpivotColumn;
    	      this.upperBound = defaults.upperBound;
    	      this.useNewDataFrame = defaults.useNewDataFrame;
    	      this.value = defaults.value;
    	      this.value1 = defaults.value1;
    	      this.value2 = defaults.value2;
    	      this.valueColumn = defaults.valueColumn;
    	      this.viewFrame = defaults.viewFrame;
        }

        @CustomType.Setter
        public Builder aggregateFunction(@Nullable String aggregateFunction) {
            this.aggregateFunction = aggregateFunction;
            return this;
        }
        @CustomType.Setter
        public Builder base(@Nullable String base) {
            this.base = base;
            return this;
        }
        @CustomType.Setter
        public Builder caseStatement(@Nullable String caseStatement) {
            this.caseStatement = caseStatement;
            return this;
        }
        @CustomType.Setter
        public Builder categoryMap(@Nullable String categoryMap) {
            this.categoryMap = categoryMap;
            return this;
        }
        @CustomType.Setter
        public Builder charsToRemove(@Nullable String charsToRemove) {
            this.charsToRemove = charsToRemove;
            return this;
        }
        @CustomType.Setter
        public Builder collapseConsecutiveWhitespace(@Nullable String collapseConsecutiveWhitespace) {
            this.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }
        @CustomType.Setter
        public Builder columnDataType(@Nullable String columnDataType) {
            this.columnDataType = columnDataType;
            return this;
        }
        @CustomType.Setter
        public Builder columnRange(@Nullable String columnRange) {
            this.columnRange = columnRange;
            return this;
        }
        @CustomType.Setter
        public Builder count(@Nullable String count) {
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder customCharacters(@Nullable String customCharacters) {
            this.customCharacters = customCharacters;
            return this;
        }
        @CustomType.Setter
        public Builder customStopWords(@Nullable String customStopWords) {
            this.customStopWords = customStopWords;
            return this;
        }
        @CustomType.Setter
        public Builder customValue(@Nullable String customValue) {
            this.customValue = customValue;
            return this;
        }
        @CustomType.Setter
        public Builder datasetsColumns(@Nullable String datasetsColumns) {
            this.datasetsColumns = datasetsColumns;
            return this;
        }
        @CustomType.Setter
        public Builder dateAddValue(@Nullable String dateAddValue) {
            this.dateAddValue = dateAddValue;
            return this;
        }
        @CustomType.Setter
        public Builder dateTimeFormat(@Nullable String dateTimeFormat) {
            this.dateTimeFormat = dateTimeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder dateTimeParameters(@Nullable String dateTimeParameters) {
            this.dateTimeParameters = dateTimeParameters;
            return this;
        }
        @CustomType.Setter
        public Builder deleteOtherRows(@Nullable String deleteOtherRows) {
            this.deleteOtherRows = deleteOtherRows;
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder endPattern(@Nullable String endPattern) {
            this.endPattern = endPattern;
            return this;
        }
        @CustomType.Setter
        public Builder endPosition(@Nullable String endPosition) {
            this.endPosition = endPosition;
            return this;
        }
        @CustomType.Setter
        public Builder endValue(@Nullable String endValue) {
            this.endValue = endValue;
            return this;
        }
        @CustomType.Setter
        public Builder expandContractions(@Nullable String expandContractions) {
            this.expandContractions = expandContractions;
            return this;
        }
        @CustomType.Setter
        public Builder exponent(@Nullable String exponent) {
            this.exponent = exponent;
            return this;
        }
        @CustomType.Setter
        public Builder falseString(@Nullable String falseString) {
            this.falseString = falseString;
            return this;
        }
        @CustomType.Setter
        public Builder groupByAggFunctionOptions(@Nullable String groupByAggFunctionOptions) {
            this.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }
        @CustomType.Setter
        public Builder groupByColumns(@Nullable String groupByColumns) {
            this.groupByColumns = groupByColumns;
            return this;
        }
        @CustomType.Setter
        public Builder hiddenColumns(@Nullable String hiddenColumns) {
            this.hiddenColumns = hiddenColumns;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCase(@Nullable String ignoreCase) {
            this.ignoreCase = ignoreCase;
            return this;
        }
        @CustomType.Setter
        public Builder includeInSplit(@Nullable String includeInSplit) {
            this.includeInSplit = includeInSplit;
            return this;
        }
        @CustomType.Setter
        public Builder input(@Nullable RecipeParametersInputProperties input) {
            this.input = input;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable String interval) {
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder isText(@Nullable String isText) {
            this.isText = isText;
            return this;
        }
        @CustomType.Setter
        public Builder joinKeys(@Nullable String joinKeys) {
            this.joinKeys = joinKeys;
            return this;
        }
        @CustomType.Setter
        public Builder joinType(@Nullable String joinType) {
            this.joinType = joinType;
            return this;
        }
        @CustomType.Setter
        public Builder leftColumns(@Nullable String leftColumns) {
            this.leftColumns = leftColumns;
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable String limit) {
            this.limit = limit;
            return this;
        }
        @CustomType.Setter
        public Builder lowerBound(@Nullable String lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }
        @CustomType.Setter
        public Builder mapType(@Nullable String mapType) {
            this.mapType = mapType;
            return this;
        }
        @CustomType.Setter
        public Builder modeType(@Nullable String modeType) {
            this.modeType = modeType;
            return this;
        }
        @CustomType.Setter
        public Builder multiLine(@Nullable Boolean multiLine) {
            this.multiLine = multiLine;
            return this;
        }
        @CustomType.Setter
        public Builder numRows(@Nullable String numRows) {
            this.numRows = numRows;
            return this;
        }
        @CustomType.Setter
        public Builder numRowsAfter(@Nullable String numRowsAfter) {
            this.numRowsAfter = numRowsAfter;
            return this;
        }
        @CustomType.Setter
        public Builder numRowsBefore(@Nullable String numRowsBefore) {
            this.numRowsBefore = numRowsBefore;
            return this;
        }
        @CustomType.Setter
        public Builder orderByColumn(@Nullable String orderByColumn) {
            this.orderByColumn = orderByColumn;
            return this;
        }
        @CustomType.Setter
        public Builder orderByColumns(@Nullable String orderByColumns) {
            this.orderByColumns = orderByColumns;
            return this;
        }
        @CustomType.Setter
        public Builder other(@Nullable String other) {
            this.other = other;
            return this;
        }
        @CustomType.Setter
        public Builder pattern(@Nullable String pattern) {
            this.pattern = pattern;
            return this;
        }
        @CustomType.Setter
        public Builder patternOption1(@Nullable String patternOption1) {
            this.patternOption1 = patternOption1;
            return this;
        }
        @CustomType.Setter
        public Builder patternOption2(@Nullable String patternOption2) {
            this.patternOption2 = patternOption2;
            return this;
        }
        @CustomType.Setter
        public Builder patternOptions(@Nullable String patternOptions) {
            this.patternOptions = patternOptions;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable String period) {
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder position(@Nullable String position) {
            this.position = position;
            return this;
        }
        @CustomType.Setter
        public Builder removeAllPunctuation(@Nullable String removeAllPunctuation) {
            this.removeAllPunctuation = removeAllPunctuation;
            return this;
        }
        @CustomType.Setter
        public Builder removeAllQuotes(@Nullable String removeAllQuotes) {
            this.removeAllQuotes = removeAllQuotes;
            return this;
        }
        @CustomType.Setter
        public Builder removeAllWhitespace(@Nullable String removeAllWhitespace) {
            this.removeAllWhitespace = removeAllWhitespace;
            return this;
        }
        @CustomType.Setter
        public Builder removeCustomCharacters(@Nullable String removeCustomCharacters) {
            this.removeCustomCharacters = removeCustomCharacters;
            return this;
        }
        @CustomType.Setter
        public Builder removeCustomValue(@Nullable String removeCustomValue) {
            this.removeCustomValue = removeCustomValue;
            return this;
        }
        @CustomType.Setter
        public Builder removeLeadingAndTrailingPunctuation(@Nullable String removeLeadingAndTrailingPunctuation) {
            this.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }
        @CustomType.Setter
        public Builder removeLeadingAndTrailingQuotes(@Nullable String removeLeadingAndTrailingQuotes) {
            this.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }
        @CustomType.Setter
        public Builder removeLeadingAndTrailingWhitespace(@Nullable String removeLeadingAndTrailingWhitespace) {
            this.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }
        @CustomType.Setter
        public Builder removeLetters(@Nullable String removeLetters) {
            this.removeLetters = removeLetters;
            return this;
        }
        @CustomType.Setter
        public Builder removeNumbers(@Nullable String removeNumbers) {
            this.removeNumbers = removeNumbers;
            return this;
        }
        @CustomType.Setter
        public Builder removeSourceColumn(@Nullable String removeSourceColumn) {
            this.removeSourceColumn = removeSourceColumn;
            return this;
        }
        @CustomType.Setter
        public Builder removeSpecialCharacters(@Nullable String removeSpecialCharacters) {
            this.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }
        @CustomType.Setter
        public Builder rightColumns(@Nullable String rightColumns) {
            this.rightColumns = rightColumns;
            return this;
        }
        @CustomType.Setter
        public Builder sampleSize(@Nullable String sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }
        @CustomType.Setter
        public Builder sampleType(@Nullable String sampleType) {
            this.sampleType = sampleType;
            return this;
        }
        @CustomType.Setter
        public Builder secondInput(@Nullable String secondInput) {
            this.secondInput = secondInput;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryInputs(@Nullable List<RecipeSecondaryInput> secondaryInputs) {
            this.secondaryInputs = secondaryInputs;
            return this;
        }
        public Builder secondaryInputs(RecipeSecondaryInput... secondaryInputs) {
            return secondaryInputs(List.of(secondaryInputs));
        }
        @CustomType.Setter
        public Builder sheetIndexes(@Nullable List<Integer> sheetIndexes) {
            this.sheetIndexes = sheetIndexes;
            return this;
        }
        public Builder sheetIndexes(Integer... sheetIndexes) {
            return sheetIndexes(List.of(sheetIndexes));
        }
        @CustomType.Setter
        public Builder sheetNames(@Nullable List<String> sheetNames) {
            this.sheetNames = sheetNames;
            return this;
        }
        public Builder sheetNames(String... sheetNames) {
            return sheetNames(List.of(sheetNames));
        }
        @CustomType.Setter
        public Builder sourceColumn(@Nullable String sourceColumn) {
            this.sourceColumn = sourceColumn;
            return this;
        }
        @CustomType.Setter
        public Builder sourceColumn1(@Nullable String sourceColumn1) {
            this.sourceColumn1 = sourceColumn1;
            return this;
        }
        @CustomType.Setter
        public Builder sourceColumn2(@Nullable String sourceColumn2) {
            this.sourceColumn2 = sourceColumn2;
            return this;
        }
        @CustomType.Setter
        public Builder sourceColumns(@Nullable String sourceColumns) {
            this.sourceColumns = sourceColumns;
            return this;
        }
        @CustomType.Setter
        public Builder startColumnIndex(@Nullable String startColumnIndex) {
            this.startColumnIndex = startColumnIndex;
            return this;
        }
        @CustomType.Setter
        public Builder startPattern(@Nullable String startPattern) {
            this.startPattern = startPattern;
            return this;
        }
        @CustomType.Setter
        public Builder startPosition(@Nullable String startPosition) {
            this.startPosition = startPosition;
            return this;
        }
        @CustomType.Setter
        public Builder startValue(@Nullable String startValue) {
            this.startValue = startValue;
            return this;
        }
        @CustomType.Setter
        public Builder stemmingMode(@Nullable String stemmingMode) {
            this.stemmingMode = stemmingMode;
            return this;
        }
        @CustomType.Setter
        public Builder stepCount(@Nullable String stepCount) {
            this.stepCount = stepCount;
            return this;
        }
        @CustomType.Setter
        public Builder stepIndex(@Nullable String stepIndex) {
            this.stepIndex = stepIndex;
            return this;
        }
        @CustomType.Setter
        public Builder stopWordsMode(@Nullable String stopWordsMode) {
            this.stopWordsMode = stopWordsMode;
            return this;
        }
        @CustomType.Setter
        public Builder strategy(@Nullable String strategy) {
            this.strategy = strategy;
            return this;
        }
        @CustomType.Setter
        public Builder targetColumn(@Nullable String targetColumn) {
            this.targetColumn = targetColumn;
            return this;
        }
        @CustomType.Setter
        public Builder targetColumnNames(@Nullable String targetColumnNames) {
            this.targetColumnNames = targetColumnNames;
            return this;
        }
        @CustomType.Setter
        public Builder targetDateFormat(@Nullable String targetDateFormat) {
            this.targetDateFormat = targetDateFormat;
            return this;
        }
        @CustomType.Setter
        public Builder targetIndex(@Nullable String targetIndex) {
            this.targetIndex = targetIndex;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder tokenizerPattern(@Nullable String tokenizerPattern) {
            this.tokenizerPattern = tokenizerPattern;
            return this;
        }
        @CustomType.Setter
        public Builder trueString(@Nullable String trueString) {
            this.trueString = trueString;
            return this;
        }
        @CustomType.Setter
        public Builder udfLang(@Nullable String udfLang) {
            this.udfLang = udfLang;
            return this;
        }
        @CustomType.Setter
        public Builder units(@Nullable String units) {
            this.units = units;
            return this;
        }
        @CustomType.Setter
        public Builder unpivotColumn(@Nullable String unpivotColumn) {
            this.unpivotColumn = unpivotColumn;
            return this;
        }
        @CustomType.Setter
        public Builder upperBound(@Nullable String upperBound) {
            this.upperBound = upperBound;
            return this;
        }
        @CustomType.Setter
        public Builder useNewDataFrame(@Nullable String useNewDataFrame) {
            this.useNewDataFrame = useNewDataFrame;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder value1(@Nullable String value1) {
            this.value1 = value1;
            return this;
        }
        @CustomType.Setter
        public Builder value2(@Nullable String value2) {
            this.value2 = value2;
            return this;
        }
        @CustomType.Setter
        public Builder valueColumn(@Nullable String valueColumn) {
            this.valueColumn = valueColumn;
            return this;
        }
        @CustomType.Setter
        public Builder viewFrame(@Nullable String viewFrame) {
            this.viewFrame = viewFrame;
            return this;
        }
        public RecipeParameters build() {
            final var o = new RecipeParameters();
            o.aggregateFunction = aggregateFunction;
            o.base = base;
            o.caseStatement = caseStatement;
            o.categoryMap = categoryMap;
            o.charsToRemove = charsToRemove;
            o.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            o.columnDataType = columnDataType;
            o.columnRange = columnRange;
            o.count = count;
            o.customCharacters = customCharacters;
            o.customStopWords = customStopWords;
            o.customValue = customValue;
            o.datasetsColumns = datasetsColumns;
            o.dateAddValue = dateAddValue;
            o.dateTimeFormat = dateTimeFormat;
            o.dateTimeParameters = dateTimeParameters;
            o.deleteOtherRows = deleteOtherRows;
            o.delimiter = delimiter;
            o.endPattern = endPattern;
            o.endPosition = endPosition;
            o.endValue = endValue;
            o.expandContractions = expandContractions;
            o.exponent = exponent;
            o.falseString = falseString;
            o.groupByAggFunctionOptions = groupByAggFunctionOptions;
            o.groupByColumns = groupByColumns;
            o.hiddenColumns = hiddenColumns;
            o.ignoreCase = ignoreCase;
            o.includeInSplit = includeInSplit;
            o.input = input;
            o.interval = interval;
            o.isText = isText;
            o.joinKeys = joinKeys;
            o.joinType = joinType;
            o.leftColumns = leftColumns;
            o.limit = limit;
            o.lowerBound = lowerBound;
            o.mapType = mapType;
            o.modeType = modeType;
            o.multiLine = multiLine;
            o.numRows = numRows;
            o.numRowsAfter = numRowsAfter;
            o.numRowsBefore = numRowsBefore;
            o.orderByColumn = orderByColumn;
            o.orderByColumns = orderByColumns;
            o.other = other;
            o.pattern = pattern;
            o.patternOption1 = patternOption1;
            o.patternOption2 = patternOption2;
            o.patternOptions = patternOptions;
            o.period = period;
            o.position = position;
            o.removeAllPunctuation = removeAllPunctuation;
            o.removeAllQuotes = removeAllQuotes;
            o.removeAllWhitespace = removeAllWhitespace;
            o.removeCustomCharacters = removeCustomCharacters;
            o.removeCustomValue = removeCustomValue;
            o.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            o.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            o.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            o.removeLetters = removeLetters;
            o.removeNumbers = removeNumbers;
            o.removeSourceColumn = removeSourceColumn;
            o.removeSpecialCharacters = removeSpecialCharacters;
            o.rightColumns = rightColumns;
            o.sampleSize = sampleSize;
            o.sampleType = sampleType;
            o.secondInput = secondInput;
            o.secondaryInputs = secondaryInputs;
            o.sheetIndexes = sheetIndexes;
            o.sheetNames = sheetNames;
            o.sourceColumn = sourceColumn;
            o.sourceColumn1 = sourceColumn1;
            o.sourceColumn2 = sourceColumn2;
            o.sourceColumns = sourceColumns;
            o.startColumnIndex = startColumnIndex;
            o.startPattern = startPattern;
            o.startPosition = startPosition;
            o.startValue = startValue;
            o.stemmingMode = stemmingMode;
            o.stepCount = stepCount;
            o.stepIndex = stepIndex;
            o.stopWordsMode = stopWordsMode;
            o.strategy = strategy;
            o.targetColumn = targetColumn;
            o.targetColumnNames = targetColumnNames;
            o.targetDateFormat = targetDateFormat;
            o.targetIndex = targetIndex;
            o.timeZone = timeZone;
            o.tokenizerPattern = tokenizerPattern;
            o.trueString = trueString;
            o.udfLang = udfLang;
            o.units = units;
            o.unpivotColumn = unpivotColumn;
            o.upperBound = upperBound;
            o.useNewDataFrame = useNewDataFrame;
            o.value = value;
            o.value1 = value1;
            o.value2 = value2;
            o.valueColumn = valueColumn;
            o.viewFrame = viewFrame;
            return o;
        }
    }
}
