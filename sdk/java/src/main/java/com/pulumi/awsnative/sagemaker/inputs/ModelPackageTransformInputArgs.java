// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformInputCompressionType;
import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformInputSplitType;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageDataSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the input source of a transform job and the way the transform job consumes it.
 * 
 */
public final class ModelPackageTransformInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageTransformInputArgs Empty = new ModelPackageTransformInputArgs();

    /**
     * If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
     * 
     */
    @Import(name="compressionType")
    private @Nullable Output<ModelPackageTransformInputCompressionType> compressionType;

    /**
     * @return If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
     * 
     */
    public Optional<Output<ModelPackageTransformInputCompressionType>> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }

    /**
     * The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    @Import(name="dataSource", required=true)
    private Output<ModelPackageDataSourceArgs> dataSource;

    public Output<ModelPackageDataSourceArgs> dataSource() {
        return this.dataSource;
    }

    /**
     * The method to use to split the transform job&#39;s data files into smaller batches.
     * 
     */
    @Import(name="splitType")
    private @Nullable Output<ModelPackageTransformInputSplitType> splitType;

    /**
     * @return The method to use to split the transform job&#39;s data files into smaller batches.
     * 
     */
    public Optional<Output<ModelPackageTransformInputSplitType>> splitType() {
        return Optional.ofNullable(this.splitType);
    }

    private ModelPackageTransformInputArgs() {}

    private ModelPackageTransformInputArgs(ModelPackageTransformInputArgs $) {
        this.compressionType = $.compressionType;
        this.contentType = $.contentType;
        this.dataSource = $.dataSource;
        this.splitType = $.splitType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageTransformInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageTransformInputArgs $;

        public Builder() {
            $ = new ModelPackageTransformInputArgs();
        }

        public Builder(ModelPackageTransformInputArgs defaults) {
            $ = new ModelPackageTransformInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compressionType If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(@Nullable Output<ModelPackageTransformInputCompressionType> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        /**
         * @param compressionType If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
         * 
         * @return builder
         * 
         */
        public Builder compressionType(ModelPackageTransformInputCompressionType compressionType) {
            return compressionType(Output.of(compressionType));
        }

        /**
         * @param contentType The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder dataSource(Output<ModelPackageDataSourceArgs> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(ModelPackageDataSourceArgs dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param splitType The method to use to split the transform job&#39;s data files into smaller batches.
         * 
         * @return builder
         * 
         */
        public Builder splitType(@Nullable Output<ModelPackageTransformInputSplitType> splitType) {
            $.splitType = splitType;
            return this;
        }

        /**
         * @param splitType The method to use to split the transform job&#39;s data files into smaller batches.
         * 
         * @return builder
         * 
         */
        public Builder splitType(ModelPackageTransformInputSplitType splitType) {
            return splitType(Output.of(splitType));
        }

        public ModelPackageTransformInputArgs build() {
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            return $;
        }
    }

}
