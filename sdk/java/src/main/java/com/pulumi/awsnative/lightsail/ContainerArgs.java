// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.awsnative.lightsail.inputs.ContainerPublicDomainNameArgs;
import com.pulumi.awsnative.lightsail.inputs.ContainerServiceDeploymentArgs;
import com.pulumi.awsnative.lightsail.inputs.ContainerTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerArgs Empty = new ContainerArgs();

    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     * 
     */
    @Import(name="containerServiceDeployment")
    private @Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment;

    /**
     * @return Describes a container deployment configuration of an Amazon Lightsail container service.
     * 
     */
    public Optional<Output<ContainerServiceDeploymentArgs>> containerServiceDeployment() {
        return Optional.ofNullable(this.containerServiceDeployment);
    }

    /**
     * A Boolean value to indicate whether the container service is disabled.
     * 
     */
    @Import(name="isDisabled")
    private @Nullable Output<Boolean> isDisabled;

    /**
     * @return A Boolean value to indicate whether the container service is disabled.
     * 
     */
    public Optional<Output<Boolean>> isDisabled() {
        return Optional.ofNullable(this.isDisabled);
    }

    /**
     * The power specification for the container service.
     * 
     */
    @Import(name="power", required=true)
    private Output<String> power;

    /**
     * @return The power specification for the container service.
     * 
     */
    public Output<String> power() {
        return this.power;
    }

    /**
     * The public domain names to use with the container service, such as example.com and www.example.com.
     * 
     */
    @Import(name="publicDomainNames")
    private @Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames;

    /**
     * @return The public domain names to use with the container service, such as example.com and www.example.com.
     * 
     */
    public Optional<Output<List<ContainerPublicDomainNameArgs>>> publicDomainNames() {
        return Optional.ofNullable(this.publicDomainNames);
    }

    /**
     * The scale specification for the container service.
     * 
     */
    @Import(name="scale", required=true)
    private Output<Integer> scale;

    /**
     * @return The scale specification for the container service.
     * 
     */
    public Output<Integer> scale() {
        return this.scale;
    }

    /**
     * The name for the container service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name for the container service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ContainerTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<ContainerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ContainerArgs() {}

    private ContainerArgs(ContainerArgs $) {
        this.containerServiceDeployment = $.containerServiceDeployment;
        this.isDisabled = $.isDisabled;
        this.power = $.power;
        this.publicDomainNames = $.publicDomainNames;
        this.scale = $.scale;
        this.serviceName = $.serviceName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerArgs $;

        public Builder() {
            $ = new ContainerArgs();
        }

        public Builder(ContainerArgs defaults) {
            $ = new ContainerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerServiceDeployment Describes a container deployment configuration of an Amazon Lightsail container service.
         * 
         * @return builder
         * 
         */
        public Builder containerServiceDeployment(@Nullable Output<ContainerServiceDeploymentArgs> containerServiceDeployment) {
            $.containerServiceDeployment = containerServiceDeployment;
            return this;
        }

        /**
         * @param containerServiceDeployment Describes a container deployment configuration of an Amazon Lightsail container service.
         * 
         * @return builder
         * 
         */
        public Builder containerServiceDeployment(ContainerServiceDeploymentArgs containerServiceDeployment) {
            return containerServiceDeployment(Output.of(containerServiceDeployment));
        }

        /**
         * @param isDisabled A Boolean value to indicate whether the container service is disabled.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(@Nullable Output<Boolean> isDisabled) {
            $.isDisabled = isDisabled;
            return this;
        }

        /**
         * @param isDisabled A Boolean value to indicate whether the container service is disabled.
         * 
         * @return builder
         * 
         */
        public Builder isDisabled(Boolean isDisabled) {
            return isDisabled(Output.of(isDisabled));
        }

        /**
         * @param power The power specification for the container service.
         * 
         * @return builder
         * 
         */
        public Builder power(Output<String> power) {
            $.power = power;
            return this;
        }

        /**
         * @param power The power specification for the container service.
         * 
         * @return builder
         * 
         */
        public Builder power(String power) {
            return power(Output.of(power));
        }

        /**
         * @param publicDomainNames The public domain names to use with the container service, such as example.com and www.example.com.
         * 
         * @return builder
         * 
         */
        public Builder publicDomainNames(@Nullable Output<List<ContainerPublicDomainNameArgs>> publicDomainNames) {
            $.publicDomainNames = publicDomainNames;
            return this;
        }

        /**
         * @param publicDomainNames The public domain names to use with the container service, such as example.com and www.example.com.
         * 
         * @return builder
         * 
         */
        public Builder publicDomainNames(List<ContainerPublicDomainNameArgs> publicDomainNames) {
            return publicDomainNames(Output.of(publicDomainNames));
        }

        /**
         * @param publicDomainNames The public domain names to use with the container service, such as example.com and www.example.com.
         * 
         * @return builder
         * 
         */
        public Builder publicDomainNames(ContainerPublicDomainNameArgs... publicDomainNames) {
            return publicDomainNames(List.of(publicDomainNames));
        }

        /**
         * @param scale The scale specification for the container service.
         * 
         * @return builder
         * 
         */
        public Builder scale(Output<Integer> scale) {
            $.scale = scale;
            return this;
        }

        /**
         * @param scale The scale specification for the container service.
         * 
         * @return builder
         * 
         */
        public Builder scale(Integer scale) {
            return scale(Output.of(scale));
        }

        /**
         * @param serviceName The name for the container service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name for the container service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ContainerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ContainerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(ContainerTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ContainerArgs build() {
            $.power = Objects.requireNonNull($.power, "expected parameter 'power' to be non-null");
            $.scale = Objects.requireNonNull($.scale, "expected parameter 'scale' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
