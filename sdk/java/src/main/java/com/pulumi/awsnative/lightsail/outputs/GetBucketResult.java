// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.awsnative.lightsail.outputs.BucketAccessRules;
import com.pulumi.awsnative.lightsail.outputs.BucketTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBucketResult {
    /**
     * @return Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket&#39;s bundle only one time within a monthly AWS billing cycle.
     * 
     */
    private @Nullable Boolean ableToUpdateBundle;
    private @Nullable BucketAccessRules accessRules;
    private @Nullable String bucketArn;
    /**
     * @return The ID of the bundle to use for the bucket.
     * 
     */
    private @Nullable String bundleId;
    /**
     * @return Specifies whether to enable or disable versioning of objects in the bucket.
     * 
     */
    private @Nullable Boolean objectVersioning;
    /**
     * @return An array of strings to specify the AWS account IDs that can access the bucket.
     * 
     */
    private @Nullable List<String> readOnlyAccessAccounts;
    /**
     * @return The names of the Lightsail resources for which to set bucket access.
     * 
     */
    private @Nullable List<String> resourcesReceivingAccess;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<BucketTag> tags;
    /**
     * @return The URL of the bucket.
     * 
     */
    private @Nullable String url;

    private GetBucketResult() {}
    /**
     * @return Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket&#39;s bundle only one time within a monthly AWS billing cycle.
     * 
     */
    public Optional<Boolean> ableToUpdateBundle() {
        return Optional.ofNullable(this.ableToUpdateBundle);
    }
    public Optional<BucketAccessRules> accessRules() {
        return Optional.ofNullable(this.accessRules);
    }
    public Optional<String> bucketArn() {
        return Optional.ofNullable(this.bucketArn);
    }
    /**
     * @return The ID of the bundle to use for the bucket.
     * 
     */
    public Optional<String> bundleId() {
        return Optional.ofNullable(this.bundleId);
    }
    /**
     * @return Specifies whether to enable or disable versioning of objects in the bucket.
     * 
     */
    public Optional<Boolean> objectVersioning() {
        return Optional.ofNullable(this.objectVersioning);
    }
    /**
     * @return An array of strings to specify the AWS account IDs that can access the bucket.
     * 
     */
    public List<String> readOnlyAccessAccounts() {
        return this.readOnlyAccessAccounts == null ? List.of() : this.readOnlyAccessAccounts;
    }
    /**
     * @return The names of the Lightsail resources for which to set bucket access.
     * 
     */
    public List<String> resourcesReceivingAccess() {
        return this.resourcesReceivingAccess == null ? List.of() : this.resourcesReceivingAccess;
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<BucketTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return The URL of the bucket.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean ableToUpdateBundle;
        private @Nullable BucketAccessRules accessRules;
        private @Nullable String bucketArn;
        private @Nullable String bundleId;
        private @Nullable Boolean objectVersioning;
        private @Nullable List<String> readOnlyAccessAccounts;
        private @Nullable List<String> resourcesReceivingAccess;
        private @Nullable List<BucketTag> tags;
        private @Nullable String url;
        public Builder() {}
        public Builder(GetBucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ableToUpdateBundle = defaults.ableToUpdateBundle;
    	      this.accessRules = defaults.accessRules;
    	      this.bucketArn = defaults.bucketArn;
    	      this.bundleId = defaults.bundleId;
    	      this.objectVersioning = defaults.objectVersioning;
    	      this.readOnlyAccessAccounts = defaults.readOnlyAccessAccounts;
    	      this.resourcesReceivingAccess = defaults.resourcesReceivingAccess;
    	      this.tags = defaults.tags;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder ableToUpdateBundle(@Nullable Boolean ableToUpdateBundle) {
            this.ableToUpdateBundle = ableToUpdateBundle;
            return this;
        }
        @CustomType.Setter
        public Builder accessRules(@Nullable BucketAccessRules accessRules) {
            this.accessRules = accessRules;
            return this;
        }
        @CustomType.Setter
        public Builder bucketArn(@Nullable String bucketArn) {
            this.bucketArn = bucketArn;
            return this;
        }
        @CustomType.Setter
        public Builder bundleId(@Nullable String bundleId) {
            this.bundleId = bundleId;
            return this;
        }
        @CustomType.Setter
        public Builder objectVersioning(@Nullable Boolean objectVersioning) {
            this.objectVersioning = objectVersioning;
            return this;
        }
        @CustomType.Setter
        public Builder readOnlyAccessAccounts(@Nullable List<String> readOnlyAccessAccounts) {
            this.readOnlyAccessAccounts = readOnlyAccessAccounts;
            return this;
        }
        public Builder readOnlyAccessAccounts(String... readOnlyAccessAccounts) {
            return readOnlyAccessAccounts(List.of(readOnlyAccessAccounts));
        }
        @CustomType.Setter
        public Builder resourcesReceivingAccess(@Nullable List<String> resourcesReceivingAccess) {
            this.resourcesReceivingAccess = resourcesReceivingAccess;
            return this;
        }
        public Builder resourcesReceivingAccess(String... resourcesReceivingAccess) {
            return resourcesReceivingAccess(List.of(resourcesReceivingAccess));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<BucketTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(BucketTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {
            this.url = url;
            return this;
        }
        public GetBucketResult build() {
            final var o = new GetBucketResult();
            o.ableToUpdateBundle = ableToUpdateBundle;
            o.accessRules = accessRules;
            o.bucketArn = bucketArn;
            o.bundleId = bundleId;
            o.objectVersioning = objectVersioning;
            o.readOnlyAccessAccounts = readOnlyAccessAccounts;
            o.resourcesReceivingAccess = resourcesReceivingAccess;
            o.tags = tags;
            o.url = url;
            return o;
        }
    }
}
