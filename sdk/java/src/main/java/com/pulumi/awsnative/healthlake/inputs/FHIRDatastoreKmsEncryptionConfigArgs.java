// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.healthlake.inputs;

import com.pulumi.awsnative.healthlake.enums.FHIRDatastoreKmsEncryptionConfigCmkType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
 * 
 */
public final class FHIRDatastoreKmsEncryptionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FHIRDatastoreKmsEncryptionConfigArgs Empty = new FHIRDatastoreKmsEncryptionConfigArgs();

    /**
     * The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
     * 
     */
    @Import(name="cmkType", required=true)
    private Output<FHIRDatastoreKmsEncryptionConfigCmkType> cmkType;

    /**
     * @return The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
     * 
     */
    public Output<FHIRDatastoreKmsEncryptionConfigCmkType> cmkType() {
        return this.cmkType;
    }

    /**
     * The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    private FHIRDatastoreKmsEncryptionConfigArgs() {}

    private FHIRDatastoreKmsEncryptionConfigArgs(FHIRDatastoreKmsEncryptionConfigArgs $) {
        this.cmkType = $.cmkType;
        this.kmsKeyId = $.kmsKeyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FHIRDatastoreKmsEncryptionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FHIRDatastoreKmsEncryptionConfigArgs $;

        public Builder() {
            $ = new FHIRDatastoreKmsEncryptionConfigArgs();
        }

        public Builder(FHIRDatastoreKmsEncryptionConfigArgs defaults) {
            $ = new FHIRDatastoreKmsEncryptionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cmkType The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
         * 
         * @return builder
         * 
         */
        public Builder cmkType(Output<FHIRDatastoreKmsEncryptionConfigCmkType> cmkType) {
            $.cmkType = cmkType;
            return this;
        }

        /**
         * @param cmkType The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
         * 
         * @return builder
         * 
         */
        public Builder cmkType(FHIRDatastoreKmsEncryptionConfigCmkType cmkType) {
            return cmkType(Output.of(cmkType));
        }

        /**
         * @param kmsKeyId The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        public FHIRDatastoreKmsEncryptionConfigArgs build() {
            $.cmkType = Objects.requireNonNull($.cmkType, "expected parameter 'cmkType' to be non-null");
            return $;
        }
    }

}
