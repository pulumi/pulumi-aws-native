// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
 * 
 */
public final class PackagingConfigurationSpekeKeyProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackagingConfigurationSpekeKeyProviderArgs Empty = new PackagingConfigurationSpekeKeyProviderArgs();

    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The system IDs to include in key requests.
     * 
     */
    @Import(name="systemIds", required=true)
    private Output<List<String>> systemIds;

    /**
     * @return The system IDs to include in key requests.
     * 
     */
    public Output<List<String>> systemIds() {
        return this.systemIds;
    }

    /**
     * The URL of the external key provider service.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the external key provider service.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private PackagingConfigurationSpekeKeyProviderArgs() {}

    private PackagingConfigurationSpekeKeyProviderArgs(PackagingConfigurationSpekeKeyProviderArgs $) {
        this.roleArn = $.roleArn;
        this.systemIds = $.systemIds;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackagingConfigurationSpekeKeyProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackagingConfigurationSpekeKeyProviderArgs $;

        public Builder() {
            $ = new PackagingConfigurationSpekeKeyProviderArgs();
        }

        public Builder(PackagingConfigurationSpekeKeyProviderArgs defaults) {
            $ = new PackagingConfigurationSpekeKeyProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param systemIds The system IDs to include in key requests.
         * 
         * @return builder
         * 
         */
        public Builder systemIds(Output<List<String>> systemIds) {
            $.systemIds = systemIds;
            return this;
        }

        /**
         * @param systemIds The system IDs to include in key requests.
         * 
         * @return builder
         * 
         */
        public Builder systemIds(List<String> systemIds) {
            return systemIds(Output.of(systemIds));
        }

        /**
         * @param systemIds The system IDs to include in key requests.
         * 
         * @return builder
         * 
         */
        public Builder systemIds(String... systemIds) {
            return systemIds(List.of(systemIds));
        }

        /**
         * @param url The URL of the external key provider service.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the external key provider service.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public PackagingConfigurationSpekeKeyProviderArgs build() {
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.systemIds = Objects.requireNonNull($.systemIds, "expected parameter 'systemIds' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
