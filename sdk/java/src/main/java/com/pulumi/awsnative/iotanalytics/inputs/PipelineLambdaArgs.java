// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iotanalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineLambdaArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineLambdaArgs Empty = new PipelineLambdaArgs();

    @Import(name="batchSize", required=true)
    private Output<Integer> batchSize;

    public Output<Integer> batchSize() {
        return this.batchSize;
    }

    @Import(name="lambdaName", required=true)
    private Output<String> lambdaName;

    public Output<String> lambdaName() {
        return this.lambdaName;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="next")
    private @Nullable Output<String> next;

    public Optional<Output<String>> next() {
        return Optional.ofNullable(this.next);
    }

    private PipelineLambdaArgs() {}

    private PipelineLambdaArgs(PipelineLambdaArgs $) {
        this.batchSize = $.batchSize;
        this.lambdaName = $.lambdaName;
        this.name = $.name;
        this.next = $.next;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineLambdaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineLambdaArgs $;

        public Builder() {
            $ = new PipelineLambdaArgs();
        }

        public Builder(PipelineLambdaArgs defaults) {
            $ = new PipelineLambdaArgs(Objects.requireNonNull(defaults));
        }

        public Builder batchSize(Output<Integer> batchSize) {
            $.batchSize = batchSize;
            return this;
        }

        public Builder batchSize(Integer batchSize) {
            return batchSize(Output.of(batchSize));
        }

        public Builder lambdaName(Output<String> lambdaName) {
            $.lambdaName = lambdaName;
            return this;
        }

        public Builder lambdaName(String lambdaName) {
            return lambdaName(Output.of(lambdaName));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder next(@Nullable Output<String> next) {
            $.next = next;
            return this;
        }

        public Builder next(String next) {
            return next(Output.of(next));
        }

        public PipelineLambdaArgs build() {
            $.batchSize = Objects.requireNonNull($.batchSize, "expected parameter 'batchSize' to be non-null");
            $.lambdaName = Objects.requireNonNull($.lambdaName, "expected parameter 'lambdaName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
