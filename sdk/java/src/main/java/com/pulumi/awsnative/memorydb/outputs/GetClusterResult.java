// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.memorydb.outputs;

import com.pulumi.awsnative.memorydb.outputs.ClusterEndpoint;
import com.pulumi.awsnative.memorydb.outputs.ClusterTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    /**
     * @return The name of the Access Control List to associate with the cluster.
     * 
     */
    private @Nullable String aCLName;
    /**
     * @return The Amazon Resource Name (ARN) of the cluster.
     * 
     */
    private @Nullable String aRN;
    /**
     * @return A flag that enables automatic minor version upgrade when set to true.
     * 
     * You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
     * 
     */
    private @Nullable Boolean autoMinorVersionUpgrade;
    /**
     * @return The cluster endpoint.
     * 
     */
    private @Nullable ClusterEndpoint clusterEndpoint;
    /**
     * @return An optional description of the cluster.
     * 
     */
    private @Nullable String description;
    /**
     * @return The Redis engine version used by the cluster.
     * 
     */
    private @Nullable String engineVersion;
    /**
     * @return The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
     * 
     */
    private @Nullable String finalSnapshotName;
    /**
     * @return Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     * 
     */
    private @Nullable String maintenanceWindow;
    /**
     * @return The compute and memory capacity of the nodes in the cluster.
     * 
     */
    private @Nullable String nodeType;
    /**
     * @return The number of replicas to apply to each shard. The limit is 5.
     * 
     */
    private @Nullable Integer numReplicasPerShard;
    /**
     * @return The number of shards the cluster will contain.
     * 
     */
    private @Nullable Integer numShards;
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    private @Nullable String parameterGroupName;
    /**
     * @return The status of the parameter group used by the cluster.
     * 
     */
    private @Nullable String parameterGroupStatus;
    /**
     * @return One or more Amazon VPC security groups associated with this cluster.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     * 
     */
    private @Nullable Integer snapshotRetentionLimit;
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     * 
     */
    private @Nullable String snapshotWindow;
    /**
     * @return The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     * 
     */
    private @Nullable String snsTopicArn;
    /**
     * @return The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     * 
     */
    private @Nullable String snsTopicStatus;
    /**
     * @return The status of the cluster. For example, Available, Updating, Creating.
     * 
     */
    private @Nullable String status;
    /**
     * @return The name of the subnet group to be used for the cluster.
     * 
     */
    private @Nullable String subnetGroupName;
    /**
     * @return An array of key-value pairs to apply to this cluster.
     * 
     */
    private @Nullable List<ClusterTag> tags;

    private GetClusterResult() {}
    /**
     * @return The name of the Access Control List to associate with the cluster.
     * 
     */
    public Optional<String> aCLName() {
        return Optional.ofNullable(this.aCLName);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the cluster.
     * 
     */
    public Optional<String> aRN() {
        return Optional.ofNullable(this.aRN);
    }
    /**
     * @return A flag that enables automatic minor version upgrade when set to true.
     * 
     * You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
     * 
     */
    public Optional<Boolean> autoMinorVersionUpgrade() {
        return Optional.ofNullable(this.autoMinorVersionUpgrade);
    }
    /**
     * @return The cluster endpoint.
     * 
     */
    public Optional<ClusterEndpoint> clusterEndpoint() {
        return Optional.ofNullable(this.clusterEndpoint);
    }
    /**
     * @return An optional description of the cluster.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The Redis engine version used by the cluster.
     * 
     */
    public Optional<String> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }
    /**
     * @return The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
     * 
     */
    public Optional<String> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }
    /**
     * @return Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return The compute and memory capacity of the nodes in the cluster.
     * 
     */
    public Optional<String> nodeType() {
        return Optional.ofNullable(this.nodeType);
    }
    /**
     * @return The number of replicas to apply to each shard. The limit is 5.
     * 
     */
    public Optional<Integer> numReplicasPerShard() {
        return Optional.ofNullable(this.numReplicasPerShard);
    }
    /**
     * @return The number of shards the cluster will contain.
     * 
     */
    public Optional<Integer> numShards() {
        return Optional.ofNullable(this.numShards);
    }
    /**
     * @return The name of the parameter group associated with the cluster.
     * 
     */
    public Optional<String> parameterGroupName() {
        return Optional.ofNullable(this.parameterGroupName);
    }
    /**
     * @return The status of the parameter group used by the cluster.
     * 
     */
    public Optional<String> parameterGroupStatus() {
        return Optional.ofNullable(this.parameterGroupStatus);
    }
    /**
     * @return One or more Amazon VPC security groups associated with this cluster.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
     * 
     */
    public Optional<Integer> snapshotRetentionLimit() {
        return Optional.ofNullable(this.snapshotRetentionLimit);
    }
    /**
     * @return The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
     * 
     */
    public Optional<String> snapshotWindow() {
        return Optional.ofNullable(this.snapshotWindow);
    }
    /**
     * @return The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
     * 
     */
    public Optional<String> snsTopicArn() {
        return Optional.ofNullable(this.snsTopicArn);
    }
    /**
     * @return The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
     * 
     */
    public Optional<String> snsTopicStatus() {
        return Optional.ofNullable(this.snsTopicStatus);
    }
    /**
     * @return The status of the cluster. For example, Available, Updating, Creating.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return The name of the subnet group to be used for the cluster.
     * 
     */
    public Optional<String> subnetGroupName() {
        return Optional.ofNullable(this.subnetGroupName);
    }
    /**
     * @return An array of key-value pairs to apply to this cluster.
     * 
     */
    public List<ClusterTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aCLName;
        private @Nullable String aRN;
        private @Nullable Boolean autoMinorVersionUpgrade;
        private @Nullable ClusterEndpoint clusterEndpoint;
        private @Nullable String description;
        private @Nullable String engineVersion;
        private @Nullable String finalSnapshotName;
        private @Nullable String maintenanceWindow;
        private @Nullable String nodeType;
        private @Nullable Integer numReplicasPerShard;
        private @Nullable Integer numShards;
        private @Nullable String parameterGroupName;
        private @Nullable String parameterGroupStatus;
        private @Nullable List<String> securityGroupIds;
        private @Nullable Integer snapshotRetentionLimit;
        private @Nullable String snapshotWindow;
        private @Nullable String snsTopicArn;
        private @Nullable String snsTopicStatus;
        private @Nullable String status;
        private @Nullable String subnetGroupName;
        private @Nullable List<ClusterTag> tags;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aCLName = defaults.aCLName;
    	      this.aRN = defaults.aRN;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.clusterEndpoint = defaults.clusterEndpoint;
    	      this.description = defaults.description;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.parameterGroupStatus = defaults.parameterGroupStatus;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.snsTopicStatus = defaults.snsTopicStatus;
    	      this.status = defaults.status;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder aCLName(@Nullable String aCLName) {
            this.aCLName = aCLName;
            return this;
        }
        @CustomType.Setter
        public Builder aRN(@Nullable String aRN) {
            this.aRN = aRN;
            return this;
        }
        @CustomType.Setter
        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder clusterEndpoint(@Nullable ClusterEndpoint clusterEndpoint) {
            this.clusterEndpoint = clusterEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder nodeType(@Nullable String nodeType) {
            this.nodeType = nodeType;
            return this;
        }
        @CustomType.Setter
        public Builder numReplicasPerShard(@Nullable Integer numReplicasPerShard) {
            this.numReplicasPerShard = numReplicasPerShard;
            return this;
        }
        @CustomType.Setter
        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = numShards;
            return this;
        }
        @CustomType.Setter
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder parameterGroupStatus(@Nullable String parameterGroupStatus) {
            this.parameterGroupStatus = parameterGroupStatus;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        @CustomType.Setter
        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }
        @CustomType.Setter
        public Builder snsTopicStatus(@Nullable String snsTopicStatus) {
            this.snsTopicStatus = snsTopicStatus;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<ClusterTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(ClusterTag... tags) {
            return tags(List.of(tags));
        }
        public GetClusterResult build() {
            final var o = new GetClusterResult();
            o.aCLName = aCLName;
            o.aRN = aRN;
            o.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            o.clusterEndpoint = clusterEndpoint;
            o.description = description;
            o.engineVersion = engineVersion;
            o.finalSnapshotName = finalSnapshotName;
            o.maintenanceWindow = maintenanceWindow;
            o.nodeType = nodeType;
            o.numReplicasPerShard = numReplicasPerShard;
            o.numShards = numShards;
            o.parameterGroupName = parameterGroupName;
            o.parameterGroupStatus = parameterGroupStatus;
            o.securityGroupIds = securityGroupIds;
            o.snapshotRetentionLimit = snapshotRetentionLimit;
            o.snapshotWindow = snapshotWindow;
            o.snsTopicArn = snsTopicArn;
            o.snsTopicStatus = snsTopicStatus;
            o.status = status;
            o.subnetGroupName = subnetGroupName;
            o.tags = tags;
            return o;
        }
    }
}
