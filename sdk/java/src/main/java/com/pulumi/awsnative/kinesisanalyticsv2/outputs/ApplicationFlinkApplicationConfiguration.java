// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.outputs;

import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationCheckpointConfiguration;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationMonitoringConfiguration;
import com.pulumi.awsnative.kinesisanalyticsv2.outputs.ApplicationParallelismConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationFlinkApplicationConfiguration {
    /**
     * @return Describes an application&#39;s checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
     * 
     */
    private @Nullable ApplicationCheckpointConfiguration checkpointConfiguration;
    /**
     * @return Describes configuration parameters for Amazon CloudWatch logging for an application.
     * 
     */
    private @Nullable ApplicationMonitoringConfiguration monitoringConfiguration;
    /**
     * @return Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    private @Nullable ApplicationParallelismConfiguration parallelismConfiguration;

    private ApplicationFlinkApplicationConfiguration() {}
    /**
     * @return Describes an application&#39;s checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
     * 
     */
    public Optional<ApplicationCheckpointConfiguration> checkpointConfiguration() {
        return Optional.ofNullable(this.checkpointConfiguration);
    }
    /**
     * @return Describes configuration parameters for Amazon CloudWatch logging for an application.
     * 
     */
    public Optional<ApplicationMonitoringConfiguration> monitoringConfiguration() {
        return Optional.ofNullable(this.monitoringConfiguration);
    }
    /**
     * @return Describes parameters for how an application executes multiple tasks simultaneously.
     * 
     */
    public Optional<ApplicationParallelismConfiguration> parallelismConfiguration() {
        return Optional.ofNullable(this.parallelismConfiguration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationFlinkApplicationConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ApplicationCheckpointConfiguration checkpointConfiguration;
        private @Nullable ApplicationMonitoringConfiguration monitoringConfiguration;
        private @Nullable ApplicationParallelismConfiguration parallelismConfiguration;
        public Builder() {}
        public Builder(ApplicationFlinkApplicationConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkpointConfiguration = defaults.checkpointConfiguration;
    	      this.monitoringConfiguration = defaults.monitoringConfiguration;
    	      this.parallelismConfiguration = defaults.parallelismConfiguration;
        }

        @CustomType.Setter
        public Builder checkpointConfiguration(@Nullable ApplicationCheckpointConfiguration checkpointConfiguration) {
            this.checkpointConfiguration = checkpointConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringConfiguration(@Nullable ApplicationMonitoringConfiguration monitoringConfiguration) {
            this.monitoringConfiguration = monitoringConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder parallelismConfiguration(@Nullable ApplicationParallelismConfiguration parallelismConfiguration) {
            this.parallelismConfiguration = parallelismConfiguration;
            return this;
        }
        public ApplicationFlinkApplicationConfiguration build() {
            final var o = new ApplicationFlinkApplicationConfiguration();
            o.checkpointConfiguration = checkpointConfiguration;
            o.monitoringConfiguration = monitoringConfiguration;
            o.parallelismConfiguration = parallelismConfiguration;
            return o;
        }
    }
}
