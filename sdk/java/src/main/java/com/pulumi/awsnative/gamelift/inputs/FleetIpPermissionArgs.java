// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.gamelift.inputs;

import com.pulumi.awsnative.gamelift.enums.FleetIpPermissionProtocol;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift hosting resource. New game sessions that are started on the fleet are assigned an IP address/port number combination, which must fall into the fleet&#39;s allowed ranges. For fleets created with a custom game server, the ranges reflect the server&#39;s game session assignments. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP messaging and one for UDP, for use by the Realtime servers.
 * 
 */
public final class FleetIpPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetIpPermissionArgs Empty = new FleetIpPermissionArgs();

    /**
     * A starting value for a range of allowed port numbers.
     * 
     */
    @Import(name="fromPort", required=true)
    private Output<Integer> fromPort;

    /**
     * @return A starting value for a range of allowed port numbers.
     * 
     */
    public Output<Integer> fromPort() {
        return this.fromPort;
    }

    /**
     * A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: &#34;000.000.000.000/[subnet mask]&#34; or optionally the shortened version &#34;0.0.0.0/[subnet mask]&#34;.
     * 
     */
    @Import(name="ipRange", required=true)
    private Output<String> ipRange;

    /**
     * @return A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: &#34;000.000.000.000/[subnet mask]&#34; or optionally the shortened version &#34;0.0.0.0/[subnet mask]&#34;.
     * 
     */
    public Output<String> ipRange() {
        return this.ipRange;
    }

    /**
     * The network communication protocol used by the fleet.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<FleetIpPermissionProtocol> protocol;

    /**
     * @return The network communication protocol used by the fleet.
     * 
     */
    public Output<FleetIpPermissionProtocol> protocol() {
        return this.protocol;
    }

    /**
     * An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
     * 
     */
    @Import(name="toPort", required=true)
    private Output<Integer> toPort;

    /**
     * @return An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
     * 
     */
    public Output<Integer> toPort() {
        return this.toPort;
    }

    private FleetIpPermissionArgs() {}

    private FleetIpPermissionArgs(FleetIpPermissionArgs $) {
        this.fromPort = $.fromPort;
        this.ipRange = $.ipRange;
        this.protocol = $.protocol;
        this.toPort = $.toPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetIpPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetIpPermissionArgs $;

        public Builder() {
            $ = new FleetIpPermissionArgs();
        }

        public Builder(FleetIpPermissionArgs defaults) {
            $ = new FleetIpPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fromPort A starting value for a range of allowed port numbers.
         * 
         * @return builder
         * 
         */
        public Builder fromPort(Output<Integer> fromPort) {
            $.fromPort = fromPort;
            return this;
        }

        /**
         * @param fromPort A starting value for a range of allowed port numbers.
         * 
         * @return builder
         * 
         */
        public Builder fromPort(Integer fromPort) {
            return fromPort(Output.of(fromPort));
        }

        /**
         * @param ipRange A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: &#34;000.000.000.000/[subnet mask]&#34; or optionally the shortened version &#34;0.0.0.0/[subnet mask]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        /**
         * @param ipRange A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: &#34;000.000.000.000/[subnet mask]&#34; or optionally the shortened version &#34;0.0.0.0/[subnet mask]&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        /**
         * @param protocol The network communication protocol used by the fleet.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<FleetIpPermissionProtocol> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The network communication protocol used by the fleet.
         * 
         * @return builder
         * 
         */
        public Builder protocol(FleetIpPermissionProtocol protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param toPort An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
         * 
         * @return builder
         * 
         */
        public Builder toPort(Output<Integer> toPort) {
            $.toPort = toPort;
            return this;
        }

        /**
         * @param toPort An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
         * 
         * @return builder
         * 
         */
        public Builder toPort(Integer toPort) {
            return toPort(Output.of(toPort));
        }

        public FleetIpPermissionArgs build() {
            $.fromPort = Objects.requireNonNull($.fromPort, "expected parameter 'fromPort' to be non-null");
            $.ipRange = Objects.requireNonNull($.ipRange, "expected parameter 'ipRange' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.toPort = Objects.requireNonNull($.toPort, "expected parameter 'toPort' to be non-null");
            return $;
        }
    }

}
