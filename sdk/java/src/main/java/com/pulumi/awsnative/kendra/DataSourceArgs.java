// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra;

import com.pulumi.awsnative.kendra.enums.DataSourceType;
import com.pulumi.awsnative.kendra.inputs.DataSourceConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceCustomDocumentEnrichmentConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceArgs Empty = new DataSourceArgs();

    @Import(name="customDocumentEnrichmentConfiguration")
    private @Nullable Output<DataSourceCustomDocumentEnrichmentConfigurationArgs> customDocumentEnrichmentConfiguration;

    public Optional<Output<DataSourceCustomDocumentEnrichmentConfigurationArgs>> customDocumentEnrichmentConfiguration() {
        return Optional.ofNullable(this.customDocumentEnrichmentConfiguration);
    }

    @Import(name="dataSourceConfiguration")
    private @Nullable Output<DataSourceConfigurationArgs> dataSourceConfiguration;

    public Optional<Output<DataSourceConfigurationArgs>> dataSourceConfiguration() {
        return Optional.ofNullable(this.dataSourceConfiguration);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="indexId", required=true)
    private Output<String> indexId;

    public Output<String> indexId() {
        return this.indexId;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Tags for labeling the data source
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DataSourceTagArgs>> tags;

    /**
     * @return Tags for labeling the data source
     * 
     */
    public Optional<Output<List<DataSourceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type", required=true)
    private Output<DataSourceType> type;

    public Output<DataSourceType> type() {
        return this.type;
    }

    private DataSourceArgs() {}

    private DataSourceArgs(DataSourceArgs $) {
        this.customDocumentEnrichmentConfiguration = $.customDocumentEnrichmentConfiguration;
        this.dataSourceConfiguration = $.dataSourceConfiguration;
        this.description = $.description;
        this.indexId = $.indexId;
        this.name = $.name;
        this.roleArn = $.roleArn;
        this.schedule = $.schedule;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceArgs $;

        public Builder() {
            $ = new DataSourceArgs();
        }

        public Builder(DataSourceArgs defaults) {
            $ = new DataSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder customDocumentEnrichmentConfiguration(@Nullable Output<DataSourceCustomDocumentEnrichmentConfigurationArgs> customDocumentEnrichmentConfiguration) {
            $.customDocumentEnrichmentConfiguration = customDocumentEnrichmentConfiguration;
            return this;
        }

        public Builder customDocumentEnrichmentConfiguration(DataSourceCustomDocumentEnrichmentConfigurationArgs customDocumentEnrichmentConfiguration) {
            return customDocumentEnrichmentConfiguration(Output.of(customDocumentEnrichmentConfiguration));
        }

        public Builder dataSourceConfiguration(@Nullable Output<DataSourceConfigurationArgs> dataSourceConfiguration) {
            $.dataSourceConfiguration = dataSourceConfiguration;
            return this;
        }

        public Builder dataSourceConfiguration(DataSourceConfigurationArgs dataSourceConfiguration) {
            return dataSourceConfiguration(Output.of(dataSourceConfiguration));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder indexId(Output<String> indexId) {
            $.indexId = indexId;
            return this;
        }

        public Builder indexId(String indexId) {
            return indexId(Output.of(indexId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param tags Tags for labeling the data source
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DataSourceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags for labeling the data source
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DataSourceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags for labeling the data source
         * 
         * @return builder
         * 
         */
        public Builder tags(DataSourceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder type(Output<DataSourceType> type) {
            $.type = type;
            return this;
        }

        public Builder type(DataSourceType type) {
            return type(Output.of(type));
        }

        public DataSourceArgs build() {
            $.indexId = Objects.requireNonNull($.indexId, "expected parameter 'indexId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
