// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration for the cluster used to run model monitoring jobs.
 * 
 */
public final class ModelQualityJobDefinitionClusterConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelQualityJobDefinitionClusterConfigArgs Empty = new ModelQualityJobDefinitionClusterConfigArgs();

    /**
     * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
     * 
     */
    @Import(name="instanceCount", required=true)
    private Output<Integer> instanceCount;

    /**
     * @return The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
     * 
     */
    public Output<Integer> instanceCount() {
        return this.instanceCount;
    }

    /**
     * The ML compute instance type for the processing job.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return The ML compute instance type for the processing job.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     * 
     */
    @Import(name="volumeKmsKeyId")
    private @Nullable Output<String> volumeKmsKeyId;

    /**
     * @return The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     * 
     */
    public Optional<Output<String>> volumeKmsKeyId() {
        return Optional.ofNullable(this.volumeKmsKeyId);
    }

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
     * 
     */
    @Import(name="volumeSizeInGB", required=true)
    private Output<Integer> volumeSizeInGB;

    /**
     * @return The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
     * 
     */
    public Output<Integer> volumeSizeInGB() {
        return this.volumeSizeInGB;
    }

    private ModelQualityJobDefinitionClusterConfigArgs() {}

    private ModelQualityJobDefinitionClusterConfigArgs(ModelQualityJobDefinitionClusterConfigArgs $) {
        this.instanceCount = $.instanceCount;
        this.instanceType = $.instanceType;
        this.volumeKmsKeyId = $.volumeKmsKeyId;
        this.volumeSizeInGB = $.volumeSizeInGB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelQualityJobDefinitionClusterConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelQualityJobDefinitionClusterConfigArgs $;

        public Builder() {
            $ = new ModelQualityJobDefinitionClusterConfigArgs();
        }

        public Builder(ModelQualityJobDefinitionClusterConfigArgs defaults) {
            $ = new ModelQualityJobDefinitionClusterConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceCount The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceCount The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        /**
         * @param instanceType The ML compute instance type for the processing job.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType The ML compute instance type for the processing job.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param volumeKmsKeyId The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         * 
         * @return builder
         * 
         */
        public Builder volumeKmsKeyId(@Nullable Output<String> volumeKmsKeyId) {
            $.volumeKmsKeyId = volumeKmsKeyId;
            return this;
        }

        /**
         * @param volumeKmsKeyId The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         * 
         * @return builder
         * 
         */
        public Builder volumeKmsKeyId(String volumeKmsKeyId) {
            return volumeKmsKeyId(Output.of(volumeKmsKeyId));
        }

        /**
         * @param volumeSizeInGB The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         * 
         * @return builder
         * 
         */
        public Builder volumeSizeInGB(Output<Integer> volumeSizeInGB) {
            $.volumeSizeInGB = volumeSizeInGB;
            return this;
        }

        /**
         * @param volumeSizeInGB The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         * 
         * @return builder
         * 
         */
        public Builder volumeSizeInGB(Integer volumeSizeInGB) {
            return volumeSizeInGB(Output.of(volumeSizeInGB));
        }

        public ModelQualityJobDefinitionClusterConfigArgs build() {
            $.instanceCount = Objects.requireNonNull($.instanceCount, "expected parameter 'instanceCount' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            $.volumeSizeInGB = Objects.requireNonNull($.volumeSizeInGB, "expected parameter 'volumeSizeInGB' to be non-null");
            return $;
        }
    }

}
