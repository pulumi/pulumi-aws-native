// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight;

import com.pulumi.awsnative.quicksight.inputs.TemplateResourcePermissionArgs;
import com.pulumi.awsnative.quicksight.inputs.TemplateSourceEntityArgs;
import com.pulumi.awsnative.quicksight.inputs.TemplateTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateArgs Empty = new TemplateArgs();

    @Import(name="awsAccountId", required=true)
    private Output<String> awsAccountId;

    public Output<String> awsAccountId() {
        return this.awsAccountId;
    }

    /**
     * &lt;p&gt;A display name for the template.&lt;/p&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &lt;p&gt;A display name for the template.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * &lt;p&gt;A list of resource permissions to be set on the template. &lt;/p&gt;
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<TemplateResourcePermissionArgs>> permissions;

    /**
     * @return &lt;p&gt;A list of resource permissions to be set on the template. &lt;/p&gt;
     * 
     */
    public Optional<Output<List<TemplateResourcePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    @Import(name="sourceEntity", required=true)
    private Output<TemplateSourceEntityArgs> sourceEntity;

    public Output<TemplateSourceEntityArgs> sourceEntity() {
        return this.sourceEntity;
    }

    /**
     * &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.&lt;/p&gt;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<TemplateTagArgs>> tags;

    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<TemplateTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="templateId", required=true)
    private Output<String> templateId;

    public Output<String> templateId() {
        return this.templateId;
    }

    /**
     * &lt;p&gt;A description of the current template version being created. This API operation creates the
     * 			first version of the template. Every time &lt;code&gt;UpdateTemplate&lt;/code&gt; is called, a new
     * 			version is created. Each version of the template maintains a description of the version
     * 			in the &lt;code&gt;VersionDescription&lt;/code&gt; field.&lt;/p&gt;
     * 
     */
    @Import(name="versionDescription")
    private @Nullable Output<String> versionDescription;

    /**
     * @return &lt;p&gt;A description of the current template version being created. This API operation creates the
     * 			first version of the template. Every time &lt;code&gt;UpdateTemplate&lt;/code&gt; is called, a new
     * 			version is created. Each version of the template maintains a description of the version
     * 			in the &lt;code&gt;VersionDescription&lt;/code&gt; field.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> versionDescription() {
        return Optional.ofNullable(this.versionDescription);
    }

    private TemplateArgs() {}

    private TemplateArgs(TemplateArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.name = $.name;
        this.permissions = $.permissions;
        this.sourceEntity = $.sourceEntity;
        this.tags = $.tags;
        this.templateId = $.templateId;
        this.versionDescription = $.versionDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateArgs $;

        public Builder() {
            $ = new TemplateArgs();
        }

        public Builder(TemplateArgs defaults) {
            $ = new TemplateArgs(Objects.requireNonNull(defaults));
        }

        public Builder awsAccountId(Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param name &lt;p&gt;A display name for the template.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;A display name for the template.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions to be set on the template. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<TemplateResourcePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions to be set on the template. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<TemplateResourcePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions to be set on the template. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(TemplateResourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder sourceEntity(Output<TemplateSourceEntityArgs> sourceEntity) {
            $.sourceEntity = sourceEntity;
            return this;
        }

        public Builder sourceEntity(TemplateSourceEntityArgs sourceEntity) {
            return sourceEntity(Output.of(sourceEntity));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<TemplateTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(List<TemplateTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(TemplateTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder templateId(Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param versionDescription &lt;p&gt;A description of the current template version being created. This API operation creates the
         * 			first version of the template. Every time &lt;code&gt;UpdateTemplate&lt;/code&gt; is called, a new
         * 			version is created. Each version of the template maintains a description of the version
         * 			in the &lt;code&gt;VersionDescription&lt;/code&gt; field.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(@Nullable Output<String> versionDescription) {
            $.versionDescription = versionDescription;
            return this;
        }

        /**
         * @param versionDescription &lt;p&gt;A description of the current template version being created. This API operation creates the
         * 			first version of the template. Every time &lt;code&gt;UpdateTemplate&lt;/code&gt; is called, a new
         * 			version is created. Each version of the template maintains a description of the version
         * 			in the &lt;code&gt;VersionDescription&lt;/code&gt; field.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(String versionDescription) {
            return versionDescription(Output.of(versionDescription));
        }

        public TemplateArgs build() {
            $.awsAccountId = Objects.requireNonNull($.awsAccountId, "expected parameter 'awsAccountId' to be non-null");
            $.sourceEntity = Objects.requireNonNull($.sourceEntity, "expected parameter 'sourceEntity' to be non-null");
            $.templateId = Objects.requireNonNull($.templateId, "expected parameter 'templateId' to be non-null");
            return $;
        }
    }

}
