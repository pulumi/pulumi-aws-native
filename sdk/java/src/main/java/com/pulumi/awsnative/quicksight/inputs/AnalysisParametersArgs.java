// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.inputs;

import com.pulumi.awsnative.quicksight.inputs.AnalysisDateTimeParameterArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisDecimalParameterArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisIntegerParameterArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisStringParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;A list of QuickSight parameters and the list&#39;s override values.&lt;/p&gt;
 * 
 */
public final class AnalysisParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisParametersArgs Empty = new AnalysisParametersArgs();

    /**
     * &lt;p&gt;Date-time parameters.&lt;/p&gt;
     * 
     */
    @Import(name="dateTimeParameters")
    private @Nullable Output<List<AnalysisDateTimeParameterArgs>> dateTimeParameters;

    /**
     * @return &lt;p&gt;Date-time parameters.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisDateTimeParameterArgs>>> dateTimeParameters() {
        return Optional.ofNullable(this.dateTimeParameters);
    }

    /**
     * &lt;p&gt;Decimal parameters.&lt;/p&gt;
     * 
     */
    @Import(name="decimalParameters")
    private @Nullable Output<List<AnalysisDecimalParameterArgs>> decimalParameters;

    /**
     * @return &lt;p&gt;Decimal parameters.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisDecimalParameterArgs>>> decimalParameters() {
        return Optional.ofNullable(this.decimalParameters);
    }

    /**
     * &lt;p&gt;Integer parameters.&lt;/p&gt;
     * 
     */
    @Import(name="integerParameters")
    private @Nullable Output<List<AnalysisIntegerParameterArgs>> integerParameters;

    /**
     * @return &lt;p&gt;Integer parameters.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisIntegerParameterArgs>>> integerParameters() {
        return Optional.ofNullable(this.integerParameters);
    }

    /**
     * &lt;p&gt;String parameters.&lt;/p&gt;
     * 
     */
    @Import(name="stringParameters")
    private @Nullable Output<List<AnalysisStringParameterArgs>> stringParameters;

    /**
     * @return &lt;p&gt;String parameters.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisStringParameterArgs>>> stringParameters() {
        return Optional.ofNullable(this.stringParameters);
    }

    private AnalysisParametersArgs() {}

    private AnalysisParametersArgs(AnalysisParametersArgs $) {
        this.dateTimeParameters = $.dateTimeParameters;
        this.decimalParameters = $.decimalParameters;
        this.integerParameters = $.integerParameters;
        this.stringParameters = $.stringParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisParametersArgs $;

        public Builder() {
            $ = new AnalysisParametersArgs();
        }

        public Builder(AnalysisParametersArgs defaults) {
            $ = new AnalysisParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dateTimeParameters &lt;p&gt;Date-time parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dateTimeParameters(@Nullable Output<List<AnalysisDateTimeParameterArgs>> dateTimeParameters) {
            $.dateTimeParameters = dateTimeParameters;
            return this;
        }

        /**
         * @param dateTimeParameters &lt;p&gt;Date-time parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dateTimeParameters(List<AnalysisDateTimeParameterArgs> dateTimeParameters) {
            return dateTimeParameters(Output.of(dateTimeParameters));
        }

        /**
         * @param dateTimeParameters &lt;p&gt;Date-time parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder dateTimeParameters(AnalysisDateTimeParameterArgs... dateTimeParameters) {
            return dateTimeParameters(List.of(dateTimeParameters));
        }

        /**
         * @param decimalParameters &lt;p&gt;Decimal parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder decimalParameters(@Nullable Output<List<AnalysisDecimalParameterArgs>> decimalParameters) {
            $.decimalParameters = decimalParameters;
            return this;
        }

        /**
         * @param decimalParameters &lt;p&gt;Decimal parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder decimalParameters(List<AnalysisDecimalParameterArgs> decimalParameters) {
            return decimalParameters(Output.of(decimalParameters));
        }

        /**
         * @param decimalParameters &lt;p&gt;Decimal parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder decimalParameters(AnalysisDecimalParameterArgs... decimalParameters) {
            return decimalParameters(List.of(decimalParameters));
        }

        /**
         * @param integerParameters &lt;p&gt;Integer parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder integerParameters(@Nullable Output<List<AnalysisIntegerParameterArgs>> integerParameters) {
            $.integerParameters = integerParameters;
            return this;
        }

        /**
         * @param integerParameters &lt;p&gt;Integer parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder integerParameters(List<AnalysisIntegerParameterArgs> integerParameters) {
            return integerParameters(Output.of(integerParameters));
        }

        /**
         * @param integerParameters &lt;p&gt;Integer parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder integerParameters(AnalysisIntegerParameterArgs... integerParameters) {
            return integerParameters(List.of(integerParameters));
        }

        /**
         * @param stringParameters &lt;p&gt;String parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder stringParameters(@Nullable Output<List<AnalysisStringParameterArgs>> stringParameters) {
            $.stringParameters = stringParameters;
            return this;
        }

        /**
         * @param stringParameters &lt;p&gt;String parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder stringParameters(List<AnalysisStringParameterArgs> stringParameters) {
            return stringParameters(Output.of(stringParameters));
        }

        /**
         * @param stringParameters &lt;p&gt;String parameters.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder stringParameters(AnalysisStringParameterArgs... stringParameters) {
            return stringParameters(List.of(stringParameters));
        }

        public AnalysisParametersArgs build() {
            return $;
        }
    }

}
