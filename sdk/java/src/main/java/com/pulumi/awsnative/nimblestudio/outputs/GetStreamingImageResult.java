// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio.outputs;

import com.pulumi.awsnative.nimblestudio.outputs.StreamingImageEncryptionConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetStreamingImageResult {
    /**
     * @return &lt;p&gt;A human-readable description of the streaming image.&lt;/p&gt;
     * 
     */
    private @Nullable String description;
    private @Nullable StreamingImageEncryptionConfiguration encryptionConfiguration;
    /**
     * @return &lt;p&gt;The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.&lt;/p&gt;
     * 
     */
    private @Nullable List<String> eulaIds;
    /**
     * @return &lt;p&gt;A friendly name for a streaming image resource.&lt;/p&gt;
     * 
     */
    private @Nullable String name;
    /**
     * @return &lt;p&gt;The owner of the streaming image, either the studioId that contains the streaming image, or &#39;amazon&#39; for images that are provided by Amazon Nimble Studio.&lt;/p&gt;
     * 
     */
    private @Nullable String owner;
    /**
     * @return &lt;p&gt;The platform of the streaming image, either WINDOWS or LINUX.&lt;/p&gt;
     * 
     */
    private @Nullable String platform;
    private @Nullable String streamingImageId;

    private GetStreamingImageResult() {}
    /**
     * @return &lt;p&gt;A human-readable description of the streaming image.&lt;/p&gt;
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<StreamingImageEncryptionConfiguration> encryptionConfiguration() {
        return Optional.ofNullable(this.encryptionConfiguration);
    }
    /**
     * @return &lt;p&gt;The list of EULAs that must be accepted before a Streaming Session can be started using this streaming image.&lt;/p&gt;
     * 
     */
    public List<String> eulaIds() {
        return this.eulaIds == null ? List.of() : this.eulaIds;
    }
    /**
     * @return &lt;p&gt;A friendly name for a streaming image resource.&lt;/p&gt;
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return &lt;p&gt;The owner of the streaming image, either the studioId that contains the streaming image, or &#39;amazon&#39; for images that are provided by Amazon Nimble Studio.&lt;/p&gt;
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }
    /**
     * @return &lt;p&gt;The platform of the streaming image, either WINDOWS or LINUX.&lt;/p&gt;
     * 
     */
    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }
    public Optional<String> streamingImageId() {
        return Optional.ofNullable(this.streamingImageId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamingImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable StreamingImageEncryptionConfiguration encryptionConfiguration;
        private @Nullable List<String> eulaIds;
        private @Nullable String name;
        private @Nullable String owner;
        private @Nullable String platform;
        private @Nullable String streamingImageId;
        public Builder() {}
        public Builder(GetStreamingImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.encryptionConfiguration = defaults.encryptionConfiguration;
    	      this.eulaIds = defaults.eulaIds;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.platform = defaults.platform;
    	      this.streamingImageId = defaults.streamingImageId;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfiguration(@Nullable StreamingImageEncryptionConfiguration encryptionConfiguration) {
            this.encryptionConfiguration = encryptionConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder eulaIds(@Nullable List<String> eulaIds) {
            this.eulaIds = eulaIds;
            return this;
        }
        public Builder eulaIds(String... eulaIds) {
            return eulaIds(List.of(eulaIds));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder platform(@Nullable String platform) {
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder streamingImageId(@Nullable String streamingImageId) {
            this.streamingImageId = streamingImageId;
            return this;
        }
        public GetStreamingImageResult build() {
            final var o = new GetStreamingImageResult();
            o.description = description;
            o.encryptionConfiguration = encryptionConfiguration;
            o.eulaIds = eulaIds;
            o.name = name;
            o.owner = owner;
            o.platform = platform;
            o.streamingImageId = streamingImageId;
            return o;
        }
    }
}
