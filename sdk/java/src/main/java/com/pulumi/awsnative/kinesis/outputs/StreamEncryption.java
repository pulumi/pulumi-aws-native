// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesis.outputs;

import com.pulumi.awsnative.kinesis.enums.StreamEncryptionEncryptionType;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class StreamEncryption {
    /**
     * @return The encryption type to use. The only valid value is KMS.
     * 
     */
    private StreamEncryptionEncryptionType encryptionType;
    /**
     * @return The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by &#34;alias/&#34;.You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
     * 
     */
    private String keyId;

    private StreamEncryption() {}
    /**
     * @return The encryption type to use. The only valid value is KMS.
     * 
     */
    public StreamEncryptionEncryptionType encryptionType() {
        return this.encryptionType;
    }
    /**
     * @return The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by &#34;alias/&#34;.You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
     * 
     */
    public String keyId() {
        return this.keyId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamEncryption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private StreamEncryptionEncryptionType encryptionType;
        private String keyId;
        public Builder() {}
        public Builder(StreamEncryption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.encryptionType = defaults.encryptionType;
    	      this.keyId = defaults.keyId;
        }

        @CustomType.Setter
        public Builder encryptionType(StreamEncryptionEncryptionType encryptionType) {
            this.encryptionType = Objects.requireNonNull(encryptionType);
            return this;
        }
        @CustomType.Setter
        public Builder keyId(String keyId) {
            this.keyId = Objects.requireNonNull(keyId);
            return this;
        }
        public StreamEncryption build() {
            final var o = new StreamEncryption();
            o.encryptionType = encryptionType;
            o.keyId = keyId;
            return o;
        }
    }
}
