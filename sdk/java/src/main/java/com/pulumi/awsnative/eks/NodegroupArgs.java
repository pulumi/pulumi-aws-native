// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.eks;

import com.pulumi.awsnative.eks.inputs.NodegroupLaunchTemplateSpecificationArgs;
import com.pulumi.awsnative.eks.inputs.NodegroupRemoteAccessArgs;
import com.pulumi.awsnative.eks.inputs.NodegroupScalingConfigArgs;
import com.pulumi.awsnative.eks.inputs.NodegroupTaintArgs;
import com.pulumi.awsnative.eks.inputs.NodegroupUpdateConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodegroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodegroupArgs Empty = new NodegroupArgs();

    /**
     * The AMI type for your node group.
     * 
     */
    @Import(name="amiType")
    private @Nullable Output<String> amiType;

    /**
     * @return The AMI type for your node group.
     * 
     */
    public Optional<Output<String>> amiType() {
        return Optional.ofNullable(this.amiType);
    }

    /**
     * The capacity type of your managed node group.
     * 
     */
    @Import(name="capacityType")
    private @Nullable Output<String> capacityType;

    /**
     * @return The capacity type of your managed node group.
     * 
     */
    public Optional<Output<String>> capacityType() {
        return Optional.ofNullable(this.capacityType);
    }

    /**
     * Name of the cluster to create the node group in.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return Name of the cluster to create the node group in.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * The root device disk size (in GiB) for your node group instances.
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<Integer> diskSize;

    /**
     * @return The root device disk size (in GiB) for your node group instances.
     * 
     */
    public Optional<Output<Integer>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * Force the update if the existing node group&#39;s pods are unable to be drained due to a pod disruption budget issue.
     * 
     */
    @Import(name="forceUpdateEnabled")
    private @Nullable Output<Boolean> forceUpdateEnabled;

    /**
     * @return Force the update if the existing node group&#39;s pods are unable to be drained due to a pod disruption budget issue.
     * 
     */
    public Optional<Output<Boolean>> forceUpdateEnabled() {
        return Optional.ofNullable(this.forceUpdateEnabled);
    }

    /**
     * Specify the instance types for a node group.
     * 
     */
    @Import(name="instanceTypes")
    private @Nullable Output<List<String>> instanceTypes;

    /**
     * @return Specify the instance types for a node group.
     * 
     */
    public Optional<Output<List<String>>> instanceTypes() {
        return Optional.ofNullable(this.instanceTypes);
    }

    /**
     * The Kubernetes labels to be applied to the nodes in the node group when they are created.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Object> labels;

    /**
     * @return The Kubernetes labels to be applied to the nodes in the node group when they are created.
     * 
     */
    public Optional<Output<Object>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * An object representing a node group&#39;s launch template specification.
     * 
     */
    @Import(name="launchTemplate")
    private @Nullable Output<NodegroupLaunchTemplateSpecificationArgs> launchTemplate;

    /**
     * @return An object representing a node group&#39;s launch template specification.
     * 
     */
    public Optional<Output<NodegroupLaunchTemplateSpecificationArgs>> launchTemplate() {
        return Optional.ofNullable(this.launchTemplate);
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
     * 
     */
    @Import(name="nodeRole", required=true)
    private Output<String> nodeRole;

    /**
     * @return The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
     * 
     */
    public Output<String> nodeRole() {
        return this.nodeRole;
    }

    /**
     * The unique name to give your node group.
     * 
     */
    @Import(name="nodegroupName")
    private @Nullable Output<String> nodegroupName;

    /**
     * @return The unique name to give your node group.
     * 
     */
    public Optional<Output<String>> nodegroupName() {
        return Optional.ofNullable(this.nodegroupName);
    }

    /**
     * The AMI version of the Amazon EKS-optimized AMI to use with your node group.
     * 
     */
    @Import(name="releaseVersion")
    private @Nullable Output<String> releaseVersion;

    /**
     * @return The AMI version of the Amazon EKS-optimized AMI to use with your node group.
     * 
     */
    public Optional<Output<String>> releaseVersion() {
        return Optional.ofNullable(this.releaseVersion);
    }

    /**
     * The remote access (SSH) configuration to use with your node group.
     * 
     */
    @Import(name="remoteAccess")
    private @Nullable Output<NodegroupRemoteAccessArgs> remoteAccess;

    /**
     * @return The remote access (SSH) configuration to use with your node group.
     * 
     */
    public Optional<Output<NodegroupRemoteAccessArgs>> remoteAccess() {
        return Optional.ofNullable(this.remoteAccess);
    }

    /**
     * The scaling configuration details for the Auto Scaling group that is created for your node group.
     * 
     */
    @Import(name="scalingConfig")
    private @Nullable Output<NodegroupScalingConfigArgs> scalingConfig;

    /**
     * @return The scaling configuration details for the Auto Scaling group that is created for your node group.
     * 
     */
    public Optional<Output<NodegroupScalingConfigArgs>> scalingConfig() {
        return Optional.ofNullable(this.scalingConfig);
    }

    /**
     * The subnets to use for the Auto Scaling group that is created for your node group.
     * 
     */
    @Import(name="subnets", required=true)
    private Output<List<String>> subnets;

    /**
     * @return The subnets to use for the Auto Scaling group that is created for your node group.
     * 
     */
    public Output<List<String>> subnets() {
        return this.subnets;
    }

    /**
     * The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Kubernetes taints to be applied to the nodes in the node group when they are created.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<NodegroupTaintArgs>> taints;

    /**
     * @return The Kubernetes taints to be applied to the nodes in the node group when they are created.
     * 
     */
    public Optional<Output<List<NodegroupTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * The node group update configuration.
     * 
     */
    @Import(name="updateConfig")
    private @Nullable Output<NodegroupUpdateConfigArgs> updateConfig;

    /**
     * @return The node group update configuration.
     * 
     */
    public Optional<Output<NodegroupUpdateConfigArgs>> updateConfig() {
        return Optional.ofNullable(this.updateConfig);
    }

    /**
     * The Kubernetes version to use for your managed nodes.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The Kubernetes version to use for your managed nodes.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private NodegroupArgs() {}

    private NodegroupArgs(NodegroupArgs $) {
        this.amiType = $.amiType;
        this.capacityType = $.capacityType;
        this.clusterName = $.clusterName;
        this.diskSize = $.diskSize;
        this.forceUpdateEnabled = $.forceUpdateEnabled;
        this.instanceTypes = $.instanceTypes;
        this.labels = $.labels;
        this.launchTemplate = $.launchTemplate;
        this.nodeRole = $.nodeRole;
        this.nodegroupName = $.nodegroupName;
        this.releaseVersion = $.releaseVersion;
        this.remoteAccess = $.remoteAccess;
        this.scalingConfig = $.scalingConfig;
        this.subnets = $.subnets;
        this.tags = $.tags;
        this.taints = $.taints;
        this.updateConfig = $.updateConfig;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodegroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodegroupArgs $;

        public Builder() {
            $ = new NodegroupArgs();
        }

        public Builder(NodegroupArgs defaults) {
            $ = new NodegroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amiType The AMI type for your node group.
         * 
         * @return builder
         * 
         */
        public Builder amiType(@Nullable Output<String> amiType) {
            $.amiType = amiType;
            return this;
        }

        /**
         * @param amiType The AMI type for your node group.
         * 
         * @return builder
         * 
         */
        public Builder amiType(String amiType) {
            return amiType(Output.of(amiType));
        }

        /**
         * @param capacityType The capacity type of your managed node group.
         * 
         * @return builder
         * 
         */
        public Builder capacityType(@Nullable Output<String> capacityType) {
            $.capacityType = capacityType;
            return this;
        }

        /**
         * @param capacityType The capacity type of your managed node group.
         * 
         * @return builder
         * 
         */
        public Builder capacityType(String capacityType) {
            return capacityType(Output.of(capacityType));
        }

        /**
         * @param clusterName Name of the cluster to create the node group in.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Name of the cluster to create the node group in.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param diskSize The root device disk size (in GiB) for your node group instances.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<Integer> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize The root device disk size (in GiB) for your node group instances.
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Integer diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param forceUpdateEnabled Force the update if the existing node group&#39;s pods are unable to be drained due to a pod disruption budget issue.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateEnabled(@Nullable Output<Boolean> forceUpdateEnabled) {
            $.forceUpdateEnabled = forceUpdateEnabled;
            return this;
        }

        /**
         * @param forceUpdateEnabled Force the update if the existing node group&#39;s pods are unable to be drained due to a pod disruption budget issue.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateEnabled(Boolean forceUpdateEnabled) {
            return forceUpdateEnabled(Output.of(forceUpdateEnabled));
        }

        /**
         * @param instanceTypes Specify the instance types for a node group.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(@Nullable Output<List<String>> instanceTypes) {
            $.instanceTypes = instanceTypes;
            return this;
        }

        /**
         * @param instanceTypes Specify the instance types for a node group.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(List<String> instanceTypes) {
            return instanceTypes(Output.of(instanceTypes));
        }

        /**
         * @param instanceTypes Specify the instance types for a node group.
         * 
         * @return builder
         * 
         */
        public Builder instanceTypes(String... instanceTypes) {
            return instanceTypes(List.of(instanceTypes));
        }

        /**
         * @param labels The Kubernetes labels to be applied to the nodes in the node group when they are created.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Object> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The Kubernetes labels to be applied to the nodes in the node group when they are created.
         * 
         * @return builder
         * 
         */
        public Builder labels(Object labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param launchTemplate An object representing a node group&#39;s launch template specification.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplate(@Nullable Output<NodegroupLaunchTemplateSpecificationArgs> launchTemplate) {
            $.launchTemplate = launchTemplate;
            return this;
        }

        /**
         * @param launchTemplate An object representing a node group&#39;s launch template specification.
         * 
         * @return builder
         * 
         */
        public Builder launchTemplate(NodegroupLaunchTemplateSpecificationArgs launchTemplate) {
            return launchTemplate(Output.of(launchTemplate));
        }

        /**
         * @param nodeRole The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(Output<String> nodeRole) {
            $.nodeRole = nodeRole;
            return this;
        }

        /**
         * @param nodeRole The Amazon Resource Name (ARN) of the IAM role to associate with your node group.
         * 
         * @return builder
         * 
         */
        public Builder nodeRole(String nodeRole) {
            return nodeRole(Output.of(nodeRole));
        }

        /**
         * @param nodegroupName The unique name to give your node group.
         * 
         * @return builder
         * 
         */
        public Builder nodegroupName(@Nullable Output<String> nodegroupName) {
            $.nodegroupName = nodegroupName;
            return this;
        }

        /**
         * @param nodegroupName The unique name to give your node group.
         * 
         * @return builder
         * 
         */
        public Builder nodegroupName(String nodegroupName) {
            return nodegroupName(Output.of(nodegroupName));
        }

        /**
         * @param releaseVersion The AMI version of the Amazon EKS-optimized AMI to use with your node group.
         * 
         * @return builder
         * 
         */
        public Builder releaseVersion(@Nullable Output<String> releaseVersion) {
            $.releaseVersion = releaseVersion;
            return this;
        }

        /**
         * @param releaseVersion The AMI version of the Amazon EKS-optimized AMI to use with your node group.
         * 
         * @return builder
         * 
         */
        public Builder releaseVersion(String releaseVersion) {
            return releaseVersion(Output.of(releaseVersion));
        }

        /**
         * @param remoteAccess The remote access (SSH) configuration to use with your node group.
         * 
         * @return builder
         * 
         */
        public Builder remoteAccess(@Nullable Output<NodegroupRemoteAccessArgs> remoteAccess) {
            $.remoteAccess = remoteAccess;
            return this;
        }

        /**
         * @param remoteAccess The remote access (SSH) configuration to use with your node group.
         * 
         * @return builder
         * 
         */
        public Builder remoteAccess(NodegroupRemoteAccessArgs remoteAccess) {
            return remoteAccess(Output.of(remoteAccess));
        }

        /**
         * @param scalingConfig The scaling configuration details for the Auto Scaling group that is created for your node group.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(@Nullable Output<NodegroupScalingConfigArgs> scalingConfig) {
            $.scalingConfig = scalingConfig;
            return this;
        }

        /**
         * @param scalingConfig The scaling configuration details for the Auto Scaling group that is created for your node group.
         * 
         * @return builder
         * 
         */
        public Builder scalingConfig(NodegroupScalingConfigArgs scalingConfig) {
            return scalingConfig(Output.of(scalingConfig));
        }

        /**
         * @param subnets The subnets to use for the Auto Scaling group that is created for your node group.
         * 
         * @return builder
         * 
         */
        public Builder subnets(Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets The subnets to use for the Auto Scaling group that is created for your node group.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets The subnets to use for the Auto Scaling group that is created for your node group.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param tags The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The metadata, as key-value pairs, to apply to the node group to assist with categorization and organization. Follows same schema as Labels for consistency.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param taints The Kubernetes taints to be applied to the nodes in the node group when they are created.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<NodegroupTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints The Kubernetes taints to be applied to the nodes in the node group when they are created.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<NodegroupTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints The Kubernetes taints to be applied to the nodes in the node group when they are created.
         * 
         * @return builder
         * 
         */
        public Builder taints(NodegroupTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param updateConfig The node group update configuration.
         * 
         * @return builder
         * 
         */
        public Builder updateConfig(@Nullable Output<NodegroupUpdateConfigArgs> updateConfig) {
            $.updateConfig = updateConfig;
            return this;
        }

        /**
         * @param updateConfig The node group update configuration.
         * 
         * @return builder
         * 
         */
        public Builder updateConfig(NodegroupUpdateConfigArgs updateConfig) {
            return updateConfig(Output.of(updateConfig));
        }

        /**
         * @param version The Kubernetes version to use for your managed nodes.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The Kubernetes version to use for your managed nodes.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public NodegroupArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.nodeRole = Objects.requireNonNull($.nodeRole, "expected parameter 'nodeRole' to be non-null");
            $.subnets = Objects.requireNonNull($.subnets, "expected parameter 'subnets' to be non-null");
            return $;
        }
    }

}
