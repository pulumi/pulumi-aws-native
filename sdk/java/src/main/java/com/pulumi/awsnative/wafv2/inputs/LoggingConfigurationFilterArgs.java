// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.wafv2.inputs;

import com.pulumi.awsnative.wafv2.enums.LoggingConfigurationFilterBehavior;
import com.pulumi.awsnative.wafv2.enums.LoggingConfigurationFilterRequirement;
import com.pulumi.awsnative.wafv2.inputs.LoggingConfigurationConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


public final class LoggingConfigurationFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingConfigurationFilterArgs Empty = new LoggingConfigurationFilterArgs();

    /**
     * How to handle logs that satisfy the filter&#39;s conditions and requirement.
     * 
     */
    @Import(name="behavior", required=true)
    private Output<LoggingConfigurationFilterBehavior> behavior;

    /**
     * @return How to handle logs that satisfy the filter&#39;s conditions and requirement.
     * 
     */
    public Output<LoggingConfigurationFilterBehavior> behavior() {
        return this.behavior;
    }

    /**
     * Match conditions for the filter.
     * 
     */
    @Import(name="conditions", required=true)
    private Output<List<LoggingConfigurationConditionArgs>> conditions;

    /**
     * @return Match conditions for the filter.
     * 
     */
    public Output<List<LoggingConfigurationConditionArgs>> conditions() {
        return this.conditions;
    }

    /**
     * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
     * 
     */
    @Import(name="requirement", required=true)
    private Output<LoggingConfigurationFilterRequirement> requirement;

    /**
     * @return Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
     * 
     */
    public Output<LoggingConfigurationFilterRequirement> requirement() {
        return this.requirement;
    }

    private LoggingConfigurationFilterArgs() {}

    private LoggingConfigurationFilterArgs(LoggingConfigurationFilterArgs $) {
        this.behavior = $.behavior;
        this.conditions = $.conditions;
        this.requirement = $.requirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingConfigurationFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingConfigurationFilterArgs $;

        public Builder() {
            $ = new LoggingConfigurationFilterArgs();
        }

        public Builder(LoggingConfigurationFilterArgs defaults) {
            $ = new LoggingConfigurationFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param behavior How to handle logs that satisfy the filter&#39;s conditions and requirement.
         * 
         * @return builder
         * 
         */
        public Builder behavior(Output<LoggingConfigurationFilterBehavior> behavior) {
            $.behavior = behavior;
            return this;
        }

        /**
         * @param behavior How to handle logs that satisfy the filter&#39;s conditions and requirement.
         * 
         * @return builder
         * 
         */
        public Builder behavior(LoggingConfigurationFilterBehavior behavior) {
            return behavior(Output.of(behavior));
        }

        /**
         * @param conditions Match conditions for the filter.
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<List<LoggingConfigurationConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Match conditions for the filter.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<LoggingConfigurationConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Match conditions for the filter.
         * 
         * @return builder
         * 
         */
        public Builder conditions(LoggingConfigurationConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param requirement Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         * 
         * @return builder
         * 
         */
        public Builder requirement(Output<LoggingConfigurationFilterRequirement> requirement) {
            $.requirement = requirement;
            return this;
        }

        /**
         * @param requirement Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         * 
         * @return builder
         * 
         */
        public Builder requirement(LoggingConfigurationFilterRequirement requirement) {
            return requirement(Output.of(requirement));
        }

        public LoggingConfigurationFilterArgs build() {
            $.behavior = Objects.requireNonNull($.behavior, "expected parameter 'behavior' to be non-null");
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            $.requirement = Objects.requireNonNull($.requirement, "expected parameter 'requirement' to be non-null");
            return $;
        }
    }

}
