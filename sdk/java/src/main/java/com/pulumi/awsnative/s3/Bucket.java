// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3;

import com.pulumi.awsnative.Utilities;
import com.pulumi.awsnative.s3.BucketArgs;
import com.pulumi.awsnative.s3.enums.BucketAccessControl;
import com.pulumi.awsnative.s3.outputs.BucketAccelerateConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketAnalyticsConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketCorsConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketEncryption;
import com.pulumi.awsnative.s3.outputs.BucketIntelligentTieringConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketInventoryConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketLifecycleConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketLoggingConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketMetricsConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketNotificationConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketObjectLockConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketOwnershipControls;
import com.pulumi.awsnative.s3.outputs.BucketPublicAccessBlockConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketReplicationConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketTag;
import com.pulumi.awsnative.s3.outputs.BucketVersioningConfiguration;
import com.pulumi.awsnative.s3.outputs.BucketWebsiteConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource Type definition for AWS::S3::Bucket
 * 
 * ## Example Usage
 * 
 */
@ResourceType(type="aws-native:s3:Bucket")
public class Bucket extends com.pulumi.resources.CustomResource {
    /**
     * Configuration for the transfer acceleration state.
     * 
     */
    @Export(name="accelerateConfiguration", type=BucketAccelerateConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketAccelerateConfiguration> accelerateConfiguration;

    /**
     * @return Configuration for the transfer acceleration state.
     * 
     */
    public Output<Optional<BucketAccelerateConfiguration>> accelerateConfiguration() {
        return Codegen.optional(this.accelerateConfiguration);
    }
    /**
     * A canned access control list (ACL) that grants predefined permissions to the bucket.
     * 
     */
    @Export(name="accessControl", type=BucketAccessControl.class, parameters={})
    private Output</* @Nullable */ BucketAccessControl> accessControl;

    /**
     * @return A canned access control list (ACL) that grants predefined permissions to the bucket.
     * 
     */
    public Output<Optional<BucketAccessControl>> accessControl() {
        return Codegen.optional(this.accessControl);
    }
    /**
     * The configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     * 
     */
    @Export(name="analyticsConfigurations", type=List.class, parameters={BucketAnalyticsConfiguration.class})
    private Output</* @Nullable */ List<BucketAnalyticsConfiguration>> analyticsConfigurations;

    /**
     * @return The configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     * 
     */
    public Output<Optional<List<BucketAnalyticsConfiguration>>> analyticsConfigurations() {
        return Codegen.optional(this.analyticsConfigurations);
    }
    /**
     * The Amazon Resource Name (ARN) of the specified bucket.
     * 
     */
    @Export(name="arn", type=String.class, parameters={})
    private Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the specified bucket.
     * 
     */
    public Output<String> arn() {
        return this.arn;
    }
    @Export(name="bucketEncryption", type=BucketEncryption.class, parameters={})
    private Output</* @Nullable */ BucketEncryption> bucketEncryption;

    public Output<Optional<BucketEncryption>> bucketEncryption() {
        return Codegen.optional(this.bucketEncryption);
    }
    /**
     * A name for the bucket. If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name.
     * 
     */
    @Export(name="bucketName", type=String.class, parameters={})
    private Output</* @Nullable */ String> bucketName;

    /**
     * @return A name for the bucket. If you don&#39;t specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name.
     * 
     */
    public Output<Optional<String>> bucketName() {
        return Codegen.optional(this.bucketName);
    }
    /**
     * Rules that define cross-origin resource sharing of objects in this bucket.
     * 
     */
    @Export(name="corsConfiguration", type=BucketCorsConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketCorsConfiguration> corsConfiguration;

    /**
     * @return Rules that define cross-origin resource sharing of objects in this bucket.
     * 
     */
    public Output<Optional<BucketCorsConfiguration>> corsConfiguration() {
        return Codegen.optional(this.corsConfiguration);
    }
    /**
     * The IPv4 DNS name of the specified bucket.
     * 
     */
    @Export(name="domainName", type=String.class, parameters={})
    private Output<String> domainName;

    /**
     * @return The IPv4 DNS name of the specified bucket.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }
    /**
     * The IPv6 DNS name of the specified bucket. For more information about dual-stack endpoints, see [Using Amazon S3 Dual-Stack Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-endpoints.html).
     * 
     */
    @Export(name="dualStackDomainName", type=String.class, parameters={})
    private Output<String> dualStackDomainName;

    /**
     * @return The IPv6 DNS name of the specified bucket. For more information about dual-stack endpoints, see [Using Amazon S3 Dual-Stack Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-endpoints.html).
     * 
     */
    public Output<String> dualStackDomainName() {
        return this.dualStackDomainName;
    }
    /**
     * Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
     * 
     */
    @Export(name="intelligentTieringConfigurations", type=List.class, parameters={BucketIntelligentTieringConfiguration.class})
    private Output</* @Nullable */ List<BucketIntelligentTieringConfiguration>> intelligentTieringConfigurations;

    /**
     * @return Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
     * 
     */
    public Output<Optional<List<BucketIntelligentTieringConfiguration>>> intelligentTieringConfigurations() {
        return Codegen.optional(this.intelligentTieringConfigurations);
    }
    /**
     * The inventory configuration for an Amazon S3 bucket.
     * 
     */
    @Export(name="inventoryConfigurations", type=List.class, parameters={BucketInventoryConfiguration.class})
    private Output</* @Nullable */ List<BucketInventoryConfiguration>> inventoryConfigurations;

    /**
     * @return The inventory configuration for an Amazon S3 bucket.
     * 
     */
    public Output<Optional<List<BucketInventoryConfiguration>>> inventoryConfigurations() {
        return Codegen.optional(this.inventoryConfigurations);
    }
    /**
     * Rules that define how Amazon S3 manages objects during their lifetime.
     * 
     */
    @Export(name="lifecycleConfiguration", type=BucketLifecycleConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketLifecycleConfiguration> lifecycleConfiguration;

    /**
     * @return Rules that define how Amazon S3 manages objects during their lifetime.
     * 
     */
    public Output<Optional<BucketLifecycleConfiguration>> lifecycleConfiguration() {
        return Codegen.optional(this.lifecycleConfiguration);
    }
    /**
     * Settings that define where logs are stored.
     * 
     */
    @Export(name="loggingConfiguration", type=BucketLoggingConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketLoggingConfiguration> loggingConfiguration;

    /**
     * @return Settings that define where logs are stored.
     * 
     */
    public Output<Optional<BucketLoggingConfiguration>> loggingConfiguration() {
        return Codegen.optional(this.loggingConfiguration);
    }
    /**
     * Settings that define a metrics configuration for the CloudWatch request metrics from the bucket.
     * 
     */
    @Export(name="metricsConfigurations", type=List.class, parameters={BucketMetricsConfiguration.class})
    private Output</* @Nullable */ List<BucketMetricsConfiguration>> metricsConfigurations;

    /**
     * @return Settings that define a metrics configuration for the CloudWatch request metrics from the bucket.
     * 
     */
    public Output<Optional<List<BucketMetricsConfiguration>>> metricsConfigurations() {
        return Codegen.optional(this.metricsConfigurations);
    }
    /**
     * Configuration that defines how Amazon S3 handles bucket notifications.
     * 
     */
    @Export(name="notificationConfiguration", type=BucketNotificationConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketNotificationConfiguration> notificationConfiguration;

    /**
     * @return Configuration that defines how Amazon S3 handles bucket notifications.
     * 
     */
    public Output<Optional<BucketNotificationConfiguration>> notificationConfiguration() {
        return Codegen.optional(this.notificationConfiguration);
    }
    /**
     * Places an Object Lock configuration on the specified bucket.
     * 
     */
    @Export(name="objectLockConfiguration", type=BucketObjectLockConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketObjectLockConfiguration> objectLockConfiguration;

    /**
     * @return Places an Object Lock configuration on the specified bucket.
     * 
     */
    public Output<Optional<BucketObjectLockConfiguration>> objectLockConfiguration() {
        return Codegen.optional(this.objectLockConfiguration);
    }
    /**
     * Indicates whether this bucket has an Object Lock configuration enabled.
     * 
     */
    @Export(name="objectLockEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> objectLockEnabled;

    /**
     * @return Indicates whether this bucket has an Object Lock configuration enabled.
     * 
     */
    public Output<Optional<Boolean>> objectLockEnabled() {
        return Codegen.optional(this.objectLockEnabled);
    }
    /**
     * Specifies the container element for object ownership rules.
     * 
     */
    @Export(name="ownershipControls", type=BucketOwnershipControls.class, parameters={})
    private Output</* @Nullable */ BucketOwnershipControls> ownershipControls;

    /**
     * @return Specifies the container element for object ownership rules.
     * 
     */
    public Output<Optional<BucketOwnershipControls>> ownershipControls() {
        return Codegen.optional(this.ownershipControls);
    }
    @Export(name="publicAccessBlockConfiguration", type=BucketPublicAccessBlockConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketPublicAccessBlockConfiguration> publicAccessBlockConfiguration;

    public Output<Optional<BucketPublicAccessBlockConfiguration>> publicAccessBlockConfiguration() {
        return Codegen.optional(this.publicAccessBlockConfiguration);
    }
    /**
     * Returns the regional domain name of the specified bucket.
     * 
     */
    @Export(name="regionalDomainName", type=String.class, parameters={})
    private Output<String> regionalDomainName;

    /**
     * @return Returns the regional domain name of the specified bucket.
     * 
     */
    public Output<String> regionalDomainName() {
        return this.regionalDomainName;
    }
    /**
     * Configuration for replicating objects in an S3 bucket.
     * 
     */
    @Export(name="replicationConfiguration", type=BucketReplicationConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketReplicationConfiguration> replicationConfiguration;

    /**
     * @return Configuration for replicating objects in an S3 bucket.
     * 
     */
    public Output<Optional<BucketReplicationConfiguration>> replicationConfiguration() {
        return Codegen.optional(this.replicationConfiguration);
    }
    /**
     * An arbitrary set of tags (key-value pairs) for this S3 bucket.
     * 
     */
    @Export(name="tags", type=List.class, parameters={BucketTag.class})
    private Output</* @Nullable */ List<BucketTag>> tags;

    /**
     * @return An arbitrary set of tags (key-value pairs) for this S3 bucket.
     * 
     */
    public Output<Optional<List<BucketTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="versioningConfiguration", type=BucketVersioningConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketVersioningConfiguration> versioningConfiguration;

    public Output<Optional<BucketVersioningConfiguration>> versioningConfiguration() {
        return Codegen.optional(this.versioningConfiguration);
    }
    @Export(name="websiteConfiguration", type=BucketWebsiteConfiguration.class, parameters={})
    private Output</* @Nullable */ BucketWebsiteConfiguration> websiteConfiguration;

    public Output<Optional<BucketWebsiteConfiguration>> websiteConfiguration() {
        return Codegen.optional(this.websiteConfiguration);
    }
    /**
     * The Amazon S3 website endpoint for the specified bucket.
     * 
     */
    @Export(name="websiteURL", type=String.class, parameters={})
    private Output<String> websiteURL;

    /**
     * @return The Amazon S3 website endpoint for the specified bucket.
     * 
     */
    public Output<String> websiteURL() {
        return this.websiteURL;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Bucket(String name) {
        this(name, BucketArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Bucket(String name, @Nullable BucketArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Bucket(String name, @Nullable BucketArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:s3:Bucket", name, args == null ? BucketArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Bucket(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:s3:Bucket", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Bucket get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Bucket(name, id, options);
    }
}
