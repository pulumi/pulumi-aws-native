// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.outputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestManifestLayout;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestProfile;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestScteMarkersSource;
import com.pulumi.awsnative.mediapackage.outputs.PackagingConfigurationStreamSelection;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PackagingConfigurationDashManifest {
    /**
     * @return Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    private @Nullable PackagingConfigurationDashManifestManifestLayout manifestLayout;
    private @Nullable String manifestName;
    /**
     * @return Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    private @Nullable Integer minBufferTimeSeconds;
    /**
     * @return The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    private @Nullable PackagingConfigurationDashManifestProfile profile;
    /**
     * @return The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
     * 
     */
    private @Nullable PackagingConfigurationDashManifestScteMarkersSource scteMarkersSource;
    private @Nullable PackagingConfigurationStreamSelection streamSelection;

    private PackagingConfigurationDashManifest() {}
    /**
     * @return Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    public Optional<PackagingConfigurationDashManifestManifestLayout> manifestLayout() {
        return Optional.ofNullable(this.manifestLayout);
    }
    public Optional<String> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }
    /**
     * @return Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    public Optional<Integer> minBufferTimeSeconds() {
        return Optional.ofNullable(this.minBufferTimeSeconds);
    }
    /**
     * @return The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    public Optional<PackagingConfigurationDashManifestProfile> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
     * 
     */
    public Optional<PackagingConfigurationDashManifestScteMarkersSource> scteMarkersSource() {
        return Optional.ofNullable(this.scteMarkersSource);
    }
    public Optional<PackagingConfigurationStreamSelection> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackagingConfigurationDashManifest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable PackagingConfigurationDashManifestManifestLayout manifestLayout;
        private @Nullable String manifestName;
        private @Nullable Integer minBufferTimeSeconds;
        private @Nullable PackagingConfigurationDashManifestProfile profile;
        private @Nullable PackagingConfigurationDashManifestScteMarkersSource scteMarkersSource;
        private @Nullable PackagingConfigurationStreamSelection streamSelection;
        public Builder() {}
        public Builder(PackagingConfigurationDashManifest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manifestLayout = defaults.manifestLayout;
    	      this.manifestName = defaults.manifestName;
    	      this.minBufferTimeSeconds = defaults.minBufferTimeSeconds;
    	      this.profile = defaults.profile;
    	      this.scteMarkersSource = defaults.scteMarkersSource;
    	      this.streamSelection = defaults.streamSelection;
        }

        @CustomType.Setter
        public Builder manifestLayout(@Nullable PackagingConfigurationDashManifestManifestLayout manifestLayout) {
            this.manifestLayout = manifestLayout;
            return this;
        }
        @CustomType.Setter
        public Builder manifestName(@Nullable String manifestName) {
            this.manifestName = manifestName;
            return this;
        }
        @CustomType.Setter
        public Builder minBufferTimeSeconds(@Nullable Integer minBufferTimeSeconds) {
            this.minBufferTimeSeconds = minBufferTimeSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable PackagingConfigurationDashManifestProfile profile) {
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder scteMarkersSource(@Nullable PackagingConfigurationDashManifestScteMarkersSource scteMarkersSource) {
            this.scteMarkersSource = scteMarkersSource;
            return this;
        }
        @CustomType.Setter
        public Builder streamSelection(@Nullable PackagingConfigurationStreamSelection streamSelection) {
            this.streamSelection = streamSelection;
            return this;
        }
        public PackagingConfigurationDashManifest build() {
            final var o = new PackagingConfigurationDashManifest();
            o.manifestLayout = manifestLayout;
            o.manifestName = manifestName;
            o.minBufferTimeSeconds = minBufferTimeSeconds;
            o.profile = profile;
            o.scteMarkersSource = scteMarkersSource;
            o.streamSelection = streamSelection;
            return o;
        }
    }
}
