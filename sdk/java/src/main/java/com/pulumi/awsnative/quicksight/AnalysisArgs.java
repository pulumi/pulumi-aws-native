// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight;

import com.pulumi.awsnative.quicksight.inputs.AnalysisErrorArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisParametersArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisResourcePermissionArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisSourceEntityArgs;
import com.pulumi.awsnative.quicksight.inputs.AnalysisTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalysisArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalysisArgs Empty = new AnalysisArgs();

    @Import(name="analysisId", required=true)
    private Output<String> analysisId;

    public Output<String> analysisId() {
        return this.analysisId;
    }

    @Import(name="awsAccountId", required=true)
    private Output<String> awsAccountId;

    public Output<String> awsAccountId() {
        return this.awsAccountId;
    }

    /**
     * &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
     * 
     */
    @Import(name="errors")
    private @Nullable Output<List<AnalysisErrorArgs>> errors;

    /**
     * @return &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisErrorArgs>>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="parameters")
    private @Nullable Output<AnalysisParametersArgs> parameters;

    public Optional<Output<AnalysisParametersArgs>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
     *             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
     *             providing a list of AWS Identity and Access Management (IAM) action information for each
     *             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
     * 
     *         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<AnalysisResourcePermissionArgs>> permissions;

    /**
     * @return &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
     *             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
     *             providing a list of AWS Identity and Access Management (IAM) action information for each
     *             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
     * 
     *         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisResourcePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    @Import(name="sourceEntity", required=true)
    private Output<AnalysisSourceEntityArgs> sourceEntity;

    public Output<AnalysisSourceEntityArgs> sourceEntity() {
        return this.sourceEntity;
    }

    /**
     * &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
     *             analysis.&lt;/p&gt;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AnalysisTagArgs>> tags;

    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
     *             analysis.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<AnalysisTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
     * 
     */
    @Import(name="themeArn")
    private @Nullable Output<String> themeArn;

    /**
     * @return &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> themeArn() {
        return Optional.ofNullable(this.themeArn);
    }

    private AnalysisArgs() {}

    private AnalysisArgs(AnalysisArgs $) {
        this.analysisId = $.analysisId;
        this.awsAccountId = $.awsAccountId;
        this.errors = $.errors;
        this.name = $.name;
        this.parameters = $.parameters;
        this.permissions = $.permissions;
        this.sourceEntity = $.sourceEntity;
        this.tags = $.tags;
        this.themeArn = $.themeArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalysisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalysisArgs $;

        public Builder() {
            $ = new AnalysisArgs();
        }

        public Builder(AnalysisArgs defaults) {
            $ = new AnalysisArgs(Objects.requireNonNull(defaults));
        }

        public Builder analysisId(Output<String> analysisId) {
            $.analysisId = analysisId;
            return this;
        }

        public Builder analysisId(String analysisId) {
            return analysisId(Output.of(analysisId));
        }

        public Builder awsAccountId(Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param errors &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder errors(@Nullable Output<List<AnalysisErrorArgs>> errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param errors &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder errors(List<AnalysisErrorArgs> errors) {
            return errors(Output.of(errors));
        }

        /**
         * @param errors &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder errors(AnalysisErrorArgs... errors) {
            return errors(List.of(errors));
        }

        /**
         * @param name &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(@Nullable Output<AnalysisParametersArgs> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(AnalysisParametersArgs parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param permissions &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
         *             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
         *             providing a list of AWS Identity and Access Management (IAM) action information for each
         *             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
         * 
         *         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<AnalysisResourcePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
         *             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
         *             providing a list of AWS Identity and Access Management (IAM) action information for each
         *             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
         * 
         *         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<AnalysisResourcePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
         *             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
         *             providing a list of AWS Identity and Access Management (IAM) action information for each
         *             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
         * 
         *         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(AnalysisResourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder sourceEntity(Output<AnalysisSourceEntityArgs> sourceEntity) {
            $.sourceEntity = sourceEntity;
            return this;
        }

        public Builder sourceEntity(AnalysisSourceEntityArgs sourceEntity) {
            return sourceEntity(Output.of(sourceEntity));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
         *             analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AnalysisTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
         *             analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AnalysisTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
         *             analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(AnalysisTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param themeArn &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder themeArn(@Nullable Output<String> themeArn) {
            $.themeArn = themeArn;
            return this;
        }

        /**
         * @param themeArn &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder themeArn(String themeArn) {
            return themeArn(Output.of(themeArn));
        }

        public AnalysisArgs build() {
            $.analysisId = Objects.requireNonNull($.analysisId, "expected parameter 'analysisId' to be non-null");
            $.awsAccountId = Objects.requireNonNull($.awsAccountId, "expected parameter 'awsAccountId' to be non-null");
            $.sourceEntity = Objects.requireNonNull($.sourceEntity, "expected parameter 'sourceEntity' to be non-null");
            return $;
        }
    }

}
