// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssm;

import com.pulumi.awsnative.ssm.enums.DocumentFormat;
import com.pulumi.awsnative.ssm.enums.DocumentType;
import com.pulumi.awsnative.ssm.enums.DocumentUpdateMethod;
import com.pulumi.awsnative.ssm.inputs.DocumentAttachmentsSourceArgs;
import com.pulumi.awsnative.ssm.inputs.DocumentRequiresArgs;
import com.pulumi.awsnative.ssm.inputs.DocumentTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DocumentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DocumentArgs Empty = new DocumentArgs();

    /**
     * A list of key and value pairs that describe attachments to a version of a document.
     * 
     */
    @Import(name="attachments")
    private @Nullable Output<List<DocumentAttachmentsSourceArgs>> attachments;

    /**
     * @return A list of key and value pairs that describe attachments to a version of a document.
     * 
     */
    public Optional<Output<List<DocumentAttachmentsSourceArgs>>> attachments() {
        return Optional.ofNullable(this.attachments);
    }

    /**
     * The content for the Systems Manager document in JSON, YAML or String format.
     * 
     */
    @Import(name="content", required=true)
    private Output<Object> content;

    /**
     * @return The content for the Systems Manager document in JSON, YAML or String format.
     * 
     */
    public Output<Object> content() {
        return this.content;
    }

    /**
     * Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
     * 
     */
    @Import(name="documentFormat")
    private @Nullable Output<DocumentFormat> documentFormat;

    /**
     * @return Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
     * 
     */
    public Optional<Output<DocumentFormat>> documentFormat() {
        return Optional.ofNullable(this.documentFormat);
    }

    /**
     * The type of document to create.
     * 
     */
    @Import(name="documentType")
    private @Nullable Output<DocumentType> documentType;

    /**
     * @return The type of document to create.
     * 
     */
    public Optional<Output<DocumentType>> documentType() {
        return Optional.ofNullable(this.documentType);
    }

    /**
     * A name for the Systems Manager document.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the Systems Manager document.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
     * 
     */
    @Import(name="requires")
    private @Nullable Output<List<DocumentRequiresArgs>> requires;

    /**
     * @return A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
     * 
     */
    public Optional<Output<List<DocumentRequiresArgs>>> requires() {
        return Optional.ofNullable(this.requires);
    }

    /**
     * Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DocumentTagArgs>> tags;

    /**
     * @return Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
     * 
     */
    public Optional<Output<List<DocumentTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specify a target type to define the kinds of resources the document can run on.
     * 
     */
    @Import(name="targetType")
    private @Nullable Output<String> targetType;

    /**
     * @return Specify a target type to define the kinds of resources the document can run on.
     * 
     */
    public Optional<Output<String>> targetType() {
        return Optional.ofNullable(this.targetType);
    }

    /**
     * Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
     * 
     */
    @Import(name="updateMethod")
    private @Nullable Output<DocumentUpdateMethod> updateMethod;

    /**
     * @return Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
     * 
     */
    public Optional<Output<DocumentUpdateMethod>> updateMethod() {
        return Optional.ofNullable(this.updateMethod);
    }

    /**
     * An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
     * 
     */
    @Import(name="versionName")
    private @Nullable Output<String> versionName;

    /**
     * @return An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
     * 
     */
    public Optional<Output<String>> versionName() {
        return Optional.ofNullable(this.versionName);
    }

    private DocumentArgs() {}

    private DocumentArgs(DocumentArgs $) {
        this.attachments = $.attachments;
        this.content = $.content;
        this.documentFormat = $.documentFormat;
        this.documentType = $.documentType;
        this.name = $.name;
        this.requires = $.requires;
        this.tags = $.tags;
        this.targetType = $.targetType;
        this.updateMethod = $.updateMethod;
        this.versionName = $.versionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DocumentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DocumentArgs $;

        public Builder() {
            $ = new DocumentArgs();
        }

        public Builder(DocumentArgs defaults) {
            $ = new DocumentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachments A list of key and value pairs that describe attachments to a version of a document.
         * 
         * @return builder
         * 
         */
        public Builder attachments(@Nullable Output<List<DocumentAttachmentsSourceArgs>> attachments) {
            $.attachments = attachments;
            return this;
        }

        /**
         * @param attachments A list of key and value pairs that describe attachments to a version of a document.
         * 
         * @return builder
         * 
         */
        public Builder attachments(List<DocumentAttachmentsSourceArgs> attachments) {
            return attachments(Output.of(attachments));
        }

        /**
         * @param attachments A list of key and value pairs that describe attachments to a version of a document.
         * 
         * @return builder
         * 
         */
        public Builder attachments(DocumentAttachmentsSourceArgs... attachments) {
            return attachments(List.of(attachments));
        }

        /**
         * @param content The content for the Systems Manager document in JSON, YAML or String format.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<Object> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content for the Systems Manager document in JSON, YAML or String format.
         * 
         * @return builder
         * 
         */
        public Builder content(Object content) {
            return content(Output.of(content));
        }

        /**
         * @param documentFormat Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
         * 
         * @return builder
         * 
         */
        public Builder documentFormat(@Nullable Output<DocumentFormat> documentFormat) {
            $.documentFormat = documentFormat;
            return this;
        }

        /**
         * @param documentFormat Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
         * 
         * @return builder
         * 
         */
        public Builder documentFormat(DocumentFormat documentFormat) {
            return documentFormat(Output.of(documentFormat));
        }

        /**
         * @param documentType The type of document to create.
         * 
         * @return builder
         * 
         */
        public Builder documentType(@Nullable Output<DocumentType> documentType) {
            $.documentType = documentType;
            return this;
        }

        /**
         * @param documentType The type of document to create.
         * 
         * @return builder
         * 
         */
        public Builder documentType(DocumentType documentType) {
            return documentType(Output.of(documentType));
        }

        /**
         * @param name A name for the Systems Manager document.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the Systems Manager document.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requires A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
         * 
         * @return builder
         * 
         */
        public Builder requires(@Nullable Output<List<DocumentRequiresArgs>> requires) {
            $.requires = requires;
            return this;
        }

        /**
         * @param requires A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
         * 
         * @return builder
         * 
         */
        public Builder requires(List<DocumentRequiresArgs> requires) {
            return requires(Output.of(requires));
        }

        /**
         * @param requires A list of SSM documents required by a document. For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema document.
         * 
         * @return builder
         * 
         */
        public Builder requires(DocumentRequiresArgs... requires) {
            return requires(List.of(requires));
        }

        /**
         * @param tags Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DocumentTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DocumentTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(DocumentTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param targetType Specify a target type to define the kinds of resources the document can run on.
         * 
         * @return builder
         * 
         */
        public Builder targetType(@Nullable Output<String> targetType) {
            $.targetType = targetType;
            return this;
        }

        /**
         * @param targetType Specify a target type to define the kinds of resources the document can run on.
         * 
         * @return builder
         * 
         */
        public Builder targetType(String targetType) {
            return targetType(Output.of(targetType));
        }

        /**
         * @param updateMethod Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
         * 
         * @return builder
         * 
         */
        public Builder updateMethod(@Nullable Output<DocumentUpdateMethod> updateMethod) {
            $.updateMethod = updateMethod;
            return this;
        }

        /**
         * @param updateMethod Update method - when set to &#39;Replace&#39;, the update will replace the existing document; when set to &#39;NewVersion&#39;, the update will create a new version.
         * 
         * @return builder
         * 
         */
        public Builder updateMethod(DocumentUpdateMethod updateMethod) {
            return updateMethod(Output.of(updateMethod));
        }

        /**
         * @param versionName An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder versionName(@Nullable Output<String> versionName) {
            $.versionName = versionName;
            return this;
        }

        /**
         * @param versionName An optional field specifying the version of the artifact you are creating with the document. This value is unique across all versions of a document, and cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder versionName(String versionName) {
            return versionName(Output.of(versionName));
        }

        public DocumentArgs build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            return $;
        }
    }

}
