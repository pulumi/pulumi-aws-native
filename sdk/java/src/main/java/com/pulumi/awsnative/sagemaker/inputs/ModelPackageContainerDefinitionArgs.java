// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.inputs.ModelPackageContainerDefinitionModelInputPropertiesArgs;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageEnvironmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the Docker container for the model package.
 * 
 */
public final class ModelPackageContainerDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageContainerDefinitionArgs Empty = new ModelPackageContainerDefinitionArgs();

    /**
     * The DNS host name for the Docker container.
     * 
     */
    @Import(name="containerHostname")
    private @Nullable Output<String> containerHostname;

    /**
     * @return The DNS host name for the Docker container.
     * 
     */
    public Optional<Output<String>> containerHostname() {
        return Optional.ofNullable(this.containerHostname);
    }

    @Import(name="environment")
    private @Nullable Output<ModelPackageEnvironmentArgs> environment;

    public Optional<Output<ModelPackageEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The machine learning framework of the model package container image.
     * 
     */
    @Import(name="framework")
    private @Nullable Output<String> framework;

    /**
     * @return The machine learning framework of the model package container image.
     * 
     */
    public Optional<Output<String>> framework() {
        return Optional.ofNullable(this.framework);
    }

    /**
     * The framework version of the Model Package Container Image.
     * 
     */
    @Import(name="frameworkVersion")
    private @Nullable Output<String> frameworkVersion;

    /**
     * @return The framework version of the Model Package Container Image.
     * 
     */
    public Optional<Output<String>> frameworkVersion() {
        return Optional.ofNullable(this.frameworkVersion);
    }

    /**
     * The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * An MD5 hash of the training algorithm that identifies the Docker image used for training.
     * 
     */
    @Import(name="imageDigest")
    private @Nullable Output<String> imageDigest;

    /**
     * @return An MD5 hash of the training algorithm that identifies the Docker image used for training.
     * 
     */
    public Optional<Output<String>> imageDigest() {
        return Optional.ofNullable(this.imageDigest);
    }

    /**
     * A structure with Model Input details.
     * 
     */
    @Import(name="modelDataUrl")
    private @Nullable Output<String> modelDataUrl;

    /**
     * @return A structure with Model Input details.
     * 
     */
    public Optional<Output<String>> modelDataUrl() {
        return Optional.ofNullable(this.modelDataUrl);
    }

    @Import(name="modelInput")
    private @Nullable Output<ModelPackageContainerDefinitionModelInputPropertiesArgs> modelInput;

    public Optional<Output<ModelPackageContainerDefinitionModelInputPropertiesArgs>> modelInput() {
        return Optional.ofNullable(this.modelInput);
    }

    /**
     * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
     * 
     */
    @Import(name="nearestModelName")
    private @Nullable Output<String> nearestModelName;

    /**
     * @return The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
     * 
     */
    public Optional<Output<String>> nearestModelName() {
        return Optional.ofNullable(this.nearestModelName);
    }

    /**
     * The AWS Marketplace product ID of the model package.
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return The AWS Marketplace product ID of the model package.
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    private ModelPackageContainerDefinitionArgs() {}

    private ModelPackageContainerDefinitionArgs(ModelPackageContainerDefinitionArgs $) {
        this.containerHostname = $.containerHostname;
        this.environment = $.environment;
        this.framework = $.framework;
        this.frameworkVersion = $.frameworkVersion;
        this.image = $.image;
        this.imageDigest = $.imageDigest;
        this.modelDataUrl = $.modelDataUrl;
        this.modelInput = $.modelInput;
        this.nearestModelName = $.nearestModelName;
        this.productId = $.productId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageContainerDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageContainerDefinitionArgs $;

        public Builder() {
            $ = new ModelPackageContainerDefinitionArgs();
        }

        public Builder(ModelPackageContainerDefinitionArgs defaults) {
            $ = new ModelPackageContainerDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerHostname The DNS host name for the Docker container.
         * 
         * @return builder
         * 
         */
        public Builder containerHostname(@Nullable Output<String> containerHostname) {
            $.containerHostname = containerHostname;
            return this;
        }

        /**
         * @param containerHostname The DNS host name for the Docker container.
         * 
         * @return builder
         * 
         */
        public Builder containerHostname(String containerHostname) {
            return containerHostname(Output.of(containerHostname));
        }

        public Builder environment(@Nullable Output<ModelPackageEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(ModelPackageEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param framework The machine learning framework of the model package container image.
         * 
         * @return builder
         * 
         */
        public Builder framework(@Nullable Output<String> framework) {
            $.framework = framework;
            return this;
        }

        /**
         * @param framework The machine learning framework of the model package container image.
         * 
         * @return builder
         * 
         */
        public Builder framework(String framework) {
            return framework(Output.of(framework));
        }

        /**
         * @param frameworkVersion The framework version of the Model Package Container Image.
         * 
         * @return builder
         * 
         */
        public Builder frameworkVersion(@Nullable Output<String> frameworkVersion) {
            $.frameworkVersion = frameworkVersion;
            return this;
        }

        /**
         * @param frameworkVersion The framework version of the Model Package Container Image.
         * 
         * @return builder
         * 
         */
        public Builder frameworkVersion(String frameworkVersion) {
            return frameworkVersion(Output.of(frameworkVersion));
        }

        /**
         * @param image The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param imageDigest An MD5 hash of the training algorithm that identifies the Docker image used for training.
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(@Nullable Output<String> imageDigest) {
            $.imageDigest = imageDigest;
            return this;
        }

        /**
         * @param imageDigest An MD5 hash of the training algorithm that identifies the Docker image used for training.
         * 
         * @return builder
         * 
         */
        public Builder imageDigest(String imageDigest) {
            return imageDigest(Output.of(imageDigest));
        }

        /**
         * @param modelDataUrl A structure with Model Input details.
         * 
         * @return builder
         * 
         */
        public Builder modelDataUrl(@Nullable Output<String> modelDataUrl) {
            $.modelDataUrl = modelDataUrl;
            return this;
        }

        /**
         * @param modelDataUrl A structure with Model Input details.
         * 
         * @return builder
         * 
         */
        public Builder modelDataUrl(String modelDataUrl) {
            return modelDataUrl(Output.of(modelDataUrl));
        }

        public Builder modelInput(@Nullable Output<ModelPackageContainerDefinitionModelInputPropertiesArgs> modelInput) {
            $.modelInput = modelInput;
            return this;
        }

        public Builder modelInput(ModelPackageContainerDefinitionModelInputPropertiesArgs modelInput) {
            return modelInput(Output.of(modelInput));
        }

        /**
         * @param nearestModelName The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         * 
         * @return builder
         * 
         */
        public Builder nearestModelName(@Nullable Output<String> nearestModelName) {
            $.nearestModelName = nearestModelName;
            return this;
        }

        /**
         * @param nearestModelName The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         * 
         * @return builder
         * 
         */
        public Builder nearestModelName(String nearestModelName) {
            return nearestModelName(Output.of(nearestModelName));
        }

        /**
         * @param productId The AWS Marketplace product ID of the model package.
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId The AWS Marketplace product ID of the model package.
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        public ModelPackageContainerDefinitionArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            return $;
        }
    }

}
