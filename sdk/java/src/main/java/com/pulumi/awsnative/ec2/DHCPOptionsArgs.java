// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2;

import com.pulumi.awsnative.ec2.inputs.DHCPOptionsTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DHCPOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DHCPOptionsArgs Empty = new DHCPOptionsArgs();

    /**
     * This value is used to complete unqualified DNS hostnames.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return This value is used to complete unqualified DNS hostnames.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
     * 
     */
    @Import(name="domainNameServers")
    private @Nullable Output<List<String>> domainNameServers;

    /**
     * @return The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
     * 
     */
    public Optional<Output<List<String>>> domainNameServers() {
        return Optional.ofNullable(this.domainNameServers);
    }

    /**
     * The IPv4 addresses of up to four NetBIOS name servers.
     * 
     */
    @Import(name="netbiosNameServers")
    private @Nullable Output<List<String>> netbiosNameServers;

    /**
     * @return The IPv4 addresses of up to four NetBIOS name servers.
     * 
     */
    public Optional<Output<List<String>>> netbiosNameServers() {
        return Optional.ofNullable(this.netbiosNameServers);
    }

    /**
     * The NetBIOS node type (1, 2, 4, or 8).
     * 
     */
    @Import(name="netbiosNodeType")
    private @Nullable Output<Integer> netbiosNodeType;

    /**
     * @return The NetBIOS node type (1, 2, 4, or 8).
     * 
     */
    public Optional<Output<Integer>> netbiosNodeType() {
        return Optional.ofNullable(this.netbiosNodeType);
    }

    /**
     * The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
     * 
     */
    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    /**
     * @return The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
     * 
     */
    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    /**
     * Any tags assigned to the DHCP options set.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DHCPOptionsTagArgs>> tags;

    /**
     * @return Any tags assigned to the DHCP options set.
     * 
     */
    public Optional<Output<List<DHCPOptionsTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DHCPOptionsArgs() {}

    private DHCPOptionsArgs(DHCPOptionsArgs $) {
        this.domainName = $.domainName;
        this.domainNameServers = $.domainNameServers;
        this.netbiosNameServers = $.netbiosNameServers;
        this.netbiosNodeType = $.netbiosNodeType;
        this.ntpServers = $.ntpServers;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DHCPOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DHCPOptionsArgs $;

        public Builder() {
            $ = new DHCPOptionsArgs();
        }

        public Builder(DHCPOptionsArgs defaults) {
            $ = new DHCPOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName This value is used to complete unqualified DNS hostnames.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName This value is used to complete unqualified DNS hostnames.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNameServers The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
         * 
         * @return builder
         * 
         */
        public Builder domainNameServers(@Nullable Output<List<String>> domainNameServers) {
            $.domainNameServers = domainNameServers;
            return this;
        }

        /**
         * @param domainNameServers The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
         * 
         * @return builder
         * 
         */
        public Builder domainNameServers(List<String> domainNameServers) {
            return domainNameServers(Output.of(domainNameServers));
        }

        /**
         * @param domainNameServers The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
         * 
         * @return builder
         * 
         */
        public Builder domainNameServers(String... domainNameServers) {
            return domainNameServers(List.of(domainNameServers));
        }

        /**
         * @param netbiosNameServers The IPv4 addresses of up to four NetBIOS name servers.
         * 
         * @return builder
         * 
         */
        public Builder netbiosNameServers(@Nullable Output<List<String>> netbiosNameServers) {
            $.netbiosNameServers = netbiosNameServers;
            return this;
        }

        /**
         * @param netbiosNameServers The IPv4 addresses of up to four NetBIOS name servers.
         * 
         * @return builder
         * 
         */
        public Builder netbiosNameServers(List<String> netbiosNameServers) {
            return netbiosNameServers(Output.of(netbiosNameServers));
        }

        /**
         * @param netbiosNameServers The IPv4 addresses of up to four NetBIOS name servers.
         * 
         * @return builder
         * 
         */
        public Builder netbiosNameServers(String... netbiosNameServers) {
            return netbiosNameServers(List.of(netbiosNameServers));
        }

        /**
         * @param netbiosNodeType The NetBIOS node type (1, 2, 4, or 8).
         * 
         * @return builder
         * 
         */
        public Builder netbiosNodeType(@Nullable Output<Integer> netbiosNodeType) {
            $.netbiosNodeType = netbiosNodeType;
            return this;
        }

        /**
         * @param netbiosNodeType The NetBIOS node type (1, 2, 4, or 8).
         * 
         * @return builder
         * 
         */
        public Builder netbiosNodeType(Integer netbiosNodeType) {
            return netbiosNodeType(Output.of(netbiosNodeType));
        }

        /**
         * @param ntpServers The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        /**
         * @param ntpServers The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        /**
         * @param ntpServers The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        /**
         * @param tags Any tags assigned to the DHCP options set.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DHCPOptionsTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Any tags assigned to the DHCP options set.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DHCPOptionsTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Any tags assigned to the DHCP options set.
         * 
         * @return builder
         * 
         */
        public Builder tags(DHCPOptionsTagArgs... tags) {
            return tags(List.of(tags));
        }

        public DHCPOptionsArgs build() {
            return $;
        }
    }

}
