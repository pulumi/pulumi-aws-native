// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.inputs.BucketNotificationFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The topic to which notifications are sent and the events for which notifications are generated.
 * 
 */
public final class BucketTopicConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketTopicConfigurationArgs Empty = new BucketTopicConfigurationArgs();

    /**
     * The Amazon S3 bucket event about which to send notifications.
     * 
     */
    @Import(name="event", required=true)
    private Output<String> event;

    /**
     * @return The Amazon S3 bucket event about which to send notifications.
     * 
     */
    public Output<String> event() {
        return this.event;
    }

    /**
     * The filtering rules that determine for which objects to send notifications.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<BucketNotificationFilterArgs> filter;

    /**
     * @return The filtering rules that determine for which objects to send notifications.
     * 
     */
    public Optional<Output<BucketNotificationFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
     * 
     */
    @Import(name="topic", required=true)
    private Output<String> topic;

    /**
     * @return The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
     * 
     */
    public Output<String> topic() {
        return this.topic;
    }

    private BucketTopicConfigurationArgs() {}

    private BucketTopicConfigurationArgs(BucketTopicConfigurationArgs $) {
        this.event = $.event;
        this.filter = $.filter;
        this.topic = $.topic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketTopicConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketTopicConfigurationArgs $;

        public Builder() {
            $ = new BucketTopicConfigurationArgs();
        }

        public Builder(BucketTopicConfigurationArgs defaults) {
            $ = new BucketTopicConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param event The Amazon S3 bucket event about which to send notifications.
         * 
         * @return builder
         * 
         */
        public Builder event(Output<String> event) {
            $.event = event;
            return this;
        }

        /**
         * @param event The Amazon S3 bucket event about which to send notifications.
         * 
         * @return builder
         * 
         */
        public Builder event(String event) {
            return event(Output.of(event));
        }

        /**
         * @param filter The filtering rules that determine for which objects to send notifications.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<BucketNotificationFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The filtering rules that determine for which objects to send notifications.
         * 
         * @return builder
         * 
         */
        public Builder filter(BucketNotificationFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param topic The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
         * 
         * @return builder
         * 
         */
        public Builder topic(Output<String> topic) {
            $.topic = topic;
            return this;
        }

        /**
         * @param topic The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
         * 
         * @return builder
         * 
         */
        public Builder topic(String topic) {
            return topic(Output.of(topic));
        }

        public BucketTopicConfigurationArgs build() {
            $.event = Objects.requireNonNull($.event, "expected parameter 'event' to be non-null");
            $.topic = Objects.requireNonNull($.topic, "expected parameter 'topic' to be non-null");
            return $;
        }
    }

}
