// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.inputs;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationCheckpointConfigurationConfigurationType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes an application&#39;s checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
 * 
 */
public final class ApplicationCheckpointConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationCheckpointConfigurationArgs Empty = new ApplicationCheckpointConfigurationArgs();

    /**
     * Describes the interval in milliseconds between checkpoint operations.
     * 
     */
    @Import(name="checkpointInterval")
    private @Nullable Output<Integer> checkpointInterval;

    /**
     * @return Describes the interval in milliseconds between checkpoint operations.
     * 
     */
    public Optional<Output<Integer>> checkpointInterval() {
        return Optional.ofNullable(this.checkpointInterval);
    }

    /**
     * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     * 
     */
    @Import(name="checkpointingEnabled")
    private @Nullable Output<Boolean> checkpointingEnabled;

    /**
     * @return Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     * 
     */
    public Optional<Output<Boolean>> checkpointingEnabled() {
        return Optional.ofNullable(this.checkpointingEnabled);
    }

    /**
     * Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
     * 
     */
    @Import(name="configurationType", required=true)
    private Output<ApplicationCheckpointConfigurationConfigurationType> configurationType;

    /**
     * @return Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
     * 
     */
    public Output<ApplicationCheckpointConfigurationConfigurationType> configurationType() {
        return this.configurationType;
    }

    /**
     * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
     * 
     */
    @Import(name="minPauseBetweenCheckpoints")
    private @Nullable Output<Integer> minPauseBetweenCheckpoints;

    /**
     * @return Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
     * 
     */
    public Optional<Output<Integer>> minPauseBetweenCheckpoints() {
        return Optional.ofNullable(this.minPauseBetweenCheckpoints);
    }

    private ApplicationCheckpointConfigurationArgs() {}

    private ApplicationCheckpointConfigurationArgs(ApplicationCheckpointConfigurationArgs $) {
        this.checkpointInterval = $.checkpointInterval;
        this.checkpointingEnabled = $.checkpointingEnabled;
        this.configurationType = $.configurationType;
        this.minPauseBetweenCheckpoints = $.minPauseBetweenCheckpoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationCheckpointConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationCheckpointConfigurationArgs $;

        public Builder() {
            $ = new ApplicationCheckpointConfigurationArgs();
        }

        public Builder(ApplicationCheckpointConfigurationArgs defaults) {
            $ = new ApplicationCheckpointConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkpointInterval Describes the interval in milliseconds between checkpoint operations.
         * 
         * @return builder
         * 
         */
        public Builder checkpointInterval(@Nullable Output<Integer> checkpointInterval) {
            $.checkpointInterval = checkpointInterval;
            return this;
        }

        /**
         * @param checkpointInterval Describes the interval in milliseconds between checkpoint operations.
         * 
         * @return builder
         * 
         */
        public Builder checkpointInterval(Integer checkpointInterval) {
            return checkpointInterval(Output.of(checkpointInterval));
        }

        /**
         * @param checkpointingEnabled Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
         * 
         * @return builder
         * 
         */
        public Builder checkpointingEnabled(@Nullable Output<Boolean> checkpointingEnabled) {
            $.checkpointingEnabled = checkpointingEnabled;
            return this;
        }

        /**
         * @param checkpointingEnabled Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
         * 
         * @return builder
         * 
         */
        public Builder checkpointingEnabled(Boolean checkpointingEnabled) {
            return checkpointingEnabled(Output.of(checkpointingEnabled));
        }

        /**
         * @param configurationType Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(Output<ApplicationCheckpointConfigurationConfigurationType> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(ApplicationCheckpointConfigurationConfigurationType configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param minPauseBetweenCheckpoints Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
         * 
         * @return builder
         * 
         */
        public Builder minPauseBetweenCheckpoints(@Nullable Output<Integer> minPauseBetweenCheckpoints) {
            $.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
            return this;
        }

        /**
         * @param minPauseBetweenCheckpoints Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
         * 
         * @return builder
         * 
         */
        public Builder minPauseBetweenCheckpoints(Integer minPauseBetweenCheckpoints) {
            return minPauseBetweenCheckpoints(Output.of(minPauseBetweenCheckpoints));
        }

        public ApplicationCheckpointConfigurationArgs build() {
            $.configurationType = Objects.requireNonNull($.configurationType, "expected parameter 'configurationType' to be non-null");
            return $;
        }
    }

}
