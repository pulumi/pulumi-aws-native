// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudformation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModuleDefaultVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModuleDefaultVersionArgs Empty = new ModuleDefaultVersionArgs();

    /**
     * The Amazon Resource Name (ARN) of the module version to set as the default version.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return The Amazon Resource Name (ARN) of the module version to set as the default version.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The name of a module existing in the registry.
     * 
     */
    @Import(name="moduleName")
    private @Nullable Output<String> moduleName;

    /**
     * @return The name of a module existing in the registry.
     * 
     */
    public Optional<Output<String>> moduleName() {
        return Optional.ofNullable(this.moduleName);
    }

    /**
     * The ID of an existing version of the named module to set as the default.
     * 
     */
    @Import(name="versionId")
    private @Nullable Output<String> versionId;

    /**
     * @return The ID of an existing version of the named module to set as the default.
     * 
     */
    public Optional<Output<String>> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    private ModuleDefaultVersionArgs() {}

    private ModuleDefaultVersionArgs(ModuleDefaultVersionArgs $) {
        this.arn = $.arn;
        this.moduleName = $.moduleName;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModuleDefaultVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModuleDefaultVersionArgs $;

        public Builder() {
            $ = new ModuleDefaultVersionArgs();
        }

        public Builder(ModuleDefaultVersionArgs defaults) {
            $ = new ModuleDefaultVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the module version to set as the default version.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the module version to set as the default version.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param moduleName The name of a module existing in the registry.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(@Nullable Output<String> moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param moduleName The name of a module existing in the registry.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(String moduleName) {
            return moduleName(Output.of(moduleName));
        }

        /**
         * @param versionId The ID of an existing version of the named module to set as the default.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId The ID of an existing version of the named module to set as the default.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        public ModuleDefaultVersionArgs build() {
            return $;
        }
    }

}
