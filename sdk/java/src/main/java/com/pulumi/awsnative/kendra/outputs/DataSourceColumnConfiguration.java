// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra.outputs;

import com.pulumi.awsnative.kendra.outputs.DataSourceToIndexFieldMapping;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataSourceColumnConfiguration {
    private List<String> changeDetectingColumns;
    private String documentDataColumnName;
    private String documentIdColumnName;
    private @Nullable String documentTitleColumnName;
    private @Nullable List<DataSourceToIndexFieldMapping> fieldMappings;

    private DataSourceColumnConfiguration() {}
    public List<String> changeDetectingColumns() {
        return this.changeDetectingColumns;
    }
    public String documentDataColumnName() {
        return this.documentDataColumnName;
    }
    public String documentIdColumnName() {
        return this.documentIdColumnName;
    }
    public Optional<String> documentTitleColumnName() {
        return Optional.ofNullable(this.documentTitleColumnName);
    }
    public List<DataSourceToIndexFieldMapping> fieldMappings() {
        return this.fieldMappings == null ? List.of() : this.fieldMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceColumnConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> changeDetectingColumns;
        private String documentDataColumnName;
        private String documentIdColumnName;
        private @Nullable String documentTitleColumnName;
        private @Nullable List<DataSourceToIndexFieldMapping> fieldMappings;
        public Builder() {}
        public Builder(DataSourceColumnConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.changeDetectingColumns = defaults.changeDetectingColumns;
    	      this.documentDataColumnName = defaults.documentDataColumnName;
    	      this.documentIdColumnName = defaults.documentIdColumnName;
    	      this.documentTitleColumnName = defaults.documentTitleColumnName;
    	      this.fieldMappings = defaults.fieldMappings;
        }

        @CustomType.Setter
        public Builder changeDetectingColumns(List<String> changeDetectingColumns) {
            this.changeDetectingColumns = Objects.requireNonNull(changeDetectingColumns);
            return this;
        }
        public Builder changeDetectingColumns(String... changeDetectingColumns) {
            return changeDetectingColumns(List.of(changeDetectingColumns));
        }
        @CustomType.Setter
        public Builder documentDataColumnName(String documentDataColumnName) {
            this.documentDataColumnName = Objects.requireNonNull(documentDataColumnName);
            return this;
        }
        @CustomType.Setter
        public Builder documentIdColumnName(String documentIdColumnName) {
            this.documentIdColumnName = Objects.requireNonNull(documentIdColumnName);
            return this;
        }
        @CustomType.Setter
        public Builder documentTitleColumnName(@Nullable String documentTitleColumnName) {
            this.documentTitleColumnName = documentTitleColumnName;
            return this;
        }
        @CustomType.Setter
        public Builder fieldMappings(@Nullable List<DataSourceToIndexFieldMapping> fieldMappings) {
            this.fieldMappings = fieldMappings;
            return this;
        }
        public Builder fieldMappings(DataSourceToIndexFieldMapping... fieldMappings) {
            return fieldMappings(List.of(fieldMappings));
        }
        public DataSourceColumnConfiguration build() {
            final var o = new DataSourceColumnConfiguration();
            o.changeDetectingColumns = changeDetectingColumns;
            o.documentDataColumnName = documentDataColumnName;
            o.documentIdColumnName = documentIdColumnName;
            o.documentTitleColumnName = documentTitleColumnName;
            o.fieldMappings = fieldMappings;
            return o;
        }
    }
}
