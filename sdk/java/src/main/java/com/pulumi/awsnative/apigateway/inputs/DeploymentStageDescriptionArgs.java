// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway.inputs;

import com.pulumi.awsnative.apigateway.inputs.DeploymentAccessLogSettingArgs;
import com.pulumi.awsnative.apigateway.inputs.DeploymentCanarySettingArgs;
import com.pulumi.awsnative.apigateway.inputs.DeploymentMethodSettingArgs;
import com.pulumi.awsnative.apigateway.inputs.DeploymentTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentStageDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentStageDescriptionArgs Empty = new DeploymentStageDescriptionArgs();

    /**
     * Specifies settings for logging access in this stage.
     * 
     */
    @Import(name="accessLogSetting")
    private @Nullable Output<DeploymentAccessLogSettingArgs> accessLogSetting;

    /**
     * @return Specifies settings for logging access in this stage.
     * 
     */
    public Optional<Output<DeploymentAccessLogSettingArgs>> accessLogSetting() {
        return Optional.ofNullable(this.accessLogSetting);
    }

    /**
     * Indicates whether cache clustering is enabled for the stage.
     * 
     */
    @Import(name="cacheClusterEnabled")
    private @Nullable Output<Boolean> cacheClusterEnabled;

    /**
     * @return Indicates whether cache clustering is enabled for the stage.
     * 
     */
    public Optional<Output<Boolean>> cacheClusterEnabled() {
        return Optional.ofNullable(this.cacheClusterEnabled);
    }

    /**
     * The size of the stage&#39;s cache cluster.
     * 
     */
    @Import(name="cacheClusterSize")
    private @Nullable Output<String> cacheClusterSize;

    /**
     * @return The size of the stage&#39;s cache cluster.
     * 
     */
    public Optional<Output<String>> cacheClusterSize() {
        return Optional.ofNullable(this.cacheClusterSize);
    }

    /**
     * The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
     * 
     */
    @Import(name="cacheDataEncrypted")
    private @Nullable Output<Boolean> cacheDataEncrypted;

    /**
     * @return The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
     * 
     */
    public Optional<Output<Boolean>> cacheDataEncrypted() {
        return Optional.ofNullable(this.cacheDataEncrypted);
    }

    /**
     * The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
     * 
     */
    @Import(name="cacheTtlInSeconds")
    private @Nullable Output<Integer> cacheTtlInSeconds;

    /**
     * @return The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
     * 
     */
    public Optional<Output<Integer>> cacheTtlInSeconds() {
        return Optional.ofNullable(this.cacheTtlInSeconds);
    }

    /**
     * Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
     * 
     */
    @Import(name="cachingEnabled")
    private @Nullable Output<Boolean> cachingEnabled;

    /**
     * @return Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
     * 
     */
    public Optional<Output<Boolean>> cachingEnabled() {
        return Optional.ofNullable(this.cachingEnabled);
    }

    /**
     * Specifies settings for the canary deployment in this stage.
     * 
     */
    @Import(name="canarySetting")
    private @Nullable Output<DeploymentCanarySettingArgs> canarySetting;

    /**
     * @return Specifies settings for the canary deployment in this stage.
     * 
     */
    public Optional<Output<DeploymentCanarySettingArgs>> canarySetting() {
        return Optional.ofNullable(this.canarySetting);
    }

    /**
     * The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
     * 
     */
    @Import(name="clientCertificateId")
    private @Nullable Output<String> clientCertificateId;

    /**
     * @return The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
     * 
     */
    public Optional<Output<String>> clientCertificateId() {
        return Optional.ofNullable(this.clientCertificateId);
    }

    /**
     * Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="dataTraceEnabled")
    private @Nullable Output<Boolean> dataTraceEnabled;

    /**
     * @return Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
     * 
     */
    public Optional<Output<Boolean>> dataTraceEnabled() {
        return Optional.ofNullable(this.dataTraceEnabled);
    }

    /**
     * A description of the purpose of the stage.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the purpose of the stage.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The version identifier of the API documentation snapshot.
     * 
     */
    @Import(name="documentationVersion")
    private @Nullable Output<String> documentationVersion;

    /**
     * @return The version identifier of the API documentation snapshot.
     * 
     */
    public Optional<Output<String>> documentationVersion() {
        return Optional.ofNullable(this.documentationVersion);
    }

    /**
     * The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference.
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Output<String> loggingLevel;

    /**
     * @return The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference.
     * 
     */
    public Optional<Output<String>> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Configures settings for all of the stage&#39;s methods.
     * 
     */
    @Import(name="methodSettings")
    private @Nullable Output<List<DeploymentMethodSettingArgs>> methodSettings;

    /**
     * @return Configures settings for all of the stage&#39;s methods.
     * 
     */
    public Optional<Output<List<DeploymentMethodSettingArgs>>> methodSettings() {
        return Optional.ofNullable(this.methodSettings);
    }

    /**
     * Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
     * 
     */
    @Import(name="metricsEnabled")
    private @Nullable Output<Boolean> metricsEnabled;

    /**
     * @return Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
     * 
     */
    public Optional<Output<Boolean>> metricsEnabled() {
        return Optional.ofNullable(this.metricsEnabled);
    }

    /**
     * An array of arbitrary tags (key-value pairs) to associate with the stage.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DeploymentTagArgs>> tags;

    /**
     * @return An array of arbitrary tags (key-value pairs) to associate with the stage.
     * 
     */
    public Optional<Output<List<DeploymentTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    @Import(name="throttlingBurstLimit")
    private @Nullable Output<Integer> throttlingBurstLimit;

    /**
     * @return The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    public Optional<Output<Integer>> throttlingBurstLimit() {
        return Optional.ofNullable(this.throttlingBurstLimit);
    }

    /**
     * The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    @Import(name="throttlingRateLimit")
    private @Nullable Output<Double> throttlingRateLimit;

    /**
     * @return The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
     * 
     */
    public Optional<Output<Double>> throttlingRateLimit() {
        return Optional.ofNullable(this.throttlingRateLimit);
    }

    /**
     * Specifies whether active tracing with X-ray is enabled for this stage.
     * 
     */
    @Import(name="tracingEnabled")
    private @Nullable Output<Boolean> tracingEnabled;

    /**
     * @return Specifies whether active tracing with X-ray is enabled for this stage.
     * 
     */
    public Optional<Output<Boolean>> tracingEnabled() {
        return Optional.ofNullable(this.tracingEnabled);
    }

    /**
     * A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&amp;=,]+.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<Object> variables;

    /**
     * @return A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&amp;=,]+.
     * 
     */
    public Optional<Output<Object>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private DeploymentStageDescriptionArgs() {}

    private DeploymentStageDescriptionArgs(DeploymentStageDescriptionArgs $) {
        this.accessLogSetting = $.accessLogSetting;
        this.cacheClusterEnabled = $.cacheClusterEnabled;
        this.cacheClusterSize = $.cacheClusterSize;
        this.cacheDataEncrypted = $.cacheDataEncrypted;
        this.cacheTtlInSeconds = $.cacheTtlInSeconds;
        this.cachingEnabled = $.cachingEnabled;
        this.canarySetting = $.canarySetting;
        this.clientCertificateId = $.clientCertificateId;
        this.dataTraceEnabled = $.dataTraceEnabled;
        this.description = $.description;
        this.documentationVersion = $.documentationVersion;
        this.loggingLevel = $.loggingLevel;
        this.methodSettings = $.methodSettings;
        this.metricsEnabled = $.metricsEnabled;
        this.tags = $.tags;
        this.throttlingBurstLimit = $.throttlingBurstLimit;
        this.throttlingRateLimit = $.throttlingRateLimit;
        this.tracingEnabled = $.tracingEnabled;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentStageDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentStageDescriptionArgs $;

        public Builder() {
            $ = new DeploymentStageDescriptionArgs();
        }

        public Builder(DeploymentStageDescriptionArgs defaults) {
            $ = new DeploymentStageDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLogSetting Specifies settings for logging access in this stage.
         * 
         * @return builder
         * 
         */
        public Builder accessLogSetting(@Nullable Output<DeploymentAccessLogSettingArgs> accessLogSetting) {
            $.accessLogSetting = accessLogSetting;
            return this;
        }

        /**
         * @param accessLogSetting Specifies settings for logging access in this stage.
         * 
         * @return builder
         * 
         */
        public Builder accessLogSetting(DeploymentAccessLogSettingArgs accessLogSetting) {
            return accessLogSetting(Output.of(accessLogSetting));
        }

        /**
         * @param cacheClusterEnabled Indicates whether cache clustering is enabled for the stage.
         * 
         * @return builder
         * 
         */
        public Builder cacheClusterEnabled(@Nullable Output<Boolean> cacheClusterEnabled) {
            $.cacheClusterEnabled = cacheClusterEnabled;
            return this;
        }

        /**
         * @param cacheClusterEnabled Indicates whether cache clustering is enabled for the stage.
         * 
         * @return builder
         * 
         */
        public Builder cacheClusterEnabled(Boolean cacheClusterEnabled) {
            return cacheClusterEnabled(Output.of(cacheClusterEnabled));
        }

        /**
         * @param cacheClusterSize The size of the stage&#39;s cache cluster.
         * 
         * @return builder
         * 
         */
        public Builder cacheClusterSize(@Nullable Output<String> cacheClusterSize) {
            $.cacheClusterSize = cacheClusterSize;
            return this;
        }

        /**
         * @param cacheClusterSize The size of the stage&#39;s cache cluster.
         * 
         * @return builder
         * 
         */
        public Builder cacheClusterSize(String cacheClusterSize) {
            return cacheClusterSize(Output.of(cacheClusterSize));
        }

        /**
         * @param cacheDataEncrypted The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         * 
         * @return builder
         * 
         */
        public Builder cacheDataEncrypted(@Nullable Output<Boolean> cacheDataEncrypted) {
            $.cacheDataEncrypted = cacheDataEncrypted;
            return this;
        }

        /**
         * @param cacheDataEncrypted The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         * 
         * @return builder
         * 
         */
        public Builder cacheDataEncrypted(Boolean cacheDataEncrypted) {
            return cacheDataEncrypted(Output.of(cacheDataEncrypted));
        }

        /**
         * @param cacheTtlInSeconds The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         * 
         * @return builder
         * 
         */
        public Builder cacheTtlInSeconds(@Nullable Output<Integer> cacheTtlInSeconds) {
            $.cacheTtlInSeconds = cacheTtlInSeconds;
            return this;
        }

        /**
         * @param cacheTtlInSeconds The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         * 
         * @return builder
         * 
         */
        public Builder cacheTtlInSeconds(Integer cacheTtlInSeconds) {
            return cacheTtlInSeconds(Output.of(cacheTtlInSeconds));
        }

        /**
         * @param cachingEnabled Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
         * 
         * @return builder
         * 
         */
        public Builder cachingEnabled(@Nullable Output<Boolean> cachingEnabled) {
            $.cachingEnabled = cachingEnabled;
            return this;
        }

        /**
         * @param cachingEnabled Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses.
         * 
         * @return builder
         * 
         */
        public Builder cachingEnabled(Boolean cachingEnabled) {
            return cachingEnabled(Output.of(cachingEnabled));
        }

        /**
         * @param canarySetting Specifies settings for the canary deployment in this stage.
         * 
         * @return builder
         * 
         */
        public Builder canarySetting(@Nullable Output<DeploymentCanarySettingArgs> canarySetting) {
            $.canarySetting = canarySetting;
            return this;
        }

        /**
         * @param canarySetting Specifies settings for the canary deployment in this stage.
         * 
         * @return builder
         * 
         */
        public Builder canarySetting(DeploymentCanarySettingArgs canarySetting) {
            return canarySetting(Output.of(canarySetting));
        }

        /**
         * @param clientCertificateId The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(@Nullable Output<String> clientCertificateId) {
            $.clientCertificateId = clientCertificateId;
            return this;
        }

        /**
         * @param clientCertificateId The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateId(String clientCertificateId) {
            return clientCertificateId(Output.of(clientCertificateId));
        }

        /**
         * @param dataTraceEnabled Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
         * 
         * @return builder
         * 
         */
        public Builder dataTraceEnabled(@Nullable Output<Boolean> dataTraceEnabled) {
            $.dataTraceEnabled = dataTraceEnabled;
            return this;
        }

        /**
         * @param dataTraceEnabled Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
         * 
         * @return builder
         * 
         */
        public Builder dataTraceEnabled(Boolean dataTraceEnabled) {
            return dataTraceEnabled(Output.of(dataTraceEnabled));
        }

        /**
         * @param description A description of the purpose of the stage.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the purpose of the stage.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param documentationVersion The version identifier of the API documentation snapshot.
         * 
         * @return builder
         * 
         */
        public Builder documentationVersion(@Nullable Output<String> documentationVersion) {
            $.documentationVersion = documentationVersion;
            return this;
        }

        /**
         * @param documentationVersion The version identifier of the API documentation snapshot.
         * 
         * @return builder
         * 
         */
        public Builder documentationVersion(String documentationVersion) {
            return documentationVersion(Output.of(documentationVersion));
        }

        /**
         * @param loggingLevel The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(@Nullable Output<String> loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        /**
         * @param loggingLevel The logging level for this method. For valid values, see the loggingLevel property of the Stage resource in the Amazon API Gateway API Reference.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(String loggingLevel) {
            return loggingLevel(Output.of(loggingLevel));
        }

        /**
         * @param methodSettings Configures settings for all of the stage&#39;s methods.
         * 
         * @return builder
         * 
         */
        public Builder methodSettings(@Nullable Output<List<DeploymentMethodSettingArgs>> methodSettings) {
            $.methodSettings = methodSettings;
            return this;
        }

        /**
         * @param methodSettings Configures settings for all of the stage&#39;s methods.
         * 
         * @return builder
         * 
         */
        public Builder methodSettings(List<DeploymentMethodSettingArgs> methodSettings) {
            return methodSettings(Output.of(methodSettings));
        }

        /**
         * @param methodSettings Configures settings for all of the stage&#39;s methods.
         * 
         * @return builder
         * 
         */
        public Builder methodSettings(DeploymentMethodSettingArgs... methodSettings) {
            return methodSettings(List.of(methodSettings));
        }

        /**
         * @param metricsEnabled Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(@Nullable Output<Boolean> metricsEnabled) {
            $.metricsEnabled = metricsEnabled;
            return this;
        }

        /**
         * @param metricsEnabled Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
         * 
         * @return builder
         * 
         */
        public Builder metricsEnabled(Boolean metricsEnabled) {
            return metricsEnabled(Output.of(metricsEnabled));
        }

        /**
         * @param tags An array of arbitrary tags (key-value pairs) to associate with the stage.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DeploymentTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of arbitrary tags (key-value pairs) to associate with the stage.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DeploymentTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of arbitrary tags (key-value pairs) to associate with the stage.
         * 
         * @return builder
         * 
         */
        public Builder tags(DeploymentTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param throttlingBurstLimit The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
         * 
         * @return builder
         * 
         */
        public Builder throttlingBurstLimit(@Nullable Output<Integer> throttlingBurstLimit) {
            $.throttlingBurstLimit = throttlingBurstLimit;
            return this;
        }

        /**
         * @param throttlingBurstLimit The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
         * 
         * @return builder
         * 
         */
        public Builder throttlingBurstLimit(Integer throttlingBurstLimit) {
            return throttlingBurstLimit(Output.of(throttlingBurstLimit));
        }

        /**
         * @param throttlingRateLimit The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
         * 
         * @return builder
         * 
         */
        public Builder throttlingRateLimit(@Nullable Output<Double> throttlingRateLimit) {
            $.throttlingRateLimit = throttlingRateLimit;
            return this;
        }

        /**
         * @param throttlingRateLimit The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account.
         * 
         * @return builder
         * 
         */
        public Builder throttlingRateLimit(Double throttlingRateLimit) {
            return throttlingRateLimit(Output.of(throttlingRateLimit));
        }

        /**
         * @param tracingEnabled Specifies whether active tracing with X-ray is enabled for this stage.
         * 
         * @return builder
         * 
         */
        public Builder tracingEnabled(@Nullable Output<Boolean> tracingEnabled) {
            $.tracingEnabled = tracingEnabled;
            return this;
        }

        /**
         * @param tracingEnabled Specifies whether active tracing with X-ray is enabled for this stage.
         * 
         * @return builder
         * 
         */
        public Builder tracingEnabled(Boolean tracingEnabled) {
            return tracingEnabled(Output.of(tracingEnabled));
        }

        /**
         * @param variables A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&amp;=,]+.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<Object> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: [A-Za-z0-9-._~:/?#&amp;=,]+.
         * 
         * @return builder
         * 
         */
        public Builder variables(Object variables) {
            return variables(Output.of(variables));
        }

        public DeploymentStageDescriptionArgs build() {
            return $;
        }
    }

}
