// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot.inputs;

import com.pulumi.awsnative.iot.enums.JobTemplateAction;
import com.pulumi.awsnative.iot.enums.JobTemplateFailureType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * The criteria that determine when and how a job abort takes place.
 * 
 */
public final class JobTemplateAbortCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobTemplateAbortCriteriaArgs Empty = new JobTemplateAbortCriteriaArgs();

    /**
     * The type of job action to take to initiate the job abort.
     * 
     */
    @Import(name="action", required=true)
    private Output<JobTemplateAction> action;

    /**
     * @return The type of job action to take to initiate the job abort.
     * 
     */
    public Output<JobTemplateAction> action() {
        return this.action;
    }

    /**
     * The type of job execution failures that can initiate a job abort.
     * 
     */
    @Import(name="failureType", required=true)
    private Output<JobTemplateFailureType> failureType;

    /**
     * @return The type of job execution failures that can initiate a job abort.
     * 
     */
    public Output<JobTemplateFailureType> failureType() {
        return this.failureType;
    }

    /**
     * The minimum number of things which must receive job execution notifications before the job can be aborted.
     * 
     */
    @Import(name="minNumberOfExecutedThings", required=true)
    private Output<Integer> minNumberOfExecutedThings;

    /**
     * @return The minimum number of things which must receive job execution notifications before the job can be aborted.
     * 
     */
    public Output<Integer> minNumberOfExecutedThings() {
        return this.minNumberOfExecutedThings;
    }

    /**
     * The minimum percentage of job execution failures that must occur to initiate the job abort.
     * 
     */
    @Import(name="thresholdPercentage", required=true)
    private Output<Double> thresholdPercentage;

    /**
     * @return The minimum percentage of job execution failures that must occur to initiate the job abort.
     * 
     */
    public Output<Double> thresholdPercentage() {
        return this.thresholdPercentage;
    }

    private JobTemplateAbortCriteriaArgs() {}

    private JobTemplateAbortCriteriaArgs(JobTemplateAbortCriteriaArgs $) {
        this.action = $.action;
        this.failureType = $.failureType;
        this.minNumberOfExecutedThings = $.minNumberOfExecutedThings;
        this.thresholdPercentage = $.thresholdPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobTemplateAbortCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobTemplateAbortCriteriaArgs $;

        public Builder() {
            $ = new JobTemplateAbortCriteriaArgs();
        }

        public Builder(JobTemplateAbortCriteriaArgs defaults) {
            $ = new JobTemplateAbortCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The type of job action to take to initiate the job abort.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<JobTemplateAction> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The type of job action to take to initiate the job abort.
         * 
         * @return builder
         * 
         */
        public Builder action(JobTemplateAction action) {
            return action(Output.of(action));
        }

        /**
         * @param failureType The type of job execution failures that can initiate a job abort.
         * 
         * @return builder
         * 
         */
        public Builder failureType(Output<JobTemplateFailureType> failureType) {
            $.failureType = failureType;
            return this;
        }

        /**
         * @param failureType The type of job execution failures that can initiate a job abort.
         * 
         * @return builder
         * 
         */
        public Builder failureType(JobTemplateFailureType failureType) {
            return failureType(Output.of(failureType));
        }

        /**
         * @param minNumberOfExecutedThings The minimum number of things which must receive job execution notifications before the job can be aborted.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfExecutedThings(Output<Integer> minNumberOfExecutedThings) {
            $.minNumberOfExecutedThings = minNumberOfExecutedThings;
            return this;
        }

        /**
         * @param minNumberOfExecutedThings The minimum number of things which must receive job execution notifications before the job can be aborted.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfExecutedThings(Integer minNumberOfExecutedThings) {
            return minNumberOfExecutedThings(Output.of(minNumberOfExecutedThings));
        }

        /**
         * @param thresholdPercentage The minimum percentage of job execution failures that must occur to initiate the job abort.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercentage(Output<Double> thresholdPercentage) {
            $.thresholdPercentage = thresholdPercentage;
            return this;
        }

        /**
         * @param thresholdPercentage The minimum percentage of job execution failures that must occur to initiate the job abort.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercentage(Double thresholdPercentage) {
            return thresholdPercentage(Output.of(thresholdPercentage));
        }

        public JobTemplateAbortCriteriaArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.failureType = Objects.requireNonNull($.failureType, "expected parameter 'failureType' to be non-null");
            $.minNumberOfExecutedThings = Objects.requireNonNull($.minNumberOfExecutedThings, "expected parameter 'minNumberOfExecutedThings' to be non-null");
            $.thresholdPercentage = Objects.requireNonNull($.thresholdPercentage, "expected parameter 'thresholdPercentage' to be non-null");
            return $;
        }
    }

}
