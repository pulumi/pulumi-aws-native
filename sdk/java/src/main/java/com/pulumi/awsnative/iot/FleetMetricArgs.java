// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot;

import com.pulumi.awsnative.iot.inputs.FleetMetricAggregationTypeArgs;
import com.pulumi.awsnative.iot.inputs.FleetMetricTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FleetMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final FleetMetricArgs Empty = new FleetMetricArgs();

    /**
     * The aggregation field to perform aggregation and metric emission
     * 
     */
    @Import(name="aggregationField")
    private @Nullable Output<String> aggregationField;

    /**
     * @return The aggregation field to perform aggregation and metric emission
     * 
     */
    public Optional<Output<String>> aggregationField() {
        return Optional.ofNullable(this.aggregationField);
    }

    @Import(name="aggregationType")
    private @Nullable Output<FleetMetricAggregationTypeArgs> aggregationType;

    public Optional<Output<FleetMetricAggregationTypeArgs>> aggregationType() {
        return Optional.ofNullable(this.aggregationType);
    }

    /**
     * The description of a fleet metric
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of a fleet metric
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The index name of a fleet metric
     * 
     */
    @Import(name="indexName")
    private @Nullable Output<String> indexName;

    /**
     * @return The index name of a fleet metric
     * 
     */
    public Optional<Output<String>> indexName() {
        return Optional.ofNullable(this.indexName);
    }

    /**
     * The name of the fleet metric
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    /**
     * @return The name of the fleet metric
     * 
     */
    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The period of metric emission in seconds
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The period of metric emission in seconds
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The Fleet Indexing query used by a fleet metric
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    /**
     * @return The Fleet Indexing query used by a fleet metric
     * 
     */
    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The version of a Fleet Indexing query used by a fleet metric
     * 
     */
    @Import(name="queryVersion")
    private @Nullable Output<String> queryVersion;

    /**
     * @return The version of a Fleet Indexing query used by a fleet metric
     * 
     */
    public Optional<Output<String>> queryVersion() {
        return Optional.ofNullable(this.queryVersion);
    }

    /**
     * An array of key-value pairs to apply to this resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<FleetMetricTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource
     * 
     */
    public Optional<Output<List<FleetMetricTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The unit of data points emitted by a fleet metric
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return The unit of data points emitted by a fleet metric
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    private FleetMetricArgs() {}

    private FleetMetricArgs(FleetMetricArgs $) {
        this.aggregationField = $.aggregationField;
        this.aggregationType = $.aggregationType;
        this.description = $.description;
        this.indexName = $.indexName;
        this.metricName = $.metricName;
        this.period = $.period;
        this.queryString = $.queryString;
        this.queryVersion = $.queryVersion;
        this.tags = $.tags;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FleetMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FleetMetricArgs $;

        public Builder() {
            $ = new FleetMetricArgs();
        }

        public Builder(FleetMetricArgs defaults) {
            $ = new FleetMetricArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationField The aggregation field to perform aggregation and metric emission
         * 
         * @return builder
         * 
         */
        public Builder aggregationField(@Nullable Output<String> aggregationField) {
            $.aggregationField = aggregationField;
            return this;
        }

        /**
         * @param aggregationField The aggregation field to perform aggregation and metric emission
         * 
         * @return builder
         * 
         */
        public Builder aggregationField(String aggregationField) {
            return aggregationField(Output.of(aggregationField));
        }

        public Builder aggregationType(@Nullable Output<FleetMetricAggregationTypeArgs> aggregationType) {
            $.aggregationType = aggregationType;
            return this;
        }

        public Builder aggregationType(FleetMetricAggregationTypeArgs aggregationType) {
            return aggregationType(Output.of(aggregationType));
        }

        /**
         * @param description The description of a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param indexName The index name of a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder indexName(@Nullable Output<String> indexName) {
            $.indexName = indexName;
            return this;
        }

        /**
         * @param indexName The index name of a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder indexName(String indexName) {
            return indexName(Output.of(indexName));
        }

        /**
         * @param metricName The name of the fleet metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricName The name of the fleet metric
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        /**
         * @param period The period of metric emission in seconds
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The period of metric emission in seconds
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param queryString The Fleet Indexing query used by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString The Fleet Indexing query used by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param queryVersion The version of a Fleet Indexing query used by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder queryVersion(@Nullable Output<String> queryVersion) {
            $.queryVersion = queryVersion;
            return this;
        }

        /**
         * @param queryVersion The version of a Fleet Indexing query used by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder queryVersion(String queryVersion) {
            return queryVersion(Output.of(queryVersion));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<FleetMetricTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource
         * 
         * @return builder
         * 
         */
        public Builder tags(List<FleetMetricTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource
         * 
         * @return builder
         * 
         */
        public Builder tags(FleetMetricTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param unit The unit of data points emitted by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The unit of data points emitted by a fleet metric
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public FleetMetricArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            return $;
        }
    }

}
