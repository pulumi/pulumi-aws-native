// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.customerprofiles;

import com.pulumi.awsnative.customerprofiles.inputs.ObjectTypeFieldMapArgs;
import com.pulumi.awsnative.customerprofiles.inputs.ObjectTypeKeyMapArgs;
import com.pulumi.awsnative.customerprofiles.inputs.ObjectTypeTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectTypeArgs Empty = new ObjectTypeArgs();

    /**
     * Indicates whether a profile should be created when data is received.
     * 
     */
    @Import(name="allowProfileCreation")
    private @Nullable Output<Boolean> allowProfileCreation;

    /**
     * @return Indicates whether a profile should be created when data is received.
     * 
     */
    public Optional<Output<Boolean>> allowProfileCreation() {
        return Optional.ofNullable(this.allowProfileCreation);
    }

    /**
     * Description of the profile object type.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the profile object type.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The unique name of the domain.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The unique name of the domain.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The default encryption key
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable Output<String> encryptionKey;

    /**
     * @return The default encryption key
     * 
     */
    public Optional<Output<String>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * The default number of days until the data within the domain expires.
     * 
     */
    @Import(name="expirationDays")
    private @Nullable Output<Integer> expirationDays;

    /**
     * @return The default number of days until the data within the domain expires.
     * 
     */
    public Optional<Output<Integer>> expirationDays() {
        return Optional.ofNullable(this.expirationDays);
    }

    /**
     * A list of the name and ObjectType field.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<ObjectTypeFieldMapArgs>> fields;

    /**
     * @return A list of the name and ObjectType field.
     * 
     */
    public Optional<Output<List<ObjectTypeFieldMapArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * A list of unique keys that can be used to map data to the profile.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<ObjectTypeKeyMapArgs>> keys;

    /**
     * @return A list of unique keys that can be used to map data to the profile.
     * 
     */
    public Optional<Output<List<ObjectTypeKeyMapArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The name of the profile object type.
     * 
     */
    @Import(name="objectTypeName")
    private @Nullable Output<String> objectTypeName;

    /**
     * @return The name of the profile object type.
     * 
     */
    public Optional<Output<String>> objectTypeName() {
        return Optional.ofNullable(this.objectTypeName);
    }

    /**
     * The tags (keys and values) associated with the integration.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ObjectTypeTagArgs>> tags;

    /**
     * @return The tags (keys and values) associated with the integration.
     * 
     */
    public Optional<Output<List<ObjectTypeTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A unique identifier for the object template.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return A unique identifier for the object template.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    private ObjectTypeArgs() {}

    private ObjectTypeArgs(ObjectTypeArgs $) {
        this.allowProfileCreation = $.allowProfileCreation;
        this.description = $.description;
        this.domainName = $.domainName;
        this.encryptionKey = $.encryptionKey;
        this.expirationDays = $.expirationDays;
        this.fields = $.fields;
        this.keys = $.keys;
        this.objectTypeName = $.objectTypeName;
        this.tags = $.tags;
        this.templateId = $.templateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectTypeArgs $;

        public Builder() {
            $ = new ObjectTypeArgs();
        }

        public Builder(ObjectTypeArgs defaults) {
            $ = new ObjectTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowProfileCreation Indicates whether a profile should be created when data is received.
         * 
         * @return builder
         * 
         */
        public Builder allowProfileCreation(@Nullable Output<Boolean> allowProfileCreation) {
            $.allowProfileCreation = allowProfileCreation;
            return this;
        }

        /**
         * @param allowProfileCreation Indicates whether a profile should be created when data is received.
         * 
         * @return builder
         * 
         */
        public Builder allowProfileCreation(Boolean allowProfileCreation) {
            return allowProfileCreation(Output.of(allowProfileCreation));
        }

        /**
         * @param description Description of the profile object type.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the profile object type.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainName The unique name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The unique name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param encryptionKey The default encryption key
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        /**
         * @param encryptionKey The default encryption key
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        /**
         * @param expirationDays The default number of days until the data within the domain expires.
         * 
         * @return builder
         * 
         */
        public Builder expirationDays(@Nullable Output<Integer> expirationDays) {
            $.expirationDays = expirationDays;
            return this;
        }

        /**
         * @param expirationDays The default number of days until the data within the domain expires.
         * 
         * @return builder
         * 
         */
        public Builder expirationDays(Integer expirationDays) {
            return expirationDays(Output.of(expirationDays));
        }

        /**
         * @param fields A list of the name and ObjectType field.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<ObjectTypeFieldMapArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields A list of the name and ObjectType field.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<ObjectTypeFieldMapArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields A list of the name and ObjectType field.
         * 
         * @return builder
         * 
         */
        public Builder fields(ObjectTypeFieldMapArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param keys A list of unique keys that can be used to map data to the profile.
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<ObjectTypeKeyMapArgs>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys A list of unique keys that can be used to map data to the profile.
         * 
         * @return builder
         * 
         */
        public Builder keys(List<ObjectTypeKeyMapArgs> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys A list of unique keys that can be used to map data to the profile.
         * 
         * @return builder
         * 
         */
        public Builder keys(ObjectTypeKeyMapArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param objectTypeName The name of the profile object type.
         * 
         * @return builder
         * 
         */
        public Builder objectTypeName(@Nullable Output<String> objectTypeName) {
            $.objectTypeName = objectTypeName;
            return this;
        }

        /**
         * @param objectTypeName The name of the profile object type.
         * 
         * @return builder
         * 
         */
        public Builder objectTypeName(String objectTypeName) {
            return objectTypeName(Output.of(objectTypeName));
        }

        /**
         * @param tags The tags (keys and values) associated with the integration.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ObjectTypeTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags (keys and values) associated with the integration.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ObjectTypeTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags (keys and values) associated with the integration.
         * 
         * @return builder
         * 
         */
        public Builder tags(ObjectTypeTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateId A unique identifier for the object template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId A unique identifier for the object template.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        public ObjectTypeArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            return $;
        }
    }

}
