// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mwaa;

import com.pulumi.awsnative.mwaa.enums.EnvironmentWebserverAccessMode;
import com.pulumi.awsnative.mwaa.inputs.EnvironmentLoggingConfigurationArgs;
import com.pulumi.awsnative.mwaa.inputs.EnvironmentNetworkConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * Key/value pairs representing Airflow configuration variables.
     *     Keys are prefixed by their section:
     * 
     *     [core]
     *     dags_folder={AIRFLOW_HOME}/dags
     *     
     *     Would be represented as
     *     
     *     &#34;core.dags_folder&#34;: &#34;{AIRFLOW_HOME}/dags&#34;
     * 
     */
    @Import(name="airflowConfigurationOptions")
    private @Nullable Output<Object> airflowConfigurationOptions;

    /**
     * @return Key/value pairs representing Airflow configuration variables.
     *     Keys are prefixed by their section:
     * 
     *     [core]
     *     dags_folder={AIRFLOW_HOME}/dags
     *     
     *     Would be represented as
     *     
     *     &#34;core.dags_folder&#34;: &#34;{AIRFLOW_HOME}/dags&#34;
     * 
     */
    public Optional<Output<Object>> airflowConfigurationOptions() {
        return Optional.ofNullable(this.airflowConfigurationOptions);
    }

    @Import(name="airflowVersion")
    private @Nullable Output<String> airflowVersion;

    public Optional<Output<String>> airflowVersion() {
        return Optional.ofNullable(this.airflowVersion);
    }

    @Import(name="dagS3Path")
    private @Nullable Output<String> dagS3Path;

    public Optional<Output<String>> dagS3Path() {
        return Optional.ofNullable(this.dagS3Path);
    }

    @Import(name="environmentClass")
    private @Nullable Output<String> environmentClass;

    public Optional<Output<String>> environmentClass() {
        return Optional.ofNullable(this.environmentClass);
    }

    @Import(name="executionRoleArn")
    private @Nullable Output<String> executionRoleArn;

    public Optional<Output<String>> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }

    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    @Import(name="loggingConfiguration")
    private @Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration;

    public Optional<Output<EnvironmentLoggingConfigurationArgs>> loggingConfiguration() {
        return Optional.ofNullable(this.loggingConfiguration);
    }

    @Import(name="maxWorkers")
    private @Nullable Output<Integer> maxWorkers;

    public Optional<Output<Integer>> maxWorkers() {
        return Optional.ofNullable(this.maxWorkers);
    }

    @Import(name="minWorkers")
    private @Nullable Output<Integer> minWorkers;

    public Optional<Output<Integer>> minWorkers() {
        return Optional.ofNullable(this.minWorkers);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkConfiguration")
    private @Nullable Output<EnvironmentNetworkConfigurationArgs> networkConfiguration;

    public Optional<Output<EnvironmentNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    @Import(name="pluginsS3ObjectVersion")
    private @Nullable Output<String> pluginsS3ObjectVersion;

    public Optional<Output<String>> pluginsS3ObjectVersion() {
        return Optional.ofNullable(this.pluginsS3ObjectVersion);
    }

    @Import(name="pluginsS3Path")
    private @Nullable Output<String> pluginsS3Path;

    public Optional<Output<String>> pluginsS3Path() {
        return Optional.ofNullable(this.pluginsS3Path);
    }

    @Import(name="requirementsS3ObjectVersion")
    private @Nullable Output<String> requirementsS3ObjectVersion;

    public Optional<Output<String>> requirementsS3ObjectVersion() {
        return Optional.ofNullable(this.requirementsS3ObjectVersion);
    }

    @Import(name="requirementsS3Path")
    private @Nullable Output<String> requirementsS3Path;

    public Optional<Output<String>> requirementsS3Path() {
        return Optional.ofNullable(this.requirementsS3Path);
    }

    @Import(name="schedulers")
    private @Nullable Output<Integer> schedulers;

    public Optional<Output<Integer>> schedulers() {
        return Optional.ofNullable(this.schedulers);
    }

    @Import(name="sourceBucketArn")
    private @Nullable Output<String> sourceBucketArn;

    public Optional<Output<String>> sourceBucketArn() {
        return Optional.ofNullable(this.sourceBucketArn);
    }

    /**
     * A map of tags for the environment.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Object> tags;

    /**
     * @return A map of tags for the environment.
     * 
     */
    public Optional<Output<Object>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="webserverAccessMode")
    private @Nullable Output<EnvironmentWebserverAccessMode> webserverAccessMode;

    public Optional<Output<EnvironmentWebserverAccessMode>> webserverAccessMode() {
        return Optional.ofNullable(this.webserverAccessMode);
    }

    @Import(name="weeklyMaintenanceWindowStart")
    private @Nullable Output<String> weeklyMaintenanceWindowStart;

    public Optional<Output<String>> weeklyMaintenanceWindowStart() {
        return Optional.ofNullable(this.weeklyMaintenanceWindowStart);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.airflowConfigurationOptions = $.airflowConfigurationOptions;
        this.airflowVersion = $.airflowVersion;
        this.dagS3Path = $.dagS3Path;
        this.environmentClass = $.environmentClass;
        this.executionRoleArn = $.executionRoleArn;
        this.kmsKey = $.kmsKey;
        this.loggingConfiguration = $.loggingConfiguration;
        this.maxWorkers = $.maxWorkers;
        this.minWorkers = $.minWorkers;
        this.name = $.name;
        this.networkConfiguration = $.networkConfiguration;
        this.pluginsS3ObjectVersion = $.pluginsS3ObjectVersion;
        this.pluginsS3Path = $.pluginsS3Path;
        this.requirementsS3ObjectVersion = $.requirementsS3ObjectVersion;
        this.requirementsS3Path = $.requirementsS3Path;
        this.schedulers = $.schedulers;
        this.sourceBucketArn = $.sourceBucketArn;
        this.tags = $.tags;
        this.webserverAccessMode = $.webserverAccessMode;
        this.weeklyMaintenanceWindowStart = $.weeklyMaintenanceWindowStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param airflowConfigurationOptions Key/value pairs representing Airflow configuration variables.
         *     Keys are prefixed by their section:
         * 
         *     [core]
         *     dags_folder={AIRFLOW_HOME}/dags
         *     
         *     Would be represented as
         *     
         *     &#34;core.dags_folder&#34;: &#34;{AIRFLOW_HOME}/dags&#34;
         * 
         * @return builder
         * 
         */
        public Builder airflowConfigurationOptions(@Nullable Output<Object> airflowConfigurationOptions) {
            $.airflowConfigurationOptions = airflowConfigurationOptions;
            return this;
        }

        /**
         * @param airflowConfigurationOptions Key/value pairs representing Airflow configuration variables.
         *     Keys are prefixed by their section:
         * 
         *     [core]
         *     dags_folder={AIRFLOW_HOME}/dags
         *     
         *     Would be represented as
         *     
         *     &#34;core.dags_folder&#34;: &#34;{AIRFLOW_HOME}/dags&#34;
         * 
         * @return builder
         * 
         */
        public Builder airflowConfigurationOptions(Object airflowConfigurationOptions) {
            return airflowConfigurationOptions(Output.of(airflowConfigurationOptions));
        }

        public Builder airflowVersion(@Nullable Output<String> airflowVersion) {
            $.airflowVersion = airflowVersion;
            return this;
        }

        public Builder airflowVersion(String airflowVersion) {
            return airflowVersion(Output.of(airflowVersion));
        }

        public Builder dagS3Path(@Nullable Output<String> dagS3Path) {
            $.dagS3Path = dagS3Path;
            return this;
        }

        public Builder dagS3Path(String dagS3Path) {
            return dagS3Path(Output.of(dagS3Path));
        }

        public Builder environmentClass(@Nullable Output<String> environmentClass) {
            $.environmentClass = environmentClass;
            return this;
        }

        public Builder environmentClass(String environmentClass) {
            return environmentClass(Output.of(environmentClass));
        }

        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public Builder loggingConfiguration(@Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration) {
            $.loggingConfiguration = loggingConfiguration;
            return this;
        }

        public Builder loggingConfiguration(EnvironmentLoggingConfigurationArgs loggingConfiguration) {
            return loggingConfiguration(Output.of(loggingConfiguration));
        }

        public Builder maxWorkers(@Nullable Output<Integer> maxWorkers) {
            $.maxWorkers = maxWorkers;
            return this;
        }

        public Builder maxWorkers(Integer maxWorkers) {
            return maxWorkers(Output.of(maxWorkers));
        }

        public Builder minWorkers(@Nullable Output<Integer> minWorkers) {
            $.minWorkers = minWorkers;
            return this;
        }

        public Builder minWorkers(Integer minWorkers) {
            return minWorkers(Output.of(minWorkers));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkConfiguration(@Nullable Output<EnvironmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder networkConfiguration(EnvironmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public Builder pluginsS3ObjectVersion(@Nullable Output<String> pluginsS3ObjectVersion) {
            $.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
            return this;
        }

        public Builder pluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
            return pluginsS3ObjectVersion(Output.of(pluginsS3ObjectVersion));
        }

        public Builder pluginsS3Path(@Nullable Output<String> pluginsS3Path) {
            $.pluginsS3Path = pluginsS3Path;
            return this;
        }

        public Builder pluginsS3Path(String pluginsS3Path) {
            return pluginsS3Path(Output.of(pluginsS3Path));
        }

        public Builder requirementsS3ObjectVersion(@Nullable Output<String> requirementsS3ObjectVersion) {
            $.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
            return this;
        }

        public Builder requirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
            return requirementsS3ObjectVersion(Output.of(requirementsS3ObjectVersion));
        }

        public Builder requirementsS3Path(@Nullable Output<String> requirementsS3Path) {
            $.requirementsS3Path = requirementsS3Path;
            return this;
        }

        public Builder requirementsS3Path(String requirementsS3Path) {
            return requirementsS3Path(Output.of(requirementsS3Path));
        }

        public Builder schedulers(@Nullable Output<Integer> schedulers) {
            $.schedulers = schedulers;
            return this;
        }

        public Builder schedulers(Integer schedulers) {
            return schedulers(Output.of(schedulers));
        }

        public Builder sourceBucketArn(@Nullable Output<String> sourceBucketArn) {
            $.sourceBucketArn = sourceBucketArn;
            return this;
        }

        public Builder sourceBucketArn(String sourceBucketArn) {
            return sourceBucketArn(Output.of(sourceBucketArn));
        }

        /**
         * @param tags A map of tags for the environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Object> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A map of tags for the environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(Object tags) {
            return tags(Output.of(tags));
        }

        public Builder webserverAccessMode(@Nullable Output<EnvironmentWebserverAccessMode> webserverAccessMode) {
            $.webserverAccessMode = webserverAccessMode;
            return this;
        }

        public Builder webserverAccessMode(EnvironmentWebserverAccessMode webserverAccessMode) {
            return webserverAccessMode(Output.of(webserverAccessMode));
        }

        public Builder weeklyMaintenanceWindowStart(@Nullable Output<String> weeklyMaintenanceWindowStart) {
            $.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
            return this;
        }

        public Builder weeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
            return weeklyMaintenanceWindowStart(Output.of(weeklyMaintenanceWindowStart));
        }

        public EnvironmentArgs build() {
            return $;
        }
    }

}
