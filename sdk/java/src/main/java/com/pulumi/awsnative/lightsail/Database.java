// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.awsnative.Utilities;
import com.pulumi.awsnative.lightsail.DatabaseArgs;
import com.pulumi.awsnative.lightsail.outputs.DatabaseRelationalDatabaseParameter;
import com.pulumi.awsnative.lightsail.outputs.DatabaseTag;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource Type definition for AWS::Lightsail::Database
 * 
 */
@ResourceType(type="aws-native:lightsail:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
     * 
     */
    @Export(name="availabilityZone", type=String.class, parameters={})
    private Output</* @Nullable */ String> availabilityZone;

    /**
     * @return The Availability Zone in which to create your new database. Use the us-east-2a case-sensitive format.
     * 
     */
    public Output<Optional<String>> availabilityZone() {
        return Codegen.optional(this.availabilityZone);
    }
    /**
     * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    @Export(name="backupRetention", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> backupRetention;

    /**
     * @return When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    public Output<Optional<Boolean>> backupRetention() {
        return Codegen.optional(this.backupRetention);
    }
    /**
     * Indicates the certificate that needs to be associated with the database.
     * 
     */
    @Export(name="caCertificateIdentifier", type=String.class, parameters={})
    private Output</* @Nullable */ String> caCertificateIdentifier;

    /**
     * @return Indicates the certificate that needs to be associated with the database.
     * 
     */
    public Output<Optional<String>> caCertificateIdentifier() {
        return Codegen.optional(this.caCertificateIdentifier);
    }
    @Export(name="databaseArn", type=String.class, parameters={})
    private Output<String> databaseArn;

    public Output<String> databaseArn() {
        return this.databaseArn;
    }
    /**
     * The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn&#39;t specified, no database is created in the database resource. For PostgreSQL, if this parameter isn&#39;t specified, a database named postgres is created in the database resource.
     * 
     */
    @Export(name="masterDatabaseName", type=String.class, parameters={})
    private Output<String> masterDatabaseName;

    /**
     * @return The name of the database to create when the Lightsail database resource is created. For MySQL, if this parameter isn&#39;t specified, no database is created in the database resource. For PostgreSQL, if this parameter isn&#39;t specified, a database named postgres is created in the database resource.
     * 
     */
    public Output<String> masterDatabaseName() {
        return this.masterDatabaseName;
    }
    /**
     * The password for the master user. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;@&#34;. It cannot contain spaces.
     * 
     */
    @Export(name="masterUserPassword", type=String.class, parameters={})
    private Output</* @Nullable */ String> masterUserPassword;

    /**
     * @return The password for the master user. The password can include any printable ASCII character except &#34;/&#34;, &#34;&#34;&#34;, or &#34;@&#34;. It cannot contain spaces.
     * 
     */
    public Output<Optional<String>> masterUserPassword() {
        return Codegen.optional(this.masterUserPassword);
    }
    /**
     * The name for the master user.
     * 
     */
    @Export(name="masterUsername", type=String.class, parameters={})
    private Output<String> masterUsername;

    /**
     * @return The name for the master user.
     * 
     */
    public Output<String> masterUsername() {
        return this.masterUsername;
    }
    /**
     * The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    @Export(name="preferredBackupWindow", type=String.class, parameters={})
    private Output</* @Nullable */ String> preferredBackupWindow;

    /**
     * @return The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    public Output<Optional<String>> preferredBackupWindow() {
        return Codegen.optional(this.preferredBackupWindow);
    }
    /**
     * The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    @Export(name="preferredMaintenanceWindow", type=String.class, parameters={})
    private Output</* @Nullable */ String> preferredMaintenanceWindow;

    /**
     * @return The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    public Output<Optional<String>> preferredMaintenanceWindow() {
        return Codegen.optional(this.preferredMaintenanceWindow);
    }
    /**
     * Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    @Export(name="publiclyAccessible", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> publiclyAccessible;

    /**
     * @return Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    public Output<Optional<Boolean>> publiclyAccessible() {
        return Codegen.optional(this.publiclyAccessible);
    }
    /**
     * The blueprint ID for your new database. A blueprint describes the major engine version of a database.
     * 
     */
    @Export(name="relationalDatabaseBlueprintId", type=String.class, parameters={})
    private Output<String> relationalDatabaseBlueprintId;

    /**
     * @return The blueprint ID for your new database. A blueprint describes the major engine version of a database.
     * 
     */
    public Output<String> relationalDatabaseBlueprintId() {
        return this.relationalDatabaseBlueprintId;
    }
    /**
     * The bundle ID for your new database. A bundle describes the performance specifications for your database.
     * 
     */
    @Export(name="relationalDatabaseBundleId", type=String.class, parameters={})
    private Output<String> relationalDatabaseBundleId;

    /**
     * @return The bundle ID for your new database. A bundle describes the performance specifications for your database.
     * 
     */
    public Output<String> relationalDatabaseBundleId() {
        return this.relationalDatabaseBundleId;
    }
    /**
     * The name to use for your new Lightsail database resource.
     * 
     */
    @Export(name="relationalDatabaseName", type=String.class, parameters={})
    private Output<String> relationalDatabaseName;

    /**
     * @return The name to use for your new Lightsail database resource.
     * 
     */
    public Output<String> relationalDatabaseName() {
        return this.relationalDatabaseName;
    }
    /**
     * Update one or more parameters of the relational database.
     * 
     */
    @Export(name="relationalDatabaseParameters", type=List.class, parameters={DatabaseRelationalDatabaseParameter.class})
    private Output</* @Nullable */ List<DatabaseRelationalDatabaseParameter>> relationalDatabaseParameters;

    /**
     * @return Update one or more parameters of the relational database.
     * 
     */
    public Output<Optional<List<DatabaseRelationalDatabaseParameter>>> relationalDatabaseParameters() {
        return Codegen.optional(this.relationalDatabaseParameters);
    }
    /**
     * When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
     * 
     */
    @Export(name="rotateMasterUserPassword", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> rotateMasterUserPassword;

    /**
     * @return When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
     * 
     */
    public Output<Optional<Boolean>> rotateMasterUserPassword() {
        return Codegen.optional(this.rotateMasterUserPassword);
    }
    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Export(name="tags", type=List.class, parameters={DatabaseTag.class})
    private Output</* @Nullable */ List<DatabaseTag>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Output<Optional<List<DatabaseTag>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(String name, DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(String name, DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:lightsail:Database", name, args == null ? DatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Database(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("aws-native:lightsail:Database", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, options);
    }
}
