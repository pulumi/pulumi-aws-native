// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs.outputs;

import com.pulumi.awsnative.ecs.enums.ServicePropagateTags;
import com.pulumi.awsnative.ecs.outputs.ServiceCapacityProviderStrategyItem;
import com.pulumi.awsnative.ecs.outputs.ServiceDeploymentConfiguration;
import com.pulumi.awsnative.ecs.outputs.ServiceLoadBalancer;
import com.pulumi.awsnative.ecs.outputs.ServiceNetworkConfiguration;
import com.pulumi.awsnative.ecs.outputs.ServicePlacementConstraint;
import com.pulumi.awsnative.ecs.outputs.ServicePlacementStrategy;
import com.pulumi.awsnative.ecs.outputs.ServiceRegistry;
import com.pulumi.awsnative.ecs.outputs.ServiceTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceResult {
    private @Nullable List<ServiceCapacityProviderStrategyItem> capacityProviderStrategy;
    private @Nullable ServiceDeploymentConfiguration deploymentConfiguration;
    private @Nullable Integer desiredCount;
    private @Nullable Boolean enableECSManagedTags;
    private @Nullable Boolean enableExecuteCommand;
    private @Nullable Integer healthCheckGracePeriodSeconds;
    private @Nullable List<ServiceLoadBalancer> loadBalancers;
    private @Nullable String name;
    private @Nullable ServiceNetworkConfiguration networkConfiguration;
    private @Nullable List<ServicePlacementConstraint> placementConstraints;
    private @Nullable List<ServicePlacementStrategy> placementStrategies;
    private @Nullable String platformVersion;
    private @Nullable ServicePropagateTags propagateTags;
    private @Nullable String serviceArn;
    private @Nullable List<ServiceRegistry> serviceRegistries;
    private @Nullable List<ServiceTag> tags;
    private @Nullable String taskDefinition;

    private GetServiceResult() {}
    public List<ServiceCapacityProviderStrategyItem> capacityProviderStrategy() {
        return this.capacityProviderStrategy == null ? List.of() : this.capacityProviderStrategy;
    }
    public Optional<ServiceDeploymentConfiguration> deploymentConfiguration() {
        return Optional.ofNullable(this.deploymentConfiguration);
    }
    public Optional<Integer> desiredCount() {
        return Optional.ofNullable(this.desiredCount);
    }
    public Optional<Boolean> enableECSManagedTags() {
        return Optional.ofNullable(this.enableECSManagedTags);
    }
    public Optional<Boolean> enableExecuteCommand() {
        return Optional.ofNullable(this.enableExecuteCommand);
    }
    public Optional<Integer> healthCheckGracePeriodSeconds() {
        return Optional.ofNullable(this.healthCheckGracePeriodSeconds);
    }
    public List<ServiceLoadBalancer> loadBalancers() {
        return this.loadBalancers == null ? List.of() : this.loadBalancers;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<ServiceNetworkConfiguration> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }
    public List<ServicePlacementConstraint> placementConstraints() {
        return this.placementConstraints == null ? List.of() : this.placementConstraints;
    }
    public List<ServicePlacementStrategy> placementStrategies() {
        return this.placementStrategies == null ? List.of() : this.placementStrategies;
    }
    public Optional<String> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }
    public Optional<ServicePropagateTags> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }
    public Optional<String> serviceArn() {
        return Optional.ofNullable(this.serviceArn);
    }
    public List<ServiceRegistry> serviceRegistries() {
        return this.serviceRegistries == null ? List.of() : this.serviceRegistries;
    }
    public List<ServiceTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<String> taskDefinition() {
        return Optional.ofNullable(this.taskDefinition);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ServiceCapacityProviderStrategyItem> capacityProviderStrategy;
        private @Nullable ServiceDeploymentConfiguration deploymentConfiguration;
        private @Nullable Integer desiredCount;
        private @Nullable Boolean enableECSManagedTags;
        private @Nullable Boolean enableExecuteCommand;
        private @Nullable Integer healthCheckGracePeriodSeconds;
        private @Nullable List<ServiceLoadBalancer> loadBalancers;
        private @Nullable String name;
        private @Nullable ServiceNetworkConfiguration networkConfiguration;
        private @Nullable List<ServicePlacementConstraint> placementConstraints;
        private @Nullable List<ServicePlacementStrategy> placementStrategies;
        private @Nullable String platformVersion;
        private @Nullable ServicePropagateTags propagateTags;
        private @Nullable String serviceArn;
        private @Nullable List<ServiceRegistry> serviceRegistries;
        private @Nullable List<ServiceTag> tags;
        private @Nullable String taskDefinition;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityProviderStrategy = defaults.capacityProviderStrategy;
    	      this.deploymentConfiguration = defaults.deploymentConfiguration;
    	      this.desiredCount = defaults.desiredCount;
    	      this.enableECSManagedTags = defaults.enableECSManagedTags;
    	      this.enableExecuteCommand = defaults.enableExecuteCommand;
    	      this.healthCheckGracePeriodSeconds = defaults.healthCheckGracePeriodSeconds;
    	      this.loadBalancers = defaults.loadBalancers;
    	      this.name = defaults.name;
    	      this.networkConfiguration = defaults.networkConfiguration;
    	      this.placementConstraints = defaults.placementConstraints;
    	      this.placementStrategies = defaults.placementStrategies;
    	      this.platformVersion = defaults.platformVersion;
    	      this.propagateTags = defaults.propagateTags;
    	      this.serviceArn = defaults.serviceArn;
    	      this.serviceRegistries = defaults.serviceRegistries;
    	      this.tags = defaults.tags;
    	      this.taskDefinition = defaults.taskDefinition;
        }

        @CustomType.Setter
        public Builder capacityProviderStrategy(@Nullable List<ServiceCapacityProviderStrategyItem> capacityProviderStrategy) {
            this.capacityProviderStrategy = capacityProviderStrategy;
            return this;
        }
        public Builder capacityProviderStrategy(ServiceCapacityProviderStrategyItem... capacityProviderStrategy) {
            return capacityProviderStrategy(List.of(capacityProviderStrategy));
        }
        @CustomType.Setter
        public Builder deploymentConfiguration(@Nullable ServiceDeploymentConfiguration deploymentConfiguration) {
            this.deploymentConfiguration = deploymentConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder desiredCount(@Nullable Integer desiredCount) {
            this.desiredCount = desiredCount;
            return this;
        }
        @CustomType.Setter
        public Builder enableECSManagedTags(@Nullable Boolean enableECSManagedTags) {
            this.enableECSManagedTags = enableECSManagedTags;
            return this;
        }
        @CustomType.Setter
        public Builder enableExecuteCommand(@Nullable Boolean enableExecuteCommand) {
            this.enableExecuteCommand = enableExecuteCommand;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckGracePeriodSeconds(@Nullable Integer healthCheckGracePeriodSeconds) {
            this.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancers(@Nullable List<ServiceLoadBalancer> loadBalancers) {
            this.loadBalancers = loadBalancers;
            return this;
        }
        public Builder loadBalancers(ServiceLoadBalancer... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfiguration(@Nullable ServiceNetworkConfiguration networkConfiguration) {
            this.networkConfiguration = networkConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder placementConstraints(@Nullable List<ServicePlacementConstraint> placementConstraints) {
            this.placementConstraints = placementConstraints;
            return this;
        }
        public Builder placementConstraints(ServicePlacementConstraint... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }
        @CustomType.Setter
        public Builder placementStrategies(@Nullable List<ServicePlacementStrategy> placementStrategies) {
            this.placementStrategies = placementStrategies;
            return this;
        }
        public Builder placementStrategies(ServicePlacementStrategy... placementStrategies) {
            return placementStrategies(List.of(placementStrategies));
        }
        @CustomType.Setter
        public Builder platformVersion(@Nullable String platformVersion) {
            this.platformVersion = platformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder propagateTags(@Nullable ServicePropagateTags propagateTags) {
            this.propagateTags = propagateTags;
            return this;
        }
        @CustomType.Setter
        public Builder serviceArn(@Nullable String serviceArn) {
            this.serviceArn = serviceArn;
            return this;
        }
        @CustomType.Setter
        public Builder serviceRegistries(@Nullable List<ServiceRegistry> serviceRegistries) {
            this.serviceRegistries = serviceRegistries;
            return this;
        }
        public Builder serviceRegistries(ServiceRegistry... serviceRegistries) {
            return serviceRegistries(List.of(serviceRegistries));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<ServiceTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(ServiceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder taskDefinition(@Nullable String taskDefinition) {
            this.taskDefinition = taskDefinition;
            return this;
        }
        public GetServiceResult build() {
            final var o = new GetServiceResult();
            o.capacityProviderStrategy = capacityProviderStrategy;
            o.deploymentConfiguration = deploymentConfiguration;
            o.desiredCount = desiredCount;
            o.enableECSManagedTags = enableECSManagedTags;
            o.enableExecuteCommand = enableExecuteCommand;
            o.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds;
            o.loadBalancers = loadBalancers;
            o.name = name;
            o.networkConfiguration = networkConfiguration;
            o.placementConstraints = placementConstraints;
            o.placementStrategies = placementStrategies;
            o.platformVersion = platformVersion;
            o.propagateTags = propagateTags;
            o.serviceArn = serviceArn;
            o.serviceRegistries = serviceRegistries;
            o.tags = tags;
            o.taskDefinition = taskDefinition;
            return o;
        }
    }
}
