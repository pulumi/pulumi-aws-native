// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lookoutmetrics.outputs;

import com.pulumi.awsnative.lookoutmetrics.enums.AnomalyDetectorCsvFormatDescriptorFileCompression;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AnomalyDetectorCsvFormatDescriptor {
    private @Nullable String charset;
    private @Nullable Boolean containsHeader;
    private @Nullable String delimiter;
    private @Nullable AnomalyDetectorCsvFormatDescriptorFileCompression fileCompression;
    private @Nullable List<String> headerList;
    private @Nullable String quoteSymbol;

    private AnomalyDetectorCsvFormatDescriptor() {}
    public Optional<String> charset() {
        return Optional.ofNullable(this.charset);
    }
    public Optional<Boolean> containsHeader() {
        return Optional.ofNullable(this.containsHeader);
    }
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    public Optional<AnomalyDetectorCsvFormatDescriptorFileCompression> fileCompression() {
        return Optional.ofNullable(this.fileCompression);
    }
    public List<String> headerList() {
        return this.headerList == null ? List.of() : this.headerList;
    }
    public Optional<String> quoteSymbol() {
        return Optional.ofNullable(this.quoteSymbol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AnomalyDetectorCsvFormatDescriptor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String charset;
        private @Nullable Boolean containsHeader;
        private @Nullable String delimiter;
        private @Nullable AnomalyDetectorCsvFormatDescriptorFileCompression fileCompression;
        private @Nullable List<String> headerList;
        private @Nullable String quoteSymbol;
        public Builder() {}
        public Builder(AnomalyDetectorCsvFormatDescriptor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.charset = defaults.charset;
    	      this.containsHeader = defaults.containsHeader;
    	      this.delimiter = defaults.delimiter;
    	      this.fileCompression = defaults.fileCompression;
    	      this.headerList = defaults.headerList;
    	      this.quoteSymbol = defaults.quoteSymbol;
        }

        @CustomType.Setter
        public Builder charset(@Nullable String charset) {
            this.charset = charset;
            return this;
        }
        @CustomType.Setter
        public Builder containsHeader(@Nullable Boolean containsHeader) {
            this.containsHeader = containsHeader;
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder fileCompression(@Nullable AnomalyDetectorCsvFormatDescriptorFileCompression fileCompression) {
            this.fileCompression = fileCompression;
            return this;
        }
        @CustomType.Setter
        public Builder headerList(@Nullable List<String> headerList) {
            this.headerList = headerList;
            return this;
        }
        public Builder headerList(String... headerList) {
            return headerList(List.of(headerList));
        }
        @CustomType.Setter
        public Builder quoteSymbol(@Nullable String quoteSymbol) {
            this.quoteSymbol = quoteSymbol;
            return this;
        }
        public AnomalyDetectorCsvFormatDescriptor build() {
            final var o = new AnomalyDetectorCsvFormatDescriptor();
            o.charset = charset;
            o.containsHeader = containsHeader;
            o.delimiter = delimiter;
            o.fileCompression = fileCompression;
            o.headerList = headerList;
            o.quoteSymbol = quoteSymbol;
            return o;
        }
    }
}
