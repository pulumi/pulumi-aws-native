// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lambda.outputs;

import com.pulumi.awsnative.lambda.enums.EventSourceMappingFunctionResponseTypesItem;
import com.pulumi.awsnative.lambda.outputs.EventSourceMappingDestinationConfig;
import com.pulumi.awsnative.lambda.outputs.EventSourceMappingFilterCriteria;
import com.pulumi.awsnative.lambda.outputs.EventSourceMappingSourceAccessConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetEventSourceMappingResult {
    /**
     * @return The maximum number of items to retrieve in a single batch.
     * 
     */
    private @Nullable Integer batchSize;
    /**
     * @return (Streams) If the function returns an error, split the batch in two and retry.
     * 
     */
    private @Nullable Boolean bisectBatchOnFunctionError;
    /**
     * @return (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
     * 
     */
    private @Nullable EventSourceMappingDestinationConfig destinationConfig;
    /**
     * @return Disables the event source mapping to pause polling and invocation.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The filter criteria to control event filtering.
     * 
     */
    private @Nullable EventSourceMappingFilterCriteria filterCriteria;
    /**
     * @return The name of the Lambda function.
     * 
     */
    private @Nullable String functionName;
    /**
     * @return (Streams) A list of response types supported by the function.
     * 
     */
    private @Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes;
    /**
     * @return Event Source Mapping Identifier UUID.
     * 
     */
    private @Nullable String id;
    /**
     * @return (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
     * 
     */
    private @Nullable Integer maximumBatchingWindowInSeconds;
    /**
     * @return (Streams) The maximum age of a record that Lambda sends to a function for processing.
     * 
     */
    private @Nullable Integer maximumRecordAgeInSeconds;
    /**
     * @return (Streams) The maximum number of times to retry when the function returns an error.
     * 
     */
    private @Nullable Integer maximumRetryAttempts;
    /**
     * @return (Streams) The number of batches to process from each shard concurrently.
     * 
     */
    private @Nullable Integer parallelizationFactor;
    /**
     * @return (ActiveMQ) A list of ActiveMQ queues.
     * 
     */
    private @Nullable List<String> queues;
    /**
     * @return A list of SourceAccessConfiguration.
     * 
     */
    private @Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations;
    /**
     * @return (Kafka) A list of Kafka topics.
     * 
     */
    private @Nullable List<String> topics;
    /**
     * @return (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
     * 
     */
    private @Nullable Integer tumblingWindowInSeconds;

    private GetEventSourceMappingResult() {}
    /**
     * @return The maximum number of items to retrieve in a single batch.
     * 
     */
    public Optional<Integer> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    /**
     * @return (Streams) If the function returns an error, split the batch in two and retry.
     * 
     */
    public Optional<Boolean> bisectBatchOnFunctionError() {
        return Optional.ofNullable(this.bisectBatchOnFunctionError);
    }
    /**
     * @return (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
     * 
     */
    public Optional<EventSourceMappingDestinationConfig> destinationConfig() {
        return Optional.ofNullable(this.destinationConfig);
    }
    /**
     * @return Disables the event source mapping to pause polling and invocation.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The filter criteria to control event filtering.
     * 
     */
    public Optional<EventSourceMappingFilterCriteria> filterCriteria() {
        return Optional.ofNullable(this.filterCriteria);
    }
    /**
     * @return The name of the Lambda function.
     * 
     */
    public Optional<String> functionName() {
        return Optional.ofNullable(this.functionName);
    }
    /**
     * @return (Streams) A list of response types supported by the function.
     * 
     */
    public List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes() {
        return this.functionResponseTypes == null ? List.of() : this.functionResponseTypes;
    }
    /**
     * @return Event Source Mapping Identifier UUID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
     * 
     */
    public Optional<Integer> maximumBatchingWindowInSeconds() {
        return Optional.ofNullable(this.maximumBatchingWindowInSeconds);
    }
    /**
     * @return (Streams) The maximum age of a record that Lambda sends to a function for processing.
     * 
     */
    public Optional<Integer> maximumRecordAgeInSeconds() {
        return Optional.ofNullable(this.maximumRecordAgeInSeconds);
    }
    /**
     * @return (Streams) The maximum number of times to retry when the function returns an error.
     * 
     */
    public Optional<Integer> maximumRetryAttempts() {
        return Optional.ofNullable(this.maximumRetryAttempts);
    }
    /**
     * @return (Streams) The number of batches to process from each shard concurrently.
     * 
     */
    public Optional<Integer> parallelizationFactor() {
        return Optional.ofNullable(this.parallelizationFactor);
    }
    /**
     * @return (ActiveMQ) A list of ActiveMQ queues.
     * 
     */
    public List<String> queues() {
        return this.queues == null ? List.of() : this.queues;
    }
    /**
     * @return A list of SourceAccessConfiguration.
     * 
     */
    public List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations() {
        return this.sourceAccessConfigurations == null ? List.of() : this.sourceAccessConfigurations;
    }
    /**
     * @return (Kafka) A list of Kafka topics.
     * 
     */
    public List<String> topics() {
        return this.topics == null ? List.of() : this.topics;
    }
    /**
     * @return (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
     * 
     */
    public Optional<Integer> tumblingWindowInSeconds() {
        return Optional.ofNullable(this.tumblingWindowInSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEventSourceMappingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer batchSize;
        private @Nullable Boolean bisectBatchOnFunctionError;
        private @Nullable EventSourceMappingDestinationConfig destinationConfig;
        private @Nullable Boolean enabled;
        private @Nullable EventSourceMappingFilterCriteria filterCriteria;
        private @Nullable String functionName;
        private @Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes;
        private @Nullable String id;
        private @Nullable Integer maximumBatchingWindowInSeconds;
        private @Nullable Integer maximumRecordAgeInSeconds;
        private @Nullable Integer maximumRetryAttempts;
        private @Nullable Integer parallelizationFactor;
        private @Nullable List<String> queues;
        private @Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations;
        private @Nullable List<String> topics;
        private @Nullable Integer tumblingWindowInSeconds;
        public Builder() {}
        public Builder(GetEventSourceMappingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.bisectBatchOnFunctionError = defaults.bisectBatchOnFunctionError;
    	      this.destinationConfig = defaults.destinationConfig;
    	      this.enabled = defaults.enabled;
    	      this.filterCriteria = defaults.filterCriteria;
    	      this.functionName = defaults.functionName;
    	      this.functionResponseTypes = defaults.functionResponseTypes;
    	      this.id = defaults.id;
    	      this.maximumBatchingWindowInSeconds = defaults.maximumBatchingWindowInSeconds;
    	      this.maximumRecordAgeInSeconds = defaults.maximumRecordAgeInSeconds;
    	      this.maximumRetryAttempts = defaults.maximumRetryAttempts;
    	      this.parallelizationFactor = defaults.parallelizationFactor;
    	      this.queues = defaults.queues;
    	      this.sourceAccessConfigurations = defaults.sourceAccessConfigurations;
    	      this.topics = defaults.topics;
    	      this.tumblingWindowInSeconds = defaults.tumblingWindowInSeconds;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Integer batchSize) {
            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder bisectBatchOnFunctionError(@Nullable Boolean bisectBatchOnFunctionError) {
            this.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
            return this;
        }
        @CustomType.Setter
        public Builder destinationConfig(@Nullable EventSourceMappingDestinationConfig destinationConfig) {
            this.destinationConfig = destinationConfig;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filterCriteria(@Nullable EventSourceMappingFilterCriteria filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder functionName(@Nullable String functionName) {
            this.functionName = functionName;
            return this;
        }
        @CustomType.Setter
        public Builder functionResponseTypes(@Nullable List<EventSourceMappingFunctionResponseTypesItem> functionResponseTypes) {
            this.functionResponseTypes = functionResponseTypes;
            return this;
        }
        public Builder functionResponseTypes(EventSourceMappingFunctionResponseTypesItem... functionResponseTypes) {
            return functionResponseTypes(List.of(functionResponseTypes));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maximumBatchingWindowInSeconds(@Nullable Integer maximumBatchingWindowInSeconds) {
            this.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRecordAgeInSeconds(@Nullable Integer maximumRecordAgeInSeconds) {
            this.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRetryAttempts(@Nullable Integer maximumRetryAttempts) {
            this.maximumRetryAttempts = maximumRetryAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder parallelizationFactor(@Nullable Integer parallelizationFactor) {
            this.parallelizationFactor = parallelizationFactor;
            return this;
        }
        @CustomType.Setter
        public Builder queues(@Nullable List<String> queues) {
            this.queues = queues;
            return this;
        }
        public Builder queues(String... queues) {
            return queues(List.of(queues));
        }
        @CustomType.Setter
        public Builder sourceAccessConfigurations(@Nullable List<EventSourceMappingSourceAccessConfiguration> sourceAccessConfigurations) {
            this.sourceAccessConfigurations = sourceAccessConfigurations;
            return this;
        }
        public Builder sourceAccessConfigurations(EventSourceMappingSourceAccessConfiguration... sourceAccessConfigurations) {
            return sourceAccessConfigurations(List.of(sourceAccessConfigurations));
        }
        @CustomType.Setter
        public Builder topics(@Nullable List<String> topics) {
            this.topics = topics;
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder tumblingWindowInSeconds(@Nullable Integer tumblingWindowInSeconds) {
            this.tumblingWindowInSeconds = tumblingWindowInSeconds;
            return this;
        }
        public GetEventSourceMappingResult build() {
            final var o = new GetEventSourceMappingResult();
            o.batchSize = batchSize;
            o.bisectBatchOnFunctionError = bisectBatchOnFunctionError;
            o.destinationConfig = destinationConfig;
            o.enabled = enabled;
            o.filterCriteria = filterCriteria;
            o.functionName = functionName;
            o.functionResponseTypes = functionResponseTypes;
            o.id = id;
            o.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            o.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds;
            o.maximumRetryAttempts = maximumRetryAttempts;
            o.parallelizationFactor = parallelizationFactor;
            o.queues = queues;
            o.sourceAccessConfigurations = sourceAccessConfigurations;
            o.topics = topics;
            o.tumblingWindowInSeconds = tumblingWindowInSeconds;
            return o;
        }
    }
}
