// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.frauddetector;

import com.pulumi.awsnative.frauddetector.inputs.EventTypeEntityTypeArgs;
import com.pulumi.awsnative.frauddetector.inputs.EventTypeEventVariableArgs;
import com.pulumi.awsnative.frauddetector.inputs.EventTypeLabelArgs;
import com.pulumi.awsnative.frauddetector.inputs.EventTypeTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventTypeArgs Empty = new EventTypeArgs();

    /**
     * The description of the event type.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the event type.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="entityTypes", required=true)
    private Output<List<EventTypeEntityTypeArgs>> entityTypes;

    public Output<List<EventTypeEntityTypeArgs>> entityTypes() {
        return this.entityTypes;
    }

    @Import(name="eventVariables", required=true)
    private Output<List<EventTypeEventVariableArgs>> eventVariables;

    public Output<List<EventTypeEventVariableArgs>> eventVariables() {
        return this.eventVariables;
    }

    @Import(name="labels", required=true)
    private Output<List<EventTypeLabelArgs>> labels;

    public Output<List<EventTypeLabelArgs>> labels() {
        return this.labels;
    }

    /**
     * The name for the event type
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the event type
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tags associated with this event type.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<EventTypeTagArgs>> tags;

    /**
     * @return Tags associated with this event type.
     * 
     */
    public Optional<Output<List<EventTypeTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EventTypeArgs() {}

    private EventTypeArgs(EventTypeArgs $) {
        this.description = $.description;
        this.entityTypes = $.entityTypes;
        this.eventVariables = $.eventVariables;
        this.labels = $.labels;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTypeArgs $;

        public Builder() {
            $ = new EventTypeArgs();
        }

        public Builder(EventTypeArgs defaults) {
            $ = new EventTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the event type.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the event type.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder entityTypes(Output<List<EventTypeEntityTypeArgs>> entityTypes) {
            $.entityTypes = entityTypes;
            return this;
        }

        public Builder entityTypes(List<EventTypeEntityTypeArgs> entityTypes) {
            return entityTypes(Output.of(entityTypes));
        }

        public Builder entityTypes(EventTypeEntityTypeArgs... entityTypes) {
            return entityTypes(List.of(entityTypes));
        }

        public Builder eventVariables(Output<List<EventTypeEventVariableArgs>> eventVariables) {
            $.eventVariables = eventVariables;
            return this;
        }

        public Builder eventVariables(List<EventTypeEventVariableArgs> eventVariables) {
            return eventVariables(Output.of(eventVariables));
        }

        public Builder eventVariables(EventTypeEventVariableArgs... eventVariables) {
            return eventVariables(List.of(eventVariables));
        }

        public Builder labels(Output<List<EventTypeLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<EventTypeLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(EventTypeLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param name The name for the event type
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the event type
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Tags associated with this event type.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<EventTypeTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with this event type.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<EventTypeTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with this event type.
         * 
         * @return builder
         * 
         */
        public Builder tags(EventTypeTagArgs... tags) {
            return tags(List.of(tags));
        }

        public EventTypeArgs build() {
            $.entityTypes = Objects.requireNonNull($.entityTypes, "expected parameter 'entityTypes' to be non-null");
            $.eventVariables = Objects.requireNonNull($.eventVariables, "expected parameter 'eventVariables' to be non-null");
            $.labels = Objects.requireNonNull($.labels, "expected parameter 'labels' to be non-null");
            return $;
        }
    }

}
