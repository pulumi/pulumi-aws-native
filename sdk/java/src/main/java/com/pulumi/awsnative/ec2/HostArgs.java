// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ec2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HostArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostArgs Empty = new HostArgs();

    /**
     * Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
     * 
     */
    @Import(name="autoPlacement")
    private @Nullable Output<String> autoPlacement;

    /**
     * @return Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
     * 
     */
    public Optional<Output<String>> autoPlacement() {
        return Optional.ofNullable(this.autoPlacement);
    }

    /**
     * The Availability Zone in which to allocate the Dedicated Host.
     * 
     */
    @Import(name="availabilityZone", required=true)
    private Output<String> availabilityZone;

    /**
     * @return The Availability Zone in which to allocate the Dedicated Host.
     * 
     */
    public Output<String> availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
     * 
     */
    @Import(name="hostRecovery")
    private @Nullable Output<String> hostRecovery;

    /**
     * @return Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
     * 
     */
    public Optional<Output<String>> hostRecovery() {
        return Optional.ofNullable(this.hostRecovery);
    }

    /**
     * Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    private HostArgs() {}

    private HostArgs(HostArgs $) {
        this.autoPlacement = $.autoPlacement;
        this.availabilityZone = $.availabilityZone;
        this.hostRecovery = $.hostRecovery;
        this.instanceType = $.instanceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostArgs $;

        public Builder() {
            $ = new HostArgs();
        }

        public Builder(HostArgs defaults) {
            $ = new HostArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPlacement Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
         * 
         * @return builder
         * 
         */
        public Builder autoPlacement(@Nullable Output<String> autoPlacement) {
            $.autoPlacement = autoPlacement;
            return this;
        }

        /**
         * @param autoPlacement Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
         * 
         * @return builder
         * 
         */
        public Builder autoPlacement(String autoPlacement) {
            return autoPlacement(Output.of(autoPlacement));
        }

        /**
         * @param availabilityZone The Availability Zone in which to allocate the Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone The Availability Zone in which to allocate the Dedicated Host.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param hostRecovery Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder hostRecovery(@Nullable Output<String> hostRecovery) {
            $.hostRecovery = hostRecovery;
            return this;
        }

        /**
         * @param hostRecovery Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder hostRecovery(String hostRecovery) {
            return hostRecovery(Output.of(hostRecovery));
        }

        /**
         * @param instanceType Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        public HostArgs build() {
            $.availabilityZone = Objects.requireNonNull($.availabilityZone, "expected parameter 'availabilityZone' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            return $;
        }
    }

}
