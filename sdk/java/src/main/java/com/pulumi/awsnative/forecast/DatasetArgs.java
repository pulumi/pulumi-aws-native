// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.forecast;

import com.pulumi.awsnative.forecast.enums.DatasetDomain;
import com.pulumi.awsnative.forecast.enums.DatasetType;
import com.pulumi.awsnative.forecast.inputs.EncryptionConfigPropertiesArgs;
import com.pulumi.awsnative.forecast.inputs.SchemaPropertiesArgs;
import com.pulumi.awsnative.forecast.inputs.TagsItemPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetArgs Empty = new DatasetArgs();

    /**
     * Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     * 
     */
    @Import(name="dataFrequency")
    private @Nullable Output<String> dataFrequency;

    /**
     * @return Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
     * 
     */
    public Optional<Output<String>> dataFrequency() {
        return Optional.ofNullable(this.dataFrequency);
    }

    /**
     * A name for the dataset
     * 
     */
    @Import(name="datasetName")
    private @Nullable Output<String> datasetName;

    /**
     * @return A name for the dataset
     * 
     */
    public Optional<Output<String>> datasetName() {
        return Optional.ofNullable(this.datasetName);
    }

    /**
     * The dataset type
     * 
     */
    @Import(name="datasetType", required=true)
    private Output<DatasetType> datasetType;

    /**
     * @return The dataset type
     * 
     */
    public Output<DatasetType> datasetType() {
        return this.datasetType;
    }

    /**
     * The domain associated with the dataset
     * 
     */
    @Import(name="domain", required=true)
    private Output<DatasetDomain> domain;

    /**
     * @return The domain associated with the dataset
     * 
     */
    public Output<DatasetDomain> domain() {
        return this.domain;
    }

    @Import(name="encryptionConfig")
    private @Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig;

    public Optional<Output<EncryptionConfigPropertiesArgs>> encryptionConfig() {
        return Optional.ofNullable(this.encryptionConfig);
    }

    @Import(name="schema", required=true)
    private Output<SchemaPropertiesArgs> schema;

    public Output<SchemaPropertiesArgs> schema() {
        return this.schema;
    }

    @Import(name="tags")
    private @Nullable Output<List<TagsItemPropertiesArgs>> tags;

    public Optional<Output<List<TagsItemPropertiesArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DatasetArgs() {}

    private DatasetArgs(DatasetArgs $) {
        this.dataFrequency = $.dataFrequency;
        this.datasetName = $.datasetName;
        this.datasetType = $.datasetType;
        this.domain = $.domain;
        this.encryptionConfig = $.encryptionConfig;
        this.schema = $.schema;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetArgs $;

        public Builder() {
            $ = new DatasetArgs();
        }

        public Builder(DatasetArgs defaults) {
            $ = new DatasetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataFrequency Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
         * 
         * @return builder
         * 
         */
        public Builder dataFrequency(@Nullable Output<String> dataFrequency) {
            $.dataFrequency = dataFrequency;
            return this;
        }

        /**
         * @param dataFrequency Frequency of data collection. This parameter is required for RELATED_TIME_SERIES
         * 
         * @return builder
         * 
         */
        public Builder dataFrequency(String dataFrequency) {
            return dataFrequency(Output.of(dataFrequency));
        }

        /**
         * @param datasetName A name for the dataset
         * 
         * @return builder
         * 
         */
        public Builder datasetName(@Nullable Output<String> datasetName) {
            $.datasetName = datasetName;
            return this;
        }

        /**
         * @param datasetName A name for the dataset
         * 
         * @return builder
         * 
         */
        public Builder datasetName(String datasetName) {
            return datasetName(Output.of(datasetName));
        }

        /**
         * @param datasetType The dataset type
         * 
         * @return builder
         * 
         */
        public Builder datasetType(Output<DatasetType> datasetType) {
            $.datasetType = datasetType;
            return this;
        }

        /**
         * @param datasetType The dataset type
         * 
         * @return builder
         * 
         */
        public Builder datasetType(DatasetType datasetType) {
            return datasetType(Output.of(datasetType));
        }

        /**
         * @param domain The domain associated with the dataset
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<DatasetDomain> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain associated with the dataset
         * 
         * @return builder
         * 
         */
        public Builder domain(DatasetDomain domain) {
            return domain(Output.of(domain));
        }

        public Builder encryptionConfig(@Nullable Output<EncryptionConfigPropertiesArgs> encryptionConfig) {
            $.encryptionConfig = encryptionConfig;
            return this;
        }

        public Builder encryptionConfig(EncryptionConfigPropertiesArgs encryptionConfig) {
            return encryptionConfig(Output.of(encryptionConfig));
        }

        public Builder schema(Output<SchemaPropertiesArgs> schema) {
            $.schema = schema;
            return this;
        }

        public Builder schema(SchemaPropertiesArgs schema) {
            return schema(Output.of(schema));
        }

        public Builder tags(@Nullable Output<List<TagsItemPropertiesArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<TagsItemPropertiesArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(TagsItemPropertiesArgs... tags) {
            return tags(List.of(tags));
        }

        public DatasetArgs build() {
            $.datasetType = Objects.requireNonNull($.datasetType, "expected parameter 'datasetType' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            return $;
        }
    }

}
