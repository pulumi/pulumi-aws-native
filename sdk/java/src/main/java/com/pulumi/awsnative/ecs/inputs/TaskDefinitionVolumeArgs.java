// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs.inputs;

import com.pulumi.awsnative.ecs.inputs.TaskDefinitionDockerVolumeConfigurationArgs;
import com.pulumi.awsnative.ecs.inputs.TaskDefinitionEFSVolumeConfigurationArgs;
import com.pulumi.awsnative.ecs.inputs.TaskDefinitionHostVolumePropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskDefinitionVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskDefinitionVolumeArgs Empty = new TaskDefinitionVolumeArgs();

    @Import(name="dockerVolumeConfiguration")
    private @Nullable Output<TaskDefinitionDockerVolumeConfigurationArgs> dockerVolumeConfiguration;

    public Optional<Output<TaskDefinitionDockerVolumeConfigurationArgs>> dockerVolumeConfiguration() {
        return Optional.ofNullable(this.dockerVolumeConfiguration);
    }

    @Import(name="eFSVolumeConfiguration")
    private @Nullable Output<TaskDefinitionEFSVolumeConfigurationArgs> eFSVolumeConfiguration;

    public Optional<Output<TaskDefinitionEFSVolumeConfigurationArgs>> eFSVolumeConfiguration() {
        return Optional.ofNullable(this.eFSVolumeConfiguration);
    }

    @Import(name="host")
    private @Nullable Output<TaskDefinitionHostVolumePropertiesArgs> host;

    public Optional<Output<TaskDefinitionHostVolumePropertiesArgs>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TaskDefinitionVolumeArgs() {}

    private TaskDefinitionVolumeArgs(TaskDefinitionVolumeArgs $) {
        this.dockerVolumeConfiguration = $.dockerVolumeConfiguration;
        this.eFSVolumeConfiguration = $.eFSVolumeConfiguration;
        this.host = $.host;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskDefinitionVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskDefinitionVolumeArgs $;

        public Builder() {
            $ = new TaskDefinitionVolumeArgs();
        }

        public Builder(TaskDefinitionVolumeArgs defaults) {
            $ = new TaskDefinitionVolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder dockerVolumeConfiguration(@Nullable Output<TaskDefinitionDockerVolumeConfigurationArgs> dockerVolumeConfiguration) {
            $.dockerVolumeConfiguration = dockerVolumeConfiguration;
            return this;
        }

        public Builder dockerVolumeConfiguration(TaskDefinitionDockerVolumeConfigurationArgs dockerVolumeConfiguration) {
            return dockerVolumeConfiguration(Output.of(dockerVolumeConfiguration));
        }

        public Builder eFSVolumeConfiguration(@Nullable Output<TaskDefinitionEFSVolumeConfigurationArgs> eFSVolumeConfiguration) {
            $.eFSVolumeConfiguration = eFSVolumeConfiguration;
            return this;
        }

        public Builder eFSVolumeConfiguration(TaskDefinitionEFSVolumeConfigurationArgs eFSVolumeConfiguration) {
            return eFSVolumeConfiguration(Output.of(eFSVolumeConfiguration));
        }

        public Builder host(@Nullable Output<TaskDefinitionHostVolumePropertiesArgs> host) {
            $.host = host;
            return this;
        }

        public Builder host(TaskDefinitionHostVolumePropertiesArgs host) {
            return host(Output.of(host));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TaskDefinitionVolumeArgs build() {
            return $;
        }
    }

}
