// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.
 * 
 */
public final class MitigationActionAddThingsToThingGroupParamsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MitigationActionAddThingsToThingGroupParamsArgs Empty = new MitigationActionAddThingsToThingGroupParamsArgs();

    /**
     * Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
     * 
     */
    @Import(name="overrideDynamicGroups")
    private @Nullable Output<Boolean> overrideDynamicGroups;

    /**
     * @return Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
     * 
     */
    public Optional<Output<Boolean>> overrideDynamicGroups() {
        return Optional.ofNullable(this.overrideDynamicGroups);
    }

    /**
     * The list of groups to which you want to add the things that triggered the mitigation action.
     * 
     */
    @Import(name="thingGroupNames", required=true)
    private Output<List<String>> thingGroupNames;

    /**
     * @return The list of groups to which you want to add the things that triggered the mitigation action.
     * 
     */
    public Output<List<String>> thingGroupNames() {
        return this.thingGroupNames;
    }

    private MitigationActionAddThingsToThingGroupParamsArgs() {}

    private MitigationActionAddThingsToThingGroupParamsArgs(MitigationActionAddThingsToThingGroupParamsArgs $) {
        this.overrideDynamicGroups = $.overrideDynamicGroups;
        this.thingGroupNames = $.thingGroupNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MitigationActionAddThingsToThingGroupParamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MitigationActionAddThingsToThingGroupParamsArgs $;

        public Builder() {
            $ = new MitigationActionAddThingsToThingGroupParamsArgs();
        }

        public Builder(MitigationActionAddThingsToThingGroupParamsArgs defaults) {
            $ = new MitigationActionAddThingsToThingGroupParamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param overrideDynamicGroups Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
         * 
         * @return builder
         * 
         */
        public Builder overrideDynamicGroups(@Nullable Output<Boolean> overrideDynamicGroups) {
            $.overrideDynamicGroups = overrideDynamicGroups;
            return this;
        }

        /**
         * @param overrideDynamicGroups Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
         * 
         * @return builder
         * 
         */
        public Builder overrideDynamicGroups(Boolean overrideDynamicGroups) {
            return overrideDynamicGroups(Output.of(overrideDynamicGroups));
        }

        /**
         * @param thingGroupNames The list of groups to which you want to add the things that triggered the mitigation action.
         * 
         * @return builder
         * 
         */
        public Builder thingGroupNames(Output<List<String>> thingGroupNames) {
            $.thingGroupNames = thingGroupNames;
            return this;
        }

        /**
         * @param thingGroupNames The list of groups to which you want to add the things that triggered the mitigation action.
         * 
         * @return builder
         * 
         */
        public Builder thingGroupNames(List<String> thingGroupNames) {
            return thingGroupNames(Output.of(thingGroupNames));
        }

        /**
         * @param thingGroupNames The list of groups to which you want to add the things that triggered the mitigation action.
         * 
         * @return builder
         * 
         */
        public Builder thingGroupNames(String... thingGroupNames) {
            return thingGroupNames(List.of(thingGroupNames));
        }

        public MitigationActionAddThingsToThingGroupParamsArgs build() {
            $.thingGroupNames = Objects.requireNonNull($.thingGroupNames, "expected parameter 'thingGroupNames' to be non-null");
            return $;
        }
    }

}
