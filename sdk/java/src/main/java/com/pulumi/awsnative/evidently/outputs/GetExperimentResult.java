// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.evidently.outputs;

import com.pulumi.awsnative.evidently.outputs.ExperimentMetricGoalObject;
import com.pulumi.awsnative.evidently.outputs.ExperimentOnlineAbConfigObject;
import com.pulumi.awsnative.evidently.outputs.ExperimentRunningStatusObject;
import com.pulumi.awsnative.evidently.outputs.ExperimentTag;
import com.pulumi.awsnative.evidently.outputs.ExperimentTreatmentObject;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExperimentResult {
    private @Nullable String arn;
    private @Nullable String description;
    private @Nullable List<ExperimentMetricGoalObject> metricGoals;
    private @Nullable ExperimentOnlineAbConfigObject onlineAbConfig;
    private @Nullable String randomizationSalt;
    /**
     * @return Start Experiment. Default is False
     * 
     */
    private @Nullable ExperimentRunningStatusObject runningStatus;
    private @Nullable Integer samplingRate;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<ExperimentTag> tags;
    private @Nullable List<ExperimentTreatmentObject> treatments;

    private GetExperimentResult() {}
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public List<ExperimentMetricGoalObject> metricGoals() {
        return this.metricGoals == null ? List.of() : this.metricGoals;
    }
    public Optional<ExperimentOnlineAbConfigObject> onlineAbConfig() {
        return Optional.ofNullable(this.onlineAbConfig);
    }
    public Optional<String> randomizationSalt() {
        return Optional.ofNullable(this.randomizationSalt);
    }
    /**
     * @return Start Experiment. Default is False
     * 
     */
    public Optional<ExperimentRunningStatusObject> runningStatus() {
        return Optional.ofNullable(this.runningStatus);
    }
    public Optional<Integer> samplingRate() {
        return Optional.ofNullable(this.samplingRate);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<ExperimentTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public List<ExperimentTreatmentObject> treatments() {
        return this.treatments == null ? List.of() : this.treatments;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExperimentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable String description;
        private @Nullable List<ExperimentMetricGoalObject> metricGoals;
        private @Nullable ExperimentOnlineAbConfigObject onlineAbConfig;
        private @Nullable String randomizationSalt;
        private @Nullable ExperimentRunningStatusObject runningStatus;
        private @Nullable Integer samplingRate;
        private @Nullable List<ExperimentTag> tags;
        private @Nullable List<ExperimentTreatmentObject> treatments;
        public Builder() {}
        public Builder(GetExperimentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.description = defaults.description;
    	      this.metricGoals = defaults.metricGoals;
    	      this.onlineAbConfig = defaults.onlineAbConfig;
    	      this.randomizationSalt = defaults.randomizationSalt;
    	      this.runningStatus = defaults.runningStatus;
    	      this.samplingRate = defaults.samplingRate;
    	      this.tags = defaults.tags;
    	      this.treatments = defaults.treatments;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder metricGoals(@Nullable List<ExperimentMetricGoalObject> metricGoals) {
            this.metricGoals = metricGoals;
            return this;
        }
        public Builder metricGoals(ExperimentMetricGoalObject... metricGoals) {
            return metricGoals(List.of(metricGoals));
        }
        @CustomType.Setter
        public Builder onlineAbConfig(@Nullable ExperimentOnlineAbConfigObject onlineAbConfig) {
            this.onlineAbConfig = onlineAbConfig;
            return this;
        }
        @CustomType.Setter
        public Builder randomizationSalt(@Nullable String randomizationSalt) {
            this.randomizationSalt = randomizationSalt;
            return this;
        }
        @CustomType.Setter
        public Builder runningStatus(@Nullable ExperimentRunningStatusObject runningStatus) {
            this.runningStatus = runningStatus;
            return this;
        }
        @CustomType.Setter
        public Builder samplingRate(@Nullable Integer samplingRate) {
            this.samplingRate = samplingRate;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<ExperimentTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(ExperimentTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder treatments(@Nullable List<ExperimentTreatmentObject> treatments) {
            this.treatments = treatments;
            return this;
        }
        public Builder treatments(ExperimentTreatmentObject... treatments) {
            return treatments(List.of(treatments));
        }
        public GetExperimentResult build() {
            final var o = new GetExperimentResult();
            o.arn = arn;
            o.description = description;
            o.metricGoals = metricGoals;
            o.onlineAbConfig = onlineAbConfig;
            o.randomizationSalt = randomizationSalt;
            o.runningStatus = runningStatus;
            o.samplingRate = samplingRate;
            o.tags = tags;
            o.treatments = treatments;
            return o;
        }
    }
}
