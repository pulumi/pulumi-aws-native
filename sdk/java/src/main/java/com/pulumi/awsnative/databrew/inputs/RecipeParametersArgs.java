// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.inputs.RecipeParametersInputPropertiesArgs;
import com.pulumi.awsnative.databrew.inputs.RecipeSecondaryInputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecipeParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecipeParametersArgs Empty = new RecipeParametersArgs();

    @Import(name="aggregateFunction")
    private @Nullable Output<String> aggregateFunction;

    public Optional<Output<String>> aggregateFunction() {
        return Optional.ofNullable(this.aggregateFunction);
    }

    @Import(name="base")
    private @Nullable Output<String> base;

    public Optional<Output<String>> base() {
        return Optional.ofNullable(this.base);
    }

    @Import(name="caseStatement")
    private @Nullable Output<String> caseStatement;

    public Optional<Output<String>> caseStatement() {
        return Optional.ofNullable(this.caseStatement);
    }

    @Import(name="categoryMap")
    private @Nullable Output<String> categoryMap;

    public Optional<Output<String>> categoryMap() {
        return Optional.ofNullable(this.categoryMap);
    }

    @Import(name="charsToRemove")
    private @Nullable Output<String> charsToRemove;

    public Optional<Output<String>> charsToRemove() {
        return Optional.ofNullable(this.charsToRemove);
    }

    @Import(name="collapseConsecutiveWhitespace")
    private @Nullable Output<String> collapseConsecutiveWhitespace;

    public Optional<Output<String>> collapseConsecutiveWhitespace() {
        return Optional.ofNullable(this.collapseConsecutiveWhitespace);
    }

    @Import(name="columnDataType")
    private @Nullable Output<String> columnDataType;

    public Optional<Output<String>> columnDataType() {
        return Optional.ofNullable(this.columnDataType);
    }

    @Import(name="columnRange")
    private @Nullable Output<String> columnRange;

    public Optional<Output<String>> columnRange() {
        return Optional.ofNullable(this.columnRange);
    }

    @Import(name="count")
    private @Nullable Output<String> count;

    public Optional<Output<String>> count() {
        return Optional.ofNullable(this.count);
    }

    @Import(name="customCharacters")
    private @Nullable Output<String> customCharacters;

    public Optional<Output<String>> customCharacters() {
        return Optional.ofNullable(this.customCharacters);
    }

    @Import(name="customStopWords")
    private @Nullable Output<String> customStopWords;

    public Optional<Output<String>> customStopWords() {
        return Optional.ofNullable(this.customStopWords);
    }

    @Import(name="customValue")
    private @Nullable Output<String> customValue;

    public Optional<Output<String>> customValue() {
        return Optional.ofNullable(this.customValue);
    }

    @Import(name="datasetsColumns")
    private @Nullable Output<String> datasetsColumns;

    public Optional<Output<String>> datasetsColumns() {
        return Optional.ofNullable(this.datasetsColumns);
    }

    @Import(name="dateAddValue")
    private @Nullable Output<String> dateAddValue;

    public Optional<Output<String>> dateAddValue() {
        return Optional.ofNullable(this.dateAddValue);
    }

    @Import(name="dateTimeFormat")
    private @Nullable Output<String> dateTimeFormat;

    public Optional<Output<String>> dateTimeFormat() {
        return Optional.ofNullable(this.dateTimeFormat);
    }

    @Import(name="dateTimeParameters")
    private @Nullable Output<String> dateTimeParameters;

    public Optional<Output<String>> dateTimeParameters() {
        return Optional.ofNullable(this.dateTimeParameters);
    }

    @Import(name="deleteOtherRows")
    private @Nullable Output<String> deleteOtherRows;

    public Optional<Output<String>> deleteOtherRows() {
        return Optional.ofNullable(this.deleteOtherRows);
    }

    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    @Import(name="endPattern")
    private @Nullable Output<String> endPattern;

    public Optional<Output<String>> endPattern() {
        return Optional.ofNullable(this.endPattern);
    }

    @Import(name="endPosition")
    private @Nullable Output<String> endPosition;

    public Optional<Output<String>> endPosition() {
        return Optional.ofNullable(this.endPosition);
    }

    @Import(name="endValue")
    private @Nullable Output<String> endValue;

    public Optional<Output<String>> endValue() {
        return Optional.ofNullable(this.endValue);
    }

    @Import(name="expandContractions")
    private @Nullable Output<String> expandContractions;

    public Optional<Output<String>> expandContractions() {
        return Optional.ofNullable(this.expandContractions);
    }

    @Import(name="exponent")
    private @Nullable Output<String> exponent;

    public Optional<Output<String>> exponent() {
        return Optional.ofNullable(this.exponent);
    }

    @Import(name="falseString")
    private @Nullable Output<String> falseString;

    public Optional<Output<String>> falseString() {
        return Optional.ofNullable(this.falseString);
    }

    @Import(name="groupByAggFunctionOptions")
    private @Nullable Output<String> groupByAggFunctionOptions;

    public Optional<Output<String>> groupByAggFunctionOptions() {
        return Optional.ofNullable(this.groupByAggFunctionOptions);
    }

    @Import(name="groupByColumns")
    private @Nullable Output<String> groupByColumns;

    public Optional<Output<String>> groupByColumns() {
        return Optional.ofNullable(this.groupByColumns);
    }

    @Import(name="hiddenColumns")
    private @Nullable Output<String> hiddenColumns;

    public Optional<Output<String>> hiddenColumns() {
        return Optional.ofNullable(this.hiddenColumns);
    }

    @Import(name="ignoreCase")
    private @Nullable Output<String> ignoreCase;

    public Optional<Output<String>> ignoreCase() {
        return Optional.ofNullable(this.ignoreCase);
    }

    @Import(name="includeInSplit")
    private @Nullable Output<String> includeInSplit;

    public Optional<Output<String>> includeInSplit() {
        return Optional.ofNullable(this.includeInSplit);
    }

    /**
     * Input
     * 
     */
    @Import(name="input")
    private @Nullable Output<RecipeParametersInputPropertiesArgs> input;

    /**
     * @return Input
     * 
     */
    public Optional<Output<RecipeParametersInputPropertiesArgs>> input() {
        return Optional.ofNullable(this.input);
    }

    @Import(name="interval")
    private @Nullable Output<String> interval;

    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    @Import(name="isText")
    private @Nullable Output<String> isText;

    public Optional<Output<String>> isText() {
        return Optional.ofNullable(this.isText);
    }

    @Import(name="joinKeys")
    private @Nullable Output<String> joinKeys;

    public Optional<Output<String>> joinKeys() {
        return Optional.ofNullable(this.joinKeys);
    }

    @Import(name="joinType")
    private @Nullable Output<String> joinType;

    public Optional<Output<String>> joinType() {
        return Optional.ofNullable(this.joinType);
    }

    @Import(name="leftColumns")
    private @Nullable Output<String> leftColumns;

    public Optional<Output<String>> leftColumns() {
        return Optional.ofNullable(this.leftColumns);
    }

    @Import(name="limit")
    private @Nullable Output<String> limit;

    public Optional<Output<String>> limit() {
        return Optional.ofNullable(this.limit);
    }

    @Import(name="lowerBound")
    private @Nullable Output<String> lowerBound;

    public Optional<Output<String>> lowerBound() {
        return Optional.ofNullable(this.lowerBound);
    }

    @Import(name="mapType")
    private @Nullable Output<String> mapType;

    public Optional<Output<String>> mapType() {
        return Optional.ofNullable(this.mapType);
    }

    @Import(name="modeType")
    private @Nullable Output<String> modeType;

    public Optional<Output<String>> modeType() {
        return Optional.ofNullable(this.modeType);
    }

    @Import(name="multiLine")
    private @Nullable Output<Boolean> multiLine;

    public Optional<Output<Boolean>> multiLine() {
        return Optional.ofNullable(this.multiLine);
    }

    @Import(name="numRows")
    private @Nullable Output<String> numRows;

    public Optional<Output<String>> numRows() {
        return Optional.ofNullable(this.numRows);
    }

    @Import(name="numRowsAfter")
    private @Nullable Output<String> numRowsAfter;

    public Optional<Output<String>> numRowsAfter() {
        return Optional.ofNullable(this.numRowsAfter);
    }

    @Import(name="numRowsBefore")
    private @Nullable Output<String> numRowsBefore;

    public Optional<Output<String>> numRowsBefore() {
        return Optional.ofNullable(this.numRowsBefore);
    }

    @Import(name="orderByColumn")
    private @Nullable Output<String> orderByColumn;

    public Optional<Output<String>> orderByColumn() {
        return Optional.ofNullable(this.orderByColumn);
    }

    @Import(name="orderByColumns")
    private @Nullable Output<String> orderByColumns;

    public Optional<Output<String>> orderByColumns() {
        return Optional.ofNullable(this.orderByColumns);
    }

    @Import(name="other")
    private @Nullable Output<String> other;

    public Optional<Output<String>> other() {
        return Optional.ofNullable(this.other);
    }

    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    @Import(name="patternOption1")
    private @Nullable Output<String> patternOption1;

    public Optional<Output<String>> patternOption1() {
        return Optional.ofNullable(this.patternOption1);
    }

    @Import(name="patternOption2")
    private @Nullable Output<String> patternOption2;

    public Optional<Output<String>> patternOption2() {
        return Optional.ofNullable(this.patternOption2);
    }

    @Import(name="patternOptions")
    private @Nullable Output<String> patternOptions;

    public Optional<Output<String>> patternOptions() {
        return Optional.ofNullable(this.patternOptions);
    }

    @Import(name="period")
    private @Nullable Output<String> period;

    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    @Import(name="position")
    private @Nullable Output<String> position;

    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    @Import(name="removeAllPunctuation")
    private @Nullable Output<String> removeAllPunctuation;

    public Optional<Output<String>> removeAllPunctuation() {
        return Optional.ofNullable(this.removeAllPunctuation);
    }

    @Import(name="removeAllQuotes")
    private @Nullable Output<String> removeAllQuotes;

    public Optional<Output<String>> removeAllQuotes() {
        return Optional.ofNullable(this.removeAllQuotes);
    }

    @Import(name="removeAllWhitespace")
    private @Nullable Output<String> removeAllWhitespace;

    public Optional<Output<String>> removeAllWhitespace() {
        return Optional.ofNullable(this.removeAllWhitespace);
    }

    @Import(name="removeCustomCharacters")
    private @Nullable Output<String> removeCustomCharacters;

    public Optional<Output<String>> removeCustomCharacters() {
        return Optional.ofNullable(this.removeCustomCharacters);
    }

    @Import(name="removeCustomValue")
    private @Nullable Output<String> removeCustomValue;

    public Optional<Output<String>> removeCustomValue() {
        return Optional.ofNullable(this.removeCustomValue);
    }

    @Import(name="removeLeadingAndTrailingPunctuation")
    private @Nullable Output<String> removeLeadingAndTrailingPunctuation;

    public Optional<Output<String>> removeLeadingAndTrailingPunctuation() {
        return Optional.ofNullable(this.removeLeadingAndTrailingPunctuation);
    }

    @Import(name="removeLeadingAndTrailingQuotes")
    private @Nullable Output<String> removeLeadingAndTrailingQuotes;

    public Optional<Output<String>> removeLeadingAndTrailingQuotes() {
        return Optional.ofNullable(this.removeLeadingAndTrailingQuotes);
    }

    @Import(name="removeLeadingAndTrailingWhitespace")
    private @Nullable Output<String> removeLeadingAndTrailingWhitespace;

    public Optional<Output<String>> removeLeadingAndTrailingWhitespace() {
        return Optional.ofNullable(this.removeLeadingAndTrailingWhitespace);
    }

    @Import(name="removeLetters")
    private @Nullable Output<String> removeLetters;

    public Optional<Output<String>> removeLetters() {
        return Optional.ofNullable(this.removeLetters);
    }

    @Import(name="removeNumbers")
    private @Nullable Output<String> removeNumbers;

    public Optional<Output<String>> removeNumbers() {
        return Optional.ofNullable(this.removeNumbers);
    }

    @Import(name="removeSourceColumn")
    private @Nullable Output<String> removeSourceColumn;

    public Optional<Output<String>> removeSourceColumn() {
        return Optional.ofNullable(this.removeSourceColumn);
    }

    @Import(name="removeSpecialCharacters")
    private @Nullable Output<String> removeSpecialCharacters;

    public Optional<Output<String>> removeSpecialCharacters() {
        return Optional.ofNullable(this.removeSpecialCharacters);
    }

    @Import(name="rightColumns")
    private @Nullable Output<String> rightColumns;

    public Optional<Output<String>> rightColumns() {
        return Optional.ofNullable(this.rightColumns);
    }

    @Import(name="sampleSize")
    private @Nullable Output<String> sampleSize;

    public Optional<Output<String>> sampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }

    @Import(name="sampleType")
    private @Nullable Output<String> sampleType;

    public Optional<Output<String>> sampleType() {
        return Optional.ofNullable(this.sampleType);
    }

    @Import(name="secondInput")
    private @Nullable Output<String> secondInput;

    public Optional<Output<String>> secondInput() {
        return Optional.ofNullable(this.secondInput);
    }

    @Import(name="secondaryInputs")
    private @Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs;

    public Optional<Output<List<RecipeSecondaryInputArgs>>> secondaryInputs() {
        return Optional.ofNullable(this.secondaryInputs);
    }

    @Import(name="sheetIndexes")
    private @Nullable Output<List<Integer>> sheetIndexes;

    public Optional<Output<List<Integer>>> sheetIndexes() {
        return Optional.ofNullable(this.sheetIndexes);
    }

    @Import(name="sheetNames")
    private @Nullable Output<List<String>> sheetNames;

    public Optional<Output<List<String>>> sheetNames() {
        return Optional.ofNullable(this.sheetNames);
    }

    @Import(name="sourceColumn")
    private @Nullable Output<String> sourceColumn;

    public Optional<Output<String>> sourceColumn() {
        return Optional.ofNullable(this.sourceColumn);
    }

    @Import(name="sourceColumn1")
    private @Nullable Output<String> sourceColumn1;

    public Optional<Output<String>> sourceColumn1() {
        return Optional.ofNullable(this.sourceColumn1);
    }

    @Import(name="sourceColumn2")
    private @Nullable Output<String> sourceColumn2;

    public Optional<Output<String>> sourceColumn2() {
        return Optional.ofNullable(this.sourceColumn2);
    }

    @Import(name="sourceColumns")
    private @Nullable Output<String> sourceColumns;

    public Optional<Output<String>> sourceColumns() {
        return Optional.ofNullable(this.sourceColumns);
    }

    @Import(name="startColumnIndex")
    private @Nullable Output<String> startColumnIndex;

    public Optional<Output<String>> startColumnIndex() {
        return Optional.ofNullable(this.startColumnIndex);
    }

    @Import(name="startPattern")
    private @Nullable Output<String> startPattern;

    public Optional<Output<String>> startPattern() {
        return Optional.ofNullable(this.startPattern);
    }

    @Import(name="startPosition")
    private @Nullable Output<String> startPosition;

    public Optional<Output<String>> startPosition() {
        return Optional.ofNullable(this.startPosition);
    }

    @Import(name="startValue")
    private @Nullable Output<String> startValue;

    public Optional<Output<String>> startValue() {
        return Optional.ofNullable(this.startValue);
    }

    @Import(name="stemmingMode")
    private @Nullable Output<String> stemmingMode;

    public Optional<Output<String>> stemmingMode() {
        return Optional.ofNullable(this.stemmingMode);
    }

    @Import(name="stepCount")
    private @Nullable Output<String> stepCount;

    public Optional<Output<String>> stepCount() {
        return Optional.ofNullable(this.stepCount);
    }

    @Import(name="stepIndex")
    private @Nullable Output<String> stepIndex;

    public Optional<Output<String>> stepIndex() {
        return Optional.ofNullable(this.stepIndex);
    }

    @Import(name="stopWordsMode")
    private @Nullable Output<String> stopWordsMode;

    public Optional<Output<String>> stopWordsMode() {
        return Optional.ofNullable(this.stopWordsMode);
    }

    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    @Import(name="targetColumn")
    private @Nullable Output<String> targetColumn;

    public Optional<Output<String>> targetColumn() {
        return Optional.ofNullable(this.targetColumn);
    }

    @Import(name="targetColumnNames")
    private @Nullable Output<String> targetColumnNames;

    public Optional<Output<String>> targetColumnNames() {
        return Optional.ofNullable(this.targetColumnNames);
    }

    @Import(name="targetDateFormat")
    private @Nullable Output<String> targetDateFormat;

    public Optional<Output<String>> targetDateFormat() {
        return Optional.ofNullable(this.targetDateFormat);
    }

    @Import(name="targetIndex")
    private @Nullable Output<String> targetIndex;

    public Optional<Output<String>> targetIndex() {
        return Optional.ofNullable(this.targetIndex);
    }

    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    @Import(name="tokenizerPattern")
    private @Nullable Output<String> tokenizerPattern;

    public Optional<Output<String>> tokenizerPattern() {
        return Optional.ofNullable(this.tokenizerPattern);
    }

    @Import(name="trueString")
    private @Nullable Output<String> trueString;

    public Optional<Output<String>> trueString() {
        return Optional.ofNullable(this.trueString);
    }

    @Import(name="udfLang")
    private @Nullable Output<String> udfLang;

    public Optional<Output<String>> udfLang() {
        return Optional.ofNullable(this.udfLang);
    }

    @Import(name="units")
    private @Nullable Output<String> units;

    public Optional<Output<String>> units() {
        return Optional.ofNullable(this.units);
    }

    @Import(name="unpivotColumn")
    private @Nullable Output<String> unpivotColumn;

    public Optional<Output<String>> unpivotColumn() {
        return Optional.ofNullable(this.unpivotColumn);
    }

    @Import(name="upperBound")
    private @Nullable Output<String> upperBound;

    public Optional<Output<String>> upperBound() {
        return Optional.ofNullable(this.upperBound);
    }

    @Import(name="useNewDataFrame")
    private @Nullable Output<String> useNewDataFrame;

    public Optional<Output<String>> useNewDataFrame() {
        return Optional.ofNullable(this.useNewDataFrame);
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="value1")
    private @Nullable Output<String> value1;

    public Optional<Output<String>> value1() {
        return Optional.ofNullable(this.value1);
    }

    @Import(name="value2")
    private @Nullable Output<String> value2;

    public Optional<Output<String>> value2() {
        return Optional.ofNullable(this.value2);
    }

    @Import(name="valueColumn")
    private @Nullable Output<String> valueColumn;

    public Optional<Output<String>> valueColumn() {
        return Optional.ofNullable(this.valueColumn);
    }

    @Import(name="viewFrame")
    private @Nullable Output<String> viewFrame;

    public Optional<Output<String>> viewFrame() {
        return Optional.ofNullable(this.viewFrame);
    }

    private RecipeParametersArgs() {}

    private RecipeParametersArgs(RecipeParametersArgs $) {
        this.aggregateFunction = $.aggregateFunction;
        this.base = $.base;
        this.caseStatement = $.caseStatement;
        this.categoryMap = $.categoryMap;
        this.charsToRemove = $.charsToRemove;
        this.collapseConsecutiveWhitespace = $.collapseConsecutiveWhitespace;
        this.columnDataType = $.columnDataType;
        this.columnRange = $.columnRange;
        this.count = $.count;
        this.customCharacters = $.customCharacters;
        this.customStopWords = $.customStopWords;
        this.customValue = $.customValue;
        this.datasetsColumns = $.datasetsColumns;
        this.dateAddValue = $.dateAddValue;
        this.dateTimeFormat = $.dateTimeFormat;
        this.dateTimeParameters = $.dateTimeParameters;
        this.deleteOtherRows = $.deleteOtherRows;
        this.delimiter = $.delimiter;
        this.endPattern = $.endPattern;
        this.endPosition = $.endPosition;
        this.endValue = $.endValue;
        this.expandContractions = $.expandContractions;
        this.exponent = $.exponent;
        this.falseString = $.falseString;
        this.groupByAggFunctionOptions = $.groupByAggFunctionOptions;
        this.groupByColumns = $.groupByColumns;
        this.hiddenColumns = $.hiddenColumns;
        this.ignoreCase = $.ignoreCase;
        this.includeInSplit = $.includeInSplit;
        this.input = $.input;
        this.interval = $.interval;
        this.isText = $.isText;
        this.joinKeys = $.joinKeys;
        this.joinType = $.joinType;
        this.leftColumns = $.leftColumns;
        this.limit = $.limit;
        this.lowerBound = $.lowerBound;
        this.mapType = $.mapType;
        this.modeType = $.modeType;
        this.multiLine = $.multiLine;
        this.numRows = $.numRows;
        this.numRowsAfter = $.numRowsAfter;
        this.numRowsBefore = $.numRowsBefore;
        this.orderByColumn = $.orderByColumn;
        this.orderByColumns = $.orderByColumns;
        this.other = $.other;
        this.pattern = $.pattern;
        this.patternOption1 = $.patternOption1;
        this.patternOption2 = $.patternOption2;
        this.patternOptions = $.patternOptions;
        this.period = $.period;
        this.position = $.position;
        this.removeAllPunctuation = $.removeAllPunctuation;
        this.removeAllQuotes = $.removeAllQuotes;
        this.removeAllWhitespace = $.removeAllWhitespace;
        this.removeCustomCharacters = $.removeCustomCharacters;
        this.removeCustomValue = $.removeCustomValue;
        this.removeLeadingAndTrailingPunctuation = $.removeLeadingAndTrailingPunctuation;
        this.removeLeadingAndTrailingQuotes = $.removeLeadingAndTrailingQuotes;
        this.removeLeadingAndTrailingWhitespace = $.removeLeadingAndTrailingWhitespace;
        this.removeLetters = $.removeLetters;
        this.removeNumbers = $.removeNumbers;
        this.removeSourceColumn = $.removeSourceColumn;
        this.removeSpecialCharacters = $.removeSpecialCharacters;
        this.rightColumns = $.rightColumns;
        this.sampleSize = $.sampleSize;
        this.sampleType = $.sampleType;
        this.secondInput = $.secondInput;
        this.secondaryInputs = $.secondaryInputs;
        this.sheetIndexes = $.sheetIndexes;
        this.sheetNames = $.sheetNames;
        this.sourceColumn = $.sourceColumn;
        this.sourceColumn1 = $.sourceColumn1;
        this.sourceColumn2 = $.sourceColumn2;
        this.sourceColumns = $.sourceColumns;
        this.startColumnIndex = $.startColumnIndex;
        this.startPattern = $.startPattern;
        this.startPosition = $.startPosition;
        this.startValue = $.startValue;
        this.stemmingMode = $.stemmingMode;
        this.stepCount = $.stepCount;
        this.stepIndex = $.stepIndex;
        this.stopWordsMode = $.stopWordsMode;
        this.strategy = $.strategy;
        this.targetColumn = $.targetColumn;
        this.targetColumnNames = $.targetColumnNames;
        this.targetDateFormat = $.targetDateFormat;
        this.targetIndex = $.targetIndex;
        this.timeZone = $.timeZone;
        this.tokenizerPattern = $.tokenizerPattern;
        this.trueString = $.trueString;
        this.udfLang = $.udfLang;
        this.units = $.units;
        this.unpivotColumn = $.unpivotColumn;
        this.upperBound = $.upperBound;
        this.useNewDataFrame = $.useNewDataFrame;
        this.value = $.value;
        this.value1 = $.value1;
        this.value2 = $.value2;
        this.valueColumn = $.valueColumn;
        this.viewFrame = $.viewFrame;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecipeParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecipeParametersArgs $;

        public Builder() {
            $ = new RecipeParametersArgs();
        }

        public Builder(RecipeParametersArgs defaults) {
            $ = new RecipeParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregateFunction(@Nullable Output<String> aggregateFunction) {
            $.aggregateFunction = aggregateFunction;
            return this;
        }

        public Builder aggregateFunction(String aggregateFunction) {
            return aggregateFunction(Output.of(aggregateFunction));
        }

        public Builder base(@Nullable Output<String> base) {
            $.base = base;
            return this;
        }

        public Builder base(String base) {
            return base(Output.of(base));
        }

        public Builder caseStatement(@Nullable Output<String> caseStatement) {
            $.caseStatement = caseStatement;
            return this;
        }

        public Builder caseStatement(String caseStatement) {
            return caseStatement(Output.of(caseStatement));
        }

        public Builder categoryMap(@Nullable Output<String> categoryMap) {
            $.categoryMap = categoryMap;
            return this;
        }

        public Builder categoryMap(String categoryMap) {
            return categoryMap(Output.of(categoryMap));
        }

        public Builder charsToRemove(@Nullable Output<String> charsToRemove) {
            $.charsToRemove = charsToRemove;
            return this;
        }

        public Builder charsToRemove(String charsToRemove) {
            return charsToRemove(Output.of(charsToRemove));
        }

        public Builder collapseConsecutiveWhitespace(@Nullable Output<String> collapseConsecutiveWhitespace) {
            $.collapseConsecutiveWhitespace = collapseConsecutiveWhitespace;
            return this;
        }

        public Builder collapseConsecutiveWhitespace(String collapseConsecutiveWhitespace) {
            return collapseConsecutiveWhitespace(Output.of(collapseConsecutiveWhitespace));
        }

        public Builder columnDataType(@Nullable Output<String> columnDataType) {
            $.columnDataType = columnDataType;
            return this;
        }

        public Builder columnDataType(String columnDataType) {
            return columnDataType(Output.of(columnDataType));
        }

        public Builder columnRange(@Nullable Output<String> columnRange) {
            $.columnRange = columnRange;
            return this;
        }

        public Builder columnRange(String columnRange) {
            return columnRange(Output.of(columnRange));
        }

        public Builder count(@Nullable Output<String> count) {
            $.count = count;
            return this;
        }

        public Builder count(String count) {
            return count(Output.of(count));
        }

        public Builder customCharacters(@Nullable Output<String> customCharacters) {
            $.customCharacters = customCharacters;
            return this;
        }

        public Builder customCharacters(String customCharacters) {
            return customCharacters(Output.of(customCharacters));
        }

        public Builder customStopWords(@Nullable Output<String> customStopWords) {
            $.customStopWords = customStopWords;
            return this;
        }

        public Builder customStopWords(String customStopWords) {
            return customStopWords(Output.of(customStopWords));
        }

        public Builder customValue(@Nullable Output<String> customValue) {
            $.customValue = customValue;
            return this;
        }

        public Builder customValue(String customValue) {
            return customValue(Output.of(customValue));
        }

        public Builder datasetsColumns(@Nullable Output<String> datasetsColumns) {
            $.datasetsColumns = datasetsColumns;
            return this;
        }

        public Builder datasetsColumns(String datasetsColumns) {
            return datasetsColumns(Output.of(datasetsColumns));
        }

        public Builder dateAddValue(@Nullable Output<String> dateAddValue) {
            $.dateAddValue = dateAddValue;
            return this;
        }

        public Builder dateAddValue(String dateAddValue) {
            return dateAddValue(Output.of(dateAddValue));
        }

        public Builder dateTimeFormat(@Nullable Output<String> dateTimeFormat) {
            $.dateTimeFormat = dateTimeFormat;
            return this;
        }

        public Builder dateTimeFormat(String dateTimeFormat) {
            return dateTimeFormat(Output.of(dateTimeFormat));
        }

        public Builder dateTimeParameters(@Nullable Output<String> dateTimeParameters) {
            $.dateTimeParameters = dateTimeParameters;
            return this;
        }

        public Builder dateTimeParameters(String dateTimeParameters) {
            return dateTimeParameters(Output.of(dateTimeParameters));
        }

        public Builder deleteOtherRows(@Nullable Output<String> deleteOtherRows) {
            $.deleteOtherRows = deleteOtherRows;
            return this;
        }

        public Builder deleteOtherRows(String deleteOtherRows) {
            return deleteOtherRows(Output.of(deleteOtherRows));
        }

        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        public Builder endPattern(@Nullable Output<String> endPattern) {
            $.endPattern = endPattern;
            return this;
        }

        public Builder endPattern(String endPattern) {
            return endPattern(Output.of(endPattern));
        }

        public Builder endPosition(@Nullable Output<String> endPosition) {
            $.endPosition = endPosition;
            return this;
        }

        public Builder endPosition(String endPosition) {
            return endPosition(Output.of(endPosition));
        }

        public Builder endValue(@Nullable Output<String> endValue) {
            $.endValue = endValue;
            return this;
        }

        public Builder endValue(String endValue) {
            return endValue(Output.of(endValue));
        }

        public Builder expandContractions(@Nullable Output<String> expandContractions) {
            $.expandContractions = expandContractions;
            return this;
        }

        public Builder expandContractions(String expandContractions) {
            return expandContractions(Output.of(expandContractions));
        }

        public Builder exponent(@Nullable Output<String> exponent) {
            $.exponent = exponent;
            return this;
        }

        public Builder exponent(String exponent) {
            return exponent(Output.of(exponent));
        }

        public Builder falseString(@Nullable Output<String> falseString) {
            $.falseString = falseString;
            return this;
        }

        public Builder falseString(String falseString) {
            return falseString(Output.of(falseString));
        }

        public Builder groupByAggFunctionOptions(@Nullable Output<String> groupByAggFunctionOptions) {
            $.groupByAggFunctionOptions = groupByAggFunctionOptions;
            return this;
        }

        public Builder groupByAggFunctionOptions(String groupByAggFunctionOptions) {
            return groupByAggFunctionOptions(Output.of(groupByAggFunctionOptions));
        }

        public Builder groupByColumns(@Nullable Output<String> groupByColumns) {
            $.groupByColumns = groupByColumns;
            return this;
        }

        public Builder groupByColumns(String groupByColumns) {
            return groupByColumns(Output.of(groupByColumns));
        }

        public Builder hiddenColumns(@Nullable Output<String> hiddenColumns) {
            $.hiddenColumns = hiddenColumns;
            return this;
        }

        public Builder hiddenColumns(String hiddenColumns) {
            return hiddenColumns(Output.of(hiddenColumns));
        }

        public Builder ignoreCase(@Nullable Output<String> ignoreCase) {
            $.ignoreCase = ignoreCase;
            return this;
        }

        public Builder ignoreCase(String ignoreCase) {
            return ignoreCase(Output.of(ignoreCase));
        }

        public Builder includeInSplit(@Nullable Output<String> includeInSplit) {
            $.includeInSplit = includeInSplit;
            return this;
        }

        public Builder includeInSplit(String includeInSplit) {
            return includeInSplit(Output.of(includeInSplit));
        }

        /**
         * @param input Input
         * 
         * @return builder
         * 
         */
        public Builder input(@Nullable Output<RecipeParametersInputPropertiesArgs> input) {
            $.input = input;
            return this;
        }

        /**
         * @param input Input
         * 
         * @return builder
         * 
         */
        public Builder input(RecipeParametersInputPropertiesArgs input) {
            return input(Output.of(input));
        }

        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        public Builder isText(@Nullable Output<String> isText) {
            $.isText = isText;
            return this;
        }

        public Builder isText(String isText) {
            return isText(Output.of(isText));
        }

        public Builder joinKeys(@Nullable Output<String> joinKeys) {
            $.joinKeys = joinKeys;
            return this;
        }

        public Builder joinKeys(String joinKeys) {
            return joinKeys(Output.of(joinKeys));
        }

        public Builder joinType(@Nullable Output<String> joinType) {
            $.joinType = joinType;
            return this;
        }

        public Builder joinType(String joinType) {
            return joinType(Output.of(joinType));
        }

        public Builder leftColumns(@Nullable Output<String> leftColumns) {
            $.leftColumns = leftColumns;
            return this;
        }

        public Builder leftColumns(String leftColumns) {
            return leftColumns(Output.of(leftColumns));
        }

        public Builder limit(@Nullable Output<String> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(String limit) {
            return limit(Output.of(limit));
        }

        public Builder lowerBound(@Nullable Output<String> lowerBound) {
            $.lowerBound = lowerBound;
            return this;
        }

        public Builder lowerBound(String lowerBound) {
            return lowerBound(Output.of(lowerBound));
        }

        public Builder mapType(@Nullable Output<String> mapType) {
            $.mapType = mapType;
            return this;
        }

        public Builder mapType(String mapType) {
            return mapType(Output.of(mapType));
        }

        public Builder modeType(@Nullable Output<String> modeType) {
            $.modeType = modeType;
            return this;
        }

        public Builder modeType(String modeType) {
            return modeType(Output.of(modeType));
        }

        public Builder multiLine(@Nullable Output<Boolean> multiLine) {
            $.multiLine = multiLine;
            return this;
        }

        public Builder multiLine(Boolean multiLine) {
            return multiLine(Output.of(multiLine));
        }

        public Builder numRows(@Nullable Output<String> numRows) {
            $.numRows = numRows;
            return this;
        }

        public Builder numRows(String numRows) {
            return numRows(Output.of(numRows));
        }

        public Builder numRowsAfter(@Nullable Output<String> numRowsAfter) {
            $.numRowsAfter = numRowsAfter;
            return this;
        }

        public Builder numRowsAfter(String numRowsAfter) {
            return numRowsAfter(Output.of(numRowsAfter));
        }

        public Builder numRowsBefore(@Nullable Output<String> numRowsBefore) {
            $.numRowsBefore = numRowsBefore;
            return this;
        }

        public Builder numRowsBefore(String numRowsBefore) {
            return numRowsBefore(Output.of(numRowsBefore));
        }

        public Builder orderByColumn(@Nullable Output<String> orderByColumn) {
            $.orderByColumn = orderByColumn;
            return this;
        }

        public Builder orderByColumn(String orderByColumn) {
            return orderByColumn(Output.of(orderByColumn));
        }

        public Builder orderByColumns(@Nullable Output<String> orderByColumns) {
            $.orderByColumns = orderByColumns;
            return this;
        }

        public Builder orderByColumns(String orderByColumns) {
            return orderByColumns(Output.of(orderByColumns));
        }

        public Builder other(@Nullable Output<String> other) {
            $.other = other;
            return this;
        }

        public Builder other(String other) {
            return other(Output.of(other));
        }

        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        public Builder patternOption1(@Nullable Output<String> patternOption1) {
            $.patternOption1 = patternOption1;
            return this;
        }

        public Builder patternOption1(String patternOption1) {
            return patternOption1(Output.of(patternOption1));
        }

        public Builder patternOption2(@Nullable Output<String> patternOption2) {
            $.patternOption2 = patternOption2;
            return this;
        }

        public Builder patternOption2(String patternOption2) {
            return patternOption2(Output.of(patternOption2));
        }

        public Builder patternOptions(@Nullable Output<String> patternOptions) {
            $.patternOptions = patternOptions;
            return this;
        }

        public Builder patternOptions(String patternOptions) {
            return patternOptions(Output.of(patternOptions));
        }

        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        public Builder period(String period) {
            return period(Output.of(period));
        }

        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        public Builder position(String position) {
            return position(Output.of(position));
        }

        public Builder removeAllPunctuation(@Nullable Output<String> removeAllPunctuation) {
            $.removeAllPunctuation = removeAllPunctuation;
            return this;
        }

        public Builder removeAllPunctuation(String removeAllPunctuation) {
            return removeAllPunctuation(Output.of(removeAllPunctuation));
        }

        public Builder removeAllQuotes(@Nullable Output<String> removeAllQuotes) {
            $.removeAllQuotes = removeAllQuotes;
            return this;
        }

        public Builder removeAllQuotes(String removeAllQuotes) {
            return removeAllQuotes(Output.of(removeAllQuotes));
        }

        public Builder removeAllWhitespace(@Nullable Output<String> removeAllWhitespace) {
            $.removeAllWhitespace = removeAllWhitespace;
            return this;
        }

        public Builder removeAllWhitespace(String removeAllWhitespace) {
            return removeAllWhitespace(Output.of(removeAllWhitespace));
        }

        public Builder removeCustomCharacters(@Nullable Output<String> removeCustomCharacters) {
            $.removeCustomCharacters = removeCustomCharacters;
            return this;
        }

        public Builder removeCustomCharacters(String removeCustomCharacters) {
            return removeCustomCharacters(Output.of(removeCustomCharacters));
        }

        public Builder removeCustomValue(@Nullable Output<String> removeCustomValue) {
            $.removeCustomValue = removeCustomValue;
            return this;
        }

        public Builder removeCustomValue(String removeCustomValue) {
            return removeCustomValue(Output.of(removeCustomValue));
        }

        public Builder removeLeadingAndTrailingPunctuation(@Nullable Output<String> removeLeadingAndTrailingPunctuation) {
            $.removeLeadingAndTrailingPunctuation = removeLeadingAndTrailingPunctuation;
            return this;
        }

        public Builder removeLeadingAndTrailingPunctuation(String removeLeadingAndTrailingPunctuation) {
            return removeLeadingAndTrailingPunctuation(Output.of(removeLeadingAndTrailingPunctuation));
        }

        public Builder removeLeadingAndTrailingQuotes(@Nullable Output<String> removeLeadingAndTrailingQuotes) {
            $.removeLeadingAndTrailingQuotes = removeLeadingAndTrailingQuotes;
            return this;
        }

        public Builder removeLeadingAndTrailingQuotes(String removeLeadingAndTrailingQuotes) {
            return removeLeadingAndTrailingQuotes(Output.of(removeLeadingAndTrailingQuotes));
        }

        public Builder removeLeadingAndTrailingWhitespace(@Nullable Output<String> removeLeadingAndTrailingWhitespace) {
            $.removeLeadingAndTrailingWhitespace = removeLeadingAndTrailingWhitespace;
            return this;
        }

        public Builder removeLeadingAndTrailingWhitespace(String removeLeadingAndTrailingWhitespace) {
            return removeLeadingAndTrailingWhitespace(Output.of(removeLeadingAndTrailingWhitespace));
        }

        public Builder removeLetters(@Nullable Output<String> removeLetters) {
            $.removeLetters = removeLetters;
            return this;
        }

        public Builder removeLetters(String removeLetters) {
            return removeLetters(Output.of(removeLetters));
        }

        public Builder removeNumbers(@Nullable Output<String> removeNumbers) {
            $.removeNumbers = removeNumbers;
            return this;
        }

        public Builder removeNumbers(String removeNumbers) {
            return removeNumbers(Output.of(removeNumbers));
        }

        public Builder removeSourceColumn(@Nullable Output<String> removeSourceColumn) {
            $.removeSourceColumn = removeSourceColumn;
            return this;
        }

        public Builder removeSourceColumn(String removeSourceColumn) {
            return removeSourceColumn(Output.of(removeSourceColumn));
        }

        public Builder removeSpecialCharacters(@Nullable Output<String> removeSpecialCharacters) {
            $.removeSpecialCharacters = removeSpecialCharacters;
            return this;
        }

        public Builder removeSpecialCharacters(String removeSpecialCharacters) {
            return removeSpecialCharacters(Output.of(removeSpecialCharacters));
        }

        public Builder rightColumns(@Nullable Output<String> rightColumns) {
            $.rightColumns = rightColumns;
            return this;
        }

        public Builder rightColumns(String rightColumns) {
            return rightColumns(Output.of(rightColumns));
        }

        public Builder sampleSize(@Nullable Output<String> sampleSize) {
            $.sampleSize = sampleSize;
            return this;
        }

        public Builder sampleSize(String sampleSize) {
            return sampleSize(Output.of(sampleSize));
        }

        public Builder sampleType(@Nullable Output<String> sampleType) {
            $.sampleType = sampleType;
            return this;
        }

        public Builder sampleType(String sampleType) {
            return sampleType(Output.of(sampleType));
        }

        public Builder secondInput(@Nullable Output<String> secondInput) {
            $.secondInput = secondInput;
            return this;
        }

        public Builder secondInput(String secondInput) {
            return secondInput(Output.of(secondInput));
        }

        public Builder secondaryInputs(@Nullable Output<List<RecipeSecondaryInputArgs>> secondaryInputs) {
            $.secondaryInputs = secondaryInputs;
            return this;
        }

        public Builder secondaryInputs(List<RecipeSecondaryInputArgs> secondaryInputs) {
            return secondaryInputs(Output.of(secondaryInputs));
        }

        public Builder secondaryInputs(RecipeSecondaryInputArgs... secondaryInputs) {
            return secondaryInputs(List.of(secondaryInputs));
        }

        public Builder sheetIndexes(@Nullable Output<List<Integer>> sheetIndexes) {
            $.sheetIndexes = sheetIndexes;
            return this;
        }

        public Builder sheetIndexes(List<Integer> sheetIndexes) {
            return sheetIndexes(Output.of(sheetIndexes));
        }

        public Builder sheetIndexes(Integer... sheetIndexes) {
            return sheetIndexes(List.of(sheetIndexes));
        }

        public Builder sheetNames(@Nullable Output<List<String>> sheetNames) {
            $.sheetNames = sheetNames;
            return this;
        }

        public Builder sheetNames(List<String> sheetNames) {
            return sheetNames(Output.of(sheetNames));
        }

        public Builder sheetNames(String... sheetNames) {
            return sheetNames(List.of(sheetNames));
        }

        public Builder sourceColumn(@Nullable Output<String> sourceColumn) {
            $.sourceColumn = sourceColumn;
            return this;
        }

        public Builder sourceColumn(String sourceColumn) {
            return sourceColumn(Output.of(sourceColumn));
        }

        public Builder sourceColumn1(@Nullable Output<String> sourceColumn1) {
            $.sourceColumn1 = sourceColumn1;
            return this;
        }

        public Builder sourceColumn1(String sourceColumn1) {
            return sourceColumn1(Output.of(sourceColumn1));
        }

        public Builder sourceColumn2(@Nullable Output<String> sourceColumn2) {
            $.sourceColumn2 = sourceColumn2;
            return this;
        }

        public Builder sourceColumn2(String sourceColumn2) {
            return sourceColumn2(Output.of(sourceColumn2));
        }

        public Builder sourceColumns(@Nullable Output<String> sourceColumns) {
            $.sourceColumns = sourceColumns;
            return this;
        }

        public Builder sourceColumns(String sourceColumns) {
            return sourceColumns(Output.of(sourceColumns));
        }

        public Builder startColumnIndex(@Nullable Output<String> startColumnIndex) {
            $.startColumnIndex = startColumnIndex;
            return this;
        }

        public Builder startColumnIndex(String startColumnIndex) {
            return startColumnIndex(Output.of(startColumnIndex));
        }

        public Builder startPattern(@Nullable Output<String> startPattern) {
            $.startPattern = startPattern;
            return this;
        }

        public Builder startPattern(String startPattern) {
            return startPattern(Output.of(startPattern));
        }

        public Builder startPosition(@Nullable Output<String> startPosition) {
            $.startPosition = startPosition;
            return this;
        }

        public Builder startPosition(String startPosition) {
            return startPosition(Output.of(startPosition));
        }

        public Builder startValue(@Nullable Output<String> startValue) {
            $.startValue = startValue;
            return this;
        }

        public Builder startValue(String startValue) {
            return startValue(Output.of(startValue));
        }

        public Builder stemmingMode(@Nullable Output<String> stemmingMode) {
            $.stemmingMode = stemmingMode;
            return this;
        }

        public Builder stemmingMode(String stemmingMode) {
            return stemmingMode(Output.of(stemmingMode));
        }

        public Builder stepCount(@Nullable Output<String> stepCount) {
            $.stepCount = stepCount;
            return this;
        }

        public Builder stepCount(String stepCount) {
            return stepCount(Output.of(stepCount));
        }

        public Builder stepIndex(@Nullable Output<String> stepIndex) {
            $.stepIndex = stepIndex;
            return this;
        }

        public Builder stepIndex(String stepIndex) {
            return stepIndex(Output.of(stepIndex));
        }

        public Builder stopWordsMode(@Nullable Output<String> stopWordsMode) {
            $.stopWordsMode = stopWordsMode;
            return this;
        }

        public Builder stopWordsMode(String stopWordsMode) {
            return stopWordsMode(Output.of(stopWordsMode));
        }

        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public Builder targetColumn(@Nullable Output<String> targetColumn) {
            $.targetColumn = targetColumn;
            return this;
        }

        public Builder targetColumn(String targetColumn) {
            return targetColumn(Output.of(targetColumn));
        }

        public Builder targetColumnNames(@Nullable Output<String> targetColumnNames) {
            $.targetColumnNames = targetColumnNames;
            return this;
        }

        public Builder targetColumnNames(String targetColumnNames) {
            return targetColumnNames(Output.of(targetColumnNames));
        }

        public Builder targetDateFormat(@Nullable Output<String> targetDateFormat) {
            $.targetDateFormat = targetDateFormat;
            return this;
        }

        public Builder targetDateFormat(String targetDateFormat) {
            return targetDateFormat(Output.of(targetDateFormat));
        }

        public Builder targetIndex(@Nullable Output<String> targetIndex) {
            $.targetIndex = targetIndex;
            return this;
        }

        public Builder targetIndex(String targetIndex) {
            return targetIndex(Output.of(targetIndex));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public Builder tokenizerPattern(@Nullable Output<String> tokenizerPattern) {
            $.tokenizerPattern = tokenizerPattern;
            return this;
        }

        public Builder tokenizerPattern(String tokenizerPattern) {
            return tokenizerPattern(Output.of(tokenizerPattern));
        }

        public Builder trueString(@Nullable Output<String> trueString) {
            $.trueString = trueString;
            return this;
        }

        public Builder trueString(String trueString) {
            return trueString(Output.of(trueString));
        }

        public Builder udfLang(@Nullable Output<String> udfLang) {
            $.udfLang = udfLang;
            return this;
        }

        public Builder udfLang(String udfLang) {
            return udfLang(Output.of(udfLang));
        }

        public Builder units(@Nullable Output<String> units) {
            $.units = units;
            return this;
        }

        public Builder units(String units) {
            return units(Output.of(units));
        }

        public Builder unpivotColumn(@Nullable Output<String> unpivotColumn) {
            $.unpivotColumn = unpivotColumn;
            return this;
        }

        public Builder unpivotColumn(String unpivotColumn) {
            return unpivotColumn(Output.of(unpivotColumn));
        }

        public Builder upperBound(@Nullable Output<String> upperBound) {
            $.upperBound = upperBound;
            return this;
        }

        public Builder upperBound(String upperBound) {
            return upperBound(Output.of(upperBound));
        }

        public Builder useNewDataFrame(@Nullable Output<String> useNewDataFrame) {
            $.useNewDataFrame = useNewDataFrame;
            return this;
        }

        public Builder useNewDataFrame(String useNewDataFrame) {
            return useNewDataFrame(Output.of(useNewDataFrame));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder value1(@Nullable Output<String> value1) {
            $.value1 = value1;
            return this;
        }

        public Builder value1(String value1) {
            return value1(Output.of(value1));
        }

        public Builder value2(@Nullable Output<String> value2) {
            $.value2 = value2;
            return this;
        }

        public Builder value2(String value2) {
            return value2(Output.of(value2));
        }

        public Builder valueColumn(@Nullable Output<String> valueColumn) {
            $.valueColumn = valueColumn;
            return this;
        }

        public Builder valueColumn(String valueColumn) {
            return valueColumn(Output.of(valueColumn));
        }

        public Builder viewFrame(@Nullable Output<String> viewFrame) {
            $.viewFrame = viewFrame;
            return this;
        }

        public Builder viewFrame(String viewFrame) {
            return viewFrame(Output.of(viewFrame));
        }

        public RecipeParametersArgs build() {
            return $;
        }
    }

}
