// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.licensemanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LicenseEntitlementArgs extends com.pulumi.resources.ResourceArgs {

    public static final LicenseEntitlementArgs Empty = new LicenseEntitlementArgs();

    @Import(name="allowCheckIn")
    private @Nullable Output<Boolean> allowCheckIn;

    public Optional<Output<Boolean>> allowCheckIn() {
        return Optional.ofNullable(this.allowCheckIn);
    }

    @Import(name="maxCount")
    private @Nullable Output<Integer> maxCount;

    public Optional<Output<Integer>> maxCount() {
        return Optional.ofNullable(this.maxCount);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="overage")
    private @Nullable Output<Boolean> overage;

    public Optional<Output<Boolean>> overage() {
        return Optional.ofNullable(this.overage);
    }

    @Import(name="unit", required=true)
    private Output<String> unit;

    public Output<String> unit() {
        return this.unit;
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private LicenseEntitlementArgs() {}

    private LicenseEntitlementArgs(LicenseEntitlementArgs $) {
        this.allowCheckIn = $.allowCheckIn;
        this.maxCount = $.maxCount;
        this.name = $.name;
        this.overage = $.overage;
        this.unit = $.unit;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LicenseEntitlementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LicenseEntitlementArgs $;

        public Builder() {
            $ = new LicenseEntitlementArgs();
        }

        public Builder(LicenseEntitlementArgs defaults) {
            $ = new LicenseEntitlementArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowCheckIn(@Nullable Output<Boolean> allowCheckIn) {
            $.allowCheckIn = allowCheckIn;
            return this;
        }

        public Builder allowCheckIn(Boolean allowCheckIn) {
            return allowCheckIn(Output.of(allowCheckIn));
        }

        public Builder maxCount(@Nullable Output<Integer> maxCount) {
            $.maxCount = maxCount;
            return this;
        }

        public Builder maxCount(Integer maxCount) {
            return maxCount(Output.of(maxCount));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder overage(@Nullable Output<Boolean> overage) {
            $.overage = overage;
            return this;
        }

        public Builder overage(Boolean overage) {
            return overage(Output.of(overage));
        }

        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public LicenseEntitlementArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.unit = Objects.requireNonNull($.unit, "expected parameter 'unit' to be non-null");
            return $;
        }
    }

}
