// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iam;

import com.pulumi.awsnative.iam.inputs.RolePolicyArgs;
import com.pulumi.awsnative.iam.inputs.RoleTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleArgs Empty = new RoleArgs();

    /**
     * The trust policy that is associated with this role.
     * 
     */
    @Import(name="assumeRolePolicyDocument", required=true)
    private Output<Object> assumeRolePolicyDocument;

    /**
     * @return The trust policy that is associated with this role.
     * 
     */
    public Output<Object> assumeRolePolicyDocument() {
        return this.assumeRolePolicyDocument;
    }

    /**
     * A description of the role that you provide.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the role that you provide.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     * 
     */
    @Import(name="managedPolicyArns")
    private @Nullable Output<List<String>> managedPolicyArns;

    /**
     * @return A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     * 
     */
    public Optional<Output<List<String>>> managedPolicyArns() {
        return Optional.ofNullable(this.managedPolicyArns);
    }

    /**
     * The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    @Import(name="maxSessionDuration")
    private @Nullable Output<Integer> maxSessionDuration;

    /**
     * @return The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
     * 
     */
    public Optional<Output<Integer>> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }

    /**
     * The path to the role.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the role.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The ARN of the policy used to set the permissions boundary for the role.
     * 
     */
    @Import(name="permissionsBoundary")
    private @Nullable Output<String> permissionsBoundary;

    /**
     * @return The ARN of the policy used to set the permissions boundary for the role.
     * 
     */
    public Optional<Output<String>> permissionsBoundary() {
        return Optional.ofNullable(this.permissionsBoundary);
    }

    /**
     * Adds or updates an inline policy document that is embedded in the specified IAM role.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<RolePolicyArgs>> policies;

    /**
     * @return Adds or updates an inline policy document that is embedded in the specified IAM role.
     * 
     */
    public Optional<Output<List<RolePolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * A name for the IAM role, up to 64 characters in length.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return A name for the IAM role, up to 64 characters in length.
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * A list of tags that are attached to the role.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<RoleTagArgs>> tags;

    /**
     * @return A list of tags that are attached to the role.
     * 
     */
    public Optional<Output<List<RoleTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RoleArgs() {}

    private RoleArgs(RoleArgs $) {
        this.assumeRolePolicyDocument = $.assumeRolePolicyDocument;
        this.description = $.description;
        this.managedPolicyArns = $.managedPolicyArns;
        this.maxSessionDuration = $.maxSessionDuration;
        this.path = $.path;
        this.permissionsBoundary = $.permissionsBoundary;
        this.policies = $.policies;
        this.roleName = $.roleName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleArgs $;

        public Builder() {
            $ = new RoleArgs();
        }

        public Builder(RoleArgs defaults) {
            $ = new RoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumeRolePolicyDocument The trust policy that is associated with this role.
         * 
         * @return builder
         * 
         */
        public Builder assumeRolePolicyDocument(Output<Object> assumeRolePolicyDocument) {
            $.assumeRolePolicyDocument = assumeRolePolicyDocument;
            return this;
        }

        /**
         * @param assumeRolePolicyDocument The trust policy that is associated with this role.
         * 
         * @return builder
         * 
         */
        public Builder assumeRolePolicyDocument(Object assumeRolePolicyDocument) {
            return assumeRolePolicyDocument(Output.of(assumeRolePolicyDocument));
        }

        /**
         * @param description A description of the role that you provide.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the role that you provide.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param managedPolicyArns A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
         * 
         * @return builder
         * 
         */
        public Builder managedPolicyArns(@Nullable Output<List<String>> managedPolicyArns) {
            $.managedPolicyArns = managedPolicyArns;
            return this;
        }

        /**
         * @param managedPolicyArns A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
         * 
         * @return builder
         * 
         */
        public Builder managedPolicyArns(List<String> managedPolicyArns) {
            return managedPolicyArns(Output.of(managedPolicyArns));
        }

        /**
         * @param managedPolicyArns A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
         * 
         * @return builder
         * 
         */
        public Builder managedPolicyArns(String... managedPolicyArns) {
            return managedPolicyArns(List.of(managedPolicyArns));
        }

        /**
         * @param maxSessionDuration The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(@Nullable Output<Integer> maxSessionDuration) {
            $.maxSessionDuration = maxSessionDuration;
            return this;
        }

        /**
         * @param maxSessionDuration The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(Integer maxSessionDuration) {
            return maxSessionDuration(Output.of(maxSessionDuration));
        }

        /**
         * @param path The path to the role.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the role.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param permissionsBoundary The ARN of the policy used to set the permissions boundary for the role.
         * 
         * @return builder
         * 
         */
        public Builder permissionsBoundary(@Nullable Output<String> permissionsBoundary) {
            $.permissionsBoundary = permissionsBoundary;
            return this;
        }

        /**
         * @param permissionsBoundary The ARN of the policy used to set the permissions boundary for the role.
         * 
         * @return builder
         * 
         */
        public Builder permissionsBoundary(String permissionsBoundary) {
            return permissionsBoundary(Output.of(permissionsBoundary));
        }

        /**
         * @param policies Adds or updates an inline policy document that is embedded in the specified IAM role.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<RolePolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies Adds or updates an inline policy document that is embedded in the specified IAM role.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<RolePolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies Adds or updates an inline policy document that is embedded in the specified IAM role.
         * 
         * @return builder
         * 
         */
        public Builder policies(RolePolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param roleName A name for the IAM role, up to 64 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName A name for the IAM role, up to 64 characters in length.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param tags A list of tags that are attached to the role.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<RoleTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags that are attached to the role.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<RoleTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags that are attached to the role.
         * 
         * @return builder
         * 
         */
        public Builder tags(RoleTagArgs... tags) {
            return tags(List.of(tags));
        }

        public RoleArgs build() {
            $.assumeRolePolicyDocument = Objects.requireNonNull($.assumeRolePolicyDocument, "expected parameter 'assumeRolePolicyDocument' to be non-null");
            return $;
        }
    }

}
