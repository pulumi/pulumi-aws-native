// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.outputs;

import com.pulumi.awsnative.quicksight.outputs.DataSourceParameters;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DataSourceCredentialPair {
    /**
     * @return &lt;p&gt;A set of alternate data source parameters that you want to share for these
     *             credentials. The credentials are applied in tandem with the data source parameters when
     *             you copy a data source by using a create or update request. The API operation compares
     *             the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request with the
     *             structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the new data source with
     *             the existing credentials. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is
     *             null, the &lt;code&gt;DataSourceParameters&lt;/code&gt; originally used with these
     *                 &lt;code&gt;Credentials&lt;/code&gt; is automatically allowed.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSourceParameters> alternateDataSourceParameters;
    /**
     * @return &lt;p&gt;Password.&lt;/p&gt;
     * 
     */
    private String password;
    /**
     * @return &lt;p&gt;User name.&lt;/p&gt;
     * 
     */
    private String username;

    private DataSourceCredentialPair() {}
    /**
     * @return &lt;p&gt;A set of alternate data source parameters that you want to share for these
     *             credentials. The credentials are applied in tandem with the data source parameters when
     *             you copy a data source by using a create or update request. The API operation compares
     *             the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request with the
     *             structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the new data source with
     *             the existing credentials. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is
     *             null, the &lt;code&gt;DataSourceParameters&lt;/code&gt; originally used with these
     *                 &lt;code&gt;Credentials&lt;/code&gt; is automatically allowed.&lt;/p&gt;
     * 
     */
    public List<DataSourceParameters> alternateDataSourceParameters() {
        return this.alternateDataSourceParameters == null ? List.of() : this.alternateDataSourceParameters;
    }
    /**
     * @return &lt;p&gt;Password.&lt;/p&gt;
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return &lt;p&gt;User name.&lt;/p&gt;
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataSourceCredentialPair defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DataSourceParameters> alternateDataSourceParameters;
        private String password;
        private String username;
        public Builder() {}
        public Builder(DataSourceCredentialPair defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateDataSourceParameters = defaults.alternateDataSourceParameters;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder alternateDataSourceParameters(@Nullable List<DataSourceParameters> alternateDataSourceParameters) {
            this.alternateDataSourceParameters = alternateDataSourceParameters;
            return this;
        }
        public Builder alternateDataSourceParameters(DataSourceParameters... alternateDataSourceParameters) {
            return alternateDataSourceParameters(List.of(alternateDataSourceParameters));
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public DataSourceCredentialPair build() {
            final var o = new DataSourceCredentialPair();
            o.alternateDataSourceParameters = alternateDataSourceParameters;
            o.password = password;
            o.username = username;
            return o;
        }
    }
}
