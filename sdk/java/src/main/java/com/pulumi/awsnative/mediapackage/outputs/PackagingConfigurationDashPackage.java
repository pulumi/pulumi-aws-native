// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.outputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashPackagePeriodTriggersItem;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashPackageSegmentTemplateFormat;
import com.pulumi.awsnative.mediapackage.outputs.PackagingConfigurationDashEncryption;
import com.pulumi.awsnative.mediapackage.outputs.PackagingConfigurationDashManifest;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PackagingConfigurationDashPackage {
    /**
     * @return A list of DASH manifest configurations.
     * 
     */
    private List<PackagingConfigurationDashManifest> dashManifests;
    private @Nullable PackagingConfigurationDashEncryption encryption;
    /**
     * @return When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
     * 
     */
    private @Nullable Boolean includeEncoderConfigurationInSegments;
    /**
     * @return A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
     * 
     */
    private @Nullable List<PackagingConfigurationDashPackagePeriodTriggersItem> periodTriggers;
    private @Nullable Integer segmentDurationSeconds;
    /**
     * @return Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
     * 
     */
    private @Nullable PackagingConfigurationDashPackageSegmentTemplateFormat segmentTemplateFormat;

    private PackagingConfigurationDashPackage() {}
    /**
     * @return A list of DASH manifest configurations.
     * 
     */
    public List<PackagingConfigurationDashManifest> dashManifests() {
        return this.dashManifests;
    }
    public Optional<PackagingConfigurationDashEncryption> encryption() {
        return Optional.ofNullable(this.encryption);
    }
    /**
     * @return When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder&#39;s Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
     * 
     */
    public Optional<Boolean> includeEncoderConfigurationInSegments() {
        return Optional.ofNullable(this.includeEncoderConfigurationInSegments);
    }
    /**
     * @return A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains &#34;ADS&#34;, new periods will be created where the Asset contains SCTE-35 ad markers.
     * 
     */
    public List<PackagingConfigurationDashPackagePeriodTriggersItem> periodTriggers() {
        return this.periodTriggers == null ? List.of() : this.periodTriggers;
    }
    public Optional<Integer> segmentDurationSeconds() {
        return Optional.ofNullable(this.segmentDurationSeconds);
    }
    /**
     * @return Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
     * 
     */
    public Optional<PackagingConfigurationDashPackageSegmentTemplateFormat> segmentTemplateFormat() {
        return Optional.ofNullable(this.segmentTemplateFormat);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PackagingConfigurationDashPackage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<PackagingConfigurationDashManifest> dashManifests;
        private @Nullable PackagingConfigurationDashEncryption encryption;
        private @Nullable Boolean includeEncoderConfigurationInSegments;
        private @Nullable List<PackagingConfigurationDashPackagePeriodTriggersItem> periodTriggers;
        private @Nullable Integer segmentDurationSeconds;
        private @Nullable PackagingConfigurationDashPackageSegmentTemplateFormat segmentTemplateFormat;
        public Builder() {}
        public Builder(PackagingConfigurationDashPackage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dashManifests = defaults.dashManifests;
    	      this.encryption = defaults.encryption;
    	      this.includeEncoderConfigurationInSegments = defaults.includeEncoderConfigurationInSegments;
    	      this.periodTriggers = defaults.periodTriggers;
    	      this.segmentDurationSeconds = defaults.segmentDurationSeconds;
    	      this.segmentTemplateFormat = defaults.segmentTemplateFormat;
        }

        @CustomType.Setter
        public Builder dashManifests(List<PackagingConfigurationDashManifest> dashManifests) {
            this.dashManifests = Objects.requireNonNull(dashManifests);
            return this;
        }
        public Builder dashManifests(PackagingConfigurationDashManifest... dashManifests) {
            return dashManifests(List.of(dashManifests));
        }
        @CustomType.Setter
        public Builder encryption(@Nullable PackagingConfigurationDashEncryption encryption) {
            this.encryption = encryption;
            return this;
        }
        @CustomType.Setter
        public Builder includeEncoderConfigurationInSegments(@Nullable Boolean includeEncoderConfigurationInSegments) {
            this.includeEncoderConfigurationInSegments = includeEncoderConfigurationInSegments;
            return this;
        }
        @CustomType.Setter
        public Builder periodTriggers(@Nullable List<PackagingConfigurationDashPackagePeriodTriggersItem> periodTriggers) {
            this.periodTriggers = periodTriggers;
            return this;
        }
        public Builder periodTriggers(PackagingConfigurationDashPackagePeriodTriggersItem... periodTriggers) {
            return periodTriggers(List.of(periodTriggers));
        }
        @CustomType.Setter
        public Builder segmentDurationSeconds(@Nullable Integer segmentDurationSeconds) {
            this.segmentDurationSeconds = segmentDurationSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder segmentTemplateFormat(@Nullable PackagingConfigurationDashPackageSegmentTemplateFormat segmentTemplateFormat) {
            this.segmentTemplateFormat = segmentTemplateFormat;
            return this;
        }
        public PackagingConfigurationDashPackage build() {
            final var o = new PackagingConfigurationDashPackage();
            o.dashManifests = dashManifests;
            o.encryption = encryption;
            o.includeEncoderConfigurationInSegments = includeEncoderConfigurationInSegments;
            o.periodTriggers = periodTriggers;
            o.segmentDurationSeconds = segmentDurationSeconds;
            o.segmentTemplateFormat = segmentTemplateFormat;
            return o;
        }
    }
}
