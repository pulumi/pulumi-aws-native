// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.awsnative.s3.inputs.BucketRedirectRuleArgs;
import com.pulumi.awsnative.s3.inputs.BucketRoutingRuleConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the redirect behavior and when a redirect is applied.
 * 
 */
public final class BucketRoutingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketRoutingRuleArgs Empty = new BucketRoutingRuleArgs();

    /**
     * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
     * 
     */
    @Import(name="redirectRule", required=true)
    private Output<BucketRedirectRuleArgs> redirectRule;

    /**
     * @return Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
     * 
     */
    public Output<BucketRedirectRuleArgs> redirectRule() {
        return this.redirectRule;
    }

    @Import(name="routingRuleCondition")
    private @Nullable Output<BucketRoutingRuleConditionArgs> routingRuleCondition;

    public Optional<Output<BucketRoutingRuleConditionArgs>> routingRuleCondition() {
        return Optional.ofNullable(this.routingRuleCondition);
    }

    private BucketRoutingRuleArgs() {}

    private BucketRoutingRuleArgs(BucketRoutingRuleArgs $) {
        this.redirectRule = $.redirectRule;
        this.routingRuleCondition = $.routingRuleCondition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRoutingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRoutingRuleArgs $;

        public Builder() {
            $ = new BucketRoutingRuleArgs();
        }

        public Builder(BucketRoutingRuleArgs defaults) {
            $ = new BucketRoutingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param redirectRule Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
         * 
         * @return builder
         * 
         */
        public Builder redirectRule(Output<BucketRedirectRuleArgs> redirectRule) {
            $.redirectRule = redirectRule;
            return this;
        }

        /**
         * @param redirectRule Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
         * 
         * @return builder
         * 
         */
        public Builder redirectRule(BucketRedirectRuleArgs redirectRule) {
            return redirectRule(Output.of(redirectRule));
        }

        public Builder routingRuleCondition(@Nullable Output<BucketRoutingRuleConditionArgs> routingRuleCondition) {
            $.routingRuleCondition = routingRuleCondition;
            return this;
        }

        public Builder routingRuleCondition(BucketRoutingRuleConditionArgs routingRuleCondition) {
            return routingRuleCondition(Output.of(routingRuleCondition));
        }

        public BucketRoutingRuleArgs build() {
            $.redirectRule = Objects.requireNonNull($.redirectRule, "expected parameter 'redirectRule' to be non-null");
            return $;
        }
    }

}
