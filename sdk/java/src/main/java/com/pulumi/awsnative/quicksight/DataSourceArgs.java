// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight;

import com.pulumi.awsnative.quicksight.enums.DataSourceType;
import com.pulumi.awsnative.quicksight.inputs.DataSourceCredentialsArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceErrorInfoArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceParametersArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceResourcePermissionArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceSslPropertiesArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceTagArgs;
import com.pulumi.awsnative.quicksight.inputs.DataSourceVpcConnectionPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceArgs Empty = new DataSourceArgs();

    /**
     * &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
     *             stored with this data source. The credentials are applied in tandem with the data source
     *             parameters when you copy a data source by using a create or update request. The API
     *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
     *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the credentials from this
     *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
     *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
     *             are automatically allowed.&lt;/p&gt;
     * 
     */
    @Import(name="alternateDataSourceParameters")
    private @Nullable Output<List<DataSourceParametersArgs>> alternateDataSourceParameters;

    /**
     * @return &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
     *             stored with this data source. The credentials are applied in tandem with the data source
     *             parameters when you copy a data source by using a create or update request. The API
     *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
     *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the credentials from this
     *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
     *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
     *             are automatically allowed.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<DataSourceParametersArgs>>> alternateDataSourceParameters() {
        return Optional.ofNullable(this.alternateDataSourceParameters);
    }

    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    @Import(name="credentials")
    private @Nullable Output<DataSourceCredentialsArgs> credentials;

    public Optional<Output<DataSourceCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    @Import(name="dataSourceId")
    private @Nullable Output<String> dataSourceId;

    public Optional<Output<String>> dataSourceId() {
        return Optional.ofNullable(this.dataSourceId);
    }

    @Import(name="dataSourceParameters")
    private @Nullable Output<DataSourceParametersArgs> dataSourceParameters;

    public Optional<Output<DataSourceParametersArgs>> dataSourceParameters() {
        return Optional.ofNullable(this.dataSourceParameters);
    }

    @Import(name="errorInfo")
    private @Nullable Output<DataSourceErrorInfoArgs> errorInfo;

    public Optional<Output<DataSourceErrorInfoArgs>> errorInfo() {
        return Optional.ofNullable(this.errorInfo);
    }

    /**
     * &lt;p&gt;A display name for the data source.&lt;/p&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &lt;p&gt;A display name for the data source.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<DataSourceResourcePermissionArgs>> permissions;

    /**
     * @return &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<DataSourceResourcePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    @Import(name="sslProperties")
    private @Nullable Output<DataSourceSslPropertiesArgs> sslProperties;

    public Optional<Output<DataSourceSslPropertiesArgs>> sslProperties() {
        return Optional.ofNullable(this.sslProperties);
    }

    /**
     * &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DataSourceTagArgs>> tags;

    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<DataSourceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="type")
    private @Nullable Output<DataSourceType> type;

    public Optional<Output<DataSourceType>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="vpcConnectionProperties")
    private @Nullable Output<DataSourceVpcConnectionPropertiesArgs> vpcConnectionProperties;

    public Optional<Output<DataSourceVpcConnectionPropertiesArgs>> vpcConnectionProperties() {
        return Optional.ofNullable(this.vpcConnectionProperties);
    }

    private DataSourceArgs() {}

    private DataSourceArgs(DataSourceArgs $) {
        this.alternateDataSourceParameters = $.alternateDataSourceParameters;
        this.awsAccountId = $.awsAccountId;
        this.credentials = $.credentials;
        this.dataSourceId = $.dataSourceId;
        this.dataSourceParameters = $.dataSourceParameters;
        this.errorInfo = $.errorInfo;
        this.name = $.name;
        this.permissions = $.permissions;
        this.sslProperties = $.sslProperties;
        this.tags = $.tags;
        this.type = $.type;
        this.vpcConnectionProperties = $.vpcConnectionProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceArgs $;

        public Builder() {
            $ = new DataSourceArgs();
        }

        public Builder(DataSourceArgs defaults) {
            $ = new DataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alternateDataSourceParameters &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
         *             stored with this data source. The credentials are applied in tandem with the data source
         *             parameters when you copy a data source by using a create or update request. The API
         *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
         *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
         *             structures are an exact match, the request is allowed to use the credentials from this
         *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
         *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
         *             are automatically allowed.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder alternateDataSourceParameters(@Nullable Output<List<DataSourceParametersArgs>> alternateDataSourceParameters) {
            $.alternateDataSourceParameters = alternateDataSourceParameters;
            return this;
        }

        /**
         * @param alternateDataSourceParameters &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
         *             stored with this data source. The credentials are applied in tandem with the data source
         *             parameters when you copy a data source by using a create or update request. The API
         *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
         *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
         *             structures are an exact match, the request is allowed to use the credentials from this
         *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
         *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
         *             are automatically allowed.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder alternateDataSourceParameters(List<DataSourceParametersArgs> alternateDataSourceParameters) {
            return alternateDataSourceParameters(Output.of(alternateDataSourceParameters));
        }

        /**
         * @param alternateDataSourceParameters &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
         *             stored with this data source. The credentials are applied in tandem with the data source
         *             parameters when you copy a data source by using a create or update request. The API
         *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
         *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
         *             structures are an exact match, the request is allowed to use the credentials from this
         *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
         *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
         *             are automatically allowed.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder alternateDataSourceParameters(DataSourceParametersArgs... alternateDataSourceParameters) {
            return alternateDataSourceParameters(List.of(alternateDataSourceParameters));
        }

        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        public Builder credentials(@Nullable Output<DataSourceCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(DataSourceCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder dataSourceId(@Nullable Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        public Builder dataSourceParameters(@Nullable Output<DataSourceParametersArgs> dataSourceParameters) {
            $.dataSourceParameters = dataSourceParameters;
            return this;
        }

        public Builder dataSourceParameters(DataSourceParametersArgs dataSourceParameters) {
            return dataSourceParameters(Output.of(dataSourceParameters));
        }

        public Builder errorInfo(@Nullable Output<DataSourceErrorInfoArgs> errorInfo) {
            $.errorInfo = errorInfo;
            return this;
        }

        public Builder errorInfo(DataSourceErrorInfoArgs errorInfo) {
            return errorInfo(Output.of(errorInfo));
        }

        /**
         * @param name &lt;p&gt;A display name for the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;A display name for the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<DataSourceResourcePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<DataSourceResourcePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(DataSourceResourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder sslProperties(@Nullable Output<DataSourceSslPropertiesArgs> sslProperties) {
            $.sslProperties = sslProperties;
            return this;
        }

        public Builder sslProperties(DataSourceSslPropertiesArgs sslProperties) {
            return sslProperties(Output.of(sslProperties));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DataSourceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DataSourceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(DataSourceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder type(@Nullable Output<DataSourceType> type) {
            $.type = type;
            return this;
        }

        public Builder type(DataSourceType type) {
            return type(Output.of(type));
        }

        public Builder vpcConnectionProperties(@Nullable Output<DataSourceVpcConnectionPropertiesArgs> vpcConnectionProperties) {
            $.vpcConnectionProperties = vpcConnectionProperties;
            return this;
        }

        public Builder vpcConnectionProperties(DataSourceVpcConnectionPropertiesArgs vpcConnectionProperties) {
            return vpcConnectionProperties(Output.of(vpcConnectionProperties));
        }

        public DataSourceArgs build() {
            return $;
        }
    }

}
