// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.xray.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SamplingRule {
    /**
     * @return Matches attributes derived from the request.
     * 
     */
    private @Nullable Object attributes;
    /**
     * @return The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    private @Nullable Double fixedRate;
    /**
     * @return Matches the HTTP method from a request URL.
     * 
     */
    private @Nullable String hTTPMethod;
    /**
     * @return Matches the hostname from a request URL.
     * 
     */
    private @Nullable String host;
    /**
     * @return The priority of the sampling rule.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    private @Nullable Integer reservoirSize;
    /**
     * @return Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    private @Nullable String resourceARN;
    private @Nullable String ruleARN;
    private @Nullable String ruleName;
    /**
     * @return Matches the name that the service uses to identify itself in segments.
     * 
     */
    private @Nullable String serviceName;
    /**
     * @return Matches the origin that the service uses to identify its type in segments.
     * 
     */
    private @Nullable String serviceType;
    /**
     * @return Matches the path from a request URL.
     * 
     */
    private @Nullable String uRLPath;
    /**
     * @return The version of the sampling rule format (1)
     * 
     */
    private @Nullable Integer version;

    private SamplingRule() {}
    /**
     * @return Matches attributes derived from the request.
     * 
     */
    public Optional<Object> attributes() {
        return Optional.ofNullable(this.attributes);
    }
    /**
     * @return The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    public Optional<Double> fixedRate() {
        return Optional.ofNullable(this.fixedRate);
    }
    /**
     * @return Matches the HTTP method from a request URL.
     * 
     */
    public Optional<String> hTTPMethod() {
        return Optional.ofNullable(this.hTTPMethod);
    }
    /**
     * @return Matches the hostname from a request URL.
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    /**
     * @return The priority of the sampling rule.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    public Optional<Integer> reservoirSize() {
        return Optional.ofNullable(this.reservoirSize);
    }
    /**
     * @return Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    public Optional<String> resourceARN() {
        return Optional.ofNullable(this.resourceARN);
    }
    public Optional<String> ruleARN() {
        return Optional.ofNullable(this.ruleARN);
    }
    public Optional<String> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }
    /**
     * @return Matches the name that the service uses to identify itself in segments.
     * 
     */
    public Optional<String> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }
    /**
     * @return Matches the origin that the service uses to identify its type in segments.
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }
    /**
     * @return Matches the path from a request URL.
     * 
     */
    public Optional<String> uRLPath() {
        return Optional.ofNullable(this.uRLPath);
    }
    /**
     * @return The version of the sampling rule format (1)
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamplingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Object attributes;
        private @Nullable Double fixedRate;
        private @Nullable String hTTPMethod;
        private @Nullable String host;
        private @Nullable Integer priority;
        private @Nullable Integer reservoirSize;
        private @Nullable String resourceARN;
        private @Nullable String ruleARN;
        private @Nullable String ruleName;
        private @Nullable String serviceName;
        private @Nullable String serviceType;
        private @Nullable String uRLPath;
        private @Nullable Integer version;
        public Builder() {}
        public Builder(SamplingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.fixedRate = defaults.fixedRate;
    	      this.hTTPMethod = defaults.hTTPMethod;
    	      this.host = defaults.host;
    	      this.priority = defaults.priority;
    	      this.reservoirSize = defaults.reservoirSize;
    	      this.resourceARN = defaults.resourceARN;
    	      this.ruleARN = defaults.ruleARN;
    	      this.ruleName = defaults.ruleName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
    	      this.uRLPath = defaults.uRLPath;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder attributes(@Nullable Object attributes) {
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder fixedRate(@Nullable Double fixedRate) {
            this.fixedRate = fixedRate;
            return this;
        }
        @CustomType.Setter
        public Builder hTTPMethod(@Nullable String hTTPMethod) {
            this.hTTPMethod = hTTPMethod;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder reservoirSize(@Nullable Integer reservoirSize) {
            this.reservoirSize = reservoirSize;
            return this;
        }
        @CustomType.Setter
        public Builder resourceARN(@Nullable String resourceARN) {
            this.resourceARN = resourceARN;
            return this;
        }
        @CustomType.Setter
        public Builder ruleARN(@Nullable String ruleARN) {
            this.ruleARN = ruleARN;
            return this;
        }
        @CustomType.Setter
        public Builder ruleName(@Nullable String ruleName) {
            this.ruleName = ruleName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(@Nullable String serviceName) {
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(@Nullable String serviceType) {
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder uRLPath(@Nullable String uRLPath) {
            this.uRLPath = uRLPath;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {
            this.version = version;
            return this;
        }
        public SamplingRule build() {
            final var o = new SamplingRule();
            o.attributes = attributes;
            o.fixedRate = fixedRate;
            o.hTTPMethod = hTTPMethod;
            o.host = host;
            o.priority = priority;
            o.reservoirSize = reservoirSize;
            o.resourceARN = resourceARN;
            o.ruleARN = ruleARN;
            o.ruleName = ruleName;
            o.serviceName = serviceName;
            o.serviceType = serviceType;
            o.uRLPath = uRLPath;
            o.version = version;
            return o;
        }
    }
}
