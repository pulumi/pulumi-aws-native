// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.configuration;

import com.pulumi.awsnative.configuration.inputs.AggregationAuthorizationTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AggregationAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AggregationAuthorizationArgs Empty = new AggregationAuthorizationArgs();

    /**
     * The 12-digit account ID of the account authorized to aggregate data.
     * 
     */
    @Import(name="authorizedAccountId", required=true)
    private Output<String> authorizedAccountId;

    /**
     * @return The 12-digit account ID of the account authorized to aggregate data.
     * 
     */
    public Output<String> authorizedAccountId() {
        return this.authorizedAccountId;
    }

    /**
     * The region authorized to collect aggregated data.
     * 
     */
    @Import(name="authorizedAwsRegion", required=true)
    private Output<String> authorizedAwsRegion;

    /**
     * @return The region authorized to collect aggregated data.
     * 
     */
    public Output<String> authorizedAwsRegion() {
        return this.authorizedAwsRegion;
    }

    /**
     * The tags for the AggregationAuthorization.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AggregationAuthorizationTagArgs>> tags;

    /**
     * @return The tags for the AggregationAuthorization.
     * 
     */
    public Optional<Output<List<AggregationAuthorizationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AggregationAuthorizationArgs() {}

    private AggregationAuthorizationArgs(AggregationAuthorizationArgs $) {
        this.authorizedAccountId = $.authorizedAccountId;
        this.authorizedAwsRegion = $.authorizedAwsRegion;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AggregationAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AggregationAuthorizationArgs $;

        public Builder() {
            $ = new AggregationAuthorizationArgs();
        }

        public Builder(AggregationAuthorizationArgs defaults) {
            $ = new AggregationAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizedAccountId The 12-digit account ID of the account authorized to aggregate data.
         * 
         * @return builder
         * 
         */
        public Builder authorizedAccountId(Output<String> authorizedAccountId) {
            $.authorizedAccountId = authorizedAccountId;
            return this;
        }

        /**
         * @param authorizedAccountId The 12-digit account ID of the account authorized to aggregate data.
         * 
         * @return builder
         * 
         */
        public Builder authorizedAccountId(String authorizedAccountId) {
            return authorizedAccountId(Output.of(authorizedAccountId));
        }

        /**
         * @param authorizedAwsRegion The region authorized to collect aggregated data.
         * 
         * @return builder
         * 
         */
        public Builder authorizedAwsRegion(Output<String> authorizedAwsRegion) {
            $.authorizedAwsRegion = authorizedAwsRegion;
            return this;
        }

        /**
         * @param authorizedAwsRegion The region authorized to collect aggregated data.
         * 
         * @return builder
         * 
         */
        public Builder authorizedAwsRegion(String authorizedAwsRegion) {
            return authorizedAwsRegion(Output.of(authorizedAwsRegion));
        }

        /**
         * @param tags The tags for the AggregationAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AggregationAuthorizationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags for the AggregationAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AggregationAuthorizationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags for the AggregationAuthorization.
         * 
         * @return builder
         * 
         */
        public Builder tags(AggregationAuthorizationTagArgs... tags) {
            return tags(List.of(tags));
        }

        public AggregationAuthorizationArgs build() {
            $.authorizedAccountId = Objects.requireNonNull($.authorizedAccountId, "expected parameter 'authorizedAccountId' to be non-null");
            $.authorizedAwsRegion = Objects.requireNonNull($.authorizedAwsRegion, "expected parameter 'authorizedAwsRegion' to be non-null");
            return $;
        }
    }

}
