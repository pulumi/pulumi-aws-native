// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseRelationalDatabaseParameter {
    /**
     * @return Specifies the valid range of values for the parameter.
     * 
     */
    private @Nullable String allowedValues;
    /**
     * @return Indicates when parameter updates are applied. Can be immediate or pending-reboot.
     * 
     */
    private @Nullable String applyMethod;
    /**
     * @return Specifies the engine-specific parameter type.
     * 
     */
    private @Nullable String applyType;
    /**
     * @return Specifies the valid data type for the parameter.
     * 
     */
    private @Nullable String dataType;
    /**
     * @return Provides a description of the parameter.
     * 
     */
    private @Nullable String description;
    /**
     * @return A Boolean value indicating whether the parameter can be modified.
     * 
     */
    private @Nullable Boolean isModifiable;
    /**
     * @return Specifies the name of the parameter.
     * 
     */
    private @Nullable String parameterName;
    /**
     * @return Specifies the value of the parameter.
     * 
     */
    private @Nullable String parameterValue;

    private DatabaseRelationalDatabaseParameter() {}
    /**
     * @return Specifies the valid range of values for the parameter.
     * 
     */
    public Optional<String> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }
    /**
     * @return Indicates when parameter updates are applied. Can be immediate or pending-reboot.
     * 
     */
    public Optional<String> applyMethod() {
        return Optional.ofNullable(this.applyMethod);
    }
    /**
     * @return Specifies the engine-specific parameter type.
     * 
     */
    public Optional<String> applyType() {
        return Optional.ofNullable(this.applyType);
    }
    /**
     * @return Specifies the valid data type for the parameter.
     * 
     */
    public Optional<String> dataType() {
        return Optional.ofNullable(this.dataType);
    }
    /**
     * @return Provides a description of the parameter.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A Boolean value indicating whether the parameter can be modified.
     * 
     */
    public Optional<Boolean> isModifiable() {
        return Optional.ofNullable(this.isModifiable);
    }
    /**
     * @return Specifies the name of the parameter.
     * 
     */
    public Optional<String> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }
    /**
     * @return Specifies the value of the parameter.
     * 
     */
    public Optional<String> parameterValue() {
        return Optional.ofNullable(this.parameterValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseRelationalDatabaseParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allowedValues;
        private @Nullable String applyMethod;
        private @Nullable String applyType;
        private @Nullable String dataType;
        private @Nullable String description;
        private @Nullable Boolean isModifiable;
        private @Nullable String parameterName;
        private @Nullable String parameterValue;
        public Builder() {}
        public Builder(DatabaseRelationalDatabaseParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedValues = defaults.allowedValues;
    	      this.applyMethod = defaults.applyMethod;
    	      this.applyType = defaults.applyType;
    	      this.dataType = defaults.dataType;
    	      this.description = defaults.description;
    	      this.isModifiable = defaults.isModifiable;
    	      this.parameterName = defaults.parameterName;
    	      this.parameterValue = defaults.parameterValue;
        }

        @CustomType.Setter
        public Builder allowedValues(@Nullable String allowedValues) {
            this.allowedValues = allowedValues;
            return this;
        }
        @CustomType.Setter
        public Builder applyMethod(@Nullable String applyMethod) {
            this.applyMethod = applyMethod;
            return this;
        }
        @CustomType.Setter
        public Builder applyType(@Nullable String applyType) {
            this.applyType = applyType;
            return this;
        }
        @CustomType.Setter
        public Builder dataType(@Nullable String dataType) {
            this.dataType = dataType;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder isModifiable(@Nullable Boolean isModifiable) {
            this.isModifiable = isModifiable;
            return this;
        }
        @CustomType.Setter
        public Builder parameterName(@Nullable String parameterName) {
            this.parameterName = parameterName;
            return this;
        }
        @CustomType.Setter
        public Builder parameterValue(@Nullable String parameterValue) {
            this.parameterValue = parameterValue;
            return this;
        }
        public DatabaseRelationalDatabaseParameter build() {
            final var o = new DatabaseRelationalDatabaseParameter();
            o.allowedValues = allowedValues;
            o.applyMethod = applyMethod;
            o.applyType = applyType;
            o.dataType = dataType;
            o.description = description;
            o.isModifiable = isModifiable;
            o.parameterName = parameterName;
            o.parameterValue = parameterValue;
            return o;
        }
    }
}
