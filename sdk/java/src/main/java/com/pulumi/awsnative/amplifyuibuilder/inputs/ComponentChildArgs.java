// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.amplifyuibuilder.inputs;

import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentEventsArgs;
import com.pulumi.awsnative.amplifyuibuilder.inputs.ComponentPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ComponentChildArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComponentChildArgs Empty = new ComponentChildArgs();

    @Import(name="children")
    private @Nullable Output<List<ComponentChildArgs>> children;

    public Optional<Output<List<ComponentChildArgs>>> children() {
        return Optional.ofNullable(this.children);
    }

    @Import(name="componentType", required=true)
    private Output<String> componentType;

    public Output<String> componentType() {
        return this.componentType;
    }

    @Import(name="events")
    private @Nullable Output<ComponentEventsArgs> events;

    public Optional<Output<ComponentEventsArgs>> events() {
        return Optional.ofNullable(this.events);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="properties", required=true)
    private Output<ComponentPropertiesArgs> properties;

    public Output<ComponentPropertiesArgs> properties() {
        return this.properties;
    }

    private ComponentChildArgs() {}

    private ComponentChildArgs(ComponentChildArgs $) {
        this.children = $.children;
        this.componentType = $.componentType;
        this.events = $.events;
        this.name = $.name;
        this.properties = $.properties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComponentChildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComponentChildArgs $;

        public Builder() {
            $ = new ComponentChildArgs();
        }

        public Builder(ComponentChildArgs defaults) {
            $ = new ComponentChildArgs(Objects.requireNonNull(defaults));
        }

        public Builder children(@Nullable Output<List<ComponentChildArgs>> children) {
            $.children = children;
            return this;
        }

        public Builder children(List<ComponentChildArgs> children) {
            return children(Output.of(children));
        }

        public Builder children(ComponentChildArgs... children) {
            return children(List.of(children));
        }

        public Builder componentType(Output<String> componentType) {
            $.componentType = componentType;
            return this;
        }

        public Builder componentType(String componentType) {
            return componentType(Output.of(componentType));
        }

        public Builder events(@Nullable Output<ComponentEventsArgs> events) {
            $.events = events;
            return this;
        }

        public Builder events(ComponentEventsArgs events) {
            return events(Output.of(events));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder properties(Output<ComponentPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(ComponentPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public ComponentChildArgs build() {
            $.componentType = Objects.requireNonNull($.componentType, "expected parameter 'componentType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            return $;
        }
    }

}
