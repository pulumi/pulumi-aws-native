// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.cloudformation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ModuleVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModuleVersionArgs Empty = new ModuleVersionArgs();

    /**
     * The name of the module being registered.
     * 
     * Recommended module naming pattern: company_or_organization::service::type::MODULE.
     * 
     */
    @Import(name="moduleName", required=true)
    private Output<String> moduleName;

    /**
     * @return The name of the module being registered.
     * 
     * Recommended module naming pattern: company_or_organization::service::type::MODULE.
     * 
     */
    public Output<String> moduleName() {
        return this.moduleName;
    }

    /**
     * The url to the S3 bucket containing the schema and template fragment for the module you want to register.
     * 
     */
    @Import(name="modulePackage", required=true)
    private Output<String> modulePackage;

    /**
     * @return The url to the S3 bucket containing the schema and template fragment for the module you want to register.
     * 
     */
    public Output<String> modulePackage() {
        return this.modulePackage;
    }

    private ModuleVersionArgs() {}

    private ModuleVersionArgs(ModuleVersionArgs $) {
        this.moduleName = $.moduleName;
        this.modulePackage = $.modulePackage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModuleVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModuleVersionArgs $;

        public Builder() {
            $ = new ModuleVersionArgs();
        }

        public Builder(ModuleVersionArgs defaults) {
            $ = new ModuleVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param moduleName The name of the module being registered.
         * 
         * Recommended module naming pattern: company_or_organization::service::type::MODULE.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(Output<String> moduleName) {
            $.moduleName = moduleName;
            return this;
        }

        /**
         * @param moduleName The name of the module being registered.
         * 
         * Recommended module naming pattern: company_or_organization::service::type::MODULE.
         * 
         * @return builder
         * 
         */
        public Builder moduleName(String moduleName) {
            return moduleName(Output.of(moduleName));
        }

        /**
         * @param modulePackage The url to the S3 bucket containing the schema and template fragment for the module you want to register.
         * 
         * @return builder
         * 
         */
        public Builder modulePackage(Output<String> modulePackage) {
            $.modulePackage = modulePackage;
            return this;
        }

        /**
         * @param modulePackage The url to the S3 bucket containing the schema and template fragment for the module you want to register.
         * 
         * @return builder
         * 
         */
        public Builder modulePackage(String modulePackage) {
            return modulePackage(Output.of(modulePackage));
        }

        public ModuleVersionArgs build() {
            $.moduleName = Objects.requireNonNull($.moduleName, "expected parameter 'moduleName' to be non-null");
            $.modulePackage = Objects.requireNonNull($.modulePackage, "expected parameter 'modulePackage' to be non-null");
            return $;
        }
    }

}
