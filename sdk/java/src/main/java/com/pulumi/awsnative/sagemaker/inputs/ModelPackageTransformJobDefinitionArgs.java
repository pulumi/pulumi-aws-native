// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformJobDefinitionBatchStrategy;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageEnvironmentArgs;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageTransformInputArgs;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageTransformOutputArgs;
import com.pulumi.awsnative.sagemaker.inputs.ModelPackageTransformResourcesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the input needed to run a transform job using the inference specification specified in the algorithm.
 * 
 */
public final class ModelPackageTransformJobDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelPackageTransformJobDefinitionArgs Empty = new ModelPackageTransformJobDefinitionArgs();

    /**
     * A string that determines the number of records included in a single mini-batch.
     * 
     */
    @Import(name="batchStrategy")
    private @Nullable Output<ModelPackageTransformJobDefinitionBatchStrategy> batchStrategy;

    /**
     * @return A string that determines the number of records included in a single mini-batch.
     * 
     */
    public Optional<Output<ModelPackageTransformJobDefinitionBatchStrategy>> batchStrategy() {
        return Optional.ofNullable(this.batchStrategy);
    }

    @Import(name="environment")
    private @Nullable Output<ModelPackageEnvironmentArgs> environment;

    public Optional<Output<ModelPackageEnvironmentArgs>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
     * 
     */
    @Import(name="maxConcurrentTransforms")
    private @Nullable Output<Integer> maxConcurrentTransforms;

    /**
     * @return The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentTransforms() {
        return Optional.ofNullable(this.maxConcurrentTransforms);
    }

    /**
     * The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
     * 
     */
    @Import(name="maxPayloadInMB")
    private @Nullable Output<Integer> maxPayloadInMB;

    /**
     * @return The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
     * 
     */
    public Optional<Output<Integer>> maxPayloadInMB() {
        return Optional.ofNullable(this.maxPayloadInMB);
    }

    @Import(name="transformInput", required=true)
    private Output<ModelPackageTransformInputArgs> transformInput;

    public Output<ModelPackageTransformInputArgs> transformInput() {
        return this.transformInput;
    }

    @Import(name="transformOutput", required=true)
    private Output<ModelPackageTransformOutputArgs> transformOutput;

    public Output<ModelPackageTransformOutputArgs> transformOutput() {
        return this.transformOutput;
    }

    @Import(name="transformResources", required=true)
    private Output<ModelPackageTransformResourcesArgs> transformResources;

    public Output<ModelPackageTransformResourcesArgs> transformResources() {
        return this.transformResources;
    }

    private ModelPackageTransformJobDefinitionArgs() {}

    private ModelPackageTransformJobDefinitionArgs(ModelPackageTransformJobDefinitionArgs $) {
        this.batchStrategy = $.batchStrategy;
        this.environment = $.environment;
        this.maxConcurrentTransforms = $.maxConcurrentTransforms;
        this.maxPayloadInMB = $.maxPayloadInMB;
        this.transformInput = $.transformInput;
        this.transformOutput = $.transformOutput;
        this.transformResources = $.transformResources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelPackageTransformJobDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelPackageTransformJobDefinitionArgs $;

        public Builder() {
            $ = new ModelPackageTransformJobDefinitionArgs();
        }

        public Builder(ModelPackageTransformJobDefinitionArgs defaults) {
            $ = new ModelPackageTransformJobDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param batchStrategy A string that determines the number of records included in a single mini-batch.
         * 
         * @return builder
         * 
         */
        public Builder batchStrategy(@Nullable Output<ModelPackageTransformJobDefinitionBatchStrategy> batchStrategy) {
            $.batchStrategy = batchStrategy;
            return this;
        }

        /**
         * @param batchStrategy A string that determines the number of records included in a single mini-batch.
         * 
         * @return builder
         * 
         */
        public Builder batchStrategy(ModelPackageTransformJobDefinitionBatchStrategy batchStrategy) {
            return batchStrategy(Output.of(batchStrategy));
        }

        public Builder environment(@Nullable Output<ModelPackageEnvironmentArgs> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(ModelPackageEnvironmentArgs environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param maxConcurrentTransforms The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentTransforms(@Nullable Output<Integer> maxConcurrentTransforms) {
            $.maxConcurrentTransforms = maxConcurrentTransforms;
            return this;
        }

        /**
         * @param maxConcurrentTransforms The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentTransforms(Integer maxConcurrentTransforms) {
            return maxConcurrentTransforms(Output.of(maxConcurrentTransforms));
        }

        /**
         * @param maxPayloadInMB The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
         * 
         * @return builder
         * 
         */
        public Builder maxPayloadInMB(@Nullable Output<Integer> maxPayloadInMB) {
            $.maxPayloadInMB = maxPayloadInMB;
            return this;
        }

        /**
         * @param maxPayloadInMB The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
         * 
         * @return builder
         * 
         */
        public Builder maxPayloadInMB(Integer maxPayloadInMB) {
            return maxPayloadInMB(Output.of(maxPayloadInMB));
        }

        public Builder transformInput(Output<ModelPackageTransformInputArgs> transformInput) {
            $.transformInput = transformInput;
            return this;
        }

        public Builder transformInput(ModelPackageTransformInputArgs transformInput) {
            return transformInput(Output.of(transformInput));
        }

        public Builder transformOutput(Output<ModelPackageTransformOutputArgs> transformOutput) {
            $.transformOutput = transformOutput;
            return this;
        }

        public Builder transformOutput(ModelPackageTransformOutputArgs transformOutput) {
            return transformOutput(Output.of(transformOutput));
        }

        public Builder transformResources(Output<ModelPackageTransformResourcesArgs> transformResources) {
            $.transformResources = transformResources;
            return this;
        }

        public Builder transformResources(ModelPackageTransformResourcesArgs transformResources) {
            return transformResources(Output.of(transformResources));
        }

        public ModelPackageTransformJobDefinitionArgs build() {
            $.transformInput = Objects.requireNonNull($.transformInput, "expected parameter 'transformInput' to be non-null");
            $.transformOutput = Objects.requireNonNull($.transformOutput, "expected parameter 'transformOutput' to be non-null");
            $.transformResources = Objects.requireNonNull($.transformResources, "expected parameter 'transformResources' to be non-null");
            return $;
        }
    }

}
