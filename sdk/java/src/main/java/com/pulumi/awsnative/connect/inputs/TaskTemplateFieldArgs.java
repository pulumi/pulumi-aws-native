// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.connect.inputs;

import com.pulumi.awsnative.connect.enums.TaskTemplateFieldType;
import com.pulumi.awsnative.connect.inputs.TaskTemplateFieldIdentifierArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A task template field object.
 * 
 */
public final class TaskTemplateFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskTemplateFieldArgs Empty = new TaskTemplateFieldArgs();

    /**
     * The description of the task template&#39;s field
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the task template&#39;s field
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="id", required=true)
    private Output<TaskTemplateFieldIdentifierArgs> id;

    public Output<TaskTemplateFieldIdentifierArgs> id() {
        return this.id;
    }

    /**
     * list of field options to be used with single select
     * 
     */
    @Import(name="singleSelectOptions")
    private @Nullable Output<List<String>> singleSelectOptions;

    /**
     * @return list of field options to be used with single select
     * 
     */
    public Optional<Output<List<String>>> singleSelectOptions() {
        return Optional.ofNullable(this.singleSelectOptions);
    }

    @Import(name="type", required=true)
    private Output<TaskTemplateFieldType> type;

    public Output<TaskTemplateFieldType> type() {
        return this.type;
    }

    private TaskTemplateFieldArgs() {}

    private TaskTemplateFieldArgs(TaskTemplateFieldArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.singleSelectOptions = $.singleSelectOptions;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskTemplateFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskTemplateFieldArgs $;

        public Builder() {
            $ = new TaskTemplateFieldArgs();
        }

        public Builder(TaskTemplateFieldArgs defaults) {
            $ = new TaskTemplateFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the task template&#39;s field
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the task template&#39;s field
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder id(Output<TaskTemplateFieldIdentifierArgs> id) {
            $.id = id;
            return this;
        }

        public Builder id(TaskTemplateFieldIdentifierArgs id) {
            return id(Output.of(id));
        }

        /**
         * @param singleSelectOptions list of field options to be used with single select
         * 
         * @return builder
         * 
         */
        public Builder singleSelectOptions(@Nullable Output<List<String>> singleSelectOptions) {
            $.singleSelectOptions = singleSelectOptions;
            return this;
        }

        /**
         * @param singleSelectOptions list of field options to be used with single select
         * 
         * @return builder
         * 
         */
        public Builder singleSelectOptions(List<String> singleSelectOptions) {
            return singleSelectOptions(Output.of(singleSelectOptions));
        }

        /**
         * @param singleSelectOptions list of field options to be used with single select
         * 
         * @return builder
         * 
         */
        public Builder singleSelectOptions(String... singleSelectOptions) {
            return singleSelectOptions(List.of(singleSelectOptions));
        }

        public Builder type(Output<TaskTemplateFieldType> type) {
            $.type = type;
            return this;
        }

        public Builder type(TaskTemplateFieldType type) {
            return type(Output.of(type));
        }

        public TaskTemplateFieldArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
