// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.inputs;

import com.pulumi.awsnative.sagemaker.inputs.ProjectProvisioningParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Input ServiceCatalog Provisioning Details
 * 
 */
public final class ServiceCatalogProvisioningDetailsPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceCatalogProvisioningDetailsPropertiesArgs Empty = new ServiceCatalogProvisioningDetailsPropertiesArgs();

    @Import(name="pathId")
    private @Nullable Output<String> pathId;

    public Optional<Output<String>> pathId() {
        return Optional.ofNullable(this.pathId);
    }

    @Import(name="productId", required=true)
    private Output<String> productId;

    public Output<String> productId() {
        return this.productId;
    }

    @Import(name="provisioningArtifactId")
    private @Nullable Output<String> provisioningArtifactId;

    public Optional<Output<String>> provisioningArtifactId() {
        return Optional.ofNullable(this.provisioningArtifactId);
    }

    /**
     * Parameters specified by the administrator that are required for provisioning the product.
     * 
     */
    @Import(name="provisioningParameters")
    private @Nullable Output<List<ProjectProvisioningParameterArgs>> provisioningParameters;

    /**
     * @return Parameters specified by the administrator that are required for provisioning the product.
     * 
     */
    public Optional<Output<List<ProjectProvisioningParameterArgs>>> provisioningParameters() {
        return Optional.ofNullable(this.provisioningParameters);
    }

    private ServiceCatalogProvisioningDetailsPropertiesArgs() {}

    private ServiceCatalogProvisioningDetailsPropertiesArgs(ServiceCatalogProvisioningDetailsPropertiesArgs $) {
        this.pathId = $.pathId;
        this.productId = $.productId;
        this.provisioningArtifactId = $.provisioningArtifactId;
        this.provisioningParameters = $.provisioningParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceCatalogProvisioningDetailsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceCatalogProvisioningDetailsPropertiesArgs $;

        public Builder() {
            $ = new ServiceCatalogProvisioningDetailsPropertiesArgs();
        }

        public Builder(ServiceCatalogProvisioningDetailsPropertiesArgs defaults) {
            $ = new ServiceCatalogProvisioningDetailsPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder pathId(@Nullable Output<String> pathId) {
            $.pathId = pathId;
            return this;
        }

        public Builder pathId(String pathId) {
            return pathId(Output.of(pathId));
        }

        public Builder productId(Output<String> productId) {
            $.productId = productId;
            return this;
        }

        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        public Builder provisioningArtifactId(@Nullable Output<String> provisioningArtifactId) {
            $.provisioningArtifactId = provisioningArtifactId;
            return this;
        }

        public Builder provisioningArtifactId(String provisioningArtifactId) {
            return provisioningArtifactId(Output.of(provisioningArtifactId));
        }

        /**
         * @param provisioningParameters Parameters specified by the administrator that are required for provisioning the product.
         * 
         * @return builder
         * 
         */
        public Builder provisioningParameters(@Nullable Output<List<ProjectProvisioningParameterArgs>> provisioningParameters) {
            $.provisioningParameters = provisioningParameters;
            return this;
        }

        /**
         * @param provisioningParameters Parameters specified by the administrator that are required for provisioning the product.
         * 
         * @return builder
         * 
         */
        public Builder provisioningParameters(List<ProjectProvisioningParameterArgs> provisioningParameters) {
            return provisioningParameters(Output.of(provisioningParameters));
        }

        /**
         * @param provisioningParameters Parameters specified by the administrator that are required for provisioning the product.
         * 
         * @return builder
         * 
         */
        public Builder provisioningParameters(ProjectProvisioningParameterArgs... provisioningParameters) {
            return provisioningParameters(List.of(provisioningParameters));
        }

        public ServiceCatalogProvisioningDetailsPropertiesArgs build() {
            $.productId = Objects.requireNonNull($.productId, "expected parameter 'productId' to be non-null");
            return $;
        }
    }

}
