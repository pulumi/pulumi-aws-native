// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.backup.outputs;

import com.pulumi.awsnative.backup.outputs.FrameworkControl;
import com.pulumi.awsnative.backup.outputs.FrameworkTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFrameworkResult {
    /**
     * @return The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC). The value of `CreationTime` is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
     * 
     */
    private @Nullable Double creationTime;
    /**
     * @return The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`
     * 
     */
    private @Nullable String deploymentStatus;
    /**
     * @return An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
     * 
     */
    private @Nullable String frameworkArn;
    /**
     * @return Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
     * 
     */
    private @Nullable List<FrameworkControl> frameworkControls;
    /**
     * @return An optional description of the framework with a maximum 1,024 characters.
     * 
     */
    private @Nullable String frameworkDescription;
    /**
     * @return A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:
     * 
     * `ACTIVE` when recording is turned on for all resources governed by the framework.
     * 
     * `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.
     * 
     * `INACTIVE` when recording is turned off for all resources governed by the framework.
     * 
     * `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
     * 
     */
    private @Nullable String frameworkStatus;
    /**
     * @return Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     * 
     */
    private @Nullable List<FrameworkTag> frameworkTags;

    private GetFrameworkResult() {}
    /**
     * @return The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC). The value of `CreationTime` is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
     * 
     */
    public Optional<Double> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }
    /**
     * @return The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`
     * 
     */
    public Optional<String> deploymentStatus() {
        return Optional.ofNullable(this.deploymentStatus);
    }
    /**
     * @return An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
     * 
     */
    public Optional<String> frameworkArn() {
        return Optional.ofNullable(this.frameworkArn);
    }
    /**
     * @return Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
     * 
     */
    public List<FrameworkControl> frameworkControls() {
        return this.frameworkControls == null ? List.of() : this.frameworkControls;
    }
    /**
     * @return An optional description of the framework with a maximum 1,024 characters.
     * 
     */
    public Optional<String> frameworkDescription() {
        return Optional.ofNullable(this.frameworkDescription);
    }
    /**
     * @return A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:
     * 
     * `ACTIVE` when recording is turned on for all resources governed by the framework.
     * 
     * `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.
     * 
     * `INACTIVE` when recording is turned off for all resources governed by the framework.
     * 
     * `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
     * 
     */
    public Optional<String> frameworkStatus() {
        return Optional.ofNullable(this.frameworkStatus);
    }
    /**
     * @return Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
     * 
     */
    public List<FrameworkTag> frameworkTags() {
        return this.frameworkTags == null ? List.of() : this.frameworkTags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFrameworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double creationTime;
        private @Nullable String deploymentStatus;
        private @Nullable String frameworkArn;
        private @Nullable List<FrameworkControl> frameworkControls;
        private @Nullable String frameworkDescription;
        private @Nullable String frameworkStatus;
        private @Nullable List<FrameworkTag> frameworkTags;
        public Builder() {}
        public Builder(GetFrameworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.deploymentStatus = defaults.deploymentStatus;
    	      this.frameworkArn = defaults.frameworkArn;
    	      this.frameworkControls = defaults.frameworkControls;
    	      this.frameworkDescription = defaults.frameworkDescription;
    	      this.frameworkStatus = defaults.frameworkStatus;
    	      this.frameworkTags = defaults.frameworkTags;
        }

        @CustomType.Setter
        public Builder creationTime(@Nullable Double creationTime) {
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentStatus(@Nullable String deploymentStatus) {
            this.deploymentStatus = deploymentStatus;
            return this;
        }
        @CustomType.Setter
        public Builder frameworkArn(@Nullable String frameworkArn) {
            this.frameworkArn = frameworkArn;
            return this;
        }
        @CustomType.Setter
        public Builder frameworkControls(@Nullable List<FrameworkControl> frameworkControls) {
            this.frameworkControls = frameworkControls;
            return this;
        }
        public Builder frameworkControls(FrameworkControl... frameworkControls) {
            return frameworkControls(List.of(frameworkControls));
        }
        @CustomType.Setter
        public Builder frameworkDescription(@Nullable String frameworkDescription) {
            this.frameworkDescription = frameworkDescription;
            return this;
        }
        @CustomType.Setter
        public Builder frameworkStatus(@Nullable String frameworkStatus) {
            this.frameworkStatus = frameworkStatus;
            return this;
        }
        @CustomType.Setter
        public Builder frameworkTags(@Nullable List<FrameworkTag> frameworkTags) {
            this.frameworkTags = frameworkTags;
            return this;
        }
        public Builder frameworkTags(FrameworkTag... frameworkTags) {
            return frameworkTags(List.of(frameworkTags));
        }
        public GetFrameworkResult build() {
            final var o = new GetFrameworkResult();
            o.creationTime = creationTime;
            o.deploymentStatus = deploymentStatus;
            o.frameworkArn = frameworkArn;
            o.frameworkControls = frameworkControls;
            o.frameworkDescription = frameworkDescription;
            o.frameworkStatus = frameworkStatus;
            o.frameworkTags = frameworkTags;
            return o;
        }
    }
}
