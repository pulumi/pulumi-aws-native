// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.nimblestudio.inputs;

import com.pulumi.awsnative.nimblestudio.enums.LaunchProfileStreamingSessionStorageMode;
import com.pulumi.awsnative.nimblestudio.inputs.LaunchProfileStreamingSessionStorageRootArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * &lt;p&gt;The configuration for a streaming sessionâ€™s upload storage.&lt;/p&gt;
 * 
 */
public final class LaunchProfileStreamConfigurationSessionStorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final LaunchProfileStreamConfigurationSessionStorageArgs Empty = new LaunchProfileStreamConfigurationSessionStorageArgs();

    /**
     * &lt;p&gt;Allows artists to upload files to their workstations. The only valid option is
     *                 &lt;code&gt;UPLOAD&lt;/code&gt;.&lt;/p&gt;
     * 
     */
    @Import(name="mode")
    private @Nullable Output<List<LaunchProfileStreamingSessionStorageMode>> mode;

    /**
     * @return &lt;p&gt;Allows artists to upload files to their workstations. The only valid option is
     *                 &lt;code&gt;UPLOAD&lt;/code&gt;.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<LaunchProfileStreamingSessionStorageMode>>> mode() {
        return Optional.ofNullable(this.mode);
    }

    @Import(name="root")
    private @Nullable Output<LaunchProfileStreamingSessionStorageRootArgs> root;

    public Optional<Output<LaunchProfileStreamingSessionStorageRootArgs>> root() {
        return Optional.ofNullable(this.root);
    }

    private LaunchProfileStreamConfigurationSessionStorageArgs() {}

    private LaunchProfileStreamConfigurationSessionStorageArgs(LaunchProfileStreamConfigurationSessionStorageArgs $) {
        this.mode = $.mode;
        this.root = $.root;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchProfileStreamConfigurationSessionStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchProfileStreamConfigurationSessionStorageArgs $;

        public Builder() {
            $ = new LaunchProfileStreamConfigurationSessionStorageArgs();
        }

        public Builder(LaunchProfileStreamConfigurationSessionStorageArgs defaults) {
            $ = new LaunchProfileStreamConfigurationSessionStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode &lt;p&gt;Allows artists to upload files to their workstations. The only valid option is
         *                 &lt;code&gt;UPLOAD&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<List<LaunchProfileStreamingSessionStorageMode>> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode &lt;p&gt;Allows artists to upload files to their workstations. The only valid option is
         *                 &lt;code&gt;UPLOAD&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder mode(List<LaunchProfileStreamingSessionStorageMode> mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param mode &lt;p&gt;Allows artists to upload files to their workstations. The only valid option is
         *                 &lt;code&gt;UPLOAD&lt;/code&gt;.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder mode(LaunchProfileStreamingSessionStorageMode... mode) {
            return mode(List.of(mode));
        }

        public Builder root(@Nullable Output<LaunchProfileStreamingSessionStorageRootArgs> root) {
            $.root = root;
            return this;
        }

        public Builder root(LaunchProfileStreamingSessionStorageRootArgs root) {
            return root(Output.of(root));
        }

        public LaunchProfileStreamConfigurationSessionStorageArgs build() {
            return $;
        }
    }

}
