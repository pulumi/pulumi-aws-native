// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssmcontacts;

import com.pulumi.awsnative.ssmcontacts.enums.ContactType;
import com.pulumi.awsnative.ssmcontacts.inputs.ContactStageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    /**
     * Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
     * 
     */
    @Import(name="alias", required=true)
    private Output<String> alias;

    /**
     * @return Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
     * 
     */
    public Output<String> alias() {
        return this.alias;
    }

    /**
     * Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The stages that an escalation plan or engagement plan engages contacts and contact methods in.
     * 
     */
    @Import(name="plan", required=true)
    private Output<List<ContactStageArgs>> plan;

    /**
     * @return The stages that an escalation plan or engagement plan engages contacts and contact methods in.
     * 
     */
    public Output<List<ContactStageArgs>> plan() {
        return this.plan;
    }

    /**
     * Contact type, which specify type of contact. Currently supported values: “PERSONAL”, “SHARED”, “OTHER“.
     * 
     */
    @Import(name="type", required=true)
    private Output<ContactType> type;

    /**
     * @return Contact type, which specify type of contact. Currently supported values: “PERSONAL”, “SHARED”, “OTHER“.
     * 
     */
    public Output<ContactType> type() {
        return this.type;
    }

    private ContactArgs() {}

    private ContactArgs(ContactArgs $) {
        this.alias = $.alias;
        this.displayName = $.displayName;
        this.plan = $.plan;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactArgs $;

        public Builder() {
            $ = new ContactArgs();
        }

        public Builder(ContactArgs defaults) {
            $ = new ContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
         * 
         * @return builder
         * 
         */
        public Builder alias(Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Alias of the contact. String value with 20 to 256 characters. Only alphabetical, numeric characters, dash, or underscore allowed.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param displayName Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Name of the contact. String value with 3 to 256 characters. Only alphabetical, space, numeric characters, dash, or underscore allowed.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param plan The stages that an escalation plan or engagement plan engages contacts and contact methods in.
         * 
         * @return builder
         * 
         */
        public Builder plan(Output<List<ContactStageArgs>> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan The stages that an escalation plan or engagement plan engages contacts and contact methods in.
         * 
         * @return builder
         * 
         */
        public Builder plan(List<ContactStageArgs> plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param plan The stages that an escalation plan or engagement plan engages contacts and contact methods in.
         * 
         * @return builder
         * 
         */
        public Builder plan(ContactStageArgs... plan) {
            return plan(List.of(plan));
        }

        /**
         * @param type Contact type, which specify type of contact. Currently supported values: “PERSONAL”, “SHARED”, “OTHER“.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<ContactType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Contact type, which specify type of contact. Currently supported values: “PERSONAL”, “SHARED”, “OTHER“.
         * 
         * @return builder
         * 
         */
        public Builder type(ContactType type) {
            return type(Output.of(type));
        }

        public ContactArgs build() {
            $.alias = Objects.requireNonNull($.alias, "expected parameter 'alias' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.plan = Objects.requireNonNull($.plan, "expected parameter 'plan' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
