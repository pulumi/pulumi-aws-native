// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.accessanalyzer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnalyzerFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final AnalyzerFilterArgs Empty = new AnalyzerFilterArgs();

    @Import(name="contains")
    private @Nullable Output<List<String>> contains;

    public Optional<Output<List<String>>> contains() {
        return Optional.ofNullable(this.contains);
    }

    @Import(name="eq")
    private @Nullable Output<List<String>> eq;

    public Optional<Output<List<String>>> eq() {
        return Optional.ofNullable(this.eq);
    }

    @Import(name="exists")
    private @Nullable Output<Boolean> exists;

    public Optional<Output<Boolean>> exists() {
        return Optional.ofNullable(this.exists);
    }

    @Import(name="neq")
    private @Nullable Output<List<String>> neq;

    public Optional<Output<List<String>>> neq() {
        return Optional.ofNullable(this.neq);
    }

    @Import(name="property", required=true)
    private Output<String> property;

    public Output<String> property() {
        return this.property;
    }

    private AnalyzerFilterArgs() {}

    private AnalyzerFilterArgs(AnalyzerFilterArgs $) {
        this.contains = $.contains;
        this.eq = $.eq;
        this.exists = $.exists;
        this.neq = $.neq;
        this.property = $.property;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnalyzerFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnalyzerFilterArgs $;

        public Builder() {
            $ = new AnalyzerFilterArgs();
        }

        public Builder(AnalyzerFilterArgs defaults) {
            $ = new AnalyzerFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder contains(@Nullable Output<List<String>> contains) {
            $.contains = contains;
            return this;
        }

        public Builder contains(List<String> contains) {
            return contains(Output.of(contains));
        }

        public Builder contains(String... contains) {
            return contains(List.of(contains));
        }

        public Builder eq(@Nullable Output<List<String>> eq) {
            $.eq = eq;
            return this;
        }

        public Builder eq(List<String> eq) {
            return eq(Output.of(eq));
        }

        public Builder eq(String... eq) {
            return eq(List.of(eq));
        }

        public Builder exists(@Nullable Output<Boolean> exists) {
            $.exists = exists;
            return this;
        }

        public Builder exists(Boolean exists) {
            return exists(Output.of(exists));
        }

        public Builder neq(@Nullable Output<List<String>> neq) {
            $.neq = neq;
            return this;
        }

        public Builder neq(List<String> neq) {
            return neq(Output.of(neq));
        }

        public Builder neq(String... neq) {
            return neq(List.of(neq));
        }

        public Builder property(Output<String> property) {
            $.property = property;
            return this;
        }

        public Builder property(String property) {
            return property(Output.of(property));
        }

        public AnalyzerFilterArgs build() {
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            return $;
        }
    }

}
