// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs.inputs;

import com.pulumi.awsnative.ecs.enums.TaskSetScaleUnit;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskSetScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskSetScaleArgs Empty = new TaskSetScaleArgs();

    /**
     * The unit of measure for the scale value.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<TaskSetScaleUnit> unit;

    /**
     * @return The unit of measure for the scale value.
     * 
     */
    public Optional<Output<TaskSetScaleUnit>> unit() {
        return Optional.ofNullable(this.unit);
    }

    /**
     * The value, specified as a percent total of a service&#39;s desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Double> value;

    /**
     * @return The value, specified as a percent total of a service&#39;s desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
     * 
     */
    public Optional<Output<Double>> value() {
        return Optional.ofNullable(this.value);
    }

    private TaskSetScaleArgs() {}

    private TaskSetScaleArgs(TaskSetScaleArgs $) {
        this.unit = $.unit;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskSetScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskSetScaleArgs $;

        public Builder() {
            $ = new TaskSetScaleArgs();
        }

        public Builder(TaskSetScaleArgs defaults) {
            $ = new TaskSetScaleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param unit The unit of measure for the scale value.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<TaskSetScaleUnit> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit The unit of measure for the scale value.
         * 
         * @return builder
         * 
         */
        public Builder unit(TaskSetScaleUnit unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param value The value, specified as a percent total of a service&#39;s desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Double> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value, specified as a percent total of a service&#39;s desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public TaskSetScaleArgs build() {
            return $;
        }
    }

}
