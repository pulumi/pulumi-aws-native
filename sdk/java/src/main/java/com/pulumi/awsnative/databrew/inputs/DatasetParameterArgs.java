// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.databrew.inputs;

import com.pulumi.awsnative.databrew.enums.DatasetParameterType;
import com.pulumi.awsnative.databrew.inputs.DatasetDatetimeOptionsArgs;
import com.pulumi.awsnative.databrew.inputs.DatasetFilterExpressionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatasetParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetParameterArgs Empty = new DatasetParameterArgs();

    /**
     * Add the value of this parameter as a column in a dataset.
     * 
     */
    @Import(name="createColumn")
    private @Nullable Output<Boolean> createColumn;

    /**
     * @return Add the value of this parameter as a column in a dataset.
     * 
     */
    public Optional<Output<Boolean>> createColumn() {
        return Optional.ofNullable(this.createColumn);
    }

    @Import(name="datetimeOptions")
    private @Nullable Output<DatasetDatetimeOptionsArgs> datetimeOptions;

    public Optional<Output<DatasetDatetimeOptionsArgs>> datetimeOptions() {
        return Optional.ofNullable(this.datetimeOptions);
    }

    @Import(name="filter")
    private @Nullable Output<DatasetFilterExpressionArgs> filter;

    public Optional<Output<DatasetFilterExpressionArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Parameter type
     * 
     */
    @Import(name="type", required=true)
    private Output<DatasetParameterType> type;

    /**
     * @return Parameter type
     * 
     */
    public Output<DatasetParameterType> type() {
        return this.type;
    }

    private DatasetParameterArgs() {}

    private DatasetParameterArgs(DatasetParameterArgs $) {
        this.createColumn = $.createColumn;
        this.datetimeOptions = $.datetimeOptions;
        this.filter = $.filter;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetParameterArgs $;

        public Builder() {
            $ = new DatasetParameterArgs();
        }

        public Builder(DatasetParameterArgs defaults) {
            $ = new DatasetParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createColumn Add the value of this parameter as a column in a dataset.
         * 
         * @return builder
         * 
         */
        public Builder createColumn(@Nullable Output<Boolean> createColumn) {
            $.createColumn = createColumn;
            return this;
        }

        /**
         * @param createColumn Add the value of this parameter as a column in a dataset.
         * 
         * @return builder
         * 
         */
        public Builder createColumn(Boolean createColumn) {
            return createColumn(Output.of(createColumn));
        }

        public Builder datetimeOptions(@Nullable Output<DatasetDatetimeOptionsArgs> datetimeOptions) {
            $.datetimeOptions = datetimeOptions;
            return this;
        }

        public Builder datetimeOptions(DatasetDatetimeOptionsArgs datetimeOptions) {
            return datetimeOptions(Output.of(datetimeOptions));
        }

        public Builder filter(@Nullable Output<DatasetFilterExpressionArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(DatasetFilterExpressionArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Parameter type
         * 
         * @return builder
         * 
         */
        public Builder type(Output<DatasetParameterType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Parameter type
         * 
         * @return builder
         * 
         */
        public Builder type(DatasetParameterType type) {
            return type(Output.of(type));
        }

        public DatasetParameterArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
