// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.awsnative.lightsail.outputs.DatabaseTag;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    private @Nullable Boolean backupRetention;
    /**
     * @return Indicates the certificate that needs to be associated with the database.
     * 
     */
    private @Nullable String caCertificateIdentifier;
    private @Nullable String databaseArn;
    /**
     * @return The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    private @Nullable String preferredBackupWindow;
    /**
     * @return The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    private @Nullable String preferredMaintenanceWindow;
    /**
     * @return Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    private @Nullable Boolean publiclyAccessible;
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    private @Nullable List<DatabaseTag> tags;

    private GetDatabaseResult() {}
    /**
     * @return When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
     * 
     */
    public Optional<Boolean> backupRetention() {
        return Optional.ofNullable(this.backupRetention);
    }
    /**
     * @return Indicates the certificate that needs to be associated with the database.
     * 
     */
    public Optional<String> caCertificateIdentifier() {
        return Optional.ofNullable(this.caCertificateIdentifier);
    }
    public Optional<String> databaseArn() {
        return Optional.ofNullable(this.databaseArn);
    }
    /**
     * @return The daily time range during which automated backups are created for your new database if automated backups are enabled.
     * 
     */
    public Optional<String> preferredBackupWindow() {
        return Optional.ofNullable(this.preferredBackupWindow);
    }
    /**
     * @return The weekly time range during which system maintenance can occur on your new database.
     * 
     */
    public Optional<String> preferredMaintenanceWindow() {
        return Optional.ofNullable(this.preferredMaintenanceWindow);
    }
    /**
     * @return Specifies the accessibility options for your new database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
     * 
     */
    public Optional<Boolean> publiclyAccessible() {
        return Optional.ofNullable(this.publiclyAccessible);
    }
    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public List<DatabaseTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean backupRetention;
        private @Nullable String caCertificateIdentifier;
        private @Nullable String databaseArn;
        private @Nullable String preferredBackupWindow;
        private @Nullable String preferredMaintenanceWindow;
        private @Nullable Boolean publiclyAccessible;
        private @Nullable List<DatabaseTag> tags;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupRetention = defaults.backupRetention;
    	      this.caCertificateIdentifier = defaults.caCertificateIdentifier;
    	      this.databaseArn = defaults.databaseArn;
    	      this.preferredBackupWindow = defaults.preferredBackupWindow;
    	      this.preferredMaintenanceWindow = defaults.preferredMaintenanceWindow;
    	      this.publiclyAccessible = defaults.publiclyAccessible;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder backupRetention(@Nullable Boolean backupRetention) {
            this.backupRetention = backupRetention;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateIdentifier(@Nullable String caCertificateIdentifier) {
            this.caCertificateIdentifier = caCertificateIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder databaseArn(@Nullable String databaseArn) {
            this.databaseArn = databaseArn;
            return this;
        }
        @CustomType.Setter
        public Builder preferredBackupWindow(@Nullable String preferredBackupWindow) {
            this.preferredBackupWindow = preferredBackupWindow;
            return this;
        }
        @CustomType.Setter
        public Builder preferredMaintenanceWindow(@Nullable String preferredMaintenanceWindow) {
            this.preferredMaintenanceWindow = preferredMaintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder publiclyAccessible(@Nullable Boolean publiclyAccessible) {
            this.publiclyAccessible = publiclyAccessible;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DatabaseTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DatabaseTag... tags) {
            return tags(List.of(tags));
        }
        public GetDatabaseResult build() {
            final var o = new GetDatabaseResult();
            o.backupRetention = backupRetention;
            o.caCertificateIdentifier = caCertificateIdentifier;
            o.databaseArn = databaseArn;
            o.preferredBackupWindow = preferredBackupWindow;
            o.preferredMaintenanceWindow = preferredMaintenanceWindow;
            o.publiclyAccessible = publiclyAccessible;
            o.tags = tags;
            return o;
        }
    }
}
