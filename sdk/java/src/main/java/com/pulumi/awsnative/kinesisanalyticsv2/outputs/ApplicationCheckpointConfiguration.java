// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.outputs;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationCheckpointConfigurationConfigurationType;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationCheckpointConfiguration {
    /**
     * @return Describes the interval in milliseconds between checkpoint operations.
     * 
     */
    private @Nullable Integer checkpointInterval;
    /**
     * @return Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     * 
     */
    private @Nullable Boolean checkpointingEnabled;
    /**
     * @return Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
     * 
     */
    private ApplicationCheckpointConfigurationConfigurationType configurationType;
    /**
     * @return Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
     * 
     */
    private @Nullable Integer minPauseBetweenCheckpoints;

    private ApplicationCheckpointConfiguration() {}
    /**
     * @return Describes the interval in milliseconds between checkpoint operations.
     * 
     */
    public Optional<Integer> checkpointInterval() {
        return Optional.ofNullable(this.checkpointInterval);
    }
    /**
     * @return Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     * 
     */
    public Optional<Boolean> checkpointingEnabled() {
        return Optional.ofNullable(this.checkpointingEnabled);
    }
    /**
     * @return Describes whether the application uses Kinesis Data Analytics&#39; default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
     * 
     */
    public ApplicationCheckpointConfigurationConfigurationType configurationType() {
        return this.configurationType;
    }
    /**
     * @return Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
     * 
     */
    public Optional<Integer> minPauseBetweenCheckpoints() {
        return Optional.ofNullable(this.minPauseBetweenCheckpoints);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationCheckpointConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer checkpointInterval;
        private @Nullable Boolean checkpointingEnabled;
        private ApplicationCheckpointConfigurationConfigurationType configurationType;
        private @Nullable Integer minPauseBetweenCheckpoints;
        public Builder() {}
        public Builder(ApplicationCheckpointConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkpointInterval = defaults.checkpointInterval;
    	      this.checkpointingEnabled = defaults.checkpointingEnabled;
    	      this.configurationType = defaults.configurationType;
    	      this.minPauseBetweenCheckpoints = defaults.minPauseBetweenCheckpoints;
        }

        @CustomType.Setter
        public Builder checkpointInterval(@Nullable Integer checkpointInterval) {
            this.checkpointInterval = checkpointInterval;
            return this;
        }
        @CustomType.Setter
        public Builder checkpointingEnabled(@Nullable Boolean checkpointingEnabled) {
            this.checkpointingEnabled = checkpointingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder configurationType(ApplicationCheckpointConfigurationConfigurationType configurationType) {
            this.configurationType = Objects.requireNonNull(configurationType);
            return this;
        }
        @CustomType.Setter
        public Builder minPauseBetweenCheckpoints(@Nullable Integer minPauseBetweenCheckpoints) {
            this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
            return this;
        }
        public ApplicationCheckpointConfiguration build() {
            final var o = new ApplicationCheckpointConfiguration();
            o.checkpointInterval = checkpointInterval;
            o.checkpointingEnabled = checkpointingEnabled;
            o.configurationType = configurationType;
            o.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
            return o;
        }
    }
}
