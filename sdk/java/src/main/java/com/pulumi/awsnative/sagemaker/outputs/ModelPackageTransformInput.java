// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.outputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformInputCompressionType;
import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformInputSplitType;
import com.pulumi.awsnative.sagemaker.outputs.ModelPackageDataSource;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelPackageTransformInput {
    /**
     * @return If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
     * 
     */
    private @Nullable ModelPackageTransformInputCompressionType compressionType;
    /**
     * @return The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
     * 
     */
    private @Nullable String contentType;
    private ModelPackageDataSource dataSource;
    /**
     * @return The method to use to split the transform job&#39;s data files into smaller batches.
     * 
     */
    private @Nullable ModelPackageTransformInputSplitType splitType;

    private ModelPackageTransformInput() {}
    /**
     * @return If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
     * 
     */
    public Optional<ModelPackageTransformInputCompressionType> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }
    /**
     * @return The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    public ModelPackageDataSource dataSource() {
        return this.dataSource;
    }
    /**
     * @return The method to use to split the transform job&#39;s data files into smaller batches.
     * 
     */
    public Optional<ModelPackageTransformInputSplitType> splitType() {
        return Optional.ofNullable(this.splitType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelPackageTransformInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ModelPackageTransformInputCompressionType compressionType;
        private @Nullable String contentType;
        private ModelPackageDataSource dataSource;
        private @Nullable ModelPackageTransformInputSplitType splitType;
        public Builder() {}
        public Builder(ModelPackageTransformInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compressionType = defaults.compressionType;
    	      this.contentType = defaults.contentType;
    	      this.dataSource = defaults.dataSource;
    	      this.splitType = defaults.splitType;
        }

        @CustomType.Setter
        public Builder compressionType(@Nullable ModelPackageTransformInputCompressionType compressionType) {
            this.compressionType = compressionType;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder dataSource(ModelPackageDataSource dataSource) {
            this.dataSource = Objects.requireNonNull(dataSource);
            return this;
        }
        @CustomType.Setter
        public Builder splitType(@Nullable ModelPackageTransformInputSplitType splitType) {
            this.splitType = splitType;
            return this;
        }
        public ModelPackageTransformInput build() {
            final var o = new ModelPackageTransformInput();
            o.compressionType = compressionType;
            o.contentType = contentType;
            o.dataSource = dataSource;
            o.splitType = splitType;
            return o;
        }
    }
}
