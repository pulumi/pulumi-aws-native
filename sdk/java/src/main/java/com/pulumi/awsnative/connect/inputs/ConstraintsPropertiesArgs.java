// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.connect.inputs;

import com.pulumi.awsnative.connect.inputs.TaskTemplateInvisibleFieldInfoArgs;
import com.pulumi.awsnative.connect.inputs.TaskTemplateReadOnlyFieldInfoArgs;
import com.pulumi.awsnative.connect.inputs.TaskTemplateRequiredFieldInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The constraints for the task template
 * 
 */
public final class ConstraintsPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConstraintsPropertiesArgs Empty = new ConstraintsPropertiesArgs();

    @Import(name="invisibleFields")
    private @Nullable Output<List<TaskTemplateInvisibleFieldInfoArgs>> invisibleFields;

    public Optional<Output<List<TaskTemplateInvisibleFieldInfoArgs>>> invisibleFields() {
        return Optional.ofNullable(this.invisibleFields);
    }

    @Import(name="readOnlyFields")
    private @Nullable Output<List<TaskTemplateReadOnlyFieldInfoArgs>> readOnlyFields;

    public Optional<Output<List<TaskTemplateReadOnlyFieldInfoArgs>>> readOnlyFields() {
        return Optional.ofNullable(this.readOnlyFields);
    }

    @Import(name="requiredFields")
    private @Nullable Output<List<TaskTemplateRequiredFieldInfoArgs>> requiredFields;

    public Optional<Output<List<TaskTemplateRequiredFieldInfoArgs>>> requiredFields() {
        return Optional.ofNullable(this.requiredFields);
    }

    private ConstraintsPropertiesArgs() {}

    private ConstraintsPropertiesArgs(ConstraintsPropertiesArgs $) {
        this.invisibleFields = $.invisibleFields;
        this.readOnlyFields = $.readOnlyFields;
        this.requiredFields = $.requiredFields;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConstraintsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConstraintsPropertiesArgs $;

        public Builder() {
            $ = new ConstraintsPropertiesArgs();
        }

        public Builder(ConstraintsPropertiesArgs defaults) {
            $ = new ConstraintsPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder invisibleFields(@Nullable Output<List<TaskTemplateInvisibleFieldInfoArgs>> invisibleFields) {
            $.invisibleFields = invisibleFields;
            return this;
        }

        public Builder invisibleFields(List<TaskTemplateInvisibleFieldInfoArgs> invisibleFields) {
            return invisibleFields(Output.of(invisibleFields));
        }

        public Builder invisibleFields(TaskTemplateInvisibleFieldInfoArgs... invisibleFields) {
            return invisibleFields(List.of(invisibleFields));
        }

        public Builder readOnlyFields(@Nullable Output<List<TaskTemplateReadOnlyFieldInfoArgs>> readOnlyFields) {
            $.readOnlyFields = readOnlyFields;
            return this;
        }

        public Builder readOnlyFields(List<TaskTemplateReadOnlyFieldInfoArgs> readOnlyFields) {
            return readOnlyFields(Output.of(readOnlyFields));
        }

        public Builder readOnlyFields(TaskTemplateReadOnlyFieldInfoArgs... readOnlyFields) {
            return readOnlyFields(List.of(readOnlyFields));
        }

        public Builder requiredFields(@Nullable Output<List<TaskTemplateRequiredFieldInfoArgs>> requiredFields) {
            $.requiredFields = requiredFields;
            return this;
        }

        public Builder requiredFields(List<TaskTemplateRequiredFieldInfoArgs> requiredFields) {
            return requiredFields(Output.of(requiredFields));
        }

        public Builder requiredFields(TaskTemplateRequiredFieldInfoArgs... requiredFields) {
            return requiredFields(List.of(requiredFields));
        }

        public ConstraintsPropertiesArgs build() {
            return $;
        }
    }

}
