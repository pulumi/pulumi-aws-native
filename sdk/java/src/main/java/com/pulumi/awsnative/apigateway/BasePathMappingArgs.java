// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.apigateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasePathMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasePathMappingArgs Empty = new BasePathMappingArgs();

    /**
     * The base path name that callers of the API must provide in the URL after the domain name.
     * 
     */
    @Import(name="basePath")
    private @Nullable Output<String> basePath;

    /**
     * @return The base path name that callers of the API must provide in the URL after the domain name.
     * 
     */
    public Optional<Output<String>> basePath() {
        return Optional.ofNullable(this.basePath);
    }

    /**
     * The DomainName of an AWS::ApiGateway::DomainName resource.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return The DomainName of an AWS::ApiGateway::DomainName resource.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The ID of the API.
     * 
     */
    @Import(name="restApiId")
    private @Nullable Output<String> restApiId;

    /**
     * @return The ID of the API.
     * 
     */
    public Optional<Output<String>> restApiId() {
        return Optional.ofNullable(this.restApiId);
    }

    /**
     * The name of the API&#39;s stage.
     * 
     */
    @Import(name="stage")
    private @Nullable Output<String> stage;

    /**
     * @return The name of the API&#39;s stage.
     * 
     */
    public Optional<Output<String>> stage() {
        return Optional.ofNullable(this.stage);
    }

    private BasePathMappingArgs() {}

    private BasePathMappingArgs(BasePathMappingArgs $) {
        this.basePath = $.basePath;
        this.domainName = $.domainName;
        this.restApiId = $.restApiId;
        this.stage = $.stage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasePathMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasePathMappingArgs $;

        public Builder() {
            $ = new BasePathMappingArgs();
        }

        public Builder(BasePathMappingArgs defaults) {
            $ = new BasePathMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param basePath The base path name that callers of the API must provide in the URL after the domain name.
         * 
         * @return builder
         * 
         */
        public Builder basePath(@Nullable Output<String> basePath) {
            $.basePath = basePath;
            return this;
        }

        /**
         * @param basePath The base path name that callers of the API must provide in the URL after the domain name.
         * 
         * @return builder
         * 
         */
        public Builder basePath(String basePath) {
            return basePath(Output.of(basePath));
        }

        /**
         * @param domainName The DomainName of an AWS::ApiGateway::DomainName resource.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName The DomainName of an AWS::ApiGateway::DomainName resource.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param restApiId The ID of the API.
         * 
         * @return builder
         * 
         */
        public Builder restApiId(@Nullable Output<String> restApiId) {
            $.restApiId = restApiId;
            return this;
        }

        /**
         * @param restApiId The ID of the API.
         * 
         * @return builder
         * 
         */
        public Builder restApiId(String restApiId) {
            return restApiId(Output.of(restApiId));
        }

        /**
         * @param stage The name of the API&#39;s stage.
         * 
         * @return builder
         * 
         */
        public Builder stage(@Nullable Output<String> stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param stage The name of the API&#39;s stage.
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            return stage(Output.of(stage));
        }

        public BasePathMappingArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            return $;
        }
    }

}
