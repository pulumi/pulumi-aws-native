// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ThemeUIColorPalette {
    /**
     * @return &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    private @Nullable String accent;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    private @Nullable String accentForeground;
    /**
     * @return &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    private @Nullable String danger;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    private @Nullable String dangerForeground;
    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    private @Nullable String dimension;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    private @Nullable String dimensionForeground;
    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    private @Nullable String measure;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    private @Nullable String measureForeground;
    /**
     * @return &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    private @Nullable String primaryBackground;
    /**
     * @return &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    private @Nullable String primaryForeground;
    /**
     * @return &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    private @Nullable String secondaryBackground;
    /**
     * @return &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    private @Nullable String secondaryForeground;
    /**
     * @return &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    private @Nullable String success;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    private @Nullable String successForeground;
    /**
     * @return &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    private @Nullable String warning;
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    private @Nullable String warningForeground;

    private ThemeUIColorPalette() {}
    /**
     * @return &lt;p&gt;This color is that applies to selected states and buttons.&lt;/p&gt;
     * 
     */
    public Optional<String> accent() {
        return Optional.ofNullable(this.accent);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             accent color.&lt;/p&gt;
     * 
     */
    public Optional<String> accentForeground() {
        return Optional.ofNullable(this.accentForeground);
    }
    /**
     * @return &lt;p&gt;The color that applies to error messages.&lt;/p&gt;
     * 
     */
    public Optional<String> danger() {
        return Optional.ofNullable(this.danger);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             error color.&lt;/p&gt;
     * 
     */
    public Optional<String> dangerForeground() {
        return Optional.ofNullable(this.dangerForeground);
    }
    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as
     *             dimensions.&lt;/p&gt;
     * 
     */
    public Optional<String> dimension() {
        return Optional.ofNullable(this.dimension);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             dimension color.&lt;/p&gt;
     * 
     */
    public Optional<String> dimensionForeground() {
        return Optional.ofNullable(this.dimensionForeground);
    }
    /**
     * @return &lt;p&gt;The color that applies to the names of fields that are identified as measures.&lt;/p&gt;
     * 
     */
    public Optional<String> measure() {
        return Optional.ofNullable(this.measure);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             measure color.&lt;/p&gt;
     * 
     */
    public Optional<String> measureForeground() {
        return Optional.ofNullable(this.measureForeground);
    }
    /**
     * @return &lt;p&gt;The background color that applies to visuals and other high emphasis UI.&lt;/p&gt;
     * 
     */
    public Optional<String> primaryBackground() {
        return Optional.ofNullable(this.primaryBackground);
    }
    /**
     * @return &lt;p&gt;The color of text and other foreground elements that appear over the primary
     *             background regions, such as grid lines, borders, table banding, icons, and so on.&lt;/p&gt;
     * 
     */
    public Optional<String> primaryForeground() {
        return Optional.ofNullable(this.primaryForeground);
    }
    /**
     * @return &lt;p&gt;The background color that applies to the sheet background and sheet controls.&lt;/p&gt;
     * 
     */
    public Optional<String> secondaryBackground() {
        return Optional.ofNullable(this.secondaryBackground);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any sheet title, sheet control text, or UI that
     *             appears over the secondary background.&lt;/p&gt;
     * 
     */
    public Optional<String> secondaryForeground() {
        return Optional.ofNullable(this.secondaryForeground);
    }
    /**
     * @return &lt;p&gt;The color that applies to success messages, for example the check mark for a
     *             successful download.&lt;/p&gt;
     * 
     */
    public Optional<String> success() {
        return Optional.ofNullable(this.success);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             success color.&lt;/p&gt;
     * 
     */
    public Optional<String> successForeground() {
        return Optional.ofNullable(this.successForeground);
    }
    /**
     * @return &lt;p&gt;This color that applies to warning and informational messages.&lt;/p&gt;
     * 
     */
    public Optional<String> warning() {
        return Optional.ofNullable(this.warning);
    }
    /**
     * @return &lt;p&gt;The foreground color that applies to any text or other elements that appear over the
     *             warning color.&lt;/p&gt;
     * 
     */
    public Optional<String> warningForeground() {
        return Optional.ofNullable(this.warningForeground);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThemeUIColorPalette defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accent;
        private @Nullable String accentForeground;
        private @Nullable String danger;
        private @Nullable String dangerForeground;
        private @Nullable String dimension;
        private @Nullable String dimensionForeground;
        private @Nullable String measure;
        private @Nullable String measureForeground;
        private @Nullable String primaryBackground;
        private @Nullable String primaryForeground;
        private @Nullable String secondaryBackground;
        private @Nullable String secondaryForeground;
        private @Nullable String success;
        private @Nullable String successForeground;
        private @Nullable String warning;
        private @Nullable String warningForeground;
        public Builder() {}
        public Builder(ThemeUIColorPalette defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accent = defaults.accent;
    	      this.accentForeground = defaults.accentForeground;
    	      this.danger = defaults.danger;
    	      this.dangerForeground = defaults.dangerForeground;
    	      this.dimension = defaults.dimension;
    	      this.dimensionForeground = defaults.dimensionForeground;
    	      this.measure = defaults.measure;
    	      this.measureForeground = defaults.measureForeground;
    	      this.primaryBackground = defaults.primaryBackground;
    	      this.primaryForeground = defaults.primaryForeground;
    	      this.secondaryBackground = defaults.secondaryBackground;
    	      this.secondaryForeground = defaults.secondaryForeground;
    	      this.success = defaults.success;
    	      this.successForeground = defaults.successForeground;
    	      this.warning = defaults.warning;
    	      this.warningForeground = defaults.warningForeground;
        }

        @CustomType.Setter
        public Builder accent(@Nullable String accent) {
            this.accent = accent;
            return this;
        }
        @CustomType.Setter
        public Builder accentForeground(@Nullable String accentForeground) {
            this.accentForeground = accentForeground;
            return this;
        }
        @CustomType.Setter
        public Builder danger(@Nullable String danger) {
            this.danger = danger;
            return this;
        }
        @CustomType.Setter
        public Builder dangerForeground(@Nullable String dangerForeground) {
            this.dangerForeground = dangerForeground;
            return this;
        }
        @CustomType.Setter
        public Builder dimension(@Nullable String dimension) {
            this.dimension = dimension;
            return this;
        }
        @CustomType.Setter
        public Builder dimensionForeground(@Nullable String dimensionForeground) {
            this.dimensionForeground = dimensionForeground;
            return this;
        }
        @CustomType.Setter
        public Builder measure(@Nullable String measure) {
            this.measure = measure;
            return this;
        }
        @CustomType.Setter
        public Builder measureForeground(@Nullable String measureForeground) {
            this.measureForeground = measureForeground;
            return this;
        }
        @CustomType.Setter
        public Builder primaryBackground(@Nullable String primaryBackground) {
            this.primaryBackground = primaryBackground;
            return this;
        }
        @CustomType.Setter
        public Builder primaryForeground(@Nullable String primaryForeground) {
            this.primaryForeground = primaryForeground;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBackground(@Nullable String secondaryBackground) {
            this.secondaryBackground = secondaryBackground;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryForeground(@Nullable String secondaryForeground) {
            this.secondaryForeground = secondaryForeground;
            return this;
        }
        @CustomType.Setter
        public Builder success(@Nullable String success) {
            this.success = success;
            return this;
        }
        @CustomType.Setter
        public Builder successForeground(@Nullable String successForeground) {
            this.successForeground = successForeground;
            return this;
        }
        @CustomType.Setter
        public Builder warning(@Nullable String warning) {
            this.warning = warning;
            return this;
        }
        @CustomType.Setter
        public Builder warningForeground(@Nullable String warningForeground) {
            this.warningForeground = warningForeground;
            return this;
        }
        public ThemeUIColorPalette build() {
            final var o = new ThemeUIColorPalette();
            o.accent = accent;
            o.accentForeground = accentForeground;
            o.danger = danger;
            o.dangerForeground = dangerForeground;
            o.dimension = dimension;
            o.dimensionForeground = dimensionForeground;
            o.measure = measure;
            o.measureForeground = measureForeground;
            o.primaryBackground = primaryBackground;
            o.primaryForeground = primaryForeground;
            o.secondaryBackground = secondaryBackground;
            o.secondaryForeground = secondaryForeground;
            o.success = success;
            o.successForeground = successForeground;
            o.warning = warning;
            o.warningForeground = warningForeground;
            return o;
        }
    }
}
