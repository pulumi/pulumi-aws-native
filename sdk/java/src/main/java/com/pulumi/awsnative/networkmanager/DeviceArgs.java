// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.networkmanager;

import com.pulumi.awsnative.networkmanager.inputs.DeviceLocationArgs;
import com.pulumi.awsnative.networkmanager.inputs.DeviceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceArgs Empty = new DeviceArgs();

    /**
     * The description of the device.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the device.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the global network.
     * 
     */
    @Import(name="globalNetworkId", required=true)
    private Output<String> globalNetworkId;

    /**
     * @return The ID of the global network.
     * 
     */
    public Output<String> globalNetworkId() {
        return this.globalNetworkId;
    }

    /**
     * The site location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<DeviceLocationArgs> location;

    /**
     * @return The site location.
     * 
     */
    public Optional<Output<DeviceLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The device model
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return The device model
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * The device serial number.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<String> serialNumber;

    /**
     * @return The device serial number.
     * 
     */
    public Optional<Output<String>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * The site ID.
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    /**
     * @return The site ID.
     * 
     */
    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * The tags for the device.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DeviceTagArgs>> tags;

    /**
     * @return The tags for the device.
     * 
     */
    public Optional<Output<List<DeviceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The device type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The device type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The device vendor.
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    /**
     * @return The device vendor.
     * 
     */
    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private DeviceArgs() {}

    private DeviceArgs(DeviceArgs $) {
        this.description = $.description;
        this.globalNetworkId = $.globalNetworkId;
        this.location = $.location;
        this.model = $.model;
        this.serialNumber = $.serialNumber;
        this.siteId = $.siteId;
        this.tags = $.tags;
        this.type = $.type;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceArgs $;

        public Builder() {
            $ = new DeviceArgs();
        }

        public Builder(DeviceArgs defaults) {
            $ = new DeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the device.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the device.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param globalNetworkId The ID of the global network.
         * 
         * @return builder
         * 
         */
        public Builder globalNetworkId(Output<String> globalNetworkId) {
            $.globalNetworkId = globalNetworkId;
            return this;
        }

        /**
         * @param globalNetworkId The ID of the global network.
         * 
         * @return builder
         * 
         */
        public Builder globalNetworkId(String globalNetworkId) {
            return globalNetworkId(Output.of(globalNetworkId));
        }

        /**
         * @param location The site location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<DeviceLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The site location.
         * 
         * @return builder
         * 
         */
        public Builder location(DeviceLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param model The device model
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model The device model
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        /**
         * @param serialNumber The device serial number.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<String> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber The device serial number.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId The site ID.
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param tags The tags for the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DeviceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags for the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DeviceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags for the device.
         * 
         * @return builder
         * 
         */
        public Builder tags(DeviceTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The device type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The device type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vendor The device vendor.
         * 
         * @return builder
         * 
         */
        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        /**
         * @param vendor The device vendor.
         * 
         * @return builder
         * 
         */
        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public DeviceArgs build() {
            $.globalNetworkId = Objects.requireNonNull($.globalNetworkId, "expected parameter 'globalNetworkId' to be non-null");
            return $;
        }
    }

}
