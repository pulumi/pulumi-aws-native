// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAlarmResult {
    private @Nullable String alarmArn;
    /**
     * @return The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    private @Nullable String comparisonOperator;
    /**
     * @return The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    private @Nullable List<String> contactProtocols;
    /**
     * @return The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    private @Nullable Integer datapointsToAlarm;
    /**
     * @return The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
     * 
     */
    private @Nullable Integer evaluationPeriods;
    /**
     * @return Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
     * 
     */
    private @Nullable Boolean notificationEnabled;
    /**
     * @return The alarm states that trigger a notification.
     * 
     */
    private @Nullable List<String> notificationTriggers;
    /**
     * @return The current state of the alarm.
     * 
     */
    private @Nullable String state;
    /**
     * @return The value against which the specified statistic is compared.
     * 
     */
    private @Nullable Double threshold;
    /**
     * @return Sets how this alarm will handle missing data points.
     * 
     */
    private @Nullable String treatMissingData;

    private GetAlarmResult() {}
    public Optional<String> alarmArn() {
        return Optional.ofNullable(this.alarmArn);
    }
    /**
     * @return The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
     * 
     */
    public Optional<String> comparisonOperator() {
        return Optional.ofNullable(this.comparisonOperator);
    }
    /**
     * @return The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
     * 
     */
    public List<String> contactProtocols() {
        return this.contactProtocols == null ? List.of() : this.contactProtocols;
    }
    /**
     * @return The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an &#34;M out of N&#34; alarm, this value (datapointsToAlarm) is the M.
     * 
     */
    public Optional<Integer> datapointsToAlarm() {
        return Optional.ofNullable(this.datapointsToAlarm);
    }
    /**
     * @return The number of most recent periods over which data is compared to the specified threshold. If you are setting an &#34;M out of N&#34; alarm, this value (evaluationPeriods) is the N.
     * 
     */
    public Optional<Integer> evaluationPeriods() {
        return Optional.ofNullable(this.evaluationPeriods);
    }
    /**
     * @return Indicates whether the alarm is enabled. Notifications are enabled by default if you don&#39;t specify this parameter.
     * 
     */
    public Optional<Boolean> notificationEnabled() {
        return Optional.ofNullable(this.notificationEnabled);
    }
    /**
     * @return The alarm states that trigger a notification.
     * 
     */
    public List<String> notificationTriggers() {
        return this.notificationTriggers == null ? List.of() : this.notificationTriggers;
    }
    /**
     * @return The current state of the alarm.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The value against which the specified statistic is compared.
     * 
     */
    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Sets how this alarm will handle missing data points.
     * 
     */
    public Optional<String> treatMissingData() {
        return Optional.ofNullable(this.treatMissingData);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlarmResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alarmArn;
        private @Nullable String comparisonOperator;
        private @Nullable List<String> contactProtocols;
        private @Nullable Integer datapointsToAlarm;
        private @Nullable Integer evaluationPeriods;
        private @Nullable Boolean notificationEnabled;
        private @Nullable List<String> notificationTriggers;
        private @Nullable String state;
        private @Nullable Double threshold;
        private @Nullable String treatMissingData;
        public Builder() {}
        public Builder(GetAlarmResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alarmArn = defaults.alarmArn;
    	      this.comparisonOperator = defaults.comparisonOperator;
    	      this.contactProtocols = defaults.contactProtocols;
    	      this.datapointsToAlarm = defaults.datapointsToAlarm;
    	      this.evaluationPeriods = defaults.evaluationPeriods;
    	      this.notificationEnabled = defaults.notificationEnabled;
    	      this.notificationTriggers = defaults.notificationTriggers;
    	      this.state = defaults.state;
    	      this.threshold = defaults.threshold;
    	      this.treatMissingData = defaults.treatMissingData;
        }

        @CustomType.Setter
        public Builder alarmArn(@Nullable String alarmArn) {
            this.alarmArn = alarmArn;
            return this;
        }
        @CustomType.Setter
        public Builder comparisonOperator(@Nullable String comparisonOperator) {
            this.comparisonOperator = comparisonOperator;
            return this;
        }
        @CustomType.Setter
        public Builder contactProtocols(@Nullable List<String> contactProtocols) {
            this.contactProtocols = contactProtocols;
            return this;
        }
        public Builder contactProtocols(String... contactProtocols) {
            return contactProtocols(List.of(contactProtocols));
        }
        @CustomType.Setter
        public Builder datapointsToAlarm(@Nullable Integer datapointsToAlarm) {
            this.datapointsToAlarm = datapointsToAlarm;
            return this;
        }
        @CustomType.Setter
        public Builder evaluationPeriods(@Nullable Integer evaluationPeriods) {
            this.evaluationPeriods = evaluationPeriods;
            return this;
        }
        @CustomType.Setter
        public Builder notificationEnabled(@Nullable Boolean notificationEnabled) {
            this.notificationEnabled = notificationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder notificationTriggers(@Nullable List<String> notificationTriggers) {
            this.notificationTriggers = notificationTriggers;
            return this;
        }
        public Builder notificationTriggers(String... notificationTriggers) {
            return notificationTriggers(List.of(notificationTriggers));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Double threshold) {
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder treatMissingData(@Nullable String treatMissingData) {
            this.treatMissingData = treatMissingData;
            return this;
        }
        public GetAlarmResult build() {
            final var o = new GetAlarmResult();
            o.alarmArn = alarmArn;
            o.comparisonOperator = comparisonOperator;
            o.contactProtocols = contactProtocols;
            o.datapointsToAlarm = datapointsToAlarm;
            o.evaluationPeriods = evaluationPeriods;
            o.notificationEnabled = notificationEnabled;
            o.notificationTriggers = notificationTriggers;
            o.state = state;
            o.threshold = threshold;
            o.treatMissingData = treatMissingData;
            return o;
        }
    }
}
