// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Selection criteria for prefix-level metrics.
 * 
 */
public final class StorageLensSelectionCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageLensSelectionCriteriaArgs Empty = new StorageLensSelectionCriteriaArgs();

    /**
     * Delimiter to divide S3 key into hierarchy of prefixes.
     * 
     */
    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    /**
     * @return Delimiter to divide S3 key into hierarchy of prefixes.
     * 
     */
    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    /**
     * Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
     * 
     */
    @Import(name="maxDepth")
    private @Nullable Output<Integer> maxDepth;

    /**
     * @return Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
     * 
     */
    public Optional<Output<Integer>> maxDepth() {
        return Optional.ofNullable(this.maxDepth);
    }

    /**
     * The minimum storage bytes threshold for the prefixes to be included in the analysis.
     * 
     */
    @Import(name="minStorageBytesPercentage")
    private @Nullable Output<Double> minStorageBytesPercentage;

    /**
     * @return The minimum storage bytes threshold for the prefixes to be included in the analysis.
     * 
     */
    public Optional<Output<Double>> minStorageBytesPercentage() {
        return Optional.ofNullable(this.minStorageBytesPercentage);
    }

    private StorageLensSelectionCriteriaArgs() {}

    private StorageLensSelectionCriteriaArgs(StorageLensSelectionCriteriaArgs $) {
        this.delimiter = $.delimiter;
        this.maxDepth = $.maxDepth;
        this.minStorageBytesPercentage = $.minStorageBytesPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageLensSelectionCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageLensSelectionCriteriaArgs $;

        public Builder() {
            $ = new StorageLensSelectionCriteriaArgs();
        }

        public Builder(StorageLensSelectionCriteriaArgs defaults) {
            $ = new StorageLensSelectionCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delimiter Delimiter to divide S3 key into hierarchy of prefixes.
         * 
         * @return builder
         * 
         */
        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        /**
         * @param delimiter Delimiter to divide S3 key into hierarchy of prefixes.
         * 
         * @return builder
         * 
         */
        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        /**
         * @param maxDepth Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
         * 
         * @return builder
         * 
         */
        public Builder maxDepth(@Nullable Output<Integer> maxDepth) {
            $.maxDepth = maxDepth;
            return this;
        }

        /**
         * @param maxDepth Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
         * 
         * @return builder
         * 
         */
        public Builder maxDepth(Integer maxDepth) {
            return maxDepth(Output.of(maxDepth));
        }

        /**
         * @param minStorageBytesPercentage The minimum storage bytes threshold for the prefixes to be included in the analysis.
         * 
         * @return builder
         * 
         */
        public Builder minStorageBytesPercentage(@Nullable Output<Double> minStorageBytesPercentage) {
            $.minStorageBytesPercentage = minStorageBytesPercentage;
            return this;
        }

        /**
         * @param minStorageBytesPercentage The minimum storage bytes threshold for the prefixes to be included in the analysis.
         * 
         * @return builder
         * 
         */
        public Builder minStorageBytesPercentage(Double minStorageBytesPercentage) {
            return minStorageBytesPercentage(Output.of(minStorageBytesPercentage));
        }

        public StorageLensSelectionCriteriaArgs build() {
            return $;
        }
    }

}
