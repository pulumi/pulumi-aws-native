// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.chatbot.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSlackChannelConfigurationResult {
    /**
     * @return Amazon Resource Name (ARN) of the configuration
     * 
     */
    private @Nullable String arn;
    /**
     * @return The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed &#39;AdministratorAccess&#39; policy is applied as a default if this is not set.
     * 
     */
    private @Nullable List<String> guardrailPolicies;
    /**
     * @return The ARN of the IAM role that defines the permissions for AWS Chatbot
     * 
     */
    private @Nullable String iamRoleArn;
    /**
     * @return Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
     * 
     */
    private @Nullable String loggingLevel;
    /**
     * @return The id of the Slack channel
     * 
     */
    private @Nullable String slackChannelId;
    /**
     * @return ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     * 
     */
    private @Nullable List<String> snsTopicArns;
    /**
     * @return Enables use of a user role requirement in your chat configuration
     * 
     */
    private @Nullable Boolean userRoleRequired;

    private GetSlackChannelConfigurationResult() {}
    /**
     * @return Amazon Resource Name (ARN) of the configuration
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed &#39;AdministratorAccess&#39; policy is applied as a default if this is not set.
     * 
     */
    public List<String> guardrailPolicies() {
        return this.guardrailPolicies == null ? List.of() : this.guardrailPolicies;
    }
    /**
     * @return The ARN of the IAM role that defines the permissions for AWS Chatbot
     * 
     */
    public Optional<String> iamRoleArn() {
        return Optional.ofNullable(this.iamRoleArn);
    }
    /**
     * @return Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
     * 
     */
    public Optional<String> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }
    /**
     * @return The id of the Slack channel
     * 
     */
    public Optional<String> slackChannelId() {
        return Optional.ofNullable(this.slackChannelId);
    }
    /**
     * @return ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     * 
     */
    public List<String> snsTopicArns() {
        return this.snsTopicArns == null ? List.of() : this.snsTopicArns;
    }
    /**
     * @return Enables use of a user role requirement in your chat configuration
     * 
     */
    public Optional<Boolean> userRoleRequired() {
        return Optional.ofNullable(this.userRoleRequired);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSlackChannelConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable List<String> guardrailPolicies;
        private @Nullable String iamRoleArn;
        private @Nullable String loggingLevel;
        private @Nullable String slackChannelId;
        private @Nullable List<String> snsTopicArns;
        private @Nullable Boolean userRoleRequired;
        public Builder() {}
        public Builder(GetSlackChannelConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.guardrailPolicies = defaults.guardrailPolicies;
    	      this.iamRoleArn = defaults.iamRoleArn;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.slackChannelId = defaults.slackChannelId;
    	      this.snsTopicArns = defaults.snsTopicArns;
    	      this.userRoleRequired = defaults.userRoleRequired;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder guardrailPolicies(@Nullable List<String> guardrailPolicies) {
            this.guardrailPolicies = guardrailPolicies;
            return this;
        }
        public Builder guardrailPolicies(String... guardrailPolicies) {
            return guardrailPolicies(List.of(guardrailPolicies));
        }
        @CustomType.Setter
        public Builder iamRoleArn(@Nullable String iamRoleArn) {
            this.iamRoleArn = iamRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevel(@Nullable String loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }
        @CustomType.Setter
        public Builder slackChannelId(@Nullable String slackChannelId) {
            this.slackChannelId = slackChannelId;
            return this;
        }
        @CustomType.Setter
        public Builder snsTopicArns(@Nullable List<String> snsTopicArns) {
            this.snsTopicArns = snsTopicArns;
            return this;
        }
        public Builder snsTopicArns(String... snsTopicArns) {
            return snsTopicArns(List.of(snsTopicArns));
        }
        @CustomType.Setter
        public Builder userRoleRequired(@Nullable Boolean userRoleRequired) {
            this.userRoleRequired = userRoleRequired;
            return this;
        }
        public GetSlackChannelConfigurationResult build() {
            final var o = new GetSlackChannelConfigurationResult();
            o.arn = arn;
            o.guardrailPolicies = guardrailPolicies;
            o.iamRoleArn = iamRoleArn;
            o.loggingLevel = loggingLevel;
            o.slackChannelId = slackChannelId;
            o.snsTopicArns = snsTopicArns;
            o.userRoleRequired = userRoleRequired;
            return o;
        }
    }
}
