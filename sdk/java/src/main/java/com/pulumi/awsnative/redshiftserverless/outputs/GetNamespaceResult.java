// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.redshiftserverless.outputs;

import com.pulumi.awsnative.redshiftserverless.enums.NamespaceLogExport;
import com.pulumi.awsnative.redshiftserverless.outputs.Namespace;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNamespaceResult {
    /**
     * @return The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    private @Nullable String adminUsername;
    /**
     * @return The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    private @Nullable String dbName;
    /**
     * @return The default IAM role ARN for the namespace that is being created.
     * 
     */
    private @Nullable String defaultIamRoleArn;
    /**
     * @return The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
     * 
     */
    private @Nullable String finalSnapshotName;
    /**
     * @return The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
     * 
     */
    private @Nullable Integer finalSnapshotRetentionPeriod;
    /**
     * @return A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     * 
     */
    private @Nullable List<String> iamRoles;
    /**
     * @return The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
     * 
     */
    private @Nullable List<NamespaceLogExport> logExports;
    private @Nullable Namespace namespace;

    private GetNamespaceResult() {}
    /**
     * @return The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
     * 
     */
    public Optional<String> dbName() {
        return Optional.ofNullable(this.dbName);
    }
    /**
     * @return The default IAM role ARN for the namespace that is being created.
     * 
     */
    public Optional<String> defaultIamRoleArn() {
        return Optional.ofNullable(this.defaultIamRoleArn);
    }
    /**
     * @return The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
     * 
     */
    public Optional<String> finalSnapshotName() {
        return Optional.ofNullable(this.finalSnapshotName);
    }
    /**
     * @return The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
     * 
     */
    public Optional<Integer> finalSnapshotRetentionPeriod() {
        return Optional.ofNullable(this.finalSnapshotRetentionPeriod);
    }
    /**
     * @return A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
     * 
     */
    public List<String> iamRoles() {
        return this.iamRoles == null ? List.of() : this.iamRoles;
    }
    /**
     * @return The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog
     * 
     */
    public List<NamespaceLogExport> logExports() {
        return this.logExports == null ? List.of() : this.logExports;
    }
    public Optional<Namespace> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNamespaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adminUsername;
        private @Nullable String dbName;
        private @Nullable String defaultIamRoleArn;
        private @Nullable String finalSnapshotName;
        private @Nullable Integer finalSnapshotRetentionPeriod;
        private @Nullable List<String> iamRoles;
        private @Nullable String kmsKeyId;
        private @Nullable List<NamespaceLogExport> logExports;
        private @Nullable Namespace namespace;
        public Builder() {}
        public Builder(GetNamespaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsername = defaults.adminUsername;
    	      this.dbName = defaults.dbName;
    	      this.defaultIamRoleArn = defaults.defaultIamRoleArn;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.finalSnapshotRetentionPeriod = defaults.finalSnapshotRetentionPeriod;
    	      this.iamRoles = defaults.iamRoles;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.logExports = defaults.logExports;
    	      this.namespace = defaults.namespace;
        }

        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(@Nullable String dbName) {
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultIamRoleArn(@Nullable String defaultIamRoleArn) {
            this.defaultIamRoleArn = defaultIamRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }
        @CustomType.Setter
        public Builder finalSnapshotRetentionPeriod(@Nullable Integer finalSnapshotRetentionPeriod) {
            this.finalSnapshotRetentionPeriod = finalSnapshotRetentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder iamRoles(@Nullable List<String> iamRoles) {
            this.iamRoles = iamRoles;
            return this;
        }
        public Builder iamRoles(String... iamRoles) {
            return iamRoles(List.of(iamRoles));
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder logExports(@Nullable List<NamespaceLogExport> logExports) {
            this.logExports = logExports;
            return this;
        }
        public Builder logExports(NamespaceLogExport... logExports) {
            return logExports(List.of(logExports));
        }
        @CustomType.Setter
        public Builder namespace(@Nullable Namespace namespace) {
            this.namespace = namespace;
            return this;
        }
        public GetNamespaceResult build() {
            final var o = new GetNamespaceResult();
            o.adminUsername = adminUsername;
            o.dbName = dbName;
            o.defaultIamRoleArn = defaultIamRoleArn;
            o.finalSnapshotName = finalSnapshotName;
            o.finalSnapshotRetentionPeriod = finalSnapshotRetentionPeriod;
            o.iamRoles = iamRoles;
            o.kmsKeyId = kmsKeyId;
            o.logExports = logExports;
            o.namespace = namespace;
            return o;
        }
    }
}
