// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2.inputs;

import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationInputParallelismArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationInputProcessingConfigurationArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationInputSchemaArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationKinesisFirehoseInputArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationKinesisStreamsInputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
 * 
 */
public final class ApplicationInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationInputArgs Empty = new ApplicationInputArgs();

    /**
     * Describes the number of in-application streams to create.
     * 
     */
    @Import(name="inputParallelism")
    private @Nullable Output<ApplicationInputParallelismArgs> inputParallelism;

    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    public Optional<Output<ApplicationInputParallelismArgs>> inputParallelism() {
        return Optional.ofNullable(this.inputParallelism);
    }

    /**
     * The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
     * 
     */
    @Import(name="inputProcessingConfiguration")
    private @Nullable Output<ApplicationInputProcessingConfigurationArgs> inputProcessingConfiguration;

    /**
     * @return The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
     * 
     */
    public Optional<Output<ApplicationInputProcessingConfigurationArgs>> inputProcessingConfiguration() {
        return Optional.ofNullable(this.inputProcessingConfiguration);
    }

    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    @Import(name="inputSchema", required=true)
    private Output<ApplicationInputSchemaArgs> inputSchema;

    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    public Output<ApplicationInputSchemaArgs> inputSchema() {
        return this.inputSchema;
    }

    /**
     * If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    @Import(name="kinesisFirehoseInput")
    private @Nullable Output<ApplicationKinesisFirehoseInputArgs> kinesisFirehoseInput;

    /**
     * @return If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    public Optional<Output<ApplicationKinesisFirehoseInputArgs>> kinesisFirehoseInput() {
        return Optional.ofNullable(this.kinesisFirehoseInput);
    }

    /**
     * If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    @Import(name="kinesisStreamsInput")
    private @Nullable Output<ApplicationKinesisStreamsInputArgs> kinesisStreamsInput;

    /**
     * @return If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    public Optional<Output<ApplicationKinesisStreamsInputArgs>> kinesisStreamsInput() {
        return Optional.ofNullable(this.kinesisStreamsInput);
    }

    /**
     * The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
     * 
     */
    @Import(name="namePrefix", required=true)
    private Output<String> namePrefix;

    /**
     * @return The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
     * 
     */
    public Output<String> namePrefix() {
        return this.namePrefix;
    }

    private ApplicationInputArgs() {}

    private ApplicationInputArgs(ApplicationInputArgs $) {
        this.inputParallelism = $.inputParallelism;
        this.inputProcessingConfiguration = $.inputProcessingConfiguration;
        this.inputSchema = $.inputSchema;
        this.kinesisFirehoseInput = $.kinesisFirehoseInput;
        this.kinesisStreamsInput = $.kinesisStreamsInput;
        this.namePrefix = $.namePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationInputArgs $;

        public Builder() {
            $ = new ApplicationInputArgs();
        }

        public Builder(ApplicationInputArgs defaults) {
            $ = new ApplicationInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inputParallelism Describes the number of in-application streams to create.
         * 
         * @return builder
         * 
         */
        public Builder inputParallelism(@Nullable Output<ApplicationInputParallelismArgs> inputParallelism) {
            $.inputParallelism = inputParallelism;
            return this;
        }

        /**
         * @param inputParallelism Describes the number of in-application streams to create.
         * 
         * @return builder
         * 
         */
        public Builder inputParallelism(ApplicationInputParallelismArgs inputParallelism) {
            return inputParallelism(Output.of(inputParallelism));
        }

        /**
         * @param inputProcessingConfiguration The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
         * 
         * @return builder
         * 
         */
        public Builder inputProcessingConfiguration(@Nullable Output<ApplicationInputProcessingConfigurationArgs> inputProcessingConfiguration) {
            $.inputProcessingConfiguration = inputProcessingConfiguration;
            return this;
        }

        /**
         * @param inputProcessingConfiguration The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
         * 
         * @return builder
         * 
         */
        public Builder inputProcessingConfiguration(ApplicationInputProcessingConfigurationArgs inputProcessingConfiguration) {
            return inputProcessingConfiguration(Output.of(inputProcessingConfiguration));
        }

        /**
         * @param inputSchema Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         * 
         * @return builder
         * 
         */
        public Builder inputSchema(Output<ApplicationInputSchemaArgs> inputSchema) {
            $.inputSchema = inputSchema;
            return this;
        }

        /**
         * @param inputSchema Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         * 
         * @return builder
         * 
         */
        public Builder inputSchema(ApplicationInputSchemaArgs inputSchema) {
            return inputSchema(Output.of(inputSchema));
        }

        /**
         * @param kinesisFirehoseInput If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehoseInput(@Nullable Output<ApplicationKinesisFirehoseInputArgs> kinesisFirehoseInput) {
            $.kinesisFirehoseInput = kinesisFirehoseInput;
            return this;
        }

        /**
         * @param kinesisFirehoseInput If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehoseInput(ApplicationKinesisFirehoseInputArgs kinesisFirehoseInput) {
            return kinesisFirehoseInput(Output.of(kinesisFirehoseInput));
        }

        /**
         * @param kinesisStreamsInput If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
         * 
         * @return builder
         * 
         */
        public Builder kinesisStreamsInput(@Nullable Output<ApplicationKinesisStreamsInputArgs> kinesisStreamsInput) {
            $.kinesisStreamsInput = kinesisStreamsInput;
            return this;
        }

        /**
         * @param kinesisStreamsInput If the streaming source is an Amazon Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
         * 
         * @return builder
         * 
         */
        public Builder kinesisStreamsInput(ApplicationKinesisStreamsInputArgs kinesisStreamsInput) {
            return kinesisStreamsInput(Output.of(kinesisStreamsInput));
        }

        /**
         * @param namePrefix The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `&#34;MyInApplicationStream&#34;`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `&#34;MyInApplicationStream_001&#34;`, `&#34;MyInApplicationStream_002&#34;`, and so on.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public ApplicationInputArgs build() {
            $.inputSchema = Objects.requireNonNull($.inputSchema, "expected parameter 'inputSchema' to be non-null");
            $.namePrefix = Objects.requireNonNull($.namePrefix, "expected parameter 'namePrefix' to be non-null");
            return $;
        }
    }

}
