// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lex.inputs;

import com.pulumi.awsnative.lex.inputs.BotMessageGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
 * 
 */
public final class BotFulfillmentStartResponseSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BotFulfillmentStartResponseSpecificationArgs Empty = new BotFulfillmentStartResponseSpecificationArgs();

    /**
     * Determines whether the user can interrupt the start message while it is playing.
     * 
     */
    @Import(name="allowInterrupt")
    private @Nullable Output<Boolean> allowInterrupt;

    /**
     * @return Determines whether the user can interrupt the start message while it is playing.
     * 
     */
    public Optional<Output<Boolean>> allowInterrupt() {
        return Optional.ofNullable(this.allowInterrupt);
    }

    /**
     * The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn&#39;t played.
     * 
     */
    @Import(name="delayInSeconds", required=true)
    private Output<Integer> delayInSeconds;

    /**
     * @return The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn&#39;t played.
     * 
     */
    public Output<Integer> delayInSeconds() {
        return this.delayInSeconds;
    }

    @Import(name="messageGroups", required=true)
    private Output<List<BotMessageGroupArgs>> messageGroups;

    public Output<List<BotMessageGroupArgs>> messageGroups() {
        return this.messageGroups;
    }

    private BotFulfillmentStartResponseSpecificationArgs() {}

    private BotFulfillmentStartResponseSpecificationArgs(BotFulfillmentStartResponseSpecificationArgs $) {
        this.allowInterrupt = $.allowInterrupt;
        this.delayInSeconds = $.delayInSeconds;
        this.messageGroups = $.messageGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BotFulfillmentStartResponseSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BotFulfillmentStartResponseSpecificationArgs $;

        public Builder() {
            $ = new BotFulfillmentStartResponseSpecificationArgs();
        }

        public Builder(BotFulfillmentStartResponseSpecificationArgs defaults) {
            $ = new BotFulfillmentStartResponseSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInterrupt Determines whether the user can interrupt the start message while it is playing.
         * 
         * @return builder
         * 
         */
        public Builder allowInterrupt(@Nullable Output<Boolean> allowInterrupt) {
            $.allowInterrupt = allowInterrupt;
            return this;
        }

        /**
         * @param allowInterrupt Determines whether the user can interrupt the start message while it is playing.
         * 
         * @return builder
         * 
         */
        public Builder allowInterrupt(Boolean allowInterrupt) {
            return allowInterrupt(Output.of(allowInterrupt));
        }

        /**
         * @param delayInSeconds The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn&#39;t played.
         * 
         * @return builder
         * 
         */
        public Builder delayInSeconds(Output<Integer> delayInSeconds) {
            $.delayInSeconds = delayInSeconds;
            return this;
        }

        /**
         * @param delayInSeconds The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn&#39;t played.
         * 
         * @return builder
         * 
         */
        public Builder delayInSeconds(Integer delayInSeconds) {
            return delayInSeconds(Output.of(delayInSeconds));
        }

        public Builder messageGroups(Output<List<BotMessageGroupArgs>> messageGroups) {
            $.messageGroups = messageGroups;
            return this;
        }

        public Builder messageGroups(List<BotMessageGroupArgs> messageGroups) {
            return messageGroups(Output.of(messageGroups));
        }

        public Builder messageGroups(BotMessageGroupArgs... messageGroups) {
            return messageGroups(List.of(messageGroups));
        }

        public BotFulfillmentStartResponseSpecificationArgs build() {
            $.delayInSeconds = Objects.requireNonNull($.delayInSeconds, "expected parameter 'delayInSeconds' to be non-null");
            $.messageGroups = Objects.requireNonNull($.messageGroups, "expected parameter 'messageGroups' to be non-null");
            return $;
        }
    }

}
