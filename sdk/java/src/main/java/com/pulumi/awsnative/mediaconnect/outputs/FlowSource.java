// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediaconnect.outputs;

import com.pulumi.awsnative.mediaconnect.enums.FlowSourceProtocol;
import com.pulumi.awsnative.mediaconnect.outputs.FlowEncryption;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlowSource {
    /**
     * @return The type of decryption that is used on the content ingested from this source.
     * 
     */
    private @Nullable FlowEncryption decryption;
    /**
     * @return A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    private @Nullable String description;
    /**
     * @return The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator&#39;s flow.
     * 
     */
    private @Nullable String entitlementArn;
    /**
     * @return The IP address that the flow will be listening on for incoming content.
     * 
     */
    private @Nullable String ingestIp;
    /**
     * @return The port that the flow will be listening on for incoming content.
     * 
     */
    private @Nullable Integer ingestPort;
    /**
     * @return The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    private @Nullable Integer maxBitrate;
    /**
     * @return The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    private @Nullable Integer maxLatency;
    /**
     * @return The minimum latency in milliseconds.
     * 
     */
    private @Nullable Integer minLatency;
    /**
     * @return The name of the source.
     * 
     */
    private @Nullable String name;
    /**
     * @return The protocol that is used by the source or output.
     * 
     */
    private @Nullable FlowSourceProtocol protocol;
    /**
     * @return The ARN of the source.
     * 
     */
    private @Nullable String sourceArn;
    /**
     * @return The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    private @Nullable String sourceIngestPort;
    /**
     * @return The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    private @Nullable String streamId;
    /**
     * @return The name of the VPC Interface this Source is configured with.
     * 
     */
    private @Nullable String vpcInterfaceName;
    /**
     * @return The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    private @Nullable String whitelistCidr;

    private FlowSource() {}
    /**
     * @return The type of decryption that is used on the content ingested from this source.
     * 
     */
    public Optional<FlowEncryption> decryption() {
        return Optional.ofNullable(this.decryption);
    }
    /**
     * @return A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator&#39;s flow.
     * 
     */
    public Optional<String> entitlementArn() {
        return Optional.ofNullable(this.entitlementArn);
    }
    /**
     * @return The IP address that the flow will be listening on for incoming content.
     * 
     */
    public Optional<String> ingestIp() {
        return Optional.ofNullable(this.ingestIp);
    }
    /**
     * @return The port that the flow will be listening on for incoming content.
     * 
     */
    public Optional<Integer> ingestPort() {
        return Optional.ofNullable(this.ingestPort);
    }
    /**
     * @return The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
     * 
     */
    public Optional<Integer> maxBitrate() {
        return Optional.ofNullable(this.maxBitrate);
    }
    /**
     * @return The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
     * 
     */
    public Optional<Integer> maxLatency() {
        return Optional.ofNullable(this.maxLatency);
    }
    /**
     * @return The minimum latency in milliseconds.
     * 
     */
    public Optional<Integer> minLatency() {
        return Optional.ofNullable(this.minLatency);
    }
    /**
     * @return The name of the source.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The protocol that is used by the source or output.
     * 
     */
    public Optional<FlowSourceProtocol> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return The ARN of the source.
     * 
     */
    public Optional<String> sourceArn() {
        return Optional.ofNullable(this.sourceArn);
    }
    /**
     * @return The port that the flow will be listening on for incoming content.(ReadOnly)
     * 
     */
    public Optional<String> sourceIngestPort() {
        return Optional.ofNullable(this.sourceIngestPort);
    }
    /**
     * @return The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
     * 
     */
    public Optional<String> streamId() {
        return Optional.ofNullable(this.streamId);
    }
    /**
     * @return The name of the VPC Interface this Source is configured with.
     * 
     */
    public Optional<String> vpcInterfaceName() {
        return Optional.ofNullable(this.vpcInterfaceName);
    }
    /**
     * @return The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
     * 
     */
    public Optional<String> whitelistCidr() {
        return Optional.ofNullable(this.whitelistCidr);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlowSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FlowEncryption decryption;
        private @Nullable String description;
        private @Nullable String entitlementArn;
        private @Nullable String ingestIp;
        private @Nullable Integer ingestPort;
        private @Nullable Integer maxBitrate;
        private @Nullable Integer maxLatency;
        private @Nullable Integer minLatency;
        private @Nullable String name;
        private @Nullable FlowSourceProtocol protocol;
        private @Nullable String sourceArn;
        private @Nullable String sourceIngestPort;
        private @Nullable String streamId;
        private @Nullable String vpcInterfaceName;
        private @Nullable String whitelistCidr;
        public Builder() {}
        public Builder(FlowSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decryption = defaults.decryption;
    	      this.description = defaults.description;
    	      this.entitlementArn = defaults.entitlementArn;
    	      this.ingestIp = defaults.ingestIp;
    	      this.ingestPort = defaults.ingestPort;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.maxLatency = defaults.maxLatency;
    	      this.minLatency = defaults.minLatency;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.sourceArn = defaults.sourceArn;
    	      this.sourceIngestPort = defaults.sourceIngestPort;
    	      this.streamId = defaults.streamId;
    	      this.vpcInterfaceName = defaults.vpcInterfaceName;
    	      this.whitelistCidr = defaults.whitelistCidr;
        }

        @CustomType.Setter
        public Builder decryption(@Nullable FlowEncryption decryption) {
            this.decryption = decryption;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder entitlementArn(@Nullable String entitlementArn) {
            this.entitlementArn = entitlementArn;
            return this;
        }
        @CustomType.Setter
        public Builder ingestIp(@Nullable String ingestIp) {
            this.ingestIp = ingestIp;
            return this;
        }
        @CustomType.Setter
        public Builder ingestPort(@Nullable Integer ingestPort) {
            this.ingestPort = ingestPort;
            return this;
        }
        @CustomType.Setter
        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }
        @CustomType.Setter
        public Builder maxLatency(@Nullable Integer maxLatency) {
            this.maxLatency = maxLatency;
            return this;
        }
        @CustomType.Setter
        public Builder minLatency(@Nullable Integer minLatency) {
            this.minLatency = minLatency;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable FlowSourceProtocol protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceArn(@Nullable String sourceArn) {
            this.sourceArn = sourceArn;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIngestPort(@Nullable String sourceIngestPort) {
            this.sourceIngestPort = sourceIngestPort;
            return this;
        }
        @CustomType.Setter
        public Builder streamId(@Nullable String streamId) {
            this.streamId = streamId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcInterfaceName(@Nullable String vpcInterfaceName) {
            this.vpcInterfaceName = vpcInterfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder whitelistCidr(@Nullable String whitelistCidr) {
            this.whitelistCidr = whitelistCidr;
            return this;
        }
        public FlowSource build() {
            final var o = new FlowSource();
            o.decryption = decryption;
            o.description = description;
            o.entitlementArn = entitlementArn;
            o.ingestIp = ingestIp;
            o.ingestPort = ingestPort;
            o.maxBitrate = maxBitrate;
            o.maxLatency = maxLatency;
            o.minLatency = minLatency;
            o.name = name;
            o.protocol = protocol;
            o.sourceArn = sourceArn;
            o.sourceIngestPort = sourceIngestPort;
            o.streamId = streamId;
            o.vpcInterfaceName = vpcInterfaceName;
            o.whitelistCidr = whitelistCidr;
            return o;
        }
    }
}
