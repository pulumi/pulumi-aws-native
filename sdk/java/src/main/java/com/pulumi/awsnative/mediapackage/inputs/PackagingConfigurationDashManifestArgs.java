// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage.inputs;

import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestManifestLayout;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestProfile;
import com.pulumi.awsnative.mediapackage.enums.PackagingConfigurationDashManifestScteMarkersSource;
import com.pulumi.awsnative.mediapackage.inputs.PackagingConfigurationStreamSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A DASH manifest configuration.
 * 
 */
public final class PackagingConfigurationDashManifestArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackagingConfigurationDashManifestArgs Empty = new PackagingConfigurationDashManifestArgs();

    /**
     * Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    @Import(name="manifestLayout")
    private @Nullable Output<PackagingConfigurationDashManifestManifestLayout> manifestLayout;

    /**
     * @return Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
     * 
     */
    public Optional<Output<PackagingConfigurationDashManifestManifestLayout>> manifestLayout() {
        return Optional.ofNullable(this.manifestLayout);
    }

    @Import(name="manifestName")
    private @Nullable Output<String> manifestName;

    public Optional<Output<String>> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }

    /**
     * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    @Import(name="minBufferTimeSeconds")
    private @Nullable Output<Integer> minBufferTimeSeconds;

    /**
     * @return Minimum duration (in seconds) that a player will buffer media before starting the presentation.
     * 
     */
    public Optional<Output<Integer>> minBufferTimeSeconds() {
        return Optional.ofNullable(this.minBufferTimeSeconds);
    }

    /**
     * The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    @Import(name="profile")
    private @Nullable Output<PackagingConfigurationDashManifestProfile> profile;

    /**
     * @return The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
     * 
     */
    public Optional<Output<PackagingConfigurationDashManifestProfile>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
     * 
     */
    @Import(name="scteMarkersSource")
    private @Nullable Output<PackagingConfigurationDashManifestScteMarkersSource> scteMarkersSource;

    /**
     * @return The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
     * 
     */
    public Optional<Output<PackagingConfigurationDashManifestScteMarkersSource>> scteMarkersSource() {
        return Optional.ofNullable(this.scteMarkersSource);
    }

    @Import(name="streamSelection")
    private @Nullable Output<PackagingConfigurationStreamSelectionArgs> streamSelection;

    public Optional<Output<PackagingConfigurationStreamSelectionArgs>> streamSelection() {
        return Optional.ofNullable(this.streamSelection);
    }

    private PackagingConfigurationDashManifestArgs() {}

    private PackagingConfigurationDashManifestArgs(PackagingConfigurationDashManifestArgs $) {
        this.manifestLayout = $.manifestLayout;
        this.manifestName = $.manifestName;
        this.minBufferTimeSeconds = $.minBufferTimeSeconds;
        this.profile = $.profile;
        this.scteMarkersSource = $.scteMarkersSource;
        this.streamSelection = $.streamSelection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackagingConfigurationDashManifestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackagingConfigurationDashManifestArgs $;

        public Builder() {
            $ = new PackagingConfigurationDashManifestArgs();
        }

        public Builder(PackagingConfigurationDashManifestArgs defaults) {
            $ = new PackagingConfigurationDashManifestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param manifestLayout Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         * 
         * @return builder
         * 
         */
        public Builder manifestLayout(@Nullable Output<PackagingConfigurationDashManifestManifestLayout> manifestLayout) {
            $.manifestLayout = manifestLayout;
            return this;
        }

        /**
         * @param manifestLayout Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         * 
         * @return builder
         * 
         */
        public Builder manifestLayout(PackagingConfigurationDashManifestManifestLayout manifestLayout) {
            return manifestLayout(Output.of(manifestLayout));
        }

        public Builder manifestName(@Nullable Output<String> manifestName) {
            $.manifestName = manifestName;
            return this;
        }

        public Builder manifestName(String manifestName) {
            return manifestName(Output.of(manifestName));
        }

        /**
         * @param minBufferTimeSeconds Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         * 
         * @return builder
         * 
         */
        public Builder minBufferTimeSeconds(@Nullable Output<Integer> minBufferTimeSeconds) {
            $.minBufferTimeSeconds = minBufferTimeSeconds;
            return this;
        }

        /**
         * @param minBufferTimeSeconds Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         * 
         * @return builder
         * 
         */
        public Builder minBufferTimeSeconds(Integer minBufferTimeSeconds) {
            return minBufferTimeSeconds(Output.of(minBufferTimeSeconds));
        }

        /**
         * @param profile The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<PackagingConfigurationDashManifestProfile> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to &#34;HBBTV_1_5&#34;, HbbTV 1.5 compliant output is enabled.
         * 
         * @return builder
         * 
         */
        public Builder profile(PackagingConfigurationDashManifestProfile profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param scteMarkersSource The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
         * 
         * @return builder
         * 
         */
        public Builder scteMarkersSource(@Nullable Output<PackagingConfigurationDashManifestScteMarkersSource> scteMarkersSource) {
            $.scteMarkersSource = scteMarkersSource;
            return this;
        }

        /**
         * @param scteMarkersSource The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
         * 
         * @return builder
         * 
         */
        public Builder scteMarkersSource(PackagingConfigurationDashManifestScteMarkersSource scteMarkersSource) {
            return scteMarkersSource(Output.of(scteMarkersSource));
        }

        public Builder streamSelection(@Nullable Output<PackagingConfigurationStreamSelectionArgs> streamSelection) {
            $.streamSelection = streamSelection;
            return this;
        }

        public Builder streamSelection(PackagingConfigurationStreamSelectionArgs streamSelection) {
            return streamSelection(Output.of(streamSelection));
        }

        public PackagingConfigurationDashManifestArgs build() {
            return $;
        }
    }

}
