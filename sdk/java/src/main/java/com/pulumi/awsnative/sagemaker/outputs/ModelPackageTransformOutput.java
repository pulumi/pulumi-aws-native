// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.sagemaker.outputs;

import com.pulumi.awsnative.sagemaker.enums.ModelPackageTransformOutputAssembleWith;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ModelPackageTransformOutput {
    /**
     * @return The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
     * 
     */
    private @Nullable String accept;
    /**
     * @return Defines how to assemble the results of the transform job as a single S3 object.
     * 
     */
    private @Nullable ModelPackageTransformOutputAssembleWith assembleWith;
    /**
     * @return The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
     * 
     */
    private String s3OutputPath;

    private ModelPackageTransformOutput() {}
    /**
     * @return The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
     * 
     */
    public Optional<String> accept() {
        return Optional.ofNullable(this.accept);
    }
    /**
     * @return Defines how to assemble the results of the transform job as a single S3 object.
     * 
     */
    public Optional<ModelPackageTransformOutputAssembleWith> assembleWith() {
        return Optional.ofNullable(this.assembleWith);
    }
    /**
     * @return The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
     * 
     */
    public String s3OutputPath() {
        return this.s3OutputPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ModelPackageTransformOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accept;
        private @Nullable ModelPackageTransformOutputAssembleWith assembleWith;
        private @Nullable String kmsKeyId;
        private String s3OutputPath;
        public Builder() {}
        public Builder(ModelPackageTransformOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accept = defaults.accept;
    	      this.assembleWith = defaults.assembleWith;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.s3OutputPath = defaults.s3OutputPath;
        }

        @CustomType.Setter
        public Builder accept(@Nullable String accept) {
            this.accept = accept;
            return this;
        }
        @CustomType.Setter
        public Builder assembleWith(@Nullable ModelPackageTransformOutputAssembleWith assembleWith) {
            this.assembleWith = assembleWith;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder s3OutputPath(String s3OutputPath) {
            this.s3OutputPath = Objects.requireNonNull(s3OutputPath);
            return this;
        }
        public ModelPackageTransformOutput build() {
            final var o = new ModelPackageTransformOutput();
            o.accept = accept;
            o.assembleWith = assembleWith;
            o.kmsKeyId = kmsKeyId;
            o.s3OutputPath = s3OutputPath;
            return o;
        }
    }
}
