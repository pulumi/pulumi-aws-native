// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.route53recoverycontrol;

import com.pulumi.awsnative.route53recoverycontrol.inputs.ControlPanelTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ControlPanelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControlPanelArgs Empty = new ControlPanelArgs();

    /**
     * Cluster to associate with the Control Panel
     * 
     */
    @Import(name="clusterArn")
    private @Nullable Output<String> clusterArn;

    /**
     * @return Cluster to associate with the Control Panel
     * 
     */
    public Optional<Output<String>> clusterArn() {
        return Optional.ofNullable(this.clusterArn);
    }

    /**
     * The name of the control panel. You can use any non-white space character in the name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the control panel. You can use any non-white space character in the name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A collection of tags associated with a resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ControlPanelTagArgs>> tags;

    /**
     * @return A collection of tags associated with a resource
     * 
     */
    public Optional<Output<List<ControlPanelTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ControlPanelArgs() {}

    private ControlPanelArgs(ControlPanelArgs $) {
        this.clusterArn = $.clusterArn;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ControlPanelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ControlPanelArgs $;

        public Builder() {
            $ = new ControlPanelArgs();
        }

        public Builder(ControlPanelArgs defaults) {
            $ = new ControlPanelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterArn Cluster to associate with the Control Panel
         * 
         * @return builder
         * 
         */
        public Builder clusterArn(@Nullable Output<String> clusterArn) {
            $.clusterArn = clusterArn;
            return this;
        }

        /**
         * @param clusterArn Cluster to associate with the Control Panel
         * 
         * @return builder
         * 
         */
        public Builder clusterArn(String clusterArn) {
            return clusterArn(Output.of(clusterArn));
        }

        /**
         * @param name The name of the control panel. You can use any non-white space character in the name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the control panel. You can use any non-white space character in the name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ControlPanelTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ControlPanelTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(ControlPanelTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ControlPanelArgs build() {
            return $;
        }
    }

}
