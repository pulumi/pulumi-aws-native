// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight.outputs;

import com.pulumi.awsnative.quicksight.enums.DataSourceResourceStatus;
import com.pulumi.awsnative.quicksight.outputs.DataSourceErrorInfo;
import com.pulumi.awsnative.quicksight.outputs.DataSourceParameters;
import com.pulumi.awsnative.quicksight.outputs.DataSourceResourcePermission;
import com.pulumi.awsnative.quicksight.outputs.DataSourceSslProperties;
import com.pulumi.awsnative.quicksight.outputs.DataSourceTag;
import com.pulumi.awsnative.quicksight.outputs.DataSourceVpcConnectionProperties;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDataSourceResult {
    /**
     * @return &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
     *             stored with this data source. The credentials are applied in tandem with the data source
     *             parameters when you copy a data source by using a create or update request. The API
     *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
     *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the credentials from this
     *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
     *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
     *             are automatically allowed.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSourceParameters> alternateDataSourceParameters;
    /**
     * @return &lt;p&gt;The Amazon Resource Name (ARN) of the data source.&lt;/p&gt;
     * 
     */
    private @Nullable String arn;
    /**
     * @return &lt;p&gt;The time that this data source was created.&lt;/p&gt;
     * 
     */
    private @Nullable String createdTime;
    private @Nullable DataSourceParameters dataSourceParameters;
    private @Nullable DataSourceErrorInfo errorInfo;
    /**
     * @return &lt;p&gt;The last time that this data source was updated.&lt;/p&gt;
     * 
     */
    private @Nullable String lastUpdatedTime;
    /**
     * @return &lt;p&gt;A display name for the data source.&lt;/p&gt;
     * 
     */
    private @Nullable String name;
    /**
     * @return &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSourceResourcePermission> permissions;
    private @Nullable DataSourceSslProperties sslProperties;
    private @Nullable DataSourceResourceStatus status;
    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
     * 
     */
    private @Nullable List<DataSourceTag> tags;
    private @Nullable DataSourceVpcConnectionProperties vpcConnectionProperties;

    private GetDataSourceResult() {}
    /**
     * @return &lt;p&gt;A set of alternate data source parameters that you want to share for the credentials
     *             stored with this data source. The credentials are applied in tandem with the data source
     *             parameters when you copy a data source by using a create or update request. The API
     *             operation compares the &lt;code&gt;DataSourceParameters&lt;/code&gt; structure that&#39;s in the request
     *             with the structures in the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; allow list. If the
     *             structures are an exact match, the request is allowed to use the credentials from this
     *             existing data source. If the &lt;code&gt;AlternateDataSourceParameters&lt;/code&gt; list is null,
     *             the &lt;code&gt;Credentials&lt;/code&gt; originally used with this &lt;code&gt;DataSourceParameters&lt;/code&gt;
     *             are automatically allowed.&lt;/p&gt;
     * 
     */
    public List<DataSourceParameters> alternateDataSourceParameters() {
        return this.alternateDataSourceParameters == null ? List.of() : this.alternateDataSourceParameters;
    }
    /**
     * @return &lt;p&gt;The Amazon Resource Name (ARN) of the data source.&lt;/p&gt;
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return &lt;p&gt;The time that this data source was created.&lt;/p&gt;
     * 
     */
    public Optional<String> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }
    public Optional<DataSourceParameters> dataSourceParameters() {
        return Optional.ofNullable(this.dataSourceParameters);
    }
    public Optional<DataSourceErrorInfo> errorInfo() {
        return Optional.ofNullable(this.errorInfo);
    }
    /**
     * @return &lt;p&gt;The last time that this data source was updated.&lt;/p&gt;
     * 
     */
    public Optional<String> lastUpdatedTime() {
        return Optional.ofNullable(this.lastUpdatedTime);
    }
    /**
     * @return &lt;p&gt;A display name for the data source.&lt;/p&gt;
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return &lt;p&gt;A list of resource permissions on the data source.&lt;/p&gt;
     * 
     */
    public List<DataSourceResourcePermission> permissions() {
        return this.permissions == null ? List.of() : this.permissions;
    }
    public Optional<DataSourceSslProperties> sslProperties() {
        return Optional.ofNullable(this.sslProperties);
    }
    public Optional<DataSourceResourceStatus> status() {
        return Optional.ofNullable(this.status);
    }
    /**
     * @return &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.&lt;/p&gt;
     * 
     */
    public List<DataSourceTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public Optional<DataSourceVpcConnectionProperties> vpcConnectionProperties() {
        return Optional.ofNullable(this.vpcConnectionProperties);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DataSourceParameters> alternateDataSourceParameters;
        private @Nullable String arn;
        private @Nullable String createdTime;
        private @Nullable DataSourceParameters dataSourceParameters;
        private @Nullable DataSourceErrorInfo errorInfo;
        private @Nullable String lastUpdatedTime;
        private @Nullable String name;
        private @Nullable List<DataSourceResourcePermission> permissions;
        private @Nullable DataSourceSslProperties sslProperties;
        private @Nullable DataSourceResourceStatus status;
        private @Nullable List<DataSourceTag> tags;
        private @Nullable DataSourceVpcConnectionProperties vpcConnectionProperties;
        public Builder() {}
        public Builder(GetDataSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateDataSourceParameters = defaults.alternateDataSourceParameters;
    	      this.arn = defaults.arn;
    	      this.createdTime = defaults.createdTime;
    	      this.dataSourceParameters = defaults.dataSourceParameters;
    	      this.errorInfo = defaults.errorInfo;
    	      this.lastUpdatedTime = defaults.lastUpdatedTime;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.sslProperties = defaults.sslProperties;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.vpcConnectionProperties = defaults.vpcConnectionProperties;
        }

        @CustomType.Setter
        public Builder alternateDataSourceParameters(@Nullable List<DataSourceParameters> alternateDataSourceParameters) {
            this.alternateDataSourceParameters = alternateDataSourceParameters;
            return this;
        }
        public Builder alternateDataSourceParameters(DataSourceParameters... alternateDataSourceParameters) {
            return alternateDataSourceParameters(List.of(alternateDataSourceParameters));
        }
        @CustomType.Setter
        public Builder arn(@Nullable String arn) {
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(@Nullable String createdTime) {
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataSourceParameters(@Nullable DataSourceParameters dataSourceParameters) {
            this.dataSourceParameters = dataSourceParameters;
            return this;
        }
        @CustomType.Setter
        public Builder errorInfo(@Nullable DataSourceErrorInfo errorInfo) {
            this.errorInfo = errorInfo;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdatedTime(@Nullable String lastUpdatedTime) {
            this.lastUpdatedTime = lastUpdatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(@Nullable List<DataSourceResourcePermission> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(DataSourceResourcePermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder sslProperties(@Nullable DataSourceSslProperties sslProperties) {
            this.sslProperties = sslProperties;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable DataSourceResourceStatus status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<DataSourceTag> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(DataSourceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder vpcConnectionProperties(@Nullable DataSourceVpcConnectionProperties vpcConnectionProperties) {
            this.vpcConnectionProperties = vpcConnectionProperties;
            return this;
        }
        public GetDataSourceResult build() {
            final var o = new GetDataSourceResult();
            o.alternateDataSourceParameters = alternateDataSourceParameters;
            o.arn = arn;
            o.createdTime = createdTime;
            o.dataSourceParameters = dataSourceParameters;
            o.errorInfo = errorInfo;
            o.lastUpdatedTime = lastUpdatedTime;
            o.name = name;
            o.permissions = permissions;
            o.sslProperties = sslProperties;
            o.status = status;
            o.tags = tags;
            o.vpcConnectionProperties = vpcConnectionProperties;
            return o;
        }
    }
}
