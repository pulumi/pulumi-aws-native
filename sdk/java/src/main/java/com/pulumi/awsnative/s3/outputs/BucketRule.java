// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3.outputs;

import com.pulumi.awsnative.s3.enums.BucketRuleStatus;
import com.pulumi.awsnative.s3.outputs.BucketAbortIncompleteMultipartUpload;
import com.pulumi.awsnative.s3.outputs.BucketNoncurrentVersionExpiration;
import com.pulumi.awsnative.s3.outputs.BucketNoncurrentVersionTransition;
import com.pulumi.awsnative.s3.outputs.BucketTagFilter;
import com.pulumi.awsnative.s3.outputs.BucketTransition;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketRule {
    private @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
    private @Nullable String expirationDate;
    private @Nullable Integer expirationInDays;
    private @Nullable Boolean expiredObjectDeleteMarker;
    private @Nullable String id;
    private @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration;
    private @Nullable Integer noncurrentVersionExpirationInDays;
    private @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition;
    private @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions;
    private @Nullable String objectSizeGreaterThan;
    private @Nullable String objectSizeLessThan;
    private @Nullable String prefix;
    private BucketRuleStatus status;
    private @Nullable List<BucketTagFilter> tagFilters;
    private @Nullable BucketTransition transition;
    private @Nullable List<BucketTransition> transitions;

    private BucketRule() {}
    public Optional<BucketAbortIncompleteMultipartUpload> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    public Optional<Integer> expirationInDays() {
        return Optional.ofNullable(this.expirationInDays);
    }
    public Optional<Boolean> expiredObjectDeleteMarker() {
        return Optional.ofNullable(this.expiredObjectDeleteMarker);
    }
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<BucketNoncurrentVersionExpiration> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    public Optional<Integer> noncurrentVersionExpirationInDays() {
        return Optional.ofNullable(this.noncurrentVersionExpirationInDays);
    }
    public Optional<BucketNoncurrentVersionTransition> noncurrentVersionTransition() {
        return Optional.ofNullable(this.noncurrentVersionTransition);
    }
    public List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions() {
        return this.noncurrentVersionTransitions == null ? List.of() : this.noncurrentVersionTransitions;
    }
    public Optional<String> objectSizeGreaterThan() {
        return Optional.ofNullable(this.objectSizeGreaterThan);
    }
    public Optional<String> objectSizeLessThan() {
        return Optional.ofNullable(this.objectSizeLessThan);
    }
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public BucketRuleStatus status() {
        return this.status;
    }
    public List<BucketTagFilter> tagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }
    public Optional<BucketTransition> transition() {
        return Optional.ofNullable(this.transition);
    }
    public List<BucketTransition> transitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload;
        private @Nullable String expirationDate;
        private @Nullable Integer expirationInDays;
        private @Nullable Boolean expiredObjectDeleteMarker;
        private @Nullable String id;
        private @Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable Integer noncurrentVersionExpirationInDays;
        private @Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition;
        private @Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions;
        private @Nullable String objectSizeGreaterThan;
        private @Nullable String objectSizeLessThan;
        private @Nullable String prefix;
        private BucketRuleStatus status;
        private @Nullable List<BucketTagFilter> tagFilters;
        private @Nullable BucketTransition transition;
        private @Nullable List<BucketTransition> transitions;
        public Builder() {}
        public Builder(BucketRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expirationInDays = defaults.expirationInDays;
    	      this.expiredObjectDeleteMarker = defaults.expiredObjectDeleteMarker;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.noncurrentVersionExpirationInDays = defaults.noncurrentVersionExpirationInDays;
    	      this.noncurrentVersionTransition = defaults.noncurrentVersionTransition;
    	      this.noncurrentVersionTransitions = defaults.noncurrentVersionTransitions;
    	      this.objectSizeGreaterThan = defaults.objectSizeGreaterThan;
    	      this.objectSizeLessThan = defaults.objectSizeLessThan;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tagFilters = defaults.tagFilters;
    	      this.transition = defaults.transition;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortIncompleteMultipartUpload(@Nullable BucketAbortIncompleteMultipartUpload abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder expirationInDays(@Nullable Integer expirationInDays) {
            this.expirationInDays = expirationInDays;
            return this;
        }
        @CustomType.Setter
        public Builder expiredObjectDeleteMarker(@Nullable Boolean expiredObjectDeleteMarker) {
            this.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpiration(@Nullable BucketNoncurrentVersionExpiration noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpirationInDays(@Nullable Integer noncurrentVersionExpirationInDays) {
            this.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionTransition(@Nullable BucketNoncurrentVersionTransition noncurrentVersionTransition) {
            this.noncurrentVersionTransition = noncurrentVersionTransition;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionTransitions(@Nullable List<BucketNoncurrentVersionTransition> noncurrentVersionTransitions) {
            this.noncurrentVersionTransitions = noncurrentVersionTransitions;
            return this;
        }
        public Builder noncurrentVersionTransitions(BucketNoncurrentVersionTransition... noncurrentVersionTransitions) {
            return noncurrentVersionTransitions(List.of(noncurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder objectSizeGreaterThan(@Nullable String objectSizeGreaterThan) {
            this.objectSizeGreaterThan = objectSizeGreaterThan;
            return this;
        }
        @CustomType.Setter
        public Builder objectSizeLessThan(@Nullable String objectSizeLessThan) {
            this.objectSizeLessThan = objectSizeLessThan;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder status(BucketRuleStatus status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tagFilters(@Nullable List<BucketTagFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public Builder tagFilters(BucketTagFilter... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }
        @CustomType.Setter
        public Builder transition(@Nullable BucketTransition transition) {
            this.transition = transition;
            return this;
        }
        @CustomType.Setter
        public Builder transitions(@Nullable List<BucketTransition> transitions) {
            this.transitions = transitions;
            return this;
        }
        public Builder transitions(BucketTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public BucketRule build() {
            final var o = new BucketRule();
            o.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            o.expirationDate = expirationDate;
            o.expirationInDays = expirationInDays;
            o.expiredObjectDeleteMarker = expiredObjectDeleteMarker;
            o.id = id;
            o.noncurrentVersionExpiration = noncurrentVersionExpiration;
            o.noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDays;
            o.noncurrentVersionTransition = noncurrentVersionTransition;
            o.noncurrentVersionTransitions = noncurrentVersionTransitions;
            o.objectSizeGreaterThan = objectSizeGreaterThan;
            o.objectSizeLessThan = objectSizeLessThan;
            o.prefix = prefix;
            o.status = status;
            o.tagFilters = tagFilters;
            o.transition = transition;
            o.transitions = transitions;
            return o;
        }
    }
}
