// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.mediapackage;

import com.pulumi.awsnative.mediapackage.inputs.AssetTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssetArgs Empty = new AssetArgs();

    /**
     * The ID of the PackagingGroup for the Asset.
     * 
     */
    @Import(name="packagingGroupId", required=true)
    private Output<String> packagingGroupId;

    /**
     * @return The ID of the PackagingGroup for the Asset.
     * 
     */
    public Output<String> packagingGroupId() {
        return this.packagingGroupId;
    }

    /**
     * The resource ID to include in SPEKE key requests.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The resource ID to include in SPEKE key requests.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * ARN of the source object in S3.
     * 
     */
    @Import(name="sourceArn", required=true)
    private Output<String> sourceArn;

    /**
     * @return ARN of the source object in S3.
     * 
     */
    public Output<String> sourceArn() {
        return this.sourceArn;
    }

    /**
     * The IAM role_arn used to access the source S3 bucket.
     * 
     */
    @Import(name="sourceRoleArn", required=true)
    private Output<String> sourceRoleArn;

    /**
     * @return The IAM role_arn used to access the source S3 bucket.
     * 
     */
    public Output<String> sourceRoleArn() {
        return this.sourceRoleArn;
    }

    /**
     * A collection of tags associated with a resource
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AssetTagArgs>> tags;

    /**
     * @return A collection of tags associated with a resource
     * 
     */
    public Optional<Output<List<AssetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AssetArgs() {}

    private AssetArgs(AssetArgs $) {
        this.packagingGroupId = $.packagingGroupId;
        this.resourceId = $.resourceId;
        this.sourceArn = $.sourceArn;
        this.sourceRoleArn = $.sourceRoleArn;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetArgs $;

        public Builder() {
            $ = new AssetArgs();
        }

        public Builder(AssetArgs defaults) {
            $ = new AssetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param packagingGroupId The ID of the PackagingGroup for the Asset.
         * 
         * @return builder
         * 
         */
        public Builder packagingGroupId(Output<String> packagingGroupId) {
            $.packagingGroupId = packagingGroupId;
            return this;
        }

        /**
         * @param packagingGroupId The ID of the PackagingGroup for the Asset.
         * 
         * @return builder
         * 
         */
        public Builder packagingGroupId(String packagingGroupId) {
            return packagingGroupId(Output.of(packagingGroupId));
        }

        /**
         * @param resourceId The resource ID to include in SPEKE key requests.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource ID to include in SPEKE key requests.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param sourceArn ARN of the source object in S3.
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(Output<String> sourceArn) {
            $.sourceArn = sourceArn;
            return this;
        }

        /**
         * @param sourceArn ARN of the source object in S3.
         * 
         * @return builder
         * 
         */
        public Builder sourceArn(String sourceArn) {
            return sourceArn(Output.of(sourceArn));
        }

        /**
         * @param sourceRoleArn The IAM role_arn used to access the source S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder sourceRoleArn(Output<String> sourceRoleArn) {
            $.sourceRoleArn = sourceRoleArn;
            return this;
        }

        /**
         * @param sourceRoleArn The IAM role_arn used to access the source S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder sourceRoleArn(String sourceRoleArn) {
            return sourceRoleArn(Output.of(sourceRoleArn));
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AssetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AssetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A collection of tags associated with a resource
         * 
         * @return builder
         * 
         */
        public Builder tags(AssetTagArgs... tags) {
            return tags(List.of(tags));
        }

        public AssetArgs build() {
            $.packagingGroupId = Objects.requireNonNull($.packagingGroupId, "expected parameter 'packagingGroupId' to be non-null");
            $.sourceArn = Objects.requireNonNull($.sourceArn, "expected parameter 'sourceArn' to be non-null");
            $.sourceRoleArn = Objects.requireNonNull($.sourceRoleArn, "expected parameter 'sourceRoleArn' to be non-null");
            return $;
        }
    }

}
