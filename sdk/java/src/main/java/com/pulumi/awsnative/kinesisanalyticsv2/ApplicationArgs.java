// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kinesisanalyticsv2;

import com.pulumi.awsnative.kinesisanalyticsv2.enums.ApplicationMode;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationConfigurationArgs;
import com.pulumi.awsnative.kinesisanalyticsv2.inputs.ApplicationTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * Use this parameter to configure the application.
     * 
     */
    @Import(name="applicationConfiguration")
    private @Nullable Output<ApplicationConfigurationArgs> applicationConfiguration;

    /**
     * @return Use this parameter to configure the application.
     * 
     */
    public Optional<Output<ApplicationConfigurationArgs>> applicationConfiguration() {
        return Optional.ofNullable(this.applicationConfiguration);
    }

    /**
     * The description of the application.
     * 
     */
    @Import(name="applicationDescription")
    private @Nullable Output<String> applicationDescription;

    /**
     * @return The description of the application.
     * 
     */
    public Optional<Output<String>> applicationDescription() {
        return Optional.ofNullable(this.applicationDescription);
    }

    /**
     * To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
     * 
     */
    @Import(name="applicationMode")
    private @Nullable Output<ApplicationMode> applicationMode;

    /**
     * @return To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
     * 
     */
    public Optional<Output<ApplicationMode>> applicationMode() {
        return Optional.ofNullable(this.applicationMode);
    }

    /**
     * The name of the application.
     * 
     */
    @Import(name="applicationName")
    private @Nullable Output<String> applicationName;

    /**
     * @return The name of the application.
     * 
     */
    public Optional<Output<String>> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }

    /**
     * The runtime environment for the application.
     * 
     */
    @Import(name="runtimeEnvironment", required=true)
    private Output<String> runtimeEnvironment;

    /**
     * @return The runtime environment for the application.
     * 
     */
    public Output<String> runtimeEnvironment() {
        return this.runtimeEnvironment;
    }

    /**
     * Specifies the IAM role that the application uses to access external resources.
     * 
     */
    @Import(name="serviceExecutionRole", required=true)
    private Output<String> serviceExecutionRole;

    /**
     * @return Specifies the IAM role that the application uses to access external resources.
     * 
     */
    public Output<String> serviceExecutionRole() {
        return this.serviceExecutionRole;
    }

    /**
     * A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ApplicationTagArgs>> tags;

    /**
     * @return A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
     * 
     */
    public Optional<Output<List<ApplicationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.applicationConfiguration = $.applicationConfiguration;
        this.applicationDescription = $.applicationDescription;
        this.applicationMode = $.applicationMode;
        this.applicationName = $.applicationName;
        this.runtimeEnvironment = $.runtimeEnvironment;
        this.serviceExecutionRole = $.serviceExecutionRole;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationConfiguration Use this parameter to configure the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationConfiguration(@Nullable Output<ApplicationConfigurationArgs> applicationConfiguration) {
            $.applicationConfiguration = applicationConfiguration;
            return this;
        }

        /**
         * @param applicationConfiguration Use this parameter to configure the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationConfiguration(ApplicationConfigurationArgs applicationConfiguration) {
            return applicationConfiguration(Output.of(applicationConfiguration));
        }

        /**
         * @param applicationDescription The description of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationDescription(@Nullable Output<String> applicationDescription) {
            $.applicationDescription = applicationDescription;
            return this;
        }

        /**
         * @param applicationDescription The description of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationDescription(String applicationDescription) {
            return applicationDescription(Output.of(applicationDescription));
        }

        /**
         * @param applicationMode To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
         * 
         * @return builder
         * 
         */
        public Builder applicationMode(@Nullable Output<ApplicationMode> applicationMode) {
            $.applicationMode = applicationMode;
            return this;
        }

        /**
         * @param applicationMode To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
         * 
         * @return builder
         * 
         */
        public Builder applicationMode(ApplicationMode applicationMode) {
            return applicationMode(Output.of(applicationMode));
        }

        /**
         * @param applicationName The name of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(@Nullable Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName The name of the application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param runtimeEnvironment The runtime environment for the application.
         * 
         * @return builder
         * 
         */
        public Builder runtimeEnvironment(Output<String> runtimeEnvironment) {
            $.runtimeEnvironment = runtimeEnvironment;
            return this;
        }

        /**
         * @param runtimeEnvironment The runtime environment for the application.
         * 
         * @return builder
         * 
         */
        public Builder runtimeEnvironment(String runtimeEnvironment) {
            return runtimeEnvironment(Output.of(runtimeEnvironment));
        }

        /**
         * @param serviceExecutionRole Specifies the IAM role that the application uses to access external resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRole(Output<String> serviceExecutionRole) {
            $.serviceExecutionRole = serviceExecutionRole;
            return this;
        }

        /**
         * @param serviceExecutionRole Specifies the IAM role that the application uses to access external resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceExecutionRole(String serviceExecutionRole) {
            return serviceExecutionRole(Output.of(serviceExecutionRole));
        }

        /**
         * @param tags A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ApplicationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ApplicationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.
         * 
         * @return builder
         * 
         */
        public Builder tags(ApplicationTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ApplicationArgs build() {
            $.runtimeEnvironment = Objects.requireNonNull($.runtimeEnvironment, "expected parameter 'runtimeEnvironment' to be non-null");
            $.serviceExecutionRole = Objects.requireNonNull($.serviceExecutionRole, "expected parameter 'serviceExecutionRole' to be non-null");
            return $;
        }
    }

}
