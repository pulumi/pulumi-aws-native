// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.quicksight;

import com.pulumi.awsnative.quicksight.inputs.ThemeConfigurationArgs;
import com.pulumi.awsnative.quicksight.inputs.ThemeResourcePermissionArgs;
import com.pulumi.awsnative.quicksight.inputs.ThemeTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ThemeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThemeArgs Empty = new ThemeArgs();

    @Import(name="awsAccountId", required=true)
    private Output<String> awsAccountId;

    public Output<String> awsAccountId() {
        return this.awsAccountId;
    }

    /**
     * &lt;p&gt;The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				&lt;code&gt;ListThemes&lt;/code&gt; or choose &lt;b&gt;Themes&lt;/b&gt; from
     * 			within a QuickSight analysis. &lt;/p&gt;
     * 
     */
    @Import(name="baseThemeId")
    private @Nullable Output<String> baseThemeId;

    /**
     * @return &lt;p&gt;The ID of the theme that a custom theme will inherit from. All themes inherit from one of
     * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
     * 				&lt;code&gt;ListThemes&lt;/code&gt; or choose &lt;b&gt;Themes&lt;/b&gt; from
     * 			within a QuickSight analysis. &lt;/p&gt;
     * 
     */
    public Optional<Output<String>> baseThemeId() {
        return Optional.ofNullable(this.baseThemeId);
    }

    @Import(name="configuration")
    private @Nullable Output<ThemeConfigurationArgs> configuration;

    public Optional<Output<ThemeConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * &lt;p&gt;A display name for the theme.&lt;/p&gt;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &lt;p&gt;A display name for the theme.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * &lt;p&gt;A valid grouping of resource permissions to apply to the new theme.
     * 			&lt;/p&gt;
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<ThemeResourcePermissionArgs>> permissions;

    /**
     * @return &lt;p&gt;A valid grouping of resource permissions to apply to the new theme.
     * 			&lt;/p&gt;
     * 
     */
    public Optional<Output<List<ThemeResourcePermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * &lt;p&gt;A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.&lt;/p&gt;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ThemeTagArgs>> tags;

    /**
     * @return &lt;p&gt;A map of the key-value pairs for the resource tag or tags that you want to add to the
     * 			resource.&lt;/p&gt;
     * 
     */
    public Optional<Output<List<ThemeTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="themeId", required=true)
    private Output<String> themeId;

    public Output<String> themeId() {
        return this.themeId;
    }

    /**
     * &lt;p&gt;A description of the first version of the theme that you&#39;re creating. Every time
     * 				&lt;code&gt;UpdateTheme&lt;/code&gt; is called, a new version is created. Each version of the
     * 			theme has a description of the version in the &lt;code&gt;VersionDescription&lt;/code&gt;
     * 			field.&lt;/p&gt;
     * 
     */
    @Import(name="versionDescription")
    private @Nullable Output<String> versionDescription;

    /**
     * @return &lt;p&gt;A description of the first version of the theme that you&#39;re creating. Every time
     * 				&lt;code&gt;UpdateTheme&lt;/code&gt; is called, a new version is created. Each version of the
     * 			theme has a description of the version in the &lt;code&gt;VersionDescription&lt;/code&gt;
     * 			field.&lt;/p&gt;
     * 
     */
    public Optional<Output<String>> versionDescription() {
        return Optional.ofNullable(this.versionDescription);
    }

    private ThemeArgs() {}

    private ThemeArgs(ThemeArgs $) {
        this.awsAccountId = $.awsAccountId;
        this.baseThemeId = $.baseThemeId;
        this.configuration = $.configuration;
        this.name = $.name;
        this.permissions = $.permissions;
        this.tags = $.tags;
        this.themeId = $.themeId;
        this.versionDescription = $.versionDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ThemeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ThemeArgs $;

        public Builder() {
            $ = new ThemeArgs();
        }

        public Builder(ThemeArgs defaults) {
            $ = new ThemeArgs(Objects.requireNonNull(defaults));
        }

        public Builder awsAccountId(Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param baseThemeId &lt;p&gt;The ID of the theme that a custom theme will inherit from. All themes inherit from one of
         * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
         * 				&lt;code&gt;ListThemes&lt;/code&gt; or choose &lt;b&gt;Themes&lt;/b&gt; from
         * 			within a QuickSight analysis. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder baseThemeId(@Nullable Output<String> baseThemeId) {
            $.baseThemeId = baseThemeId;
            return this;
        }

        /**
         * @param baseThemeId &lt;p&gt;The ID of the theme that a custom theme will inherit from. All themes inherit from one of
         * 			the starting themes defined by Amazon QuickSight. For a list of the starting themes, use
         * 				&lt;code&gt;ListThemes&lt;/code&gt; or choose &lt;b&gt;Themes&lt;/b&gt; from
         * 			within a QuickSight analysis. &lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder baseThemeId(String baseThemeId) {
            return baseThemeId(Output.of(baseThemeId));
        }

        public Builder configuration(@Nullable Output<ThemeConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configuration(ThemeConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param name &lt;p&gt;A display name for the theme.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &lt;p&gt;A display name for the theme.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions &lt;p&gt;A valid grouping of resource permissions to apply to the new theme.
         * 			&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<ThemeResourcePermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions &lt;p&gt;A valid grouping of resource permissions to apply to the new theme.
         * 			&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<ThemeResourcePermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions &lt;p&gt;A valid grouping of resource permissions to apply to the new theme.
         * 			&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(ThemeResourcePermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param tags &lt;p&gt;A map of the key-value pairs for the resource tag or tags that you want to add to the
         * 			resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ThemeTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags &lt;p&gt;A map of the key-value pairs for the resource tag or tags that you want to add to the
         * 			resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ThemeTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags &lt;p&gt;A map of the key-value pairs for the resource tag or tags that you want to add to the
         * 			resource.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder tags(ThemeTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder themeId(Output<String> themeId) {
            $.themeId = themeId;
            return this;
        }

        public Builder themeId(String themeId) {
            return themeId(Output.of(themeId));
        }

        /**
         * @param versionDescription &lt;p&gt;A description of the first version of the theme that you&#39;re creating. Every time
         * 				&lt;code&gt;UpdateTheme&lt;/code&gt; is called, a new version is created. Each version of the
         * 			theme has a description of the version in the &lt;code&gt;VersionDescription&lt;/code&gt;
         * 			field.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(@Nullable Output<String> versionDescription) {
            $.versionDescription = versionDescription;
            return this;
        }

        /**
         * @param versionDescription &lt;p&gt;A description of the first version of the theme that you&#39;re creating. Every time
         * 				&lt;code&gt;UpdateTheme&lt;/code&gt; is called, a new version is created. Each version of the
         * 			theme has a description of the version in the &lt;code&gt;VersionDescription&lt;/code&gt;
         * 			field.&lt;/p&gt;
         * 
         * @return builder
         * 
         */
        public Builder versionDescription(String versionDescription) {
            return versionDescription(Output.of(versionDescription));
        }

        public ThemeArgs build() {
            $.awsAccountId = Objects.requireNonNull($.awsAccountId, "expected parameter 'awsAccountId' to be non-null");
            $.themeId = Objects.requireNonNull($.themeId, "expected parameter 'themeId' to be non-null");
            return $;
        }
    }

}
