// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ecs;

import com.pulumi.awsnative.ecs.enums.ServiceLaunchType;
import com.pulumi.awsnative.ecs.enums.ServicePropagateTags;
import com.pulumi.awsnative.ecs.enums.ServiceSchedulingStrategy;
import com.pulumi.awsnative.ecs.inputs.ServiceCapacityProviderStrategyItemArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceDeploymentConfigurationArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceDeploymentControllerArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceLoadBalancerArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceNetworkConfigurationArgs;
import com.pulumi.awsnative.ecs.inputs.ServicePlacementConstraintArgs;
import com.pulumi.awsnative.ecs.inputs.ServicePlacementStrategyArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceRegistryArgs;
import com.pulumi.awsnative.ecs.inputs.ServiceTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    @Import(name="capacityProviderStrategy")
    private @Nullable Output<List<ServiceCapacityProviderStrategyItemArgs>> capacityProviderStrategy;

    public Optional<Output<List<ServiceCapacityProviderStrategyItemArgs>>> capacityProviderStrategy() {
        return Optional.ofNullable(this.capacityProviderStrategy);
    }

    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    @Import(name="deploymentConfiguration")
    private @Nullable Output<ServiceDeploymentConfigurationArgs> deploymentConfiguration;

    public Optional<Output<ServiceDeploymentConfigurationArgs>> deploymentConfiguration() {
        return Optional.ofNullable(this.deploymentConfiguration);
    }

    @Import(name="deploymentController")
    private @Nullable Output<ServiceDeploymentControllerArgs> deploymentController;

    public Optional<Output<ServiceDeploymentControllerArgs>> deploymentController() {
        return Optional.ofNullable(this.deploymentController);
    }

    @Import(name="desiredCount")
    private @Nullable Output<Integer> desiredCount;

    public Optional<Output<Integer>> desiredCount() {
        return Optional.ofNullable(this.desiredCount);
    }

    @Import(name="enableECSManagedTags")
    private @Nullable Output<Boolean> enableECSManagedTags;

    public Optional<Output<Boolean>> enableECSManagedTags() {
        return Optional.ofNullable(this.enableECSManagedTags);
    }

    @Import(name="enableExecuteCommand")
    private @Nullable Output<Boolean> enableExecuteCommand;

    public Optional<Output<Boolean>> enableExecuteCommand() {
        return Optional.ofNullable(this.enableExecuteCommand);
    }

    @Import(name="healthCheckGracePeriodSeconds")
    private @Nullable Output<Integer> healthCheckGracePeriodSeconds;

    public Optional<Output<Integer>> healthCheckGracePeriodSeconds() {
        return Optional.ofNullable(this.healthCheckGracePeriodSeconds);
    }

    @Import(name="launchType")
    private @Nullable Output<ServiceLaunchType> launchType;

    public Optional<Output<ServiceLaunchType>> launchType() {
        return Optional.ofNullable(this.launchType);
    }

    @Import(name="loadBalancers")
    private @Nullable Output<List<ServiceLoadBalancerArgs>> loadBalancers;

    public Optional<Output<List<ServiceLoadBalancerArgs>>> loadBalancers() {
        return Optional.ofNullable(this.loadBalancers);
    }

    @Import(name="networkConfiguration")
    private @Nullable Output<ServiceNetworkConfigurationArgs> networkConfiguration;

    public Optional<Output<ServiceNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    @Import(name="placementConstraints")
    private @Nullable Output<List<ServicePlacementConstraintArgs>> placementConstraints;

    public Optional<Output<List<ServicePlacementConstraintArgs>>> placementConstraints() {
        return Optional.ofNullable(this.placementConstraints);
    }

    @Import(name="placementStrategies")
    private @Nullable Output<List<ServicePlacementStrategyArgs>> placementStrategies;

    public Optional<Output<List<ServicePlacementStrategyArgs>>> placementStrategies() {
        return Optional.ofNullable(this.placementStrategies);
    }

    @Import(name="platformVersion")
    private @Nullable Output<String> platformVersion;

    public Optional<Output<String>> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }

    @Import(name="propagateTags")
    private @Nullable Output<ServicePropagateTags> propagateTags;

    public Optional<Output<ServicePropagateTags>> propagateTags() {
        return Optional.ofNullable(this.propagateTags);
    }

    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    @Import(name="schedulingStrategy")
    private @Nullable Output<ServiceSchedulingStrategy> schedulingStrategy;

    public Optional<Output<ServiceSchedulingStrategy>> schedulingStrategy() {
        return Optional.ofNullable(this.schedulingStrategy);
    }

    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    @Import(name="serviceRegistries")
    private @Nullable Output<List<ServiceRegistryArgs>> serviceRegistries;

    public Optional<Output<List<ServiceRegistryArgs>>> serviceRegistries() {
        return Optional.ofNullable(this.serviceRegistries);
    }

    @Import(name="tags")
    private @Nullable Output<List<ServiceTagArgs>> tags;

    public Optional<Output<List<ServiceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="taskDefinition")
    private @Nullable Output<String> taskDefinition;

    public Optional<Output<String>> taskDefinition() {
        return Optional.ofNullable(this.taskDefinition);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.capacityProviderStrategy = $.capacityProviderStrategy;
        this.cluster = $.cluster;
        this.deploymentConfiguration = $.deploymentConfiguration;
        this.deploymentController = $.deploymentController;
        this.desiredCount = $.desiredCount;
        this.enableECSManagedTags = $.enableECSManagedTags;
        this.enableExecuteCommand = $.enableExecuteCommand;
        this.healthCheckGracePeriodSeconds = $.healthCheckGracePeriodSeconds;
        this.launchType = $.launchType;
        this.loadBalancers = $.loadBalancers;
        this.networkConfiguration = $.networkConfiguration;
        this.placementConstraints = $.placementConstraints;
        this.placementStrategies = $.placementStrategies;
        this.platformVersion = $.platformVersion;
        this.propagateTags = $.propagateTags;
        this.role = $.role;
        this.schedulingStrategy = $.schedulingStrategy;
        this.serviceName = $.serviceName;
        this.serviceRegistries = $.serviceRegistries;
        this.tags = $.tags;
        this.taskDefinition = $.taskDefinition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder capacityProviderStrategy(@Nullable Output<List<ServiceCapacityProviderStrategyItemArgs>> capacityProviderStrategy) {
            $.capacityProviderStrategy = capacityProviderStrategy;
            return this;
        }

        public Builder capacityProviderStrategy(List<ServiceCapacityProviderStrategyItemArgs> capacityProviderStrategy) {
            return capacityProviderStrategy(Output.of(capacityProviderStrategy));
        }

        public Builder capacityProviderStrategy(ServiceCapacityProviderStrategyItemArgs... capacityProviderStrategy) {
            return capacityProviderStrategy(List.of(capacityProviderStrategy));
        }

        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        public Builder deploymentConfiguration(@Nullable Output<ServiceDeploymentConfigurationArgs> deploymentConfiguration) {
            $.deploymentConfiguration = deploymentConfiguration;
            return this;
        }

        public Builder deploymentConfiguration(ServiceDeploymentConfigurationArgs deploymentConfiguration) {
            return deploymentConfiguration(Output.of(deploymentConfiguration));
        }

        public Builder deploymentController(@Nullable Output<ServiceDeploymentControllerArgs> deploymentController) {
            $.deploymentController = deploymentController;
            return this;
        }

        public Builder deploymentController(ServiceDeploymentControllerArgs deploymentController) {
            return deploymentController(Output.of(deploymentController));
        }

        public Builder desiredCount(@Nullable Output<Integer> desiredCount) {
            $.desiredCount = desiredCount;
            return this;
        }

        public Builder desiredCount(Integer desiredCount) {
            return desiredCount(Output.of(desiredCount));
        }

        public Builder enableECSManagedTags(@Nullable Output<Boolean> enableECSManagedTags) {
            $.enableECSManagedTags = enableECSManagedTags;
            return this;
        }

        public Builder enableECSManagedTags(Boolean enableECSManagedTags) {
            return enableECSManagedTags(Output.of(enableECSManagedTags));
        }

        public Builder enableExecuteCommand(@Nullable Output<Boolean> enableExecuteCommand) {
            $.enableExecuteCommand = enableExecuteCommand;
            return this;
        }

        public Builder enableExecuteCommand(Boolean enableExecuteCommand) {
            return enableExecuteCommand(Output.of(enableExecuteCommand));
        }

        public Builder healthCheckGracePeriodSeconds(@Nullable Output<Integer> healthCheckGracePeriodSeconds) {
            $.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds;
            return this;
        }

        public Builder healthCheckGracePeriodSeconds(Integer healthCheckGracePeriodSeconds) {
            return healthCheckGracePeriodSeconds(Output.of(healthCheckGracePeriodSeconds));
        }

        public Builder launchType(@Nullable Output<ServiceLaunchType> launchType) {
            $.launchType = launchType;
            return this;
        }

        public Builder launchType(ServiceLaunchType launchType) {
            return launchType(Output.of(launchType));
        }

        public Builder loadBalancers(@Nullable Output<List<ServiceLoadBalancerArgs>> loadBalancers) {
            $.loadBalancers = loadBalancers;
            return this;
        }

        public Builder loadBalancers(List<ServiceLoadBalancerArgs> loadBalancers) {
            return loadBalancers(Output.of(loadBalancers));
        }

        public Builder loadBalancers(ServiceLoadBalancerArgs... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }

        public Builder networkConfiguration(@Nullable Output<ServiceNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder networkConfiguration(ServiceNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public Builder placementConstraints(@Nullable Output<List<ServicePlacementConstraintArgs>> placementConstraints) {
            $.placementConstraints = placementConstraints;
            return this;
        }

        public Builder placementConstraints(List<ServicePlacementConstraintArgs> placementConstraints) {
            return placementConstraints(Output.of(placementConstraints));
        }

        public Builder placementConstraints(ServicePlacementConstraintArgs... placementConstraints) {
            return placementConstraints(List.of(placementConstraints));
        }

        public Builder placementStrategies(@Nullable Output<List<ServicePlacementStrategyArgs>> placementStrategies) {
            $.placementStrategies = placementStrategies;
            return this;
        }

        public Builder placementStrategies(List<ServicePlacementStrategyArgs> placementStrategies) {
            return placementStrategies(Output.of(placementStrategies));
        }

        public Builder placementStrategies(ServicePlacementStrategyArgs... placementStrategies) {
            return placementStrategies(List.of(placementStrategies));
        }

        public Builder platformVersion(@Nullable Output<String> platformVersion) {
            $.platformVersion = platformVersion;
            return this;
        }

        public Builder platformVersion(String platformVersion) {
            return platformVersion(Output.of(platformVersion));
        }

        public Builder propagateTags(@Nullable Output<ServicePropagateTags> propagateTags) {
            $.propagateTags = propagateTags;
            return this;
        }

        public Builder propagateTags(ServicePropagateTags propagateTags) {
            return propagateTags(Output.of(propagateTags));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder schedulingStrategy(@Nullable Output<ServiceSchedulingStrategy> schedulingStrategy) {
            $.schedulingStrategy = schedulingStrategy;
            return this;
        }

        public Builder schedulingStrategy(ServiceSchedulingStrategy schedulingStrategy) {
            return schedulingStrategy(Output.of(schedulingStrategy));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceRegistries(@Nullable Output<List<ServiceRegistryArgs>> serviceRegistries) {
            $.serviceRegistries = serviceRegistries;
            return this;
        }

        public Builder serviceRegistries(List<ServiceRegistryArgs> serviceRegistries) {
            return serviceRegistries(Output.of(serviceRegistries));
        }

        public Builder serviceRegistries(ServiceRegistryArgs... serviceRegistries) {
            return serviceRegistries(List.of(serviceRegistries));
        }

        public Builder tags(@Nullable Output<List<ServiceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ServiceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ServiceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder taskDefinition(@Nullable Output<String> taskDefinition) {
            $.taskDefinition = taskDefinition;
            return this;
        }

        public Builder taskDefinition(String taskDefinition) {
            return taskDefinition(Output.of(taskDefinition));
        }

        public ServiceArgs build() {
            return $;
        }
    }

}
