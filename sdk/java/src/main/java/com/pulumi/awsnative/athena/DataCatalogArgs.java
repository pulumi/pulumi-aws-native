// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.athena;

import com.pulumi.awsnative.athena.enums.DataCatalogType;
import com.pulumi.awsnative.athena.inputs.DataCatalogTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCatalogArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCatalogArgs Empty = new DataCatalogArgs();

    /**
     * A description of the data catalog to be created.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the data catalog to be created.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Object> parameters;

    /**
     * @return Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
     * 
     */
    public Optional<Output<Object>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * A list of comma separated tags to add to the data catalog that is created.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DataCatalogTagArgs>> tags;

    /**
     * @return A list of comma separated tags to add to the data catalog that is created.
     * 
     */
    public Optional<Output<List<DataCatalogTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
     * 
     */
    @Import(name="type", required=true)
    private Output<DataCatalogType> type;

    /**
     * @return The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
     * 
     */
    public Output<DataCatalogType> type() {
        return this.type;
    }

    private DataCatalogArgs() {}

    private DataCatalogArgs(DataCatalogArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.parameters = $.parameters;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCatalogArgs $;

        public Builder() {
            $ = new DataCatalogArgs();
        }

        public Builder(DataCatalogArgs defaults) {
            $ = new DataCatalogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the data catalog to be created.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the data catalog to be created.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the data catalog to create. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parameters Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Object> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Specifies the Lambda function or functions to use for creating the data catalog. This is a mapping whose values depend on the catalog type.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Object parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param tags A list of comma separated tags to add to the data catalog that is created.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DataCatalogTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of comma separated tags to add to the data catalog that is created.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DataCatalogTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of comma separated tags to add to the data catalog that is created.
         * 
         * @return builder
         * 
         */
        public Builder tags(DataCatalogTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<DataCatalogType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore.
         * 
         * @return builder
         * 
         */
        public Builder type(DataCatalogType type) {
            return type(Output.of(type));
        }

        public DataCatalogArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
