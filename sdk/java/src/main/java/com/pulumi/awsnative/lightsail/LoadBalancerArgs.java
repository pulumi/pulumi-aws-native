// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail;

import com.pulumi.awsnative.lightsail.inputs.LoadBalancerTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerArgs Empty = new LoadBalancerArgs();

    /**
     * The names of the instances attached to the load balancer.
     * 
     */
    @Import(name="attachedInstances")
    private @Nullable Output<List<String>> attachedInstances;

    /**
     * @return The names of the instances attached to the load balancer.
     * 
     */
    public Optional<Output<List<String>>> attachedInstances() {
        return Optional.ofNullable(this.attachedInstances);
    }

    /**
     * The path you provided to perform the load balancer health check. If you didn&#39;t specify a health check path, Lightsail uses the root path of your website (e.g., &#34;/&#34;).
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    /**
     * @return The path you provided to perform the load balancer health check. If you didn&#39;t specify a health check path, Lightsail uses the root path of your website (e.g., &#34;/&#34;).
     * 
     */
    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * The instance port where you&#39;re creating your load balancer.
     * 
     */
    @Import(name="instancePort", required=true)
    private Output<Integer> instancePort;

    /**
     * @return The instance port where you&#39;re creating your load balancer.
     * 
     */
    public Output<Integer> instancePort() {
        return this.instancePort;
    }

    /**
     * The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    /**
     * @return The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
     * 
     */
    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    /**
     * The name of your load balancer.
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable Output<String> loadBalancerName;

    /**
     * @return The name of your load balancer.
     * 
     */
    public Optional<Output<String>> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * Configuration option to enable session stickiness.
     * 
     */
    @Import(name="sessionStickinessEnabled")
    private @Nullable Output<Boolean> sessionStickinessEnabled;

    /**
     * @return Configuration option to enable session stickiness.
     * 
     */
    public Optional<Output<Boolean>> sessionStickinessEnabled() {
        return Optional.ofNullable(this.sessionStickinessEnabled);
    }

    /**
     * Configuration option to adjust session stickiness cookie duration parameter.
     * 
     */
    @Import(name="sessionStickinessLBCookieDurationSeconds")
    private @Nullable Output<String> sessionStickinessLBCookieDurationSeconds;

    /**
     * @return Configuration option to adjust session stickiness cookie duration parameter.
     * 
     */
    public Optional<Output<String>> sessionStickinessLBCookieDurationSeconds() {
        return Optional.ofNullable(this.sessionStickinessLBCookieDurationSeconds);
    }

    /**
     * An array of key-value pairs to apply to this resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LoadBalancerTagArgs>> tags;

    /**
     * @return An array of key-value pairs to apply to this resource.
     * 
     */
    public Optional<Output<List<LoadBalancerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the TLS policy to apply to the load balancer.
     * 
     */
    @Import(name="tlsPolicyName")
    private @Nullable Output<String> tlsPolicyName;

    /**
     * @return The name of the TLS policy to apply to the load balancer.
     * 
     */
    public Optional<Output<String>> tlsPolicyName() {
        return Optional.ofNullable(this.tlsPolicyName);
    }

    private LoadBalancerArgs() {}

    private LoadBalancerArgs(LoadBalancerArgs $) {
        this.attachedInstances = $.attachedInstances;
        this.healthCheckPath = $.healthCheckPath;
        this.instancePort = $.instancePort;
        this.ipAddressType = $.ipAddressType;
        this.loadBalancerName = $.loadBalancerName;
        this.sessionStickinessEnabled = $.sessionStickinessEnabled;
        this.sessionStickinessLBCookieDurationSeconds = $.sessionStickinessLBCookieDurationSeconds;
        this.tags = $.tags;
        this.tlsPolicyName = $.tlsPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerArgs $;

        public Builder() {
            $ = new LoadBalancerArgs();
        }

        public Builder(LoadBalancerArgs defaults) {
            $ = new LoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedInstances The names of the instances attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(@Nullable Output<List<String>> attachedInstances) {
            $.attachedInstances = attachedInstances;
            return this;
        }

        /**
         * @param attachedInstances The names of the instances attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(List<String> attachedInstances) {
            return attachedInstances(Output.of(attachedInstances));
        }

        /**
         * @param attachedInstances The names of the instances attached to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder attachedInstances(String... attachedInstances) {
            return attachedInstances(List.of(attachedInstances));
        }

        /**
         * @param healthCheckPath The path you provided to perform the load balancer health check. If you didn&#39;t specify a health check path, Lightsail uses the root path of your website (e.g., &#34;/&#34;).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        /**
         * @param healthCheckPath The path you provided to perform the load balancer health check. If you didn&#39;t specify a health check path, Lightsail uses the root path of your website (e.g., &#34;/&#34;).
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        /**
         * @param instancePort The instance port where you&#39;re creating your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder instancePort(Output<Integer> instancePort) {
            $.instancePort = instancePort;
            return this;
        }

        /**
         * @param instancePort The instance port where you&#39;re creating your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder instancePort(Integer instancePort) {
            return instancePort(Output.of(instancePort));
        }

        /**
         * @param ipAddressType The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        /**
         * @param ipAddressType The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        /**
         * @param loadBalancerName The name of your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName The name of your load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param sessionStickinessEnabled Configuration option to enable session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessEnabled(@Nullable Output<Boolean> sessionStickinessEnabled) {
            $.sessionStickinessEnabled = sessionStickinessEnabled;
            return this;
        }

        /**
         * @param sessionStickinessEnabled Configuration option to enable session stickiness.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessEnabled(Boolean sessionStickinessEnabled) {
            return sessionStickinessEnabled(Output.of(sessionStickinessEnabled));
        }

        /**
         * @param sessionStickinessLBCookieDurationSeconds Configuration option to adjust session stickiness cookie duration parameter.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessLBCookieDurationSeconds(@Nullable Output<String> sessionStickinessLBCookieDurationSeconds) {
            $.sessionStickinessLBCookieDurationSeconds = sessionStickinessLBCookieDurationSeconds;
            return this;
        }

        /**
         * @param sessionStickinessLBCookieDurationSeconds Configuration option to adjust session stickiness cookie duration parameter.
         * 
         * @return builder
         * 
         */
        public Builder sessionStickinessLBCookieDurationSeconds(String sessionStickinessLBCookieDurationSeconds) {
            return sessionStickinessLBCookieDurationSeconds(Output.of(sessionStickinessLBCookieDurationSeconds));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LoadBalancerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LoadBalancerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of key-value pairs to apply to this resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(LoadBalancerTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tlsPolicyName The name of the TLS policy to apply to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tlsPolicyName(@Nullable Output<String> tlsPolicyName) {
            $.tlsPolicyName = tlsPolicyName;
            return this;
        }

        /**
         * @param tlsPolicyName The name of the TLS policy to apply to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tlsPolicyName(String tlsPolicyName) {
            return tlsPolicyName(Output.of(tlsPolicyName));
        }

        public LoadBalancerArgs build() {
            $.instancePort = Objects.requireNonNull($.instancePort, "expected parameter 'instancePort' to be non-null");
            return $;
        }
    }

}
