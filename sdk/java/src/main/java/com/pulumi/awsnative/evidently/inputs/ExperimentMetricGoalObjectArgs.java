// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.evidently.inputs;

import com.pulumi.awsnative.evidently.enums.ExperimentMetricGoalObjectDesiredChange;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExperimentMetricGoalObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExperimentMetricGoalObjectArgs Empty = new ExperimentMetricGoalObjectArgs();

    @Import(name="desiredChange", required=true)
    private Output<ExperimentMetricGoalObjectDesiredChange> desiredChange;

    public Output<ExperimentMetricGoalObjectDesiredChange> desiredChange() {
        return this.desiredChange;
    }

    /**
     * The JSON path to reference the entity id in the event.
     * 
     */
    @Import(name="entityIdKey", required=true)
    private Output<String> entityIdKey;

    /**
     * @return The JSON path to reference the entity id in the event.
     * 
     */
    public Output<String> entityIdKey() {
        return this.entityIdKey;
    }

    /**
     * Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn&#39;t.
     * 
     */
    @Import(name="eventPattern", required=true)
    private Output<String> eventPattern;

    /**
     * @return Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn&#39;t.
     * 
     */
    public Output<String> eventPattern() {
        return this.eventPattern;
    }

    @Import(name="metricName", required=true)
    private Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    @Import(name="unitLabel")
    private @Nullable Output<String> unitLabel;

    public Optional<Output<String>> unitLabel() {
        return Optional.ofNullable(this.unitLabel);
    }

    /**
     * The JSON path to reference the numerical metric value in the event.
     * 
     */
    @Import(name="valueKey", required=true)
    private Output<String> valueKey;

    /**
     * @return The JSON path to reference the numerical metric value in the event.
     * 
     */
    public Output<String> valueKey() {
        return this.valueKey;
    }

    private ExperimentMetricGoalObjectArgs() {}

    private ExperimentMetricGoalObjectArgs(ExperimentMetricGoalObjectArgs $) {
        this.desiredChange = $.desiredChange;
        this.entityIdKey = $.entityIdKey;
        this.eventPattern = $.eventPattern;
        this.metricName = $.metricName;
        this.unitLabel = $.unitLabel;
        this.valueKey = $.valueKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExperimentMetricGoalObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExperimentMetricGoalObjectArgs $;

        public Builder() {
            $ = new ExperimentMetricGoalObjectArgs();
        }

        public Builder(ExperimentMetricGoalObjectArgs defaults) {
            $ = new ExperimentMetricGoalObjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder desiredChange(Output<ExperimentMetricGoalObjectDesiredChange> desiredChange) {
            $.desiredChange = desiredChange;
            return this;
        }

        public Builder desiredChange(ExperimentMetricGoalObjectDesiredChange desiredChange) {
            return desiredChange(Output.of(desiredChange));
        }

        /**
         * @param entityIdKey The JSON path to reference the entity id in the event.
         * 
         * @return builder
         * 
         */
        public Builder entityIdKey(Output<String> entityIdKey) {
            $.entityIdKey = entityIdKey;
            return this;
        }

        /**
         * @param entityIdKey The JSON path to reference the entity id in the event.
         * 
         * @return builder
         * 
         */
        public Builder entityIdKey(String entityIdKey) {
            return entityIdKey(Output.of(entityIdKey));
        }

        /**
         * @param eventPattern Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn&#39;t.
         * 
         * @return builder
         * 
         */
        public Builder eventPattern(Output<String> eventPattern) {
            $.eventPattern = eventPattern;
            return this;
        }

        /**
         * @param eventPattern Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn&#39;t.
         * 
         * @return builder
         * 
         */
        public Builder eventPattern(String eventPattern) {
            return eventPattern(Output.of(eventPattern));
        }

        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder unitLabel(@Nullable Output<String> unitLabel) {
            $.unitLabel = unitLabel;
            return this;
        }

        public Builder unitLabel(String unitLabel) {
            return unitLabel(Output.of(unitLabel));
        }

        /**
         * @param valueKey The JSON path to reference the numerical metric value in the event.
         * 
         * @return builder
         * 
         */
        public Builder valueKey(Output<String> valueKey) {
            $.valueKey = valueKey;
            return this;
        }

        /**
         * @param valueKey The JSON path to reference the numerical metric value in the event.
         * 
         * @return builder
         * 
         */
        public Builder valueKey(String valueKey) {
            return valueKey(Output.of(valueKey));
        }

        public ExperimentMetricGoalObjectArgs build() {
            $.desiredChange = Objects.requireNonNull($.desiredChange, "expected parameter 'desiredChange' to be non-null");
            $.entityIdKey = Objects.requireNonNull($.entityIdKey, "expected parameter 'entityIdKey' to be non-null");
            $.eventPattern = Objects.requireNonNull($.eventPattern, "expected parameter 'eventPattern' to be non-null");
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.valueKey = Objects.requireNonNull($.valueKey, "expected parameter 'valueKey' to be non-null");
            return $;
        }
    }

}
