// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.lightsail.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the parameters of the database.
 * 
 */
public final class DatabaseRelationalDatabaseParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseRelationalDatabaseParameterArgs Empty = new DatabaseRelationalDatabaseParameterArgs();

    /**
     * Specifies the valid range of values for the parameter.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable Output<String> allowedValues;

    /**
     * @return Specifies the valid range of values for the parameter.
     * 
     */
    public Optional<Output<String>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * Indicates when parameter updates are applied. Can be immediate or pending-reboot.
     * 
     */
    @Import(name="applyMethod")
    private @Nullable Output<String> applyMethod;

    /**
     * @return Indicates when parameter updates are applied. Can be immediate or pending-reboot.
     * 
     */
    public Optional<Output<String>> applyMethod() {
        return Optional.ofNullable(this.applyMethod);
    }

    /**
     * Specifies the engine-specific parameter type.
     * 
     */
    @Import(name="applyType")
    private @Nullable Output<String> applyType;

    /**
     * @return Specifies the engine-specific parameter type.
     * 
     */
    public Optional<Output<String>> applyType() {
        return Optional.ofNullable(this.applyType);
    }

    /**
     * Specifies the valid data type for the parameter.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return Specifies the valid data type for the parameter.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * Provides a description of the parameter.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Provides a description of the parameter.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A Boolean value indicating whether the parameter can be modified.
     * 
     */
    @Import(name="isModifiable")
    private @Nullable Output<Boolean> isModifiable;

    /**
     * @return A Boolean value indicating whether the parameter can be modified.
     * 
     */
    public Optional<Output<Boolean>> isModifiable() {
        return Optional.ofNullable(this.isModifiable);
    }

    /**
     * Specifies the name of the parameter.
     * 
     */
    @Import(name="parameterName")
    private @Nullable Output<String> parameterName;

    /**
     * @return Specifies the name of the parameter.
     * 
     */
    public Optional<Output<String>> parameterName() {
        return Optional.ofNullable(this.parameterName);
    }

    /**
     * Specifies the value of the parameter.
     * 
     */
    @Import(name="parameterValue")
    private @Nullable Output<String> parameterValue;

    /**
     * @return Specifies the value of the parameter.
     * 
     */
    public Optional<Output<String>> parameterValue() {
        return Optional.ofNullable(this.parameterValue);
    }

    private DatabaseRelationalDatabaseParameterArgs() {}

    private DatabaseRelationalDatabaseParameterArgs(DatabaseRelationalDatabaseParameterArgs $) {
        this.allowedValues = $.allowedValues;
        this.applyMethod = $.applyMethod;
        this.applyType = $.applyType;
        this.dataType = $.dataType;
        this.description = $.description;
        this.isModifiable = $.isModifiable;
        this.parameterName = $.parameterName;
        this.parameterValue = $.parameterValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseRelationalDatabaseParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseRelationalDatabaseParameterArgs $;

        public Builder() {
            $ = new DatabaseRelationalDatabaseParameterArgs();
        }

        public Builder(DatabaseRelationalDatabaseParameterArgs defaults) {
            $ = new DatabaseRelationalDatabaseParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedValues Specifies the valid range of values for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(@Nullable Output<String> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        /**
         * @param allowedValues Specifies the valid range of values for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(String allowedValues) {
            return allowedValues(Output.of(allowedValues));
        }

        /**
         * @param applyMethod Indicates when parameter updates are applied. Can be immediate or pending-reboot.
         * 
         * @return builder
         * 
         */
        public Builder applyMethod(@Nullable Output<String> applyMethod) {
            $.applyMethod = applyMethod;
            return this;
        }

        /**
         * @param applyMethod Indicates when parameter updates are applied. Can be immediate or pending-reboot.
         * 
         * @return builder
         * 
         */
        public Builder applyMethod(String applyMethod) {
            return applyMethod(Output.of(applyMethod));
        }

        /**
         * @param applyType Specifies the engine-specific parameter type.
         * 
         * @return builder
         * 
         */
        public Builder applyType(@Nullable Output<String> applyType) {
            $.applyType = applyType;
            return this;
        }

        /**
         * @param applyType Specifies the engine-specific parameter type.
         * 
         * @return builder
         * 
         */
        public Builder applyType(String applyType) {
            return applyType(Output.of(applyType));
        }

        /**
         * @param dataType Specifies the valid data type for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType Specifies the valid data type for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param description Provides a description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Provides a description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isModifiable A Boolean value indicating whether the parameter can be modified.
         * 
         * @return builder
         * 
         */
        public Builder isModifiable(@Nullable Output<Boolean> isModifiable) {
            $.isModifiable = isModifiable;
            return this;
        }

        /**
         * @param isModifiable A Boolean value indicating whether the parameter can be modified.
         * 
         * @return builder
         * 
         */
        public Builder isModifiable(Boolean isModifiable) {
            return isModifiable(Output.of(isModifiable));
        }

        /**
         * @param parameterName Specifies the name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(@Nullable Output<String> parameterName) {
            $.parameterName = parameterName;
            return this;
        }

        /**
         * @param parameterName Specifies the name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterName(String parameterName) {
            return parameterName(Output.of(parameterName));
        }

        /**
         * @param parameterValue Specifies the value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterValue(@Nullable Output<String> parameterValue) {
            $.parameterValue = parameterValue;
            return this;
        }

        /**
         * @param parameterValue Specifies the value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder parameterValue(String parameterValue) {
            return parameterValue(Output.of(parameterValue));
        }

        public DatabaseRelationalDatabaseParameterArgs build() {
            return $;
        }
    }

}
