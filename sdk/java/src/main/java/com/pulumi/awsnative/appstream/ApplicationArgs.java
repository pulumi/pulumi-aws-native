// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appstream;

import com.pulumi.awsnative.appstream.inputs.ApplicationS3LocationArgs;
import com.pulumi.awsnative.appstream.inputs.ApplicationTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    @Import(name="appBlockArn", required=true)
    private Output<String> appBlockArn;

    public Output<String> appBlockArn() {
        return this.appBlockArn;
    }

    @Import(name="attributesToDelete")
    private @Nullable Output<List<String>> attributesToDelete;

    public Optional<Output<List<String>>> attributesToDelete() {
        return Optional.ofNullable(this.attributesToDelete);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="iconS3Location", required=true)
    private Output<ApplicationS3LocationArgs> iconS3Location;

    public Output<ApplicationS3LocationArgs> iconS3Location() {
        return this.iconS3Location;
    }

    @Import(name="instanceFamilies", required=true)
    private Output<List<String>> instanceFamilies;

    public Output<List<String>> instanceFamilies() {
        return this.instanceFamilies;
    }

    @Import(name="launchParameters")
    private @Nullable Output<String> launchParameters;

    public Optional<Output<String>> launchParameters() {
        return Optional.ofNullable(this.launchParameters);
    }

    @Import(name="launchPath", required=true)
    private Output<String> launchPath;

    public Output<String> launchPath() {
        return this.launchPath;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="platforms", required=true)
    private Output<List<String>> platforms;

    public Output<List<String>> platforms() {
        return this.platforms;
    }

    @Import(name="tags")
    private @Nullable Output<List<ApplicationTagArgs>> tags;

    public Optional<Output<List<ApplicationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    private ApplicationArgs() {}

    private ApplicationArgs(ApplicationArgs $) {
        this.appBlockArn = $.appBlockArn;
        this.attributesToDelete = $.attributesToDelete;
        this.description = $.description;
        this.displayName = $.displayName;
        this.iconS3Location = $.iconS3Location;
        this.instanceFamilies = $.instanceFamilies;
        this.launchParameters = $.launchParameters;
        this.launchPath = $.launchPath;
        this.name = $.name;
        this.platforms = $.platforms;
        this.tags = $.tags;
        this.workingDirectory = $.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationArgs $;

        public Builder() {
            $ = new ApplicationArgs();
        }

        public Builder(ApplicationArgs defaults) {
            $ = new ApplicationArgs(Objects.requireNonNull(defaults));
        }

        public Builder appBlockArn(Output<String> appBlockArn) {
            $.appBlockArn = appBlockArn;
            return this;
        }

        public Builder appBlockArn(String appBlockArn) {
            return appBlockArn(Output.of(appBlockArn));
        }

        public Builder attributesToDelete(@Nullable Output<List<String>> attributesToDelete) {
            $.attributesToDelete = attributesToDelete;
            return this;
        }

        public Builder attributesToDelete(List<String> attributesToDelete) {
            return attributesToDelete(Output.of(attributesToDelete));
        }

        public Builder attributesToDelete(String... attributesToDelete) {
            return attributesToDelete(List.of(attributesToDelete));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder iconS3Location(Output<ApplicationS3LocationArgs> iconS3Location) {
            $.iconS3Location = iconS3Location;
            return this;
        }

        public Builder iconS3Location(ApplicationS3LocationArgs iconS3Location) {
            return iconS3Location(Output.of(iconS3Location));
        }

        public Builder instanceFamilies(Output<List<String>> instanceFamilies) {
            $.instanceFamilies = instanceFamilies;
            return this;
        }

        public Builder instanceFamilies(List<String> instanceFamilies) {
            return instanceFamilies(Output.of(instanceFamilies));
        }

        public Builder instanceFamilies(String... instanceFamilies) {
            return instanceFamilies(List.of(instanceFamilies));
        }

        public Builder launchParameters(@Nullable Output<String> launchParameters) {
            $.launchParameters = launchParameters;
            return this;
        }

        public Builder launchParameters(String launchParameters) {
            return launchParameters(Output.of(launchParameters));
        }

        public Builder launchPath(Output<String> launchPath) {
            $.launchPath = launchPath;
            return this;
        }

        public Builder launchPath(String launchPath) {
            return launchPath(Output.of(launchPath));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder platforms(Output<List<String>> platforms) {
            $.platforms = platforms;
            return this;
        }

        public Builder platforms(List<String> platforms) {
            return platforms(Output.of(platforms));
        }

        public Builder platforms(String... platforms) {
            return platforms(List.of(platforms));
        }

        public Builder tags(@Nullable Output<List<ApplicationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ApplicationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ApplicationTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        public ApplicationArgs build() {
            $.appBlockArn = Objects.requireNonNull($.appBlockArn, "expected parameter 'appBlockArn' to be non-null");
            $.iconS3Location = Objects.requireNonNull($.iconS3Location, "expected parameter 'iconS3Location' to be non-null");
            $.instanceFamilies = Objects.requireNonNull($.instanceFamilies, "expected parameter 'instanceFamilies' to be non-null");
            $.launchPath = Objects.requireNonNull($.launchPath, "expected parameter 'launchPath' to be non-null");
            $.platforms = Objects.requireNonNull($.platforms, "expected parameter 'platforms' to be non-null");
            return $;
        }
    }

}
