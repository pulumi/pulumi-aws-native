// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.ssm;

import com.pulumi.awsnative.ssm.inputs.ResourceDataSyncS3DestinationArgs;
import com.pulumi.awsnative.ssm.inputs.ResourceDataSyncSyncSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceDataSyncArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceDataSyncArgs Empty = new ResourceDataSyncArgs();

    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    @Import(name="bucketPrefix")
    private @Nullable Output<String> bucketPrefix;

    public Optional<Output<String>> bucketPrefix() {
        return Optional.ofNullable(this.bucketPrefix);
    }

    @Import(name="bucketRegion")
    private @Nullable Output<String> bucketRegion;

    public Optional<Output<String>> bucketRegion() {
        return Optional.ofNullable(this.bucketRegion);
    }

    @Import(name="kMSKeyArn")
    private @Nullable Output<String> kMSKeyArn;

    public Optional<Output<String>> kMSKeyArn() {
        return Optional.ofNullable(this.kMSKeyArn);
    }

    @Import(name="s3Destination")
    private @Nullable Output<ResourceDataSyncS3DestinationArgs> s3Destination;

    public Optional<Output<ResourceDataSyncS3DestinationArgs>> s3Destination() {
        return Optional.ofNullable(this.s3Destination);
    }

    @Import(name="syncFormat")
    private @Nullable Output<String> syncFormat;

    public Optional<Output<String>> syncFormat() {
        return Optional.ofNullable(this.syncFormat);
    }

    @Import(name="syncName", required=true)
    private Output<String> syncName;

    public Output<String> syncName() {
        return this.syncName;
    }

    @Import(name="syncSource")
    private @Nullable Output<ResourceDataSyncSyncSourceArgs> syncSource;

    public Optional<Output<ResourceDataSyncSyncSourceArgs>> syncSource() {
        return Optional.ofNullable(this.syncSource);
    }

    @Import(name="syncType")
    private @Nullable Output<String> syncType;

    public Optional<Output<String>> syncType() {
        return Optional.ofNullable(this.syncType);
    }

    private ResourceDataSyncArgs() {}

    private ResourceDataSyncArgs(ResourceDataSyncArgs $) {
        this.bucketName = $.bucketName;
        this.bucketPrefix = $.bucketPrefix;
        this.bucketRegion = $.bucketRegion;
        this.kMSKeyArn = $.kMSKeyArn;
        this.s3Destination = $.s3Destination;
        this.syncFormat = $.syncFormat;
        this.syncName = $.syncName;
        this.syncSource = $.syncSource;
        this.syncType = $.syncType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceDataSyncArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceDataSyncArgs $;

        public Builder() {
            $ = new ResourceDataSyncArgs();
        }

        public Builder(ResourceDataSyncArgs defaults) {
            $ = new ResourceDataSyncArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder bucketPrefix(@Nullable Output<String> bucketPrefix) {
            $.bucketPrefix = bucketPrefix;
            return this;
        }

        public Builder bucketPrefix(String bucketPrefix) {
            return bucketPrefix(Output.of(bucketPrefix));
        }

        public Builder bucketRegion(@Nullable Output<String> bucketRegion) {
            $.bucketRegion = bucketRegion;
            return this;
        }

        public Builder bucketRegion(String bucketRegion) {
            return bucketRegion(Output.of(bucketRegion));
        }

        public Builder kMSKeyArn(@Nullable Output<String> kMSKeyArn) {
            $.kMSKeyArn = kMSKeyArn;
            return this;
        }

        public Builder kMSKeyArn(String kMSKeyArn) {
            return kMSKeyArn(Output.of(kMSKeyArn));
        }

        public Builder s3Destination(@Nullable Output<ResourceDataSyncS3DestinationArgs> s3Destination) {
            $.s3Destination = s3Destination;
            return this;
        }

        public Builder s3Destination(ResourceDataSyncS3DestinationArgs s3Destination) {
            return s3Destination(Output.of(s3Destination));
        }

        public Builder syncFormat(@Nullable Output<String> syncFormat) {
            $.syncFormat = syncFormat;
            return this;
        }

        public Builder syncFormat(String syncFormat) {
            return syncFormat(Output.of(syncFormat));
        }

        public Builder syncName(Output<String> syncName) {
            $.syncName = syncName;
            return this;
        }

        public Builder syncName(String syncName) {
            return syncName(Output.of(syncName));
        }

        public Builder syncSource(@Nullable Output<ResourceDataSyncSyncSourceArgs> syncSource) {
            $.syncSource = syncSource;
            return this;
        }

        public Builder syncSource(ResourceDataSyncSyncSourceArgs syncSource) {
            return syncSource(Output.of(syncSource));
        }

        public Builder syncType(@Nullable Output<String> syncType) {
            $.syncType = syncType;
            return this;
        }

        public Builder syncType(String syncType) {
            return syncType(Output.of(syncType));
        }

        public ResourceDataSyncArgs build() {
            $.syncName = Objects.requireNonNull($.syncName, "expected parameter 'syncName' to be non-null");
            return $;
        }
    }

}
