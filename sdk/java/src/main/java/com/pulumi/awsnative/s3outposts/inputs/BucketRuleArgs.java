// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.s3outposts.inputs;

import com.pulumi.awsnative.s3outposts.enums.BucketRuleStatus;
import com.pulumi.awsnative.s3outposts.inputs.BucketAbortIncompleteMultipartUploadArgs;
import com.pulumi.awsnative.s3outposts.inputs.BucketRuleFilterPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies lifecycle rules for an Amazon S3Outposts bucket. You must specify at least one of the following: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays.
 * 
 */
public final class BucketRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketRuleArgs Empty = new BucketRuleArgs();

    /**
     * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
     * 
     */
    @Import(name="abortIncompleteMultipartUpload")
    private @Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;

    /**
     * @return Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
     * 
     */
    public Optional<Output<BucketAbortIncompleteMultipartUploadArgs>> abortIncompleteMultipartUpload() {
        return Optional.ofNullable(this.abortIncompleteMultipartUpload);
    }

    /**
     * Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
     * 
     */
    @Import(name="expirationInDays")
    private @Nullable Output<Integer> expirationInDays;

    /**
     * @return Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
     * 
     */
    public Optional<Output<Integer>> expirationInDays() {
        return Optional.ofNullable(this.expirationInDays);
    }

    /**
     * The container for the filter of the lifecycle rule.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<BucketRuleFilterPropertiesArgs> filter;

    /**
     * @return The container for the filter of the lifecycle rule.
     * 
     */
    public Optional<Output<BucketRuleFilterPropertiesArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Unique identifier for the lifecycle rule. The value can&#39;t be longer than 255 characters.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique identifier for the lifecycle rule. The value can&#39;t be longer than 255 characters.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="status")
    private @Nullable Output<BucketRuleStatus> status;

    public Optional<Output<BucketRuleStatus>> status() {
        return Optional.ofNullable(this.status);
    }

    private BucketRuleArgs() {}

    private BucketRuleArgs(BucketRuleArgs $) {
        this.abortIncompleteMultipartUpload = $.abortIncompleteMultipartUpload;
        this.expirationDate = $.expirationDate;
        this.expirationInDays = $.expirationInDays;
        this.filter = $.filter;
        this.id = $.id;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketRuleArgs $;

        public Builder() {
            $ = new BucketRuleArgs();
        }

        public Builder(BucketRuleArgs defaults) {
            $ = new BucketRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abortIncompleteMultipartUpload Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
         * 
         * @return builder
         * 
         */
        public Builder abortIncompleteMultipartUpload(@Nullable Output<BucketAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload) {
            $.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }

        /**
         * @param abortIncompleteMultipartUpload Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
         * 
         * @return builder
         * 
         */
        public Builder abortIncompleteMultipartUpload(BucketAbortIncompleteMultipartUploadArgs abortIncompleteMultipartUpload) {
            return abortIncompleteMultipartUpload(Output.of(abortIncompleteMultipartUpload));
        }

        /**
         * @param expirationDate Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param expirationInDays Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
         * 
         * @return builder
         * 
         */
        public Builder expirationInDays(@Nullable Output<Integer> expirationInDays) {
            $.expirationInDays = expirationInDays;
            return this;
        }

        /**
         * @param expirationInDays Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
         * 
         * @return builder
         * 
         */
        public Builder expirationInDays(Integer expirationInDays) {
            return expirationInDays(Output.of(expirationInDays));
        }

        /**
         * @param filter The container for the filter of the lifecycle rule.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<BucketRuleFilterPropertiesArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter The container for the filter of the lifecycle rule.
         * 
         * @return builder
         * 
         */
        public Builder filter(BucketRuleFilterPropertiesArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param id Unique identifier for the lifecycle rule. The value can&#39;t be longer than 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the lifecycle rule. The value can&#39;t be longer than 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder status(@Nullable Output<BucketRuleStatus> status) {
            $.status = status;
            return this;
        }

        public Builder status(BucketRuleStatus status) {
            return status(Output.of(status));
        }

        public BucketRuleArgs build() {
            return $;
        }
    }

}
