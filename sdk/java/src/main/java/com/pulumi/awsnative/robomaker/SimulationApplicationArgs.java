// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.robomaker;

import com.pulumi.awsnative.robomaker.inputs.SimulationApplicationRenderingEngineArgs;
import com.pulumi.awsnative.robomaker.inputs.SimulationApplicationRobotSoftwareSuiteArgs;
import com.pulumi.awsnative.robomaker.inputs.SimulationApplicationSimulationSoftwareSuiteArgs;
import com.pulumi.awsnative.robomaker.inputs.SimulationApplicationSourceConfigArgs;
import com.pulumi.awsnative.robomaker.inputs.SimulationApplicationTagsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SimulationApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SimulationApplicationArgs Empty = new SimulationApplicationArgs();

    /**
     * The current revision id.
     * 
     */
    @Import(name="currentRevisionId")
    private @Nullable Output<String> currentRevisionId;

    /**
     * @return The current revision id.
     * 
     */
    public Optional<Output<String>> currentRevisionId() {
        return Optional.ofNullable(this.currentRevisionId);
    }

    /**
     * The URI of the Docker image for the robot application.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The URI of the Docker image for the robot application.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The name of the simulation application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the simulation application.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The rendering engine for the simulation application.
     * 
     */
    @Import(name="renderingEngine")
    private @Nullable Output<SimulationApplicationRenderingEngineArgs> renderingEngine;

    /**
     * @return The rendering engine for the simulation application.
     * 
     */
    public Optional<Output<SimulationApplicationRenderingEngineArgs>> renderingEngine() {
        return Optional.ofNullable(this.renderingEngine);
    }

    /**
     * The robot software suite used by the simulation application.
     * 
     */
    @Import(name="robotSoftwareSuite", required=true)
    private Output<SimulationApplicationRobotSoftwareSuiteArgs> robotSoftwareSuite;

    /**
     * @return The robot software suite used by the simulation application.
     * 
     */
    public Output<SimulationApplicationRobotSoftwareSuiteArgs> robotSoftwareSuite() {
        return this.robotSoftwareSuite;
    }

    /**
     * The simulation software suite used by the simulation application.
     * 
     */
    @Import(name="simulationSoftwareSuite", required=true)
    private Output<SimulationApplicationSimulationSoftwareSuiteArgs> simulationSoftwareSuite;

    /**
     * @return The simulation software suite used by the simulation application.
     * 
     */
    public Output<SimulationApplicationSimulationSoftwareSuiteArgs> simulationSoftwareSuite() {
        return this.simulationSoftwareSuite;
    }

    /**
     * The sources of the simulation application.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<SimulationApplicationSourceConfigArgs>> sources;

    /**
     * @return The sources of the simulation application.
     * 
     */
    public Optional<Output<List<SimulationApplicationSourceConfigArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="tags")
    private @Nullable Output<SimulationApplicationTagsArgs> tags;

    public Optional<Output<SimulationApplicationTagsArgs>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SimulationApplicationArgs() {}

    private SimulationApplicationArgs(SimulationApplicationArgs $) {
        this.currentRevisionId = $.currentRevisionId;
        this.environment = $.environment;
        this.name = $.name;
        this.renderingEngine = $.renderingEngine;
        this.robotSoftwareSuite = $.robotSoftwareSuite;
        this.simulationSoftwareSuite = $.simulationSoftwareSuite;
        this.sources = $.sources;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SimulationApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SimulationApplicationArgs $;

        public Builder() {
            $ = new SimulationApplicationArgs();
        }

        public Builder(SimulationApplicationArgs defaults) {
            $ = new SimulationApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentRevisionId The current revision id.
         * 
         * @return builder
         * 
         */
        public Builder currentRevisionId(@Nullable Output<String> currentRevisionId) {
            $.currentRevisionId = currentRevisionId;
            return this;
        }

        /**
         * @param currentRevisionId The current revision id.
         * 
         * @return builder
         * 
         */
        public Builder currentRevisionId(String currentRevisionId) {
            return currentRevisionId(Output.of(currentRevisionId));
        }

        /**
         * @param environment The URI of the Docker image for the robot application.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The URI of the Docker image for the robot application.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param name The name of the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param renderingEngine The rendering engine for the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder renderingEngine(@Nullable Output<SimulationApplicationRenderingEngineArgs> renderingEngine) {
            $.renderingEngine = renderingEngine;
            return this;
        }

        /**
         * @param renderingEngine The rendering engine for the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder renderingEngine(SimulationApplicationRenderingEngineArgs renderingEngine) {
            return renderingEngine(Output.of(renderingEngine));
        }

        /**
         * @param robotSoftwareSuite The robot software suite used by the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder robotSoftwareSuite(Output<SimulationApplicationRobotSoftwareSuiteArgs> robotSoftwareSuite) {
            $.robotSoftwareSuite = robotSoftwareSuite;
            return this;
        }

        /**
         * @param robotSoftwareSuite The robot software suite used by the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder robotSoftwareSuite(SimulationApplicationRobotSoftwareSuiteArgs robotSoftwareSuite) {
            return robotSoftwareSuite(Output.of(robotSoftwareSuite));
        }

        /**
         * @param simulationSoftwareSuite The simulation software suite used by the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder simulationSoftwareSuite(Output<SimulationApplicationSimulationSoftwareSuiteArgs> simulationSoftwareSuite) {
            $.simulationSoftwareSuite = simulationSoftwareSuite;
            return this;
        }

        /**
         * @param simulationSoftwareSuite The simulation software suite used by the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder simulationSoftwareSuite(SimulationApplicationSimulationSoftwareSuiteArgs simulationSoftwareSuite) {
            return simulationSoftwareSuite(Output.of(simulationSoftwareSuite));
        }

        /**
         * @param sources The sources of the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<SimulationApplicationSourceConfigArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The sources of the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<SimulationApplicationSourceConfigArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The sources of the simulation application.
         * 
         * @return builder
         * 
         */
        public Builder sources(SimulationApplicationSourceConfigArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder tags(@Nullable Output<SimulationApplicationTagsArgs> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(SimulationApplicationTagsArgs tags) {
            return tags(Output.of(tags));
        }

        public SimulationApplicationArgs build() {
            $.robotSoftwareSuite = Objects.requireNonNull($.robotSoftwareSuite, "expected parameter 'robotSoftwareSuite' to be non-null");
            $.simulationSoftwareSuite = Objects.requireNonNull($.simulationSoftwareSuite, "expected parameter 'simulationSoftwareSuite' to be non-null");
            return $;
        }
    }

}
