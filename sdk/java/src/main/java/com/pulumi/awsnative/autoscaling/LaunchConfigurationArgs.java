// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.autoscaling;

import com.pulumi.awsnative.autoscaling.inputs.LaunchConfigurationBlockDeviceMappingArgs;
import com.pulumi.awsnative.autoscaling.inputs.LaunchConfigurationMetadataOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LaunchConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LaunchConfigurationArgs Empty = new LaunchConfigurationArgs();

    /**
     * For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group&#39;s instances.
     * 
     */
    @Import(name="associatePublicIpAddress")
    private @Nullable Output<Boolean> associatePublicIpAddress;

    /**
     * @return For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group&#39;s instances.
     * 
     */
    public Optional<Output<Boolean>> associatePublicIpAddress() {
        return Optional.ofNullable(this.associatePublicIpAddress);
    }

    /**
     * Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
     * 
     */
    @Import(name="blockDeviceMappings")
    private @Nullable Output<List<LaunchConfigurationBlockDeviceMappingArgs>> blockDeviceMappings;

    /**
     * @return Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
     * 
     */
    public Optional<Output<List<LaunchConfigurationBlockDeviceMappingArgs>>> blockDeviceMappings() {
        return Optional.ofNullable(this.blockDeviceMappings);
    }

    /**
     * The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
     * 
     */
    @Import(name="classicLinkVPCId")
    private @Nullable Output<String> classicLinkVPCId;

    /**
     * @return The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
     * 
     */
    public Optional<Output<String>> classicLinkVPCId() {
        return Optional.ofNullable(this.classicLinkVPCId);
    }

    /**
     * The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
     * 
     */
    @Import(name="classicLinkVPCSecurityGroups")
    private @Nullable Output<List<String>> classicLinkVPCSecurityGroups;

    /**
     * @return The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
     * 
     */
    public Optional<Output<List<String>>> classicLinkVPCSecurityGroups() {
        return Optional.ofNullable(this.classicLinkVPCSecurityGroups);
    }

    /**
     * Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
     * 
     */
    @Import(name="ebsOptimized")
    private @Nullable Output<Boolean> ebsOptimized;

    /**
     * @return Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
     * 
     */
    public Optional<Output<Boolean>> ebsOptimized() {
        return Optional.ofNullable(this.ebsOptimized);
    }

    /**
     * Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
     * 
     */
    @Import(name="iamInstanceProfile")
    private @Nullable Output<String> iamInstanceProfile;

    /**
     * @return Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
     * 
     */
    public Optional<Output<String>> iamInstanceProfile() {
        return Optional.ofNullable(this.iamInstanceProfile);
    }

    /**
     * Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * The ID of the Amazon EC2 instance you want to use to create the launch configuration.
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return The ID of the Amazon EC2 instance you want to use to create the launch configuration.
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
     * 
     */
    @Import(name="instanceMonitoring")
    private @Nullable Output<Boolean> instanceMonitoring;

    /**
     * @return Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
     * 
     */
    public Optional<Output<Boolean>> instanceMonitoring() {
        return Optional.ofNullable(this.instanceMonitoring);
    }

    /**
     * Specifies the instance type of the EC2 instance.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    /**
     * @return Specifies the instance type of the EC2 instance.
     * 
     */
    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * Provides the ID of the kernel associated with the EC2 AMI.
     * 
     */
    @Import(name="kernelId")
    private @Nullable Output<String> kernelId;

    /**
     * @return Provides the ID of the kernel associated with the EC2 AMI.
     * 
     */
    public Optional<Output<String>> kernelId() {
        return Optional.ofNullable(this.kernelId);
    }

    /**
     * Provides the name of the EC2 key pair.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return Provides the name of the EC2 key pair.
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * The name of the launch configuration. This name must be unique per Region per account.
     * 
     */
    @Import(name="launchConfigurationName")
    private @Nullable Output<String> launchConfigurationName;

    /**
     * @return The name of the launch configuration. This name must be unique per Region per account.
     * 
     */
    public Optional<Output<String>> launchConfigurationName() {
        return Optional.ofNullable(this.launchConfigurationName);
    }

    /**
     * The metadata options for the instances.
     * 
     */
    @Import(name="metadataOptions")
    private @Nullable Output<LaunchConfigurationMetadataOptionsArgs> metadataOptions;

    /**
     * @return The metadata options for the instances.
     * 
     */
    public Optional<Output<LaunchConfigurationMetadataOptionsArgs>> metadataOptions() {
        return Optional.ofNullable(this.metadataOptions);
    }

    /**
     * The tenancy of the instance, either default or dedicated.
     * 
     */
    @Import(name="placementTenancy")
    private @Nullable Output<String> placementTenancy;

    /**
     * @return The tenancy of the instance, either default or dedicated.
     * 
     */
    public Optional<Output<String>> placementTenancy() {
        return Optional.ofNullable(this.placementTenancy);
    }

    /**
     * The ID of the RAM disk to select.
     * 
     */
    @Import(name="ramDiskId")
    private @Nullable Output<String> ramDiskId;

    /**
     * @return The ID of the RAM disk to select.
     * 
     */
    public Optional<Output<String>> ramDiskId() {
        return Optional.ofNullable(this.ramDiskId);
    }

    /**
     * A list that contains the security groups to assign to the instances in the Auto Scaling group.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    /**
     * @return A list that contains the security groups to assign to the instances in the Auto Scaling group.
     * 
     */
    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
     * 
     */
    @Import(name="spotPrice")
    private @Nullable Output<String> spotPrice;

    /**
     * @return The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
     * 
     */
    public Optional<Output<String>> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }

    /**
     * The Base64-encoded user data to make available to the launched EC2 instances.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return The Base64-encoded user data to make available to the launched EC2 instances.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    private LaunchConfigurationArgs() {}

    private LaunchConfigurationArgs(LaunchConfigurationArgs $) {
        this.associatePublicIpAddress = $.associatePublicIpAddress;
        this.blockDeviceMappings = $.blockDeviceMappings;
        this.classicLinkVPCId = $.classicLinkVPCId;
        this.classicLinkVPCSecurityGroups = $.classicLinkVPCSecurityGroups;
        this.ebsOptimized = $.ebsOptimized;
        this.iamInstanceProfile = $.iamInstanceProfile;
        this.imageId = $.imageId;
        this.instanceId = $.instanceId;
        this.instanceMonitoring = $.instanceMonitoring;
        this.instanceType = $.instanceType;
        this.kernelId = $.kernelId;
        this.keyName = $.keyName;
        this.launchConfigurationName = $.launchConfigurationName;
        this.metadataOptions = $.metadataOptions;
        this.placementTenancy = $.placementTenancy;
        this.ramDiskId = $.ramDiskId;
        this.securityGroups = $.securityGroups;
        this.spotPrice = $.spotPrice;
        this.userData = $.userData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LaunchConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LaunchConfigurationArgs $;

        public Builder() {
            $ = new LaunchConfigurationArgs();
        }

        public Builder(LaunchConfigurationArgs defaults) {
            $ = new LaunchConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatePublicIpAddress For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group&#39;s instances.
         * 
         * @return builder
         * 
         */
        public Builder associatePublicIpAddress(@Nullable Output<Boolean> associatePublicIpAddress) {
            $.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }

        /**
         * @param associatePublicIpAddress For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group&#39;s instances.
         * 
         * @return builder
         * 
         */
        public Builder associatePublicIpAddress(Boolean associatePublicIpAddress) {
            return associatePublicIpAddress(Output.of(associatePublicIpAddress));
        }

        /**
         * @param blockDeviceMappings Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(@Nullable Output<List<LaunchConfigurationBlockDeviceMappingArgs>> blockDeviceMappings) {
            $.blockDeviceMappings = blockDeviceMappings;
            return this;
        }

        /**
         * @param blockDeviceMappings Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(List<LaunchConfigurationBlockDeviceMappingArgs> blockDeviceMappings) {
            return blockDeviceMappings(Output.of(blockDeviceMappings));
        }

        /**
         * @param blockDeviceMappings Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(LaunchConfigurationBlockDeviceMappingArgs... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }

        /**
         * @param classicLinkVPCId The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
         * 
         * @return builder
         * 
         */
        public Builder classicLinkVPCId(@Nullable Output<String> classicLinkVPCId) {
            $.classicLinkVPCId = classicLinkVPCId;
            return this;
        }

        /**
         * @param classicLinkVPCId The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
         * 
         * @return builder
         * 
         */
        public Builder classicLinkVPCId(String classicLinkVPCId) {
            return classicLinkVPCId(Output.of(classicLinkVPCId));
        }

        /**
         * @param classicLinkVPCSecurityGroups The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
         * 
         * @return builder
         * 
         */
        public Builder classicLinkVPCSecurityGroups(@Nullable Output<List<String>> classicLinkVPCSecurityGroups) {
            $.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups;
            return this;
        }

        /**
         * @param classicLinkVPCSecurityGroups The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
         * 
         * @return builder
         * 
         */
        public Builder classicLinkVPCSecurityGroups(List<String> classicLinkVPCSecurityGroups) {
            return classicLinkVPCSecurityGroups(Output.of(classicLinkVPCSecurityGroups));
        }

        /**
         * @param classicLinkVPCSecurityGroups The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
         * 
         * @return builder
         * 
         */
        public Builder classicLinkVPCSecurityGroups(String... classicLinkVPCSecurityGroups) {
            return classicLinkVPCSecurityGroups(List.of(classicLinkVPCSecurityGroups));
        }

        /**
         * @param ebsOptimized Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimized(@Nullable Output<Boolean> ebsOptimized) {
            $.ebsOptimized = ebsOptimized;
            return this;
        }

        /**
         * @param ebsOptimized Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
         * 
         * @return builder
         * 
         */
        public Builder ebsOptimized(Boolean ebsOptimized) {
            return ebsOptimized(Output.of(ebsOptimized));
        }

        /**
         * @param iamInstanceProfile Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder iamInstanceProfile(@Nullable Output<String> iamInstanceProfile) {
            $.iamInstanceProfile = iamInstanceProfile;
            return this;
        }

        /**
         * @param iamInstanceProfile Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
         * 
         * @return builder
         * 
         */
        public Builder iamInstanceProfile(String iamInstanceProfile) {
            return iamInstanceProfile(Output.of(iamInstanceProfile));
        }

        /**
         * @param imageId Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceId The ID of the Amazon EC2 instance you want to use to create the launch configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The ID of the Amazon EC2 instance you want to use to create the launch configuration.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceMonitoring Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
         * 
         * @return builder
         * 
         */
        public Builder instanceMonitoring(@Nullable Output<Boolean> instanceMonitoring) {
            $.instanceMonitoring = instanceMonitoring;
            return this;
        }

        /**
         * @param instanceMonitoring Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
         * 
         * @return builder
         * 
         */
        public Builder instanceMonitoring(Boolean instanceMonitoring) {
            return instanceMonitoring(Output.of(instanceMonitoring));
        }

        /**
         * @param instanceType Specifies the instance type of the EC2 instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType Specifies the instance type of the EC2 instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param kernelId Provides the ID of the kernel associated with the EC2 AMI.
         * 
         * @return builder
         * 
         */
        public Builder kernelId(@Nullable Output<String> kernelId) {
            $.kernelId = kernelId;
            return this;
        }

        /**
         * @param kernelId Provides the ID of the kernel associated with the EC2 AMI.
         * 
         * @return builder
         * 
         */
        public Builder kernelId(String kernelId) {
            return kernelId(Output.of(kernelId));
        }

        /**
         * @param keyName Provides the name of the EC2 key pair.
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName Provides the name of the EC2 key pair.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account.
         * 
         * @return builder
         * 
         */
        public Builder launchConfigurationName(@Nullable Output<String> launchConfigurationName) {
            $.launchConfigurationName = launchConfigurationName;
            return this;
        }

        /**
         * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account.
         * 
         * @return builder
         * 
         */
        public Builder launchConfigurationName(String launchConfigurationName) {
            return launchConfigurationName(Output.of(launchConfigurationName));
        }

        /**
         * @param metadataOptions The metadata options for the instances.
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(@Nullable Output<LaunchConfigurationMetadataOptionsArgs> metadataOptions) {
            $.metadataOptions = metadataOptions;
            return this;
        }

        /**
         * @param metadataOptions The metadata options for the instances.
         * 
         * @return builder
         * 
         */
        public Builder metadataOptions(LaunchConfigurationMetadataOptionsArgs metadataOptions) {
            return metadataOptions(Output.of(metadataOptions));
        }

        /**
         * @param placementTenancy The tenancy of the instance, either default or dedicated.
         * 
         * @return builder
         * 
         */
        public Builder placementTenancy(@Nullable Output<String> placementTenancy) {
            $.placementTenancy = placementTenancy;
            return this;
        }

        /**
         * @param placementTenancy The tenancy of the instance, either default or dedicated.
         * 
         * @return builder
         * 
         */
        public Builder placementTenancy(String placementTenancy) {
            return placementTenancy(Output.of(placementTenancy));
        }

        /**
         * @param ramDiskId The ID of the RAM disk to select.
         * 
         * @return builder
         * 
         */
        public Builder ramDiskId(@Nullable Output<String> ramDiskId) {
            $.ramDiskId = ramDiskId;
            return this;
        }

        /**
         * @param ramDiskId The ID of the RAM disk to select.
         * 
         * @return builder
         * 
         */
        public Builder ramDiskId(String ramDiskId) {
            return ramDiskId(Output.of(ramDiskId));
        }

        /**
         * @param securityGroups A list that contains the security groups to assign to the instances in the Auto Scaling group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups A list that contains the security groups to assign to the instances in the Auto Scaling group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups A list that contains the security groups to assign to the instances in the Auto Scaling group.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param spotPrice The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
         * 
         * @return builder
         * 
         */
        public Builder spotPrice(@Nullable Output<String> spotPrice) {
            $.spotPrice = spotPrice;
            return this;
        }

        /**
         * @param spotPrice The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
         * 
         * @return builder
         * 
         */
        public Builder spotPrice(String spotPrice) {
            return spotPrice(Output.of(spotPrice));
        }

        /**
         * @param userData The Base64-encoded user data to make available to the launched EC2 instances.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData The Base64-encoded user data to make available to the launched EC2 instances.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public LaunchConfigurationArgs build() {
            $.imageId = Objects.requireNonNull($.imageId, "expected parameter 'imageId' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            return $;
        }
    }

}
