// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.appstream;

import com.pulumi.awsnative.appstream.inputs.EntitlementAttributeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EntitlementArgs extends com.pulumi.resources.ResourceArgs {

    public static final EntitlementArgs Empty = new EntitlementArgs();

    @Import(name="appVisibility", required=true)
    private Output<String> appVisibility;

    public Output<String> appVisibility() {
        return this.appVisibility;
    }

    @Import(name="attributes", required=true)
    private Output<List<EntitlementAttributeArgs>> attributes;

    public Output<List<EntitlementAttributeArgs>> attributes() {
        return this.attributes;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="stackName", required=true)
    private Output<String> stackName;

    public Output<String> stackName() {
        return this.stackName;
    }

    private EntitlementArgs() {}

    private EntitlementArgs(EntitlementArgs $) {
        this.appVisibility = $.appVisibility;
        this.attributes = $.attributes;
        this.description = $.description;
        this.name = $.name;
        this.stackName = $.stackName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntitlementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntitlementArgs $;

        public Builder() {
            $ = new EntitlementArgs();
        }

        public Builder(EntitlementArgs defaults) {
            $ = new EntitlementArgs(Objects.requireNonNull(defaults));
        }

        public Builder appVisibility(Output<String> appVisibility) {
            $.appVisibility = appVisibility;
            return this;
        }

        public Builder appVisibility(String appVisibility) {
            return appVisibility(Output.of(appVisibility));
        }

        public Builder attributes(Output<List<EntitlementAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(List<EntitlementAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder attributes(EntitlementAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder stackName(Output<String> stackName) {
            $.stackName = stackName;
            return this;
        }

        public Builder stackName(String stackName) {
            return stackName(Output.of(stackName));
        }

        public EntitlementArgs build() {
            $.appVisibility = Objects.requireNonNull($.appVisibility, "expected parameter 'appVisibility' to be non-null");
            $.attributes = Objects.requireNonNull($.attributes, "expected parameter 'attributes' to be non-null");
            $.stackName = Objects.requireNonNull($.stackName, "expected parameter 'stackName' to be non-null");
            return $;
        }
    }

}
