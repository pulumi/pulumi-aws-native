// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.kendra.inputs;

import com.pulumi.awsnative.kendra.enums.DataSourceDatabaseEngineType;
import com.pulumi.awsnative.kendra.inputs.DataSourceAclConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceColumnConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceConnectionConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceSqlConfigurationArgs;
import com.pulumi.awsnative.kendra.inputs.DataSourceVpcConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataSourceDatabaseConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataSourceDatabaseConfigurationArgs Empty = new DataSourceDatabaseConfigurationArgs();

    @Import(name="aclConfiguration")
    private @Nullable Output<DataSourceAclConfigurationArgs> aclConfiguration;

    public Optional<Output<DataSourceAclConfigurationArgs>> aclConfiguration() {
        return Optional.ofNullable(this.aclConfiguration);
    }

    @Import(name="columnConfiguration", required=true)
    private Output<DataSourceColumnConfigurationArgs> columnConfiguration;

    public Output<DataSourceColumnConfigurationArgs> columnConfiguration() {
        return this.columnConfiguration;
    }

    @Import(name="connectionConfiguration", required=true)
    private Output<DataSourceConnectionConfigurationArgs> connectionConfiguration;

    public Output<DataSourceConnectionConfigurationArgs> connectionConfiguration() {
        return this.connectionConfiguration;
    }

    @Import(name="databaseEngineType", required=true)
    private Output<DataSourceDatabaseEngineType> databaseEngineType;

    public Output<DataSourceDatabaseEngineType> databaseEngineType() {
        return this.databaseEngineType;
    }

    @Import(name="sqlConfiguration")
    private @Nullable Output<DataSourceSqlConfigurationArgs> sqlConfiguration;

    public Optional<Output<DataSourceSqlConfigurationArgs>> sqlConfiguration() {
        return Optional.ofNullable(this.sqlConfiguration);
    }

    @Import(name="vpcConfiguration")
    private @Nullable Output<DataSourceVpcConfigurationArgs> vpcConfiguration;

    public Optional<Output<DataSourceVpcConfigurationArgs>> vpcConfiguration() {
        return Optional.ofNullable(this.vpcConfiguration);
    }

    private DataSourceDatabaseConfigurationArgs() {}

    private DataSourceDatabaseConfigurationArgs(DataSourceDatabaseConfigurationArgs $) {
        this.aclConfiguration = $.aclConfiguration;
        this.columnConfiguration = $.columnConfiguration;
        this.connectionConfiguration = $.connectionConfiguration;
        this.databaseEngineType = $.databaseEngineType;
        this.sqlConfiguration = $.sqlConfiguration;
        this.vpcConfiguration = $.vpcConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceDatabaseConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceDatabaseConfigurationArgs $;

        public Builder() {
            $ = new DataSourceDatabaseConfigurationArgs();
        }

        public Builder(DataSourceDatabaseConfigurationArgs defaults) {
            $ = new DataSourceDatabaseConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder aclConfiguration(@Nullable Output<DataSourceAclConfigurationArgs> aclConfiguration) {
            $.aclConfiguration = aclConfiguration;
            return this;
        }

        public Builder aclConfiguration(DataSourceAclConfigurationArgs aclConfiguration) {
            return aclConfiguration(Output.of(aclConfiguration));
        }

        public Builder columnConfiguration(Output<DataSourceColumnConfigurationArgs> columnConfiguration) {
            $.columnConfiguration = columnConfiguration;
            return this;
        }

        public Builder columnConfiguration(DataSourceColumnConfigurationArgs columnConfiguration) {
            return columnConfiguration(Output.of(columnConfiguration));
        }

        public Builder connectionConfiguration(Output<DataSourceConnectionConfigurationArgs> connectionConfiguration) {
            $.connectionConfiguration = connectionConfiguration;
            return this;
        }

        public Builder connectionConfiguration(DataSourceConnectionConfigurationArgs connectionConfiguration) {
            return connectionConfiguration(Output.of(connectionConfiguration));
        }

        public Builder databaseEngineType(Output<DataSourceDatabaseEngineType> databaseEngineType) {
            $.databaseEngineType = databaseEngineType;
            return this;
        }

        public Builder databaseEngineType(DataSourceDatabaseEngineType databaseEngineType) {
            return databaseEngineType(Output.of(databaseEngineType));
        }

        public Builder sqlConfiguration(@Nullable Output<DataSourceSqlConfigurationArgs> sqlConfiguration) {
            $.sqlConfiguration = sqlConfiguration;
            return this;
        }

        public Builder sqlConfiguration(DataSourceSqlConfigurationArgs sqlConfiguration) {
            return sqlConfiguration(Output.of(sqlConfiguration));
        }

        public Builder vpcConfiguration(@Nullable Output<DataSourceVpcConfigurationArgs> vpcConfiguration) {
            $.vpcConfiguration = vpcConfiguration;
            return this;
        }

        public Builder vpcConfiguration(DataSourceVpcConfigurationArgs vpcConfiguration) {
            return vpcConfiguration(Output.of(vpcConfiguration));
        }

        public DataSourceDatabaseConfigurationArgs build() {
            $.columnConfiguration = Objects.requireNonNull($.columnConfiguration, "expected parameter 'columnConfiguration' to be non-null");
            $.connectionConfiguration = Objects.requireNonNull($.connectionConfiguration, "expected parameter 'connectionConfiguration' to be non-null");
            $.databaseEngineType = Objects.requireNonNull($.databaseEngineType, "expected parameter 'databaseEngineType' to be non-null");
            return $;
        }
    }

}
