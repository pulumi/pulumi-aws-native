// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsnative.iot;

import com.pulumi.awsnative.iot.enums.DimensionType;
import com.pulumi.awsnative.iot.inputs.DimensionTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DimensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DimensionArgs Empty = new DimensionArgs();

    /**
     * A unique identifier for the dimension.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A unique identifier for the dimension.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the value or list of values for the dimension.
     * 
     */
    @Import(name="stringValues", required=true)
    private Output<List<String>> stringValues;

    /**
     * @return Specifies the value or list of values for the dimension.
     * 
     */
    public Output<List<String>> stringValues() {
        return this.stringValues;
    }

    /**
     * Metadata that can be used to manage the dimension.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<DimensionTagArgs>> tags;

    /**
     * @return Metadata that can be used to manage the dimension.
     * 
     */
    public Optional<Output<List<DimensionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies the type of the dimension.
     * 
     */
    @Import(name="type", required=true)
    private Output<DimensionType> type;

    /**
     * @return Specifies the type of the dimension.
     * 
     */
    public Output<DimensionType> type() {
        return this.type;
    }

    private DimensionArgs() {}

    private DimensionArgs(DimensionArgs $) {
        this.name = $.name;
        this.stringValues = $.stringValues;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DimensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DimensionArgs $;

        public Builder() {
            $ = new DimensionArgs();
        }

        public Builder(DimensionArgs defaults) {
            $ = new DimensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name A unique identifier for the dimension.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique identifier for the dimension.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param stringValues Specifies the value or list of values for the dimension.
         * 
         * @return builder
         * 
         */
        public Builder stringValues(Output<List<String>> stringValues) {
            $.stringValues = stringValues;
            return this;
        }

        /**
         * @param stringValues Specifies the value or list of values for the dimension.
         * 
         * @return builder
         * 
         */
        public Builder stringValues(List<String> stringValues) {
            return stringValues(Output.of(stringValues));
        }

        /**
         * @param stringValues Specifies the value or list of values for the dimension.
         * 
         * @return builder
         * 
         */
        public Builder stringValues(String... stringValues) {
            return stringValues(List.of(stringValues));
        }

        /**
         * @param tags Metadata that can be used to manage the dimension.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<DimensionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Metadata that can be used to manage the dimension.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<DimensionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Metadata that can be used to manage the dimension.
         * 
         * @return builder
         * 
         */
        public Builder tags(DimensionTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Specifies the type of the dimension.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<DimensionType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of the dimension.
         * 
         * @return builder
         * 
         */
        public Builder type(DimensionType type) {
            return type(Output.of(type));
        }

        public DimensionArgs build() {
            $.stringValues = Objects.requireNonNull($.stringValues, "expected parameter 'stringValues' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
