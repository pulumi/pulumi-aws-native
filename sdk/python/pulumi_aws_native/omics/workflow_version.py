# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkflowVersionArgs', 'WorkflowVersion']

@pulumi.input_type
class WorkflowVersionArgs:
    def __init__(__self__, *,
                 workflow_id: pulumi.Input[_builtins.str],
                 accelerators: Optional[pulumi.Input['WorkflowVersionAccelerators']] = None,
                 container_registry_map: Optional[pulumi.Input['WorkflowVersionContainerRegistryMapArgs']] = None,
                 container_registry_map_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 definition_repository: Optional[pulumi.Input['WorkflowVersionDefinitionRepositoryArgs']] = None,
                 definition_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input['WorkflowVersionWorkflowEngine']] = None,
                 main: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_template: Optional[pulumi.Input[Mapping[str, pulumi.Input['WorkflowVersionWorkflowParameterArgs']]]] = None,
                 parameter_template_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_markdown: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_type: Optional[pulumi.Input['WorkflowVersionStorageType']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_bucket_owner_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a WorkflowVersion resource.
        :param pulumi.Input[_builtins.str] workflow_id: The workflow's ID.
        :param pulumi.Input['WorkflowVersionContainerRegistryMapArgs'] container_registry_map: Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
        :param pulumi.Input['WorkflowVersionDefinitionRepositoryArgs'] definition_repository: Contains information about a source code repository that hosts the workflow definition files.
        :param pulumi.Input[_builtins.str] description: The description of the workflow version.
        :param pulumi.Input[_builtins.str] parameter_template_path: Path to the primary workflow parameter template JSON file inside the repository
        :param pulumi.Input[_builtins.str] readme_markdown: The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
        :param pulumi.Input[_builtins.str] readme_path: The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
        :param pulumi.Input[_builtins.str] readme_uri: The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
        :param pulumi.Input[_builtins.str] version_name: The name of the workflow version.
        """
        pulumi.set(__self__, "workflow_id", workflow_id)
        if accelerators is not None:
            pulumi.set(__self__, "accelerators", accelerators)
        if container_registry_map is not None:
            pulumi.set(__self__, "container_registry_map", container_registry_map)
        if container_registry_map_uri is not None:
            pulumi.set(__self__, "container_registry_map_uri", container_registry_map_uri)
        if definition_repository is not None:
            pulumi.set(__self__, "definition_repository", definition_repository)
        if definition_uri is not None:
            pulumi.set(__self__, "definition_uri", definition_uri)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if main is not None:
            pulumi.set(__self__, "main", main)
        if parameter_template is not None:
            pulumi.set(__self__, "parameter_template", parameter_template)
        if parameter_template_path is not None:
            pulumi.set(__self__, "parameter_template_path", parameter_template_path)
        if readme_markdown is not None:
            pulumi.set(__self__, "readme_markdown", readme_markdown)
        if readme_path is not None:
            pulumi.set(__self__, "readme_path", readme_path)
        if readme_uri is not None:
            pulumi.set(__self__, "readme_uri", readme_uri)
        if storage_capacity is not None:
            pulumi.set(__self__, "storage_capacity", storage_capacity)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version_name is not None:
            pulumi.set(__self__, "version_name", version_name)
        if workflow_bucket_owner_id is not None:
            pulumi.set(__self__, "workflow_bucket_owner_id", workflow_bucket_owner_id)

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[_builtins.str]:
        """
        The workflow's ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workflow_id", value)

    @_builtins.property
    @pulumi.getter
    def accelerators(self) -> Optional[pulumi.Input['WorkflowVersionAccelerators']]:
        return pulumi.get(self, "accelerators")

    @accelerators.setter
    def accelerators(self, value: Optional[pulumi.Input['WorkflowVersionAccelerators']]):
        pulumi.set(self, "accelerators", value)

    @_builtins.property
    @pulumi.getter(name="containerRegistryMap")
    def container_registry_map(self) -> Optional[pulumi.Input['WorkflowVersionContainerRegistryMapArgs']]:
        """
        Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
        """
        return pulumi.get(self, "container_registry_map")

    @container_registry_map.setter
    def container_registry_map(self, value: Optional[pulumi.Input['WorkflowVersionContainerRegistryMapArgs']]):
        pulumi.set(self, "container_registry_map", value)

    @_builtins.property
    @pulumi.getter(name="containerRegistryMapUri")
    def container_registry_map_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_registry_map_uri")

    @container_registry_map_uri.setter
    def container_registry_map_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_registry_map_uri", value)

    @_builtins.property
    @pulumi.getter(name="definitionRepository")
    def definition_repository(self) -> Optional[pulumi.Input['WorkflowVersionDefinitionRepositoryArgs']]:
        """
        Contains information about a source code repository that hosts the workflow definition files.
        """
        return pulumi.get(self, "definition_repository")

    @definition_repository.setter
    def definition_repository(self, value: Optional[pulumi.Input['WorkflowVersionDefinitionRepositoryArgs']]):
        pulumi.set(self, "definition_repository", value)

    @_builtins.property
    @pulumi.getter(name="definitionUri")
    def definition_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "definition_uri")

    @definition_uri.setter
    def definition_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "definition_uri", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the workflow version.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input['WorkflowVersionWorkflowEngine']]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input['WorkflowVersionWorkflowEngine']]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter
    def main(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "main", value)

    @_builtins.property
    @pulumi.getter(name="parameterTemplate")
    def parameter_template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['WorkflowVersionWorkflowParameterArgs']]]]:
        return pulumi.get(self, "parameter_template")

    @parameter_template.setter
    def parameter_template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['WorkflowVersionWorkflowParameterArgs']]]]):
        pulumi.set(self, "parameter_template", value)

    @_builtins.property
    @pulumi.getter(name="parameterTemplatePath")
    def parameter_template_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path to the primary workflow parameter template JSON file inside the repository
        """
        return pulumi.get(self, "parameter_template_path")

    @parameter_template_path.setter
    def parameter_template_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameter_template_path", value)

    @_builtins.property
    @pulumi.getter(name="readmeMarkdown")
    def readme_markdown(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
        """
        return pulumi.get(self, "readme_markdown")

    @readme_markdown.setter
    def readme_markdown(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "readme_markdown", value)

    @_builtins.property
    @pulumi.getter(name="readmePath")
    def readme_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
        """
        return pulumi.get(self, "readme_path")

    @readme_path.setter
    def readme_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "readme_path", value)

    @_builtins.property
    @pulumi.getter(name="readmeUri")
    def readme_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
        """
        return pulumi.get(self, "readme_uri")

    @readme_uri.setter
    def readme_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "readme_uri", value)

    @_builtins.property
    @pulumi.getter(name="storageCapacity")
    def storage_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "storage_capacity")

    @storage_capacity.setter
    def storage_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "storage_capacity", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input['WorkflowVersionStorageType']]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input['WorkflowVersionStorageType']]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the workflow version.
        """
        return pulumi.get(self, "version_name")

    @version_name.setter
    def version_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_name", value)

    @_builtins.property
    @pulumi.getter(name="workflowBucketOwnerId")
    def workflow_bucket_owner_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workflow_bucket_owner_id")

    @workflow_bucket_owner_id.setter
    def workflow_bucket_owner_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workflow_bucket_owner_id", value)


@pulumi.type_token("aws-native:omics:WorkflowVersion")
class WorkflowVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerators: Optional[pulumi.Input['WorkflowVersionAccelerators']] = None,
                 container_registry_map: Optional[pulumi.Input[Union['WorkflowVersionContainerRegistryMapArgs', 'WorkflowVersionContainerRegistryMapArgsDict']]] = None,
                 container_registry_map_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 definition_repository: Optional[pulumi.Input[Union['WorkflowVersionDefinitionRepositoryArgs', 'WorkflowVersionDefinitionRepositoryArgsDict']]] = None,
                 definition_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input['WorkflowVersionWorkflowEngine']] = None,
                 main: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_template: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['WorkflowVersionWorkflowParameterArgs', 'WorkflowVersionWorkflowParameterArgsDict']]]]] = None,
                 parameter_template_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_markdown: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_type: Optional[pulumi.Input['WorkflowVersionStorageType']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_bucket_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Definition of AWS::Omics::WorkflowVersion Resource Type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WorkflowVersionContainerRegistryMapArgs', 'WorkflowVersionContainerRegistryMapArgsDict']] container_registry_map: Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
        :param pulumi.Input[Union['WorkflowVersionDefinitionRepositoryArgs', 'WorkflowVersionDefinitionRepositoryArgsDict']] definition_repository: Contains information about a source code repository that hosts the workflow definition files.
        :param pulumi.Input[_builtins.str] description: The description of the workflow version.
        :param pulumi.Input[_builtins.str] parameter_template_path: Path to the primary workflow parameter template JSON file inside the repository
        :param pulumi.Input[_builtins.str] readme_markdown: The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
        :param pulumi.Input[_builtins.str] readme_path: The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
        :param pulumi.Input[_builtins.str] readme_uri: The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
        :param pulumi.Input[_builtins.str] version_name: The name of the workflow version.
        :param pulumi.Input[_builtins.str] workflow_id: The workflow's ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::Omics::WorkflowVersion Resource Type.

        :param str resource_name: The name of the resource.
        :param WorkflowVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerators: Optional[pulumi.Input['WorkflowVersionAccelerators']] = None,
                 container_registry_map: Optional[pulumi.Input[Union['WorkflowVersionContainerRegistryMapArgs', 'WorkflowVersionContainerRegistryMapArgsDict']]] = None,
                 container_registry_map_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 definition_repository: Optional[pulumi.Input[Union['WorkflowVersionDefinitionRepositoryArgs', 'WorkflowVersionDefinitionRepositoryArgsDict']]] = None,
                 definition_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input['WorkflowVersionWorkflowEngine']] = None,
                 main: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter_template: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['WorkflowVersionWorkflowParameterArgs', 'WorkflowVersionWorkflowParameterArgsDict']]]]] = None,
                 parameter_template_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_markdown: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_path: Optional[pulumi.Input[_builtins.str]] = None,
                 readme_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_type: Optional[pulumi.Input['WorkflowVersionStorageType']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 version_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_bucket_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowVersionArgs.__new__(WorkflowVersionArgs)

            __props__.__dict__["accelerators"] = accelerators
            __props__.__dict__["container_registry_map"] = container_registry_map
            __props__.__dict__["container_registry_map_uri"] = container_registry_map_uri
            __props__.__dict__["definition_repository"] = definition_repository
            __props__.__dict__["definition_uri"] = definition_uri
            __props__.__dict__["description"] = description
            __props__.__dict__["engine"] = engine
            __props__.__dict__["main"] = main
            __props__.__dict__["parameter_template"] = parameter_template
            __props__.__dict__["parameter_template_path"] = parameter_template_path
            __props__.__dict__["readme_markdown"] = readme_markdown
            __props__.__dict__["readme_path"] = readme_path
            __props__.__dict__["readme_uri"] = readme_uri
            __props__.__dict__["storage_capacity"] = storage_capacity
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["version_name"] = version_name
            __props__.__dict__["workflow_bucket_owner_id"] = workflow_bucket_owner_id
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
            __props__.__dict__["arn"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["uuid"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["accelerators", "containerRegistryMap", "containerRegistryMapUri", "definitionRepository", "definitionUri", "engine", "main", "parameterTemplate.*", "parameterTemplatePath", "readmePath", "readmeUri", "versionName", "workflowBucketOwnerId", "workflowId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(WorkflowVersion, __self__).__init__(
            'aws-native:omics:WorkflowVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WorkflowVersion':
        """
        Get an existing WorkflowVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkflowVersionArgs.__new__(WorkflowVersionArgs)

        __props__.__dict__["accelerators"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["container_registry_map"] = None
        __props__.__dict__["container_registry_map_uri"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["definition_repository"] = None
        __props__.__dict__["definition_uri"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["engine"] = None
        __props__.__dict__["main"] = None
        __props__.__dict__["parameter_template"] = None
        __props__.__dict__["parameter_template_path"] = None
        __props__.__dict__["readme_markdown"] = None
        __props__.__dict__["readme_path"] = None
        __props__.__dict__["readme_uri"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["storage_capacity"] = None
        __props__.__dict__["storage_type"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["uuid"] = None
        __props__.__dict__["version_name"] = None
        __props__.__dict__["workflow_bucket_owner_id"] = None
        __props__.__dict__["workflow_id"] = None
        return WorkflowVersion(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def accelerators(self) -> pulumi.Output[Optional['WorkflowVersionAccelerators']]:
        return pulumi.get(self, "accelerators")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Output[_builtins.str]:
        """
        ARN of the workflow version.
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="containerRegistryMap")
    def container_registry_map(self) -> pulumi.Output[Optional['outputs.WorkflowVersionContainerRegistryMap']]:
        """
        Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see [Container images](https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html) in the *AWS HealthOmics User Guide* .
        """
        return pulumi.get(self, "container_registry_map")

    @_builtins.property
    @pulumi.getter(name="containerRegistryMapUri")
    def container_registry_map_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "container_registry_map_uri")

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the workflow version.
        """
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter(name="definitionRepository")
    def definition_repository(self) -> pulumi.Output[Optional['outputs.WorkflowVersionDefinitionRepository']]:
        """
        Contains information about a source code repository that hosts the workflow definition files.
        """
        return pulumi.get(self, "definition_repository")

    @_builtins.property
    @pulumi.getter(name="definitionUri")
    def definition_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "definition_uri")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the workflow version.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Output[Optional['WorkflowVersionWorkflowEngine']]:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def main(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "main")

    @_builtins.property
    @pulumi.getter(name="parameterTemplate")
    def parameter_template(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.WorkflowVersionWorkflowParameter']]]:
        return pulumi.get(self, "parameter_template")

    @_builtins.property
    @pulumi.getter(name="parameterTemplatePath")
    def parameter_template_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Path to the primary workflow parameter template JSON file inside the repository
        """
        return pulumi.get(self, "parameter_template_path")

    @_builtins.property
    @pulumi.getter(name="readmeMarkdown")
    def readme_markdown(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.
        """
        return pulumi.get(self, "readme_markdown")

    @_builtins.property
    @pulumi.getter(name="readmePath")
    def readme_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the README.md file from the root directory of the repository will be used.
        """
        return pulumi.get(self, "readme_path")

    @_builtins.property
    @pulumi.getter(name="readmeUri")
    def readme_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. The S3 URI must begin with s3://USER-OWNED-BUCKET/. The requester must have access to the S3 bucket and object. The max README content length is 500 KiB.
        """
        return pulumi.get(self, "readme_uri")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output['WorkflowVersionWorkflowStatus']:
        """
        The status of the workflow version.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageCapacity")
    def storage_capacity(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "storage_capacity")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional['WorkflowVersionStorageType']]:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output['WorkflowVersionWorkflowType']:
        """
        The type of the workflow version.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter(name="versionName")
    def version_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the workflow version.
        """
        return pulumi.get(self, "version_name")

    @_builtins.property
    @pulumi.getter(name="workflowBucketOwnerId")
    def workflow_bucket_owner_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "workflow_bucket_owner_id")

    @_builtins.property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[_builtins.str]:
        """
        The workflow's ID.
        """
        return pulumi.get(self, "workflow_id")

