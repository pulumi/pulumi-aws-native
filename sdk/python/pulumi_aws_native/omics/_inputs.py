# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnnotationStoreReferenceItemArgs',
    'AnnotationStoreSseConfigArgs',
    'AnnotationStoreStoreOptionsArgs',
    'AnnotationStoreTagMapArgs',
    'ReferenceStoreSseConfigArgs',
    'ReferenceStoreTagMapArgs',
    'RunGroupTagMapArgs',
    'SequenceStoreSseConfigArgs',
    'SequenceStoreTagMapArgs',
    'VariantStoreReferenceItemArgs',
    'VariantStoreSseConfigArgs',
    'VariantStoreTagMapArgs',
    'WorkflowParameterTemplateArgs',
    'WorkflowTagMapArgs',
]

@pulumi.input_type
class AnnotationStoreReferenceItemArgs:
    def __init__(__self__, *,
                 reference_arn: pulumi.Input[str]):
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference_arn")

    @reference_arn.setter
    def reference_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference_arn", value)


@pulumi.input_type
class AnnotationStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['AnnotationStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnnotationStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnnotationStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class AnnotationStoreStoreOptionsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class AnnotationStoreTagMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ReferenceStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ReferenceStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param pulumi.Input[str] key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ReferenceStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ReferenceStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class ReferenceStoreTagMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class RunGroupTagMapArgs:
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass


@pulumi.input_type
class SequenceStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['SequenceStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param pulumi.Input[str] key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['SequenceStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['SequenceStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class SequenceStoreTagMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class VariantStoreReferenceItemArgs:
    def __init__(__self__, *,
                 reference_arn: pulumi.Input[str]):
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference_arn")

    @reference_arn.setter
    def reference_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference_arn", value)


@pulumi.input_type
class VariantStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['VariantStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['VariantStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['VariantStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class VariantStoreTagMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class WorkflowParameterTemplateArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class WorkflowTagMapArgs:
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass


