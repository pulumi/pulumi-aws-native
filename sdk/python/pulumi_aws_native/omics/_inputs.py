# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnnotationStoreFormatToHeaderArgs',
    'AnnotationStoreReferenceItemArgs',
    'AnnotationStoreSchemaItemArgs',
    'AnnotationStoreSseConfigArgs',
    'AnnotationStoreStoreOptionsPropertiesArgs',
    'AnnotationStoreTagMapArgs',
    'AnnotationStoreTsvStoreOptionsArgs',
    'ReferenceStoreSseConfigArgs',
    'ReferenceStoreTagMapArgs',
    'RunGroupTagMapArgs',
    'SequenceStoreSseConfigArgs',
    'SequenceStoreTagMapArgs',
    'VariantStoreReferenceItemArgs',
    'VariantStoreSseConfigArgs',
    'VariantStoreTagMapArgs',
    'WorkflowParameterTemplateArgs',
    'WorkflowTagMapArgs',
]

@pulumi.input_type
class AnnotationStoreFormatToHeaderArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AnnotationStoreReferenceItemArgs:
    def __init__(__self__, *,
                 reference_arn: pulumi.Input[str]):
        AnnotationStoreReferenceItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            reference_arn=reference_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             reference_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference_arn")

    @reference_arn.setter
    def reference_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference_arn", value)


@pulumi.input_type
class AnnotationStoreSchemaItemArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AnnotationStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['AnnotationStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        AnnotationStoreSseConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            key_arn=key_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['AnnotationStoreEncryptionType'],
             key_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if key_arn is not None:
            _setter("key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnnotationStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnnotationStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class AnnotationStoreStoreOptionsPropertiesArgs:
    def __init__(__self__, *,
                 tsv_store_options: pulumi.Input['AnnotationStoreTsvStoreOptionsArgs']):
        AnnotationStoreStoreOptionsPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tsv_store_options=tsv_store_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tsv_store_options: pulumi.Input['AnnotationStoreTsvStoreOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("tsv_store_options", tsv_store_options)

    @property
    @pulumi.getter(name="tsvStoreOptions")
    def tsv_store_options(self) -> pulumi.Input['AnnotationStoreTsvStoreOptionsArgs']:
        return pulumi.get(self, "tsv_store_options")

    @tsv_store_options.setter
    def tsv_store_options(self, value: pulumi.Input['AnnotationStoreTsvStoreOptionsArgs']):
        pulumi.set(self, "tsv_store_options", value)


@pulumi.input_type
class AnnotationStoreTagMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AnnotationStoreTsvStoreOptionsArgs:
    def __init__(__self__, *,
                 annotation_type: Optional[pulumi.Input['AnnotationStoreAnnotationType']] = None,
                 format_to_header: Optional[pulumi.Input['AnnotationStoreFormatToHeaderArgs']] = None,
                 schema: Optional[pulumi.Input[Sequence[pulumi.Input['AnnotationStoreSchemaItemArgs']]]] = None):
        AnnotationStoreTsvStoreOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotation_type=annotation_type,
            format_to_header=format_to_header,
            schema=schema,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotation_type: Optional[pulumi.Input['AnnotationStoreAnnotationType']] = None,
             format_to_header: Optional[pulumi.Input['AnnotationStoreFormatToHeaderArgs']] = None,
             schema: Optional[pulumi.Input[Sequence[pulumi.Input['AnnotationStoreSchemaItemArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotation_type is not None:
            _setter("annotation_type", annotation_type)
        if format_to_header is not None:
            _setter("format_to_header", format_to_header)
        if schema is not None:
            _setter("schema", schema)

    @property
    @pulumi.getter(name="annotationType")
    def annotation_type(self) -> Optional[pulumi.Input['AnnotationStoreAnnotationType']]:
        return pulumi.get(self, "annotation_type")

    @annotation_type.setter
    def annotation_type(self, value: Optional[pulumi.Input['AnnotationStoreAnnotationType']]):
        pulumi.set(self, "annotation_type", value)

    @property
    @pulumi.getter(name="formatToHeader")
    def format_to_header(self) -> Optional[pulumi.Input['AnnotationStoreFormatToHeaderArgs']]:
        return pulumi.get(self, "format_to_header")

    @format_to_header.setter
    def format_to_header(self, value: Optional[pulumi.Input['AnnotationStoreFormatToHeaderArgs']]):
        pulumi.set(self, "format_to_header", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnnotationStoreSchemaItemArgs']]]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnnotationStoreSchemaItemArgs']]]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class ReferenceStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ReferenceStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param pulumi.Input[str] key_arn: An encryption key ARN.
        """
        ReferenceStoreSseConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            key_arn=key_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['ReferenceStoreEncryptionType'],
             key_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if key_arn is not None:
            _setter("key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ReferenceStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ReferenceStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class ReferenceStoreTagMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RunGroupTagMapArgs:
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class SequenceStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['SequenceStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param pulumi.Input[str] key_arn: An encryption key ARN.
        """
        SequenceStoreSseConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            key_arn=key_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['SequenceStoreEncryptionType'],
             key_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if key_arn is not None:
            _setter("key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['SequenceStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['SequenceStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class SequenceStoreTagMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class VariantStoreReferenceItemArgs:
    def __init__(__self__, *,
                 reference_arn: pulumi.Input[str]):
        VariantStoreReferenceItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            reference_arn=reference_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             reference_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference_arn")

    @reference_arn.setter
    def reference_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference_arn", value)


@pulumi.input_type
class VariantStoreSseConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['VariantStoreEncryptionType'],
                 key_arn: Optional[pulumi.Input[str]] = None):
        VariantStoreSseConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            key_arn=key_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['VariantStoreEncryptionType'],
             key_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if key_arn is not None:
            _setter("key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['VariantStoreEncryptionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['VariantStoreEncryptionType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


@pulumi.input_type
class VariantStoreTagMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WorkflowParameterTemplateArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WorkflowTagMapArgs:
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


