# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnnotationStoreReferenceItem',
    'AnnotationStoreSseConfig',
    'AnnotationStoreStoreOptions',
    'AnnotationStoreTagMap',
    'ReferenceStoreSseConfig',
    'ReferenceStoreTagMap',
    'RunGroupTagMap',
    'SequenceStoreSseConfig',
    'SequenceStoreTagMap',
    'VariantStoreReferenceItem',
    'VariantStoreSseConfig',
    'VariantStoreTagMap',
    'WorkflowParameterTemplate',
    'WorkflowTagMap',
]

@pulumi.output_type
class AnnotationStoreReferenceItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "referenceArn":
            suggest = "reference_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreReferenceItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreReferenceItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreReferenceItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 reference_arn: str):
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> str:
        return pulumi.get(self, "reference_arn")


@pulumi.output_type
class AnnotationStoreSseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'AnnotationStoreEncryptionType',
                 key_arn: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'AnnotationStoreEncryptionType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[str]:
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class AnnotationStoreStoreOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class AnnotationStoreTagMap(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ReferenceStoreSseConfig(dict):
    """
    Server-side encryption (SSE) settings for a store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'ReferenceStoreEncryptionType',
                 key_arn: Optional[str] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'ReferenceStoreEncryptionType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class ReferenceStoreTagMap(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class RunGroupTagMap(dict):
    """
    A map of resource tags
    """
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass


@pulumi.output_type
class SequenceStoreSseConfig(dict):
    """
    Server-side encryption (SSE) settings for a store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SequenceStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SequenceStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SequenceStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'SequenceStoreEncryptionType',
                 key_arn: Optional[str] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'SequenceStoreEncryptionType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class SequenceStoreTagMap(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class VariantStoreReferenceItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "referenceArn":
            suggest = "reference_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariantStoreReferenceItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariantStoreReferenceItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariantStoreReferenceItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 reference_arn: str):
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> str:
        return pulumi.get(self, "reference_arn")


@pulumi.output_type
class VariantStoreSseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariantStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariantStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariantStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'VariantStoreEncryptionType',
                 key_arn: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'VariantStoreEncryptionType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[str]:
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class VariantStoreTagMap(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class WorkflowParameterTemplate(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class WorkflowTagMap(dict):
    """
    A map of resource tags
    """
    def __init__(__self__):
        """
        A map of resource tags
        """
        pass


