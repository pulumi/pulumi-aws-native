# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AnnotationStoreReferenceItem',
    'AnnotationStoreSseConfig',
    'AnnotationStoreStoreOptionsProperties',
    'AnnotationStoreTsvStoreOptions',
    'ReferenceStoreSseConfig',
    'SequenceStoreSseConfig',
    'VariantStoreReferenceItem',
    'VariantStoreSseConfig',
    'WorkflowDefinitionRepository',
    'WorkflowParameter',
    'WorkflowSourceReference',
    'WorkflowVersionDefinitionRepository',
    'WorkflowVersionSourceReference',
    'WorkflowVersionWorkflowParameter',
]

@pulumi.output_type
class AnnotationStoreReferenceItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "referenceArn":
            suggest = "reference_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreReferenceItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreReferenceItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreReferenceItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 reference_arn: builtins.str):
        """
        :param builtins.str reference_arn: The reference's ARN.
        """
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> builtins.str:
        """
        The reference's ARN.
        """
        return pulumi.get(self, "reference_arn")


@pulumi.output_type
class AnnotationStoreSseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'AnnotationStoreEncryptionType',
                 key_arn: Optional[builtins.str] = None):
        """
        :param 'AnnotationStoreEncryptionType' type: The encryption type.
        :param builtins.str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'AnnotationStoreEncryptionType':
        """
        The encryption type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[builtins.str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class AnnotationStoreStoreOptionsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsvStoreOptions":
            suggest = "tsv_store_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreStoreOptionsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreStoreOptionsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreStoreOptionsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tsv_store_options: 'outputs.AnnotationStoreTsvStoreOptions'):
        pulumi.set(__self__, "tsv_store_options", tsv_store_options)

    @property
    @pulumi.getter(name="tsvStoreOptions")
    def tsv_store_options(self) -> 'outputs.AnnotationStoreTsvStoreOptions':
        return pulumi.get(self, "tsv_store_options")


@pulumi.output_type
class AnnotationStoreTsvStoreOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "annotationType":
            suggest = "annotation_type"
        elif key == "formatToHeader":
            suggest = "format_to_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnnotationStoreTsvStoreOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnnotationStoreTsvStoreOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnnotationStoreTsvStoreOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotation_type: Optional['AnnotationStoreAnnotationType'] = None,
                 format_to_header: Optional[Mapping[str, builtins.str]] = None,
                 schema: Optional[Sequence[Mapping[str, 'AnnotationStoreSchemaValueType']]] = None):
        if annotation_type is not None:
            pulumi.set(__self__, "annotation_type", annotation_type)
        if format_to_header is not None:
            pulumi.set(__self__, "format_to_header", format_to_header)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="annotationType")
    def annotation_type(self) -> Optional['AnnotationStoreAnnotationType']:
        return pulumi.get(self, "annotation_type")

    @property
    @pulumi.getter(name="formatToHeader")
    def format_to_header(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "format_to_header")

    @property
    @pulumi.getter
    def schema(self) -> Optional[Sequence[Mapping[str, 'AnnotationStoreSchemaValueType']]]:
        return pulumi.get(self, "schema")


@pulumi.output_type
class ReferenceStoreSseConfig(dict):
    """
    Server-side encryption (SSE) settings for a store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'ReferenceStoreEncryptionType',
                 key_arn: Optional[builtins.str] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param 'ReferenceStoreEncryptionType' type: The encryption type.
        :param builtins.str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'ReferenceStoreEncryptionType':
        """
        The encryption type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[builtins.str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class SequenceStoreSseConfig(dict):
    """
    Server-side encryption (SSE) settings for a store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SequenceStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SequenceStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SequenceStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'SequenceStoreEncryptionType',
                 key_arn: Optional[builtins.str] = None):
        """
        Server-side encryption (SSE) settings for a store.
        :param 'SequenceStoreEncryptionType' type: The encryption type.
        :param builtins.str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'SequenceStoreEncryptionType':
        """
        The encryption type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[builtins.str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class VariantStoreReferenceItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "referenceArn":
            suggest = "reference_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariantStoreReferenceItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariantStoreReferenceItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariantStoreReferenceItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 reference_arn: builtins.str):
        """
        :param builtins.str reference_arn: The reference's ARN.
        """
        pulumi.set(__self__, "reference_arn", reference_arn)

    @property
    @pulumi.getter(name="referenceArn")
    def reference_arn(self) -> builtins.str:
        """
        The reference's ARN.
        """
        return pulumi.get(self, "reference_arn")


@pulumi.output_type
class VariantStoreSseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyArn":
            suggest = "key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VariantStoreSseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VariantStoreSseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VariantStoreSseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'VariantStoreEncryptionType',
                 key_arn: Optional[builtins.str] = None):
        """
        :param 'VariantStoreEncryptionType' type: The encryption type.
        :param builtins.str key_arn: An encryption key ARN.
        """
        pulumi.set(__self__, "type", type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter
    def type(self) -> 'VariantStoreEncryptionType':
        """
        The encryption type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[builtins.str]:
        """
        An encryption key ARN.
        """
        return pulumi.get(self, "key_arn")


@pulumi.output_type
class WorkflowDefinitionRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionArn":
            suggest = "connection_arn"
        elif key == "excludeFilePatterns":
            suggest = "exclude_file_patterns"
        elif key == "fullRepositoryId":
            suggest = "full_repository_id"
        elif key == "sourceReference":
            suggest = "source_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowDefinitionRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowDefinitionRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowDefinitionRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_arn: Optional[builtins.str] = None,
                 exclude_file_patterns: Optional[Sequence[builtins.str]] = None,
                 full_repository_id: Optional[builtins.str] = None,
                 source_reference: Optional['outputs.WorkflowSourceReference'] = None):
        """
        :param builtins.str connection_arn: The Amazon Resource Name (ARN) of the connection to the source code repository.
        :param Sequence[builtins.str] exclude_file_patterns: A list of file patterns to exclude when retrieving the workflow definition from the repository.
        :param builtins.str full_repository_id: The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
        :param 'WorkflowSourceReference' source_reference: The source reference for the repository, such as a branch name, tag, or commit ID.
        """
        if connection_arn is not None:
            pulumi.set(__self__, "connection_arn", connection_arn)
        if exclude_file_patterns is not None:
            pulumi.set(__self__, "exclude_file_patterns", exclude_file_patterns)
        if full_repository_id is not None:
            pulumi.set(__self__, "full_repository_id", full_repository_id)
        if source_reference is not None:
            pulumi.set(__self__, "source_reference", source_reference)

    @property
    @pulumi.getter(name="connectionArn")
    def connection_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the connection to the source code repository.
        """
        return pulumi.get(self, "connection_arn")

    @property
    @pulumi.getter(name="excludeFilePatterns")
    def exclude_file_patterns(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of file patterns to exclude when retrieving the workflow definition from the repository.
        """
        return pulumi.get(self, "exclude_file_patterns")

    @property
    @pulumi.getter(name="fullRepositoryId")
    def full_repository_id(self) -> Optional[builtins.str]:
        """
        The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
        """
        return pulumi.get(self, "full_repository_id")

    @property
    @pulumi.getter(name="sourceReference")
    def source_reference(self) -> Optional['outputs.WorkflowSourceReference']:
        """
        The source reference for the repository, such as a branch name, tag, or commit ID.
        """
        return pulumi.get(self, "source_reference")


@pulumi.output_type
class WorkflowParameter(dict):
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 optional: Optional[builtins.bool] = None):
        """
        :param builtins.str description: The parameter's description.
        :param builtins.bool optional: Whether the parameter is optional.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The parameter's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def optional(self) -> Optional[builtins.bool]:
        """
        Whether the parameter is optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class WorkflowSourceReference(dict):
    def __init__(__self__, *,
                 type: Optional['WorkflowSourceReferencetype'] = None,
                 value: Optional[builtins.str] = None):
        """
        :param 'WorkflowSourceReferencetype' type: The type of source reference, such as branch, tag, or commit.
        :param builtins.str value: The value of the source reference, such as the branch name, tag name, or commit ID.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional['WorkflowSourceReferencetype']:
        """
        The type of source reference, such as branch, tag, or commit.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The value of the source reference, such as the branch name, tag name, or commit ID.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkflowVersionDefinitionRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionArn":
            suggest = "connection_arn"
        elif key == "excludeFilePatterns":
            suggest = "exclude_file_patterns"
        elif key == "fullRepositoryId":
            suggest = "full_repository_id"
        elif key == "sourceReference":
            suggest = "source_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowVersionDefinitionRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowVersionDefinitionRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowVersionDefinitionRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_arn: Optional[builtins.str] = None,
                 exclude_file_patterns: Optional[Sequence[builtins.str]] = None,
                 full_repository_id: Optional[builtins.str] = None,
                 source_reference: Optional['outputs.WorkflowVersionSourceReference'] = None):
        """
        :param builtins.str connection_arn: The Amazon Resource Name (ARN) of the connection to the source code repository.
        :param Sequence[builtins.str] exclude_file_patterns: A list of file patterns to exclude when retrieving the workflow definition from the repository.
        :param builtins.str full_repository_id: The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
        :param 'WorkflowVersionSourceReference' source_reference: The source reference for the repository, such as a branch name, tag, or commit ID.
        """
        if connection_arn is not None:
            pulumi.set(__self__, "connection_arn", connection_arn)
        if exclude_file_patterns is not None:
            pulumi.set(__self__, "exclude_file_patterns", exclude_file_patterns)
        if full_repository_id is not None:
            pulumi.set(__self__, "full_repository_id", full_repository_id)
        if source_reference is not None:
            pulumi.set(__self__, "source_reference", source_reference)

    @property
    @pulumi.getter(name="connectionArn")
    def connection_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the connection to the source code repository.
        """
        return pulumi.get(self, "connection_arn")

    @property
    @pulumi.getter(name="excludeFilePatterns")
    def exclude_file_patterns(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of file patterns to exclude when retrieving the workflow definition from the repository.
        """
        return pulumi.get(self, "exclude_file_patterns")

    @property
    @pulumi.getter(name="fullRepositoryId")
    def full_repository_id(self) -> Optional[builtins.str]:
        """
        The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.
        """
        return pulumi.get(self, "full_repository_id")

    @property
    @pulumi.getter(name="sourceReference")
    def source_reference(self) -> Optional['outputs.WorkflowVersionSourceReference']:
        """
        The source reference for the repository, such as a branch name, tag, or commit ID.
        """
        return pulumi.get(self, "source_reference")


@pulumi.output_type
class WorkflowVersionSourceReference(dict):
    def __init__(__self__, *,
                 type: Optional['WorkflowVersionSourceReferencetype'] = None,
                 value: Optional[builtins.str] = None):
        """
        :param 'WorkflowVersionSourceReferencetype' type: The type of source reference, such as branch, tag, or commit.
        :param builtins.str value: The value of the source reference, such as the branch name, tag name, or commit ID.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional['WorkflowVersionSourceReferencetype']:
        """
        The type of source reference, such as branch, tag, or commit.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The value of the source reference, such as the branch name, tag name, or commit ID.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkflowVersionWorkflowParameter(dict):
    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 optional: Optional[builtins.bool] = None):
        """
        :param builtins.str description: The parameter's description.
        :param builtins.bool optional: Whether the parameter is optional.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The parameter's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def optional(self) -> Optional[builtins.bool]:
        """
        Whether the parameter is optional.
        """
        return pulumi.get(self, "optional")


