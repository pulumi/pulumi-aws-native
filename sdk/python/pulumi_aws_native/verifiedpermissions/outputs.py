# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'IdentitySourceCognitoGroupConfiguration',
    'IdentitySourceCognitoUserPoolConfiguration',
    'IdentitySourceConfiguration0Properties',
    'IdentitySourceConfiguration1Properties',
    'IdentitySourceDetails',
    'IdentitySourceOpenIdConnectAccessTokenConfiguration',
    'IdentitySourceOpenIdConnectConfiguration',
    'IdentitySourceOpenIdConnectGroupConfiguration',
    'IdentitySourceOpenIdConnectIdentityTokenConfiguration',
    'IdentitySourceOpenIdConnectTokenSelection0Properties',
    'IdentitySourceOpenIdConnectTokenSelection1Properties',
    'PolicyDefinition0Properties',
    'PolicyDefinition1Properties',
    'PolicyEntityIdentifier',
    'PolicyStaticPolicyDefinition',
    'PolicyStoreDeletionProtection',
    'PolicyStoreSchemaDefinition0Properties',
    'PolicyStoreSchemaDefinition1Properties',
    'PolicyStoreValidationSettings',
    'PolicyTemplateLinkedPolicyDefinition',
]

@pulumi.output_type
class IdentitySourceCognitoGroupConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupEntityType":
            suggest = "group_entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceCognitoGroupConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceCognitoGroupConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceCognitoGroupConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_entity_type: _builtins.str):
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @_builtins.property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> _builtins.str:
        return pulumi.get(self, "group_entity_type")


@pulumi.output_type
class IdentitySourceCognitoUserPoolConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userPoolArn":
            suggest = "user_pool_arn"
        elif key == "clientIds":
            suggest = "client_ids"
        elif key == "groupConfiguration":
            suggest = "group_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceCognitoUserPoolConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceCognitoUserPoolConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceCognitoUserPoolConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_pool_arn: _builtins.str,
                 client_ids: Optional[Sequence[_builtins.str]] = None,
                 group_configuration: Optional['outputs.IdentitySourceCognitoGroupConfiguration'] = None):
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)

    @_builtins.property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> _builtins.str:
        return pulumi.get(self, "user_pool_arn")

    @_builtins.property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "client_ids")

    @_builtins.property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional['outputs.IdentitySourceCognitoGroupConfiguration']:
        return pulumi.get(self, "group_configuration")


@pulumi.output_type
class IdentitySourceConfiguration0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cognitoUserPoolConfiguration":
            suggest = "cognito_user_pool_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceConfiguration0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceConfiguration0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceConfiguration0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cognito_user_pool_configuration: 'outputs.IdentitySourceCognitoUserPoolConfiguration'):
        pulumi.set(__self__, "cognito_user_pool_configuration", cognito_user_pool_configuration)

    @_builtins.property
    @pulumi.getter(name="cognitoUserPoolConfiguration")
    def cognito_user_pool_configuration(self) -> 'outputs.IdentitySourceCognitoUserPoolConfiguration':
        return pulumi.get(self, "cognito_user_pool_configuration")


@pulumi.output_type
class IdentitySourceConfiguration1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "openIdConnectConfiguration":
            suggest = "open_id_connect_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceConfiguration1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceConfiguration1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceConfiguration1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 open_id_connect_configuration: 'outputs.IdentitySourceOpenIdConnectConfiguration'):
        pulumi.set(__self__, "open_id_connect_configuration", open_id_connect_configuration)

    @_builtins.property
    @pulumi.getter(name="openIdConnectConfiguration")
    def open_id_connect_configuration(self) -> 'outputs.IdentitySourceOpenIdConnectConfiguration':
        return pulumi.get(self, "open_id_connect_configuration")


@pulumi.output_type
class IdentitySourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIds":
            suggest = "client_ids"
        elif key == "discoveryUrl":
            suggest = "discovery_url"
        elif key == "openIdIssuer":
            suggest = "open_id_issuer"
        elif key == "userPoolArn":
            suggest = "user_pool_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ids: Optional[Sequence[_builtins.str]] = None,
                 discovery_url: Optional[_builtins.str] = None,
                 open_id_issuer: Optional['IdentitySourceOpenIdIssuer'] = None,
                 user_pool_arn: Optional[_builtins.str] = None):
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if discovery_url is not None:
            pulumi.set(__self__, "discovery_url", discovery_url)
        if open_id_issuer is not None:
            pulumi.set(__self__, "open_id_issuer", open_id_issuer)
        if user_pool_arn is not None:
            pulumi.set(__self__, "user_pool_arn", user_pool_arn)

    @_builtins.property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "client_ids")

    @_builtins.property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "discovery_url")

    @_builtins.property
    @pulumi.getter(name="openIdIssuer")
    def open_id_issuer(self) -> Optional['IdentitySourceOpenIdIssuer']:
        return pulumi.get(self, "open_id_issuer")

    @_builtins.property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_pool_arn")


@pulumi.output_type
class IdentitySourceOpenIdConnectAccessTokenConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "principalIdClaim":
            suggest = "principal_id_claim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectAccessTokenConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectAccessTokenConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectAccessTokenConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audiences: Optional[Sequence[_builtins.str]] = None,
                 principal_id_claim: Optional[_builtins.str] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @_builtins.property
    @pulumi.getter
    def audiences(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "audiences")

    @_builtins.property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal_id_claim")


@pulumi.output_type
class IdentitySourceOpenIdConnectConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSelection":
            suggest = "token_selection"
        elif key == "entityIdPrefix":
            suggest = "entity_id_prefix"
        elif key == "groupConfiguration":
            suggest = "group_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issuer: _builtins.str,
                 token_selection: Any,
                 entity_id_prefix: Optional[_builtins.str] = None,
                 group_configuration: Optional['outputs.IdentitySourceOpenIdConnectGroupConfiguration'] = None):
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "token_selection", token_selection)
        if entity_id_prefix is not None:
            pulumi.set(__self__, "entity_id_prefix", entity_id_prefix)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="tokenSelection")
    def token_selection(self) -> Any:
        return pulumi.get(self, "token_selection")

    @_builtins.property
    @pulumi.getter(name="entityIdPrefix")
    def entity_id_prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "entity_id_prefix")

    @_builtins.property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional['outputs.IdentitySourceOpenIdConnectGroupConfiguration']:
        return pulumi.get(self, "group_configuration")


@pulumi.output_type
class IdentitySourceOpenIdConnectGroupConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupClaim":
            suggest = "group_claim"
        elif key == "groupEntityType":
            suggest = "group_entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectGroupConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectGroupConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectGroupConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_claim: _builtins.str,
                 group_entity_type: _builtins.str):
        pulumi.set(__self__, "group_claim", group_claim)
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @_builtins.property
    @pulumi.getter(name="groupClaim")
    def group_claim(self) -> _builtins.str:
        return pulumi.get(self, "group_claim")

    @_builtins.property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> _builtins.str:
        return pulumi.get(self, "group_entity_type")


@pulumi.output_type
class IdentitySourceOpenIdConnectIdentityTokenConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIds":
            suggest = "client_ids"
        elif key == "principalIdClaim":
            suggest = "principal_id_claim"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectIdentityTokenConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectIdentityTokenConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectIdentityTokenConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ids: Optional[Sequence[_builtins.str]] = None,
                 principal_id_claim: Optional[_builtins.str] = None):
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @_builtins.property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "client_ids")

    @_builtins.property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "principal_id_claim")


@pulumi.output_type
class IdentitySourceOpenIdConnectTokenSelection0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenOnly":
            suggest = "access_token_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectTokenSelection0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectTokenSelection0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectTokenSelection0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token_only: 'outputs.IdentitySourceOpenIdConnectAccessTokenConfiguration'):
        pulumi.set(__self__, "access_token_only", access_token_only)

    @_builtins.property
    @pulumi.getter(name="accessTokenOnly")
    def access_token_only(self) -> 'outputs.IdentitySourceOpenIdConnectAccessTokenConfiguration':
        return pulumi.get(self, "access_token_only")


@pulumi.output_type
class IdentitySourceOpenIdConnectTokenSelection1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityTokenOnly":
            suggest = "identity_token_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentitySourceOpenIdConnectTokenSelection1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentitySourceOpenIdConnectTokenSelection1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentitySourceOpenIdConnectTokenSelection1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identity_token_only: 'outputs.IdentitySourceOpenIdConnectIdentityTokenConfiguration'):
        pulumi.set(__self__, "identity_token_only", identity_token_only)

    @_builtins.property
    @pulumi.getter(name="identityTokenOnly")
    def identity_token_only(self) -> 'outputs.IdentitySourceOpenIdConnectIdentityTokenConfiguration':
        return pulumi.get(self, "identity_token_only")


@pulumi.output_type
class PolicyDefinition0Properties(dict):
    def __init__(__self__, *,
                 static: 'outputs.PolicyStaticPolicyDefinition'):
        pulumi.set(__self__, "static", static)

    @_builtins.property
    @pulumi.getter
    def static(self) -> 'outputs.PolicyStaticPolicyDefinition':
        return pulumi.get(self, "static")


@pulumi.output_type
class PolicyDefinition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateLinked":
            suggest = "template_linked"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyDefinition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyDefinition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyDefinition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_linked: 'outputs.PolicyTemplateLinkedPolicyDefinition'):
        pulumi.set(__self__, "template_linked", template_linked)

    @_builtins.property
    @pulumi.getter(name="templateLinked")
    def template_linked(self) -> 'outputs.PolicyTemplateLinkedPolicyDefinition':
        return pulumi.get(self, "template_linked")


@pulumi.output_type
class PolicyEntityIdentifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyEntityIdentifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyEntityIdentifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyEntityIdentifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: _builtins.str,
                 entity_type: _builtins.str):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)

    @_builtins.property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> _builtins.str:
        return pulumi.get(self, "entity_id")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        return pulumi.get(self, "entity_type")


@pulumi.output_type
class PolicyStaticPolicyDefinition(dict):
    def __init__(__self__, *,
                 statement: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "statement", statement)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def statement(self) -> _builtins.str:
        return pulumi.get(self, "statement")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class PolicyStoreDeletionProtection(dict):
    def __init__(__self__, *,
                 mode: 'PolicyStoreDeletionMode'):
        """
        :param 'PolicyStoreDeletionMode' mode: Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.
               
               The default state is `DISABLED` .
        """
        pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> 'PolicyStoreDeletionMode':
        """
        Specifies whether the policy store can be deleted. If enabled, the policy store can't be deleted.

        The default state is `DISABLED` .
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class PolicyStoreSchemaDefinition0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cedarJson":
            suggest = "cedar_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyStoreSchemaDefinition0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyStoreSchemaDefinition0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyStoreSchemaDefinition0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cedar_json: _builtins.str):
        pulumi.set(__self__, "cedar_json", cedar_json)

    @_builtins.property
    @pulumi.getter(name="cedarJson")
    def cedar_json(self) -> _builtins.str:
        return pulumi.get(self, "cedar_json")


@pulumi.output_type
class PolicyStoreSchemaDefinition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cedarFormat":
            suggest = "cedar_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyStoreSchemaDefinition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyStoreSchemaDefinition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyStoreSchemaDefinition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cedar_format: _builtins.str):
        pulumi.set(__self__, "cedar_format", cedar_format)

    @_builtins.property
    @pulumi.getter(name="cedarFormat")
    def cedar_format(self) -> _builtins.str:
        return pulumi.get(self, "cedar_format")


@pulumi.output_type
class PolicyStoreValidationSettings(dict):
    def __init__(__self__, *,
                 mode: 'PolicyStoreValidationMode'):
        """
        :param 'PolicyStoreValidationMode' mode: The validation mode currently configured for this policy store. The valid values are:
               
               - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
               - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.
               
               > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
               > 
               > To submit a static policy or policy template without a schema, you must turn off validation.
        """
        pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> 'PolicyStoreValidationMode':
        """
        The validation mode currently configured for this policy store. The valid values are:

        - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
        - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.

        > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
        > 
        > To submit a static policy or policy template without a schema, you must turn off validation.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class PolicyTemplateLinkedPolicyDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyTemplateId":
            suggest = "policy_template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyTemplateLinkedPolicyDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyTemplateLinkedPolicyDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyTemplateLinkedPolicyDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_template_id: _builtins.str,
                 principal: Optional['outputs.PolicyEntityIdentifier'] = None,
                 resource: Optional['outputs.PolicyEntityIdentifier'] = None):
        pulumi.set(__self__, "policy_template_id", policy_template_id)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @_builtins.property
    @pulumi.getter(name="policyTemplateId")
    def policy_template_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_template_id")

    @_builtins.property
    @pulumi.getter
    def principal(self) -> Optional['outputs.PolicyEntityIdentifier']:
        return pulumi.get(self, "principal")

    @_builtins.property
    @pulumi.getter
    def resource(self) -> Optional['outputs.PolicyEntityIdentifier']:
        return pulumi.get(self, "resource")


