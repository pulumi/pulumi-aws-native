# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPolicyTemplateResult',
    'AwaitableGetPolicyTemplateResult',
    'get_policy_template',
    'get_policy_template_output',
]

@pulumi.output_type
class GetPolicyTemplateResult:
    def __init__(__self__, description=None, policy_template_id=None, statement=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if policy_template_id and not isinstance(policy_template_id, str):
            raise TypeError("Expected argument 'policy_template_id' to be a str")
        pulumi.set(__self__, "policy_template_id", policy_template_id)
        if statement and not isinstance(statement, str):
            raise TypeError("Expected argument 'statement' to be a str")
        pulumi.set(__self__, "statement", statement)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="policyTemplateId")
    def policy_template_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_template_id")

    @property
    @pulumi.getter
    def statement(self) -> Optional[str]:
        return pulumi.get(self, "statement")


class AwaitableGetPolicyTemplateResult(GetPolicyTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyTemplateResult(
            description=self.description,
            policy_template_id=self.policy_template_id,
            statement=self.statement)


def get_policy_template(policy_store_id: Optional[str] = None,
                        policy_template_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyTemplateResult:
    """
    Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
    """
    __args__ = dict()
    __args__['policyStoreId'] = policy_store_id
    __args__['policyTemplateId'] = policy_template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:verifiedpermissions:getPolicyTemplate', __args__, opts=opts, typ=GetPolicyTemplateResult).value

    return AwaitableGetPolicyTemplateResult(
        description=pulumi.get(__ret__, 'description'),
        policy_template_id=pulumi.get(__ret__, 'policy_template_id'),
        statement=pulumi.get(__ret__, 'statement'))


@_utilities.lift_output_func(get_policy_template)
def get_policy_template_output(policy_store_id: Optional[pulumi.Input[str]] = None,
                               policy_template_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyTemplateResult]:
    """
    Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
    """
    ...
