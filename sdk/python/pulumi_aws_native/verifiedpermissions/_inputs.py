# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'IdentitySourceCognitoGroupConfigurationArgs',
    'IdentitySourceCognitoGroupConfigurationArgsDict',
    'IdentitySourceCognitoUserPoolConfigurationArgs',
    'IdentitySourceCognitoUserPoolConfigurationArgsDict',
    'IdentitySourceConfiguration0PropertiesArgs',
    'IdentitySourceConfiguration0PropertiesArgsDict',
    'IdentitySourceConfiguration1PropertiesArgs',
    'IdentitySourceConfiguration1PropertiesArgsDict',
    'IdentitySourceOpenIdConnectAccessTokenConfigurationArgs',
    'IdentitySourceOpenIdConnectAccessTokenConfigurationArgsDict',
    'IdentitySourceOpenIdConnectConfigurationArgs',
    'IdentitySourceOpenIdConnectConfigurationArgsDict',
    'IdentitySourceOpenIdConnectGroupConfigurationArgs',
    'IdentitySourceOpenIdConnectGroupConfigurationArgsDict',
    'IdentitySourceOpenIdConnectIdentityTokenConfigurationArgs',
    'IdentitySourceOpenIdConnectIdentityTokenConfigurationArgsDict',
    'IdentitySourceOpenIdConnectTokenSelection0PropertiesArgs',
    'IdentitySourceOpenIdConnectTokenSelection0PropertiesArgsDict',
    'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgs',
    'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgsDict',
    'PolicyDefinition0PropertiesArgs',
    'PolicyDefinition0PropertiesArgsDict',
    'PolicyDefinition1PropertiesArgs',
    'PolicyDefinition1PropertiesArgsDict',
    'PolicyEntityIdentifierArgs',
    'PolicyEntityIdentifierArgsDict',
    'PolicyStaticPolicyDefinitionArgs',
    'PolicyStaticPolicyDefinitionArgsDict',
    'PolicyStoreSchemaDefinitionArgs',
    'PolicyStoreSchemaDefinitionArgsDict',
    'PolicyStoreValidationSettingsArgs',
    'PolicyStoreValidationSettingsArgsDict',
    'PolicyTemplateLinkedPolicyDefinitionArgs',
    'PolicyTemplateLinkedPolicyDefinitionArgsDict',
]

MYPY = False

if not MYPY:
    class IdentitySourceCognitoGroupConfigurationArgsDict(TypedDict):
        group_entity_type: pulumi.Input[str]
elif False:
    IdentitySourceCognitoGroupConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceCognitoGroupConfigurationArgs:
    def __init__(__self__, *,
                 group_entity_type: pulumi.Input[str]):
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_entity_type")

    @group_entity_type.setter
    def group_entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_entity_type", value)


if not MYPY:
    class IdentitySourceCognitoUserPoolConfigurationArgsDict(TypedDict):
        user_pool_arn: pulumi.Input[str]
        client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        group_configuration: NotRequired[pulumi.Input['IdentitySourceCognitoGroupConfigurationArgsDict']]
elif False:
    IdentitySourceCognitoUserPoolConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceCognitoUserPoolConfigurationArgs:
    def __init__(__self__, *,
                 user_pool_arn: pulumi.Input[str],
                 client_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_configuration: Optional[pulumi.Input['IdentitySourceCognitoGroupConfigurationArgs']] = None):
        pulumi.set(__self__, "user_pool_arn", user_pool_arn)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)

    @property
    @pulumi.getter(name="userPoolArn")
    def user_pool_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_pool_arn")

    @user_pool_arn.setter
    def user_pool_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_pool_arn", value)

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "client_ids")

    @client_ids.setter
    def client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_ids", value)

    @property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional[pulumi.Input['IdentitySourceCognitoGroupConfigurationArgs']]:
        return pulumi.get(self, "group_configuration")

    @group_configuration.setter
    def group_configuration(self, value: Optional[pulumi.Input['IdentitySourceCognitoGroupConfigurationArgs']]):
        pulumi.set(self, "group_configuration", value)


if not MYPY:
    class IdentitySourceConfiguration0PropertiesArgsDict(TypedDict):
        cognito_user_pool_configuration: pulumi.Input['IdentitySourceCognitoUserPoolConfigurationArgsDict']
elif False:
    IdentitySourceConfiguration0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 cognito_user_pool_configuration: pulumi.Input['IdentitySourceCognitoUserPoolConfigurationArgs']):
        pulumi.set(__self__, "cognito_user_pool_configuration", cognito_user_pool_configuration)

    @property
    @pulumi.getter(name="cognitoUserPoolConfiguration")
    def cognito_user_pool_configuration(self) -> pulumi.Input['IdentitySourceCognitoUserPoolConfigurationArgs']:
        return pulumi.get(self, "cognito_user_pool_configuration")

    @cognito_user_pool_configuration.setter
    def cognito_user_pool_configuration(self, value: pulumi.Input['IdentitySourceCognitoUserPoolConfigurationArgs']):
        pulumi.set(self, "cognito_user_pool_configuration", value)


if not MYPY:
    class IdentitySourceConfiguration1PropertiesArgsDict(TypedDict):
        open_id_connect_configuration: pulumi.Input['IdentitySourceOpenIdConnectConfigurationArgsDict']
elif False:
    IdentitySourceConfiguration1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 open_id_connect_configuration: pulumi.Input['IdentitySourceOpenIdConnectConfigurationArgs']):
        pulumi.set(__self__, "open_id_connect_configuration", open_id_connect_configuration)

    @property
    @pulumi.getter(name="openIdConnectConfiguration")
    def open_id_connect_configuration(self) -> pulumi.Input['IdentitySourceOpenIdConnectConfigurationArgs']:
        return pulumi.get(self, "open_id_connect_configuration")

    @open_id_connect_configuration.setter
    def open_id_connect_configuration(self, value: pulumi.Input['IdentitySourceOpenIdConnectConfigurationArgs']):
        pulumi.set(self, "open_id_connect_configuration", value)


if not MYPY:
    class IdentitySourceOpenIdConnectAccessTokenConfigurationArgsDict(TypedDict):
        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        principal_id_claim: NotRequired[pulumi.Input[str]]
elif False:
    IdentitySourceOpenIdConnectAccessTokenConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectAccessTokenConfigurationArgs:
    def __init__(__self__, *,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id_claim: Optional[pulumi.Input[str]] = None):
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id_claim")

    @principal_id_claim.setter
    def principal_id_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id_claim", value)


if not MYPY:
    class IdentitySourceOpenIdConnectConfigurationArgsDict(TypedDict):
        issuer: pulumi.Input[str]
        token_selection: pulumi.Input[Union['IdentitySourceOpenIdConnectTokenSelection0PropertiesArgsDict', 'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgsDict']]
        entity_id_prefix: NotRequired[pulumi.Input[str]]
        group_configuration: NotRequired[pulumi.Input['IdentitySourceOpenIdConnectGroupConfigurationArgsDict']]
elif False:
    IdentitySourceOpenIdConnectConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectConfigurationArgs:
    def __init__(__self__, *,
                 issuer: pulumi.Input[str],
                 token_selection: pulumi.Input[Union['IdentitySourceOpenIdConnectTokenSelection0PropertiesArgs', 'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgs']],
                 entity_id_prefix: Optional[pulumi.Input[str]] = None,
                 group_configuration: Optional[pulumi.Input['IdentitySourceOpenIdConnectGroupConfigurationArgs']] = None):
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "token_selection", token_selection)
        if entity_id_prefix is not None:
            pulumi.set(__self__, "entity_id_prefix", entity_id_prefix)
        if group_configuration is not None:
            pulumi.set(__self__, "group_configuration", group_configuration)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="tokenSelection")
    def token_selection(self) -> pulumi.Input[Union['IdentitySourceOpenIdConnectTokenSelection0PropertiesArgs', 'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgs']]:
        return pulumi.get(self, "token_selection")

    @token_selection.setter
    def token_selection(self, value: pulumi.Input[Union['IdentitySourceOpenIdConnectTokenSelection0PropertiesArgs', 'IdentitySourceOpenIdConnectTokenSelection1PropertiesArgs']]):
        pulumi.set(self, "token_selection", value)

    @property
    @pulumi.getter(name="entityIdPrefix")
    def entity_id_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id_prefix")

    @entity_id_prefix.setter
    def entity_id_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id_prefix", value)

    @property
    @pulumi.getter(name="groupConfiguration")
    def group_configuration(self) -> Optional[pulumi.Input['IdentitySourceOpenIdConnectGroupConfigurationArgs']]:
        return pulumi.get(self, "group_configuration")

    @group_configuration.setter
    def group_configuration(self, value: Optional[pulumi.Input['IdentitySourceOpenIdConnectGroupConfigurationArgs']]):
        pulumi.set(self, "group_configuration", value)


if not MYPY:
    class IdentitySourceOpenIdConnectGroupConfigurationArgsDict(TypedDict):
        group_claim: pulumi.Input[str]
        group_entity_type: pulumi.Input[str]
elif False:
    IdentitySourceOpenIdConnectGroupConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectGroupConfigurationArgs:
    def __init__(__self__, *,
                 group_claim: pulumi.Input[str],
                 group_entity_type: pulumi.Input[str]):
        pulumi.set(__self__, "group_claim", group_claim)
        pulumi.set(__self__, "group_entity_type", group_entity_type)

    @property
    @pulumi.getter(name="groupClaim")
    def group_claim(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_claim")

    @group_claim.setter
    def group_claim(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_claim", value)

    @property
    @pulumi.getter(name="groupEntityType")
    def group_entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_entity_type")

    @group_entity_type.setter
    def group_entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_entity_type", value)


if not MYPY:
    class IdentitySourceOpenIdConnectIdentityTokenConfigurationArgsDict(TypedDict):
        client_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        principal_id_claim: NotRequired[pulumi.Input[str]]
elif False:
    IdentitySourceOpenIdConnectIdentityTokenConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectIdentityTokenConfigurationArgs:
    def __init__(__self__, *,
                 client_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principal_id_claim: Optional[pulumi.Input[str]] = None):
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if principal_id_claim is not None:
            pulumi.set(__self__, "principal_id_claim", principal_id_claim)

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "client_ids")

    @client_ids.setter
    def client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_ids", value)

    @property
    @pulumi.getter(name="principalIdClaim")
    def principal_id_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "principal_id_claim")

    @principal_id_claim.setter
    def principal_id_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id_claim", value)


if not MYPY:
    class IdentitySourceOpenIdConnectTokenSelection0PropertiesArgsDict(TypedDict):
        access_token_only: pulumi.Input['IdentitySourceOpenIdConnectAccessTokenConfigurationArgsDict']
elif False:
    IdentitySourceOpenIdConnectTokenSelection0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectTokenSelection0PropertiesArgs:
    def __init__(__self__, *,
                 access_token_only: pulumi.Input['IdentitySourceOpenIdConnectAccessTokenConfigurationArgs']):
        pulumi.set(__self__, "access_token_only", access_token_only)

    @property
    @pulumi.getter(name="accessTokenOnly")
    def access_token_only(self) -> pulumi.Input['IdentitySourceOpenIdConnectAccessTokenConfigurationArgs']:
        return pulumi.get(self, "access_token_only")

    @access_token_only.setter
    def access_token_only(self, value: pulumi.Input['IdentitySourceOpenIdConnectAccessTokenConfigurationArgs']):
        pulumi.set(self, "access_token_only", value)


if not MYPY:
    class IdentitySourceOpenIdConnectTokenSelection1PropertiesArgsDict(TypedDict):
        identity_token_only: pulumi.Input['IdentitySourceOpenIdConnectIdentityTokenConfigurationArgsDict']
elif False:
    IdentitySourceOpenIdConnectTokenSelection1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IdentitySourceOpenIdConnectTokenSelection1PropertiesArgs:
    def __init__(__self__, *,
                 identity_token_only: pulumi.Input['IdentitySourceOpenIdConnectIdentityTokenConfigurationArgs']):
        pulumi.set(__self__, "identity_token_only", identity_token_only)

    @property
    @pulumi.getter(name="identityTokenOnly")
    def identity_token_only(self) -> pulumi.Input['IdentitySourceOpenIdConnectIdentityTokenConfigurationArgs']:
        return pulumi.get(self, "identity_token_only")

    @identity_token_only.setter
    def identity_token_only(self, value: pulumi.Input['IdentitySourceOpenIdConnectIdentityTokenConfigurationArgs']):
        pulumi.set(self, "identity_token_only", value)


if not MYPY:
    class PolicyDefinition0PropertiesArgsDict(TypedDict):
        static: pulumi.Input['PolicyStaticPolicyDefinitionArgsDict']
elif False:
    PolicyDefinition0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinition0PropertiesArgs:
    def __init__(__self__, *,
                 static: pulumi.Input['PolicyStaticPolicyDefinitionArgs']):
        pulumi.set(__self__, "static", static)

    @property
    @pulumi.getter
    def static(self) -> pulumi.Input['PolicyStaticPolicyDefinitionArgs']:
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: pulumi.Input['PolicyStaticPolicyDefinitionArgs']):
        pulumi.set(self, "static", value)


if not MYPY:
    class PolicyDefinition1PropertiesArgsDict(TypedDict):
        template_linked: pulumi.Input['PolicyTemplateLinkedPolicyDefinitionArgsDict']
elif False:
    PolicyDefinition1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyDefinition1PropertiesArgs:
    def __init__(__self__, *,
                 template_linked: pulumi.Input['PolicyTemplateLinkedPolicyDefinitionArgs']):
        pulumi.set(__self__, "template_linked", template_linked)

    @property
    @pulumi.getter(name="templateLinked")
    def template_linked(self) -> pulumi.Input['PolicyTemplateLinkedPolicyDefinitionArgs']:
        return pulumi.get(self, "template_linked")

    @template_linked.setter
    def template_linked(self, value: pulumi.Input['PolicyTemplateLinkedPolicyDefinitionArgs']):
        pulumi.set(self, "template_linked", value)


if not MYPY:
    class PolicyEntityIdentifierArgsDict(TypedDict):
        entity_id: pulumi.Input[str]
        entity_type: pulumi.Input[str]
elif False:
    PolicyEntityIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyEntityIdentifierArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 entity_type: pulumi.Input[str]):
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "entity_type", entity_type)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)


if not MYPY:
    class PolicyStaticPolicyDefinitionArgsDict(TypedDict):
        statement: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    PolicyStaticPolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyStaticPolicyDefinitionArgs:
    def __init__(__self__, *,
                 statement: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "statement", statement)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input[str]:
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input[str]):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class PolicyStoreSchemaDefinitionArgsDict(TypedDict):
        cedar_json: NotRequired[pulumi.Input[str]]
        """
        A JSON string representation of the schema supported by applications that use this policy store. For more information, see [Policy store schema](https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/schema.html) in the AVP User Guide.
        """
elif False:
    PolicyStoreSchemaDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyStoreSchemaDefinitionArgs:
    def __init__(__self__, *,
                 cedar_json: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cedar_json: A JSON string representation of the schema supported by applications that use this policy store. For more information, see [Policy store schema](https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/schema.html) in the AVP User Guide.
        """
        if cedar_json is not None:
            pulumi.set(__self__, "cedar_json", cedar_json)

    @property
    @pulumi.getter(name="cedarJson")
    def cedar_json(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string representation of the schema supported by applications that use this policy store. For more information, see [Policy store schema](https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/schema.html) in the AVP User Guide.
        """
        return pulumi.get(self, "cedar_json")

    @cedar_json.setter
    def cedar_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cedar_json", value)


if not MYPY:
    class PolicyStoreValidationSettingsArgsDict(TypedDict):
        mode: pulumi.Input['PolicyStoreValidationMode']
        """
        The validation mode currently configured for this policy store. The valid values are:

        - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
        - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.

        > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
        > 
        > To submit a static policy or policy template without a schema, you must turn off validation.
        """
elif False:
    PolicyStoreValidationSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyStoreValidationSettingsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input['PolicyStoreValidationMode']):
        """
        :param pulumi.Input['PolicyStoreValidationMode'] mode: The validation mode currently configured for this policy store. The valid values are:
               
               - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
               - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.
               
               > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
               > 
               > To submit a static policy or policy template without a schema, you must turn off validation.
        """
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input['PolicyStoreValidationMode']:
        """
        The validation mode currently configured for this policy store. The valid values are:

        - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
        - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.

        > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
        > 
        > To submit a static policy or policy template without a schema, you must turn off validation.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input['PolicyStoreValidationMode']):
        pulumi.set(self, "mode", value)


if not MYPY:
    class PolicyTemplateLinkedPolicyDefinitionArgsDict(TypedDict):
        policy_template_id: pulumi.Input[str]
        principal: NotRequired[pulumi.Input['PolicyEntityIdentifierArgsDict']]
        resource: NotRequired[pulumi.Input['PolicyEntityIdentifierArgsDict']]
elif False:
    PolicyTemplateLinkedPolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTemplateLinkedPolicyDefinitionArgs:
    def __init__(__self__, *,
                 policy_template_id: pulumi.Input[str],
                 principal: Optional[pulumi.Input['PolicyEntityIdentifierArgs']] = None,
                 resource: Optional[pulumi.Input['PolicyEntityIdentifierArgs']] = None):
        pulumi.set(__self__, "policy_template_id", policy_template_id)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="policyTemplateId")
    def policy_template_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_template_id")

    @policy_template_id.setter
    def policy_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_template_id", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input['PolicyEntityIdentifierArgs']]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input['PolicyEntityIdentifierArgs']]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input['PolicyEntityIdentifierArgs']]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input['PolicyEntityIdentifierArgs']]):
        pulumi.set(self, "resource", value)


