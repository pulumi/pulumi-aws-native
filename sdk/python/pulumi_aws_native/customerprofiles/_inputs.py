# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'CalculatedAttributeDefinitionAttributeDetailsArgs',
    'CalculatedAttributeDefinitionAttributeItemArgs',
    'CalculatedAttributeDefinitionConditionsArgs',
    'CalculatedAttributeDefinitionRangeArgs',
    'CalculatedAttributeDefinitionTagArgs',
    'CalculatedAttributeDefinitionThresholdArgs',
    'DomainTagArgs',
    'EventStreamTagArgs',
    'IntegrationConnectorOperatorArgs',
    'IntegrationFlowDefinitionArgs',
    'IntegrationIncrementalPullConfigArgs',
    'IntegrationMarketoSourcePropertiesArgs',
    'IntegrationObjectTypeMappingArgs',
    'IntegrationS3SourcePropertiesArgs',
    'IntegrationSalesforceSourcePropertiesArgs',
    'IntegrationScheduledTriggerPropertiesArgs',
    'IntegrationServiceNowSourcePropertiesArgs',
    'IntegrationSourceConnectorPropertiesArgs',
    'IntegrationSourceFlowConfigArgs',
    'IntegrationTagArgs',
    'IntegrationTaskPropertiesMapArgs',
    'IntegrationTaskArgs',
    'IntegrationTriggerConfigArgs',
    'IntegrationTriggerPropertiesArgs',
    'IntegrationZendeskSourcePropertiesArgs',
    'ObjectTypeFieldMapArgs',
    'ObjectTypeFieldArgs',
    'ObjectTypeKeyMapArgs',
    'ObjectTypeKeyArgs',
    'ObjectTypeTagArgs',
]

@pulumi.input_type
class CalculatedAttributeDefinitionAttributeDetailsArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input['CalculatedAttributeDefinitionAttributeItemArgs']]],
                 expression: pulumi.Input[str]):
        """
        Mathematical expression and a list of attribute items specified in that expression.
        """
        CalculatedAttributeDefinitionAttributeDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: pulumi.Input[Sequence[pulumi.Input['CalculatedAttributeDefinitionAttributeItemArgs']]],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attributes", attributes)
        _setter("expression", expression)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input['CalculatedAttributeDefinitionAttributeItemArgs']]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input['CalculatedAttributeDefinitionAttributeItemArgs']]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class CalculatedAttributeDefinitionAttributeItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The details of a single attribute item specified in the mathematical expression.
        """
        CalculatedAttributeDefinitionAttributeItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CalculatedAttributeDefinitionConditionsArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[int]] = None,
                 range: Optional[pulumi.Input['CalculatedAttributeDefinitionRangeArgs']] = None,
                 threshold: Optional[pulumi.Input['CalculatedAttributeDefinitionThresholdArgs']] = None):
        """
        The conditions including range, object count, and threshold for the calculated attribute.
        """
        CalculatedAttributeDefinitionConditionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            range=range,
            threshold=threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: Optional[pulumi.Input[int]] = None,
             range: Optional[pulumi.Input['CalculatedAttributeDefinitionRangeArgs']] = None,
             threshold: Optional[pulumi.Input['CalculatedAttributeDefinitionThresholdArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if object_count is not None:
            _setter("object_count", object_count)
        if range is not None:
            _setter("range", range)
        if threshold is not None:
            _setter("threshold", threshold)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['CalculatedAttributeDefinitionRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['CalculatedAttributeDefinitionRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input['CalculatedAttributeDefinitionThresholdArgs']]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input['CalculatedAttributeDefinitionThresholdArgs']]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class CalculatedAttributeDefinitionRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input['CalculatedAttributeDefinitionRangeUnit'],
                 value: pulumi.Input[int]):
        """
        The relative time period over which data is included in the aggregation.
        """
        CalculatedAttributeDefinitionRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: pulumi.Input['CalculatedAttributeDefinitionRangeUnit'],
             value: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input['CalculatedAttributeDefinitionRangeUnit']:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input['CalculatedAttributeDefinitionRangeUnit']):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedAttributeDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        CalculatedAttributeDefinitionTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedAttributeDefinitionThresholdArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input['CalculatedAttributeDefinitionThresholdOperator'],
                 value: pulumi.Input[str]):
        """
        The threshold for the calculated attribute.
        """
        CalculatedAttributeDefinitionThresholdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input['CalculatedAttributeDefinitionThresholdOperator'],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator", operator)
        _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input['CalculatedAttributeDefinitionThresholdOperator']:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input['CalculatedAttributeDefinitionThresholdOperator']):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DomainTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        DomainTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EventStreamTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        EventStreamTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationConnectorOperatorArgs:
    def __init__(__self__, *,
                 marketo: Optional[pulumi.Input['IntegrationMarketoConnectorOperator']] = None,
                 s3: Optional[pulumi.Input['IntegrationS3ConnectorOperator']] = None,
                 salesforce: Optional[pulumi.Input['IntegrationSalesforceConnectorOperator']] = None,
                 service_now: Optional[pulumi.Input['IntegrationServiceNowConnectorOperator']] = None,
                 zendesk: Optional[pulumi.Input['IntegrationZendeskConnectorOperator']] = None):
        IntegrationConnectorOperatorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            marketo=marketo,
            s3=s3,
            salesforce=salesforce,
            service_now=service_now,
            zendesk=zendesk,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             marketo: Optional[pulumi.Input['IntegrationMarketoConnectorOperator']] = None,
             s3: Optional[pulumi.Input['IntegrationS3ConnectorOperator']] = None,
             salesforce: Optional[pulumi.Input['IntegrationSalesforceConnectorOperator']] = None,
             service_now: Optional[pulumi.Input['IntegrationServiceNowConnectorOperator']] = None,
             zendesk: Optional[pulumi.Input['IntegrationZendeskConnectorOperator']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if marketo is not None:
            _setter("marketo", marketo)
        if s3 is not None:
            _setter("s3", s3)
        if salesforce is not None:
            _setter("salesforce", salesforce)
        if service_now is not None:
            _setter("service_now", service_now)
        if zendesk is not None:
            _setter("zendesk", zendesk)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['IntegrationMarketoConnectorOperator']]:
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['IntegrationMarketoConnectorOperator']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['IntegrationS3ConnectorOperator']]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['IntegrationS3ConnectorOperator']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['IntegrationSalesforceConnectorOperator']]:
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['IntegrationSalesforceConnectorOperator']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['IntegrationServiceNowConnectorOperator']]:
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['IntegrationServiceNowConnectorOperator']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['IntegrationZendeskConnectorOperator']]:
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['IntegrationZendeskConnectorOperator']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class IntegrationFlowDefinitionArgs:
    def __init__(__self__, *,
                 flow_name: pulumi.Input[str],
                 kms_arn: pulumi.Input[str],
                 source_flow_config: pulumi.Input['IntegrationSourceFlowConfigArgs'],
                 tasks: pulumi.Input[Sequence[pulumi.Input['IntegrationTaskArgs']]],
                 trigger_config: pulumi.Input['IntegrationTriggerConfigArgs'],
                 description: Optional[pulumi.Input[str]] = None):
        IntegrationFlowDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flow_name=flow_name,
            kms_arn=kms_arn,
            source_flow_config=source_flow_config,
            tasks=tasks,
            trigger_config=trigger_config,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flow_name: pulumi.Input[str],
             kms_arn: pulumi.Input[str],
             source_flow_config: pulumi.Input['IntegrationSourceFlowConfigArgs'],
             tasks: pulumi.Input[Sequence[pulumi.Input['IntegrationTaskArgs']]],
             trigger_config: pulumi.Input['IntegrationTriggerConfigArgs'],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("flow_name", flow_name)
        _setter("kms_arn", kms_arn)
        _setter("source_flow_config", source_flow_config)
        _setter("tasks", tasks)
        _setter("trigger_config", trigger_config)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter(name="flowName")
    def flow_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flow_name")

    @flow_name.setter
    def flow_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow_name", value)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_arn")

    @kms_arn.setter
    def kms_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_arn", value)

    @property
    @pulumi.getter(name="sourceFlowConfig")
    def source_flow_config(self) -> pulumi.Input['IntegrationSourceFlowConfigArgs']:
        return pulumi.get(self, "source_flow_config")

    @source_flow_config.setter
    def source_flow_config(self, value: pulumi.Input['IntegrationSourceFlowConfigArgs']):
        pulumi.set(self, "source_flow_config", value)

    @property
    @pulumi.getter
    def tasks(self) -> pulumi.Input[Sequence[pulumi.Input['IntegrationTaskArgs']]]:
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: pulumi.Input[Sequence[pulumi.Input['IntegrationTaskArgs']]]):
        pulumi.set(self, "tasks", value)

    @property
    @pulumi.getter(name="triggerConfig")
    def trigger_config(self) -> pulumi.Input['IntegrationTriggerConfigArgs']:
        return pulumi.get(self, "trigger_config")

    @trigger_config.setter
    def trigger_config(self, value: pulumi.Input['IntegrationTriggerConfigArgs']):
        pulumi.set(self, "trigger_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class IntegrationIncrementalPullConfigArgs:
    def __init__(__self__, *,
                 datetime_type_field_name: Optional[pulumi.Input[str]] = None):
        IntegrationIncrementalPullConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datetime_type_field_name=datetime_type_field_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datetime_type_field_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if datetime_type_field_name is not None:
            _setter("datetime_type_field_name", datetime_type_field_name)

    @property
    @pulumi.getter(name="datetimeTypeFieldName")
    def datetime_type_field_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datetime_type_field_name")

    @datetime_type_field_name.setter
    def datetime_type_field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datetime_type_field_name", value)


@pulumi.input_type
class IntegrationMarketoSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        IntegrationMarketoSourcePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class IntegrationObjectTypeMappingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        IntegrationObjectTypeMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationS3SourcePropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None):
        IntegrationS3SourcePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            bucket_prefix=bucket_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: pulumi.Input[str],
             bucket_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket_name", bucket_name)
        if bucket_prefix is not None:
            _setter("bucket_prefix", bucket_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)


@pulumi.input_type
class IntegrationSalesforceSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 enable_dynamic_field_update: Optional[pulumi.Input[bool]] = None,
                 include_deleted_records: Optional[pulumi.Input[bool]] = None):
        IntegrationSalesforceSourcePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object=object,
            enable_dynamic_field_update=enable_dynamic_field_update,
            include_deleted_records=include_deleted_records,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object: pulumi.Input[str],
             enable_dynamic_field_update: Optional[pulumi.Input[bool]] = None,
             include_deleted_records: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object", object)
        if enable_dynamic_field_update is not None:
            _setter("enable_dynamic_field_update", enable_dynamic_field_update)
        if include_deleted_records is not None:
            _setter("include_deleted_records", include_deleted_records)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="enableDynamicFieldUpdate")
    def enable_dynamic_field_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_dynamic_field_update")

    @enable_dynamic_field_update.setter
    def enable_dynamic_field_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dynamic_field_update", value)

    @property
    @pulumi.getter(name="includeDeletedRecords")
    def include_deleted_records(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_deleted_records")

    @include_deleted_records.setter
    def include_deleted_records(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted_records", value)


@pulumi.input_type
class IntegrationScheduledTriggerPropertiesArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str],
                 data_pull_mode: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesDataPullMode']] = None,
                 first_execution_from: Optional[pulumi.Input[float]] = None,
                 schedule_end_time: Optional[pulumi.Input[float]] = None,
                 schedule_offset: Optional[pulumi.Input[int]] = None,
                 schedule_start_time: Optional[pulumi.Input[float]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        IntegrationScheduledTriggerPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_expression=schedule_expression,
            data_pull_mode=data_pull_mode,
            first_execution_from=first_execution_from,
            schedule_end_time=schedule_end_time,
            schedule_offset=schedule_offset,
            schedule_start_time=schedule_start_time,
            timezone=timezone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_expression: pulumi.Input[str],
             data_pull_mode: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesDataPullMode']] = None,
             first_execution_from: Optional[pulumi.Input[float]] = None,
             schedule_end_time: Optional[pulumi.Input[float]] = None,
             schedule_offset: Optional[pulumi.Input[int]] = None,
             schedule_start_time: Optional[pulumi.Input[float]] = None,
             timezone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("schedule_expression", schedule_expression)
        if data_pull_mode is not None:
            _setter("data_pull_mode", data_pull_mode)
        if first_execution_from is not None:
            _setter("first_execution_from", first_execution_from)
        if schedule_end_time is not None:
            _setter("schedule_end_time", schedule_end_time)
        if schedule_offset is not None:
            _setter("schedule_offset", schedule_offset)
        if schedule_start_time is not None:
            _setter("schedule_start_time", schedule_start_time)
        if timezone is not None:
            _setter("timezone", timezone)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)

    @property
    @pulumi.getter(name="dataPullMode")
    def data_pull_mode(self) -> Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesDataPullMode']]:
        return pulumi.get(self, "data_pull_mode")

    @data_pull_mode.setter
    def data_pull_mode(self, value: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesDataPullMode']]):
        pulumi.set(self, "data_pull_mode", value)

    @property
    @pulumi.getter(name="firstExecutionFrom")
    def first_execution_from(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "first_execution_from")

    @first_execution_from.setter
    def first_execution_from(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "first_execution_from", value)

    @property
    @pulumi.getter(name="scheduleEndTime")
    def schedule_end_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "schedule_end_time")

    @schedule_end_time.setter
    def schedule_end_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "schedule_end_time", value)

    @property
    @pulumi.getter(name="scheduleOffset")
    def schedule_offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "schedule_offset")

    @schedule_offset.setter
    def schedule_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_offset", value)

    @property
    @pulumi.getter(name="scheduleStartTime")
    def schedule_start_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "schedule_start_time")

    @schedule_start_time.setter
    def schedule_start_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "schedule_start_time", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class IntegrationServiceNowSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        IntegrationServiceNowSourcePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class IntegrationSourceConnectorPropertiesArgs:
    def __init__(__self__, *,
                 marketo: Optional[pulumi.Input['IntegrationMarketoSourcePropertiesArgs']] = None,
                 s3: Optional[pulumi.Input['IntegrationS3SourcePropertiesArgs']] = None,
                 salesforce: Optional[pulumi.Input['IntegrationSalesforceSourcePropertiesArgs']] = None,
                 service_now: Optional[pulumi.Input['IntegrationServiceNowSourcePropertiesArgs']] = None,
                 zendesk: Optional[pulumi.Input['IntegrationZendeskSourcePropertiesArgs']] = None):
        IntegrationSourceConnectorPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            marketo=marketo,
            s3=s3,
            salesforce=salesforce,
            service_now=service_now,
            zendesk=zendesk,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             marketo: Optional[pulumi.Input['IntegrationMarketoSourcePropertiesArgs']] = None,
             s3: Optional[pulumi.Input['IntegrationS3SourcePropertiesArgs']] = None,
             salesforce: Optional[pulumi.Input['IntegrationSalesforceSourcePropertiesArgs']] = None,
             service_now: Optional[pulumi.Input['IntegrationServiceNowSourcePropertiesArgs']] = None,
             zendesk: Optional[pulumi.Input['IntegrationZendeskSourcePropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if marketo is not None:
            _setter("marketo", marketo)
        if s3 is not None:
            _setter("s3", s3)
        if salesforce is not None:
            _setter("salesforce", salesforce)
        if service_now is not None:
            _setter("service_now", service_now)
        if zendesk is not None:
            _setter("zendesk", zendesk)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['IntegrationMarketoSourcePropertiesArgs']]:
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['IntegrationMarketoSourcePropertiesArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['IntegrationS3SourcePropertiesArgs']]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['IntegrationS3SourcePropertiesArgs']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['IntegrationSalesforceSourcePropertiesArgs']]:
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['IntegrationSalesforceSourcePropertiesArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['IntegrationServiceNowSourcePropertiesArgs']]:
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['IntegrationServiceNowSourcePropertiesArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['IntegrationZendeskSourcePropertiesArgs']]:
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['IntegrationZendeskSourcePropertiesArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class IntegrationSourceFlowConfigArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input['IntegrationConnectorType'],
                 source_connector_properties: pulumi.Input['IntegrationSourceConnectorPropertiesArgs'],
                 connector_profile_name: Optional[pulumi.Input[str]] = None,
                 incremental_pull_config: Optional[pulumi.Input['IntegrationIncrementalPullConfigArgs']] = None):
        IntegrationSourceFlowConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connector_type=connector_type,
            source_connector_properties=source_connector_properties,
            connector_profile_name=connector_profile_name,
            incremental_pull_config=incremental_pull_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connector_type: pulumi.Input['IntegrationConnectorType'],
             source_connector_properties: pulumi.Input['IntegrationSourceConnectorPropertiesArgs'],
             connector_profile_name: Optional[pulumi.Input[str]] = None,
             incremental_pull_config: Optional[pulumi.Input['IntegrationIncrementalPullConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connector_type", connector_type)
        _setter("source_connector_properties", source_connector_properties)
        if connector_profile_name is not None:
            _setter("connector_profile_name", connector_profile_name)
        if incremental_pull_config is not None:
            _setter("incremental_pull_config", incremental_pull_config)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input['IntegrationConnectorType']:
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input['IntegrationConnectorType']):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="sourceConnectorProperties")
    def source_connector_properties(self) -> pulumi.Input['IntegrationSourceConnectorPropertiesArgs']:
        return pulumi.get(self, "source_connector_properties")

    @source_connector_properties.setter
    def source_connector_properties(self, value: pulumi.Input['IntegrationSourceConnectorPropertiesArgs']):
        pulumi.set(self, "source_connector_properties", value)

    @property
    @pulumi.getter(name="connectorProfileName")
    def connector_profile_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connector_profile_name")

    @connector_profile_name.setter
    def connector_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_profile_name", value)

    @property
    @pulumi.getter(name="incrementalPullConfig")
    def incremental_pull_config(self) -> Optional[pulumi.Input['IntegrationIncrementalPullConfigArgs']]:
        return pulumi.get(self, "incremental_pull_config")

    @incremental_pull_config.setter
    def incremental_pull_config(self, value: Optional[pulumi.Input['IntegrationIncrementalPullConfigArgs']]):
        pulumi.set(self, "incremental_pull_config", value)


@pulumi.input_type
class IntegrationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        IntegrationTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskPropertiesMapArgs:
    def __init__(__self__, *,
                 operator_property_key: pulumi.Input['IntegrationOperatorPropertiesKeys'],
                 property: pulumi.Input[str]):
        IntegrationTaskPropertiesMapArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator_property_key=operator_property_key,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator_property_key: pulumi.Input['IntegrationOperatorPropertiesKeys'],
             property: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operator_property_key", operator_property_key)
        _setter("property", property)

    @property
    @pulumi.getter(name="operatorPropertyKey")
    def operator_property_key(self) -> pulumi.Input['IntegrationOperatorPropertiesKeys']:
        return pulumi.get(self, "operator_property_key")

    @operator_property_key.setter
    def operator_property_key(self, value: pulumi.Input['IntegrationOperatorPropertiesKeys']):
        pulumi.set(self, "operator_property_key", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class IntegrationTaskArgs:
    def __init__(__self__, *,
                 source_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: pulumi.Input['IntegrationTaskType'],
                 connector_operator: Optional[pulumi.Input['IntegrationConnectorOperatorArgs']] = None,
                 destination_field: Optional[pulumi.Input[str]] = None,
                 task_properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskPropertiesMapArgs']]]] = None):
        IntegrationTaskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_fields=source_fields,
            task_type=task_type,
            connector_operator=connector_operator,
            destination_field=destination_field,
            task_properties=task_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
             task_type: pulumi.Input['IntegrationTaskType'],
             connector_operator: Optional[pulumi.Input['IntegrationConnectorOperatorArgs']] = None,
             destination_field: Optional[pulumi.Input[str]] = None,
             task_properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskPropertiesMapArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("source_fields", source_fields)
        _setter("task_type", task_type)
        if connector_operator is not None:
            _setter("connector_operator", connector_operator)
        if destination_field is not None:
            _setter("destination_field", destination_field)
        if task_properties is not None:
            _setter("task_properties", task_properties)

    @property
    @pulumi.getter(name="sourceFields")
    def source_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "source_fields")

    @source_fields.setter
    def source_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_fields", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input['IntegrationTaskType']:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input['IntegrationTaskType']):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="connectorOperator")
    def connector_operator(self) -> Optional[pulumi.Input['IntegrationConnectorOperatorArgs']]:
        return pulumi.get(self, "connector_operator")

    @connector_operator.setter
    def connector_operator(self, value: Optional[pulumi.Input['IntegrationConnectorOperatorArgs']]):
        pulumi.set(self, "connector_operator", value)

    @property
    @pulumi.getter(name="destinationField")
    def destination_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_field")

    @destination_field.setter
    def destination_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_field", value)

    @property
    @pulumi.getter(name="taskProperties")
    def task_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskPropertiesMapArgs']]]]:
        return pulumi.get(self, "task_properties")

    @task_properties.setter
    def task_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskPropertiesMapArgs']]]]):
        pulumi.set(self, "task_properties", value)


@pulumi.input_type
class IntegrationTriggerConfigArgs:
    def __init__(__self__, *,
                 trigger_type: pulumi.Input['IntegrationTriggerType'],
                 trigger_properties: Optional[pulumi.Input['IntegrationTriggerPropertiesArgs']] = None):
        IntegrationTriggerConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trigger_type=trigger_type,
            trigger_properties=trigger_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trigger_type: pulumi.Input['IntegrationTriggerType'],
             trigger_properties: Optional[pulumi.Input['IntegrationTriggerPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("trigger_type", trigger_type)
        if trigger_properties is not None:
            _setter("trigger_properties", trigger_properties)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Input['IntegrationTriggerType']:
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: pulumi.Input['IntegrationTriggerType']):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerProperties")
    def trigger_properties(self) -> Optional[pulumi.Input['IntegrationTriggerPropertiesArgs']]:
        return pulumi.get(self, "trigger_properties")

    @trigger_properties.setter
    def trigger_properties(self, value: Optional[pulumi.Input['IntegrationTriggerPropertiesArgs']]):
        pulumi.set(self, "trigger_properties", value)


@pulumi.input_type
class IntegrationTriggerPropertiesArgs:
    def __init__(__self__, *,
                 scheduled: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesArgs']] = None):
        IntegrationTriggerPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scheduled=scheduled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scheduled: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if scheduled is not None:
            _setter("scheduled", scheduled)

    @property
    @pulumi.getter
    def scheduled(self) -> Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesArgs']]:
        return pulumi.get(self, "scheduled")

    @scheduled.setter
    def scheduled(self, value: Optional[pulumi.Input['IntegrationScheduledTriggerPropertiesArgs']]):
        pulumi.set(self, "scheduled", value)


@pulumi.input_type
class IntegrationZendeskSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        IntegrationZendeskSourcePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class ObjectTypeFieldMapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 object_type_field: Optional[pulumi.Input['ObjectTypeFieldArgs']] = None):
        ObjectTypeFieldMapArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            object_type_field=object_type_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             object_type_field: Optional[pulumi.Input['ObjectTypeFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if object_type_field is not None:
            _setter("object_type_field", object_type_field)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectTypeField")
    def object_type_field(self) -> Optional[pulumi.Input['ObjectTypeFieldArgs']]:
        return pulumi.get(self, "object_type_field")

    @object_type_field.setter
    def object_type_field(self, value: Optional[pulumi.Input['ObjectTypeFieldArgs']]):
        pulumi.set(self, "object_type_field", value)


@pulumi.input_type
class ObjectTypeFieldArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input['ObjectTypeFieldContentType']] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        Represents a field in a ProfileObjectType.
        :param pulumi.Input['ObjectTypeFieldContentType'] content_type: The content type of the field. Used for determining equality when searching.
        :param pulumi.Input[str] source: A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
        :param pulumi.Input[str] target: The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
        """
        ObjectTypeFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            source=source,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[pulumi.Input['ObjectTypeFieldContentType']] = None,
             source: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content_type is not None:
            _setter("content_type", content_type)
        if source is not None:
            _setter("source", source)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['ObjectTypeFieldContentType']]:
        """
        The content type of the field. Used for determining equality when searching.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['ObjectTypeFieldContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class ObjectTypeKeyMapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 object_type_key_list: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyArgs']]]] = None):
        ObjectTypeKeyMapArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            object_type_key_list=object_type_key_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             object_type_key_list: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if object_type_key_list is not None:
            _setter("object_type_key_list", object_type_key_list)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectTypeKeyList")
    def object_type_key_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyArgs']]]]:
        return pulumi.get(self, "object_type_key_list")

    @object_type_key_list.setter
    def object_type_key_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyArgs']]]]):
        pulumi.set(self, "object_type_key_list", value)


@pulumi.input_type
class ObjectTypeKeyArgs:
    def __init__(__self__, *,
                 field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 standard_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyStandardIdentifiersItem']]]] = None):
        """
        An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_names: The reference for the key name of the fields map. 
        :param pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyStandardIdentifiersItem']]] standard_identifiers: The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
        """
        ObjectTypeKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_names=field_names,
            standard_identifiers=standard_identifiers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             standard_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyStandardIdentifiersItem']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_names is not None:
            _setter("field_names", field_names)
        if standard_identifiers is not None:
            _setter("standard_identifiers", standard_identifiers)

    @property
    @pulumi.getter(name="fieldNames")
    def field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The reference for the key name of the fields map. 
        """
        return pulumi.get(self, "field_names")

    @field_names.setter
    def field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_names", value)

    @property
    @pulumi.getter(name="standardIdentifiers")
    def standard_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyStandardIdentifiersItem']]]]:
        """
        The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
        """
        return pulumi.get(self, "standard_identifiers")

    @standard_identifiers.setter
    def standard_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ObjectTypeKeyStandardIdentifiersItem']]]]):
        pulumi.set(self, "standard_identifiers", value)


@pulumi.input_type
class ObjectTypeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ObjectTypeTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


