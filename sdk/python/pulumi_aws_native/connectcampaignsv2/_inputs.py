# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CampaignAgentlessConfigArgs',
    'CampaignAgentlessConfigArgsDict',
    'CampaignAnswerMachineDetectionConfigArgs',
    'CampaignAnswerMachineDetectionConfigArgsDict',
    'CampaignChannelSubtypeConfigArgs',
    'CampaignChannelSubtypeConfigArgsDict',
    'CampaignCommunicationLimitsConfigArgs',
    'CampaignCommunicationLimitsConfigArgsDict',
    'CampaignCommunicationLimitsArgs',
    'CampaignCommunicationLimitsArgsDict',
    'CampaignCommunicationLimitArgs',
    'CampaignCommunicationLimitArgsDict',
    'CampaignCommunicationTimeConfigArgs',
    'CampaignCommunicationTimeConfigArgsDict',
    'CampaignDailyHourArgs',
    'CampaignDailyHourArgsDict',
    'CampaignEmailChannelSubtypeConfigArgs',
    'CampaignEmailChannelSubtypeConfigArgsDict',
    'CampaignEmailOutboundConfigArgs',
    'CampaignEmailOutboundConfigArgsDict',
    'CampaignEmailOutboundModeArgs',
    'CampaignEmailOutboundModeArgsDict',
    'CampaignLocalTimeZoneConfigArgs',
    'CampaignLocalTimeZoneConfigArgsDict',
    'CampaignOpenHoursArgs',
    'CampaignOpenHoursArgsDict',
    'CampaignPredictiveConfigArgs',
    'CampaignPredictiveConfigArgsDict',
    'CampaignProgressiveConfigArgs',
    'CampaignProgressiveConfigArgsDict',
    'CampaignRestrictedPeriodsArgs',
    'CampaignRestrictedPeriodsArgsDict',
    'CampaignRestrictedPeriodArgs',
    'CampaignRestrictedPeriodArgsDict',
    'CampaignScheduleArgs',
    'CampaignScheduleArgsDict',
    'CampaignSmsChannelSubtypeConfigArgs',
    'CampaignSmsChannelSubtypeConfigArgsDict',
    'CampaignSmsOutboundConfigArgs',
    'CampaignSmsOutboundConfigArgsDict',
    'CampaignSmsOutboundModeArgs',
    'CampaignSmsOutboundModeArgsDict',
    'CampaignSourceArgs',
    'CampaignSourceArgsDict',
    'CampaignTelephonyChannelSubtypeConfigArgs',
    'CampaignTelephonyChannelSubtypeConfigArgsDict',
    'CampaignTelephonyOutboundConfigArgs',
    'CampaignTelephonyOutboundConfigArgsDict',
    'CampaignTelephonyOutboundModeArgs',
    'CampaignTelephonyOutboundModeArgsDict',
    'CampaignTimeRangeArgs',
    'CampaignTimeRangeArgsDict',
    'CampaignTimeWindowArgs',
    'CampaignTimeWindowArgsDict',
]

MYPY = False

if not MYPY:
    class CampaignAgentlessConfigArgsDict(TypedDict):
        """
        Agentless config
        """
        pass
elif False:
    CampaignAgentlessConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignAgentlessConfigArgs:
    def __init__(__self__):
        """
        Agentless config
        """
        pass


if not MYPY:
    class CampaignAnswerMachineDetectionConfigArgsDict(TypedDict):
        """
        The configuration used for answering machine detection during outbound calls
        """
        enable_answer_machine_detection: pulumi.Input[bool]
        """
        Flag to decided whether outbound calls should have answering machine detection enabled or not
        """
        await_answer_machine_prompt: NotRequired[pulumi.Input[bool]]
        """
        Enables detection of prompts (e.g., beep after after a voicemail greeting)
        """
elif False:
    CampaignAnswerMachineDetectionConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignAnswerMachineDetectionConfigArgs:
    def __init__(__self__, *,
                 enable_answer_machine_detection: pulumi.Input[bool],
                 await_answer_machine_prompt: Optional[pulumi.Input[bool]] = None):
        """
        The configuration used for answering machine detection during outbound calls
        :param pulumi.Input[bool] enable_answer_machine_detection: Flag to decided whether outbound calls should have answering machine detection enabled or not
        :param pulumi.Input[bool] await_answer_machine_prompt: Enables detection of prompts (e.g., beep after after a voicemail greeting)
        """
        pulumi.set(__self__, "enable_answer_machine_detection", enable_answer_machine_detection)
        if await_answer_machine_prompt is not None:
            pulumi.set(__self__, "await_answer_machine_prompt", await_answer_machine_prompt)

    @property
    @pulumi.getter(name="enableAnswerMachineDetection")
    def enable_answer_machine_detection(self) -> pulumi.Input[bool]:
        """
        Flag to decided whether outbound calls should have answering machine detection enabled or not
        """
        return pulumi.get(self, "enable_answer_machine_detection")

    @enable_answer_machine_detection.setter
    def enable_answer_machine_detection(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_answer_machine_detection", value)

    @property
    @pulumi.getter(name="awaitAnswerMachinePrompt")
    def await_answer_machine_prompt(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables detection of prompts (e.g., beep after after a voicemail greeting)
        """
        return pulumi.get(self, "await_answer_machine_prompt")

    @await_answer_machine_prompt.setter
    def await_answer_machine_prompt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "await_answer_machine_prompt", value)


if not MYPY:
    class CampaignChannelSubtypeConfigArgsDict(TypedDict):
        """
        The possible types of channel subtype config parameters
        """
        email: NotRequired[pulumi.Input['CampaignEmailChannelSubtypeConfigArgsDict']]
        """
        The configuration of the email channel subtype.
        """
        sms: NotRequired[pulumi.Input['CampaignSmsChannelSubtypeConfigArgsDict']]
        """
        The configuration of the SMS channel subtype.
        """
        telephony: NotRequired[pulumi.Input['CampaignTelephonyChannelSubtypeConfigArgsDict']]
        """
        The configuration of the telephony channel subtype.
        """
elif False:
    CampaignChannelSubtypeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignChannelSubtypeConfigArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input['CampaignEmailChannelSubtypeConfigArgs']] = None,
                 sms: Optional[pulumi.Input['CampaignSmsChannelSubtypeConfigArgs']] = None,
                 telephony: Optional[pulumi.Input['CampaignTelephonyChannelSubtypeConfigArgs']] = None):
        """
        The possible types of channel subtype config parameters
        :param pulumi.Input['CampaignEmailChannelSubtypeConfigArgs'] email: The configuration of the email channel subtype.
        :param pulumi.Input['CampaignSmsChannelSubtypeConfigArgs'] sms: The configuration of the SMS channel subtype.
        :param pulumi.Input['CampaignTelephonyChannelSubtypeConfigArgs'] telephony: The configuration of the telephony channel subtype.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if telephony is not None:
            pulumi.set(__self__, "telephony", telephony)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input['CampaignEmailChannelSubtypeConfigArgs']]:
        """
        The configuration of the email channel subtype.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input['CampaignEmailChannelSubtypeConfigArgs']]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input['CampaignSmsChannelSubtypeConfigArgs']]:
        """
        The configuration of the SMS channel subtype.
        """
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input['CampaignSmsChannelSubtypeConfigArgs']]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def telephony(self) -> Optional[pulumi.Input['CampaignTelephonyChannelSubtypeConfigArgs']]:
        """
        The configuration of the telephony channel subtype.
        """
        return pulumi.get(self, "telephony")

    @telephony.setter
    def telephony(self, value: Optional[pulumi.Input['CampaignTelephonyChannelSubtypeConfigArgs']]):
        pulumi.set(self, "telephony", value)


if not MYPY:
    class CampaignCommunicationLimitsConfigArgsDict(TypedDict):
        """
        Communication limits config
        """
        all_channels_subtypes: NotRequired[pulumi.Input['CampaignCommunicationLimitsArgsDict']]
        """
        The CommunicationLimits that apply to all channel subtypes defined in an outbound campaign.
        """
elif False:
    CampaignCommunicationLimitsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignCommunicationLimitsConfigArgs:
    def __init__(__self__, *,
                 all_channels_subtypes: Optional[pulumi.Input['CampaignCommunicationLimitsArgs']] = None):
        """
        Communication limits config
        :param pulumi.Input['CampaignCommunicationLimitsArgs'] all_channels_subtypes: The CommunicationLimits that apply to all channel subtypes defined in an outbound campaign.
        """
        if all_channels_subtypes is not None:
            pulumi.set(__self__, "all_channels_subtypes", all_channels_subtypes)

    @property
    @pulumi.getter(name="allChannelsSubtypes")
    def all_channels_subtypes(self) -> Optional[pulumi.Input['CampaignCommunicationLimitsArgs']]:
        """
        The CommunicationLimits that apply to all channel subtypes defined in an outbound campaign.
        """
        return pulumi.get(self, "all_channels_subtypes")

    @all_channels_subtypes.setter
    def all_channels_subtypes(self, value: Optional[pulumi.Input['CampaignCommunicationLimitsArgs']]):
        pulumi.set(self, "all_channels_subtypes", value)


if not MYPY:
    class CampaignCommunicationLimitsArgsDict(TypedDict):
        """
        Communication limits
        """
        communication_limit_list: NotRequired[pulumi.Input[Sequence[pulumi.Input['CampaignCommunicationLimitArgsDict']]]]
        """
        The list of CommunicationLimits.
        """
elif False:
    CampaignCommunicationLimitsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignCommunicationLimitsArgs:
    def __init__(__self__, *,
                 communication_limit_list: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignCommunicationLimitArgs']]]] = None):
        """
        Communication limits
        :param pulumi.Input[Sequence[pulumi.Input['CampaignCommunicationLimitArgs']]] communication_limit_list: The list of CommunicationLimits.
        """
        if communication_limit_list is not None:
            pulumi.set(__self__, "communication_limit_list", communication_limit_list)

    @property
    @pulumi.getter(name="communicationLimitList")
    def communication_limit_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CampaignCommunicationLimitArgs']]]]:
        """
        The list of CommunicationLimits.
        """
        return pulumi.get(self, "communication_limit_list")

    @communication_limit_list.setter
    def communication_limit_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignCommunicationLimitArgs']]]]):
        pulumi.set(self, "communication_limit_list", value)


if not MYPY:
    class CampaignCommunicationLimitArgsDict(TypedDict):
        """
        Communication Limit
        """
        frequency: pulumi.Input[int]
        max_count_per_recipient: pulumi.Input[int]
        unit: pulumi.Input['CampaignCommunicationLimitTimeUnit']
elif False:
    CampaignCommunicationLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignCommunicationLimitArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[int],
                 max_count_per_recipient: pulumi.Input[int],
                 unit: pulumi.Input['CampaignCommunicationLimitTimeUnit']):
        """
        Communication Limit
        """
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "max_count_per_recipient", max_count_per_recipient)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="maxCountPerRecipient")
    def max_count_per_recipient(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_count_per_recipient")

    @max_count_per_recipient.setter
    def max_count_per_recipient(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_count_per_recipient", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input['CampaignCommunicationLimitTimeUnit']:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input['CampaignCommunicationLimitTimeUnit']):
        pulumi.set(self, "unit", value)


if not MYPY:
    class CampaignCommunicationTimeConfigArgsDict(TypedDict):
        """
        Campaign communication time config
        """
        local_time_zone_config: pulumi.Input['CampaignLocalTimeZoneConfigArgsDict']
        """
        The local timezone configuration.
        """
        email: NotRequired[pulumi.Input['CampaignTimeWindowArgsDict']]
        """
        The communication time configuration for the email channel subtype.
        """
        sms: NotRequired[pulumi.Input['CampaignTimeWindowArgsDict']]
        """
        The communication time configuration for the SMS channel subtype.
        """
        telephony: NotRequired[pulumi.Input['CampaignTimeWindowArgsDict']]
        """
        The communication time configuration for the telephony channel subtype.
        """
elif False:
    CampaignCommunicationTimeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignCommunicationTimeConfigArgs:
    def __init__(__self__, *,
                 local_time_zone_config: pulumi.Input['CampaignLocalTimeZoneConfigArgs'],
                 email: Optional[pulumi.Input['CampaignTimeWindowArgs']] = None,
                 sms: Optional[pulumi.Input['CampaignTimeWindowArgs']] = None,
                 telephony: Optional[pulumi.Input['CampaignTimeWindowArgs']] = None):
        """
        Campaign communication time config
        :param pulumi.Input['CampaignLocalTimeZoneConfigArgs'] local_time_zone_config: The local timezone configuration.
        :param pulumi.Input['CampaignTimeWindowArgs'] email: The communication time configuration for the email channel subtype.
        :param pulumi.Input['CampaignTimeWindowArgs'] sms: The communication time configuration for the SMS channel subtype.
        :param pulumi.Input['CampaignTimeWindowArgs'] telephony: The communication time configuration for the telephony channel subtype.
        """
        pulumi.set(__self__, "local_time_zone_config", local_time_zone_config)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if telephony is not None:
            pulumi.set(__self__, "telephony", telephony)

    @property
    @pulumi.getter(name="localTimeZoneConfig")
    def local_time_zone_config(self) -> pulumi.Input['CampaignLocalTimeZoneConfigArgs']:
        """
        The local timezone configuration.
        """
        return pulumi.get(self, "local_time_zone_config")

    @local_time_zone_config.setter
    def local_time_zone_config(self, value: pulumi.Input['CampaignLocalTimeZoneConfigArgs']):
        pulumi.set(self, "local_time_zone_config", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input['CampaignTimeWindowArgs']]:
        """
        The communication time configuration for the email channel subtype.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input['CampaignTimeWindowArgs']]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input['CampaignTimeWindowArgs']]:
        """
        The communication time configuration for the SMS channel subtype.
        """
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input['CampaignTimeWindowArgs']]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def telephony(self) -> Optional[pulumi.Input['CampaignTimeWindowArgs']]:
        """
        The communication time configuration for the telephony channel subtype.
        """
        return pulumi.get(self, "telephony")

    @telephony.setter
    def telephony(self, value: Optional[pulumi.Input['CampaignTimeWindowArgs']]):
        pulumi.set(self, "telephony", value)


if not MYPY:
    class CampaignDailyHourArgsDict(TypedDict):
        """
        Daily Hour
        """
        key: NotRequired[pulumi.Input['CampaignDayOfWeek']]
        value: NotRequired[pulumi.Input[Sequence[pulumi.Input['CampaignTimeRangeArgsDict']]]]
elif False:
    CampaignDailyHourArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignDailyHourArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input['CampaignDayOfWeek']] = None,
                 value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignTimeRangeArgs']]]] = None):
        """
        Daily Hour
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input['CampaignDayOfWeek']]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input['CampaignDayOfWeek']]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CampaignTimeRangeArgs']]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignTimeRangeArgs']]]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class CampaignEmailChannelSubtypeConfigArgsDict(TypedDict):
        """
        Email Channel Subtype config
        """
        default_outbound_config: pulumi.Input['CampaignEmailOutboundConfigArgsDict']
        """
        The default email outbound configuration of an outbound campaign.
        """
        outbound_mode: pulumi.Input['CampaignEmailOutboundModeArgsDict']
        """
        The outbound mode for email of an outbound campaign.
        """
        capacity: NotRequired[pulumi.Input[float]]
        """
        The allocation of email capacity between multiple running outbound campaigns.
        """
elif False:
    CampaignEmailChannelSubtypeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignEmailChannelSubtypeConfigArgs:
    def __init__(__self__, *,
                 default_outbound_config: pulumi.Input['CampaignEmailOutboundConfigArgs'],
                 outbound_mode: pulumi.Input['CampaignEmailOutboundModeArgs'],
                 capacity: Optional[pulumi.Input[float]] = None):
        """
        Email Channel Subtype config
        :param pulumi.Input['CampaignEmailOutboundConfigArgs'] default_outbound_config: The default email outbound configuration of an outbound campaign.
        :param pulumi.Input['CampaignEmailOutboundModeArgs'] outbound_mode: The outbound mode for email of an outbound campaign.
        :param pulumi.Input[float] capacity: The allocation of email capacity between multiple running outbound campaigns.
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> pulumi.Input['CampaignEmailOutboundConfigArgs']:
        """
        The default email outbound configuration of an outbound campaign.
        """
        return pulumi.get(self, "default_outbound_config")

    @default_outbound_config.setter
    def default_outbound_config(self, value: pulumi.Input['CampaignEmailOutboundConfigArgs']):
        pulumi.set(self, "default_outbound_config", value)

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> pulumi.Input['CampaignEmailOutboundModeArgs']:
        """
        The outbound mode for email of an outbound campaign.
        """
        return pulumi.get(self, "outbound_mode")

    @outbound_mode.setter
    def outbound_mode(self, value: pulumi.Input['CampaignEmailOutboundModeArgs']):
        pulumi.set(self, "outbound_mode", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[float]]:
        """
        The allocation of email capacity between multiple running outbound campaigns.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "capacity", value)


if not MYPY:
    class CampaignEmailOutboundConfigArgsDict(TypedDict):
        """
        Default SMS outbound config
        """
        connect_source_email_address: pulumi.Input[str]
        """
        The Amazon Connect source email address.
        """
        wisdom_template_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        """
        source_email_address_display_name: NotRequired[pulumi.Input[str]]
        """
        The display name for the Amazon Connect source email address.
        """
elif False:
    CampaignEmailOutboundConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignEmailOutboundConfigArgs:
    def __init__(__self__, *,
                 connect_source_email_address: pulumi.Input[str],
                 wisdom_template_arn: pulumi.Input[str],
                 source_email_address_display_name: Optional[pulumi.Input[str]] = None):
        """
        Default SMS outbound config
        :param pulumi.Input[str] connect_source_email_address: The Amazon Connect source email address.
        :param pulumi.Input[str] wisdom_template_arn: The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        :param pulumi.Input[str] source_email_address_display_name: The display name for the Amazon Connect source email address.
        """
        pulumi.set(__self__, "connect_source_email_address", connect_source_email_address)
        pulumi.set(__self__, "wisdom_template_arn", wisdom_template_arn)
        if source_email_address_display_name is not None:
            pulumi.set(__self__, "source_email_address_display_name", source_email_address_display_name)

    @property
    @pulumi.getter(name="connectSourceEmailAddress")
    def connect_source_email_address(self) -> pulumi.Input[str]:
        """
        The Amazon Connect source email address.
        """
        return pulumi.get(self, "connect_source_email_address")

    @connect_source_email_address.setter
    def connect_source_email_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "connect_source_email_address", value)

    @property
    @pulumi.getter(name="wisdomTemplateArn")
    def wisdom_template_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        """
        return pulumi.get(self, "wisdom_template_arn")

    @wisdom_template_arn.setter
    def wisdom_template_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "wisdom_template_arn", value)

    @property
    @pulumi.getter(name="sourceEmailAddressDisplayName")
    def source_email_address_display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the Amazon Connect source email address.
        """
        return pulumi.get(self, "source_email_address_display_name")

    @source_email_address_display_name.setter
    def source_email_address_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_email_address_display_name", value)


if not MYPY:
    class CampaignEmailOutboundModeArgsDict(TypedDict):
        """
        Email Outbound Mode
        """
        agentless_config: NotRequired[pulumi.Input['CampaignAgentlessConfigArgsDict']]
        """
        The agentless outbound mode configuration for email.
        """
elif False:
    CampaignEmailOutboundModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignEmailOutboundModeArgs:
    def __init__(__self__, *,
                 agentless_config: Optional[pulumi.Input['CampaignAgentlessConfigArgs']] = None):
        """
        Email Outbound Mode
        :param pulumi.Input['CampaignAgentlessConfigArgs'] agentless_config: The agentless outbound mode configuration for email.
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional[pulumi.Input['CampaignAgentlessConfigArgs']]:
        """
        The agentless outbound mode configuration for email.
        """
        return pulumi.get(self, "agentless_config")

    @agentless_config.setter
    def agentless_config(self, value: Optional[pulumi.Input['CampaignAgentlessConfigArgs']]):
        pulumi.set(self, "agentless_config", value)


if not MYPY:
    class CampaignLocalTimeZoneConfigArgsDict(TypedDict):
        """
        Local time zone config
        """
        default_time_zone: NotRequired[pulumi.Input[str]]
        """
        The timezone to use for all recipients.
        """
        local_time_zone_detection: NotRequired[pulumi.Input[Sequence[pulumi.Input['CampaignLocalTimeZoneDetectionType']]]]
        """
        Detects methods for the recipient's timezone.
        """
elif False:
    CampaignLocalTimeZoneConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignLocalTimeZoneConfigArgs:
    def __init__(__self__, *,
                 default_time_zone: Optional[pulumi.Input[str]] = None,
                 local_time_zone_detection: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignLocalTimeZoneDetectionType']]]] = None):
        """
        Local time zone config
        :param pulumi.Input[str] default_time_zone: The timezone to use for all recipients.
        :param pulumi.Input[Sequence[pulumi.Input['CampaignLocalTimeZoneDetectionType']]] local_time_zone_detection: Detects methods for the recipient's timezone.
        """
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if local_time_zone_detection is not None:
            pulumi.set(__self__, "local_time_zone_detection", local_time_zone_detection)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone to use for all recipients.
        """
        return pulumi.get(self, "default_time_zone")

    @default_time_zone.setter
    def default_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_time_zone", value)

    @property
    @pulumi.getter(name="localTimeZoneDetection")
    def local_time_zone_detection(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CampaignLocalTimeZoneDetectionType']]]]:
        """
        Detects methods for the recipient's timezone.
        """
        return pulumi.get(self, "local_time_zone_detection")

    @local_time_zone_detection.setter
    def local_time_zone_detection(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignLocalTimeZoneDetectionType']]]]):
        pulumi.set(self, "local_time_zone_detection", value)


if not MYPY:
    class CampaignOpenHoursArgsDict(TypedDict):
        """
        Open Hours config
        """
        daily_hours: pulumi.Input[Sequence[pulumi.Input['CampaignDailyHourArgsDict']]]
        """
        The daily hours configuration.
        """
elif False:
    CampaignOpenHoursArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignOpenHoursArgs:
    def __init__(__self__, *,
                 daily_hours: pulumi.Input[Sequence[pulumi.Input['CampaignDailyHourArgs']]]):
        """
        Open Hours config
        :param pulumi.Input[Sequence[pulumi.Input['CampaignDailyHourArgs']]] daily_hours: The daily hours configuration.
        """
        pulumi.set(__self__, "daily_hours", daily_hours)

    @property
    @pulumi.getter(name="dailyHours")
    def daily_hours(self) -> pulumi.Input[Sequence[pulumi.Input['CampaignDailyHourArgs']]]:
        """
        The daily hours configuration.
        """
        return pulumi.get(self, "daily_hours")

    @daily_hours.setter
    def daily_hours(self, value: pulumi.Input[Sequence[pulumi.Input['CampaignDailyHourArgs']]]):
        pulumi.set(self, "daily_hours", value)


if not MYPY:
    class CampaignPredictiveConfigArgsDict(TypedDict):
        """
        Predictive config
        """
        bandwidth_allocation: pulumi.Input[float]
        """
        Bandwidth allocation for the predictive outbound mode.
        """
elif False:
    CampaignPredictiveConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignPredictiveConfigArgs:
    def __init__(__self__, *,
                 bandwidth_allocation: pulumi.Input[float]):
        """
        Predictive config
        :param pulumi.Input[float] bandwidth_allocation: Bandwidth allocation for the predictive outbound mode.
        """
        pulumi.set(__self__, "bandwidth_allocation", bandwidth_allocation)

    @property
    @pulumi.getter(name="bandwidthAllocation")
    def bandwidth_allocation(self) -> pulumi.Input[float]:
        """
        Bandwidth allocation for the predictive outbound mode.
        """
        return pulumi.get(self, "bandwidth_allocation")

    @bandwidth_allocation.setter
    def bandwidth_allocation(self, value: pulumi.Input[float]):
        pulumi.set(self, "bandwidth_allocation", value)


if not MYPY:
    class CampaignProgressiveConfigArgsDict(TypedDict):
        """
        Progressive config
        """
        bandwidth_allocation: pulumi.Input[float]
        """
        Bandwidth allocation for the progressive outbound mode.
        """
elif False:
    CampaignProgressiveConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignProgressiveConfigArgs:
    def __init__(__self__, *,
                 bandwidth_allocation: pulumi.Input[float]):
        """
        Progressive config
        :param pulumi.Input[float] bandwidth_allocation: Bandwidth allocation for the progressive outbound mode.
        """
        pulumi.set(__self__, "bandwidth_allocation", bandwidth_allocation)

    @property
    @pulumi.getter(name="bandwidthAllocation")
    def bandwidth_allocation(self) -> pulumi.Input[float]:
        """
        Bandwidth allocation for the progressive outbound mode.
        """
        return pulumi.get(self, "bandwidth_allocation")

    @bandwidth_allocation.setter
    def bandwidth_allocation(self, value: pulumi.Input[float]):
        pulumi.set(self, "bandwidth_allocation", value)


if not MYPY:
    class CampaignRestrictedPeriodsArgsDict(TypedDict):
        """
        Restricted period config
        """
        restricted_period_list: NotRequired[pulumi.Input[Sequence[pulumi.Input['CampaignRestrictedPeriodArgsDict']]]]
        """
        The restricted period list.
        """
elif False:
    CampaignRestrictedPeriodsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignRestrictedPeriodsArgs:
    def __init__(__self__, *,
                 restricted_period_list: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignRestrictedPeriodArgs']]]] = None):
        """
        Restricted period config
        :param pulumi.Input[Sequence[pulumi.Input['CampaignRestrictedPeriodArgs']]] restricted_period_list: The restricted period list.
        """
        if restricted_period_list is not None:
            pulumi.set(__self__, "restricted_period_list", restricted_period_list)

    @property
    @pulumi.getter(name="restrictedPeriodList")
    def restricted_period_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CampaignRestrictedPeriodArgs']]]]:
        """
        The restricted period list.
        """
        return pulumi.get(self, "restricted_period_list")

    @restricted_period_list.setter
    def restricted_period_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignRestrictedPeriodArgs']]]]):
        pulumi.set(self, "restricted_period_list", value)


if not MYPY:
    class CampaignRestrictedPeriodArgsDict(TypedDict):
        """
        Restricted period
        """
        end_date: pulumi.Input[str]
        start_date: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of a restricted period
        """
elif False:
    CampaignRestrictedPeriodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignRestrictedPeriodArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        Restricted period
        :param pulumi.Input[str] name: The name of a restricted period
        """
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a restricted period
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class CampaignScheduleArgsDict(TypedDict):
        """
        Campaign schedule
        """
        end_time: pulumi.Input[str]
        """
        The end time of the schedule in UTC.
        """
        start_time: pulumi.Input[str]
        """
        The start time of the schedule in UTC.
        """
        refresh_frequency: NotRequired[pulumi.Input[str]]
        """
        The refresh frequency of the campaign.
        """
elif False:
    CampaignScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignScheduleArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 refresh_frequency: Optional[pulumi.Input[str]] = None):
        """
        Campaign schedule
        :param pulumi.Input[str] end_time: The end time of the schedule in UTC.
        :param pulumi.Input[str] start_time: The start time of the schedule in UTC.
        :param pulumi.Input[str] refresh_frequency: The refresh frequency of the campaign.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        if refresh_frequency is not None:
            pulumi.set(__self__, "refresh_frequency", refresh_frequency)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        The end time of the schedule in UTC.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        The start time of the schedule in UTC.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="refreshFrequency")
    def refresh_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh frequency of the campaign.
        """
        return pulumi.get(self, "refresh_frequency")

    @refresh_frequency.setter
    def refresh_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_frequency", value)


if not MYPY:
    class CampaignSmsChannelSubtypeConfigArgsDict(TypedDict):
        """
        SMS Channel Subtype config
        """
        default_outbound_config: pulumi.Input['CampaignSmsOutboundConfigArgsDict']
        """
        The default SMS outbound configuration of an outbound campaign.
        """
        outbound_mode: pulumi.Input['CampaignSmsOutboundModeArgsDict']
        """
        The outbound mode of SMS for an outbound campaign.
        """
        capacity: NotRequired[pulumi.Input[float]]
        """
        The allocation of SMS capacity between multiple running outbound campaigns.
        """
elif False:
    CampaignSmsChannelSubtypeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignSmsChannelSubtypeConfigArgs:
    def __init__(__self__, *,
                 default_outbound_config: pulumi.Input['CampaignSmsOutboundConfigArgs'],
                 outbound_mode: pulumi.Input['CampaignSmsOutboundModeArgs'],
                 capacity: Optional[pulumi.Input[float]] = None):
        """
        SMS Channel Subtype config
        :param pulumi.Input['CampaignSmsOutboundConfigArgs'] default_outbound_config: The default SMS outbound configuration of an outbound campaign.
        :param pulumi.Input['CampaignSmsOutboundModeArgs'] outbound_mode: The outbound mode of SMS for an outbound campaign.
        :param pulumi.Input[float] capacity: The allocation of SMS capacity between multiple running outbound campaigns.
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> pulumi.Input['CampaignSmsOutboundConfigArgs']:
        """
        The default SMS outbound configuration of an outbound campaign.
        """
        return pulumi.get(self, "default_outbound_config")

    @default_outbound_config.setter
    def default_outbound_config(self, value: pulumi.Input['CampaignSmsOutboundConfigArgs']):
        pulumi.set(self, "default_outbound_config", value)

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> pulumi.Input['CampaignSmsOutboundModeArgs']:
        """
        The outbound mode of SMS for an outbound campaign.
        """
        return pulumi.get(self, "outbound_mode")

    @outbound_mode.setter
    def outbound_mode(self, value: pulumi.Input['CampaignSmsOutboundModeArgs']):
        pulumi.set(self, "outbound_mode", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[float]]:
        """
        The allocation of SMS capacity between multiple running outbound campaigns.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "capacity", value)


if not MYPY:
    class CampaignSmsOutboundConfigArgsDict(TypedDict):
        """
        Default SMS outbound config
        """
        connect_source_phone_number_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Amazon Connect source SMS phone number.
        """
        wisdom_template_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        """
elif False:
    CampaignSmsOutboundConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignSmsOutboundConfigArgs:
    def __init__(__self__, *,
                 connect_source_phone_number_arn: pulumi.Input[str],
                 wisdom_template_arn: pulumi.Input[str]):
        """
        Default SMS outbound config
        :param pulumi.Input[str] connect_source_phone_number_arn: The Amazon Resource Name (ARN) of the Amazon Connect source SMS phone number.
        :param pulumi.Input[str] wisdom_template_arn: The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        """
        pulumi.set(__self__, "connect_source_phone_number_arn", connect_source_phone_number_arn)
        pulumi.set(__self__, "wisdom_template_arn", wisdom_template_arn)

    @property
    @pulumi.getter(name="connectSourcePhoneNumberArn")
    def connect_source_phone_number_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Connect source SMS phone number.
        """
        return pulumi.get(self, "connect_source_phone_number_arn")

    @connect_source_phone_number_arn.setter
    def connect_source_phone_number_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "connect_source_phone_number_arn", value)

    @property
    @pulumi.getter(name="wisdomTemplateArn")
    def wisdom_template_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon Q in Connect template.
        """
        return pulumi.get(self, "wisdom_template_arn")

    @wisdom_template_arn.setter
    def wisdom_template_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "wisdom_template_arn", value)


if not MYPY:
    class CampaignSmsOutboundModeArgsDict(TypedDict):
        """
        SMS Outbound Mode
        """
        agentless_config: NotRequired[pulumi.Input['CampaignAgentlessConfigArgsDict']]
        """
        Contains agentless outbound mode configuration.
        """
elif False:
    CampaignSmsOutboundModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignSmsOutboundModeArgs:
    def __init__(__self__, *,
                 agentless_config: Optional[pulumi.Input['CampaignAgentlessConfigArgs']] = None):
        """
        SMS Outbound Mode
        :param pulumi.Input['CampaignAgentlessConfigArgs'] agentless_config: Contains agentless outbound mode configuration.
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional[pulumi.Input['CampaignAgentlessConfigArgs']]:
        """
        Contains agentless outbound mode configuration.
        """
        return pulumi.get(self, "agentless_config")

    @agentless_config.setter
    def agentless_config(self, value: Optional[pulumi.Input['CampaignAgentlessConfigArgs']]):
        pulumi.set(self, "agentless_config", value)


if not MYPY:
    class CampaignSourceArgsDict(TypedDict):
        """
        The possible types of channel config parameters
        """
        customer_profiles_segment_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the Customer Profiles segment.
        """
elif False:
    CampaignSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignSourceArgs:
    def __init__(__self__, *,
                 customer_profiles_segment_arn: Optional[pulumi.Input[str]] = None):
        """
        The possible types of channel config parameters
        :param pulumi.Input[str] customer_profiles_segment_arn: The Amazon Resource Name (ARN) of the Customer Profiles segment.
        """
        if customer_profiles_segment_arn is not None:
            pulumi.set(__self__, "customer_profiles_segment_arn", customer_profiles_segment_arn)

    @property
    @pulumi.getter(name="customerProfilesSegmentArn")
    def customer_profiles_segment_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Customer Profiles segment.
        """
        return pulumi.get(self, "customer_profiles_segment_arn")

    @customer_profiles_segment_arn.setter
    def customer_profiles_segment_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_profiles_segment_arn", value)


if not MYPY:
    class CampaignTelephonyChannelSubtypeConfigArgsDict(TypedDict):
        """
        Telephony Channel Subtype config
        """
        default_outbound_config: pulumi.Input['CampaignTelephonyOutboundConfigArgsDict']
        """
        The default telephony outbound configuration of an outbound campaign.
        """
        outbound_mode: pulumi.Input['CampaignTelephonyOutboundModeArgsDict']
        """
        The outbound mode of telephony for an outbound campaign.
        """
        capacity: NotRequired[pulumi.Input[float]]
        """
        The allocation of telephony capacity between multiple running outbound campaigns.
        """
        connect_queue_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the Amazon Connect queue associated with telephony outbound requests of an outbound campaign.
        """
elif False:
    CampaignTelephonyChannelSubtypeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignTelephonyChannelSubtypeConfigArgs:
    def __init__(__self__, *,
                 default_outbound_config: pulumi.Input['CampaignTelephonyOutboundConfigArgs'],
                 outbound_mode: pulumi.Input['CampaignTelephonyOutboundModeArgs'],
                 capacity: Optional[pulumi.Input[float]] = None,
                 connect_queue_id: Optional[pulumi.Input[str]] = None):
        """
        Telephony Channel Subtype config
        :param pulumi.Input['CampaignTelephonyOutboundConfigArgs'] default_outbound_config: The default telephony outbound configuration of an outbound campaign.
        :param pulumi.Input['CampaignTelephonyOutboundModeArgs'] outbound_mode: The outbound mode of telephony for an outbound campaign.
        :param pulumi.Input[float] capacity: The allocation of telephony capacity between multiple running outbound campaigns.
        :param pulumi.Input[str] connect_queue_id: The identifier of the Amazon Connect queue associated with telephony outbound requests of an outbound campaign.
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if connect_queue_id is not None:
            pulumi.set(__self__, "connect_queue_id", connect_queue_id)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> pulumi.Input['CampaignTelephonyOutboundConfigArgs']:
        """
        The default telephony outbound configuration of an outbound campaign.
        """
        return pulumi.get(self, "default_outbound_config")

    @default_outbound_config.setter
    def default_outbound_config(self, value: pulumi.Input['CampaignTelephonyOutboundConfigArgs']):
        pulumi.set(self, "default_outbound_config", value)

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> pulumi.Input['CampaignTelephonyOutboundModeArgs']:
        """
        The outbound mode of telephony for an outbound campaign.
        """
        return pulumi.get(self, "outbound_mode")

    @outbound_mode.setter
    def outbound_mode(self, value: pulumi.Input['CampaignTelephonyOutboundModeArgs']):
        pulumi.set(self, "outbound_mode", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[float]]:
        """
        The allocation of telephony capacity between multiple running outbound campaigns.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="connectQueueId")
    def connect_queue_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the Amazon Connect queue associated with telephony outbound requests of an outbound campaign.
        """
        return pulumi.get(self, "connect_queue_id")

    @connect_queue_id.setter
    def connect_queue_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_queue_id", value)


if not MYPY:
    class CampaignTelephonyOutboundConfigArgsDict(TypedDict):
        """
        Default Telephone Outbound config
        """
        connect_contact_flow_id: pulumi.Input[str]
        """
        The identifier of the published Amazon Connect contact flow.
        """
        answer_machine_detection_config: NotRequired[pulumi.Input['CampaignAnswerMachineDetectionConfigArgsDict']]
        """
        The answering machine detection configuration.
        """
        connect_source_phone_number: NotRequired[pulumi.Input[str]]
        """
        The Amazon Connect source phone number.
        """
elif False:
    CampaignTelephonyOutboundConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignTelephonyOutboundConfigArgs:
    def __init__(__self__, *,
                 connect_contact_flow_id: pulumi.Input[str],
                 answer_machine_detection_config: Optional[pulumi.Input['CampaignAnswerMachineDetectionConfigArgs']] = None,
                 connect_source_phone_number: Optional[pulumi.Input[str]] = None):
        """
        Default Telephone Outbound config
        :param pulumi.Input[str] connect_contact_flow_id: The identifier of the published Amazon Connect contact flow.
        :param pulumi.Input['CampaignAnswerMachineDetectionConfigArgs'] answer_machine_detection_config: The answering machine detection configuration.
        :param pulumi.Input[str] connect_source_phone_number: The Amazon Connect source phone number.
        """
        pulumi.set(__self__, "connect_contact_flow_id", connect_contact_flow_id)
        if answer_machine_detection_config is not None:
            pulumi.set(__self__, "answer_machine_detection_config", answer_machine_detection_config)
        if connect_source_phone_number is not None:
            pulumi.set(__self__, "connect_source_phone_number", connect_source_phone_number)

    @property
    @pulumi.getter(name="connectContactFlowId")
    def connect_contact_flow_id(self) -> pulumi.Input[str]:
        """
        The identifier of the published Amazon Connect contact flow.
        """
        return pulumi.get(self, "connect_contact_flow_id")

    @connect_contact_flow_id.setter
    def connect_contact_flow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "connect_contact_flow_id", value)

    @property
    @pulumi.getter(name="answerMachineDetectionConfig")
    def answer_machine_detection_config(self) -> Optional[pulumi.Input['CampaignAnswerMachineDetectionConfigArgs']]:
        """
        The answering machine detection configuration.
        """
        return pulumi.get(self, "answer_machine_detection_config")

    @answer_machine_detection_config.setter
    def answer_machine_detection_config(self, value: Optional[pulumi.Input['CampaignAnswerMachineDetectionConfigArgs']]):
        pulumi.set(self, "answer_machine_detection_config", value)

    @property
    @pulumi.getter(name="connectSourcePhoneNumber")
    def connect_source_phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Connect source phone number.
        """
        return pulumi.get(self, "connect_source_phone_number")

    @connect_source_phone_number.setter
    def connect_source_phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_source_phone_number", value)


if not MYPY:
    class CampaignTelephonyOutboundModeArgsDict(TypedDict):
        """
        Telephony Outbound Mode
        """
        agentless_config: NotRequired[pulumi.Input['CampaignAgentlessConfigArgsDict']]
        """
        The agentless outbound mode configuration for telephony.
        """
        predictive_config: NotRequired[pulumi.Input['CampaignPredictiveConfigArgsDict']]
        """
        Contains predictive outbound mode configuration.
        """
        progressive_config: NotRequired[pulumi.Input['CampaignProgressiveConfigArgsDict']]
        """
        Contains progressive telephony outbound mode configuration.
        """
elif False:
    CampaignTelephonyOutboundModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignTelephonyOutboundModeArgs:
    def __init__(__self__, *,
                 agentless_config: Optional[pulumi.Input['CampaignAgentlessConfigArgs']] = None,
                 predictive_config: Optional[pulumi.Input['CampaignPredictiveConfigArgs']] = None,
                 progressive_config: Optional[pulumi.Input['CampaignProgressiveConfigArgs']] = None):
        """
        Telephony Outbound Mode
        :param pulumi.Input['CampaignAgentlessConfigArgs'] agentless_config: The agentless outbound mode configuration for telephony.
        :param pulumi.Input['CampaignPredictiveConfigArgs'] predictive_config: Contains predictive outbound mode configuration.
        :param pulumi.Input['CampaignProgressiveConfigArgs'] progressive_config: Contains progressive telephony outbound mode configuration.
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)
        if predictive_config is not None:
            pulumi.set(__self__, "predictive_config", predictive_config)
        if progressive_config is not None:
            pulumi.set(__self__, "progressive_config", progressive_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional[pulumi.Input['CampaignAgentlessConfigArgs']]:
        """
        The agentless outbound mode configuration for telephony.
        """
        return pulumi.get(self, "agentless_config")

    @agentless_config.setter
    def agentless_config(self, value: Optional[pulumi.Input['CampaignAgentlessConfigArgs']]):
        pulumi.set(self, "agentless_config", value)

    @property
    @pulumi.getter(name="predictiveConfig")
    def predictive_config(self) -> Optional[pulumi.Input['CampaignPredictiveConfigArgs']]:
        """
        Contains predictive outbound mode configuration.
        """
        return pulumi.get(self, "predictive_config")

    @predictive_config.setter
    def predictive_config(self, value: Optional[pulumi.Input['CampaignPredictiveConfigArgs']]):
        pulumi.set(self, "predictive_config", value)

    @property
    @pulumi.getter(name="progressiveConfig")
    def progressive_config(self) -> Optional[pulumi.Input['CampaignProgressiveConfigArgs']]:
        """
        Contains progressive telephony outbound mode configuration.
        """
        return pulumi.get(self, "progressive_config")

    @progressive_config.setter
    def progressive_config(self, value: Optional[pulumi.Input['CampaignProgressiveConfigArgs']]):
        pulumi.set(self, "progressive_config", value)


if not MYPY:
    class CampaignTimeRangeArgsDict(TypedDict):
        """
        Time range in 24 hour format
        """
        end_time: pulumi.Input[str]
        start_time: pulumi.Input[str]
elif False:
    CampaignTimeRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignTimeRangeArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        """
        Time range in 24 hour format
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class CampaignTimeWindowArgsDict(TypedDict):
        """
        Time window config
        """
        open_hours: pulumi.Input['CampaignOpenHoursArgsDict']
        """
        The open hours configuration.
        """
        restricted_periods: NotRequired[pulumi.Input['CampaignRestrictedPeriodsArgsDict']]
        """
        The restricted periods configuration.
        """
elif False:
    CampaignTimeWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CampaignTimeWindowArgs:
    def __init__(__self__, *,
                 open_hours: pulumi.Input['CampaignOpenHoursArgs'],
                 restricted_periods: Optional[pulumi.Input['CampaignRestrictedPeriodsArgs']] = None):
        """
        Time window config
        :param pulumi.Input['CampaignOpenHoursArgs'] open_hours: The open hours configuration.
        :param pulumi.Input['CampaignRestrictedPeriodsArgs'] restricted_periods: The restricted periods configuration.
        """
        pulumi.set(__self__, "open_hours", open_hours)
        if restricted_periods is not None:
            pulumi.set(__self__, "restricted_periods", restricted_periods)

    @property
    @pulumi.getter(name="openHours")
    def open_hours(self) -> pulumi.Input['CampaignOpenHoursArgs']:
        """
        The open hours configuration.
        """
        return pulumi.get(self, "open_hours")

    @open_hours.setter
    def open_hours(self, value: pulumi.Input['CampaignOpenHoursArgs']):
        pulumi.set(self, "open_hours", value)

    @property
    @pulumi.getter(name="restrictedPeriods")
    def restricted_periods(self) -> Optional[pulumi.Input['CampaignRestrictedPeriodsArgs']]:
        """
        The restricted periods configuration.
        """
        return pulumi.get(self, "restricted_periods")

    @restricted_periods.setter
    def restricted_periods(self, value: Optional[pulumi.Input['CampaignRestrictedPeriodsArgs']]):
        pulumi.set(self, "restricted_periods", value)


