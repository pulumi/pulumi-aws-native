# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CampaignAgentlessConfig',
    'CampaignAnswerMachineDetectionConfig',
    'CampaignChannelSubtypeConfig',
    'CampaignCommunicationLimit',
    'CampaignCommunicationLimits',
    'CampaignCommunicationLimitsConfig',
    'CampaignCommunicationTimeConfig',
    'CampaignDailyHour',
    'CampaignEmailChannelSubtypeConfig',
    'CampaignEmailOutboundConfig',
    'CampaignEmailOutboundMode',
    'CampaignLocalTimeZoneConfig',
    'CampaignOpenHours',
    'CampaignPredictiveConfig',
    'CampaignProgressiveConfig',
    'CampaignRestrictedPeriod',
    'CampaignRestrictedPeriods',
    'CampaignSchedule',
    'CampaignSmsChannelSubtypeConfig',
    'CampaignSmsOutboundConfig',
    'CampaignSmsOutboundMode',
    'CampaignSource',
    'CampaignTelephonyChannelSubtypeConfig',
    'CampaignTelephonyOutboundConfig',
    'CampaignTelephonyOutboundMode',
    'CampaignTimeRange',
    'CampaignTimeWindow',
]

@pulumi.output_type
class CampaignAgentlessConfig(dict):
    """
    Agentless config
    """
    def __init__(__self__):
        """
        Agentless config
        """
        pass


@pulumi.output_type
class CampaignAnswerMachineDetectionConfig(dict):
    """
    The configuration used for answering machine detection during outbound calls
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAnswerMachineDetection":
            suggest = "enable_answer_machine_detection"
        elif key == "awaitAnswerMachinePrompt":
            suggest = "await_answer_machine_prompt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignAnswerMachineDetectionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignAnswerMachineDetectionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignAnswerMachineDetectionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_answer_machine_detection: bool,
                 await_answer_machine_prompt: Optional[bool] = None):
        """
        The configuration used for answering machine detection during outbound calls
        :param bool enable_answer_machine_detection: Flag to decided whether outbound calls should have answering machine detection enabled or not
        :param bool await_answer_machine_prompt: Enables detection of prompts (e.g., beep after after a voicemail greeting)
        """
        pulumi.set(__self__, "enable_answer_machine_detection", enable_answer_machine_detection)
        if await_answer_machine_prompt is not None:
            pulumi.set(__self__, "await_answer_machine_prompt", await_answer_machine_prompt)

    @property
    @pulumi.getter(name="enableAnswerMachineDetection")
    def enable_answer_machine_detection(self) -> bool:
        """
        Flag to decided whether outbound calls should have answering machine detection enabled or not
        """
        return pulumi.get(self, "enable_answer_machine_detection")

    @property
    @pulumi.getter(name="awaitAnswerMachinePrompt")
    def await_answer_machine_prompt(self) -> Optional[bool]:
        """
        Enables detection of prompts (e.g., beep after after a voicemail greeting)
        """
        return pulumi.get(self, "await_answer_machine_prompt")


@pulumi.output_type
class CampaignChannelSubtypeConfig(dict):
    """
    The possible types of channel subtype config parameters
    """
    def __init__(__self__, *,
                 email: Optional['outputs.CampaignEmailChannelSubtypeConfig'] = None,
                 sms: Optional['outputs.CampaignSmsChannelSubtypeConfig'] = None,
                 telephony: Optional['outputs.CampaignTelephonyChannelSubtypeConfig'] = None):
        """
        The possible types of channel subtype config parameters
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if telephony is not None:
            pulumi.set(__self__, "telephony", telephony)

    @property
    @pulumi.getter
    def email(self) -> Optional['outputs.CampaignEmailChannelSubtypeConfig']:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def sms(self) -> Optional['outputs.CampaignSmsChannelSubtypeConfig']:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def telephony(self) -> Optional['outputs.CampaignTelephonyChannelSubtypeConfig']:
        return pulumi.get(self, "telephony")


@pulumi.output_type
class CampaignCommunicationLimit(dict):
    """
    Communication Limit
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCountPerRecipient":
            suggest = "max_count_per_recipient"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignCommunicationLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignCommunicationLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignCommunicationLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency: int,
                 max_count_per_recipient: int,
                 unit: 'CampaignCommunicationLimitTimeUnit'):
        """
        Communication Limit
        """
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "max_count_per_recipient", max_count_per_recipient)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="maxCountPerRecipient")
    def max_count_per_recipient(self) -> int:
        return pulumi.get(self, "max_count_per_recipient")

    @property
    @pulumi.getter
    def unit(self) -> 'CampaignCommunicationLimitTimeUnit':
        return pulumi.get(self, "unit")


@pulumi.output_type
class CampaignCommunicationLimits(dict):
    """
    Communication limits
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communicationLimitList":
            suggest = "communication_limit_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignCommunicationLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignCommunicationLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignCommunicationLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 communication_limit_list: Optional[Sequence['outputs.CampaignCommunicationLimit']] = None):
        """
        Communication limits
        """
        if communication_limit_list is not None:
            pulumi.set(__self__, "communication_limit_list", communication_limit_list)

    @property
    @pulumi.getter(name="communicationLimitList")
    def communication_limit_list(self) -> Optional[Sequence['outputs.CampaignCommunicationLimit']]:
        return pulumi.get(self, "communication_limit_list")


@pulumi.output_type
class CampaignCommunicationLimitsConfig(dict):
    """
    Communication limits config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allChannelsSubtypes":
            suggest = "all_channels_subtypes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignCommunicationLimitsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignCommunicationLimitsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignCommunicationLimitsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_channels_subtypes: Optional['outputs.CampaignCommunicationLimits'] = None):
        """
        Communication limits config
        """
        if all_channels_subtypes is not None:
            pulumi.set(__self__, "all_channels_subtypes", all_channels_subtypes)

    @property
    @pulumi.getter(name="allChannelsSubtypes")
    def all_channels_subtypes(self) -> Optional['outputs.CampaignCommunicationLimits']:
        return pulumi.get(self, "all_channels_subtypes")


@pulumi.output_type
class CampaignCommunicationTimeConfig(dict):
    """
    Campaign communication time config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localTimeZoneConfig":
            suggest = "local_time_zone_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignCommunicationTimeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignCommunicationTimeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignCommunicationTimeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_time_zone_config: 'outputs.CampaignLocalTimeZoneConfig',
                 email: Optional['outputs.CampaignTimeWindow'] = None,
                 sms: Optional['outputs.CampaignTimeWindow'] = None,
                 telephony: Optional['outputs.CampaignTimeWindow'] = None):
        """
        Campaign communication time config
        """
        pulumi.set(__self__, "local_time_zone_config", local_time_zone_config)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if telephony is not None:
            pulumi.set(__self__, "telephony", telephony)

    @property
    @pulumi.getter(name="localTimeZoneConfig")
    def local_time_zone_config(self) -> 'outputs.CampaignLocalTimeZoneConfig':
        return pulumi.get(self, "local_time_zone_config")

    @property
    @pulumi.getter
    def email(self) -> Optional['outputs.CampaignTimeWindow']:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def sms(self) -> Optional['outputs.CampaignTimeWindow']:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def telephony(self) -> Optional['outputs.CampaignTimeWindow']:
        return pulumi.get(self, "telephony")


@pulumi.output_type
class CampaignDailyHour(dict):
    """
    Daily Hour
    """
    def __init__(__self__, *,
                 key: Optional['CampaignDayOfWeek'] = None,
                 value: Optional[Sequence['outputs.CampaignTimeRange']] = None):
        """
        Daily Hour
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional['CampaignDayOfWeek']:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[Sequence['outputs.CampaignTimeRange']]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CampaignEmailChannelSubtypeConfig(dict):
    """
    Email Channel Subtype config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultOutboundConfig":
            suggest = "default_outbound_config"
        elif key == "outboundMode":
            suggest = "outbound_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEmailChannelSubtypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEmailChannelSubtypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEmailChannelSubtypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_outbound_config: 'outputs.CampaignEmailOutboundConfig',
                 outbound_mode: 'outputs.CampaignEmailOutboundMode',
                 capacity: Optional[float] = None):
        """
        Email Channel Subtype config
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> 'outputs.CampaignEmailOutboundConfig':
        return pulumi.get(self, "default_outbound_config")

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> 'outputs.CampaignEmailOutboundMode':
        return pulumi.get(self, "outbound_mode")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CampaignEmailOutboundConfig(dict):
    """
    Default SMS outbound config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectSourceEmailAddress":
            suggest = "connect_source_email_address"
        elif key == "wisdomTemplateArn":
            suggest = "wisdom_template_arn"
        elif key == "sourceEmailAddressDisplayName":
            suggest = "source_email_address_display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEmailOutboundConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEmailOutboundConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEmailOutboundConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_source_email_address: str,
                 wisdom_template_arn: str,
                 source_email_address_display_name: Optional[str] = None):
        """
        Default SMS outbound config
        """
        pulumi.set(__self__, "connect_source_email_address", connect_source_email_address)
        pulumi.set(__self__, "wisdom_template_arn", wisdom_template_arn)
        if source_email_address_display_name is not None:
            pulumi.set(__self__, "source_email_address_display_name", source_email_address_display_name)

    @property
    @pulumi.getter(name="connectSourceEmailAddress")
    def connect_source_email_address(self) -> str:
        return pulumi.get(self, "connect_source_email_address")

    @property
    @pulumi.getter(name="wisdomTemplateArn")
    def wisdom_template_arn(self) -> str:
        return pulumi.get(self, "wisdom_template_arn")

    @property
    @pulumi.getter(name="sourceEmailAddressDisplayName")
    def source_email_address_display_name(self) -> Optional[str]:
        return pulumi.get(self, "source_email_address_display_name")


@pulumi.output_type
class CampaignEmailOutboundMode(dict):
    """
    Email Outbound Mode
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentlessConfig":
            suggest = "agentless_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEmailOutboundMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEmailOutboundMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEmailOutboundMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agentless_config: Optional['outputs.CampaignAgentlessConfig'] = None):
        """
        Email Outbound Mode
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional['outputs.CampaignAgentlessConfig']:
        return pulumi.get(self, "agentless_config")


@pulumi.output_type
class CampaignLocalTimeZoneConfig(dict):
    """
    Local time zone config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultTimeZone":
            suggest = "default_time_zone"
        elif key == "localTimeZoneDetection":
            suggest = "local_time_zone_detection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignLocalTimeZoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignLocalTimeZoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignLocalTimeZoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_time_zone: Optional[str] = None,
                 local_time_zone_detection: Optional[Sequence['CampaignLocalTimeZoneDetectionType']] = None):
        """
        Local time zone config
        """
        if default_time_zone is not None:
            pulumi.set(__self__, "default_time_zone", default_time_zone)
        if local_time_zone_detection is not None:
            pulumi.set(__self__, "local_time_zone_detection", local_time_zone_detection)

    @property
    @pulumi.getter(name="defaultTimeZone")
    def default_time_zone(self) -> Optional[str]:
        return pulumi.get(self, "default_time_zone")

    @property
    @pulumi.getter(name="localTimeZoneDetection")
    def local_time_zone_detection(self) -> Optional[Sequence['CampaignLocalTimeZoneDetectionType']]:
        return pulumi.get(self, "local_time_zone_detection")


@pulumi.output_type
class CampaignOpenHours(dict):
    """
    Open Hours config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dailyHours":
            suggest = "daily_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignOpenHours. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignOpenHours.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignOpenHours.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily_hours: Sequence['outputs.CampaignDailyHour']):
        """
        Open Hours config
        """
        pulumi.set(__self__, "daily_hours", daily_hours)

    @property
    @pulumi.getter(name="dailyHours")
    def daily_hours(self) -> Sequence['outputs.CampaignDailyHour']:
        return pulumi.get(self, "daily_hours")


@pulumi.output_type
class CampaignPredictiveConfig(dict):
    """
    Predictive config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthAllocation":
            suggest = "bandwidth_allocation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignPredictiveConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignPredictiveConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignPredictiveConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_allocation: float):
        """
        Predictive config
        """
        pulumi.set(__self__, "bandwidth_allocation", bandwidth_allocation)

    @property
    @pulumi.getter(name="bandwidthAllocation")
    def bandwidth_allocation(self) -> float:
        return pulumi.get(self, "bandwidth_allocation")


@pulumi.output_type
class CampaignProgressiveConfig(dict):
    """
    Progressive config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthAllocation":
            suggest = "bandwidth_allocation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignProgressiveConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignProgressiveConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignProgressiveConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_allocation: float):
        """
        Progressive config
        """
        pulumi.set(__self__, "bandwidth_allocation", bandwidth_allocation)

    @property
    @pulumi.getter(name="bandwidthAllocation")
    def bandwidth_allocation(self) -> float:
        return pulumi.get(self, "bandwidth_allocation")


@pulumi.output_type
class CampaignRestrictedPeriod(dict):
    """
    Restricted period
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignRestrictedPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignRestrictedPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignRestrictedPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date: str,
                 start_date: str,
                 name: Optional[str] = None):
        """
        Restricted period
        :param str name: The name of a restricted period
        """
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of a restricted period
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CampaignRestrictedPeriods(dict):
    """
    Restricted period config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restrictedPeriodList":
            suggest = "restricted_period_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignRestrictedPeriods. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignRestrictedPeriods.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignRestrictedPeriods.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 restricted_period_list: Optional[Sequence['outputs.CampaignRestrictedPeriod']] = None):
        """
        Restricted period config
        """
        if restricted_period_list is not None:
            pulumi.set(__self__, "restricted_period_list", restricted_period_list)

    @property
    @pulumi.getter(name="restrictedPeriodList")
    def restricted_period_list(self) -> Optional[Sequence['outputs.CampaignRestrictedPeriod']]:
        return pulumi.get(self, "restricted_period_list")


@pulumi.output_type
class CampaignSchedule(dict):
    """
    Campaign schedule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "refreshFrequency":
            suggest = "refresh_frequency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str,
                 refresh_frequency: Optional[str] = None):
        """
        Campaign schedule
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        if refresh_frequency is not None:
            pulumi.set(__self__, "refresh_frequency", refresh_frequency)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="refreshFrequency")
    def refresh_frequency(self) -> Optional[str]:
        return pulumi.get(self, "refresh_frequency")


@pulumi.output_type
class CampaignSmsChannelSubtypeConfig(dict):
    """
    SMS Channel Subtype config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultOutboundConfig":
            suggest = "default_outbound_config"
        elif key == "outboundMode":
            suggest = "outbound_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSmsChannelSubtypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSmsChannelSubtypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSmsChannelSubtypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_outbound_config: 'outputs.CampaignSmsOutboundConfig',
                 outbound_mode: 'outputs.CampaignSmsOutboundMode',
                 capacity: Optional[float] = None):
        """
        SMS Channel Subtype config
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> 'outputs.CampaignSmsOutboundConfig':
        return pulumi.get(self, "default_outbound_config")

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> 'outputs.CampaignSmsOutboundMode':
        return pulumi.get(self, "outbound_mode")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CampaignSmsOutboundConfig(dict):
    """
    Default SMS outbound config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectSourcePhoneNumberArn":
            suggest = "connect_source_phone_number_arn"
        elif key == "wisdomTemplateArn":
            suggest = "wisdom_template_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSmsOutboundConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSmsOutboundConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSmsOutboundConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_source_phone_number_arn: str,
                 wisdom_template_arn: str):
        """
        Default SMS outbound config
        """
        pulumi.set(__self__, "connect_source_phone_number_arn", connect_source_phone_number_arn)
        pulumi.set(__self__, "wisdom_template_arn", wisdom_template_arn)

    @property
    @pulumi.getter(name="connectSourcePhoneNumberArn")
    def connect_source_phone_number_arn(self) -> str:
        return pulumi.get(self, "connect_source_phone_number_arn")

    @property
    @pulumi.getter(name="wisdomTemplateArn")
    def wisdom_template_arn(self) -> str:
        return pulumi.get(self, "wisdom_template_arn")


@pulumi.output_type
class CampaignSmsOutboundMode(dict):
    """
    SMS Outbound Mode
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentlessConfig":
            suggest = "agentless_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSmsOutboundMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSmsOutboundMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSmsOutboundMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agentless_config: Optional['outputs.CampaignAgentlessConfig'] = None):
        """
        SMS Outbound Mode
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional['outputs.CampaignAgentlessConfig']:
        return pulumi.get(self, "agentless_config")


@pulumi.output_type
class CampaignSource(dict):
    """
    The possible types of channel config parameters
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerProfilesSegmentArn":
            suggest = "customer_profiles_segment_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_profiles_segment_arn: Optional[str] = None):
        """
        The possible types of channel config parameters
        """
        if customer_profiles_segment_arn is not None:
            pulumi.set(__self__, "customer_profiles_segment_arn", customer_profiles_segment_arn)

    @property
    @pulumi.getter(name="customerProfilesSegmentArn")
    def customer_profiles_segment_arn(self) -> Optional[str]:
        return pulumi.get(self, "customer_profiles_segment_arn")


@pulumi.output_type
class CampaignTelephonyChannelSubtypeConfig(dict):
    """
    Telephony Channel Subtype config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultOutboundConfig":
            suggest = "default_outbound_config"
        elif key == "outboundMode":
            suggest = "outbound_mode"
        elif key == "connectQueueId":
            suggest = "connect_queue_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTelephonyChannelSubtypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTelephonyChannelSubtypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTelephonyChannelSubtypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_outbound_config: 'outputs.CampaignTelephonyOutboundConfig',
                 outbound_mode: 'outputs.CampaignTelephonyOutboundMode',
                 capacity: Optional[float] = None,
                 connect_queue_id: Optional[str] = None):
        """
        Telephony Channel Subtype config
        """
        pulumi.set(__self__, "default_outbound_config", default_outbound_config)
        pulumi.set(__self__, "outbound_mode", outbound_mode)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if connect_queue_id is not None:
            pulumi.set(__self__, "connect_queue_id", connect_queue_id)

    @property
    @pulumi.getter(name="defaultOutboundConfig")
    def default_outbound_config(self) -> 'outputs.CampaignTelephonyOutboundConfig':
        return pulumi.get(self, "default_outbound_config")

    @property
    @pulumi.getter(name="outboundMode")
    def outbound_mode(self) -> 'outputs.CampaignTelephonyOutboundMode':
        return pulumi.get(self, "outbound_mode")

    @property
    @pulumi.getter
    def capacity(self) -> Optional[float]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="connectQueueId")
    def connect_queue_id(self) -> Optional[str]:
        return pulumi.get(self, "connect_queue_id")


@pulumi.output_type
class CampaignTelephonyOutboundConfig(dict):
    """
    Default Telephone Outbound config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectContactFlowId":
            suggest = "connect_contact_flow_id"
        elif key == "answerMachineDetectionConfig":
            suggest = "answer_machine_detection_config"
        elif key == "connectSourcePhoneNumber":
            suggest = "connect_source_phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTelephonyOutboundConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTelephonyOutboundConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTelephonyOutboundConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_contact_flow_id: str,
                 answer_machine_detection_config: Optional['outputs.CampaignAnswerMachineDetectionConfig'] = None,
                 connect_source_phone_number: Optional[str] = None):
        """
        Default Telephone Outbound config
        """
        pulumi.set(__self__, "connect_contact_flow_id", connect_contact_flow_id)
        if answer_machine_detection_config is not None:
            pulumi.set(__self__, "answer_machine_detection_config", answer_machine_detection_config)
        if connect_source_phone_number is not None:
            pulumi.set(__self__, "connect_source_phone_number", connect_source_phone_number)

    @property
    @pulumi.getter(name="connectContactFlowId")
    def connect_contact_flow_id(self) -> str:
        return pulumi.get(self, "connect_contact_flow_id")

    @property
    @pulumi.getter(name="answerMachineDetectionConfig")
    def answer_machine_detection_config(self) -> Optional['outputs.CampaignAnswerMachineDetectionConfig']:
        return pulumi.get(self, "answer_machine_detection_config")

    @property
    @pulumi.getter(name="connectSourcePhoneNumber")
    def connect_source_phone_number(self) -> Optional[str]:
        return pulumi.get(self, "connect_source_phone_number")


@pulumi.output_type
class CampaignTelephonyOutboundMode(dict):
    """
    Telephony Outbound Mode
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentlessConfig":
            suggest = "agentless_config"
        elif key == "predictiveConfig":
            suggest = "predictive_config"
        elif key == "progressiveConfig":
            suggest = "progressive_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTelephonyOutboundMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTelephonyOutboundMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTelephonyOutboundMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agentless_config: Optional['outputs.CampaignAgentlessConfig'] = None,
                 predictive_config: Optional['outputs.CampaignPredictiveConfig'] = None,
                 progressive_config: Optional['outputs.CampaignProgressiveConfig'] = None):
        """
        Telephony Outbound Mode
        """
        if agentless_config is not None:
            pulumi.set(__self__, "agentless_config", agentless_config)
        if predictive_config is not None:
            pulumi.set(__self__, "predictive_config", predictive_config)
        if progressive_config is not None:
            pulumi.set(__self__, "progressive_config", progressive_config)

    @property
    @pulumi.getter(name="agentlessConfig")
    def agentless_config(self) -> Optional['outputs.CampaignAgentlessConfig']:
        return pulumi.get(self, "agentless_config")

    @property
    @pulumi.getter(name="predictiveConfig")
    def predictive_config(self) -> Optional['outputs.CampaignPredictiveConfig']:
        return pulumi.get(self, "predictive_config")

    @property
    @pulumi.getter(name="progressiveConfig")
    def progressive_config(self) -> Optional['outputs.CampaignProgressiveConfig']:
        return pulumi.get(self, "progressive_config")


@pulumi.output_type
class CampaignTimeRange(dict):
    """
    Time range in 24 hour format
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        Time range in 24 hour format
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CampaignTimeWindow(dict):
    """
    Time window config
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "openHours":
            suggest = "open_hours"
        elif key == "restrictedPeriods":
            suggest = "restricted_periods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTimeWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTimeWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTimeWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 open_hours: 'outputs.CampaignOpenHours',
                 restricted_periods: Optional['outputs.CampaignRestrictedPeriods'] = None):
        """
        Time window config
        """
        pulumi.set(__self__, "open_hours", open_hours)
        if restricted_periods is not None:
            pulumi.set(__self__, "restricted_periods", restricted_periods)

    @property
    @pulumi.getter(name="openHours")
    def open_hours(self) -> 'outputs.CampaignOpenHours':
        return pulumi.get(self, "open_hours")

    @property
    @pulumi.getter(name="restrictedPeriods")
    def restricted_periods(self) -> Optional['outputs.CampaignRestrictedPeriods']:
        return pulumi.get(self, "restricted_periods")


