# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BrowserSettingsArgs', 'BrowserSettings']

@pulumi.input_type
class BrowserSettingsArgs:
    def __init__(__self__, *,
                 additional_encryption_context: Optional[pulumi.Input['BrowserSettingsEncryptionContextMapArgs']] = None,
                 browser_policy: Optional[pulumi.Input[str]] = None,
                 customer_managed_key: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserSettingsTagArgs']]]] = None):
        """
        The set of arguments for constructing a BrowserSettings resource.
        """
        if additional_encryption_context is not None:
            pulumi.set(__self__, "additional_encryption_context", additional_encryption_context)
        if browser_policy is not None:
            pulumi.set(__self__, "browser_policy", browser_policy)
        if customer_managed_key is not None:
            pulumi.set(__self__, "customer_managed_key", customer_managed_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="additionalEncryptionContext")
    def additional_encryption_context(self) -> Optional[pulumi.Input['BrowserSettingsEncryptionContextMapArgs']]:
        return pulumi.get(self, "additional_encryption_context")

    @additional_encryption_context.setter
    def additional_encryption_context(self, value: Optional[pulumi.Input['BrowserSettingsEncryptionContextMapArgs']]):
        pulumi.set(self, "additional_encryption_context", value)

    @property
    @pulumi.getter(name="browserPolicy")
    def browser_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "browser_policy")

    @browser_policy.setter
    def browser_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_policy", value)

    @property
    @pulumi.getter(name="customerManagedKey")
    def customer_managed_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_managed_key")

    @customer_managed_key.setter
    def customer_managed_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_managed_key", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserSettingsTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserSettingsTagArgs']]]]):
        pulumi.set(self, "tags", value)


class BrowserSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_encryption_context: Optional[pulumi.Input[pulumi.InputType['BrowserSettingsEncryptionContextMapArgs']]] = None,
                 browser_policy: Optional[pulumi.Input[str]] = None,
                 customer_managed_key: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BrowserSettingsTagArgs']]]]] = None,
                 __props__=None):
        """
        Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[BrowserSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type

        :param str resource_name: The name of the resource.
        :param BrowserSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrowserSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_encryption_context: Optional[pulumi.Input[pulumi.InputType['BrowserSettingsEncryptionContextMapArgs']]] = None,
                 browser_policy: Optional[pulumi.Input[str]] = None,
                 customer_managed_key: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BrowserSettingsTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrowserSettingsArgs.__new__(BrowserSettingsArgs)

            __props__.__dict__["additional_encryption_context"] = additional_encryption_context
            __props__.__dict__["browser_policy"] = browser_policy
            __props__.__dict__["customer_managed_key"] = customer_managed_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["associated_portal_arns"] = None
            __props__.__dict__["browser_settings_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["additional_encryption_context", "customer_managed_key"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BrowserSettings, __self__).__init__(
            'aws-native:workspacesweb:BrowserSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BrowserSettings':
        """
        Get an existing BrowserSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BrowserSettingsArgs.__new__(BrowserSettingsArgs)

        __props__.__dict__["additional_encryption_context"] = None
        __props__.__dict__["associated_portal_arns"] = None
        __props__.__dict__["browser_policy"] = None
        __props__.__dict__["browser_settings_arn"] = None
        __props__.__dict__["customer_managed_key"] = None
        __props__.__dict__["tags"] = None
        return BrowserSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalEncryptionContext")
    def additional_encryption_context(self) -> pulumi.Output[Optional['outputs.BrowserSettingsEncryptionContextMap']]:
        return pulumi.get(self, "additional_encryption_context")

    @property
    @pulumi.getter(name="associatedPortalArns")
    def associated_portal_arns(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "associated_portal_arns")

    @property
    @pulumi.getter(name="browserPolicy")
    def browser_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "browser_policy")

    @property
    @pulumi.getter(name="browserSettingsArn")
    def browser_settings_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "browser_settings_arn")

    @property
    @pulumi.getter(name="customerManagedKey")
    def customer_managed_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "customer_managed_key")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.BrowserSettingsTag']]]:
        return pulumi.get(self, "tags")

