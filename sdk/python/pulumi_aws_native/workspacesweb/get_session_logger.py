# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetSessionLoggerResult',
    'AwaitableGetSessionLoggerResult',
    'get_session_logger',
    'get_session_logger_output',
]

@pulumi.output_type
class GetSessionLoggerResult:
    def __init__(__self__, associated_portal_arns=None, creation_date=None, display_name=None, event_filter=None, log_configuration=None, session_logger_arn=None, tags=None):
        if associated_portal_arns and not isinstance(associated_portal_arns, list):
            raise TypeError("Expected argument 'associated_portal_arns' to be a list")
        pulumi.set(__self__, "associated_portal_arns", associated_portal_arns)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if event_filter and not isinstance(event_filter, dict):
            raise TypeError("Expected argument 'event_filter' to be a dict")
        pulumi.set(__self__, "event_filter", event_filter)
        if log_configuration and not isinstance(log_configuration, dict):
            raise TypeError("Expected argument 'log_configuration' to be a dict")
        pulumi.set(__self__, "log_configuration", log_configuration)
        if session_logger_arn and not isinstance(session_logger_arn, str):
            raise TypeError("Expected argument 'session_logger_arn' to be a str")
        pulumi.set(__self__, "session_logger_arn", session_logger_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="associatedPortalArns")
    def associated_portal_arns(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "associated_portal_arns")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[builtins.str]:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="eventFilter")
    def event_filter(self) -> Optional[Any]:
        return pulumi.get(self, "event_filter")

    @property
    @pulumi.getter(name="logConfiguration")
    def log_configuration(self) -> Optional['outputs.SessionLoggerLogConfiguration']:
        return pulumi.get(self, "log_configuration")

    @property
    @pulumi.getter(name="sessionLoggerArn")
    def session_logger_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "session_logger_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")


class AwaitableGetSessionLoggerResult(GetSessionLoggerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSessionLoggerResult(
            associated_portal_arns=self.associated_portal_arns,
            creation_date=self.creation_date,
            display_name=self.display_name,
            event_filter=self.event_filter,
            log_configuration=self.log_configuration,
            session_logger_arn=self.session_logger_arn,
            tags=self.tags)


def get_session_logger(session_logger_arn: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSessionLoggerResult:
    """
    Definition of AWS::WorkSpacesWeb::SessionLogger Resource Type
    """
    __args__ = dict()
    __args__['sessionLoggerArn'] = session_logger_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:workspacesweb:getSessionLogger', __args__, opts=opts, typ=GetSessionLoggerResult).value

    return AwaitableGetSessionLoggerResult(
        associated_portal_arns=pulumi.get(__ret__, 'associated_portal_arns'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        display_name=pulumi.get(__ret__, 'display_name'),
        event_filter=pulumi.get(__ret__, 'event_filter'),
        log_configuration=pulumi.get(__ret__, 'log_configuration'),
        session_logger_arn=pulumi.get(__ret__, 'session_logger_arn'),
        tags=pulumi.get(__ret__, 'tags'))
def get_session_logger_output(session_logger_arn: Optional[pulumi.Input[builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSessionLoggerResult]:
    """
    Definition of AWS::WorkSpacesWeb::SessionLogger Resource Type
    """
    __args__ = dict()
    __args__['sessionLoggerArn'] = session_logger_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:workspacesweb:getSessionLogger', __args__, opts=opts, typ=GetSessionLoggerResult)
    return __ret__.apply(lambda __response__: GetSessionLoggerResult(
        associated_portal_arns=pulumi.get(__response__, 'associated_portal_arns'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        display_name=pulumi.get(__response__, 'display_name'),
        event_filter=pulumi.get(__response__, 'event_filter'),
        log_configuration=pulumi.get(__response__, 'log_configuration'),
        session_logger_arn=pulumi.get(__response__, 'session_logger_arn'),
        tags=pulumi.get(__response__, 'tags')))
