# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['IdentityProviderArgs', 'IdentityProvider']

@pulumi.input_type
class IdentityProviderArgs:
    def __init__(__self__, *,
                 identity_provider_details: pulumi.Input['IdentityProviderDetailsArgs'],
                 identity_provider_type: pulumi.Input['IdentityProviderType'],
                 identity_provider_name: Optional[pulumi.Input[str]] = None,
                 portal_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IdentityProvider resource.
        """
        pulumi.set(__self__, "identity_provider_details", identity_provider_details)
        pulumi.set(__self__, "identity_provider_type", identity_provider_type)
        if identity_provider_name is not None:
            pulumi.set(__self__, "identity_provider_name", identity_provider_name)
        if portal_arn is not None:
            pulumi.set(__self__, "portal_arn", portal_arn)

    @property
    @pulumi.getter(name="identityProviderDetails")
    def identity_provider_details(self) -> pulumi.Input['IdentityProviderDetailsArgs']:
        return pulumi.get(self, "identity_provider_details")

    @identity_provider_details.setter
    def identity_provider_details(self, value: pulumi.Input['IdentityProviderDetailsArgs']):
        pulumi.set(self, "identity_provider_details", value)

    @property
    @pulumi.getter(name="identityProviderType")
    def identity_provider_type(self) -> pulumi.Input['IdentityProviderType']:
        return pulumi.get(self, "identity_provider_type")

    @identity_provider_type.setter
    def identity_provider_type(self, value: pulumi.Input['IdentityProviderType']):
        pulumi.set(self, "identity_provider_type", value)

    @property
    @pulumi.getter(name="identityProviderName")
    def identity_provider_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_name")

    @identity_provider_name.setter
    def identity_provider_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_name", value)

    @property
    @pulumi.getter(name="portalArn")
    def portal_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_arn")

    @portal_arn.setter
    def portal_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_arn", value)


class IdentityProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity_provider_details: Optional[pulumi.Input[pulumi.InputType['IdentityProviderDetailsArgs']]] = None,
                 identity_provider_name: Optional[pulumi.Input[str]] = None,
                 identity_provider_type: Optional[pulumi.Input['IdentityProviderType']] = None,
                 portal_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Definition of AWS::WorkSpacesWeb::IdentityProvider Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IdentityProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::WorkSpacesWeb::IdentityProvider Resource Type

        :param str resource_name: The name of the resource.
        :param IdentityProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdentityProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity_provider_details: Optional[pulumi.Input[pulumi.InputType['IdentityProviderDetailsArgs']]] = None,
                 identity_provider_name: Optional[pulumi.Input[str]] = None,
                 identity_provider_type: Optional[pulumi.Input['IdentityProviderType']] = None,
                 portal_arn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdentityProviderArgs.__new__(IdentityProviderArgs)

            if identity_provider_details is None and not opts.urn:
                raise TypeError("Missing required property 'identity_provider_details'")
            __props__.__dict__["identity_provider_details"] = identity_provider_details
            __props__.__dict__["identity_provider_name"] = identity_provider_name
            if identity_provider_type is None and not opts.urn:
                raise TypeError("Missing required property 'identity_provider_type'")
            __props__.__dict__["identity_provider_type"] = identity_provider_type
            __props__.__dict__["portal_arn"] = portal_arn
            __props__.__dict__["identity_provider_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["portal_arn"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(IdentityProvider, __self__).__init__(
            'aws-native:workspacesweb:IdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IdentityProvider':
        """
        Get an existing IdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IdentityProviderArgs.__new__(IdentityProviderArgs)

        __props__.__dict__["identity_provider_arn"] = None
        __props__.__dict__["identity_provider_details"] = None
        __props__.__dict__["identity_provider_name"] = None
        __props__.__dict__["identity_provider_type"] = None
        __props__.__dict__["portal_arn"] = None
        return IdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="identityProviderArn")
    def identity_provider_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "identity_provider_arn")

    @property
    @pulumi.getter(name="identityProviderDetails")
    def identity_provider_details(self) -> pulumi.Output['outputs.IdentityProviderDetails']:
        return pulumi.get(self, "identity_provider_details")

    @property
    @pulumi.getter(name="identityProviderName")
    def identity_provider_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "identity_provider_name")

    @property
    @pulumi.getter(name="identityProviderType")
    def identity_provider_type(self) -> pulumi.Output['IdentityProviderType']:
        return pulumi.get(self, "identity_provider_type")

    @property
    @pulumi.getter(name="portalArn")
    def portal_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "portal_arn")

