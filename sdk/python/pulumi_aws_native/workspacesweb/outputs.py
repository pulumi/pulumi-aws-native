# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DataProtectionSettingsCustomPattern',
    'DataProtectionSettingsInlineRedactionConfiguration',
    'DataProtectionSettingsInlineRedactionPattern',
    'DataProtectionSettingsRedactionPlaceHolder',
    'IpAccessSettingsIpRule',
    'UserSettingsCookieSpecification',
    'UserSettingsCookieSynchronizationConfiguration',
]

@pulumi.output_type
class DataProtectionSettingsCustomPattern(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternName":
            suggest = "pattern_name"
        elif key == "patternRegex":
            suggest = "pattern_regex"
        elif key == "keywordRegex":
            suggest = "keyword_regex"
        elif key == "patternDescription":
            suggest = "pattern_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataProtectionSettingsCustomPattern. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataProtectionSettingsCustomPattern.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataProtectionSettingsCustomPattern.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pattern_name: str,
                 pattern_regex: str,
                 keyword_regex: Optional[str] = None,
                 pattern_description: Optional[str] = None):
        pulumi.set(__self__, "pattern_name", pattern_name)
        pulumi.set(__self__, "pattern_regex", pattern_regex)
        if keyword_regex is not None:
            pulumi.set(__self__, "keyword_regex", keyword_regex)
        if pattern_description is not None:
            pulumi.set(__self__, "pattern_description", pattern_description)

    @property
    @pulumi.getter(name="patternName")
    def pattern_name(self) -> str:
        return pulumi.get(self, "pattern_name")

    @property
    @pulumi.getter(name="patternRegex")
    def pattern_regex(self) -> str:
        return pulumi.get(self, "pattern_regex")

    @property
    @pulumi.getter(name="keywordRegex")
    def keyword_regex(self) -> Optional[str]:
        return pulumi.get(self, "keyword_regex")

    @property
    @pulumi.getter(name="patternDescription")
    def pattern_description(self) -> Optional[str]:
        return pulumi.get(self, "pattern_description")


@pulumi.output_type
class DataProtectionSettingsInlineRedactionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inlineRedactionPatterns":
            suggest = "inline_redaction_patterns"
        elif key == "globalConfidenceLevel":
            suggest = "global_confidence_level"
        elif key == "globalEnforcedUrls":
            suggest = "global_enforced_urls"
        elif key == "globalExemptUrls":
            suggest = "global_exempt_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataProtectionSettingsInlineRedactionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataProtectionSettingsInlineRedactionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataProtectionSettingsInlineRedactionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inline_redaction_patterns: Sequence['outputs.DataProtectionSettingsInlineRedactionPattern'],
                 global_confidence_level: Optional[float] = None,
                 global_enforced_urls: Optional[Sequence[str]] = None,
                 global_exempt_urls: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "inline_redaction_patterns", inline_redaction_patterns)
        if global_confidence_level is not None:
            pulumi.set(__self__, "global_confidence_level", global_confidence_level)
        if global_enforced_urls is not None:
            pulumi.set(__self__, "global_enforced_urls", global_enforced_urls)
        if global_exempt_urls is not None:
            pulumi.set(__self__, "global_exempt_urls", global_exempt_urls)

    @property
    @pulumi.getter(name="inlineRedactionPatterns")
    def inline_redaction_patterns(self) -> Sequence['outputs.DataProtectionSettingsInlineRedactionPattern']:
        return pulumi.get(self, "inline_redaction_patterns")

    @property
    @pulumi.getter(name="globalConfidenceLevel")
    def global_confidence_level(self) -> Optional[float]:
        return pulumi.get(self, "global_confidence_level")

    @property
    @pulumi.getter(name="globalEnforcedUrls")
    def global_enforced_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "global_enforced_urls")

    @property
    @pulumi.getter(name="globalExemptUrls")
    def global_exempt_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "global_exempt_urls")


@pulumi.output_type
class DataProtectionSettingsInlineRedactionPattern(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redactionPlaceHolder":
            suggest = "redaction_place_holder"
        elif key == "builtInPatternId":
            suggest = "built_in_pattern_id"
        elif key == "confidenceLevel":
            suggest = "confidence_level"
        elif key == "customPattern":
            suggest = "custom_pattern"
        elif key == "enforcedUrls":
            suggest = "enforced_urls"
        elif key == "exemptUrls":
            suggest = "exempt_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataProtectionSettingsInlineRedactionPattern. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataProtectionSettingsInlineRedactionPattern.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataProtectionSettingsInlineRedactionPattern.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redaction_place_holder: 'outputs.DataProtectionSettingsRedactionPlaceHolder',
                 built_in_pattern_id: Optional[str] = None,
                 confidence_level: Optional[float] = None,
                 custom_pattern: Optional['outputs.DataProtectionSettingsCustomPattern'] = None,
                 enforced_urls: Optional[Sequence[str]] = None,
                 exempt_urls: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "redaction_place_holder", redaction_place_holder)
        if built_in_pattern_id is not None:
            pulumi.set(__self__, "built_in_pattern_id", built_in_pattern_id)
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)
        if custom_pattern is not None:
            pulumi.set(__self__, "custom_pattern", custom_pattern)
        if enforced_urls is not None:
            pulumi.set(__self__, "enforced_urls", enforced_urls)
        if exempt_urls is not None:
            pulumi.set(__self__, "exempt_urls", exempt_urls)

    @property
    @pulumi.getter(name="redactionPlaceHolder")
    def redaction_place_holder(self) -> 'outputs.DataProtectionSettingsRedactionPlaceHolder':
        return pulumi.get(self, "redaction_place_holder")

    @property
    @pulumi.getter(name="builtInPatternId")
    def built_in_pattern_id(self) -> Optional[str]:
        return pulumi.get(self, "built_in_pattern_id")

    @property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[float]:
        return pulumi.get(self, "confidence_level")

    @property
    @pulumi.getter(name="customPattern")
    def custom_pattern(self) -> Optional['outputs.DataProtectionSettingsCustomPattern']:
        return pulumi.get(self, "custom_pattern")

    @property
    @pulumi.getter(name="enforcedUrls")
    def enforced_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enforced_urls")

    @property
    @pulumi.getter(name="exemptUrls")
    def exempt_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exempt_urls")


@pulumi.output_type
class DataProtectionSettingsRedactionPlaceHolder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redactionPlaceHolderType":
            suggest = "redaction_place_holder_type"
        elif key == "redactionPlaceHolderText":
            suggest = "redaction_place_holder_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataProtectionSettingsRedactionPlaceHolder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataProtectionSettingsRedactionPlaceHolder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataProtectionSettingsRedactionPlaceHolder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redaction_place_holder_type: 'DataProtectionSettingsRedactionPlaceHolderType',
                 redaction_place_holder_text: Optional[str] = None):
        pulumi.set(__self__, "redaction_place_holder_type", redaction_place_holder_type)
        if redaction_place_holder_text is not None:
            pulumi.set(__self__, "redaction_place_holder_text", redaction_place_holder_text)

    @property
    @pulumi.getter(name="redactionPlaceHolderType")
    def redaction_place_holder_type(self) -> 'DataProtectionSettingsRedactionPlaceHolderType':
        return pulumi.get(self, "redaction_place_holder_type")

    @property
    @pulumi.getter(name="redactionPlaceHolderText")
    def redaction_place_holder_text(self) -> Optional[str]:
        return pulumi.get(self, "redaction_place_holder_text")


@pulumi.output_type
class IpAccessSettingsIpRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRange":
            suggest = "ip_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpAccessSettingsIpRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpAccessSettingsIpRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpAccessSettingsIpRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_range: str,
                 description: Optional[str] = None):
        """
        :param str ip_range: A single IP address or an IP address range in CIDR notation
        :param str description: The description of the IP rule.
        """
        pulumi.set(__self__, "ip_range", ip_range)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        """
        A single IP address or an IP address range in CIDR notation
        """
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the IP rule.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class UserSettingsCookieSpecification(dict):
    def __init__(__self__, *,
                 domain: str,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        :param str domain: The domain of the cookie.
        :param str name: The name of the cookie.
        :param str path: The path of the cookie.
        """
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the cookie.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the cookie.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The path of the cookie.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class UserSettingsCookieSynchronizationConfiguration(dict):
    def __init__(__self__, *,
                 allowlist: Sequence['outputs.UserSettingsCookieSpecification'],
                 blocklist: Optional[Sequence['outputs.UserSettingsCookieSpecification']] = None):
        """
        :param Sequence['UserSettingsCookieSpecification'] allowlist: The list of cookie specifications that are allowed to be synchronized to the remote browser.
        :param Sequence['UserSettingsCookieSpecification'] blocklist: The list of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        pulumi.set(__self__, "allowlist", allowlist)
        if blocklist is not None:
            pulumi.set(__self__, "blocklist", blocklist)

    @property
    @pulumi.getter
    def allowlist(self) -> Sequence['outputs.UserSettingsCookieSpecification']:
        """
        The list of cookie specifications that are allowed to be synchronized to the remote browser.
        """
        return pulumi.get(self, "allowlist")

    @property
    @pulumi.getter
    def blocklist(self) -> Optional[Sequence['outputs.UserSettingsCookieSpecification']]:
        """
        The list of cookie specifications that are blocked from being synchronized to the remote browser.
        """
        return pulumi.get(self, "blocklist")


