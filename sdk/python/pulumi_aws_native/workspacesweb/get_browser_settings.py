# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBrowserSettingsResult',
    'AwaitableGetBrowserSettingsResult',
    'get_browser_settings',
    'get_browser_settings_output',
]

@pulumi.output_type
class GetBrowserSettingsResult:
    def __init__(__self__, associated_portal_arns=None, browser_policy=None, browser_settings_arn=None, tags=None):
        if associated_portal_arns and not isinstance(associated_portal_arns, list):
            raise TypeError("Expected argument 'associated_portal_arns' to be a list")
        pulumi.set(__self__, "associated_portal_arns", associated_portal_arns)
        if browser_policy and not isinstance(browser_policy, str):
            raise TypeError("Expected argument 'browser_policy' to be a str")
        pulumi.set(__self__, "browser_policy", browser_policy)
        if browser_settings_arn and not isinstance(browser_settings_arn, str):
            raise TypeError("Expected argument 'browser_settings_arn' to be a str")
        pulumi.set(__self__, "browser_settings_arn", browser_settings_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="associatedPortalArns")
    def associated_portal_arns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_portal_arns")

    @property
    @pulumi.getter(name="browserPolicy")
    def browser_policy(self) -> Optional[str]:
        return pulumi.get(self, "browser_policy")

    @property
    @pulumi.getter(name="browserSettingsArn")
    def browser_settings_arn(self) -> Optional[str]:
        return pulumi.get(self, "browser_settings_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.BrowserSettingsTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetBrowserSettingsResult(GetBrowserSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrowserSettingsResult(
            associated_portal_arns=self.associated_portal_arns,
            browser_policy=self.browser_policy,
            browser_settings_arn=self.browser_settings_arn,
            tags=self.tags)


def get_browser_settings(browser_settings_arn: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrowserSettingsResult:
    """
    Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type
    """
    __args__ = dict()
    __args__['browserSettingsArn'] = browser_settings_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:workspacesweb:getBrowserSettings', __args__, opts=opts, typ=GetBrowserSettingsResult).value

    return AwaitableGetBrowserSettingsResult(
        associated_portal_arns=pulumi.get(__ret__, 'associated_portal_arns'),
        browser_policy=pulumi.get(__ret__, 'browser_policy'),
        browser_settings_arn=pulumi.get(__ret__, 'browser_settings_arn'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_browser_settings)
def get_browser_settings_output(browser_settings_arn: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrowserSettingsResult]:
    """
    Definition of AWS::WorkSpacesWeb::BrowserSettings Resource Type
    """
    ...
