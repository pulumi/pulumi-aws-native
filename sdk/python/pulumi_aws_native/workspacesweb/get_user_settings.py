# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetUserSettingsResult',
    'AwaitableGetUserSettingsResult',
    'get_user_settings',
    'get_user_settings_output',
]

@pulumi.output_type
class GetUserSettingsResult:
    def __init__(__self__, associated_portal_arns=None, cookie_synchronization_configuration=None, copy_allowed=None, disconnect_timeout_in_minutes=None, download_allowed=None, idle_disconnect_timeout_in_minutes=None, paste_allowed=None, print_allowed=None, tags=None, upload_allowed=None, user_settings_arn=None):
        if associated_portal_arns and not isinstance(associated_portal_arns, list):
            raise TypeError("Expected argument 'associated_portal_arns' to be a list")
        pulumi.set(__self__, "associated_portal_arns", associated_portal_arns)
        if cookie_synchronization_configuration and not isinstance(cookie_synchronization_configuration, dict):
            raise TypeError("Expected argument 'cookie_synchronization_configuration' to be a dict")
        pulumi.set(__self__, "cookie_synchronization_configuration", cookie_synchronization_configuration)
        if copy_allowed and not isinstance(copy_allowed, str):
            raise TypeError("Expected argument 'copy_allowed' to be a str")
        pulumi.set(__self__, "copy_allowed", copy_allowed)
        if disconnect_timeout_in_minutes and not isinstance(disconnect_timeout_in_minutes, float):
            raise TypeError("Expected argument 'disconnect_timeout_in_minutes' to be a float")
        pulumi.set(__self__, "disconnect_timeout_in_minutes", disconnect_timeout_in_minutes)
        if download_allowed and not isinstance(download_allowed, str):
            raise TypeError("Expected argument 'download_allowed' to be a str")
        pulumi.set(__self__, "download_allowed", download_allowed)
        if idle_disconnect_timeout_in_minutes and not isinstance(idle_disconnect_timeout_in_minutes, float):
            raise TypeError("Expected argument 'idle_disconnect_timeout_in_minutes' to be a float")
        pulumi.set(__self__, "idle_disconnect_timeout_in_minutes", idle_disconnect_timeout_in_minutes)
        if paste_allowed and not isinstance(paste_allowed, str):
            raise TypeError("Expected argument 'paste_allowed' to be a str")
        pulumi.set(__self__, "paste_allowed", paste_allowed)
        if print_allowed and not isinstance(print_allowed, str):
            raise TypeError("Expected argument 'print_allowed' to be a str")
        pulumi.set(__self__, "print_allowed", print_allowed)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if upload_allowed and not isinstance(upload_allowed, str):
            raise TypeError("Expected argument 'upload_allowed' to be a str")
        pulumi.set(__self__, "upload_allowed", upload_allowed)
        if user_settings_arn and not isinstance(user_settings_arn, str):
            raise TypeError("Expected argument 'user_settings_arn' to be a str")
        pulumi.set(__self__, "user_settings_arn", user_settings_arn)

    @property
    @pulumi.getter(name="associatedPortalArns")
    def associated_portal_arns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_portal_arns")

    @property
    @pulumi.getter(name="cookieSynchronizationConfiguration")
    def cookie_synchronization_configuration(self) -> Optional['outputs.UserSettingsCookieSynchronizationConfiguration']:
        return pulumi.get(self, "cookie_synchronization_configuration")

    @property
    @pulumi.getter(name="copyAllowed")
    def copy_allowed(self) -> Optional['UserSettingsEnabledType']:
        return pulumi.get(self, "copy_allowed")

    @property
    @pulumi.getter(name="disconnectTimeoutInMinutes")
    def disconnect_timeout_in_minutes(self) -> Optional[float]:
        return pulumi.get(self, "disconnect_timeout_in_minutes")

    @property
    @pulumi.getter(name="downloadAllowed")
    def download_allowed(self) -> Optional['UserSettingsEnabledType']:
        return pulumi.get(self, "download_allowed")

    @property
    @pulumi.getter(name="idleDisconnectTimeoutInMinutes")
    def idle_disconnect_timeout_in_minutes(self) -> Optional[float]:
        return pulumi.get(self, "idle_disconnect_timeout_in_minutes")

    @property
    @pulumi.getter(name="pasteAllowed")
    def paste_allowed(self) -> Optional['UserSettingsEnabledType']:
        return pulumi.get(self, "paste_allowed")

    @property
    @pulumi.getter(name="printAllowed")
    def print_allowed(self) -> Optional['UserSettingsEnabledType']:
        return pulumi.get(self, "print_allowed")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.UserSettingsTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="uploadAllowed")
    def upload_allowed(self) -> Optional['UserSettingsEnabledType']:
        return pulumi.get(self, "upload_allowed")

    @property
    @pulumi.getter(name="userSettingsArn")
    def user_settings_arn(self) -> Optional[str]:
        return pulumi.get(self, "user_settings_arn")


class AwaitableGetUserSettingsResult(GetUserSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserSettingsResult(
            associated_portal_arns=self.associated_portal_arns,
            cookie_synchronization_configuration=self.cookie_synchronization_configuration,
            copy_allowed=self.copy_allowed,
            disconnect_timeout_in_minutes=self.disconnect_timeout_in_minutes,
            download_allowed=self.download_allowed,
            idle_disconnect_timeout_in_minutes=self.idle_disconnect_timeout_in_minutes,
            paste_allowed=self.paste_allowed,
            print_allowed=self.print_allowed,
            tags=self.tags,
            upload_allowed=self.upload_allowed,
            user_settings_arn=self.user_settings_arn)


def get_user_settings(user_settings_arn: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserSettingsResult:
    """
    Definition of AWS::WorkSpacesWeb::UserSettings Resource Type
    """
    __args__ = dict()
    __args__['userSettingsArn'] = user_settings_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:workspacesweb:getUserSettings', __args__, opts=opts, typ=GetUserSettingsResult).value

    return AwaitableGetUserSettingsResult(
        associated_portal_arns=pulumi.get(__ret__, 'associated_portal_arns'),
        cookie_synchronization_configuration=pulumi.get(__ret__, 'cookie_synchronization_configuration'),
        copy_allowed=pulumi.get(__ret__, 'copy_allowed'),
        disconnect_timeout_in_minutes=pulumi.get(__ret__, 'disconnect_timeout_in_minutes'),
        download_allowed=pulumi.get(__ret__, 'download_allowed'),
        idle_disconnect_timeout_in_minutes=pulumi.get(__ret__, 'idle_disconnect_timeout_in_minutes'),
        paste_allowed=pulumi.get(__ret__, 'paste_allowed'),
        print_allowed=pulumi.get(__ret__, 'print_allowed'),
        tags=pulumi.get(__ret__, 'tags'),
        upload_allowed=pulumi.get(__ret__, 'upload_allowed'),
        user_settings_arn=pulumi.get(__ret__, 'user_settings_arn'))


@_utilities.lift_output_func(get_user_settings)
def get_user_settings_output(user_settings_arn: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserSettingsResult]:
    """
    Definition of AWS::WorkSpacesWeb::UserSettings Resource Type
    """
    ...
