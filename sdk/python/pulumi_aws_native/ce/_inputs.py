# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AnomalySubscriptionSubscriberArgs',
    'AnomalySubscriptionSubscriberArgsDict',
]

MYPY = False

if not MYPY:
    class AnomalySubscriptionSubscriberArgsDict(TypedDict):
        address: pulumi.Input[builtins.str]
        """
        The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
        """
        type: pulumi.Input['AnomalySubscriptionSubscriberType']
        """
        The notification delivery channel.
        """
        status: NotRequired[pulumi.Input['AnomalySubscriptionSubscriberStatus']]
        """
        Indicates if the subscriber accepts the notifications.
        """
elif False:
    AnomalySubscriptionSubscriberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AnomalySubscriptionSubscriberArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[builtins.str],
                 type: pulumi.Input['AnomalySubscriptionSubscriberType'],
                 status: Optional[pulumi.Input['AnomalySubscriptionSubscriberStatus']] = None):
        """
        :param pulumi.Input[builtins.str] address: The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
        :param pulumi.Input['AnomalySubscriptionSubscriberType'] type: The notification delivery channel.
        :param pulumi.Input['AnomalySubscriptionSubscriberStatus'] status: Indicates if the subscriber accepts the notifications.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "type", type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[builtins.str]:
        """
        The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnomalySubscriptionSubscriberType']:
        """
        The notification delivery channel.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnomalySubscriptionSubscriberType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnomalySubscriptionSubscriberStatus']]:
        """
        Indicates if the subscriber accepts the notifications.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnomalySubscriptionSubscriberStatus']]):
        pulumi.set(self, "status", value)


