# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AnomalySubscriptionSubscriber',
]

@pulumi.output_type
class AnomalySubscriptionSubscriber(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 type: 'AnomalySubscriptionSubscriberType',
                 status: Optional['AnomalySubscriptionSubscriberStatus'] = None):
        """
        :param builtins.str address: The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
        :param 'AnomalySubscriptionSubscriberType' type: The notification delivery channel.
        :param 'AnomalySubscriptionSubscriberStatus' status: Indicates if the subscriber accepts the notifications.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "type", type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def type(self) -> 'AnomalySubscriptionSubscriberType':
        """
        The notification delivery channel.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def status(self) -> Optional['AnomalySubscriptionSubscriberStatus']:
        """
        Indicates if the subscriber accepts the notifications.
        """
        return pulumi.get(self, "status")


