# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnomalyMonitorResourceTag',
    'AnomalySubscriptionResourceTag',
    'AnomalySubscriptionSubscriber',
]

@pulumi.output_type
class AnomalyMonitorResourceTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name for the tag.
        :param str value: The value for the tag.
        """
        AnomalyMonitorResourceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name for the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AnomalySubscriptionResourceTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name for the tag.
        :param str value: The value for the tag.
        """
        AnomalySubscriptionResourceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name for the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AnomalySubscriptionSubscriber(dict):
    def __init__(__self__, *,
                 address: str,
                 type: 'AnomalySubscriptionSubscriberType',
                 status: Optional['AnomalySubscriptionSubscriberStatus'] = None):
        AnomalySubscriptionSubscriber._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            type=type,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             type: 'AnomalySubscriptionSubscriberType',
             status: Optional['AnomalySubscriptionSubscriberStatus'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("type", type)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def type(self) -> 'AnomalySubscriptionSubscriberType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def status(self) -> Optional['AnomalySubscriptionSubscriberStatus']:
        return pulumi.get(self, "status")


