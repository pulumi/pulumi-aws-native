# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumeArgs', 'Volume']

@pulumi.input_type
class VolumeArgs:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ontap_configuration: Optional[pulumi.Input['VolumeOntapConfigurationArgs']] = None,
                 open_zfs_configuration: Optional[pulumi.Input['VolumeOpenZfsConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Volume resource.
        """
        VolumeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup_id=backup_id,
            name=name,
            ontap_configuration=ontap_configuration,
            open_zfs_configuration=open_zfs_configuration,
            tags=tags,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup_id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             ontap_configuration: Optional[pulumi.Input['VolumeOntapConfigurationArgs']] = None,
             open_zfs_configuration: Optional[pulumi.Input['VolumeOpenZfsConfigurationArgs']] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]] = None,
             volume_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if backup_id is not None:
            _setter("backup_id", backup_id)
        if name is not None:
            _setter("name", name)
        if ontap_configuration is not None:
            _setter("ontap_configuration", ontap_configuration)
        if open_zfs_configuration is not None:
            _setter("open_zfs_configuration", open_zfs_configuration)
        if tags is not None:
            _setter("tags", tags)
        if volume_type is not None:
            _setter("volume_type", volume_type)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ontapConfiguration")
    def ontap_configuration(self) -> Optional[pulumi.Input['VolumeOntapConfigurationArgs']]:
        return pulumi.get(self, "ontap_configuration")

    @ontap_configuration.setter
    def ontap_configuration(self, value: Optional[pulumi.Input['VolumeOntapConfigurationArgs']]):
        pulumi.set(self, "ontap_configuration", value)

    @property
    @pulumi.getter(name="openZfsConfiguration")
    def open_zfs_configuration(self) -> Optional[pulumi.Input['VolumeOpenZfsConfigurationArgs']]:
        return pulumi.get(self, "open_zfs_configuration")

    @open_zfs_configuration.setter
    def open_zfs_configuration(self, value: Optional[pulumi.Input['VolumeOpenZfsConfigurationArgs']]):
        pulumi.set(self, "open_zfs_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


warnings.warn("""Volume is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class Volume(pulumi.CustomResource):
    warnings.warn("""Volume is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ontap_configuration: Optional[pulumi.Input[pulumi.InputType['VolumeOntapConfigurationArgs']]] = None,
                 open_zfs_configuration: Optional[pulumi.Input[pulumi.InputType['VolumeOpenZfsConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VolumeTagArgs']]]]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::FSx::Volume

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VolumeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::FSx::Volume

        :param str resource_name: The name of the resource.
        :param VolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VolumeArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ontap_configuration: Optional[pulumi.Input[pulumi.InputType['VolumeOntapConfigurationArgs']]] = None,
                 open_zfs_configuration: Optional[pulumi.Input[pulumi.InputType['VolumeOpenZfsConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VolumeTagArgs']]]]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""Volume is deprecated: Volume is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeArgs.__new__(VolumeArgs)

            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["name"] = name
            if ontap_configuration is not None and not isinstance(ontap_configuration, VolumeOntapConfigurationArgs):
                ontap_configuration = ontap_configuration or {}
                def _setter(key, value):
                    ontap_configuration[key] = value
                VolumeOntapConfigurationArgs._configure(_setter, **ontap_configuration)
            __props__.__dict__["ontap_configuration"] = ontap_configuration
            if open_zfs_configuration is not None and not isinstance(open_zfs_configuration, VolumeOpenZfsConfigurationArgs):
                open_zfs_configuration = open_zfs_configuration or {}
                def _setter(key, value):
                    open_zfs_configuration[key] = value
                VolumeOpenZfsConfigurationArgs._configure(_setter, **open_zfs_configuration)
            __props__.__dict__["open_zfs_configuration"] = open_zfs_configuration
            __props__.__dict__["tags"] = tags
            __props__.__dict__["volume_type"] = volume_type
            __props__.__dict__["resource_arn"] = None
            __props__.__dict__["uuid"] = None
            __props__.__dict__["volume_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["backup_id", "volume_type"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Volume, __self__).__init__(
            'aws-native:fsx:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VolumeArgs.__new__(VolumeArgs)

        __props__.__dict__["backup_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["ontap_configuration"] = None
        __props__.__dict__["open_zfs_configuration"] = None
        __props__.__dict__["resource_arn"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["uuid"] = None
        __props__.__dict__["volume_id"] = None
        __props__.__dict__["volume_type"] = None
        return Volume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ontapConfiguration")
    def ontap_configuration(self) -> pulumi.Output[Optional['outputs.VolumeOntapConfiguration']]:
        return pulumi.get(self, "ontap_configuration")

    @property
    @pulumi.getter(name="openZfsConfiguration")
    def open_zfs_configuration(self) -> pulumi.Output[Optional['outputs.VolumeOpenZfsConfiguration']]:
        return pulumi.get(self, "open_zfs_configuration")

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.VolumeTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "volume_type")

