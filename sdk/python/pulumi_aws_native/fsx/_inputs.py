# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'DataRepositoryAssociationAutoExportPolicyArgs',
    'DataRepositoryAssociationAutoExportPolicyArgsDict',
    'DataRepositoryAssociationAutoImportPolicyArgs',
    'DataRepositoryAssociationAutoImportPolicyArgsDict',
    'DataRepositoryAssociationS3Args',
    'DataRepositoryAssociationS3ArgsDict',
    'S3AccessPointAttachmentFileSystemGidArgs',
    'S3AccessPointAttachmentFileSystemGidArgsDict',
    'S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs',
    'S3AccessPointAttachmentOpenZfsFileSystemIdentityArgsDict',
    'S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs',
    'S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgsDict',
    'S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs',
    'S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict',
    'S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs',
    'S3AccessPointAttachmentS3AccessPointVpcConfigurationArgsDict',
    'S3AccessPointAttachmentS3AccessPointArgs',
    'S3AccessPointAttachmentS3AccessPointArgsDict',
]

MYPY = False

if not MYPY:
    class DataRepositoryAssociationAutoExportPolicyArgsDict(TypedDict):
        """
        Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        events: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]
        """
        The ``AutoExportPolicy`` can have the following event values:
          +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
          +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
          +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
          
         You can define any combination of event types for your ``AutoExportPolicy``.
        """
elif False:
    DataRepositoryAssociationAutoExportPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataRepositoryAssociationAutoExportPolicyArgs:
    def __init__(__self__, *,
                 events: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]):
        """
        Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        :param pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]] events: The ``AutoExportPolicy`` can have the following event values:
                 +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
                 +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
                 +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
                 
                You can define any combination of event types for your ``AutoExportPolicy``.
        """
        pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]:
        """
        The ``AutoExportPolicy`` can have the following event values:
          +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
          +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
          +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
          
         You can define any combination of event types for your ``AutoExportPolicy``.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]):
        pulumi.set(self, "events", value)


if not MYPY:
    class DataRepositoryAssociationAutoImportPolicyArgsDict(TypedDict):
        """
        Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        events: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]
        """
        The ``AutoImportPolicy`` can have the following event values:
          +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
          +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
          +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
          
         You can define any combination of event types for your ``AutoImportPolicy``.
        """
elif False:
    DataRepositoryAssociationAutoImportPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataRepositoryAssociationAutoImportPolicyArgs:
    def __init__(__self__, *,
                 events: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]):
        """
        Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        :param pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]] events: The ``AutoImportPolicy`` can have the following event values:
                 +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
                 +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
                 +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
                 
                You can define any combination of event types for your ``AutoImportPolicy``.
        """
        pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]:
        """
        The ``AutoImportPolicy`` can have the following event values:
          +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
          +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
          +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
          
         You can define any combination of event types for your ``AutoImportPolicy``.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input['DataRepositoryAssociationEventType']]]):
        pulumi.set(self, "events", value)


if not MYPY:
    class DataRepositoryAssociationS3ArgsDict(TypedDict):
        """
        The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
        """
        auto_export_policy: NotRequired[pulumi.Input['DataRepositoryAssociationAutoExportPolicyArgsDict']]
        """
        Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        auto_import_policy: NotRequired[pulumi.Input['DataRepositoryAssociationAutoImportPolicyArgsDict']]
        """
        Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
elif False:
    DataRepositoryAssociationS3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataRepositoryAssociationS3Args:
    def __init__(__self__, *,
                 auto_export_policy: Optional[pulumi.Input['DataRepositoryAssociationAutoExportPolicyArgs']] = None,
                 auto_import_policy: Optional[pulumi.Input['DataRepositoryAssociationAutoImportPolicyArgs']] = None):
        """
        The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
        :param pulumi.Input['DataRepositoryAssociationAutoExportPolicyArgs'] auto_export_policy: Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
                The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        :param pulumi.Input['DataRepositoryAssociationAutoImportPolicyArgs'] auto_import_policy: Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
                The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        if auto_export_policy is not None:
            pulumi.set(__self__, "auto_export_policy", auto_export_policy)
        if auto_import_policy is not None:
            pulumi.set(__self__, "auto_import_policy", auto_import_policy)

    @property
    @pulumi.getter(name="autoExportPolicy")
    def auto_export_policy(self) -> Optional[pulumi.Input['DataRepositoryAssociationAutoExportPolicyArgs']]:
        """
        Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        return pulumi.get(self, "auto_export_policy")

    @auto_export_policy.setter
    def auto_export_policy(self, value: Optional[pulumi.Input['DataRepositoryAssociationAutoExportPolicyArgs']]):
        pulumi.set(self, "auto_export_policy", value)

    @property
    @pulumi.getter(name="autoImportPolicy")
    def auto_import_policy(self) -> Optional[pulumi.Input['DataRepositoryAssociationAutoImportPolicyArgs']]:
        """
        Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
        """
        return pulumi.get(self, "auto_import_policy")

    @auto_import_policy.setter
    def auto_import_policy(self, value: Optional[pulumi.Input['DataRepositoryAssociationAutoImportPolicyArgs']]):
        pulumi.set(self, "auto_import_policy", value)


if not MYPY:
    class S3AccessPointAttachmentFileSystemGidArgsDict(TypedDict):
        gid: pulumi.Input[builtins.float]
        """
        The GID of the file system user.
        """
elif False:
    S3AccessPointAttachmentFileSystemGidArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentFileSystemGidArgs:
    def __init__(__self__, *,
                 gid: pulumi.Input[builtins.float]):
        """
        :param pulumi.Input[builtins.float] gid: The GID of the file system user.
        """
        pulumi.set(__self__, "gid", gid)

    @property
    @pulumi.getter
    def gid(self) -> pulumi.Input[builtins.float]:
        """
        The GID of the file system user.
        """
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "gid", value)


if not MYPY:
    class S3AccessPointAttachmentOpenZfsFileSystemIdentityArgsDict(TypedDict):
        posix_user: pulumi.Input['S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgsDict']
        """
        Specifies the UID and GIDs of the file system POSIX user.
        """
        type: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityType']
        """
        Specifies the FSx for OpenZFS user identity type, accepts only `POSIX` .
        """
elif False:
    S3AccessPointAttachmentOpenZfsFileSystemIdentityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs:
    def __init__(__self__, *,
                 posix_user: pulumi.Input['S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs'],
                 type: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityType']):
        """
        :param pulumi.Input['S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs'] posix_user: Specifies the UID and GIDs of the file system POSIX user.
        :param pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityType'] type: Specifies the FSx for OpenZFS user identity type, accepts only `POSIX` .
        """
        pulumi.set(__self__, "posix_user", posix_user)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="posixUser")
    def posix_user(self) -> pulumi.Input['S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs']:
        """
        Specifies the UID and GIDs of the file system POSIX user.
        """
        return pulumi.get(self, "posix_user")

    @posix_user.setter
    def posix_user(self, value: pulumi.Input['S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs']):
        pulumi.set(self, "posix_user", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityType']:
        """
        Specifies the FSx for OpenZFS user identity type, accepts only `POSIX` .
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityType']):
        pulumi.set(self, "type", value)


if not MYPY:
    class S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgsDict(TypedDict):
        gid: pulumi.Input[builtins.float]
        """
        The GID of the file system user.
        """
        uid: pulumi.Input[builtins.float]
        """
        The UID of the file system user.
        """
        secondary_gids: NotRequired[pulumi.Input[Sequence[pulumi.Input['S3AccessPointAttachmentFileSystemGidArgsDict']]]]
        """
        The list of secondary GIDs for the file system user.
        """
elif False:
    S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentOpenZfsPosixFileSystemUserArgs:
    def __init__(__self__, *,
                 gid: pulumi.Input[builtins.float],
                 uid: pulumi.Input[builtins.float],
                 secondary_gids: Optional[pulumi.Input[Sequence[pulumi.Input['S3AccessPointAttachmentFileSystemGidArgs']]]] = None):
        """
        :param pulumi.Input[builtins.float] gid: The GID of the file system user.
        :param pulumi.Input[builtins.float] uid: The UID of the file system user.
        :param pulumi.Input[Sequence[pulumi.Input['S3AccessPointAttachmentFileSystemGidArgs']]] secondary_gids: The list of secondary GIDs for the file system user.
        """
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "uid", uid)
        if secondary_gids is not None:
            pulumi.set(__self__, "secondary_gids", secondary_gids)

    @property
    @pulumi.getter
    def gid(self) -> pulumi.Input[builtins.float]:
        """
        The GID of the file system user.
        """
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Input[builtins.float]:
        """
        The UID of the file system user.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="secondaryGids")
    def secondary_gids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3AccessPointAttachmentFileSystemGidArgs']]]]:
        """
        The list of secondary GIDs for the file system user.
        """
        return pulumi.get(self, "secondary_gids")

    @secondary_gids.setter
    def secondary_gids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3AccessPointAttachmentFileSystemGidArgs']]]]):
        pulumi.set(self, "secondary_gids", value)


if not MYPY:
    class S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict(TypedDict):
        file_system_identity: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityArgsDict']
        """
        The file system identity used to authorize file access requests made using the S3 access point.
        """
        volume_id: pulumi.Input[builtins.str]
        """
        The ID of the FSx for OpenZFS volume that the S3 access point is attached to.
        """
elif False:
    S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs:
    def __init__(__self__, *,
                 file_system_identity: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs'],
                 volume_id: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs'] file_system_identity: The file system identity used to authorize file access requests made using the S3 access point.
        :param pulumi.Input[builtins.str] volume_id: The ID of the FSx for OpenZFS volume that the S3 access point is attached to.
        """
        pulumi.set(__self__, "file_system_identity", file_system_identity)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="fileSystemIdentity")
    def file_system_identity(self) -> pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs']:
        """
        The file system identity used to authorize file access requests made using the S3 access point.
        """
        return pulumi.get(self, "file_system_identity")

    @file_system_identity.setter
    def file_system_identity(self, value: pulumi.Input['S3AccessPointAttachmentOpenZfsFileSystemIdentityArgs']):
        pulumi.set(self, "file_system_identity", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the FSx for OpenZFS volume that the S3 access point is attached to.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "volume_id", value)


if not MYPY:
    class S3AccessPointAttachmentS3AccessPointVpcConfigurationArgsDict(TypedDict):
        vpc_id: pulumi.Input[builtins.str]
        """
        Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.
        """
elif False:
    S3AccessPointAttachmentS3AccessPointVpcConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] vpc_id: Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        """
        Specifies the virtual private cloud (VPC) for the S3 access point VPC configuration, if one exists.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class S3AccessPointAttachmentS3AccessPointArgsDict(TypedDict):
        alias: NotRequired[pulumi.Input[builtins.str]]
        """
        The S3 access point's alias.
        """
        policy: NotRequired[Any]
        """
        The S3 access point's policy.
        """
        resource_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        The S3 access point's ARN.
        """
        vpc_configuration: NotRequired[pulumi.Input['S3AccessPointAttachmentS3AccessPointVpcConfigurationArgsDict']]
        """
        The S3 access point's virtual private cloud (VPC) configuration.
        """
elif False:
    S3AccessPointAttachmentS3AccessPointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class S3AccessPointAttachmentS3AccessPointArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 policy: Optional[Any] = None,
                 resource_arn: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_configuration: Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs']] = None):
        """
        :param pulumi.Input[builtins.str] alias: The S3 access point's alias.
        :param Any policy: The S3 access point's policy.
        :param pulumi.Input[builtins.str] resource_arn: The S3 access point's ARN.
        :param pulumi.Input['S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs'] vpc_configuration: The S3 access point's virtual private cloud (VPC) configuration.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if resource_arn is not None:
            pulumi.set(__self__, "resource_arn", resource_arn)
        if vpc_configuration is not None:
            pulumi.set(__self__, "vpc_configuration", vpc_configuration)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The S3 access point's alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[Any]:
        """
        The S3 access point's policy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[Any]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The S3 access point's ARN.
        """
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="vpcConfiguration")
    def vpc_configuration(self) -> Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs']]:
        """
        The S3 access point's virtual private cloud (VPC) configuration.
        """
        return pulumi.get(self, "vpc_configuration")

    @vpc_configuration.setter
    def vpc_configuration(self, value: Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointVpcConfigurationArgs']]):
        pulumi.set(self, "vpc_configuration", value)


