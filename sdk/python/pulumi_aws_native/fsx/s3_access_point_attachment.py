# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['S3AccessPointAttachmentArgs', 'S3AccessPointAttachment']

@pulumi.input_type
class S3AccessPointAttachmentArgs:
    def __init__(__self__, *,
                 open_zfs_configuration: pulumi.Input['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs'],
                 type: pulumi.Input['S3AccessPointAttachmentType'],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 s3_access_point: Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointArgs']] = None):
        """
        The set of arguments for constructing a S3AccessPointAttachment resource.
        :param pulumi.Input['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs'] open_zfs_configuration: The OpenZFSConfiguration of the S3 access point attachment.
        :param pulumi.Input['S3AccessPointAttachmentType'] type: The type of Amazon FSx volume that the S3 access point is attached to.
        :param pulumi.Input[builtins.str] name: The Name of the S3AccessPointAttachment
        :param pulumi.Input['S3AccessPointAttachmentS3AccessPointArgs'] s3_access_point: The S3 access point configuration of the S3 access point attachment.
        """
        pulumi.set(__self__, "open_zfs_configuration", open_zfs_configuration)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if s3_access_point is not None:
            pulumi.set(__self__, "s3_access_point", s3_access_point)

    @property
    @pulumi.getter(name="openZfsConfiguration")
    def open_zfs_configuration(self) -> pulumi.Input['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs']:
        """
        The OpenZFSConfiguration of the S3 access point attachment.
        """
        return pulumi.get(self, "open_zfs_configuration")

    @open_zfs_configuration.setter
    def open_zfs_configuration(self, value: pulumi.Input['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs']):
        pulumi.set(self, "open_zfs_configuration", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['S3AccessPointAttachmentType']:
        """
        The type of Amazon FSx volume that the S3 access point is attached to.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['S3AccessPointAttachmentType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Name of the S3AccessPointAttachment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="s3AccessPoint")
    def s3_access_point(self) -> Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointArgs']]:
        """
        The S3 access point configuration of the S3 access point attachment.
        """
        return pulumi.get(self, "s3_access_point")

    @s3_access_point.setter
    def s3_access_point(self, value: Optional[pulumi.Input['S3AccessPointAttachmentS3AccessPointArgs']]):
        pulumi.set(self, "s3_access_point", value)


@pulumi.type_token("aws-native:fsx:S3AccessPointAttachment")
class S3AccessPointAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 open_zfs_configuration: Optional[pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs', 'S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict']]] = None,
                 s3_access_point: Optional[pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointArgs', 'S3AccessPointAttachmentS3AccessPointArgsDict']]] = None,
                 type: Optional[pulumi.Input['S3AccessPointAttachmentType']] = None,
                 __props__=None):
        """
        Resource type definition for AWS::FSx::S3AccessPointAttachment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: The Name of the S3AccessPointAttachment
        :param pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs', 'S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict']] open_zfs_configuration: The OpenZFSConfiguration of the S3 access point attachment.
        :param pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointArgs', 'S3AccessPointAttachmentS3AccessPointArgsDict']] s3_access_point: The S3 access point configuration of the S3 access point attachment.
        :param pulumi.Input['S3AccessPointAttachmentType'] type: The type of Amazon FSx volume that the S3 access point is attached to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: S3AccessPointAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource type definition for AWS::FSx::S3AccessPointAttachment

        :param str resource_name: The name of the resource.
        :param S3AccessPointAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(S3AccessPointAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 open_zfs_configuration: Optional[pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgs', 'S3AccessPointAttachmentS3AccessPointOpenZfsConfigurationArgsDict']]] = None,
                 s3_access_point: Optional[pulumi.Input[Union['S3AccessPointAttachmentS3AccessPointArgs', 'S3AccessPointAttachmentS3AccessPointArgsDict']]] = None,
                 type: Optional[pulumi.Input['S3AccessPointAttachmentType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = S3AccessPointAttachmentArgs.__new__(S3AccessPointAttachmentArgs)

            __props__.__dict__["name"] = name
            if open_zfs_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'open_zfs_configuration'")
            __props__.__dict__["open_zfs_configuration"] = open_zfs_configuration
            __props__.__dict__["s3_access_point"] = s3_access_point
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["name", "openZfsConfiguration", "s3AccessPoint", "type"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(S3AccessPointAttachment, __self__).__init__(
            'aws-native:fsx:S3AccessPointAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'S3AccessPointAttachment':
        """
        Get an existing S3AccessPointAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = S3AccessPointAttachmentArgs.__new__(S3AccessPointAttachmentArgs)

        __props__.__dict__["name"] = None
        __props__.__dict__["open_zfs_configuration"] = None
        __props__.__dict__["s3_access_point"] = None
        __props__.__dict__["type"] = None
        return S3AccessPointAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The Name of the S3AccessPointAttachment
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openZfsConfiguration")
    def open_zfs_configuration(self) -> pulumi.Output['outputs.S3AccessPointAttachmentS3AccessPointOpenZfsConfiguration']:
        """
        The OpenZFSConfiguration of the S3 access point attachment.
        """
        return pulumi.get(self, "open_zfs_configuration")

    @property
    @pulumi.getter(name="s3AccessPoint")
    def s3_access_point(self) -> pulumi.Output[Optional['outputs.S3AccessPointAttachmentS3AccessPoint']]:
        """
        The S3 access point configuration of the S3 access point attachment.
        """
        return pulumi.get(self, "s3_access_point")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['S3AccessPointAttachmentType']:
        """
        The type of Amazon FSx volume that the S3 access point is attached to.
        """
        return pulumi.get(self, "type")

