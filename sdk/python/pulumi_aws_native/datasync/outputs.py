# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AgentTag',
    'LocationAzureBlobAzureBlobSasConfiguration',
    'LocationAzureBlobTag',
    'LocationEfsEc2Config',
    'LocationEfsTag',
    'LocationFSxLustreTag',
    'LocationFSxOntapNfs',
    'LocationFSxOntapNfsMountOptions',
    'LocationFSxOntapProtocol',
    'LocationFSxOntapSmb',
    'LocationFSxOntapSmbMountOptions',
    'LocationFSxOntapTag',
    'LocationFSxOpenZfsMountOptions',
    'LocationFSxOpenZfsNfs',
    'LocationFSxOpenZfsProtocol',
    'LocationFSxOpenZfsTag',
    'LocationFSxWindowsTag',
    'LocationHdfsNameNode',
    'LocationHdfsQopConfiguration',
    'LocationHdfsTag',
    'LocationNfsMountOptions',
    'LocationNfsOnPremConfig',
    'LocationNfsTag',
    'LocationObjectStorageTag',
    'LocationS3Tag',
    'LocationS3s3Config',
    'LocationSmbMountOptions',
    'LocationSmbTag',
    'StorageSystemServerConfiguration',
    'StorageSystemServerCredentials',
    'StorageSystemTag',
    'TaskFilterRule',
    'TaskOptions',
    'TaskReportConfig',
    'TaskReportConfigDestinationProperties',
    'TaskReportConfigDestinationPropertiesS3Properties',
    'TaskReportConfigOverridesProperties',
    'TaskReportConfigOverridesPropertiesDeletedProperties',
    'TaskReportConfigOverridesPropertiesSkippedProperties',
    'TaskReportConfigOverridesPropertiesTransferredProperties',
    'TaskReportConfigOverridesPropertiesVerifiedProperties',
    'TaskSchedule',
    'TaskTag',
]

@pulumi.output_type
class AgentTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        AgentTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationAzureBlobAzureBlobSasConfiguration(dict):
    """
    Specifies the shared access signature (SAS) that DataSync uses to access your Azure Blob Storage container.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "azureBlobSasToken":
            suggest = "azure_blob_sas_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationAzureBlobAzureBlobSasConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationAzureBlobAzureBlobSasConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationAzureBlobAzureBlobSasConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 azure_blob_sas_token: str):
        """
        Specifies the shared access signature (SAS) that DataSync uses to access your Azure Blob Storage container.
        :param str azure_blob_sas_token: Specifies the shared access signature (SAS) token, which indicates the permissions DataSync needs to access your Azure Blob Storage container.
        """
        LocationAzureBlobAzureBlobSasConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            azure_blob_sas_token=azure_blob_sas_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             azure_blob_sas_token: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("azure_blob_sas_token", azure_blob_sas_token)

    @property
    @pulumi.getter(name="azureBlobSasToken")
    def azure_blob_sas_token(self) -> str:
        """
        Specifies the shared access signature (SAS) token, which indicates the permissions DataSync needs to access your Azure Blob Storage container.
        """
        return pulumi.get(self, "azure_blob_sas_token")


@pulumi.output_type
class LocationAzureBlobTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationAzureBlobTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationEfsEc2Config(dict):
    """
    The subnet and security group that DataSync uses to access target EFS file system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupArns":
            suggest = "security_group_arns"
        elif key == "subnetArn":
            suggest = "subnet_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationEfsEc2Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationEfsEc2Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationEfsEc2Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_arns: Sequence[str],
                 subnet_arn: str):
        """
        The subnet and security group that DataSync uses to access target EFS file system.
        :param Sequence[str] security_group_arns: The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
        :param str subnet_arn: The ARN of the subnet that DataSync uses to access the target EFS file system.
        """
        LocationEfsEc2Config._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_arns=security_group_arns,
            subnet_arn=subnet_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_arns: Sequence[str],
             subnet_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("security_group_arns", security_group_arns)
        _setter("subnet_arn", subnet_arn)

    @property
    @pulumi.getter(name="securityGroupArns")
    def security_group_arns(self) -> Sequence[str]:
        """
        The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
        """
        return pulumi.get(self, "security_group_arns")

    @property
    @pulumi.getter(name="subnetArn")
    def subnet_arn(self) -> str:
        """
        The ARN of the subnet that DataSync uses to access the target EFS file system.
        """
        return pulumi.get(self, "subnet_arn")


@pulumi.output_type
class LocationEfsTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationEfsTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationFSxLustreTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationFSxLustreTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationFSxOntapNfs(dict):
    """
    NFS protocol configuration for FSx ONTAP file system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationFSxOntapNfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationFSxOntapNfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationFSxOntapNfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_options: 'outputs.LocationFSxOntapNfsMountOptions'):
        """
        NFS protocol configuration for FSx ONTAP file system.
        """
        LocationFSxOntapNfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: 'outputs.LocationFSxOntapNfsMountOptions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> 'outputs.LocationFSxOntapNfsMountOptions':
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class LocationFSxOntapNfsMountOptions(dict):
    """
    The NFS mount options that DataSync can use to mount your NFS share.
    """
    def __init__(__self__, *,
                 version: Optional['LocationFSxOntapNfsMountOptionsVersion'] = None):
        """
        The NFS mount options that DataSync can use to mount your NFS share.
        :param 'LocationFSxOntapNfsMountOptionsVersion' version: The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        LocationFSxOntapNfsMountOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional['LocationFSxOntapNfsMountOptionsVersion'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional['LocationFSxOntapNfsMountOptionsVersion']:
        """
        The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LocationFSxOntapProtocol(dict):
    """
    Configuration settings for NFS or SMB protocol.
    """
    def __init__(__self__, *,
                 nfs: Optional['outputs.LocationFSxOntapNfs'] = None,
                 smb: Optional['outputs.LocationFSxOntapSmb'] = None):
        """
        Configuration settings for NFS or SMB protocol.
        """
        LocationFSxOntapProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nfs=nfs,
            smb=smb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nfs: Optional['outputs.LocationFSxOntapNfs'] = None,
             smb: Optional['outputs.LocationFSxOntapSmb'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if nfs is not None:
            _setter("nfs", nfs)
        if smb is not None:
            _setter("smb", smb)

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.LocationFSxOntapNfs']:
        return pulumi.get(self, "nfs")

    @property
    @pulumi.getter
    def smb(self) -> Optional['outputs.LocationFSxOntapSmb']:
        return pulumi.get(self, "smb")


@pulumi.output_type
class LocationFSxOntapSmb(dict):
    """
    SMB protocol configuration for FSx ONTAP file system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationFSxOntapSmb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationFSxOntapSmb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationFSxOntapSmb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_options: 'outputs.LocationFSxOntapSmbMountOptions',
                 password: str,
                 user: str,
                 domain: Optional[str] = None):
        """
        SMB protocol configuration for FSx ONTAP file system.
        :param str password: The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
        :param str user: The user who can mount the share, has the permissions to access files and folders in the SMB share.
        :param str domain: The name of the Windows domain that the SMB server belongs to.
        """
        LocationFSxOntapSmb._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
            password=password,
            user=user,
            domain=domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: 'outputs.LocationFSxOntapSmbMountOptions',
             password: str,
             user: str,
             domain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("mount_options", mount_options)
        _setter("password", password)
        _setter("user", user)
        if domain is not None:
            _setter("domain", domain)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> 'outputs.LocationFSxOntapSmbMountOptions':
        return pulumi.get(self, "mount_options")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        The user who can mount the share, has the permissions to access files and folders in the SMB share.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The name of the Windows domain that the SMB server belongs to.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class LocationFSxOntapSmbMountOptions(dict):
    """
    The mount options used by DataSync to access the SMB server.
    """
    def __init__(__self__, *,
                 version: Optional['LocationFSxOntapSmbMountOptionsVersion'] = None):
        """
        The mount options used by DataSync to access the SMB server.
        :param 'LocationFSxOntapSmbMountOptionsVersion' version: The specific SMB version that you want DataSync to use to mount your SMB share.
        """
        LocationFSxOntapSmbMountOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional['LocationFSxOntapSmbMountOptionsVersion'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional['LocationFSxOntapSmbMountOptionsVersion']:
        """
        The specific SMB version that you want DataSync to use to mount your SMB share.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LocationFSxOntapTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationFSxOntapTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationFSxOpenZfsMountOptions(dict):
    """
    The NFS mount options that DataSync can use to mount your NFS share.
    """
    def __init__(__self__, *,
                 version: Optional['LocationFSxOpenZfsMountOptionsVersion'] = None):
        """
        The NFS mount options that DataSync can use to mount your NFS share.
        :param 'LocationFSxOpenZfsMountOptionsVersion' version: The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        LocationFSxOpenZfsMountOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional['LocationFSxOpenZfsMountOptionsVersion'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional['LocationFSxOpenZfsMountOptionsVersion']:
        """
        The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LocationFSxOpenZfsNfs(dict):
    """
    FSx OpenZFS file system NFS protocol information
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountOptions":
            suggest = "mount_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationFSxOpenZfsNfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationFSxOpenZfsNfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationFSxOpenZfsNfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_options: 'outputs.LocationFSxOpenZfsMountOptions'):
        """
        FSx OpenZFS file system NFS protocol information
        """
        LocationFSxOpenZfsNfs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_options=mount_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_options: 'outputs.LocationFSxOpenZfsMountOptions',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("mount_options", mount_options)

    @property
    @pulumi.getter(name="mountOptions")
    def mount_options(self) -> 'outputs.LocationFSxOpenZfsMountOptions':
        return pulumi.get(self, "mount_options")


@pulumi.output_type
class LocationFSxOpenZfsProtocol(dict):
    """
    Configuration settings for an NFS or SMB protocol, currently only support NFS
    """
    def __init__(__self__, *,
                 nfs: Optional['outputs.LocationFSxOpenZfsNfs'] = None):
        """
        Configuration settings for an NFS or SMB protocol, currently only support NFS
        """
        LocationFSxOpenZfsProtocol._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            nfs=nfs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             nfs: Optional['outputs.LocationFSxOpenZfsNfs'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if nfs is not None:
            _setter("nfs", nfs)

    @property
    @pulumi.getter
    def nfs(self) -> Optional['outputs.LocationFSxOpenZfsNfs']:
        return pulumi.get(self, "nfs")


@pulumi.output_type
class LocationFSxOpenZfsTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationFSxOpenZfsTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationFSxWindowsTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationFSxWindowsTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationHdfsNameNode(dict):
    """
    HDFS Name Node IP and port information.
    """
    def __init__(__self__, *,
                 hostname: str,
                 port: int):
        """
        HDFS Name Node IP and port information.
        :param str hostname: The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
        :param int port: The port on which the Name Node is listening on for client requests.
        """
        LocationHdfsNameNode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: str,
             port: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hostname", hostname)
        _setter("port", port)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port on which the Name Node is listening on for client requests.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class LocationHdfsQopConfiguration(dict):
    """
    Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataTransferProtection":
            suggest = "data_transfer_protection"
        elif key == "rpcProtection":
            suggest = "rpc_protection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationHdfsQopConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationHdfsQopConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationHdfsQopConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_transfer_protection: Optional['LocationHdfsQopConfigurationDataTransferProtection'] = None,
                 rpc_protection: Optional['LocationHdfsQopConfigurationRpcProtection'] = None):
        """
        Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
        :param 'LocationHdfsQopConfigurationDataTransferProtection' data_transfer_protection: Configuration for Data Transfer Protection.
        :param 'LocationHdfsQopConfigurationRpcProtection' rpc_protection: Configuration for RPC Protection.
        """
        LocationHdfsQopConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_transfer_protection=data_transfer_protection,
            rpc_protection=rpc_protection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_transfer_protection: Optional['LocationHdfsQopConfigurationDataTransferProtection'] = None,
             rpc_protection: Optional['LocationHdfsQopConfigurationRpcProtection'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_transfer_protection is not None:
            _setter("data_transfer_protection", data_transfer_protection)
        if rpc_protection is not None:
            _setter("rpc_protection", rpc_protection)

    @property
    @pulumi.getter(name="dataTransferProtection")
    def data_transfer_protection(self) -> Optional['LocationHdfsQopConfigurationDataTransferProtection']:
        """
        Configuration for Data Transfer Protection.
        """
        return pulumi.get(self, "data_transfer_protection")

    @property
    @pulumi.getter(name="rpcProtection")
    def rpc_protection(self) -> Optional['LocationHdfsQopConfigurationRpcProtection']:
        """
        Configuration for RPC Protection.
        """
        return pulumi.get(self, "rpc_protection")


@pulumi.output_type
class LocationHdfsTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        LocationHdfsTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationNfsMountOptions(dict):
    """
    The NFS mount options that DataSync can use to mount your NFS share.
    """
    def __init__(__self__, *,
                 version: Optional['LocationNfsMountOptionsVersion'] = None):
        """
        The NFS mount options that DataSync can use to mount your NFS share.
        :param 'LocationNfsMountOptionsVersion' version: The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        LocationNfsMountOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional['LocationNfsMountOptionsVersion'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional['LocationNfsMountOptionsVersion']:
        """
        The specific NFS version that you want DataSync to use to mount your NFS share.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LocationNfsOnPremConfig(dict):
    """
    Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentArns":
            suggest = "agent_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationNfsOnPremConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationNfsOnPremConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationNfsOnPremConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_arns: Sequence[str]):
        """
        Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
        :param Sequence[str] agent_arns: ARN(s) of the agent(s) to use for an NFS location.
        """
        LocationNfsOnPremConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent_arns=agent_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent_arns: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("agent_arns", agent_arns)

    @property
    @pulumi.getter(name="agentArns")
    def agent_arns(self) -> Sequence[str]:
        """
        ARN(s) of the agent(s) to use for an NFS location.
        """
        return pulumi.get(self, "agent_arns")


@pulumi.output_type
class LocationNfsTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationNfsTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationObjectStorageTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationObjectStorageTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationS3Tag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationS3Tag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LocationS3s3Config(dict):
    """
    The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketAccessRoleArn":
            suggest = "bucket_access_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationS3s3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationS3s3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationS3s3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_access_role_arn: str):
        """
        The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
        :param str bucket_access_role_arn: The ARN of the IAM role of the Amazon S3 bucket.
        """
        LocationS3s3Config._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_access_role_arn=bucket_access_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_access_role_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket_access_role_arn", bucket_access_role_arn)

    @property
    @pulumi.getter(name="bucketAccessRoleArn")
    def bucket_access_role_arn(self) -> str:
        """
        The ARN of the IAM role of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_access_role_arn")


@pulumi.output_type
class LocationSmbMountOptions(dict):
    """
    The mount options used by DataSync to access the SMB server.
    """
    def __init__(__self__, *,
                 version: Optional['LocationSmbMountOptionsVersion'] = None):
        """
        The mount options used by DataSync to access the SMB server.
        :param 'LocationSmbMountOptionsVersion' version: The specific SMB version that you want DataSync to use to mount your SMB share.
        """
        LocationSmbMountOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             version: Optional['LocationSmbMountOptionsVersion'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def version(self) -> Optional['LocationSmbMountOptionsVersion']:
        """
        The specific SMB version that you want DataSync to use to mount your SMB share.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class LocationSmbTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        LocationSmbTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageSystemServerConfiguration(dict):
    """
    The server name and network port required to connect with the management interface of the on-premises storage system.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverHostname":
            suggest = "server_hostname"
        elif key == "serverPort":
            suggest = "server_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageSystemServerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageSystemServerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageSystemServerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_hostname: str,
                 server_port: Optional[int] = None):
        """
        The server name and network port required to connect with the management interface of the on-premises storage system.
        :param str server_hostname: The domain name or IP address of the storage system's management interface.
        :param int server_port: The network port needed to access the system's management interface
        """
        StorageSystemServerConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            server_hostname=server_hostname,
            server_port=server_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             server_hostname: str,
             server_port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("server_hostname", server_hostname)
        if server_port is not None:
            _setter("server_port", server_port)

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> str:
        """
        The domain name or IP address of the storage system's management interface.
        """
        return pulumi.get(self, "server_hostname")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[int]:
        """
        The network port needed to access the system's management interface
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class StorageSystemServerCredentials(dict):
    """
    The username and password for accessing your on-premises storage system's management interface.
    """
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        The username and password for accessing your on-premises storage system's management interface.
        :param str password: The password for your storage system's management interface
        :param str username: The username for your storage system's management interface.
        """
        StorageSystemServerCredentials._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password for your storage system's management interface
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for your storage system's management interface.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class StorageSystemTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        StorageSystemTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskFilterRule(dict):
    """
    Specifies which files folders and objects to include or exclude when transferring files from source to destination.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskFilterRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskFilterRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskFilterRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: Optional['TaskFilterRuleFilterType'] = None,
                 value: Optional[str] = None):
        """
        Specifies which files folders and objects to include or exclude when transferring files from source to destination.
        :param 'TaskFilterRuleFilterType' filter_type: The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
        :param str value: A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
        """
        TaskFilterRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_type=filter_type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_type: Optional['TaskFilterRuleFilterType'] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filter_type is not None:
            _setter("filter_type", filter_type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional['TaskFilterRuleFilterType']:
        """
        The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskOptions(dict):
    """
    Represents the options that are available to control the behavior of a StartTaskExecution operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bytesPerSecond":
            suggest = "bytes_per_second"
        elif key == "logLevel":
            suggest = "log_level"
        elif key == "objectTags":
            suggest = "object_tags"
        elif key == "overwriteMode":
            suggest = "overwrite_mode"
        elif key == "posixPermissions":
            suggest = "posix_permissions"
        elif key == "preserveDeletedFiles":
            suggest = "preserve_deleted_files"
        elif key == "preserveDevices":
            suggest = "preserve_devices"
        elif key == "securityDescriptorCopyFlags":
            suggest = "security_descriptor_copy_flags"
        elif key == "taskQueueing":
            suggest = "task_queueing"
        elif key == "transferMode":
            suggest = "transfer_mode"
        elif key == "verifyMode":
            suggest = "verify_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 atime: Optional['TaskOptionsAtime'] = None,
                 bytes_per_second: Optional[int] = None,
                 gid: Optional['TaskOptionsGid'] = None,
                 log_level: Optional['TaskOptionsLogLevel'] = None,
                 mtime: Optional['TaskOptionsMtime'] = None,
                 object_tags: Optional['TaskOptionsObjectTags'] = None,
                 overwrite_mode: Optional['TaskOptionsOverwriteMode'] = None,
                 posix_permissions: Optional['TaskOptionsPosixPermissions'] = None,
                 preserve_deleted_files: Optional['TaskOptionsPreserveDeletedFiles'] = None,
                 preserve_devices: Optional['TaskOptionsPreserveDevices'] = None,
                 security_descriptor_copy_flags: Optional['TaskOptionsSecurityDescriptorCopyFlags'] = None,
                 task_queueing: Optional['TaskOptionsTaskQueueing'] = None,
                 transfer_mode: Optional['TaskOptionsTransferMode'] = None,
                 uid: Optional['TaskOptionsUid'] = None,
                 verify_mode: Optional['TaskOptionsVerifyMode'] = None):
        """
        Represents the options that are available to control the behavior of a StartTaskExecution operation.
        :param 'TaskOptionsAtime' atime: A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
        :param int bytes_per_second: A value that limits the bandwidth used by AWS DataSync.
        :param 'TaskOptionsGid' gid: The group ID (GID) of the file's owners.
        :param 'TaskOptionsLogLevel' log_level: A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
        :param 'TaskOptionsMtime' mtime: A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
        :param 'TaskOptionsObjectTags' object_tags: A value that determines whether object tags should be read from the source object store and written to the destination object store.
        :param 'TaskOptionsOverwriteMode' overwrite_mode: A value that determines whether files at the destination should be overwritten or preserved when copying files.
        :param 'TaskOptionsPosixPermissions' posix_permissions: A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
        :param 'TaskOptionsPreserveDeletedFiles' preserve_deleted_files: A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
        :param 'TaskOptionsPreserveDevices' preserve_devices: A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
        :param 'TaskOptionsSecurityDescriptorCopyFlags' security_descriptor_copy_flags: A value that determines which components of the SMB security descriptor are copied during transfer.
        :param 'TaskOptionsTaskQueueing' task_queueing: A value that determines whether tasks should be queued before executing the tasks.
        :param 'TaskOptionsTransferMode' transfer_mode: A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
        :param 'TaskOptionsUid' uid: The user ID (UID) of the file's owner.
        :param 'TaskOptionsVerifyMode' verify_mode: A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
        """
        TaskOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            atime=atime,
            bytes_per_second=bytes_per_second,
            gid=gid,
            log_level=log_level,
            mtime=mtime,
            object_tags=object_tags,
            overwrite_mode=overwrite_mode,
            posix_permissions=posix_permissions,
            preserve_deleted_files=preserve_deleted_files,
            preserve_devices=preserve_devices,
            security_descriptor_copy_flags=security_descriptor_copy_flags,
            task_queueing=task_queueing,
            transfer_mode=transfer_mode,
            uid=uid,
            verify_mode=verify_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             atime: Optional['TaskOptionsAtime'] = None,
             bytes_per_second: Optional[int] = None,
             gid: Optional['TaskOptionsGid'] = None,
             log_level: Optional['TaskOptionsLogLevel'] = None,
             mtime: Optional['TaskOptionsMtime'] = None,
             object_tags: Optional['TaskOptionsObjectTags'] = None,
             overwrite_mode: Optional['TaskOptionsOverwriteMode'] = None,
             posix_permissions: Optional['TaskOptionsPosixPermissions'] = None,
             preserve_deleted_files: Optional['TaskOptionsPreserveDeletedFiles'] = None,
             preserve_devices: Optional['TaskOptionsPreserveDevices'] = None,
             security_descriptor_copy_flags: Optional['TaskOptionsSecurityDescriptorCopyFlags'] = None,
             task_queueing: Optional['TaskOptionsTaskQueueing'] = None,
             transfer_mode: Optional['TaskOptionsTransferMode'] = None,
             uid: Optional['TaskOptionsUid'] = None,
             verify_mode: Optional['TaskOptionsVerifyMode'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if atime is not None:
            _setter("atime", atime)
        if bytes_per_second is not None:
            _setter("bytes_per_second", bytes_per_second)
        if gid is not None:
            _setter("gid", gid)
        if log_level is not None:
            _setter("log_level", log_level)
        if mtime is not None:
            _setter("mtime", mtime)
        if object_tags is not None:
            _setter("object_tags", object_tags)
        if overwrite_mode is not None:
            _setter("overwrite_mode", overwrite_mode)
        if posix_permissions is not None:
            _setter("posix_permissions", posix_permissions)
        if preserve_deleted_files is not None:
            _setter("preserve_deleted_files", preserve_deleted_files)
        if preserve_devices is not None:
            _setter("preserve_devices", preserve_devices)
        if security_descriptor_copy_flags is not None:
            _setter("security_descriptor_copy_flags", security_descriptor_copy_flags)
        if task_queueing is not None:
            _setter("task_queueing", task_queueing)
        if transfer_mode is not None:
            _setter("transfer_mode", transfer_mode)
        if uid is not None:
            _setter("uid", uid)
        if verify_mode is not None:
            _setter("verify_mode", verify_mode)

    @property
    @pulumi.getter
    def atime(self) -> Optional['TaskOptionsAtime']:
        """
        A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
        """
        return pulumi.get(self, "atime")

    @property
    @pulumi.getter(name="bytesPerSecond")
    def bytes_per_second(self) -> Optional[int]:
        """
        A value that limits the bandwidth used by AWS DataSync.
        """
        return pulumi.get(self, "bytes_per_second")

    @property
    @pulumi.getter
    def gid(self) -> Optional['TaskOptionsGid']:
        """
        The group ID (GID) of the file's owners.
        """
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional['TaskOptionsLogLevel']:
        """
        A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def mtime(self) -> Optional['TaskOptionsMtime']:
        """
        A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
        """
        return pulumi.get(self, "mtime")

    @property
    @pulumi.getter(name="objectTags")
    def object_tags(self) -> Optional['TaskOptionsObjectTags']:
        """
        A value that determines whether object tags should be read from the source object store and written to the destination object store.
        """
        return pulumi.get(self, "object_tags")

    @property
    @pulumi.getter(name="overwriteMode")
    def overwrite_mode(self) -> Optional['TaskOptionsOverwriteMode']:
        """
        A value that determines whether files at the destination should be overwritten or preserved when copying files.
        """
        return pulumi.get(self, "overwrite_mode")

    @property
    @pulumi.getter(name="posixPermissions")
    def posix_permissions(self) -> Optional['TaskOptionsPosixPermissions']:
        """
        A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
        """
        return pulumi.get(self, "posix_permissions")

    @property
    @pulumi.getter(name="preserveDeletedFiles")
    def preserve_deleted_files(self) -> Optional['TaskOptionsPreserveDeletedFiles']:
        """
        A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
        """
        return pulumi.get(self, "preserve_deleted_files")

    @property
    @pulumi.getter(name="preserveDevices")
    def preserve_devices(self) -> Optional['TaskOptionsPreserveDevices']:
        """
        A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
        """
        return pulumi.get(self, "preserve_devices")

    @property
    @pulumi.getter(name="securityDescriptorCopyFlags")
    def security_descriptor_copy_flags(self) -> Optional['TaskOptionsSecurityDescriptorCopyFlags']:
        """
        A value that determines which components of the SMB security descriptor are copied during transfer.
        """
        return pulumi.get(self, "security_descriptor_copy_flags")

    @property
    @pulumi.getter(name="taskQueueing")
    def task_queueing(self) -> Optional['TaskOptionsTaskQueueing']:
        """
        A value that determines whether tasks should be queued before executing the tasks.
        """
        return pulumi.get(self, "task_queueing")

    @property
    @pulumi.getter(name="transferMode")
    def transfer_mode(self) -> Optional['TaskOptionsTransferMode']:
        """
        A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
        """
        return pulumi.get(self, "transfer_mode")

    @property
    @pulumi.getter
    def uid(self) -> Optional['TaskOptionsUid']:
        """
        The user ID (UID) of the file's owner.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="verifyMode")
    def verify_mode(self) -> Optional['TaskOptionsVerifyMode']:
        """
        A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
        """
        return pulumi.get(self, "verify_mode")


@pulumi.output_type
class TaskReportConfig(dict):
    """
    Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputType":
            suggest = "output_type"
        elif key == "objectVersionIds":
            suggest = "object_version_ids"
        elif key == "reportLevel":
            suggest = "report_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: 'outputs.TaskReportConfigDestinationProperties',
                 output_type: 'TaskReportConfigOutputType',
                 object_version_ids: Optional['TaskReportConfigObjectVersionIds'] = None,
                 overrides: Optional['outputs.TaskReportConfigOverridesProperties'] = None,
                 report_level: Optional['TaskReportConfigReportLevel'] = None):
        """
        Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
        :param 'TaskReportConfigDestinationProperties' destination: Specifies where DataSync uploads your task report.
        :param 'TaskReportConfigOutputType' output_type: Specifies the type of task report that you want.
        :param 'TaskReportConfigObjectVersionIds' object_version_ids: Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.
        :param 'TaskReportConfigOverridesProperties' overrides: Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
        :param 'TaskReportConfigReportLevel' report_level: Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        TaskReportConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            output_type=output_type,
            object_version_ids=object_version_ids,
            overrides=overrides,
            report_level=report_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: 'outputs.TaskReportConfigDestinationProperties',
             output_type: 'TaskReportConfigOutputType',
             object_version_ids: Optional['TaskReportConfigObjectVersionIds'] = None,
             overrides: Optional['outputs.TaskReportConfigOverridesProperties'] = None,
             report_level: Optional['TaskReportConfigReportLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destination", destination)
        _setter("output_type", output_type)
        if object_version_ids is not None:
            _setter("object_version_ids", object_version_ids)
        if overrides is not None:
            _setter("overrides", overrides)
        if report_level is not None:
            _setter("report_level", report_level)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.TaskReportConfigDestinationProperties':
        """
        Specifies where DataSync uploads your task report.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="outputType")
    def output_type(self) -> 'TaskReportConfigOutputType':
        """
        Specifies the type of task report that you want.
        """
        return pulumi.get(self, "output_type")

    @property
    @pulumi.getter(name="objectVersionIds")
    def object_version_ids(self) -> Optional['TaskReportConfigObjectVersionIds']:
        """
        Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.
        """
        return pulumi.get(self, "object_version_ids")

    @property
    @pulumi.getter
    def overrides(self) -> Optional['outputs.TaskReportConfigOverridesProperties']:
        """
        Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
        """
        return pulumi.get(self, "overrides")

    @property
    @pulumi.getter(name="reportLevel")
    def report_level(self) -> Optional['TaskReportConfigReportLevel']:
        """
        Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        return pulumi.get(self, "report_level")


@pulumi.output_type
class TaskReportConfigDestinationProperties(dict):
    """
    Specifies where DataSync uploads your task report.
    """
    def __init__(__self__, *,
                 s3: Optional['outputs.TaskReportConfigDestinationPropertiesS3Properties'] = None):
        """
        Specifies where DataSync uploads your task report.
        :param 'TaskReportConfigDestinationPropertiesS3Properties' s3: Specifies the Amazon S3 bucket where DataSync uploads your task report.
        """
        TaskReportConfigDestinationProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3: Optional['outputs.TaskReportConfigDestinationPropertiesS3Properties'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.TaskReportConfigDestinationPropertiesS3Properties']:
        """
        Specifies the Amazon S3 bucket where DataSync uploads your task report.
        """
        return pulumi.get(self, "s3")


@pulumi.output_type
class TaskReportConfigDestinationPropertiesS3Properties(dict):
    """
    Specifies the Amazon S3 bucket where DataSync uploads your task report.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketAccessRoleArn":
            suggest = "bucket_access_role_arn"
        elif key == "s3BucketArn":
            suggest = "s3_bucket_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfigDestinationPropertiesS3Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfigDestinationPropertiesS3Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfigDestinationPropertiesS3Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_access_role_arn: Optional[str] = None,
                 s3_bucket_arn: Optional[str] = None,
                 subdirectory: Optional[str] = None):
        """
        Specifies the Amazon S3 bucket where DataSync uploads your task report.
        :param str bucket_access_role_arn: Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.
        :param str s3_bucket_arn: Specifies the ARN of the S3 bucket where Datasync uploads your report.
        :param str subdirectory: Specifies a bucket prefix for your report.
        """
        TaskReportConfigDestinationPropertiesS3Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_access_role_arn=bucket_access_role_arn,
            s3_bucket_arn=s3_bucket_arn,
            subdirectory=subdirectory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_access_role_arn: Optional[str] = None,
             s3_bucket_arn: Optional[str] = None,
             subdirectory: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bucket_access_role_arn is not None:
            _setter("bucket_access_role_arn", bucket_access_role_arn)
        if s3_bucket_arn is not None:
            _setter("s3_bucket_arn", s3_bucket_arn)
        if subdirectory is not None:
            _setter("subdirectory", subdirectory)

    @property
    @pulumi.getter(name="bucketAccessRoleArn")
    def bucket_access_role_arn(self) -> Optional[str]:
        """
        Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.
        """
        return pulumi.get(self, "bucket_access_role_arn")

    @property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> Optional[str]:
        """
        Specifies the ARN of the S3 bucket where Datasync uploads your report.
        """
        return pulumi.get(self, "s3_bucket_arn")

    @property
    @pulumi.getter
    def subdirectory(self) -> Optional[str]:
        """
        Specifies a bucket prefix for your report.
        """
        return pulumi.get(self, "subdirectory")


@pulumi.output_type
class TaskReportConfigOverridesProperties(dict):
    """
    Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
    """
    def __init__(__self__, *,
                 deleted: Optional['outputs.TaskReportConfigOverridesPropertiesDeletedProperties'] = None,
                 skipped: Optional['outputs.TaskReportConfigOverridesPropertiesSkippedProperties'] = None,
                 transferred: Optional['outputs.TaskReportConfigOverridesPropertiesTransferredProperties'] = None,
                 verified: Optional['outputs.TaskReportConfigOverridesPropertiesVerifiedProperties'] = None):
        """
        Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
        :param 'TaskReportConfigOverridesPropertiesDeletedProperties' deleted: Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
        :param 'TaskReportConfigOverridesPropertiesSkippedProperties' skipped: Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
        :param 'TaskReportConfigOverridesPropertiesTransferredProperties' transferred: Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
        :param 'TaskReportConfigOverridesPropertiesVerifiedProperties' verified: Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
        """
        TaskReportConfigOverridesProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deleted=deleted,
            skipped=skipped,
            transferred=transferred,
            verified=verified,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deleted: Optional['outputs.TaskReportConfigOverridesPropertiesDeletedProperties'] = None,
             skipped: Optional['outputs.TaskReportConfigOverridesPropertiesSkippedProperties'] = None,
             transferred: Optional['outputs.TaskReportConfigOverridesPropertiesTransferredProperties'] = None,
             verified: Optional['outputs.TaskReportConfigOverridesPropertiesVerifiedProperties'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if deleted is not None:
            _setter("deleted", deleted)
        if skipped is not None:
            _setter("skipped", skipped)
        if transferred is not None:
            _setter("transferred", transferred)
        if verified is not None:
            _setter("verified", verified)

    @property
    @pulumi.getter
    def deleted(self) -> Optional['outputs.TaskReportConfigOverridesPropertiesDeletedProperties']:
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def skipped(self) -> Optional['outputs.TaskReportConfigOverridesPropertiesSkippedProperties']:
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
        """
        return pulumi.get(self, "skipped")

    @property
    @pulumi.getter
    def transferred(self) -> Optional['outputs.TaskReportConfigOverridesPropertiesTransferredProperties']:
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
        """
        return pulumi.get(self, "transferred")

    @property
    @pulumi.getter
    def verified(self) -> Optional['outputs.TaskReportConfigOverridesPropertiesVerifiedProperties']:
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
        """
        return pulumi.get(self, "verified")


@pulumi.output_type
class TaskReportConfigOverridesPropertiesDeletedProperties(dict):
    """
    Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportLevel":
            suggest = "report_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfigOverridesPropertiesDeletedProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfigOverridesPropertiesDeletedProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfigOverridesPropertiesDeletedProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 report_level: Optional['TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel'] = None):
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
        :param 'TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel' report_level: Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        TaskReportConfigOverridesPropertiesDeletedProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            report_level=report_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             report_level: Optional['TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if report_level is not None:
            _setter("report_level", report_level)

    @property
    @pulumi.getter(name="reportLevel")
    def report_level(self) -> Optional['TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel']:
        """
        Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        return pulumi.get(self, "report_level")


@pulumi.output_type
class TaskReportConfigOverridesPropertiesSkippedProperties(dict):
    """
    Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportLevel":
            suggest = "report_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfigOverridesPropertiesSkippedProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfigOverridesPropertiesSkippedProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfigOverridesPropertiesSkippedProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 report_level: Optional['TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel'] = None):
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
        :param 'TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel' report_level: Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        TaskReportConfigOverridesPropertiesSkippedProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            report_level=report_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             report_level: Optional['TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if report_level is not None:
            _setter("report_level", report_level)

    @property
    @pulumi.getter(name="reportLevel")
    def report_level(self) -> Optional['TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel']:
        """
        Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        return pulumi.get(self, "report_level")


@pulumi.output_type
class TaskReportConfigOverridesPropertiesTransferredProperties(dict):
    """
    Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportLevel":
            suggest = "report_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfigOverridesPropertiesTransferredProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfigOverridesPropertiesTransferredProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfigOverridesPropertiesTransferredProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 report_level: Optional['TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel'] = None):
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
        :param 'TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel' report_level: Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        TaskReportConfigOverridesPropertiesTransferredProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            report_level=report_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             report_level: Optional['TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if report_level is not None:
            _setter("report_level", report_level)

    @property
    @pulumi.getter(name="reportLevel")
    def report_level(self) -> Optional['TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel']:
        """
        Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        return pulumi.get(self, "report_level")


@pulumi.output_type
class TaskReportConfigOverridesPropertiesVerifiedProperties(dict):
    """
    Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportLevel":
            suggest = "report_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskReportConfigOverridesPropertiesVerifiedProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskReportConfigOverridesPropertiesVerifiedProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskReportConfigOverridesPropertiesVerifiedProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 report_level: Optional['TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel'] = None):
        """
        Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
        :param 'TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel' report_level: Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        TaskReportConfigOverridesPropertiesVerifiedProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            report_level=report_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             report_level: Optional['TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if report_level is not None:
            _setter("report_level", report_level)

    @property
    @pulumi.getter(name="reportLevel")
    def report_level(self) -> Optional['TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel']:
        """
        Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        """
        return pulumi.get(self, "report_level")


@pulumi.output_type
class TaskSchedule(dict):
    """
    Specifies the schedule you want your task to use for repeated executions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleExpression":
            suggest = "schedule_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_expression: str):
        """
        Specifies the schedule you want your task to use for repeated executions.
        :param str schedule_expression: A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
        """
        TaskSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_expression=schedule_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_expression: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> str:
        """
        A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
        """
        return pulumi.get(self, "schedule_expression")


@pulumi.output_type
class TaskTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key for an AWS resource tag.
        :param str value: The value for an AWS resource tag.
        """
        TaskTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key for an AWS resource tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for an AWS resource tag.
        """
        return pulumi.get(self, "value")


