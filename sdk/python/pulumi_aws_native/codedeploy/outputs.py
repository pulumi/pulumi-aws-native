# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeploymentConfigMinimumHealthyHosts',
    'DeploymentConfigMinimumHealthyHostsPerZone',
    'DeploymentConfigTimeBasedCanary',
    'DeploymentConfigTimeBasedLinear',
    'DeploymentConfigTrafficRoutingConfig',
    'DeploymentConfigZonalConfig',
]

@pulumi.output_type
class DeploymentConfigMinimumHealthyHosts(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentConfigMinimumHealthyHostsPerZone(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentConfigTimeBasedCanary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canaryInterval":
            suggest = "canary_interval"
        elif key == "canaryPercentage":
            suggest = "canary_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigTimeBasedCanary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigTimeBasedCanary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigTimeBasedCanary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canary_interval: int,
                 canary_percentage: int):
        pulumi.set(__self__, "canary_interval", canary_interval)
        pulumi.set(__self__, "canary_percentage", canary_percentage)

    @property
    @pulumi.getter(name="canaryInterval")
    def canary_interval(self) -> int:
        return pulumi.get(self, "canary_interval")

    @property
    @pulumi.getter(name="canaryPercentage")
    def canary_percentage(self) -> int:
        return pulumi.get(self, "canary_percentage")


@pulumi.output_type
class DeploymentConfigTimeBasedLinear(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linearInterval":
            suggest = "linear_interval"
        elif key == "linearPercentage":
            suggest = "linear_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigTimeBasedLinear. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigTimeBasedLinear.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigTimeBasedLinear.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 linear_interval: int,
                 linear_percentage: int):
        pulumi.set(__self__, "linear_interval", linear_interval)
        pulumi.set(__self__, "linear_percentage", linear_percentage)

    @property
    @pulumi.getter(name="linearInterval")
    def linear_interval(self) -> int:
        return pulumi.get(self, "linear_interval")

    @property
    @pulumi.getter(name="linearPercentage")
    def linear_percentage(self) -> int:
        return pulumi.get(self, "linear_percentage")


@pulumi.output_type
class DeploymentConfigTrafficRoutingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeBasedCanary":
            suggest = "time_based_canary"
        elif key == "timeBasedLinear":
            suggest = "time_based_linear"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigTrafficRoutingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigTrafficRoutingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigTrafficRoutingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 time_based_canary: Optional['outputs.DeploymentConfigTimeBasedCanary'] = None,
                 time_based_linear: Optional['outputs.DeploymentConfigTimeBasedLinear'] = None):
        pulumi.set(__self__, "type", type)
        if time_based_canary is not None:
            pulumi.set(__self__, "time_based_canary", time_based_canary)
        if time_based_linear is not None:
            pulumi.set(__self__, "time_based_linear", time_based_linear)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="timeBasedCanary")
    def time_based_canary(self) -> Optional['outputs.DeploymentConfigTimeBasedCanary']:
        return pulumi.get(self, "time_based_canary")

    @property
    @pulumi.getter(name="timeBasedLinear")
    def time_based_linear(self) -> Optional['outputs.DeploymentConfigTimeBasedLinear']:
        return pulumi.get(self, "time_based_linear")


@pulumi.output_type
class DeploymentConfigZonalConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstZoneMonitorDurationInSeconds":
            suggest = "first_zone_monitor_duration_in_seconds"
        elif key == "minimumHealthyHostsPerZone":
            suggest = "minimum_healthy_hosts_per_zone"
        elif key == "monitorDurationInSeconds":
            suggest = "monitor_duration_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigZonalConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigZonalConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigZonalConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 first_zone_monitor_duration_in_seconds: Optional[int] = None,
                 minimum_healthy_hosts_per_zone: Optional['outputs.DeploymentConfigMinimumHealthyHostsPerZone'] = None,
                 monitor_duration_in_seconds: Optional[int] = None):
        if first_zone_monitor_duration_in_seconds is not None:
            pulumi.set(__self__, "first_zone_monitor_duration_in_seconds", first_zone_monitor_duration_in_seconds)
        if minimum_healthy_hosts_per_zone is not None:
            pulumi.set(__self__, "minimum_healthy_hosts_per_zone", minimum_healthy_hosts_per_zone)
        if monitor_duration_in_seconds is not None:
            pulumi.set(__self__, "monitor_duration_in_seconds", monitor_duration_in_seconds)

    @property
    @pulumi.getter(name="firstZoneMonitorDurationInSeconds")
    def first_zone_monitor_duration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "first_zone_monitor_duration_in_seconds")

    @property
    @pulumi.getter(name="minimumHealthyHostsPerZone")
    def minimum_healthy_hosts_per_zone(self) -> Optional['outputs.DeploymentConfigMinimumHealthyHostsPerZone']:
        return pulumi.get(self, "minimum_healthy_hosts_per_zone")

    @property
    @pulumi.getter(name="monitorDurationInSeconds")
    def monitor_duration_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "monitor_duration_in_seconds")


