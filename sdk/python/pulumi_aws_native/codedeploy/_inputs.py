# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DeploymentConfigMinimumHealthyHostsPerZoneArgs',
    'DeploymentConfigMinimumHealthyHostsArgs',
    'DeploymentConfigTimeBasedCanaryArgs',
    'DeploymentConfigTimeBasedLinearArgs',
    'DeploymentConfigTrafficRoutingConfigArgs',
    'DeploymentConfigZonalConfigArgs',
]

@pulumi.input_type
class DeploymentConfigMinimumHealthyHostsPerZoneArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentConfigMinimumHealthyHostsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeploymentConfigTimeBasedCanaryArgs:
    def __init__(__self__, *,
                 canary_interval: pulumi.Input[int],
                 canary_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "canary_interval", canary_interval)
        pulumi.set(__self__, "canary_percentage", canary_percentage)

    @property
    @pulumi.getter(name="canaryInterval")
    def canary_interval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "canary_interval")

    @canary_interval.setter
    def canary_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "canary_interval", value)

    @property
    @pulumi.getter(name="canaryPercentage")
    def canary_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "canary_percentage")

    @canary_percentage.setter
    def canary_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "canary_percentage", value)


@pulumi.input_type
class DeploymentConfigTimeBasedLinearArgs:
    def __init__(__self__, *,
                 linear_interval: pulumi.Input[int],
                 linear_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "linear_interval", linear_interval)
        pulumi.set(__self__, "linear_percentage", linear_percentage)

    @property
    @pulumi.getter(name="linearInterval")
    def linear_interval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "linear_interval")

    @linear_interval.setter
    def linear_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "linear_interval", value)

    @property
    @pulumi.getter(name="linearPercentage")
    def linear_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "linear_percentage")

    @linear_percentage.setter
    def linear_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "linear_percentage", value)


@pulumi.input_type
class DeploymentConfigTrafficRoutingConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 time_based_canary: Optional[pulumi.Input['DeploymentConfigTimeBasedCanaryArgs']] = None,
                 time_based_linear: Optional[pulumi.Input['DeploymentConfigTimeBasedLinearArgs']] = None):
        pulumi.set(__self__, "type", type)
        if time_based_canary is not None:
            pulumi.set(__self__, "time_based_canary", time_based_canary)
        if time_based_linear is not None:
            pulumi.set(__self__, "time_based_linear", time_based_linear)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="timeBasedCanary")
    def time_based_canary(self) -> Optional[pulumi.Input['DeploymentConfigTimeBasedCanaryArgs']]:
        return pulumi.get(self, "time_based_canary")

    @time_based_canary.setter
    def time_based_canary(self, value: Optional[pulumi.Input['DeploymentConfigTimeBasedCanaryArgs']]):
        pulumi.set(self, "time_based_canary", value)

    @property
    @pulumi.getter(name="timeBasedLinear")
    def time_based_linear(self) -> Optional[pulumi.Input['DeploymentConfigTimeBasedLinearArgs']]:
        return pulumi.get(self, "time_based_linear")

    @time_based_linear.setter
    def time_based_linear(self, value: Optional[pulumi.Input['DeploymentConfigTimeBasedLinearArgs']]):
        pulumi.set(self, "time_based_linear", value)


@pulumi.input_type
class DeploymentConfigZonalConfigArgs:
    def __init__(__self__, *,
                 first_zone_monitor_duration_in_seconds: Optional[pulumi.Input[int]] = None,
                 minimum_healthy_hosts_per_zone: Optional[pulumi.Input['DeploymentConfigMinimumHealthyHostsPerZoneArgs']] = None,
                 monitor_duration_in_seconds: Optional[pulumi.Input[int]] = None):
        if first_zone_monitor_duration_in_seconds is not None:
            pulumi.set(__self__, "first_zone_monitor_duration_in_seconds", first_zone_monitor_duration_in_seconds)
        if minimum_healthy_hosts_per_zone is not None:
            pulumi.set(__self__, "minimum_healthy_hosts_per_zone", minimum_healthy_hosts_per_zone)
        if monitor_duration_in_seconds is not None:
            pulumi.set(__self__, "monitor_duration_in_seconds", monitor_duration_in_seconds)

    @property
    @pulumi.getter(name="firstZoneMonitorDurationInSeconds")
    def first_zone_monitor_duration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "first_zone_monitor_duration_in_seconds")

    @first_zone_monitor_duration_in_seconds.setter
    def first_zone_monitor_duration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "first_zone_monitor_duration_in_seconds", value)

    @property
    @pulumi.getter(name="minimumHealthyHostsPerZone")
    def minimum_healthy_hosts_per_zone(self) -> Optional[pulumi.Input['DeploymentConfigMinimumHealthyHostsPerZoneArgs']]:
        return pulumi.get(self, "minimum_healthy_hosts_per_zone")

    @minimum_healthy_hosts_per_zone.setter
    def minimum_healthy_hosts_per_zone(self, value: Optional[pulumi.Input['DeploymentConfigMinimumHealthyHostsPerZoneArgs']]):
        pulumi.set(self, "minimum_healthy_hosts_per_zone", value)

    @property
    @pulumi.getter(name="monitorDurationInSeconds")
    def monitor_duration_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monitor_duration_in_seconds")

    @monitor_duration_in_seconds.setter
    def monitor_duration_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_duration_in_seconds", value)


