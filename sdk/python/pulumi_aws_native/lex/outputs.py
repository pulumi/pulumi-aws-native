# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BotAdvancedRecognitionSetting',
    'BotAliasAudioLogDestination',
    'BotAliasAudioLogSetting',
    'BotAliasCloudWatchLogGroupLogDestination',
    'BotAliasCodeHookSpecification',
    'BotAliasConversationLogSettings',
    'BotAliasLambdaCodeHook',
    'BotAliasLocaleSettings',
    'BotAliasLocaleSettingsItem',
    'BotAliasS3BucketLogDestination',
    'BotAliasTag',
    'BotAliasTextLogDestination',
    'BotAliasTextLogSetting',
    'BotAllowedInputTypes',
    'BotAudioAndDtmfInputSpecification',
    'BotAudioLogDestination',
    'BotAudioLogSetting',
    'BotAudioSpecification',
    'BotBedrockAgentIntentConfiguration',
    'BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties',
    'BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties',
    'BotBedrockModelSpecification',
    'BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties',
    'BotButton',
    'BotCloudWatchLogGroupLogDestination',
    'BotCompositeSlotTypeSetting',
    'BotCondition',
    'BotConditionalBranch',
    'BotConditionalSpecification',
    'BotConversationLogSettings',
    'BotCustomPayload',
    'BotCustomVocabulary',
    'BotCustomVocabularyItem',
    'BotDefaultConditionalBranch',
    'BotDialogAction',
    'BotDialogCodeHookInvocationSetting',
    'BotDialogCodeHookSetting',
    'BotDialogState',
    'BotDtmfSpecification',
    'BotElicitationCodeHookInvocationSetting',
    'BotExternalSourceSetting',
    'BotFulfillmentCodeHookSetting',
    'BotFulfillmentStartResponseSpecification',
    'BotFulfillmentUpdateResponseSpecification',
    'BotFulfillmentUpdatesSpecification',
    'BotGrammarSlotTypeSetting',
    'BotGrammarSlotTypeSource',
    'BotImageResponseCard',
    'BotInitialResponseSetting',
    'BotInputContext',
    'BotIntent',
    'BotIntentClosingSetting',
    'BotIntentConfirmationSetting',
    'BotIntentOverride',
    'BotKendraConfiguration',
    'BotLocale',
    'BotMessage',
    'BotMessageGroup',
    'BotMultipleValuesSetting',
    'BotObfuscationSetting',
    'BotOutputContext',
    'BotPlainTextMessage',
    'BotPostDialogCodeHookInvocationSpecification',
    'BotPostFulfillmentStatusSpecification',
    'BotPromptAttemptSpecification',
    'BotPromptSpecification',
    'BotQInConnectIntentConfiguration',
    'BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties',
    'BotQnAIntentConfiguration',
    'BotQnAIntentConfigurationDataSourceConfigurationProperties',
    'BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties',
    'BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties',
    'BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties',
    'BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties',
    'BotQnAKendraConfiguration',
    'BotReplication',
    'BotResponseSpecification',
    'BotS3BucketLogDestination',
    'BotS3Location',
    'BotSampleUtterance',
    'BotSampleValue',
    'BotSessionAttribute',
    'BotSlot',
    'BotSlotCaptureSetting',
    'BotSlotDefaultValue',
    'BotSlotDefaultValueSpecification',
    'BotSlotPriority',
    'BotSlotType',
    'BotSlotTypeValue',
    'BotSlotValue',
    'BotSlotValueElicitationSetting',
    'BotSlotValueOverride',
    'BotSlotValueOverrideMap',
    'BotSlotValueRegexFilter',
    'BotSlotValueSelectionSetting',
    'BotSsmlMessage',
    'BotStillWaitingResponseSpecification',
    'BotSubSlotTypeComposition',
    'BotTag',
    'BotTestBotAliasSettings',
    'BotTestBotAliasSettingsSentimentAnalysisSettingsProperties',
    'BotTextInputSpecification',
    'BotTextLogDestination',
    'BotTextLogSetting',
    'BotVersionLocaleDetails',
    'BotVersionLocaleSpecification',
    'BotVoiceSettings',
    'BotWaitAndContinueSpecification',
    'DataPrivacyProperties',
    'ResourcePolicyPolicy',
    'SentimentAnalysisSettingsProperties',
]

@pulumi.output_type
class BotAdvancedRecognitionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioRecognitionStrategy":
            suggest = "audio_recognition_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAdvancedRecognitionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAdvancedRecognitionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAdvancedRecognitionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_recognition_strategy: Optional['BotAudioRecognitionStrategy'] = None):
        """
        :param 'BotAudioRecognitionStrategy' audio_recognition_strategy: Enables using the slot values as a custom vocabulary for recognizing user utterances.
        """
        if audio_recognition_strategy is not None:
            pulumi.set(__self__, "audio_recognition_strategy", audio_recognition_strategy)

    @property
    @pulumi.getter(name="audioRecognitionStrategy")
    def audio_recognition_strategy(self) -> Optional['BotAudioRecognitionStrategy']:
        """
        Enables using the slot values as a custom vocabulary for recognizing user utterances.
        """
        return pulumi.get(self, "audio_recognition_strategy")


@pulumi.output_type
class BotAliasAudioLogDestination(dict):
    """
    The location of audio log files collected when conversation logging is enabled for a bot.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasAudioLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasAudioLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasAudioLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: 'outputs.BotAliasS3BucketLogDestination'):
        """
        The location of audio log files collected when conversation logging is enabled for a bot.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> 'outputs.BotAliasS3BucketLogDestination':
        return pulumi.get(self, "s3_bucket")


@pulumi.output_type
class BotAliasAudioLogSetting(dict):
    """
    Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
    """
    def __init__(__self__, *,
                 destination: 'outputs.BotAliasAudioLogDestination',
                 enabled: builtins.bool):
        """
        Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.BotAliasAudioLogDestination':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BotAliasCloudWatchLogGroupLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatchLogGroupArn":
            suggest = "cloud_watch_log_group_arn"
        elif key == "logPrefix":
            suggest = "log_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasCloudWatchLogGroupLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasCloudWatchLogGroupLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasCloudWatchLogGroupLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch_log_group_arn: builtins.str,
                 log_prefix: builtins.str):
        """
        :param builtins.str cloud_watch_log_group_arn: A string used to identify the groupArn for the Cloudwatch Log Group
        :param builtins.str log_prefix: A string containing the value for the Log Prefix
        """
        pulumi.set(__self__, "cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        pulumi.set(__self__, "log_prefix", log_prefix)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> builtins.str:
        """
        A string used to identify the groupArn for the Cloudwatch Log Group
        """
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> builtins.str:
        """
        A string containing the value for the Log Prefix
        """
        return pulumi.get(self, "log_prefix")


@pulumi.output_type
class BotAliasCodeHookSpecification(dict):
    """
    Contains information about code hooks that Amazon Lex calls during a conversation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambdaCodeHook":
            suggest = "lambda_code_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasCodeHookSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasCodeHookSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasCodeHookSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_code_hook: 'outputs.BotAliasLambdaCodeHook'):
        """
        Contains information about code hooks that Amazon Lex calls during a conversation.
        """
        pulumi.set(__self__, "lambda_code_hook", lambda_code_hook)

    @property
    @pulumi.getter(name="lambdaCodeHook")
    def lambda_code_hook(self) -> 'outputs.BotAliasLambdaCodeHook':
        return pulumi.get(self, "lambda_code_hook")


@pulumi.output_type
class BotAliasConversationLogSettings(dict):
    """
    Contains information about code hooks that Amazon Lex calls during a conversation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioLogSettings":
            suggest = "audio_log_settings"
        elif key == "textLogSettings":
            suggest = "text_log_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasConversationLogSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasConversationLogSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasConversationLogSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_log_settings: Optional[Sequence['outputs.BotAliasAudioLogSetting']] = None,
                 text_log_settings: Optional[Sequence['outputs.BotAliasTextLogSetting']] = None):
        """
        Contains information about code hooks that Amazon Lex calls during a conversation.
        :param Sequence['BotAliasAudioLogSetting'] audio_log_settings: The Amazon S3 settings for logging audio to an S3 bucket.
        :param Sequence['BotAliasTextLogSetting'] text_log_settings: The Amazon CloudWatch Logs settings for logging text and metadata.
        """
        if audio_log_settings is not None:
            pulumi.set(__self__, "audio_log_settings", audio_log_settings)
        if text_log_settings is not None:
            pulumi.set(__self__, "text_log_settings", text_log_settings)

    @property
    @pulumi.getter(name="audioLogSettings")
    def audio_log_settings(self) -> Optional[Sequence['outputs.BotAliasAudioLogSetting']]:
        """
        The Amazon S3 settings for logging audio to an S3 bucket.
        """
        return pulumi.get(self, "audio_log_settings")

    @property
    @pulumi.getter(name="textLogSettings")
    def text_log_settings(self) -> Optional[Sequence['outputs.BotAliasTextLogSetting']]:
        """
        The Amazon CloudWatch Logs settings for logging text and metadata.
        """
        return pulumi.get(self, "text_log_settings")


@pulumi.output_type
class BotAliasLambdaCodeHook(dict):
    """
    Contains information about code hooks that Amazon Lex calls during a conversation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHookInterfaceVersion":
            suggest = "code_hook_interface_version"
        elif key == "lambdaArn":
            suggest = "lambda_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasLambdaCodeHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasLambdaCodeHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasLambdaCodeHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_hook_interface_version: builtins.str,
                 lambda_arn: builtins.str):
        """
        Contains information about code hooks that Amazon Lex calls during a conversation.
        :param builtins.str code_hook_interface_version: The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
        :param builtins.str lambda_arn: The Amazon Resource Name (ARN) of the Lambda function.
        """
        pulumi.set(__self__, "code_hook_interface_version", code_hook_interface_version)
        pulumi.set(__self__, "lambda_arn", lambda_arn)

    @property
    @pulumi.getter(name="codeHookInterfaceVersion")
    def code_hook_interface_version(self) -> builtins.str:
        """
        The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
        """
        return pulumi.get(self, "code_hook_interface_version")

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> builtins.str:
        """
        The Amazon Resource Name (ARN) of the Lambda function.
        """
        return pulumi.get(self, "lambda_arn")


@pulumi.output_type
class BotAliasLocaleSettings(dict):
    """
    You can use this parameter to specify a specific Lambda function to run different functions in different locales.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHookSpecification":
            suggest = "code_hook_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasLocaleSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasLocaleSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasLocaleSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 code_hook_specification: Optional['outputs.BotAliasCodeHookSpecification'] = None):
        """
        You can use this parameter to specify a specific Lambda function to run different functions in different locales.
        :param builtins.bool enabled: Whether the Lambda code hook is enabled
        """
        pulumi.set(__self__, "enabled", enabled)
        if code_hook_specification is not None:
            pulumi.set(__self__, "code_hook_specification", code_hook_specification)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Whether the Lambda code hook is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="codeHookSpecification")
    def code_hook_specification(self) -> Optional['outputs.BotAliasCodeHookSpecification']:
        return pulumi.get(self, "code_hook_specification")


@pulumi.output_type
class BotAliasLocaleSettingsItem(dict):
    """
    A locale setting in alias
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "botAliasLocaleSetting":
            suggest = "bot_alias_locale_setting"
        elif key == "localeId":
            suggest = "locale_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasLocaleSettingsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasLocaleSettingsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasLocaleSettingsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bot_alias_locale_setting: 'outputs.BotAliasLocaleSettings',
                 locale_id: builtins.str):
        """
        A locale setting in alias
        :param builtins.str locale_id: A string used to identify the locale
        """
        pulumi.set(__self__, "bot_alias_locale_setting", bot_alias_locale_setting)
        pulumi.set(__self__, "locale_id", locale_id)

    @property
    @pulumi.getter(name="botAliasLocaleSetting")
    def bot_alias_locale_setting(self) -> 'outputs.BotAliasLocaleSettings':
        return pulumi.get(self, "bot_alias_locale_setting")

    @property
    @pulumi.getter(name="localeId")
    def locale_id(self) -> builtins.str:
        """
        A string used to identify the locale
        """
        return pulumi.get(self, "locale_id")


@pulumi.output_type
class BotAliasS3BucketLogDestination(dict):
    """
    Specifies an Amazon S3 bucket for logging audio conversations
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPrefix":
            suggest = "log_prefix"
        elif key == "s3BucketArn":
            suggest = "s3_bucket_arn"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasS3BucketLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasS3BucketLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasS3BucketLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_prefix: builtins.str,
                 s3_bucket_arn: builtins.str,
                 kms_key_arn: Optional[builtins.str] = None):
        """
        Specifies an Amazon S3 bucket for logging audio conversations
        :param builtins.str log_prefix: The Amazon S3 key of the deployment package.
        :param builtins.str s3_bucket_arn: The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
        :param builtins.str kms_key_arn: The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
        """
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "s3_bucket_arn", s3_bucket_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> builtins.str:
        """
        The Amazon S3 key of the deployment package.
        """
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> builtins.str:
        """
        The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
        """
        return pulumi.get(self, "s3_bucket_arn")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
        """
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class BotAliasTag(dict):
    """
    A label for tagging Lex resources
    """
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        A label for tagging Lex resources
        :param builtins.str key: A string used to identify this tag
        :param builtins.str value: A string containing the value for the tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        A string used to identify this tag
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        A string containing the value for the tag
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BotAliasTextLogDestination(dict):
    """
    Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatch":
            suggest = "cloud_watch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAliasTextLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAliasTextLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAliasTextLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch: 'outputs.BotAliasCloudWatchLogGroupLogDestination'):
        """
        Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
        """
        pulumi.set(__self__, "cloud_watch", cloud_watch)

    @property
    @pulumi.getter(name="cloudWatch")
    def cloud_watch(self) -> 'outputs.BotAliasCloudWatchLogGroupLogDestination':
        return pulumi.get(self, "cloud_watch")


@pulumi.output_type
class BotAliasTextLogSetting(dict):
    """
    Contains information about code hooks that Amazon Lex calls during a conversation.
    """
    def __init__(__self__, *,
                 destination: 'outputs.BotAliasTextLogDestination',
                 enabled: builtins.bool):
        """
        Contains information about code hooks that Amazon Lex calls during a conversation.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.BotAliasTextLogDestination':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BotAllowedInputTypes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAudioInput":
            suggest = "allow_audio_input"
        elif key == "allowDtmfInput":
            suggest = "allow_dtmf_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAllowedInputTypes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAllowedInputTypes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAllowedInputTypes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_audio_input: builtins.bool,
                 allow_dtmf_input: builtins.bool):
        pulumi.set(__self__, "allow_audio_input", allow_audio_input)
        pulumi.set(__self__, "allow_dtmf_input", allow_dtmf_input)

    @property
    @pulumi.getter(name="allowAudioInput")
    def allow_audio_input(self) -> builtins.bool:
        return pulumi.get(self, "allow_audio_input")

    @property
    @pulumi.getter(name="allowDtmfInput")
    def allow_dtmf_input(self) -> builtins.bool:
        return pulumi.get(self, "allow_dtmf_input")


@pulumi.output_type
class BotAudioAndDtmfInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"
        elif key == "audioSpecification":
            suggest = "audio_specification"
        elif key == "dtmfSpecification":
            suggest = "dtmf_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAudioAndDtmfInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAudioAndDtmfInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAudioAndDtmfInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: builtins.int,
                 audio_specification: Optional['outputs.BotAudioSpecification'] = None,
                 dtmf_specification: Optional['outputs.BotDtmfSpecification'] = None):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)
        if audio_specification is not None:
            pulumi.set(__self__, "audio_specification", audio_specification)
        if dtmf_specification is not None:
            pulumi.set(__self__, "dtmf_specification", dtmf_specification)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> builtins.int:
        return pulumi.get(self, "start_timeout_ms")

    @property
    @pulumi.getter(name="audioSpecification")
    def audio_specification(self) -> Optional['outputs.BotAudioSpecification']:
        return pulumi.get(self, "audio_specification")

    @property
    @pulumi.getter(name="dtmfSpecification")
    def dtmf_specification(self) -> Optional['outputs.BotDtmfSpecification']:
        return pulumi.get(self, "dtmf_specification")


@pulumi.output_type
class BotAudioLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAudioLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAudioLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAudioLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: 'outputs.BotS3BucketLogDestination'):
        pulumi.set(__self__, "s3_bucket", s3_bucket)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> 'outputs.BotS3BucketLogDestination':
        return pulumi.get(self, "s3_bucket")


@pulumi.output_type
class BotAudioLogSetting(dict):
    def __init__(__self__, *,
                 destination: 'outputs.BotAudioLogDestination',
                 enabled: builtins.bool):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.BotAudioLogDestination':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BotAudioSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLengthMs":
            suggest = "max_length_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotAudioSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotAudioSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotAudioSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_timeout_ms: builtins.int,
                 max_length_ms: builtins.int):
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length_ms", max_length_ms)

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> builtins.int:
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLengthMs")
    def max_length_ms(self) -> builtins.int:
        return pulumi.get(self, "max_length_ms")


@pulumi.output_type
class BotBedrockAgentIntentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockAgentConfiguration":
            suggest = "bedrock_agent_configuration"
        elif key == "bedrockAgentIntentKnowledgeBaseConfiguration":
            suggest = "bedrock_agent_intent_knowledge_base_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotBedrockAgentIntentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotBedrockAgentIntentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotBedrockAgentIntentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_agent_configuration: Optional['outputs.BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties'] = None,
                 bedrock_agent_intent_knowledge_base_configuration: Optional['outputs.BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties'] = None):
        if bedrock_agent_configuration is not None:
            pulumi.set(__self__, "bedrock_agent_configuration", bedrock_agent_configuration)
        if bedrock_agent_intent_knowledge_base_configuration is not None:
            pulumi.set(__self__, "bedrock_agent_intent_knowledge_base_configuration", bedrock_agent_intent_knowledge_base_configuration)

    @property
    @pulumi.getter(name="bedrockAgentConfiguration")
    def bedrock_agent_configuration(self) -> Optional['outputs.BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties']:
        return pulumi.get(self, "bedrock_agent_configuration")

    @property
    @pulumi.getter(name="bedrockAgentIntentKnowledgeBaseConfiguration")
    def bedrock_agent_intent_knowledge_base_configuration(self) -> Optional['outputs.BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties']:
        return pulumi.get(self, "bedrock_agent_intent_knowledge_base_configuration")


@pulumi.output_type
class BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockAgentAliasId":
            suggest = "bedrock_agent_alias_id"
        elif key == "bedrockAgentId":
            suggest = "bedrock_agent_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotBedrockAgentIntentConfigurationBedrockAgentConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_agent_alias_id: Optional[builtins.str] = None,
                 bedrock_agent_id: Optional[builtins.str] = None):
        if bedrock_agent_alias_id is not None:
            pulumi.set(__self__, "bedrock_agent_alias_id", bedrock_agent_alias_id)
        if bedrock_agent_id is not None:
            pulumi.set(__self__, "bedrock_agent_id", bedrock_agent_id)

    @property
    @pulumi.getter(name="bedrockAgentAliasId")
    def bedrock_agent_alias_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_agent_alias_id")

    @property
    @pulumi.getter(name="bedrockAgentId")
    def bedrock_agent_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_agent_id")


@pulumi.output_type
class BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockKnowledgeBaseArn":
            suggest = "bedrock_knowledge_base_arn"
        elif key == "bedrockModelConfiguration":
            suggest = "bedrock_model_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotBedrockAgentIntentConfigurationBedrockAgentIntentKnowledgeBaseConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_knowledge_base_arn: builtins.str,
                 bedrock_model_configuration: 'outputs.BotBedrockModelSpecification'):
        pulumi.set(__self__, "bedrock_knowledge_base_arn", bedrock_knowledge_base_arn)
        pulumi.set(__self__, "bedrock_model_configuration", bedrock_model_configuration)

    @property
    @pulumi.getter(name="bedrockKnowledgeBaseArn")
    def bedrock_knowledge_base_arn(self) -> builtins.str:
        return pulumi.get(self, "bedrock_knowledge_base_arn")

    @property
    @pulumi.getter(name="bedrockModelConfiguration")
    def bedrock_model_configuration(self) -> 'outputs.BotBedrockModelSpecification':
        return pulumi.get(self, "bedrock_model_configuration")


@pulumi.output_type
class BotBedrockModelSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelArn":
            suggest = "model_arn"
        elif key == "bedrockGuardrailConfiguration":
            suggest = "bedrock_guardrail_configuration"
        elif key == "bedrockModelCustomPrompt":
            suggest = "bedrock_model_custom_prompt"
        elif key == "bedrockTraceStatus":
            suggest = "bedrock_trace_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotBedrockModelSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotBedrockModelSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotBedrockModelSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_arn: builtins.str,
                 bedrock_guardrail_configuration: Optional['outputs.BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties'] = None,
                 bedrock_model_custom_prompt: Optional[builtins.str] = None,
                 bedrock_trace_status: Optional['BotBedrockModelSpecificationBedrockTraceStatus'] = None):
        """
        :param builtins.str model_arn: The ARN of the foundation model used in descriptive bot building.
        """
        pulumi.set(__self__, "model_arn", model_arn)
        if bedrock_guardrail_configuration is not None:
            pulumi.set(__self__, "bedrock_guardrail_configuration", bedrock_guardrail_configuration)
        if bedrock_model_custom_prompt is not None:
            pulumi.set(__self__, "bedrock_model_custom_prompt", bedrock_model_custom_prompt)
        if bedrock_trace_status is not None:
            pulumi.set(__self__, "bedrock_trace_status", bedrock_trace_status)

    @property
    @pulumi.getter(name="modelArn")
    def model_arn(self) -> builtins.str:
        """
        The ARN of the foundation model used in descriptive bot building.
        """
        return pulumi.get(self, "model_arn")

    @property
    @pulumi.getter(name="bedrockGuardrailConfiguration")
    def bedrock_guardrail_configuration(self) -> Optional['outputs.BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties']:
        return pulumi.get(self, "bedrock_guardrail_configuration")

    @property
    @pulumi.getter(name="bedrockModelCustomPrompt")
    def bedrock_model_custom_prompt(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_model_custom_prompt")

    @property
    @pulumi.getter(name="bedrockTraceStatus")
    def bedrock_trace_status(self) -> Optional['BotBedrockModelSpecificationBedrockTraceStatus']:
        return pulumi.get(self, "bedrock_trace_status")


@pulumi.output_type
class BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockGuardrailIdentifier":
            suggest = "bedrock_guardrail_identifier"
        elif key == "bedrockGuardrailVersion":
            suggest = "bedrock_guardrail_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotBedrockModelSpecificationBedrockGuardrailConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_guardrail_identifier: Optional[builtins.str] = None,
                 bedrock_guardrail_version: Optional[builtins.str] = None):
        if bedrock_guardrail_identifier is not None:
            pulumi.set(__self__, "bedrock_guardrail_identifier", bedrock_guardrail_identifier)
        if bedrock_guardrail_version is not None:
            pulumi.set(__self__, "bedrock_guardrail_version", bedrock_guardrail_version)

    @property
    @pulumi.getter(name="bedrockGuardrailIdentifier")
    def bedrock_guardrail_identifier(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_guardrail_identifier")

    @property
    @pulumi.getter(name="bedrockGuardrailVersion")
    def bedrock_guardrail_version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_guardrail_version")


@pulumi.output_type
class BotButton(dict):
    def __init__(__self__, *,
                 text: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def text(self) -> builtins.str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotCloudWatchLogGroupLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatchLogGroupArn":
            suggest = "cloud_watch_log_group_arn"
        elif key == "logPrefix":
            suggest = "log_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotCloudWatchLogGroupLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotCloudWatchLogGroupLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotCloudWatchLogGroupLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch_log_group_arn: builtins.str,
                 log_prefix: builtins.str):
        pulumi.set(__self__, "cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        pulumi.set(__self__, "log_prefix", log_prefix)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> builtins.str:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> builtins.str:
        return pulumi.get(self, "log_prefix")


@pulumi.output_type
class BotCompositeSlotTypeSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subSlots":
            suggest = "sub_slots"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotCompositeSlotTypeSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotCompositeSlotTypeSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotCompositeSlotTypeSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sub_slots: Optional[Sequence['outputs.BotSubSlotTypeComposition']] = None):
        if sub_slots is not None:
            pulumi.set(__self__, "sub_slots", sub_slots)

    @property
    @pulumi.getter(name="subSlots")
    def sub_slots(self) -> Optional[Sequence['outputs.BotSubSlotTypeComposition']]:
        return pulumi.get(self, "sub_slots")


@pulumi.output_type
class BotCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expressionString":
            suggest = "expression_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression_string: builtins.str):
        pulumi.set(__self__, "expression_string", expression_string)

    @property
    @pulumi.getter(name="expressionString")
    def expression_string(self) -> builtins.str:
        return pulumi.get(self, "expression_string")


@pulumi.output_type
class BotConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: 'outputs.BotCondition',
                 name: builtins.str,
                 next_step: 'outputs.BotDialogState',
                 response: Optional['outputs.BotResponseSpecification'] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def condition(self) -> 'outputs.BotCondition':
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> 'outputs.BotDialogState':
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.BotResponseSpecification']:
        return pulumi.get(self, "response")


@pulumi.output_type
class BotConditionalSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionalBranches":
            suggest = "conditional_branches"
        elif key == "defaultBranch":
            suggest = "default_branch"
        elif key == "isActive":
            suggest = "is_active"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotConditionalSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotConditionalSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotConditionalSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditional_branches: Sequence['outputs.BotConditionalBranch'],
                 default_branch: 'outputs.BotDefaultConditionalBranch',
                 is_active: builtins.bool):
        """
        :param Sequence['BotConditionalBranch'] conditional_branches: A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
        :param 'BotDefaultConditionalBranch' default_branch: The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
        :param builtins.bool is_active: Determines whether a conditional branch is active. When `IsActive` is false, the conditions are not evaluated.
        """
        pulumi.set(__self__, "conditional_branches", conditional_branches)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="conditionalBranches")
    def conditional_branches(self) -> Sequence['outputs.BotConditionalBranch']:
        """
        A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
        """
        return pulumi.get(self, "conditional_branches")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> 'outputs.BotDefaultConditionalBranch':
        """
        The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> builtins.bool:
        """
        Determines whether a conditional branch is active. When `IsActive` is false, the conditions are not evaluated.
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class BotConversationLogSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioLogSettings":
            suggest = "audio_log_settings"
        elif key == "textLogSettings":
            suggest = "text_log_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotConversationLogSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotConversationLogSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotConversationLogSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_log_settings: Optional[Sequence['outputs.BotAudioLogSetting']] = None,
                 text_log_settings: Optional[Sequence['outputs.BotTextLogSetting']] = None):
        """
        :param Sequence['BotAudioLogSetting'] audio_log_settings: The Amazon S3 settings for logging audio to an S3 bucket.
        :param Sequence['BotTextLogSetting'] text_log_settings: The Amazon CloudWatch Logs settings for logging text and metadata.
        """
        if audio_log_settings is not None:
            pulumi.set(__self__, "audio_log_settings", audio_log_settings)
        if text_log_settings is not None:
            pulumi.set(__self__, "text_log_settings", text_log_settings)

    @property
    @pulumi.getter(name="audioLogSettings")
    def audio_log_settings(self) -> Optional[Sequence['outputs.BotAudioLogSetting']]:
        """
        The Amazon S3 settings for logging audio to an S3 bucket.
        """
        return pulumi.get(self, "audio_log_settings")

    @property
    @pulumi.getter(name="textLogSettings")
    def text_log_settings(self) -> Optional[Sequence['outputs.BotTextLogSetting']]:
        """
        The Amazon CloudWatch Logs settings for logging text and metadata.
        """
        return pulumi.get(self, "text_log_settings")


@pulumi.output_type
class BotCustomPayload(dict):
    def __init__(__self__, *,
                 value: builtins.str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotCustomVocabulary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customVocabularyItems":
            suggest = "custom_vocabulary_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotCustomVocabulary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotCustomVocabulary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotCustomVocabulary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_vocabulary_items: Sequence['outputs.BotCustomVocabularyItem']):
        """
        :param Sequence['BotCustomVocabularyItem'] custom_vocabulary_items: Specifies a list of words that you expect to be used during a conversation with your bot.
        """
        pulumi.set(__self__, "custom_vocabulary_items", custom_vocabulary_items)

    @property
    @pulumi.getter(name="customVocabularyItems")
    def custom_vocabulary_items(self) -> Sequence['outputs.BotCustomVocabularyItem']:
        """
        Specifies a list of words that you expect to be used during a conversation with your bot.
        """
        return pulumi.get(self, "custom_vocabulary_items")


@pulumi.output_type
class BotCustomVocabularyItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayAs":
            suggest = "display_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotCustomVocabularyItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotCustomVocabularyItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotCustomVocabularyItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phrase: builtins.str,
                 display_as: Optional[builtins.str] = None,
                 weight: Optional[builtins.int] = None):
        pulumi.set(__self__, "phrase", phrase)
        if display_as is not None:
            pulumi.set(__self__, "display_as", display_as)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def phrase(self) -> builtins.str:
        return pulumi.get(self, "phrase")

    @property
    @pulumi.getter(name="displayAs")
    def display_as(self) -> Optional[builtins.str]:
        return pulumi.get(self, "display_as")

    @property
    @pulumi.getter
    def weight(self) -> Optional[builtins.int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class BotDefaultConditionalBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotDefaultConditionalBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotDefaultConditionalBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotDefaultConditionalBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_step: Optional['outputs.BotDialogState'] = None,
                 response: Optional['outputs.BotResponseSpecification'] = None):
        """
        :param 'BotDialogState' next_step: The next step in the conversation.
        :param 'BotResponseSpecification' response: Specifies a list of message groups that Amazon Lex uses to respond the user input.
        """
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.BotDialogState']:
        """
        The next step in the conversation.
        """
        return pulumi.get(self, "next_step")

    @property
    @pulumi.getter
    def response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input.
        """
        return pulumi.get(self, "response")


@pulumi.output_type
class BotDialogAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotToElicit":
            suggest = "slot_to_elicit"
        elif key == "suppressNextMessage":
            suggest = "suppress_next_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotDialogAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotDialogAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotDialogAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'BotDialogActionType',
                 slot_to_elicit: Optional[builtins.str] = None,
                 suppress_next_message: Optional[builtins.bool] = None):
        """
        :param 'BotDialogActionType' type: The action that the bot should execute.
        :param builtins.str slot_to_elicit: If the dialog action is `ElicitSlot` , defines the slot to elicit from the user.
        :param builtins.bool suppress_next_message: When true the next message for the intent is not used.
        """
        pulumi.set(__self__, "type", type)
        if slot_to_elicit is not None:
            pulumi.set(__self__, "slot_to_elicit", slot_to_elicit)
        if suppress_next_message is not None:
            pulumi.set(__self__, "suppress_next_message", suppress_next_message)

    @property
    @pulumi.getter
    def type(self) -> 'BotDialogActionType':
        """
        The action that the bot should execute.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="slotToElicit")
    def slot_to_elicit(self) -> Optional[builtins.str]:
        """
        If the dialog action is `ElicitSlot` , defines the slot to elicit from the user.
        """
        return pulumi.get(self, "slot_to_elicit")

    @property
    @pulumi.getter(name="suppressNextMessage")
    def suppress_next_message(self) -> Optional[builtins.bool]:
        """
        When true the next message for the intent is not used.
        """
        return pulumi.get(self, "suppress_next_message")


@pulumi.output_type
class BotDialogCodeHookInvocationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCodeHookInvocation":
            suggest = "enable_code_hook_invocation"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "postCodeHookSpecification":
            suggest = "post_code_hook_specification"
        elif key == "invocationLabel":
            suggest = "invocation_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotDialogCodeHookInvocationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotDialogCodeHookInvocationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotDialogCodeHookInvocationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_code_hook_invocation: builtins.bool,
                 is_active: builtins.bool,
                 post_code_hook_specification: 'outputs.BotPostDialogCodeHookInvocationSpecification',
                 invocation_label: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_code_hook_invocation: Indicates whether a Lambda function should be invoked for the dialog.
        :param builtins.bool is_active: Determines whether a dialog code hook is used when the intent is activated.
        :param 'BotPostDialogCodeHookInvocationSpecification' post_code_hook_specification: Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
        :param builtins.str invocation_label: A label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "post_code_hook_specification", post_code_hook_specification)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> builtins.bool:
        """
        Indicates whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> builtins.bool:
        """
        Determines whether a dialog code hook is used when the intent is activated.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="postCodeHookSpecification")
    def post_code_hook_specification(self) -> 'outputs.BotPostDialogCodeHookInvocationSpecification':
        """
        Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
        """
        return pulumi.get(self, "post_code_hook_specification")

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[builtins.str]:
        """
        A label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")


@pulumi.output_type
class BotDialogCodeHookSetting(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool):
        """
        :param builtins.bool enabled: Enables the dialog code hook so that it processes user requests.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enables the dialog code hook so that it processes user requests.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BotDialogState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogAction":
            suggest = "dialog_action"
        elif key == "sessionAttributes":
            suggest = "session_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotDialogState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotDialogState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotDialogState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialog_action: Optional['outputs.BotDialogAction'] = None,
                 intent: Optional['outputs.BotIntentOverride'] = None,
                 session_attributes: Optional[Sequence['outputs.BotSessionAttribute']] = None):
        """
        :param 'BotDialogAction' dialog_action: Defines the action that the bot executes at runtime when the conversation reaches this step.
        :param 'BotIntentOverride' intent: Override settings to configure the intent state.
        :param Sequence['BotSessionAttribute'] session_attributes: Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        if dialog_action is not None:
            pulumi.set(__self__, "dialog_action", dialog_action)
        if intent is not None:
            pulumi.set(__self__, "intent", intent)
        if session_attributes is not None:
            pulumi.set(__self__, "session_attributes", session_attributes)

    @property
    @pulumi.getter(name="dialogAction")
    def dialog_action(self) -> Optional['outputs.BotDialogAction']:
        """
        Defines the action that the bot executes at runtime when the conversation reaches this step.
        """
        return pulumi.get(self, "dialog_action")

    @property
    @pulumi.getter
    def intent(self) -> Optional['outputs.BotIntentOverride']:
        """
        Override settings to configure the intent state.
        """
        return pulumi.get(self, "intent")

    @property
    @pulumi.getter(name="sessionAttributes")
    def session_attributes(self) -> Optional[Sequence['outputs.BotSessionAttribute']]:
        """
        Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
        """
        return pulumi.get(self, "session_attributes")


@pulumi.output_type
class BotDtmfSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionCharacter":
            suggest = "deletion_character"
        elif key == "endCharacter":
            suggest = "end_character"
        elif key == "endTimeoutMs":
            suggest = "end_timeout_ms"
        elif key == "maxLength":
            suggest = "max_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotDtmfSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotDtmfSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotDtmfSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_character: builtins.str,
                 end_character: builtins.str,
                 end_timeout_ms: builtins.int,
                 max_length: builtins.int):
        pulumi.set(__self__, "deletion_character", deletion_character)
        pulumi.set(__self__, "end_character", end_character)
        pulumi.set(__self__, "end_timeout_ms", end_timeout_ms)
        pulumi.set(__self__, "max_length", max_length)

    @property
    @pulumi.getter(name="deletionCharacter")
    def deletion_character(self) -> builtins.str:
        return pulumi.get(self, "deletion_character")

    @property
    @pulumi.getter(name="endCharacter")
    def end_character(self) -> builtins.str:
        return pulumi.get(self, "end_character")

    @property
    @pulumi.getter(name="endTimeoutMs")
    def end_timeout_ms(self) -> builtins.int:
        return pulumi.get(self, "end_timeout_ms")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> builtins.int:
        return pulumi.get(self, "max_length")


@pulumi.output_type
class BotElicitationCodeHookInvocationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableCodeHookInvocation":
            suggest = "enable_code_hook_invocation"
        elif key == "invocationLabel":
            suggest = "invocation_label"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotElicitationCodeHookInvocationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotElicitationCodeHookInvocationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotElicitationCodeHookInvocationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_code_hook_invocation: builtins.bool,
                 invocation_label: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_code_hook_invocation: Indicates whether a Lambda function should be invoked for the dialog.
        :param builtins.str invocation_label: A label that indicates the dialog step from which the dialog code hook is happening.
        """
        pulumi.set(__self__, "enable_code_hook_invocation", enable_code_hook_invocation)
        if invocation_label is not None:
            pulumi.set(__self__, "invocation_label", invocation_label)

    @property
    @pulumi.getter(name="enableCodeHookInvocation")
    def enable_code_hook_invocation(self) -> builtins.bool:
        """
        Indicates whether a Lambda function should be invoked for the dialog.
        """
        return pulumi.get(self, "enable_code_hook_invocation")

    @property
    @pulumi.getter(name="invocationLabel")
    def invocation_label(self) -> Optional[builtins.str]:
        """
        A label that indicates the dialog step from which the dialog code hook is happening.
        """
        return pulumi.get(self, "invocation_label")


@pulumi.output_type
class BotExternalSourceSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grammarSlotTypeSetting":
            suggest = "grammar_slot_type_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotExternalSourceSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotExternalSourceSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotExternalSourceSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grammar_slot_type_setting: Optional['outputs.BotGrammarSlotTypeSetting'] = None):
        """
        :param 'BotGrammarSlotTypeSetting' grammar_slot_type_setting: Settings required for a slot type based on a grammar that you provide.
        """
        if grammar_slot_type_setting is not None:
            pulumi.set(__self__, "grammar_slot_type_setting", grammar_slot_type_setting)

    @property
    @pulumi.getter(name="grammarSlotTypeSetting")
    def grammar_slot_type_setting(self) -> Optional['outputs.BotGrammarSlotTypeSetting']:
        """
        Settings required for a slot type based on a grammar that you provide.
        """
        return pulumi.get(self, "grammar_slot_type_setting")


@pulumi.output_type
class BotFulfillmentCodeHookSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fulfillmentUpdatesSpecification":
            suggest = "fulfillment_updates_specification"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "postFulfillmentStatusSpecification":
            suggest = "post_fulfillment_status_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotFulfillmentCodeHookSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotFulfillmentCodeHookSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotFulfillmentCodeHookSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 fulfillment_updates_specification: Optional['outputs.BotFulfillmentUpdatesSpecification'] = None,
                 is_active: Optional[builtins.bool] = None,
                 post_fulfillment_status_specification: Optional['outputs.BotPostFulfillmentStatusSpecification'] = None):
        """
        :param builtins.bool enabled: Indicates whether a Lambda function should be invoked to fulfill a specific intent.
        :param 'BotFulfillmentUpdatesSpecification' fulfillment_updates_specification: Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.
        :param builtins.bool is_active: Determines whether the fulfillment code hook is used. When `active` is false, the code hook doesn't run.
        :param 'BotPostFulfillmentStatusSpecification' post_fulfillment_status_specification: Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.
        """
        pulumi.set(__self__, "enabled", enabled)
        if fulfillment_updates_specification is not None:
            pulumi.set(__self__, "fulfillment_updates_specification", fulfillment_updates_specification)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if post_fulfillment_status_specification is not None:
            pulumi.set(__self__, "post_fulfillment_status_specification", post_fulfillment_status_specification)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Indicates whether a Lambda function should be invoked to fulfill a specific intent.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fulfillmentUpdatesSpecification")
    def fulfillment_updates_specification(self) -> Optional['outputs.BotFulfillmentUpdatesSpecification']:
        """
        Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.
        """
        return pulumi.get(self, "fulfillment_updates_specification")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[builtins.bool]:
        """
        Determines whether the fulfillment code hook is used. When `active` is false, the code hook doesn't run.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="postFulfillmentStatusSpecification")
    def post_fulfillment_status_specification(self) -> Optional['outputs.BotPostFulfillmentStatusSpecification']:
        """
        Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.
        """
        return pulumi.get(self, "post_fulfillment_status_specification")


@pulumi.output_type
class BotFulfillmentStartResponseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delayInSeconds":
            suggest = "delay_in_seconds"
        elif key == "messageGroups":
            suggest = "message_groups"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotFulfillmentStartResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotFulfillmentStartResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotFulfillmentStartResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay_in_seconds: builtins.int,
                 message_groups: Sequence['outputs.BotMessageGroup'],
                 allow_interrupt: Optional[builtins.bool] = None):
        """
        :param builtins.int delay_in_seconds: The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        :param Sequence['BotMessageGroup'] message_groups: 1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.
        :param builtins.bool allow_interrupt: Determines whether the user can interrupt the start message while it is playing.
        """
        pulumi.set(__self__, "delay_in_seconds", delay_in_seconds)
        pulumi.set(__self__, "message_groups", message_groups)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)

    @property
    @pulumi.getter(name="delayInSeconds")
    def delay_in_seconds(self) -> builtins.int:
        """
        The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
        """
        return pulumi.get(self, "delay_in_seconds")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Sequence['outputs.BotMessageGroup']:
        """
        1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.
        """
        return pulumi.get(self, "message_groups")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        """
        Determines whether the user can interrupt the start message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")


@pulumi.output_type
class BotFulfillmentUpdateResponseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frequencyInSeconds":
            suggest = "frequency_in_seconds"
        elif key == "messageGroups":
            suggest = "message_groups"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotFulfillmentUpdateResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotFulfillmentUpdateResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotFulfillmentUpdateResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency_in_seconds: builtins.int,
                 message_groups: Sequence['outputs.BotMessageGroup'],
                 allow_interrupt: Optional[builtins.bool] = None):
        """
        :param builtins.int frequency_in_seconds: The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        :param Sequence['BotMessageGroup'] message_groups: 1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.
        :param builtins.bool allow_interrupt: Determines whether the user can interrupt an update message while it is playing.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        pulumi.set(__self__, "message_groups", message_groups)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> builtins.int:
        """
        The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @property
    @pulumi.getter(name="messageGroups")
    def message_groups(self) -> Sequence['outputs.BotMessageGroup']:
        """
        1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.
        """
        return pulumi.get(self, "message_groups")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        """
        Determines whether the user can interrupt an update message while it is playing.
        """
        return pulumi.get(self, "allow_interrupt")


@pulumi.output_type
class BotFulfillmentUpdatesSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startResponse":
            suggest = "start_response"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"
        elif key == "updateResponse":
            suggest = "update_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotFulfillmentUpdatesSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotFulfillmentUpdatesSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotFulfillmentUpdatesSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: builtins.bool,
                 start_response: Optional['outputs.BotFulfillmentStartResponseSpecification'] = None,
                 timeout_in_seconds: Optional[builtins.int] = None,
                 update_response: Optional['outputs.BotFulfillmentUpdateResponseSpecification'] = None):
        """
        :param builtins.bool active: Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.
               
               If the `active` field is set to true, the `startResponse` , `updateResponse` , and `timeoutInSeconds` fields are required.
        :param 'BotFulfillmentStartResponseSpecification' start_response: Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running.
        :param builtins.int timeout_in_seconds: The length of time that the fulfillment Lambda function should run before it times out.
        :param 'BotFulfillmentUpdateResponseSpecification' update_response: Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        pulumi.set(__self__, "active", active)
        if start_response is not None:
            pulumi.set(__self__, "start_response", start_response)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if update_response is not None:
            pulumi.set(__self__, "update_response", update_response)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        """
        Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.

        If the `active` field is set to true, the `startResponse` , `updateResponse` , and `timeoutInSeconds` fields are required.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="startResponse")
    def start_response(self) -> Optional['outputs.BotFulfillmentStartResponseSpecification']:
        """
        Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running.
        """
        return pulumi.get(self, "start_response")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[builtins.int]:
        """
        The length of time that the fulfillment Lambda function should run before it times out.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="updateResponse")
    def update_response(self) -> Optional['outputs.BotFulfillmentUpdateResponseSpecification']:
        """
        Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running.
        """
        return pulumi.get(self, "update_response")


@pulumi.output_type
class BotGrammarSlotTypeSetting(dict):
    def __init__(__self__, *,
                 source: Optional['outputs.BotGrammarSlotTypeSource'] = None):
        """
        :param 'BotGrammarSlotTypeSource' source: The source of the grammar used to create the slot type.
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.BotGrammarSlotTypeSource']:
        """
        The source of the grammar used to create the slot type.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class BotGrammarSlotTypeSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3ObjectKey":
            suggest = "s3_object_key"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotGrammarSlotTypeSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotGrammarSlotTypeSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotGrammarSlotTypeSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket_name: builtins.str,
                 s3_object_key: builtins.str,
                 kms_key_arn: Optional[builtins.str] = None):
        """
        :param builtins.str s3_bucket_name: The name of the Amazon S3 bucket that contains the grammar source.
        :param builtins.str s3_object_key: The path to the grammar in the Amazon S3 bucket.
        :param builtins.str kms_key_arn: The AWS KMS key required to decrypt the contents of the grammar, if any.
        """
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_object_key", s3_object_key)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> builtins.str:
        """
        The name of the Amazon S3 bucket that contains the grammar source.
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> builtins.str:
        """
        The path to the grammar in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_object_key")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        """
        The AWS KMS key required to decrypt the contents of the grammar, if any.
        """
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class BotImageResponseCard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUrl":
            suggest = "image_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotImageResponseCard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotImageResponseCard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotImageResponseCard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 title: builtins.str,
                 buttons: Optional[Sequence['outputs.BotButton']] = None,
                 image_url: Optional[builtins.str] = None,
                 subtitle: Optional[builtins.str] = None):
        pulumi.set(__self__, "title", title)
        if buttons is not None:
            pulumi.set(__self__, "buttons", buttons)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def buttons(self) -> Optional[Sequence['outputs.BotButton']]:
        return pulumi.get(self, "buttons")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[builtins.str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subtitle")


@pulumi.output_type
class BotInitialResponseSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeHook":
            suggest = "code_hook"
        elif key == "initialResponse":
            suggest = "initial_response"
        elif key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotInitialResponseSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotInitialResponseSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotInitialResponseSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_hook: Optional['outputs.BotDialogCodeHookInvocationSetting'] = None,
                 conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 initial_response: Optional['outputs.BotResponseSpecification'] = None,
                 next_step: Optional['outputs.BotDialogState'] = None):
        """
        :param 'BotDialogCodeHookInvocationSetting' code_hook: Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
        :param 'BotConditionalSpecification' conditional: Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        :param 'BotResponseSpecification' initial_response: Specifies a list of message groups that Amazon Lex uses to respond the user input.
        :param 'BotDialogState' next_step: The next step in the conversation.
        """
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if initial_response is not None:
            pulumi.set(__self__, "initial_response", initial_response)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.BotDialogCodeHookInvocationSetting']:
        """
        Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
        """
        return pulumi.get(self, "code_hook")

    @property
    @pulumi.getter
    def conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        """
        return pulumi.get(self, "conditional")

    @property
    @pulumi.getter(name="initialResponse")
    def initial_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input.
        """
        return pulumi.get(self, "initial_response")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.BotDialogState']:
        """
        The next step in the conversation.
        """
        return pulumi.get(self, "next_step")


@pulumi.output_type
class BotInputContext(dict):
    def __init__(__self__, *,
                 name: builtins.str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class BotIntent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockAgentIntentConfiguration":
            suggest = "bedrock_agent_intent_configuration"
        elif key == "dialogCodeHook":
            suggest = "dialog_code_hook"
        elif key == "fulfillmentCodeHook":
            suggest = "fulfillment_code_hook"
        elif key == "initialResponseSetting":
            suggest = "initial_response_setting"
        elif key == "inputContexts":
            suggest = "input_contexts"
        elif key == "intentClosingSetting":
            suggest = "intent_closing_setting"
        elif key == "intentConfirmationSetting":
            suggest = "intent_confirmation_setting"
        elif key == "kendraConfiguration":
            suggest = "kendra_configuration"
        elif key == "outputContexts":
            suggest = "output_contexts"
        elif key == "parentIntentSignature":
            suggest = "parent_intent_signature"
        elif key == "qInConnectIntentConfiguration":
            suggest = "q_in_connect_intent_configuration"
        elif key == "qnAIntentConfiguration":
            suggest = "qn_a_intent_configuration"
        elif key == "sampleUtterances":
            suggest = "sample_utterances"
        elif key == "slotPriorities":
            suggest = "slot_priorities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotIntent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotIntent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotIntent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 bedrock_agent_intent_configuration: Optional['outputs.BotBedrockAgentIntentConfiguration'] = None,
                 description: Optional[builtins.str] = None,
                 dialog_code_hook: Optional['outputs.BotDialogCodeHookSetting'] = None,
                 fulfillment_code_hook: Optional['outputs.BotFulfillmentCodeHookSetting'] = None,
                 initial_response_setting: Optional['outputs.BotInitialResponseSetting'] = None,
                 input_contexts: Optional[Sequence['outputs.BotInputContext']] = None,
                 intent_closing_setting: Optional['outputs.BotIntentClosingSetting'] = None,
                 intent_confirmation_setting: Optional['outputs.BotIntentConfirmationSetting'] = None,
                 kendra_configuration: Optional['outputs.BotKendraConfiguration'] = None,
                 output_contexts: Optional[Sequence['outputs.BotOutputContext']] = None,
                 parent_intent_signature: Optional[builtins.str] = None,
                 q_in_connect_intent_configuration: Optional['outputs.BotQInConnectIntentConfiguration'] = None,
                 qn_a_intent_configuration: Optional['outputs.BotQnAIntentConfiguration'] = None,
                 sample_utterances: Optional[Sequence['outputs.BotSampleUtterance']] = None,
                 slot_priorities: Optional[Sequence['outputs.BotSlotPriority']] = None,
                 slots: Optional[Sequence['outputs.BotSlot']] = None):
        """
        :param builtins.str name: The name of the intent. Intent names must be unique within the locale that contains the intent and can't match the name of any built-in intent.
        :param builtins.str description: Description of thr intent.
        :param 'BotDialogCodeHookSetting' dialog_code_hook: Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.
        :param 'BotFulfillmentCodeHookSetting' fulfillment_code_hook: Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.
        :param 'BotInitialResponseSetting' initial_response_setting: Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
        :param Sequence['BotInputContext'] input_contexts: A list of contexts that must be active for this intent to be considered by Amazon Lex .
        :param 'BotIntentClosingSetting' intent_closing_setting: Sets the response that Amazon Lex sends to the user when the intent is closed.
        :param 'BotIntentConfirmationSetting' intent_confirmation_setting: Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.
        :param 'BotKendraConfiguration' kendra_configuration: Provides configuration information for the `AMAZON.KendraSearchIntent` intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
        :param Sequence['BotOutputContext'] output_contexts: A list of contexts that the intent activates when it is fulfilled.
        :param builtins.str parent_intent_signature: A unique identifier for the built-in intent to base this intent on.
        :param Sequence['BotSampleUtterance'] sample_utterances: A list of utterances that a user might say to signal the intent.
        :param Sequence['BotSlotPriority'] slot_priorities: Indicates the priority for slots. Amazon Lex prompts the user for slot values in priority order.
        :param Sequence['BotSlot'] slots: A list of slots that the intent requires for fulfillment.
        """
        pulumi.set(__self__, "name", name)
        if bedrock_agent_intent_configuration is not None:
            pulumi.set(__self__, "bedrock_agent_intent_configuration", bedrock_agent_intent_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dialog_code_hook is not None:
            pulumi.set(__self__, "dialog_code_hook", dialog_code_hook)
        if fulfillment_code_hook is not None:
            pulumi.set(__self__, "fulfillment_code_hook", fulfillment_code_hook)
        if initial_response_setting is not None:
            pulumi.set(__self__, "initial_response_setting", initial_response_setting)
        if input_contexts is not None:
            pulumi.set(__self__, "input_contexts", input_contexts)
        if intent_closing_setting is not None:
            pulumi.set(__self__, "intent_closing_setting", intent_closing_setting)
        if intent_confirmation_setting is not None:
            pulumi.set(__self__, "intent_confirmation_setting", intent_confirmation_setting)
        if kendra_configuration is not None:
            pulumi.set(__self__, "kendra_configuration", kendra_configuration)
        if output_contexts is not None:
            pulumi.set(__self__, "output_contexts", output_contexts)
        if parent_intent_signature is not None:
            pulumi.set(__self__, "parent_intent_signature", parent_intent_signature)
        if q_in_connect_intent_configuration is not None:
            pulumi.set(__self__, "q_in_connect_intent_configuration", q_in_connect_intent_configuration)
        if qn_a_intent_configuration is not None:
            pulumi.set(__self__, "qn_a_intent_configuration", qn_a_intent_configuration)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_priorities is not None:
            pulumi.set(__self__, "slot_priorities", slot_priorities)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the intent. Intent names must be unique within the locale that contains the intent and can't match the name of any built-in intent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="bedrockAgentIntentConfiguration")
    def bedrock_agent_intent_configuration(self) -> Optional['outputs.BotBedrockAgentIntentConfiguration']:
        return pulumi.get(self, "bedrock_agent_intent_configuration")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Description of thr intent.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dialogCodeHook")
    def dialog_code_hook(self) -> Optional['outputs.BotDialogCodeHookSetting']:
        """
        Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.
        """
        return pulumi.get(self, "dialog_code_hook")

    @property
    @pulumi.getter(name="fulfillmentCodeHook")
    def fulfillment_code_hook(self) -> Optional['outputs.BotFulfillmentCodeHookSetting']:
        """
        Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.
        """
        return pulumi.get(self, "fulfillment_code_hook")

    @property
    @pulumi.getter(name="initialResponseSetting")
    def initial_response_setting(self) -> Optional['outputs.BotInitialResponseSetting']:
        """
        Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
        """
        return pulumi.get(self, "initial_response_setting")

    @property
    @pulumi.getter(name="inputContexts")
    def input_contexts(self) -> Optional[Sequence['outputs.BotInputContext']]:
        """
        A list of contexts that must be active for this intent to be considered by Amazon Lex .
        """
        return pulumi.get(self, "input_contexts")

    @property
    @pulumi.getter(name="intentClosingSetting")
    def intent_closing_setting(self) -> Optional['outputs.BotIntentClosingSetting']:
        """
        Sets the response that Amazon Lex sends to the user when the intent is closed.
        """
        return pulumi.get(self, "intent_closing_setting")

    @property
    @pulumi.getter(name="intentConfirmationSetting")
    def intent_confirmation_setting(self) -> Optional['outputs.BotIntentConfirmationSetting']:
        """
        Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.
        """
        return pulumi.get(self, "intent_confirmation_setting")

    @property
    @pulumi.getter(name="kendraConfiguration")
    def kendra_configuration(self) -> Optional['outputs.BotKendraConfiguration']:
        """
        Provides configuration information for the `AMAZON.KendraSearchIntent` intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
        """
        return pulumi.get(self, "kendra_configuration")

    @property
    @pulumi.getter(name="outputContexts")
    def output_contexts(self) -> Optional[Sequence['outputs.BotOutputContext']]:
        """
        A list of contexts that the intent activates when it is fulfilled.
        """
        return pulumi.get(self, "output_contexts")

    @property
    @pulumi.getter(name="parentIntentSignature")
    def parent_intent_signature(self) -> Optional[builtins.str]:
        """
        A unique identifier for the built-in intent to base this intent on.
        """
        return pulumi.get(self, "parent_intent_signature")

    @property
    @pulumi.getter(name="qInConnectIntentConfiguration")
    def q_in_connect_intent_configuration(self) -> Optional['outputs.BotQInConnectIntentConfiguration']:
        return pulumi.get(self, "q_in_connect_intent_configuration")

    @property
    @pulumi.getter(name="qnAIntentConfiguration")
    def qn_a_intent_configuration(self) -> Optional['outputs.BotQnAIntentConfiguration']:
        return pulumi.get(self, "qn_a_intent_configuration")

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[Sequence['outputs.BotSampleUtterance']]:
        """
        A list of utterances that a user might say to signal the intent.
        """
        return pulumi.get(self, "sample_utterances")

    @property
    @pulumi.getter(name="slotPriorities")
    def slot_priorities(self) -> Optional[Sequence['outputs.BotSlotPriority']]:
        """
        Indicates the priority for slots. Amazon Lex prompts the user for slot values in priority order.
        """
        return pulumi.get(self, "slot_priorities")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.BotSlot']]:
        """
        A list of slots that the intent requires for fulfillment.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class BotIntentClosingSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "closingResponse":
            suggest = "closing_response"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "nextStep":
            suggest = "next_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotIntentClosingSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotIntentClosingSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotIntentClosingSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 closing_response: Optional['outputs.BotResponseSpecification'] = None,
                 conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 is_active: Optional[builtins.bool] = None,
                 next_step: Optional['outputs.BotDialogState'] = None):
        """
        :param 'BotResponseSpecification' closing_response: The response that Amazon Lex sends to the user when the intent is complete.
        :param 'BotConditionalSpecification' conditional: A list of conditional branches associated with the intent's closing response. These branches are executed when the `nextStep` attribute is set to `EvalutateConditional` .
        :param builtins.bool is_active: Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the `IsActive` field isn't specified, the default is true.
        :param 'BotDialogState' next_step: Specifies the next step that the bot executes after playing the intent's closing response.
        """
        if closing_response is not None:
            pulumi.set(__self__, "closing_response", closing_response)
        if conditional is not None:
            pulumi.set(__self__, "conditional", conditional)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if next_step is not None:
            pulumi.set(__self__, "next_step", next_step)

    @property
    @pulumi.getter(name="closingResponse")
    def closing_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        The response that Amazon Lex sends to the user when the intent is complete.
        """
        return pulumi.get(self, "closing_response")

    @property
    @pulumi.getter
    def conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches associated with the intent's closing response. These branches are executed when the `nextStep` attribute is set to `EvalutateConditional` .
        """
        return pulumi.get(self, "conditional")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[builtins.bool]:
        """
        Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the `IsActive` field isn't specified, the default is true.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="nextStep")
    def next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot executes after playing the intent's closing response.
        """
        return pulumi.get(self, "next_step")


@pulumi.output_type
class BotIntentConfirmationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promptSpecification":
            suggest = "prompt_specification"
        elif key == "codeHook":
            suggest = "code_hook"
        elif key == "confirmationConditional":
            suggest = "confirmation_conditional"
        elif key == "confirmationNextStep":
            suggest = "confirmation_next_step"
        elif key == "confirmationResponse":
            suggest = "confirmation_response"
        elif key == "declinationConditional":
            suggest = "declination_conditional"
        elif key == "declinationNextStep":
            suggest = "declination_next_step"
        elif key == "declinationResponse":
            suggest = "declination_response"
        elif key == "elicitationCodeHook":
            suggest = "elicitation_code_hook"
        elif key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "isActive":
            suggest = "is_active"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotIntentConfirmationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotIntentConfirmationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotIntentConfirmationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prompt_specification: 'outputs.BotPromptSpecification',
                 code_hook: Optional['outputs.BotDialogCodeHookInvocationSetting'] = None,
                 confirmation_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 confirmation_next_step: Optional['outputs.BotDialogState'] = None,
                 confirmation_response: Optional['outputs.BotResponseSpecification'] = None,
                 declination_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 declination_next_step: Optional['outputs.BotDialogState'] = None,
                 declination_response: Optional['outputs.BotResponseSpecification'] = None,
                 elicitation_code_hook: Optional['outputs.BotElicitationCodeHookInvocationSetting'] = None,
                 failure_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 failure_next_step: Optional['outputs.BotDialogState'] = None,
                 failure_response: Optional['outputs.BotResponseSpecification'] = None,
                 is_active: Optional[builtins.bool] = None):
        """
        :param 'BotPromptSpecification' prompt_specification: Prompts the user to confirm the intent. This question should have a yes or no answer.
               
               Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the `OrderPizza` intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.
        :param 'BotDialogCodeHookInvocationSetting' code_hook: The `DialogCodeHookInvocationSetting` object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `InvokeDialogCodeHook` .
        :param 'BotConditionalSpecification' confirmation_conditional: A list of conditional branches to evaluate after the intent is closed.
        :param 'BotDialogState' confirmation_next_step: Specifies the next step that the bot executes when the customer confirms the intent.
        :param 'BotResponseSpecification' confirmation_response: Specifies a list of message groups that Amazon Lex uses to respond the user input.
        :param 'BotConditionalSpecification' declination_conditional: A list of conditional branches to evaluate after the intent is declined.
        :param 'BotDialogState' declination_next_step: Specifies the next step that the bot executes when the customer declines the intent.
        :param 'BotResponseSpecification' declination_response: When the user answers "no" to the question defined in `promptSpecification` , Amazon Lex responds with this response to acknowledge that the intent was canceled.
        :param 'BotElicitationCodeHookInvocationSetting' elicitation_code_hook: The `DialogCodeHookInvocationSetting` used when the code hook is invoked during confirmation prompt retries.
        :param 'BotConditionalSpecification' failure_conditional: Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        :param 'BotDialogState' failure_next_step: The next step to take in the conversation if the confirmation step fails.
        :param 'BotResponseSpecification' failure_response: Specifies a list of message groups that Amazon Lex uses to respond the user input when the intent confirmation fails.
        :param builtins.bool is_active: Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the `IsActive` field isn't specified, the default is true.
        """
        pulumi.set(__self__, "prompt_specification", prompt_specification)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if confirmation_conditional is not None:
            pulumi.set(__self__, "confirmation_conditional", confirmation_conditional)
        if confirmation_next_step is not None:
            pulumi.set(__self__, "confirmation_next_step", confirmation_next_step)
        if confirmation_response is not None:
            pulumi.set(__self__, "confirmation_response", confirmation_response)
        if declination_conditional is not None:
            pulumi.set(__self__, "declination_conditional", declination_conditional)
        if declination_next_step is not None:
            pulumi.set(__self__, "declination_next_step", declination_next_step)
        if declination_response is not None:
            pulumi.set(__self__, "declination_response", declination_response)
        if elicitation_code_hook is not None:
            pulumi.set(__self__, "elicitation_code_hook", elicitation_code_hook)
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> 'outputs.BotPromptSpecification':
        """
        Prompts the user to confirm the intent. This question should have a yes or no answer.

        Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the `OrderPizza` intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.
        """
        return pulumi.get(self, "prompt_specification")

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.BotDialogCodeHookInvocationSetting']:
        """
        The `DialogCodeHookInvocationSetting` object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is `InvokeDialogCodeHook` .
        """
        return pulumi.get(self, "code_hook")

    @property
    @pulumi.getter(name="confirmationConditional")
    def confirmation_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the intent is closed.
        """
        return pulumi.get(self, "confirmation_conditional")

    @property
    @pulumi.getter(name="confirmationNextStep")
    def confirmation_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot executes when the customer confirms the intent.
        """
        return pulumi.get(self, "confirmation_next_step")

    @property
    @pulumi.getter(name="confirmationResponse")
    def confirmation_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input.
        """
        return pulumi.get(self, "confirmation_response")

    @property
    @pulumi.getter(name="declinationConditional")
    def declination_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the intent is declined.
        """
        return pulumi.get(self, "declination_conditional")

    @property
    @pulumi.getter(name="declinationNextStep")
    def declination_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot executes when the customer declines the intent.
        """
        return pulumi.get(self, "declination_next_step")

    @property
    @pulumi.getter(name="declinationResponse")
    def declination_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        When the user answers "no" to the question defined in `promptSpecification` , Amazon Lex responds with this response to acknowledge that the intent was canceled.
        """
        return pulumi.get(self, "declination_response")

    @property
    @pulumi.getter(name="elicitationCodeHook")
    def elicitation_code_hook(self) -> Optional['outputs.BotElicitationCodeHookInvocationSetting']:
        """
        The `DialogCodeHookInvocationSetting` used when the code hook is invoked during confirmation prompt retries.
        """
        return pulumi.get(self, "elicitation_code_hook")

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        The next step to take in the conversation if the confirmation step fails.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input when the intent confirmation fails.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[builtins.bool]:
        """
        Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the `IsActive` field isn't specified, the default is true.
        """
        return pulumi.get(self, "is_active")


@pulumi.output_type
class BotIntentOverride(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 slots: Optional[Sequence['outputs.BotSlotValueOverrideMap']] = None):
        """
        :param builtins.str name: The name of the intent. Only required when you're switching intents.
        :param Sequence['BotSlotValueOverrideMap'] slots: A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slots is not None:
            pulumi.set(__self__, "slots", slots)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the intent. Only required when you're switching intents.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> Optional[Sequence['outputs.BotSlotValueOverrideMap']]:
        """
        A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden.
        """
        return pulumi.get(self, "slots")


@pulumi.output_type
class BotKendraConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kendraIndex":
            suggest = "kendra_index"
        elif key == "queryFilterString":
            suggest = "query_filter_string"
        elif key == "queryFilterStringEnabled":
            suggest = "query_filter_string_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotKendraConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotKendraConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotKendraConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kendra_index: builtins.str,
                 query_filter_string: Optional[builtins.str] = None,
                 query_filter_string_enabled: Optional[builtins.bool] = None):
        """
        :param builtins.str kendra_index: The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the `AMAZON.KendraSearchIntent` intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        :param builtins.str query_filter_string: A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html) .
        :param builtins.bool query_filter_string_enabled: Determines whether the `AMAZON.KendraSearchIntent` intent uses a custom query string to query the Amazon Kendra index.
        """
        pulumi.set(__self__, "kendra_index", kendra_index)
        if query_filter_string is not None:
            pulumi.set(__self__, "query_filter_string", query_filter_string)
        if query_filter_string_enabled is not None:
            pulumi.set(__self__, "query_filter_string_enabled", query_filter_string_enabled)

    @property
    @pulumi.getter(name="kendraIndex")
    def kendra_index(self) -> builtins.str:
        """
        The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the `AMAZON.KendraSearchIntent` intent to search. The index must be in the same account and Region as the Amazon Lex bot.
        """
        return pulumi.get(self, "kendra_index")

    @property
    @pulumi.getter(name="queryFilterString")
    def query_filter_string(self) -> Optional[builtins.str]:
        """
        A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html) .
        """
        return pulumi.get(self, "query_filter_string")

    @property
    @pulumi.getter(name="queryFilterStringEnabled")
    def query_filter_string_enabled(self) -> Optional[builtins.bool]:
        """
        Determines whether the `AMAZON.KendraSearchIntent` intent uses a custom query string to query the Amazon Kendra index.
        """
        return pulumi.get(self, "query_filter_string_enabled")


@pulumi.output_type
class BotLocale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localeId":
            suggest = "locale_id"
        elif key == "nluConfidenceThreshold":
            suggest = "nlu_confidence_threshold"
        elif key == "customVocabulary":
            suggest = "custom_vocabulary"
        elif key == "slotTypes":
            suggest = "slot_types"
        elif key == "voiceSettings":
            suggest = "voice_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotLocale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotLocale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotLocale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 locale_id: builtins.str,
                 nlu_confidence_threshold: builtins.float,
                 custom_vocabulary: Optional['outputs.BotCustomVocabulary'] = None,
                 description: Optional[builtins.str] = None,
                 intents: Optional[Sequence['outputs.BotIntent']] = None,
                 slot_types: Optional[Sequence['outputs.BotSlotType']] = None,
                 voice_settings: Optional['outputs.BotVoiceSettings'] = None):
        """
        :param builtins.str locale_id: The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales.
        :param builtins.float nlu_confidence_threshold: Determines the threshold where Amazon Lex will insert the `AMAZON.FallbackIntent` , `AMAZON.KendraSearchIntent` , or both when returning alternative intents. You must configure an `AMAZON.FallbackIntent` . `AMAZON.KendraSearchIntent` is only inserted if it is configured for the bot.
        :param 'BotCustomVocabulary' custom_vocabulary: Specifies a custom vocabulary to use with a specific locale.
        :param builtins.str description: A description of the bot locale. Use this to help identify the bot locale in lists.
        :param Sequence['BotIntent'] intents: One or more intents defined for the locale.
        :param Sequence['BotSlotType'] slot_types: One or more slot types defined for the locale.
        :param 'BotVoiceSettings' voice_settings: Defines settings for using an Amazon Polly voice to communicate with a user.
               
               Valid values include:
               
               - `standard`
               - `neural`
               - `long-form`
               - `generative`
        """
        pulumi.set(__self__, "locale_id", locale_id)
        pulumi.set(__self__, "nlu_confidence_threshold", nlu_confidence_threshold)
        if custom_vocabulary is not None:
            pulumi.set(__self__, "custom_vocabulary", custom_vocabulary)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if intents is not None:
            pulumi.set(__self__, "intents", intents)
        if slot_types is not None:
            pulumi.set(__self__, "slot_types", slot_types)
        if voice_settings is not None:
            pulumi.set(__self__, "voice_settings", voice_settings)

    @property
    @pulumi.getter(name="localeId")
    def locale_id(self) -> builtins.str:
        """
        The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales.
        """
        return pulumi.get(self, "locale_id")

    @property
    @pulumi.getter(name="nluConfidenceThreshold")
    def nlu_confidence_threshold(self) -> builtins.float:
        """
        Determines the threshold where Amazon Lex will insert the `AMAZON.FallbackIntent` , `AMAZON.KendraSearchIntent` , or both when returning alternative intents. You must configure an `AMAZON.FallbackIntent` . `AMAZON.KendraSearchIntent` is only inserted if it is configured for the bot.
        """
        return pulumi.get(self, "nlu_confidence_threshold")

    @property
    @pulumi.getter(name="customVocabulary")
    def custom_vocabulary(self) -> Optional['outputs.BotCustomVocabulary']:
        """
        Specifies a custom vocabulary to use with a specific locale.
        """
        return pulumi.get(self, "custom_vocabulary")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description of the bot locale. Use this to help identify the bot locale in lists.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def intents(self) -> Optional[Sequence['outputs.BotIntent']]:
        """
        One or more intents defined for the locale.
        """
        return pulumi.get(self, "intents")

    @property
    @pulumi.getter(name="slotTypes")
    def slot_types(self) -> Optional[Sequence['outputs.BotSlotType']]:
        """
        One or more slot types defined for the locale.
        """
        return pulumi.get(self, "slot_types")

    @property
    @pulumi.getter(name="voiceSettings")
    def voice_settings(self) -> Optional['outputs.BotVoiceSettings']:
        """
        Defines settings for using an Amazon Polly voice to communicate with a user.

        Valid values include:

        - `standard`
        - `neural`
        - `long-form`
        - `generative`
        """
        return pulumi.get(self, "voice_settings")


@pulumi.output_type
class BotMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customPayload":
            suggest = "custom_payload"
        elif key == "imageResponseCard":
            suggest = "image_response_card"
        elif key == "plainTextMessage":
            suggest = "plain_text_message"
        elif key == "ssmlMessage":
            suggest = "ssml_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_payload: Optional['outputs.BotCustomPayload'] = None,
                 image_response_card: Optional['outputs.BotImageResponseCard'] = None,
                 plain_text_message: Optional['outputs.BotPlainTextMessage'] = None,
                 ssml_message: Optional['outputs.BotSsmlMessage'] = None):
        if custom_payload is not None:
            pulumi.set(__self__, "custom_payload", custom_payload)
        if image_response_card is not None:
            pulumi.set(__self__, "image_response_card", image_response_card)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if ssml_message is not None:
            pulumi.set(__self__, "ssml_message", ssml_message)

    @property
    @pulumi.getter(name="customPayload")
    def custom_payload(self) -> Optional['outputs.BotCustomPayload']:
        return pulumi.get(self, "custom_payload")

    @property
    @pulumi.getter(name="imageResponseCard")
    def image_response_card(self) -> Optional['outputs.BotImageResponseCard']:
        return pulumi.get(self, "image_response_card")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional['outputs.BotPlainTextMessage']:
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter(name="ssmlMessage")
    def ssml_message(self) -> Optional['outputs.BotSsmlMessage']:
        return pulumi.get(self, "ssml_message")


@pulumi.output_type
class BotMessageGroup(dict):
    def __init__(__self__, *,
                 message: 'outputs.BotMessage',
                 variations: Optional[Sequence['outputs.BotMessage']] = None):
        pulumi.set(__self__, "message", message)
        if variations is not None:
            pulumi.set(__self__, "variations", variations)

    @property
    @pulumi.getter
    def message(self) -> 'outputs.BotMessage':
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def variations(self) -> Optional[Sequence['outputs.BotMessage']]:
        return pulumi.get(self, "variations")


@pulumi.output_type
class BotMultipleValuesSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowMultipleValues":
            suggest = "allow_multiple_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotMultipleValuesSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotMultipleValuesSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotMultipleValuesSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_multiple_values: Optional[builtins.bool] = None):
        """
        :param builtins.bool allow_multiple_values: Indicates whether a slot can return multiple values. When `true` , the slot may return more than one value in a response. When `false` , the slot returns only a single value.
               
               Multi-value slots are only available in the en-US locale. If you set this value to `true` in any other locale, Amazon Lex throws a `ValidationException` .
               
               If the `allowMutlipleValues` is not set, the default value is `false` .
        """
        if allow_multiple_values is not None:
            pulumi.set(__self__, "allow_multiple_values", allow_multiple_values)

    @property
    @pulumi.getter(name="allowMultipleValues")
    def allow_multiple_values(self) -> Optional[builtins.bool]:
        """
        Indicates whether a slot can return multiple values. When `true` , the slot may return more than one value in a response. When `false` , the slot returns only a single value.

        Multi-value slots are only available in the en-US locale. If you set this value to `true` in any other locale, Amazon Lex throws a `ValidationException` .

        If the `allowMutlipleValues` is not set, the default value is `false` .
        """
        return pulumi.get(self, "allow_multiple_values")


@pulumi.output_type
class BotObfuscationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "obfuscationSettingType":
            suggest = "obfuscation_setting_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotObfuscationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotObfuscationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotObfuscationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 obfuscation_setting_type: 'BotObfuscationSettingObfuscationSettingType'):
        """
        :param 'BotObfuscationSettingObfuscationSettingType' obfuscation_setting_type: Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
        """
        pulumi.set(__self__, "obfuscation_setting_type", obfuscation_setting_type)

    @property
    @pulumi.getter(name="obfuscationSettingType")
    def obfuscation_setting_type(self) -> 'BotObfuscationSettingObfuscationSettingType':
        """
        Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
        """
        return pulumi.get(self, "obfuscation_setting_type")


@pulumi.output_type
class BotOutputContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeToLiveInSeconds":
            suggest = "time_to_live_in_seconds"
        elif key == "turnsToLive":
            suggest = "turns_to_live"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotOutputContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotOutputContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotOutputContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 time_to_live_in_seconds: builtins.int,
                 turns_to_live: builtins.int):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_to_live_in_seconds", time_to_live_in_seconds)
        pulumi.set(__self__, "turns_to_live", turns_to_live)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeToLiveInSeconds")
    def time_to_live_in_seconds(self) -> builtins.int:
        return pulumi.get(self, "time_to_live_in_seconds")

    @property
    @pulumi.getter(name="turnsToLive")
    def turns_to_live(self) -> builtins.int:
        return pulumi.get(self, "turns_to_live")


@pulumi.output_type
class BotPlainTextMessage(dict):
    def __init__(__self__, *,
                 value: builtins.str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotPostDialogCodeHookInvocationSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "successConditional":
            suggest = "success_conditional"
        elif key == "successNextStep":
            suggest = "success_next_step"
        elif key == "successResponse":
            suggest = "success_response"
        elif key == "timeoutConditional":
            suggest = "timeout_conditional"
        elif key == "timeoutNextStep":
            suggest = "timeout_next_step"
        elif key == "timeoutResponse":
            suggest = "timeout_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotPostDialogCodeHookInvocationSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotPostDialogCodeHookInvocationSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotPostDialogCodeHookInvocationSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 failure_next_step: Optional['outputs.BotDialogState'] = None,
                 failure_response: Optional['outputs.BotResponseSpecification'] = None,
                 success_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 success_next_step: Optional['outputs.BotDialogState'] = None,
                 success_response: Optional['outputs.BotResponseSpecification'] = None,
                 timeout_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 timeout_next_step: Optional['outputs.BotDialogState'] = None,
                 timeout_response: Optional['outputs.BotResponseSpecification'] = None):
        """
        :param 'BotConditionalSpecification' failure_conditional: A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        :param 'BotDialogState' failure_next_step: Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        :param 'BotResponseSpecification' failure_response: Specifies a list of message groups that Amazon Lex uses to respond the user input when the code hook fails.
        :param 'BotConditionalSpecification' success_conditional: A list of conditional branches to evaluate after the dialog code hook finishes successfully.
        :param 'BotDialogState' success_next_step: Specifics the next step the bot runs after the dialog code hook finishes successfully.
        :param 'BotResponseSpecification' success_response: Specifies a list of message groups that Amazon Lex uses to respond when the code hook succeeds.
        :param 'BotConditionalSpecification' timeout_conditional: A list of conditional branches to evaluate if the code hook times out.
        :param 'BotDialogState' timeout_next_step: Specifies the next step that the bot runs when the code hook times out.
        :param 'BotResponseSpecification' timeout_response: Specifies a list of message groups that Amazon Lex uses to respond to the user input when the code hook times out.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input when the code hook fails.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the dialog code hook finishes successfully.
        """
        return pulumi.get(self, "success_conditional")

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifics the next step the bot runs after the dialog code hook finishes successfully.
        """
        return pulumi.get(self, "success_next_step")

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond when the code hook succeeds.
        """
        return pulumi.get(self, "success_response")

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate if the code hook times out.
        """
        return pulumi.get(self, "timeout_conditional")

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot runs when the code hook times out.
        """
        return pulumi.get(self, "timeout_next_step")

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond to the user input when the code hook times out.
        """
        return pulumi.get(self, "timeout_response")


@pulumi.output_type
class BotPostFulfillmentStatusSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"
        elif key == "successConditional":
            suggest = "success_conditional"
        elif key == "successNextStep":
            suggest = "success_next_step"
        elif key == "successResponse":
            suggest = "success_response"
        elif key == "timeoutConditional":
            suggest = "timeout_conditional"
        elif key == "timeoutNextStep":
            suggest = "timeout_next_step"
        elif key == "timeoutResponse":
            suggest = "timeout_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotPostFulfillmentStatusSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotPostFulfillmentStatusSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotPostFulfillmentStatusSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 failure_next_step: Optional['outputs.BotDialogState'] = None,
                 failure_response: Optional['outputs.BotResponseSpecification'] = None,
                 success_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 success_next_step: Optional['outputs.BotDialogState'] = None,
                 success_response: Optional['outputs.BotResponseSpecification'] = None,
                 timeout_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 timeout_next_step: Optional['outputs.BotDialogState'] = None,
                 timeout_response: Optional['outputs.BotResponseSpecification'] = None):
        """
        :param 'BotConditionalSpecification' failure_conditional: A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        :param 'BotDialogState' failure_next_step: Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        :param 'BotResponseSpecification' failure_response: Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't successful.
        :param 'BotConditionalSpecification' success_conditional: A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
        :param 'BotDialogState' success_next_step: Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
        :param 'BotResponseSpecification' success_response: Specifies a list of message groups that Amazon Lex uses to respond when the fulfillment is successful.
        :param 'BotConditionalSpecification' timeout_conditional: A list of conditional branches to evaluate if the fulfillment code hook times out.
        :param 'BotDialogState' timeout_next_step: Specifies the next step that the bot runs when the fulfillment code hook times out.
        :param 'BotResponseSpecification' timeout_response: Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't completed within the timeout period.
        """
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if success_conditional is not None:
            pulumi.set(__self__, "success_conditional", success_conditional)
        if success_next_step is not None:
            pulumi.set(__self__, "success_next_step", success_next_step)
        if success_response is not None:
            pulumi.set(__self__, "success_response", success_response)
        if timeout_conditional is not None:
            pulumi.set(__self__, "timeout_conditional", timeout_conditional)
        if timeout_next_step is not None:
            pulumi.set(__self__, "timeout_next_step", timeout_next_step)
        if timeout_response is not None:
            pulumi.set(__self__, "timeout_response", timeout_response)

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the `State` field of the `Intent` object set to `Failed` .
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't successful.
        """
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="successConditional")
    def success_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
        """
        return pulumi.get(self, "success_conditional")

    @property
    @pulumi.getter(name="successNextStep")
    def success_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
        """
        return pulumi.get(self, "success_next_step")

    @property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond when the fulfillment is successful.
        """
        return pulumi.get(self, "success_response")

    @property
    @pulumi.getter(name="timeoutConditional")
    def timeout_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate if the fulfillment code hook times out.
        """
        return pulumi.get(self, "timeout_conditional")

    @property
    @pulumi.getter(name="timeoutNextStep")
    def timeout_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot runs when the fulfillment code hook times out.
        """
        return pulumi.get(self, "timeout_next_step")

    @property
    @pulumi.getter(name="timeoutResponse")
    def timeout_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond when fulfillment isn't completed within the timeout period.
        """
        return pulumi.get(self, "timeout_response")


@pulumi.output_type
class BotPromptAttemptSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedInputTypes":
            suggest = "allowed_input_types"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "audioAndDtmfInputSpecification":
            suggest = "audio_and_dtmf_input_specification"
        elif key == "textInputSpecification":
            suggest = "text_input_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotPromptAttemptSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotPromptAttemptSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotPromptAttemptSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_input_types: 'outputs.BotAllowedInputTypes',
                 allow_interrupt: Optional[builtins.bool] = None,
                 audio_and_dtmf_input_specification: Optional['outputs.BotAudioAndDtmfInputSpecification'] = None,
                 text_input_specification: Optional['outputs.BotTextInputSpecification'] = None):
        pulumi.set(__self__, "allowed_input_types", allowed_input_types)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if audio_and_dtmf_input_specification is not None:
            pulumi.set(__self__, "audio_and_dtmf_input_specification", audio_and_dtmf_input_specification)
        if text_input_specification is not None:
            pulumi.set(__self__, "text_input_specification", text_input_specification)

    @property
    @pulumi.getter(name="allowedInputTypes")
    def allowed_input_types(self) -> 'outputs.BotAllowedInputTypes':
        return pulumi.get(self, "allowed_input_types")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="audioAndDtmfInputSpecification")
    def audio_and_dtmf_input_specification(self) -> Optional['outputs.BotAudioAndDtmfInputSpecification']:
        return pulumi.get(self, "audio_and_dtmf_input_specification")

    @property
    @pulumi.getter(name="textInputSpecification")
    def text_input_specification(self) -> Optional['outputs.BotTextInputSpecification']:
        return pulumi.get(self, "text_input_specification")


@pulumi.output_type
class BotPromptSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRetries":
            suggest = "max_retries"
        elif key == "messageGroupsList":
            suggest = "message_groups_list"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"
        elif key == "messageSelectionStrategy":
            suggest = "message_selection_strategy"
        elif key == "promptAttemptsSpecification":
            suggest = "prompt_attempts_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotPromptSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotPromptSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotPromptSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_retries: builtins.int,
                 message_groups_list: Sequence['outputs.BotMessageGroup'],
                 allow_interrupt: Optional[builtins.bool] = None,
                 message_selection_strategy: Optional['BotMessageSelectionStrategy'] = None,
                 prompt_attempts_specification: Optional[Mapping[str, 'outputs.BotPromptAttemptSpecification']] = None):
        """
        :param builtins.int max_retries: The maximum number of times the bot tries to elicit a response from the user using this prompt.
        :param Sequence['BotMessageGroup'] message_groups_list: A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.
        :param builtins.bool allow_interrupt: Indicates whether the user can interrupt a speech prompt from the bot.
        :param 'BotMessageSelectionStrategy' message_selection_strategy: Indicates how a message is selected from a message group among retries.
        :param Mapping[str, 'BotPromptAttemptSpecification'] prompt_attempts_specification: Specifies the advanced settings on each attempt of the prompt.
        """
        pulumi.set(__self__, "max_retries", max_retries)
        pulumi.set(__self__, "message_groups_list", message_groups_list)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)
        if message_selection_strategy is not None:
            pulumi.set(__self__, "message_selection_strategy", message_selection_strategy)
        if prompt_attempts_specification is not None:
            pulumi.set(__self__, "prompt_attempts_specification", prompt_attempts_specification)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> builtins.int:
        """
        The maximum number of times the bot tries to elicit a response from the user using this prompt.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="messageGroupsList")
    def message_groups_list(self) -> Sequence['outputs.BotMessageGroup']:
        """
        A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.
        """
        return pulumi.get(self, "message_groups_list")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        """
        Indicates whether the user can interrupt a speech prompt from the bot.
        """
        return pulumi.get(self, "allow_interrupt")

    @property
    @pulumi.getter(name="messageSelectionStrategy")
    def message_selection_strategy(self) -> Optional['BotMessageSelectionStrategy']:
        """
        Indicates how a message is selected from a message group among retries.
        """
        return pulumi.get(self, "message_selection_strategy")

    @property
    @pulumi.getter(name="promptAttemptsSpecification")
    def prompt_attempts_specification(self) -> Optional[Mapping[str, 'outputs.BotPromptAttemptSpecification']]:
        """
        Specifies the advanced settings on each attempt of the prompt.
        """
        return pulumi.get(self, "prompt_attempts_specification")


@pulumi.output_type
class BotQInConnectIntentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qInConnectAssistantConfiguration":
            suggest = "q_in_connect_assistant_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQInConnectIntentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQInConnectIntentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQInConnectIntentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 q_in_connect_assistant_configuration: Optional['outputs.BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties'] = None):
        if q_in_connect_assistant_configuration is not None:
            pulumi.set(__self__, "q_in_connect_assistant_configuration", q_in_connect_assistant_configuration)

    @property
    @pulumi.getter(name="qInConnectAssistantConfiguration")
    def q_in_connect_assistant_configuration(self) -> Optional['outputs.BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties']:
        return pulumi.get(self, "q_in_connect_assistant_configuration")


@pulumi.output_type
class BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assistantArn":
            suggest = "assistant_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQInConnectIntentConfigurationQInConnectAssistantConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assistant_arn: builtins.str):
        pulumi.set(__self__, "assistant_arn", assistant_arn)

    @property
    @pulumi.getter(name="assistantArn")
    def assistant_arn(self) -> builtins.str:
        return pulumi.get(self, "assistant_arn")


@pulumi.output_type
class BotQnAIntentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockModelConfiguration":
            suggest = "bedrock_model_configuration"
        elif key == "dataSourceConfiguration":
            suggest = "data_source_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_model_configuration: 'outputs.BotBedrockModelSpecification',
                 data_source_configuration: 'outputs.BotQnAIntentConfigurationDataSourceConfigurationProperties'):
        """
        :param 'BotQnAIntentConfigurationDataSourceConfigurationProperties' data_source_configuration: Contains details about the configuration of the data source used for the `AMAZON.QnAIntent` .
        """
        pulumi.set(__self__, "bedrock_model_configuration", bedrock_model_configuration)
        pulumi.set(__self__, "data_source_configuration", data_source_configuration)

    @property
    @pulumi.getter(name="bedrockModelConfiguration")
    def bedrock_model_configuration(self) -> 'outputs.BotBedrockModelSpecification':
        return pulumi.get(self, "bedrock_model_configuration")

    @property
    @pulumi.getter(name="dataSourceConfiguration")
    def data_source_configuration(self) -> 'outputs.BotQnAIntentConfigurationDataSourceConfigurationProperties':
        """
        Contains details about the configuration of the data source used for the `AMAZON.QnAIntent` .
        """
        return pulumi.get(self, "data_source_configuration")


@pulumi.output_type
class BotQnAIntentConfigurationDataSourceConfigurationProperties(dict):
    """
    Contains details about the configuration of the data source used for the `AMAZON.QnAIntent` .
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockKnowledgeStoreConfiguration":
            suggest = "bedrock_knowledge_store_configuration"
        elif key == "kendraConfiguration":
            suggest = "kendra_configuration"
        elif key == "opensearchConfiguration":
            suggest = "opensearch_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfigurationDataSourceConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_knowledge_store_configuration: Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties'] = None,
                 kendra_configuration: Optional['outputs.BotQnAKendraConfiguration'] = None,
                 opensearch_configuration: Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties'] = None):
        """
        Contains details about the configuration of the data source used for the `AMAZON.QnAIntent` .
        """
        if bedrock_knowledge_store_configuration is not None:
            pulumi.set(__self__, "bedrock_knowledge_store_configuration", bedrock_knowledge_store_configuration)
        if kendra_configuration is not None:
            pulumi.set(__self__, "kendra_configuration", kendra_configuration)
        if opensearch_configuration is not None:
            pulumi.set(__self__, "opensearch_configuration", opensearch_configuration)

    @property
    @pulumi.getter(name="bedrockKnowledgeStoreConfiguration")
    def bedrock_knowledge_store_configuration(self) -> Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties']:
        return pulumi.get(self, "bedrock_knowledge_store_configuration")

    @property
    @pulumi.getter(name="kendraConfiguration")
    def kendra_configuration(self) -> Optional['outputs.BotQnAKendraConfiguration']:
        return pulumi.get(self, "kendra_configuration")

    @property
    @pulumi.getter(name="opensearchConfiguration")
    def opensearch_configuration(self) -> Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties']:
        return pulumi.get(self, "opensearch_configuration")


@pulumi.output_type
class BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bedrockKnowledgeBaseArn":
            suggest = "bedrock_knowledge_base_arn"
        elif key == "bkbExactResponseFields":
            suggest = "bkb_exact_response_fields"
        elif key == "exactResponse":
            suggest = "exact_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bedrock_knowledge_base_arn: Optional[builtins.str] = None,
                 bkb_exact_response_fields: Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties'] = None,
                 exact_response: Optional[builtins.bool] = None):
        if bedrock_knowledge_base_arn is not None:
            pulumi.set(__self__, "bedrock_knowledge_base_arn", bedrock_knowledge_base_arn)
        if bkb_exact_response_fields is not None:
            pulumi.set(__self__, "bkb_exact_response_fields", bkb_exact_response_fields)
        if exact_response is not None:
            pulumi.set(__self__, "exact_response", exact_response)

    @property
    @pulumi.getter(name="bedrockKnowledgeBaseArn")
    def bedrock_knowledge_base_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "bedrock_knowledge_base_arn")

    @property
    @pulumi.getter(name="bkbExactResponseFields")
    def bkb_exact_response_fields(self) -> Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties']:
        return pulumi.get(self, "bkb_exact_response_fields")

    @property
    @pulumi.getter(name="exactResponse")
    def exact_response(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "exact_response")


@pulumi.output_type
class BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerField":
            suggest = "answer_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesBedrockKnowledgeStoreConfigurationPropertiesBkbExactResponseFieldsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_field: Optional[builtins.str] = None):
        if answer_field is not None:
            pulumi.set(__self__, "answer_field", answer_field)

    @property
    @pulumi.getter(name="answerField")
    def answer_field(self) -> Optional[builtins.str]:
        return pulumi.get(self, "answer_field")


@pulumi.output_type
class BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainEndpoint":
            suggest = "domain_endpoint"
        elif key == "exactResponse":
            suggest = "exact_response"
        elif key == "exactResponseFields":
            suggest = "exact_response_fields"
        elif key == "includeFields":
            suggest = "include_fields"
        elif key == "indexName":
            suggest = "index_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_endpoint: Optional[builtins.str] = None,
                 exact_response: Optional[builtins.bool] = None,
                 exact_response_fields: Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties'] = None,
                 include_fields: Optional[Sequence[builtins.str]] = None,
                 index_name: Optional[builtins.str] = None):
        if domain_endpoint is not None:
            pulumi.set(__self__, "domain_endpoint", domain_endpoint)
        if exact_response is not None:
            pulumi.set(__self__, "exact_response", exact_response)
        if exact_response_fields is not None:
            pulumi.set(__self__, "exact_response_fields", exact_response_fields)
        if include_fields is not None:
            pulumi.set(__self__, "include_fields", include_fields)
        if index_name is not None:
            pulumi.set(__self__, "index_name", index_name)

    @property
    @pulumi.getter(name="domainEndpoint")
    def domain_endpoint(self) -> Optional[builtins.str]:
        return pulumi.get(self, "domain_endpoint")

    @property
    @pulumi.getter(name="exactResponse")
    def exact_response(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "exact_response")

    @property
    @pulumi.getter(name="exactResponseFields")
    def exact_response_fields(self) -> Optional['outputs.BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties']:
        return pulumi.get(self, "exact_response_fields")

    @property
    @pulumi.getter(name="includeFields")
    def include_fields(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "include_fields")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "index_name")


@pulumi.output_type
class BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerField":
            suggest = "answer_field"
        elif key == "questionField":
            suggest = "question_field"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAIntentConfigurationDataSourceConfigurationPropertiesOpensearchConfigurationPropertiesExactResponseFieldsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_field: Optional[builtins.str] = None,
                 question_field: Optional[builtins.str] = None):
        if answer_field is not None:
            pulumi.set(__self__, "answer_field", answer_field)
        if question_field is not None:
            pulumi.set(__self__, "question_field", question_field)

    @property
    @pulumi.getter(name="answerField")
    def answer_field(self) -> Optional[builtins.str]:
        return pulumi.get(self, "answer_field")

    @property
    @pulumi.getter(name="questionField")
    def question_field(self) -> Optional[builtins.str]:
        return pulumi.get(self, "question_field")


@pulumi.output_type
class BotQnAKendraConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactResponse":
            suggest = "exact_response"
        elif key == "kendraIndex":
            suggest = "kendra_index"
        elif key == "queryFilterStringEnabled":
            suggest = "query_filter_string_enabled"
        elif key == "queryFilterString":
            suggest = "query_filter_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotQnAKendraConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotQnAKendraConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotQnAKendraConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_response: builtins.bool,
                 kendra_index: builtins.str,
                 query_filter_string_enabled: builtins.bool,
                 query_filter_string: Optional[builtins.str] = None):
        """
        :param builtins.bool exact_response: Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at [Adding frequently asked questions (FAQs) to an index](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html) .
        :param builtins.str kendra_index: The ARN of the Amazon Kendra index to use.
        :param builtins.bool query_filter_string_enabled: Specifies whether to enable an Amazon Kendra filter string or not.
        :param builtins.str query_filter_string: Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see [Using document attributes to filter search results](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering) .
        """
        pulumi.set(__self__, "exact_response", exact_response)
        pulumi.set(__self__, "kendra_index", kendra_index)
        pulumi.set(__self__, "query_filter_string_enabled", query_filter_string_enabled)
        if query_filter_string is not None:
            pulumi.set(__self__, "query_filter_string", query_filter_string)

    @property
    @pulumi.getter(name="exactResponse")
    def exact_response(self) -> builtins.bool:
        """
        Specifies whether to return an exact response from the Amazon Kendra index or to let the Amazon Bedrock model you select generate a response based on the results. To use this feature, you must first add FAQ questions to your index by following the steps at [Adding frequently asked questions (FAQs) to an index](https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html) .
        """
        return pulumi.get(self, "exact_response")

    @property
    @pulumi.getter(name="kendraIndex")
    def kendra_index(self) -> builtins.str:
        """
        The ARN of the Amazon Kendra index to use.
        """
        return pulumi.get(self, "kendra_index")

    @property
    @pulumi.getter(name="queryFilterStringEnabled")
    def query_filter_string_enabled(self) -> builtins.bool:
        """
        Specifies whether to enable an Amazon Kendra filter string or not.
        """
        return pulumi.get(self, "query_filter_string_enabled")

    @property
    @pulumi.getter(name="queryFilterString")
    def query_filter_string(self) -> Optional[builtins.str]:
        """
        Contains the Amazon Kendra filter string to use if enabled. For more information on the Amazon Kendra search filter JSON format, see [Using document attributes to filter search results](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html#search-filtering) .
        """
        return pulumi.get(self, "query_filter_string")


@pulumi.output_type
class BotReplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaRegions":
            suggest = "replica_regions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotReplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotReplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotReplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replica_regions: Sequence[builtins.str]):
        pulumi.set(__self__, "replica_regions", replica_regions)

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "replica_regions")


@pulumi.output_type
class BotResponseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageGroupsList":
            suggest = "message_groups_list"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_groups_list: Sequence['outputs.BotMessageGroup'],
                 allow_interrupt: Optional[builtins.bool] = None):
        """
        :param Sequence['BotMessageGroup'] message_groups_list: A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.
        :param builtins.bool allow_interrupt: Indicates whether the user can interrupt a speech response from Amazon Lex.
        """
        pulumi.set(__self__, "message_groups_list", message_groups_list)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)

    @property
    @pulumi.getter(name="messageGroupsList")
    def message_groups_list(self) -> Sequence['outputs.BotMessageGroup']:
        """
        A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.
        """
        return pulumi.get(self, "message_groups_list")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        """
        Indicates whether the user can interrupt a speech response from Amazon Lex.
        """
        return pulumi.get(self, "allow_interrupt")


@pulumi.output_type
class BotS3BucketLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logPrefix":
            suggest = "log_prefix"
        elif key == "s3BucketArn":
            suggest = "s3_bucket_arn"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotS3BucketLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotS3BucketLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotS3BucketLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_prefix: builtins.str,
                 s3_bucket_arn: builtins.str,
                 kms_key_arn: Optional[builtins.str] = None):
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "s3_bucket_arn", s3_bucket_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> builtins.str:
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter(name="s3BucketArn")
    def s3_bucket_arn(self) -> builtins.str:
        return pulumi.get(self, "s3_bucket_arn")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class BotS3Location(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3ObjectKey":
            suggest = "s3_object_key"
        elif key == "s3ObjectVersion":
            suggest = "s3_object_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotS3Location. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotS3Location.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotS3Location.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: builtins.str,
                 s3_object_key: builtins.str,
                 s3_object_version: Optional[builtins.str] = None):
        """
        :param builtins.str s3_bucket: The S3 bucket name.
        :param builtins.str s3_object_key: The path and file name to the object in the S3 bucket.
        :param builtins.str s3_object_version: The version of the object in the S3 bucket.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object_key", s3_object_key)
        if s3_object_version is not None:
            pulumi.set(__self__, "s3_object_version", s3_object_version)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> builtins.str:
        """
        The S3 bucket name.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> builtins.str:
        """
        The path and file name to the object in the S3 bucket.
        """
        return pulumi.get(self, "s3_object_key")

    @property
    @pulumi.getter(name="s3ObjectVersion")
    def s3_object_version(self) -> Optional[builtins.str]:
        """
        The version of the object in the S3 bucket.
        """
        return pulumi.get(self, "s3_object_version")


@pulumi.output_type
class BotSampleUtterance(dict):
    def __init__(__self__, *,
                 utterance: builtins.str):
        pulumi.set(__self__, "utterance", utterance)

    @property
    @pulumi.getter
    def utterance(self) -> builtins.str:
        return pulumi.get(self, "utterance")


@pulumi.output_type
class BotSampleValue(dict):
    def __init__(__self__, *,
                 value: builtins.str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotSessionAttribute(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: The name of the session attribute.
        :param builtins.str value: The session-specific context information for the session attribute.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The name of the session attribute.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The session-specific context information for the session attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BotSlot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotTypeName":
            suggest = "slot_type_name"
        elif key == "valueElicitationSetting":
            suggest = "value_elicitation_setting"
        elif key == "multipleValuesSetting":
            suggest = "multiple_values_setting"
        elif key == "obfuscationSetting":
            suggest = "obfuscation_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 slot_type_name: builtins.str,
                 value_elicitation_setting: 'outputs.BotSlotValueElicitationSetting',
                 description: Optional[builtins.str] = None,
                 multiple_values_setting: Optional['outputs.BotMultipleValuesSetting'] = None,
                 obfuscation_setting: Optional['outputs.BotObfuscationSetting'] = None):
        """
        :param builtins.str name: The name given to the slot.
        :param builtins.str slot_type_name: The name of the slot type that this slot is based on. The slot type defines the acceptable values for the slot.
        :param 'BotSlotValueElicitationSetting' value_elicitation_setting: Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
               
               - ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to a slot value.
               - TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
               
               If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        :param builtins.str description: The description of the slot.
        :param 'BotMultipleValuesSetting' multiple_values_setting: Indicates whether a slot can return multiple values.
        :param 'BotObfuscationSetting' obfuscation_setting: Determines whether the contents of the slot are obfuscated in Amazon CloudWatch Logs logs. Use obfuscated slots to protect information such as personally identifiable information (PII) in logs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_type_name", slot_type_name)
        pulumi.set(__self__, "value_elicitation_setting", value_elicitation_setting)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if multiple_values_setting is not None:
            pulumi.set(__self__, "multiple_values_setting", multiple_values_setting)
        if obfuscation_setting is not None:
            pulumi.set(__self__, "obfuscation_setting", obfuscation_setting)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name given to the slot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="slotTypeName")
    def slot_type_name(self) -> builtins.str:
        """
        The name of the slot type that this slot is based on. The slot type defines the acceptable values for the slot.
        """
        return pulumi.get(self, "slot_type_name")

    @property
    @pulumi.getter(name="valueElicitationSetting")
    def value_elicitation_setting(self) -> 'outputs.BotSlotValueElicitationSetting':
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:

        - ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to a slot value.
        - TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.

        If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        """
        return pulumi.get(self, "value_elicitation_setting")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the slot.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="multipleValuesSetting")
    def multiple_values_setting(self) -> Optional['outputs.BotMultipleValuesSetting']:
        """
        Indicates whether a slot can return multiple values.
        """
        return pulumi.get(self, "multiple_values_setting")

    @property
    @pulumi.getter(name="obfuscationSetting")
    def obfuscation_setting(self) -> Optional['outputs.BotObfuscationSetting']:
        """
        Determines whether the contents of the slot are obfuscated in Amazon CloudWatch Logs logs. Use obfuscated slots to protect information such as personally identifiable information (PII) in logs.
        """
        return pulumi.get(self, "obfuscation_setting")


@pulumi.output_type
class BotSlotCaptureSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captureConditional":
            suggest = "capture_conditional"
        elif key == "captureNextStep":
            suggest = "capture_next_step"
        elif key == "captureResponse":
            suggest = "capture_response"
        elif key == "codeHook":
            suggest = "code_hook"
        elif key == "elicitationCodeHook":
            suggest = "elicitation_code_hook"
        elif key == "failureConditional":
            suggest = "failure_conditional"
        elif key == "failureNextStep":
            suggest = "failure_next_step"
        elif key == "failureResponse":
            suggest = "failure_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotCaptureSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotCaptureSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotCaptureSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capture_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 capture_next_step: Optional['outputs.BotDialogState'] = None,
                 capture_response: Optional['outputs.BotResponseSpecification'] = None,
                 code_hook: Optional['outputs.BotDialogCodeHookInvocationSetting'] = None,
                 elicitation_code_hook: Optional['outputs.BotElicitationCodeHookInvocationSetting'] = None,
                 failure_conditional: Optional['outputs.BotConditionalSpecification'] = None,
                 failure_next_step: Optional['outputs.BotDialogState'] = None,
                 failure_response: Optional['outputs.BotResponseSpecification'] = None):
        """
        :param 'BotConditionalSpecification' capture_conditional: A list of conditional branches to evaluate after the slot value is captured.
        :param 'BotDialogState' capture_next_step: Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
        :param 'BotResponseSpecification' capture_response: Specifies a list of message groups that Amazon Lex uses to respond the user input.
        :param 'BotDialogCodeHookInvocationSetting' code_hook: Code hook called after Amazon Lex successfully captures a slot value.
        :param 'BotElicitationCodeHookInvocationSetting' elicitation_code_hook: Code hook called when Amazon Lex doesn't capture a slot value.
        :param 'BotConditionalSpecification' failure_conditional: A list of conditional branches to evaluate when the slot value isn't captured.
        :param 'BotDialogState' failure_next_step: Specifies the next step that the bot runs when the slot value code is not recognized.
        :param 'BotResponseSpecification' failure_response: Specifies a list of message groups that Amazon Lex uses to respond the user input when the slot fails to be captured.
        """
        if capture_conditional is not None:
            pulumi.set(__self__, "capture_conditional", capture_conditional)
        if capture_next_step is not None:
            pulumi.set(__self__, "capture_next_step", capture_next_step)
        if capture_response is not None:
            pulumi.set(__self__, "capture_response", capture_response)
        if code_hook is not None:
            pulumi.set(__self__, "code_hook", code_hook)
        if elicitation_code_hook is not None:
            pulumi.set(__self__, "elicitation_code_hook", elicitation_code_hook)
        if failure_conditional is not None:
            pulumi.set(__self__, "failure_conditional", failure_conditional)
        if failure_next_step is not None:
            pulumi.set(__self__, "failure_next_step", failure_next_step)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)

    @property
    @pulumi.getter(name="captureConditional")
    def capture_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate after the slot value is captured.
        """
        return pulumi.get(self, "capture_conditional")

    @property
    @pulumi.getter(name="captureNextStep")
    def capture_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
        """
        return pulumi.get(self, "capture_next_step")

    @property
    @pulumi.getter(name="captureResponse")
    def capture_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input.
        """
        return pulumi.get(self, "capture_response")

    @property
    @pulumi.getter(name="codeHook")
    def code_hook(self) -> Optional['outputs.BotDialogCodeHookInvocationSetting']:
        """
        Code hook called after Amazon Lex successfully captures a slot value.
        """
        return pulumi.get(self, "code_hook")

    @property
    @pulumi.getter(name="elicitationCodeHook")
    def elicitation_code_hook(self) -> Optional['outputs.BotElicitationCodeHookInvocationSetting']:
        """
        Code hook called when Amazon Lex doesn't capture a slot value.
        """
        return pulumi.get(self, "elicitation_code_hook")

    @property
    @pulumi.getter(name="failureConditional")
    def failure_conditional(self) -> Optional['outputs.BotConditionalSpecification']:
        """
        A list of conditional branches to evaluate when the slot value isn't captured.
        """
        return pulumi.get(self, "failure_conditional")

    @property
    @pulumi.getter(name="failureNextStep")
    def failure_next_step(self) -> Optional['outputs.BotDialogState']:
        """
        Specifies the next step that the bot runs when the slot value code is not recognized.
        """
        return pulumi.get(self, "failure_next_step")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional['outputs.BotResponseSpecification']:
        """
        Specifies a list of message groups that Amazon Lex uses to respond the user input when the slot fails to be captured.
        """
        return pulumi.get(self, "failure_response")


@pulumi.output_type
class BotSlotDefaultValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotDefaultValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotDefaultValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotDefaultValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: builtins.str):
        """
        :param builtins.str default_value: The default value to use when a user doesn't provide a value for a slot.
        """
        pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        The default value to use when a user doesn't provide a value for a slot.
        """
        return pulumi.get(self, "default_value")


@pulumi.output_type
class BotSlotDefaultValueSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValueList":
            suggest = "default_value_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotDefaultValueSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotDefaultValueSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotDefaultValueSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value_list: Sequence['outputs.BotSlotDefaultValue']):
        """
        :param Sequence['BotSlotDefaultValue'] default_value_list: A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list.
        """
        pulumi.set(__self__, "default_value_list", default_value_list)

    @property
    @pulumi.getter(name="defaultValueList")
    def default_value_list(self) -> Sequence['outputs.BotSlotDefaultValue']:
        """
        A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list.
        """
        return pulumi.get(self, "default_value_list")


@pulumi.output_type
class BotSlotPriority(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotName":
            suggest = "slot_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotPriority. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotPriority.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotPriority.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 priority: builtins.int,
                 slot_name: builtins.str):
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "slot_name", slot_name)

    @property
    @pulumi.getter
    def priority(self) -> builtins.int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="slotName")
    def slot_name(self) -> builtins.str:
        return pulumi.get(self, "slot_name")


@pulumi.output_type
class BotSlotType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compositeSlotTypeSetting":
            suggest = "composite_slot_type_setting"
        elif key == "externalSourceSetting":
            suggest = "external_source_setting"
        elif key == "parentSlotTypeSignature":
            suggest = "parent_slot_type_signature"
        elif key == "slotTypeValues":
            suggest = "slot_type_values"
        elif key == "valueSelectionSetting":
            suggest = "value_selection_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 composite_slot_type_setting: Optional['outputs.BotCompositeSlotTypeSetting'] = None,
                 description: Optional[builtins.str] = None,
                 external_source_setting: Optional['outputs.BotExternalSourceSetting'] = None,
                 parent_slot_type_signature: Optional[builtins.str] = None,
                 slot_type_values: Optional[Sequence['outputs.BotSlotTypeValue']] = None,
                 value_selection_setting: Optional['outputs.BotSlotValueSelectionSetting'] = None):
        """
        :param builtins.str name: The name of the slot type. A slot type name must be unique withing the account.
        :param builtins.str description: A description of the slot type. Use the description to help identify the slot type in lists.
        :param 'BotExternalSourceSetting' external_source_setting: Sets the type of external information used to create the slot type.
        :param builtins.str parent_slot_type_signature: The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent lot type.
               
               Only `AMAZON.AlphaNumeric` is supported.
        :param Sequence['BotSlotTypeValue'] slot_type_values: A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for the slot.
        :param 'BotSlotValueSelectionSetting' value_selection_setting: Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
               
               - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
               - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
               
               If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        """
        pulumi.set(__self__, "name", name)
        if composite_slot_type_setting is not None:
            pulumi.set(__self__, "composite_slot_type_setting", composite_slot_type_setting)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_source_setting is not None:
            pulumi.set(__self__, "external_source_setting", external_source_setting)
        if parent_slot_type_signature is not None:
            pulumi.set(__self__, "parent_slot_type_signature", parent_slot_type_signature)
        if slot_type_values is not None:
            pulumi.set(__self__, "slot_type_values", slot_type_values)
        if value_selection_setting is not None:
            pulumi.set(__self__, "value_selection_setting", value_selection_setting)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the slot type. A slot type name must be unique withing the account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="compositeSlotTypeSetting")
    def composite_slot_type_setting(self) -> Optional['outputs.BotCompositeSlotTypeSetting']:
        return pulumi.get(self, "composite_slot_type_setting")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description of the slot type. Use the description to help identify the slot type in lists.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalSourceSetting")
    def external_source_setting(self) -> Optional['outputs.BotExternalSourceSetting']:
        """
        Sets the type of external information used to create the slot type.
        """
        return pulumi.get(self, "external_source_setting")

    @property
    @pulumi.getter(name="parentSlotTypeSignature")
    def parent_slot_type_signature(self) -> Optional[builtins.str]:
        """
        The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent lot type.

        Only `AMAZON.AlphaNumeric` is supported.
        """
        return pulumi.get(self, "parent_slot_type_signature")

    @property
    @pulumi.getter(name="slotTypeValues")
    def slot_type_values(self) -> Optional[Sequence['outputs.BotSlotTypeValue']]:
        """
        A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for the slot.
        """
        return pulumi.get(self, "slot_type_values")

    @property
    @pulumi.getter(name="valueSelectionSetting")
    def value_selection_setting(self) -> Optional['outputs.BotSlotValueSelectionSetting']:
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:

        - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
        - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.

        If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        """
        return pulumi.get(self, "value_selection_setting")


@pulumi.output_type
class BotSlotTypeValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleValue":
            suggest = "sample_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotTypeValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotTypeValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotTypeValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sample_value: 'outputs.BotSampleValue',
                 synonyms: Optional[Sequence['outputs.BotSampleValue']] = None):
        pulumi.set(__self__, "sample_value", sample_value)
        if synonyms is not None:
            pulumi.set(__self__, "synonyms", synonyms)

    @property
    @pulumi.getter(name="sampleValue")
    def sample_value(self) -> 'outputs.BotSampleValue':
        return pulumi.get(self, "sample_value")

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[Sequence['outputs.BotSampleValue']]:
        return pulumi.get(self, "synonyms")


@pulumi.output_type
class BotSlotValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interpretedValue":
            suggest = "interpreted_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interpreted_value: Optional[builtins.str] = None):
        """
        :param builtins.str interpreted_value: The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the `resolvedValues` list.
        """
        if interpreted_value is not None:
            pulumi.set(__self__, "interpreted_value", interpreted_value)

    @property
    @pulumi.getter(name="interpretedValue")
    def interpreted_value(self) -> Optional[builtins.str]:
        """
        The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the `resolvedValues` list.
        """
        return pulumi.get(self, "interpreted_value")


@pulumi.output_type
class BotSlotValueElicitationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotConstraint":
            suggest = "slot_constraint"
        elif key == "defaultValueSpecification":
            suggest = "default_value_specification"
        elif key == "promptSpecification":
            suggest = "prompt_specification"
        elif key == "sampleUtterances":
            suggest = "sample_utterances"
        elif key == "slotCaptureSetting":
            suggest = "slot_capture_setting"
        elif key == "waitAndContinueSpecification":
            suggest = "wait_and_continue_specification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotValueElicitationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotValueElicitationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotValueElicitationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slot_constraint: 'BotSlotConstraint',
                 default_value_specification: Optional['outputs.BotSlotDefaultValueSpecification'] = None,
                 prompt_specification: Optional['outputs.BotPromptSpecification'] = None,
                 sample_utterances: Optional[Sequence['outputs.BotSampleUtterance']] = None,
                 slot_capture_setting: Optional['outputs.BotSlotCaptureSetting'] = None,
                 wait_and_continue_specification: Optional['outputs.BotWaitAndContinueSpecification'] = None):
        """
        :param 'BotSlotConstraint' slot_constraint: Specifies whether the slot is required or optional.
        :param 'BotSlotDefaultValueSpecification' default_value_specification: A list of default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.
        :param 'BotPromptSpecification' prompt_specification: The prompt that Amazon Lex uses to elicit the slot value from the user.
        :param Sequence['BotSampleUtterance'] sample_utterances: If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.
        :param 'BotSlotCaptureSetting' slot_capture_setting: Specifies the settings that Amazon Lex uses when a slot value is successfully entered by a user.
        :param 'BotWaitAndContinueSpecification' wait_and_continue_specification: Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        """
        pulumi.set(__self__, "slot_constraint", slot_constraint)
        if default_value_specification is not None:
            pulumi.set(__self__, "default_value_specification", default_value_specification)
        if prompt_specification is not None:
            pulumi.set(__self__, "prompt_specification", prompt_specification)
        if sample_utterances is not None:
            pulumi.set(__self__, "sample_utterances", sample_utterances)
        if slot_capture_setting is not None:
            pulumi.set(__self__, "slot_capture_setting", slot_capture_setting)
        if wait_and_continue_specification is not None:
            pulumi.set(__self__, "wait_and_continue_specification", wait_and_continue_specification)

    @property
    @pulumi.getter(name="slotConstraint")
    def slot_constraint(self) -> 'BotSlotConstraint':
        """
        Specifies whether the slot is required or optional.
        """
        return pulumi.get(self, "slot_constraint")

    @property
    @pulumi.getter(name="defaultValueSpecification")
    def default_value_specification(self) -> Optional['outputs.BotSlotDefaultValueSpecification']:
        """
        A list of default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values.
        """
        return pulumi.get(self, "default_value_specification")

    @property
    @pulumi.getter(name="promptSpecification")
    def prompt_specification(self) -> Optional['outputs.BotPromptSpecification']:
        """
        The prompt that Amazon Lex uses to elicit the slot value from the user.
        """
        return pulumi.get(self, "prompt_specification")

    @property
    @pulumi.getter(name="sampleUtterances")
    def sample_utterances(self) -> Optional[Sequence['outputs.BotSampleUtterance']]:
        """
        If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances.
        """
        return pulumi.get(self, "sample_utterances")

    @property
    @pulumi.getter(name="slotCaptureSetting")
    def slot_capture_setting(self) -> Optional['outputs.BotSlotCaptureSetting']:
        """
        Specifies the settings that Amazon Lex uses when a slot value is successfully entered by a user.
        """
        return pulumi.get(self, "slot_capture_setting")

    @property
    @pulumi.getter(name="waitAndContinueSpecification")
    def wait_and_continue_specification(self) -> Optional['outputs.BotWaitAndContinueSpecification']:
        """
        Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
        """
        return pulumi.get(self, "wait_and_continue_specification")


@pulumi.output_type
class BotSlotValueOverride(dict):
    def __init__(__self__, *,
                 shape: Optional['BotSlotShape'] = None,
                 value: Optional['outputs.BotSlotValue'] = None,
                 values: Optional[Sequence['outputs.BotSlotValueOverride']] = None):
        """
        :param 'BotSlotShape' shape: When the shape value is `List` , it indicates that the `values` field contains a list of slot values. When the value is `Scalar` , it indicates that the `value` field contains a single value.
        :param 'BotSlotValue' value: The current value of the slot.
        :param Sequence['BotSlotValueOverride'] values: A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
        """
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def shape(self) -> Optional['BotSlotShape']:
        """
        When the shape value is `List` , it indicates that the `values` field contains a list of slot values. When the value is `Scalar` , it indicates that the `value` field contains a single value.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.BotSlotValue']:
        """
        The current value of the slot.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.BotSlotValueOverride']]:
        """
        A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class BotSlotValueOverrideMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotName":
            suggest = "slot_name"
        elif key == "slotValueOverride":
            suggest = "slot_value_override"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotValueOverrideMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotValueOverrideMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotValueOverrideMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 slot_name: Optional[builtins.str] = None,
                 slot_value_override: Optional['outputs.BotSlotValueOverride'] = None):
        """
        :param builtins.str slot_name: The name of the slot.
        :param 'BotSlotValueOverride' slot_value_override: The SlotValueOverride object to which the slot name will be mapped.
        """
        if slot_name is not None:
            pulumi.set(__self__, "slot_name", slot_name)
        if slot_value_override is not None:
            pulumi.set(__self__, "slot_value_override", slot_value_override)

    @property
    @pulumi.getter(name="slotName")
    def slot_name(self) -> Optional[builtins.str]:
        """
        The name of the slot.
        """
        return pulumi.get(self, "slot_name")

    @property
    @pulumi.getter(name="slotValueOverride")
    def slot_value_override(self) -> Optional['outputs.BotSlotValueOverride']:
        """
        The SlotValueOverride object to which the slot name will be mapped.
        """
        return pulumi.get(self, "slot_value_override")


@pulumi.output_type
class BotSlotValueRegexFilter(dict):
    def __init__(__self__, *,
                 pattern: builtins.str):
        """
        :param builtins.str pattern: A regular expression used to validate the value of a slot.
               
               Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:
               
               - A-Z, a-z
               - 0-9
               - Unicode characters ("\\⁠u<Unicode>")
               
               Represent Unicode characters with four digits, for example "\\⁠u0041" or "\\⁠u005A".
               
               The following regular expression operators are not supported:
               
               - Infinite repeaters: *, +, or {x,} with no upper bound.
               - Wild card (.)
        """
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> builtins.str:
        """
        A regular expression used to validate the value of a slot.

        Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:

        - A-Z, a-z
        - 0-9
        - Unicode characters ("\\⁠u<Unicode>")

        Represent Unicode characters with four digits, for example "\\⁠u0041" or "\\⁠u005A".

        The following regular expression operators are not supported:

        - Infinite repeaters: *, +, or {x,} with no upper bound.
        - Wild card (.)
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class BotSlotValueSelectionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolutionStrategy":
            suggest = "resolution_strategy"
        elif key == "advancedRecognitionSetting":
            suggest = "advanced_recognition_setting"
        elif key == "regexFilter":
            suggest = "regex_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSlotValueSelectionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSlotValueSelectionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSlotValueSelectionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resolution_strategy: 'BotSlotValueResolutionStrategy',
                 advanced_recognition_setting: Optional['outputs.BotAdvancedRecognitionSetting'] = None,
                 regex_filter: Optional['outputs.BotSlotValueRegexFilter'] = None):
        """
        :param 'BotSlotValueResolutionStrategy' resolution_strategy: Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
               
               - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
               - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
               
               If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        :param 'BotAdvancedRecognitionSetting' advanced_recognition_setting: Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        :param 'BotSlotValueRegexFilter' regex_filter: A regular expression used to validate the value of a slot.
        """
        pulumi.set(__self__, "resolution_strategy", resolution_strategy)
        if advanced_recognition_setting is not None:
            pulumi.set(__self__, "advanced_recognition_setting", advanced_recognition_setting)
        if regex_filter is not None:
            pulumi.set(__self__, "regex_filter", regex_filter)

    @property
    @pulumi.getter(name="resolutionStrategy")
    def resolution_strategy(self) -> 'BotSlotValueResolutionStrategy':
        """
        Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:

        - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
        - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.

        If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        """
        return pulumi.get(self, "resolution_strategy")

    @property
    @pulumi.getter(name="advancedRecognitionSetting")
    def advanced_recognition_setting(self) -> Optional['outputs.BotAdvancedRecognitionSetting']:
        """
        Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        """
        return pulumi.get(self, "advanced_recognition_setting")

    @property
    @pulumi.getter(name="regexFilter")
    def regex_filter(self) -> Optional['outputs.BotSlotValueRegexFilter']:
        """
        A regular expression used to validate the value of a slot.
        """
        return pulumi.get(self, "regex_filter")


@pulumi.output_type
class BotSsmlMessage(dict):
    def __init__(__self__, *,
                 value: builtins.str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotStillWaitingResponseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frequencyInSeconds":
            suggest = "frequency_in_seconds"
        elif key == "messageGroupsList":
            suggest = "message_groups_list"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"
        elif key == "allowInterrupt":
            suggest = "allow_interrupt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotStillWaitingResponseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotStillWaitingResponseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotStillWaitingResponseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency_in_seconds: builtins.int,
                 message_groups_list: Sequence['outputs.BotMessageGroup'],
                 timeout_in_seconds: builtins.int,
                 allow_interrupt: Optional[builtins.bool] = None):
        """
        :param builtins.int frequency_in_seconds: How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.
        :param Sequence['BotMessageGroup'] message_groups_list: One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.
        :param builtins.int timeout_in_seconds: If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        :param builtins.bool allow_interrupt: Indicates that the user can interrupt the response by speaking while the message is being played.
        """
        pulumi.set(__self__, "frequency_in_seconds", frequency_in_seconds)
        pulumi.set(__self__, "message_groups_list", message_groups_list)
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if allow_interrupt is not None:
            pulumi.set(__self__, "allow_interrupt", allow_interrupt)

    @property
    @pulumi.getter(name="frequencyInSeconds")
    def frequency_in_seconds(self) -> builtins.int:
        """
        How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.
        """
        return pulumi.get(self, "frequency_in_seconds")

    @property
    @pulumi.getter(name="messageGroupsList")
    def message_groups_list(self) -> Sequence['outputs.BotMessageGroup']:
        """
        One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.
        """
        return pulumi.get(self, "message_groups_list")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> builtins.int:
        """
        If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="allowInterrupt")
    def allow_interrupt(self) -> Optional[builtins.bool]:
        """
        Indicates that the user can interrupt the response by speaking while the message is being played.
        """
        return pulumi.get(self, "allow_interrupt")


@pulumi.output_type
class BotSubSlotTypeComposition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slotTypeId":
            suggest = "slot_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotSubSlotTypeComposition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotSubSlotTypeComposition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotSubSlotTypeComposition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 slot_type_id: builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slot_type_id", slot_type_id)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="slotTypeId")
    def slot_type_id(self) -> builtins.str:
        return pulumi.get(self, "slot_type_id")


@pulumi.output_type
class BotTag(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BotTestBotAliasSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "botAliasLocaleSettings":
            suggest = "bot_alias_locale_settings"
        elif key == "conversationLogSettings":
            suggest = "conversation_log_settings"
        elif key == "sentimentAnalysisSettings":
            suggest = "sentiment_analysis_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotTestBotAliasSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotTestBotAliasSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotTestBotAliasSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bot_alias_locale_settings: Optional[Sequence['outputs.BotAliasLocaleSettingsItem']] = None,
                 conversation_log_settings: Optional['outputs.BotConversationLogSettings'] = None,
                 description: Optional[builtins.str] = None,
                 sentiment_analysis_settings: Optional['outputs.BotTestBotAliasSettingsSentimentAnalysisSettingsProperties'] = None):
        """
        :param Sequence['BotAliasLocaleSettingsItem'] bot_alias_locale_settings: Specifies settings that are unique to a locale. For example, you can use a different Lambda function depending on the bot's locale.
        :param 'BotConversationLogSettings' conversation_log_settings: Specifies settings for conversation logs that save audio, text, and metadata information for conversations with your users.
        :param builtins.str description: Specifies a description for the test bot alias.
        :param 'BotTestBotAliasSettingsSentimentAnalysisSettingsProperties' sentiment_analysis_settings: Specifies whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
        """
        if bot_alias_locale_settings is not None:
            pulumi.set(__self__, "bot_alias_locale_settings", bot_alias_locale_settings)
        if conversation_log_settings is not None:
            pulumi.set(__self__, "conversation_log_settings", conversation_log_settings)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if sentiment_analysis_settings is not None:
            pulumi.set(__self__, "sentiment_analysis_settings", sentiment_analysis_settings)

    @property
    @pulumi.getter(name="botAliasLocaleSettings")
    def bot_alias_locale_settings(self) -> Optional[Sequence['outputs.BotAliasLocaleSettingsItem']]:
        """
        Specifies settings that are unique to a locale. For example, you can use a different Lambda function depending on the bot's locale.
        """
        return pulumi.get(self, "bot_alias_locale_settings")

    @property
    @pulumi.getter(name="conversationLogSettings")
    def conversation_log_settings(self) -> Optional['outputs.BotConversationLogSettings']:
        """
        Specifies settings for conversation logs that save audio, text, and metadata information for conversations with your users.
        """
        return pulumi.get(self, "conversation_log_settings")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Specifies a description for the test bot alias.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="sentimentAnalysisSettings")
    def sentiment_analysis_settings(self) -> Optional['outputs.BotTestBotAliasSettingsSentimentAnalysisSettingsProperties']:
        """
        Specifies whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
        """
        return pulumi.get(self, "sentiment_analysis_settings")


@pulumi.output_type
class BotTestBotAliasSettingsSentimentAnalysisSettingsProperties(dict):
    """
    Specifies whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectSentiment":
            suggest = "detect_sentiment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotTestBotAliasSettingsSentimentAnalysisSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotTestBotAliasSettingsSentimentAnalysisSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotTestBotAliasSettingsSentimentAnalysisSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detect_sentiment: builtins.bool):
        """
        Specifies whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
        """
        pulumi.set(__self__, "detect_sentiment", detect_sentiment)

    @property
    @pulumi.getter(name="detectSentiment")
    def detect_sentiment(self) -> builtins.bool:
        return pulumi.get(self, "detect_sentiment")


@pulumi.output_type
class BotTextInputSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTimeoutMs":
            suggest = "start_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotTextInputSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotTextInputSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotTextInputSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_timeout_ms: builtins.int):
        pulumi.set(__self__, "start_timeout_ms", start_timeout_ms)

    @property
    @pulumi.getter(name="startTimeoutMs")
    def start_timeout_ms(self) -> builtins.int:
        return pulumi.get(self, "start_timeout_ms")


@pulumi.output_type
class BotTextLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatch":
            suggest = "cloud_watch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotTextLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotTextLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotTextLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch: 'outputs.BotCloudWatchLogGroupLogDestination'):
        pulumi.set(__self__, "cloud_watch", cloud_watch)

    @property
    @pulumi.getter(name="cloudWatch")
    def cloud_watch(self) -> 'outputs.BotCloudWatchLogGroupLogDestination':
        return pulumi.get(self, "cloud_watch")


@pulumi.output_type
class BotTextLogSetting(dict):
    def __init__(__self__, *,
                 destination: 'outputs.BotTextLogDestination',
                 enabled: builtins.bool):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.BotTextLogDestination':
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class BotVersionLocaleDetails(dict):
    """
    The version of a bot used for a bot locale.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceBotVersion":
            suggest = "source_bot_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotVersionLocaleDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotVersionLocaleDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotVersionLocaleDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_bot_version: builtins.str):
        """
        The version of a bot used for a bot locale.
        """
        pulumi.set(__self__, "source_bot_version", source_bot_version)

    @property
    @pulumi.getter(name="sourceBotVersion")
    def source_bot_version(self) -> builtins.str:
        return pulumi.get(self, "source_bot_version")


@pulumi.output_type
class BotVersionLocaleSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "botVersionLocaleDetails":
            suggest = "bot_version_locale_details"
        elif key == "localeId":
            suggest = "locale_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotVersionLocaleSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotVersionLocaleSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotVersionLocaleSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bot_version_locale_details: 'outputs.BotVersionLocaleDetails',
                 locale_id: builtins.str):
        pulumi.set(__self__, "bot_version_locale_details", bot_version_locale_details)
        pulumi.set(__self__, "locale_id", locale_id)

    @property
    @pulumi.getter(name="botVersionLocaleDetails")
    def bot_version_locale_details(self) -> 'outputs.BotVersionLocaleDetails':
        return pulumi.get(self, "bot_version_locale_details")

    @property
    @pulumi.getter(name="localeId")
    def locale_id(self) -> builtins.str:
        return pulumi.get(self, "locale_id")


@pulumi.output_type
class BotVoiceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "voiceId":
            suggest = "voice_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotVoiceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotVoiceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotVoiceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 voice_id: builtins.str,
                 engine: Optional['BotVoiceSettingsEngine'] = None):
        """
        :param builtins.str voice_id: The identifier of the Amazon Polly voice to use.
        :param 'BotVoiceSettingsEngine' engine: Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the [`engine` parameter of the `SynthesizeSpeech` operation](https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine) in the *Amazon Polly developer guide* .
               
               If you do not specify a value, the default is `standard` .
        """
        pulumi.set(__self__, "voice_id", voice_id)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)

    @property
    @pulumi.getter(name="voiceId")
    def voice_id(self) -> builtins.str:
        """
        The identifier of the Amazon Polly voice to use.
        """
        return pulumi.get(self, "voice_id")

    @property
    @pulumi.getter
    def engine(self) -> Optional['BotVoiceSettingsEngine']:
        """
        Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the [`engine` parameter of the `SynthesizeSpeech` operation](https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine) in the *Amazon Polly developer guide* .

        If you do not specify a value, the default is `standard` .
        """
        return pulumi.get(self, "engine")


@pulumi.output_type
class BotWaitAndContinueSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continueResponse":
            suggest = "continue_response"
        elif key == "waitingResponse":
            suggest = "waiting_response"
        elif key == "isActive":
            suggest = "is_active"
        elif key == "stillWaitingResponse":
            suggest = "still_waiting_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BotWaitAndContinueSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BotWaitAndContinueSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BotWaitAndContinueSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_response: 'outputs.BotResponseSpecification',
                 waiting_response: 'outputs.BotResponseSpecification',
                 is_active: Optional[builtins.bool] = None,
                 still_waiting_response: Optional['outputs.BotStillWaitingResponseSpecification'] = None):
        """
        :param 'BotResponseSpecification' continue_response: The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        :param 'BotResponseSpecification' waiting_response: The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        :param builtins.bool is_active: Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren't used. If the `IsActive` field isn't specified, the default is true.
        :param 'BotStillWaitingResponseSpecification' still_waiting_response: A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        """
        pulumi.set(__self__, "continue_response", continue_response)
        pulumi.set(__self__, "waiting_response", waiting_response)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if still_waiting_response is not None:
            pulumi.set(__self__, "still_waiting_response", still_waiting_response)

    @property
    @pulumi.getter(name="continueResponse")
    def continue_response(self) -> 'outputs.BotResponseSpecification':
        """
        The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
        """
        return pulumi.get(self, "continue_response")

    @property
    @pulumi.getter(name="waitingResponse")
    def waiting_response(self) -> 'outputs.BotResponseSpecification':
        """
        The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
        """
        return pulumi.get(self, "waiting_response")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[builtins.bool]:
        """
        Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren't used. If the `IsActive` field isn't specified, the default is true.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="stillWaitingResponse")
    def still_waiting_response(self) -> Optional['outputs.BotStillWaitingResponseSpecification']:
        """
        A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
        """
        return pulumi.get(self, "still_waiting_response")


@pulumi.output_type
class DataPrivacyProperties(dict):
    """
    By default, data stored by Amazon Lex is encrypted. The `DataPrivacy` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "childDirected":
            suggest = "child_directed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataPrivacyProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataPrivacyProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataPrivacyProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 child_directed: builtins.bool):
        """
        By default, data stored by Amazon Lex is encrypted. The `DataPrivacy` structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot.
        :param builtins.bool child_directed: For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying `true` or `false` in the `childDirected` field. By specifying `true` in the `childDirected` field, you confirm that your use of Amazon Lex *is* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying `false` in the `childDirected` field, you confirm that your use of Amazon Lex *is not* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the `childDirected` field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ](https://docs.aws.amazon.com/lex/faqs#data-security) .
        """
        pulumi.set(__self__, "child_directed", child_directed)

    @property
    @pulumi.getter(name="childDirected")
    def child_directed(self) -> builtins.bool:
        """
        For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying `true` or `false` in the `childDirected` field. By specifying `true` in the `childDirected` field, you confirm that your use of Amazon Lex *is* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying `false` in the `childDirected` field, you confirm that your use of Amazon Lex *is not* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the `childDirected` field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ](https://docs.aws.amazon.com/lex/faqs#data-security) .
        """
        return pulumi.get(self, "child_directed")


@pulumi.output_type
class ResourcePolicyPolicy(dict):
    """
    A resource policy to add to the resource. The policy is a JSON structure following the IAM syntax that contains one or more statements that define the policy.
    """
    def __init__(__self__):
        """
        A resource policy to add to the resource. The policy is a JSON structure following the IAM syntax that contains one or more statements that define the policy.
        """
        pass


@pulumi.output_type
class SentimentAnalysisSettingsProperties(dict):
    """
    Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectSentiment":
            suggest = "detect_sentiment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SentimentAnalysisSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SentimentAnalysisSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SentimentAnalysisSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detect_sentiment: builtins.bool):
        """
        Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
        :param builtins.bool detect_sentiment: Enable to call Amazon Comprehend for Sentiment natively within Lex
        """
        pulumi.set(__self__, "detect_sentiment", detect_sentiment)

    @property
    @pulumi.getter(name="detectSentiment")
    def detect_sentiment(self) -> builtins.bool:
        """
        Enable to call Amazon Comprehend for Sentiment natively within Lex
        """
        return pulumi.get(self, "detect_sentiment")


