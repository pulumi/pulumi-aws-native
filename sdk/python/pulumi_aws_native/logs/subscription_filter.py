# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['SubscriptionFilterArgs', 'SubscriptionFilter']

@pulumi.input_type
class SubscriptionFilterArgs:
    def __init__(__self__, *,
                 destination_arn: pulumi.Input[_builtins.str],
                 filter_pattern: pulumi.Input[_builtins.str],
                 log_group_name: pulumi.Input[_builtins.str],
                 apply_on_transformed_logs: Optional[pulumi.Input[_builtins.bool]] = None,
                 distribution: Optional[pulumi.Input['SubscriptionFilterDistribution']] = None,
                 emit_system_fields: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 field_selection_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SubscriptionFilter resource.
        :param pulumi.Input[_builtins.str] destination_arn: The Amazon Resource Name (ARN) of the destination.
        :param pulumi.Input[_builtins.str] filter_pattern: The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        :param pulumi.Input[_builtins.str] log_group_name: The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
        :param pulumi.Input[_builtins.bool] apply_on_transformed_logs: This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
                If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
        :param pulumi.Input['SubscriptionFilterDistribution'] distribution: The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] emit_system_fields: The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
        :param pulumi.Input[_builtins.str] field_selection_criteria: The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
        :param pulumi.Input[_builtins.str] filter_name: The name of the subscription filter.
        :param pulumi.Input[_builtins.str] role_arn: The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        """
        pulumi.set(__self__, "destination_arn", destination_arn)
        pulumi.set(__self__, "filter_pattern", filter_pattern)
        pulumi.set(__self__, "log_group_name", log_group_name)
        if apply_on_transformed_logs is not None:
            pulumi.set(__self__, "apply_on_transformed_logs", apply_on_transformed_logs)
        if distribution is not None:
            pulumi.set(__self__, "distribution", distribution)
        if emit_system_fields is not None:
            pulumi.set(__self__, "emit_system_fields", emit_system_fields)
        if field_selection_criteria is not None:
            pulumi.set(__self__, "field_selection_criteria", field_selection_criteria)
        if filter_name is not None:
            pulumi.set(__self__, "filter_name", filter_name)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @_builtins.property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> pulumi.Input[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the destination.
        """
        return pulumi.get(self, "destination_arn")

    @destination_arn.setter
    def destination_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_arn", value)

    @_builtins.property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> pulumi.Input[_builtins.str]:
        """
        The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        """
        return pulumi.get(self, "filter_pattern")

    @filter_pattern.setter
    def filter_pattern(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "filter_pattern", value)

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Input[_builtins.str]:
        """
        The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
        """
        return pulumi.get(self, "log_group_name")

    @log_group_name.setter
    def log_group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_name", value)

    @_builtins.property
    @pulumi.getter(name="applyOnTransformedLogs")
    def apply_on_transformed_logs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
         If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
        """
        return pulumi.get(self, "apply_on_transformed_logs")

    @apply_on_transformed_logs.setter
    def apply_on_transformed_logs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "apply_on_transformed_logs", value)

    @_builtins.property
    @pulumi.getter
    def distribution(self) -> Optional[pulumi.Input['SubscriptionFilterDistribution']]:
        """
        The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        """
        return pulumi.get(self, "distribution")

    @distribution.setter
    def distribution(self, value: Optional[pulumi.Input['SubscriptionFilterDistribution']]):
        pulumi.set(self, "distribution", value)

    @_builtins.property
    @pulumi.getter(name="emitSystemFields")
    def emit_system_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
        """
        return pulumi.get(self, "emit_system_fields")

    @emit_system_fields.setter
    def emit_system_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "emit_system_fields", value)

    @_builtins.property
    @pulumi.getter(name="fieldSelectionCriteria")
    def field_selection_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
        """
        return pulumi.get(self, "field_selection_criteria")

    @field_selection_criteria.setter
    def field_selection_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "field_selection_criteria", value)

    @_builtins.property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the subscription filter.
        """
        return pulumi.get(self, "filter_name")

    @filter_name.setter
    def filter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter_name", value)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.type_token("aws-native:logs:SubscriptionFilter")
class SubscriptionFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_on_transformed_logs: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 distribution: Optional[pulumi.Input['SubscriptionFilterDistribution']] = None,
                 emit_system_fields: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 field_selection_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The ``AWS::Logs::SubscriptionFilter`` resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:
          +  An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.
          +  A logical destination that belongs to a different account, for cross-account delivery.
          +  An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.
          +  An LAMlong function that belongs to the same account as the subscription filter, for same-account delivery.

         There can be as many as two subscription filters associated with a log group.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] apply_on_transformed_logs: This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
                If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
        :param pulumi.Input[_builtins.str] destination_arn: The Amazon Resource Name (ARN) of the destination.
        :param pulumi.Input['SubscriptionFilterDistribution'] distribution: The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] emit_system_fields: The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
        :param pulumi.Input[_builtins.str] field_selection_criteria: The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
        :param pulumi.Input[_builtins.str] filter_name: The name of the subscription filter.
        :param pulumi.Input[_builtins.str] filter_pattern: The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        :param pulumi.Input[_builtins.str] log_group_name: The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
        :param pulumi.Input[_builtins.str] role_arn: The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscriptionFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The ``AWS::Logs::SubscriptionFilter`` resource specifies a subscription filter and associates it with the specified log group. Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination. Currently, the supported destinations are:
          +  An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.
          +  A logical destination that belongs to a different account, for cross-account delivery.
          +  An Amazon Kinesis Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.
          +  An LAMlong function that belongs to the same account as the subscription filter, for same-account delivery.

         There can be as many as two subscription filters associated with a log group.

        :param str resource_name: The name of the resource.
        :param SubscriptionFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_on_transformed_logs: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 distribution: Optional[pulumi.Input['SubscriptionFilterDistribution']] = None,
                 emit_system_fields: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 field_selection_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 log_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionFilterArgs.__new__(SubscriptionFilterArgs)

            __props__.__dict__["apply_on_transformed_logs"] = apply_on_transformed_logs
            if destination_arn is None and not opts.urn:
                raise TypeError("Missing required property 'destination_arn'")
            __props__.__dict__["destination_arn"] = destination_arn
            __props__.__dict__["distribution"] = distribution
            __props__.__dict__["emit_system_fields"] = emit_system_fields
            __props__.__dict__["field_selection_criteria"] = field_selection_criteria
            __props__.__dict__["filter_name"] = filter_name
            if filter_pattern is None and not opts.urn:
                raise TypeError("Missing required property 'filter_pattern'")
            __props__.__dict__["filter_pattern"] = filter_pattern
            if log_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'log_group_name'")
            __props__.__dict__["log_group_name"] = log_group_name
            __props__.__dict__["role_arn"] = role_arn
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["filterName", "logGroupName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(SubscriptionFilter, __self__).__init__(
            'aws-native:logs:SubscriptionFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SubscriptionFilter':
        """
        Get an existing SubscriptionFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SubscriptionFilterArgs.__new__(SubscriptionFilterArgs)

        __props__.__dict__["apply_on_transformed_logs"] = None
        __props__.__dict__["destination_arn"] = None
        __props__.__dict__["distribution"] = None
        __props__.__dict__["emit_system_fields"] = None
        __props__.__dict__["field_selection_criteria"] = None
        __props__.__dict__["filter_name"] = None
        __props__.__dict__["filter_pattern"] = None
        __props__.__dict__["log_group_name"] = None
        __props__.__dict__["role_arn"] = None
        return SubscriptionFilter(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applyOnTransformedLogs")
    def apply_on_transformed_logs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
         If this value is ``true``, the subscription filter is applied on the transformed version of the log events instead of the original ingested log events.
        """
        return pulumi.get(self, "apply_on_transformed_logs")

    @_builtins.property
    @pulumi.getter(name="destinationArn")
    def destination_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the destination.
        """
        return pulumi.get(self, "destination_arn")

    @_builtins.property
    @pulumi.getter
    def distribution(self) -> pulumi.Output[Optional['SubscriptionFilterDistribution']]:
        """
        The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        """
        return pulumi.get(self, "distribution")

    @_builtins.property
    @pulumi.getter(name="emitSystemFields")
    def emit_system_fields(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of system fields that are included in the log events sent to the subscription destination. Returns the `emitSystemFields` value if it was specified when the subscription filter was created.
        """
        return pulumi.get(self, "emit_system_fields")

    @_builtins.property
    @pulumi.getter(name="fieldSelectionCriteria")
    def field_selection_criteria(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The filter expression that specifies which log events are processed by this subscription filter based on system fields. Returns the `fieldSelectionCriteria` value if it was specified when the subscription filter was created.
        """
        return pulumi.get(self, "field_selection_criteria")

    @_builtins.property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the subscription filter.
        """
        return pulumi.get(self, "filter_name")

    @_builtins.property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> pulumi.Output[_builtins.str]:
        """
        The filtering expressions that restrict what gets delivered to the destination AWS resource. For more information about the filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        """
        return pulumi.get(self, "filter_pattern")

    @_builtins.property
    @pulumi.getter(name="logGroupName")
    def log_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The log group to associate with the subscription filter. All log events that are uploaded to this log group are filtered and delivered to the specified AWS resource if the filter pattern matches the log events.
        """
        return pulumi.get(self, "log_group_name")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ARN of an IAM role that grants CWL permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        """
        return pulumi.get(self, "role_arn")

