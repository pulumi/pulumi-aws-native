# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMetricFilterResult',
    'AwaitableGetMetricFilterResult',
    'get_metric_filter',
    'get_metric_filter_output',
]

@pulumi.output_type
class GetMetricFilterResult:
    def __init__(__self__, filter_pattern=None, id=None, metric_transformations=None):
        if filter_pattern and not isinstance(filter_pattern, str):
            raise TypeError("Expected argument 'filter_pattern' to be a str")
        pulumi.set(__self__, "filter_pattern", filter_pattern)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_transformations and not isinstance(metric_transformations, list):
            raise TypeError("Expected argument 'metric_transformations' to be a list")
        pulumi.set(__self__, "metric_transformations", metric_transformations)

    @property
    @pulumi.getter(name="filterPattern")
    def filter_pattern(self) -> Optional[str]:
        return pulumi.get(self, "filter_pattern")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricTransformations")
    def metric_transformations(self) -> Optional[Sequence['outputs.MetricFilterMetricTransformation']]:
        return pulumi.get(self, "metric_transformations")


class AwaitableGetMetricFilterResult(GetMetricFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricFilterResult(
            filter_pattern=self.filter_pattern,
            id=self.id,
            metric_transformations=self.metric_transformations)


def get_metric_filter(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricFilterResult:
    """
    Resource Type definition for AWS::Logs::MetricFilter
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:logs:getMetricFilter', __args__, opts=opts, typ=GetMetricFilterResult).value

    return AwaitableGetMetricFilterResult(
        filter_pattern=__ret__.filter_pattern,
        id=__ret__.id,
        metric_transformations=__ret__.metric_transformations)


@_utilities.lift_output_func(get_metric_filter)
def get_metric_filter_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetricFilterResult]:
    """
    Resource Type definition for AWS::Logs::MetricFilter
    """
    ...
