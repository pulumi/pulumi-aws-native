# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'CloudFormationProductCodeStarParametersArgs',
    'CloudFormationProductConnectionParametersArgs',
    'CloudFormationProductProvisioningArtifactPropertiesArgs',
    'CloudFormationProductSourceConnectionArgs',
    'CloudFormationProductTagArgs',
    'CloudFormationProvisionedProductProvisioningParameterArgs',
    'CloudFormationProvisionedProductProvisioningPreferencesArgs',
    'CloudFormationProvisionedProductTagArgs',
    'PortfolioTagArgs',
    'ServiceActionDefinitionParameterArgs',
]

@pulumi.input_type
class CloudFormationProductCodeStarParametersArgs:
    def __init__(__self__, *,
                 artifact_path: pulumi.Input[str],
                 branch: pulumi.Input[str],
                 connection_arn: pulumi.Input[str],
                 repository: pulumi.Input[str]):
        CloudFormationProductCodeStarParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_path=artifact_path,
            branch=branch,
            connection_arn=connection_arn,
            repository=repository,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_path: pulumi.Input[str],
             branch: pulumi.Input[str],
             connection_arn: pulumi.Input[str],
             repository: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("artifact_path", artifact_path)
        _setter("branch", branch)
        _setter("connection_arn", connection_arn)
        _setter("repository", repository)

    @property
    @pulumi.getter(name="artifactPath")
    def artifact_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "artifact_path")

    @artifact_path.setter
    def artifact_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_path", value)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="connectionArn")
    def connection_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connection_arn")

    @connection_arn.setter
    def connection_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "connection_arn", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)


@pulumi.input_type
class CloudFormationProductConnectionParametersArgs:
    def __init__(__self__, *,
                 code_star: Optional[pulumi.Input['CloudFormationProductCodeStarParametersArgs']] = None):
        CloudFormationProductConnectionParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code_star=code_star,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code_star: Optional[pulumi.Input['CloudFormationProductCodeStarParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code_star is not None:
            _setter("code_star", code_star)

    @property
    @pulumi.getter(name="codeStar")
    def code_star(self) -> Optional[pulumi.Input['CloudFormationProductCodeStarParametersArgs']]:
        return pulumi.get(self, "code_star")

    @code_star.setter
    def code_star(self, value: Optional[pulumi.Input['CloudFormationProductCodeStarParametersArgs']]):
        pulumi.set(self, "code_star", value)


@pulumi.input_type
class CloudFormationProductProvisioningArtifactPropertiesArgs:
    def __init__(__self__, *,
                 info: Any,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_template_validation: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        CloudFormationProductProvisioningArtifactPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info=info,
            description=description,
            disable_template_validation=disable_template_validation,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info: Any,
             description: Optional[pulumi.Input[str]] = None,
             disable_template_validation: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("info", info)
        if description is not None:
            _setter("description", description)
        if disable_template_validation is not None:
            _setter("disable_template_validation", disable_template_validation)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def info(self) -> Any:
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Any):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableTemplateValidation")
    def disable_template_validation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_template_validation")

    @disable_template_validation.setter
    def disable_template_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_template_validation", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudFormationProductSourceConnectionArgs:
    def __init__(__self__, *,
                 connection_parameters: pulumi.Input['CloudFormationProductConnectionParametersArgs'],
                 type: pulumi.Input[str]):
        CloudFormationProductSourceConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection_parameters=connection_parameters,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection_parameters: pulumi.Input['CloudFormationProductConnectionParametersArgs'],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connection_parameters", connection_parameters)
        _setter("type", type)

    @property
    @pulumi.getter(name="connectionParameters")
    def connection_parameters(self) -> pulumi.Input['CloudFormationProductConnectionParametersArgs']:
        return pulumi.get(self, "connection_parameters")

    @connection_parameters.setter
    def connection_parameters(self, value: pulumi.Input['CloudFormationProductConnectionParametersArgs']):
        pulumi.set(self, "connection_parameters", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CloudFormationProductTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        CloudFormationProductTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudFormationProvisionedProductProvisioningParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        CloudFormationProvisionedProductProvisioningParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CloudFormationProvisionedProductProvisioningPreferencesArgs:
    def __init__(__self__, *,
                 stack_set_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stack_set_failure_tolerance_count: Optional[pulumi.Input[int]] = None,
                 stack_set_failure_tolerance_percentage: Optional[pulumi.Input[int]] = None,
                 stack_set_max_concurrency_count: Optional[pulumi.Input[int]] = None,
                 stack_set_max_concurrency_percentage: Optional[pulumi.Input[int]] = None,
                 stack_set_operation_type: Optional[pulumi.Input['CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType']] = None,
                 stack_set_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        CloudFormationProvisionedProductProvisioningPreferencesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stack_set_accounts=stack_set_accounts,
            stack_set_failure_tolerance_count=stack_set_failure_tolerance_count,
            stack_set_failure_tolerance_percentage=stack_set_failure_tolerance_percentage,
            stack_set_max_concurrency_count=stack_set_max_concurrency_count,
            stack_set_max_concurrency_percentage=stack_set_max_concurrency_percentage,
            stack_set_operation_type=stack_set_operation_type,
            stack_set_regions=stack_set_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stack_set_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             stack_set_failure_tolerance_count: Optional[pulumi.Input[int]] = None,
             stack_set_failure_tolerance_percentage: Optional[pulumi.Input[int]] = None,
             stack_set_max_concurrency_count: Optional[pulumi.Input[int]] = None,
             stack_set_max_concurrency_percentage: Optional[pulumi.Input[int]] = None,
             stack_set_operation_type: Optional[pulumi.Input['CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType']] = None,
             stack_set_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if stack_set_accounts is not None:
            _setter("stack_set_accounts", stack_set_accounts)
        if stack_set_failure_tolerance_count is not None:
            _setter("stack_set_failure_tolerance_count", stack_set_failure_tolerance_count)
        if stack_set_failure_tolerance_percentage is not None:
            _setter("stack_set_failure_tolerance_percentage", stack_set_failure_tolerance_percentage)
        if stack_set_max_concurrency_count is not None:
            _setter("stack_set_max_concurrency_count", stack_set_max_concurrency_count)
        if stack_set_max_concurrency_percentage is not None:
            _setter("stack_set_max_concurrency_percentage", stack_set_max_concurrency_percentage)
        if stack_set_operation_type is not None:
            _setter("stack_set_operation_type", stack_set_operation_type)
        if stack_set_regions is not None:
            _setter("stack_set_regions", stack_set_regions)

    @property
    @pulumi.getter(name="stackSetAccounts")
    def stack_set_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "stack_set_accounts")

    @stack_set_accounts.setter
    def stack_set_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stack_set_accounts", value)

    @property
    @pulumi.getter(name="stackSetFailureToleranceCount")
    def stack_set_failure_tolerance_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stack_set_failure_tolerance_count")

    @stack_set_failure_tolerance_count.setter
    def stack_set_failure_tolerance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stack_set_failure_tolerance_count", value)

    @property
    @pulumi.getter(name="stackSetFailureTolerancePercentage")
    def stack_set_failure_tolerance_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stack_set_failure_tolerance_percentage")

    @stack_set_failure_tolerance_percentage.setter
    def stack_set_failure_tolerance_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stack_set_failure_tolerance_percentage", value)

    @property
    @pulumi.getter(name="stackSetMaxConcurrencyCount")
    def stack_set_max_concurrency_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stack_set_max_concurrency_count")

    @stack_set_max_concurrency_count.setter
    def stack_set_max_concurrency_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stack_set_max_concurrency_count", value)

    @property
    @pulumi.getter(name="stackSetMaxConcurrencyPercentage")
    def stack_set_max_concurrency_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stack_set_max_concurrency_percentage")

    @stack_set_max_concurrency_percentage.setter
    def stack_set_max_concurrency_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stack_set_max_concurrency_percentage", value)

    @property
    @pulumi.getter(name="stackSetOperationType")
    def stack_set_operation_type(self) -> Optional[pulumi.Input['CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType']]:
        return pulumi.get(self, "stack_set_operation_type")

    @stack_set_operation_type.setter
    def stack_set_operation_type(self, value: Optional[pulumi.Input['CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType']]):
        pulumi.set(self, "stack_set_operation_type", value)

    @property
    @pulumi.getter(name="stackSetRegions")
    def stack_set_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "stack_set_regions")

    @stack_set_regions.setter
    def stack_set_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stack_set_regions", value)


@pulumi.input_type
class CloudFormationProvisionedProductTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        CloudFormationProvisionedProductTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortfolioTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        PortfolioTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceActionDefinitionParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ServiceActionDefinitionParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


