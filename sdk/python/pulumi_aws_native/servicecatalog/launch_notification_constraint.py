# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LaunchNotificationConstraintArgs', 'LaunchNotificationConstraint']

@pulumi.input_type
class LaunchNotificationConstraintArgs:
    def __init__(__self__, *,
                 notification_arns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 portfolio_id: pulumi.Input[_builtins.str],
                 product_id: pulumi.Input[_builtins.str],
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LaunchNotificationConstraint resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_arns: The notification ARNs.
        :param pulumi.Input[_builtins.str] portfolio_id: The portfolio identifier.
        :param pulumi.Input[_builtins.str] product_id: The product identifier.
        :param pulumi.Input[_builtins.str] accept_language: The language code.
               
               - `jp` - Japanese
               - `zh` - Chinese
        :param pulumi.Input[_builtins.str] description: The description of the constraint.
        """
        pulumi.set(__self__, "notification_arns", notification_arns)
        pulumi.set(__self__, "portfolio_id", portfolio_id)
        pulumi.set(__self__, "product_id", product_id)
        if accept_language is not None:
            pulumi.set(__self__, "accept_language", accept_language)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="notificationArns")
    def notification_arns(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The notification ARNs.
        """
        return pulumi.get(self, "notification_arns")

    @notification_arns.setter
    def notification_arns(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "notification_arns", value)

    @_builtins.property
    @pulumi.getter(name="portfolioId")
    def portfolio_id(self) -> pulumi.Input[_builtins.str]:
        """
        The portfolio identifier.
        """
        return pulumi.get(self, "portfolio_id")

    @portfolio_id.setter
    def portfolio_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "portfolio_id", value)

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[_builtins.str]:
        """
        The product identifier.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "product_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The language code.

        - `jp` - Japanese
        - `zh` - Chinese
        """
        return pulumi.get(self, "accept_language")

    @accept_language.setter
    def accept_language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_language", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the constraint.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


@pulumi.type_token("aws-native:servicecatalog:LaunchNotificationConstraint")
class LaunchNotificationConstraint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_arns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 portfolio_id: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::ServiceCatalog::LaunchNotificationConstraint

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accept_language: The language code.
               
               - `jp` - Japanese
               - `zh` - Chinese
        :param pulumi.Input[_builtins.str] description: The description of the constraint.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_arns: The notification ARNs.
        :param pulumi.Input[_builtins.str] portfolio_id: The portfolio identifier.
        :param pulumi.Input[_builtins.str] product_id: The product identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LaunchNotificationConstraintArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::ServiceCatalog::LaunchNotificationConstraint

        :param str resource_name: The name of the resource.
        :param LaunchNotificationConstraintArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LaunchNotificationConstraintArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_language: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_arns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 portfolio_id: Optional[pulumi.Input[_builtins.str]] = None,
                 product_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LaunchNotificationConstraintArgs.__new__(LaunchNotificationConstraintArgs)

            __props__.__dict__["accept_language"] = accept_language
            __props__.__dict__["description"] = description
            if notification_arns is None and not opts.urn:
                raise TypeError("Missing required property 'notification_arns'")
            __props__.__dict__["notification_arns"] = notification_arns
            if portfolio_id is None and not opts.urn:
                raise TypeError("Missing required property 'portfolio_id'")
            __props__.__dict__["portfolio_id"] = portfolio_id
            if product_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_id'")
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["aws_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["portfolioId", "productId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(LaunchNotificationConstraint, __self__).__init__(
            'aws-native:servicecatalog:LaunchNotificationConstraint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'LaunchNotificationConstraint':
        """
        Get an existing LaunchNotificationConstraint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LaunchNotificationConstraintArgs.__new__(LaunchNotificationConstraintArgs)

        __props__.__dict__["accept_language"] = None
        __props__.__dict__["aws_id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["notification_arns"] = None
        __props__.__dict__["portfolio_id"] = None
        __props__.__dict__["product_id"] = None
        return LaunchNotificationConstraint(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The language code.

        - `jp` - Japanese
        - `zh` - Chinese
        """
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter(name="awsId")
    def aws_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for the constraint
        """
        return pulumi.get(self, "aws_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the constraint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="notificationArns")
    def notification_arns(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The notification ARNs.
        """
        return pulumi.get(self, "notification_arns")

    @_builtins.property
    @pulumi.getter(name="portfolioId")
    def portfolio_id(self) -> pulumi.Output[_builtins.str]:
        """
        The portfolio identifier.
        """
        return pulumi.get(self, "portfolio_id")

    @_builtins.property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[_builtins.str]:
        """
        The product identifier.
        """
        return pulumi.get(self, "product_id")

