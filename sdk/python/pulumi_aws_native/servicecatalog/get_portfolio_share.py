# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPortfolioShareResult',
    'AwaitableGetPortfolioShareResult',
    'get_portfolio_share',
    'get_portfolio_share_output',
]

@pulumi.output_type
class GetPortfolioShareResult:
    def __init__(__self__, share_tag_options=None):
        if share_tag_options and not isinstance(share_tag_options, bool):
            raise TypeError("Expected argument 'share_tag_options' to be a bool")
        pulumi.set(__self__, "share_tag_options", share_tag_options)

    @_builtins.property
    @pulumi.getter(name="shareTagOptions")
    def share_tag_options(self) -> Optional[_builtins.bool]:
        """
        Enables or disables TagOptions sharing when creating the portfolio share.
        """
        return pulumi.get(self, "share_tag_options")


class AwaitableGetPortfolioShareResult(GetPortfolioShareResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortfolioShareResult(
            share_tag_options=self.share_tag_options)


def get_portfolio_share(account_id: Optional[_builtins.str] = None,
                        portfolio_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortfolioShareResult:
    """
    Resource Type definition for AWS::ServiceCatalog::PortfolioShare


    :param _builtins.str account_id: The AWS account ID.
    :param _builtins.str portfolio_id: The portfolio identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['portfolioId'] = portfolio_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:servicecatalog:getPortfolioShare', __args__, opts=opts, typ=GetPortfolioShareResult).value

    return AwaitableGetPortfolioShareResult(
        share_tag_options=pulumi.get(__ret__, 'share_tag_options'))
def get_portfolio_share_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                               portfolio_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPortfolioShareResult]:
    """
    Resource Type definition for AWS::ServiceCatalog::PortfolioShare


    :param _builtins.str account_id: The AWS account ID.
    :param _builtins.str portfolio_id: The portfolio identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['portfolioId'] = portfolio_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:servicecatalog:getPortfolioShare', __args__, opts=opts, typ=GetPortfolioShareResult)
    return __ret__.apply(lambda __response__: GetPortfolioShareResult(
        share_tag_options=pulumi.get(__response__, 'share_tag_options')))
