# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetCloudFormationProvisionedProductResult',
    'AwaitableGetCloudFormationProvisionedProductResult',
    'get_cloud_formation_provisioned_product',
    'get_cloud_formation_provisioned_product_output',
]

@pulumi.output_type
class GetCloudFormationProvisionedProductResult:
    def __init__(__self__, accept_language=None, cloudformation_stack_arn=None, outputs=None, path_id=None, path_name=None, product_id=None, product_name=None, provisioned_product_id=None, provisioning_artifact_id=None, provisioning_artifact_name=None, provisioning_parameters=None, provisioning_preferences=None, record_id=None, tags=None):
        if accept_language and not isinstance(accept_language, str):
            raise TypeError("Expected argument 'accept_language' to be a str")
        pulumi.set(__self__, "accept_language", accept_language)
        if cloudformation_stack_arn and not isinstance(cloudformation_stack_arn, str):
            raise TypeError("Expected argument 'cloudformation_stack_arn' to be a str")
        pulumi.set(__self__, "cloudformation_stack_arn", cloudformation_stack_arn)
        if outputs and not isinstance(outputs, dict):
            raise TypeError("Expected argument 'outputs' to be a dict")
        pulumi.set(__self__, "outputs", outputs)
        if path_id and not isinstance(path_id, str):
            raise TypeError("Expected argument 'path_id' to be a str")
        pulumi.set(__self__, "path_id", path_id)
        if path_name and not isinstance(path_name, str):
            raise TypeError("Expected argument 'path_name' to be a str")
        pulumi.set(__self__, "path_name", path_name)
        if product_id and not isinstance(product_id, str):
            raise TypeError("Expected argument 'product_id' to be a str")
        pulumi.set(__self__, "product_id", product_id)
        if product_name and not isinstance(product_name, str):
            raise TypeError("Expected argument 'product_name' to be a str")
        pulumi.set(__self__, "product_name", product_name)
        if provisioned_product_id and not isinstance(provisioned_product_id, str):
            raise TypeError("Expected argument 'provisioned_product_id' to be a str")
        pulumi.set(__self__, "provisioned_product_id", provisioned_product_id)
        if provisioning_artifact_id and not isinstance(provisioning_artifact_id, str):
            raise TypeError("Expected argument 'provisioning_artifact_id' to be a str")
        pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_artifact_name and not isinstance(provisioning_artifact_name, str):
            raise TypeError("Expected argument 'provisioning_artifact_name' to be a str")
        pulumi.set(__self__, "provisioning_artifact_name", provisioning_artifact_name)
        if provisioning_parameters and not isinstance(provisioning_parameters, list):
            raise TypeError("Expected argument 'provisioning_parameters' to be a list")
        pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)
        if provisioning_preferences and not isinstance(provisioning_preferences, dict):
            raise TypeError("Expected argument 'provisioning_preferences' to be a dict")
        pulumi.set(__self__, "provisioning_preferences", provisioning_preferences)
        if record_id and not isinstance(record_id, str):
            raise TypeError("Expected argument 'record_id' to be a str")
        pulumi.set(__self__, "record_id", record_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional['CloudFormationProvisionedProductAcceptLanguage']:
        return pulumi.get(self, "accept_language")

    @property
    @pulumi.getter(name="cloudformationStackArn")
    def cloudformation_stack_arn(self) -> Optional[str]:
        return pulumi.get(self, "cloudformation_stack_arn")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Any]:
        """
        List of key-value pair outputs.
        """
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[str]:
        return pulumi.get(self, "path_id")

    @property
    @pulumi.getter(name="pathName")
    def path_name(self) -> Optional[str]:
        return pulumi.get(self, "path_name")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[str]:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="provisionedProductId")
    def provisioned_product_id(self) -> Optional[str]:
        return pulumi.get(self, "provisioned_product_id")

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_artifact_id")

    @property
    @pulumi.getter(name="provisioningArtifactName")
    def provisioning_artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_artifact_name")

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[Sequence['outputs.CloudFormationProvisionedProductProvisioningParameter']]:
        return pulumi.get(self, "provisioning_parameters")

    @property
    @pulumi.getter(name="provisioningPreferences")
    def provisioning_preferences(self) -> Optional['outputs.CloudFormationProvisionedProductProvisioningPreferences']:
        return pulumi.get(self, "provisioning_preferences")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[str]:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CloudFormationProvisionedProductTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetCloudFormationProvisionedProductResult(GetCloudFormationProvisionedProductResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudFormationProvisionedProductResult(
            accept_language=self.accept_language,
            cloudformation_stack_arn=self.cloudformation_stack_arn,
            outputs=self.outputs,
            path_id=self.path_id,
            path_name=self.path_name,
            product_id=self.product_id,
            product_name=self.product_name,
            provisioned_product_id=self.provisioned_product_id,
            provisioning_artifact_id=self.provisioning_artifact_id,
            provisioning_artifact_name=self.provisioning_artifact_name,
            provisioning_parameters=self.provisioning_parameters,
            provisioning_preferences=self.provisioning_preferences,
            record_id=self.record_id,
            tags=self.tags)


def get_cloud_formation_provisioned_product(provisioned_product_id: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudFormationProvisionedProductResult:
    """
    Resource Schema for AWS::ServiceCatalog::CloudFormationProvisionedProduct
    """
    __args__ = dict()
    __args__['provisionedProductId'] = provisioned_product_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:servicecatalog:getCloudFormationProvisionedProduct', __args__, opts=opts, typ=GetCloudFormationProvisionedProductResult).value

    return AwaitableGetCloudFormationProvisionedProductResult(
        accept_language=pulumi.get(__ret__, 'accept_language'),
        cloudformation_stack_arn=pulumi.get(__ret__, 'cloudformation_stack_arn'),
        outputs=pulumi.get(__ret__, 'outputs'),
        path_id=pulumi.get(__ret__, 'path_id'),
        path_name=pulumi.get(__ret__, 'path_name'),
        product_id=pulumi.get(__ret__, 'product_id'),
        product_name=pulumi.get(__ret__, 'product_name'),
        provisioned_product_id=pulumi.get(__ret__, 'provisioned_product_id'),
        provisioning_artifact_id=pulumi.get(__ret__, 'provisioning_artifact_id'),
        provisioning_artifact_name=pulumi.get(__ret__, 'provisioning_artifact_name'),
        provisioning_parameters=pulumi.get(__ret__, 'provisioning_parameters'),
        provisioning_preferences=pulumi.get(__ret__, 'provisioning_preferences'),
        record_id=pulumi.get(__ret__, 'record_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_cloud_formation_provisioned_product)
def get_cloud_formation_provisioned_product_output(provisioned_product_id: Optional[pulumi.Input[str]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudFormationProvisionedProductResult]:
    """
    Resource Schema for AWS::ServiceCatalog::CloudFormationProvisionedProduct
    """
    ...
