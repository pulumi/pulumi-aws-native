# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AccessGrantGranteeArgs',
    'AccessGrantsLocationConfigurationArgs',
    'AccessPointPublicAccessBlockConfigurationArgs',
    'AccessPointVpcConfigurationArgs',
    'BucketAbortIncompleteMultipartUploadArgs',
    'BucketAccelerateConfigurationArgs',
    'BucketAccessControlTranslationArgs',
    'BucketAnalyticsConfigurationArgs',
    'BucketCorsConfigurationArgs',
    'BucketCorsRuleArgs',
    'BucketDataExportArgs',
    'BucketDefaultRetentionArgs',
    'BucketDeleteMarkerReplicationArgs',
    'BucketDestinationArgs',
    'BucketEncryptionConfigurationArgs',
    'BucketEncryptionArgs',
    'BucketEventBridgeConfigurationArgs',
    'BucketFilterRuleArgs',
    'BucketIntelligentTieringConfigurationArgs',
    'BucketInventoryConfigurationArgs',
    'BucketLambdaConfigurationArgs',
    'BucketLifecycleConfigurationArgs',
    'BucketLoggingConfigurationArgs',
    'BucketMetricsConfigurationArgs',
    'BucketMetricsArgs',
    'BucketNoncurrentVersionExpirationArgs',
    'BucketNoncurrentVersionTransitionArgs',
    'BucketNotificationConfigurationArgs',
    'BucketNotificationFilterArgs',
    'BucketObjectLockConfigurationArgs',
    'BucketObjectLockRuleArgs',
    'BucketOwnershipControlsRuleArgs',
    'BucketOwnershipControlsArgs',
    'BucketPublicAccessBlockConfigurationArgs',
    'BucketQueueConfigurationArgs',
    'BucketRedirectAllRequestsToArgs',
    'BucketRedirectRuleArgs',
    'BucketReplicaModificationsArgs',
    'BucketReplicationConfigurationArgs',
    'BucketReplicationDestinationArgs',
    'BucketReplicationRuleAndOperatorArgs',
    'BucketReplicationRuleFilterArgs',
    'BucketReplicationRuleArgs',
    'BucketReplicationTimeValueArgs',
    'BucketReplicationTimeArgs',
    'BucketRoutingRuleConditionArgs',
    'BucketRoutingRuleArgs',
    'BucketRuleArgs',
    'BucketS3KeyFilterArgs',
    'BucketServerSideEncryptionByDefaultArgs',
    'BucketServerSideEncryptionRuleArgs',
    'BucketSourceSelectionCriteriaArgs',
    'BucketSseKmsEncryptedObjectsArgs',
    'BucketStorageClassAnalysisArgs',
    'BucketTagFilterArgs',
    'BucketTargetObjectKeyFormatArgs',
    'BucketTieringArgs',
    'BucketTopicConfigurationArgs',
    'BucketTransitionArgs',
    'BucketVersioningConfigurationArgs',
    'BucketWebsiteConfigurationArgs',
    'MultiRegionAccessPointPublicAccessBlockConfigurationArgs',
    'MultiRegionAccessPointRegionArgs',
    'StorageLensAccountLevelArgs',
    'StorageLensActivityMetricsArgs',
    'StorageLensAdvancedCostOptimizationMetricsArgs',
    'StorageLensAdvancedDataProtectionMetricsArgs',
    'StorageLensAwsOrgArgs',
    'StorageLensBucketLevelArgs',
    'StorageLensBucketsAndRegionsArgs',
    'StorageLensCloudWatchMetricsArgs',
    'StorageLensConfigurationArgs',
    'StorageLensDataExportArgs',
    'StorageLensDetailedStatusCodesMetricsArgs',
    'StorageLensEncryptionArgs',
    'StorageLensGroupAndArgs',
    'StorageLensGroupFilterArgs',
    'StorageLensGroupLevelArgs',
    'StorageLensGroupMatchObjectAgeArgs',
    'StorageLensGroupMatchObjectSizeArgs',
    'StorageLensGroupOrArgs',
    'StorageLensGroupSelectionCriteriaArgs',
    'StorageLensGroupTagArgs',
    'StorageLensPrefixLevelStorageMetricsArgs',
    'StorageLensPrefixLevelArgs',
    'StorageLensS3BucketDestinationArgs',
    'StorageLensSelectionCriteriaArgs',
]

@pulumi.input_type
class AccessGrantGranteeArgs:
    def __init__(__self__, *,
                 grantee_identifier: pulumi.Input[str],
                 grantee_type: pulumi.Input['AccessGrantGranteeGranteeType']):
        """
        :param pulumi.Input[str] grantee_identifier: The unique identifier of the Grantee
        :param pulumi.Input['AccessGrantGranteeGranteeType'] grantee_type: Configures the transfer acceleration state for an Amazon S3 bucket.
        """
        pulumi.set(__self__, "grantee_identifier", grantee_identifier)
        pulumi.set(__self__, "grantee_type", grantee_type)

    @property
    @pulumi.getter(name="granteeIdentifier")
    def grantee_identifier(self) -> pulumi.Input[str]:
        """
        The unique identifier of the Grantee
        """
        return pulumi.get(self, "grantee_identifier")

    @grantee_identifier.setter
    def grantee_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "grantee_identifier", value)

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> pulumi.Input['AccessGrantGranteeGranteeType']:
        """
        Configures the transfer acceleration state for an Amazon S3 bucket.
        """
        return pulumi.get(self, "grantee_type")

    @grantee_type.setter
    def grantee_type(self, value: pulumi.Input['AccessGrantGranteeGranteeType']):
        pulumi.set(self, "grantee_type", value)


@pulumi.input_type
class AccessGrantsLocationConfigurationArgs:
    def __init__(__self__, *,
                 s3_sub_prefix: pulumi.Input[str]):
        """
        :param pulumi.Input[str] s3_sub_prefix: The S3 sub prefix of a registered location in your S3 Access Grants instance
        """
        pulumi.set(__self__, "s3_sub_prefix", s3_sub_prefix)

    @property
    @pulumi.getter(name="s3SubPrefix")
    def s3_sub_prefix(self) -> pulumi.Input[str]:
        """
        The S3 sub prefix of a registered location in your S3 Access Grants instance
        """
        return pulumi.get(self, "s3_sub_prefix")

    @s3_sub_prefix.setter
    def s3_sub_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_sub_prefix", value)


@pulumi.input_type
class AccessPointPublicAccessBlockConfigurationArgs:
    def __init__(__self__, *,
                 block_public_acls: Optional[pulumi.Input[bool]] = None,
                 block_public_policy: Optional[pulumi.Input[bool]] = None,
                 ignore_public_acls: Optional[pulumi.Input[bool]] = None,
                 restrict_public_buckets: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] block_public_acls: Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
               - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
                - PUT Object calls fail if the request includes a public ACL.
               . - PUT Bucket calls fail if the request includes a public ACL.
               Enabling this setting doesn't affect existing policies or ACLs.
        :param pulumi.Input[bool] block_public_policy: Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        :param pulumi.Input[bool] ignore_public_acls: Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        :param pulumi.Input[bool] restrict_public_buckets: Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
               Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        if block_public_acls is not None:
            pulumi.set(__self__, "block_public_acls", block_public_acls)
        if block_public_policy is not None:
            pulumi.set(__self__, "block_public_policy", block_public_policy)
        if ignore_public_acls is not None:
            pulumi.set(__self__, "ignore_public_acls", ignore_public_acls)
        if restrict_public_buckets is not None:
            pulumi.set(__self__, "restrict_public_buckets", restrict_public_buckets)

    @property
    @pulumi.getter(name="blockPublicAcls")
    def block_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
        - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         - PUT Object calls fail if the request includes a public ACL.
        . - PUT Bucket calls fail if the request includes a public ACL.
        Enabling this setting doesn't affect existing policies or ACLs.
        """
        return pulumi.get(self, "block_public_acls")

    @block_public_acls.setter
    def block_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_acls", value)

    @property
    @pulumi.getter(name="blockPublicPolicy")
    def block_public_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        """
        return pulumi.get(self, "block_public_policy")

    @block_public_policy.setter
    def block_public_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_policy", value)

    @property
    @pulumi.getter(name="ignorePublicAcls")
    def ignore_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        """
        return pulumi.get(self, "ignore_public_acls")

    @ignore_public_acls.setter
    def ignore_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_public_acls", value)

    @property
    @pulumi.getter(name="restrictPublicBuckets")
    def restrict_public_buckets(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
        Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        return pulumi.get(self, "restrict_public_buckets")

    @restrict_public_buckets.setter
    def restrict_public_buckets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_public_buckets", value)


@pulumi.input_type
class AccessPointVpcConfigurationArgs:
    def __init__(__self__, *,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The Virtual Private Cloud (VPC) configuration for a bucket access point.
        :param pulumi.Input[str] vpc_id: If this field is specified, this access point will only allow connections from the specified VPC ID.
        """
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        If this field is specified, this access point will only allow connections from the specified VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class BucketAbortIncompleteMultipartUploadArgs:
    def __init__(__self__, *,
                 days_after_initiation: pulumi.Input[int]):
        """
        Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the *Amazon S3 User Guide*.
        :param pulumi.Input[int] days_after_initiation: Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
        """
        pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> pulumi.Input[int]:
        """
        Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
        """
        return pulumi.get(self, "days_after_initiation")

    @days_after_initiation.setter
    def days_after_initiation(self, value: pulumi.Input[int]):
        pulumi.set(self, "days_after_initiation", value)


@pulumi.input_type
class BucketAccelerateConfigurationArgs:
    def __init__(__self__, *,
                 acceleration_status: pulumi.Input['BucketAccelerateConfigurationAccelerationStatus']):
        """
        Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketAccelerateConfigurationAccelerationStatus'] acceleration_status: Specifies the transfer acceleration status of the bucket.
        """
        pulumi.set(__self__, "acceleration_status", acceleration_status)

    @property
    @pulumi.getter(name="accelerationStatus")
    def acceleration_status(self) -> pulumi.Input['BucketAccelerateConfigurationAccelerationStatus']:
        """
        Specifies the transfer acceleration status of the bucket.
        """
        return pulumi.get(self, "acceleration_status")

    @acceleration_status.setter
    def acceleration_status(self, value: pulumi.Input['BucketAccelerateConfigurationAccelerationStatus']):
        pulumi.set(self, "acceleration_status", value)


@pulumi.input_type
class BucketAccessControlTranslationArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str]):
        """
        Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
        :param pulumi.Input[str] owner: Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.
        """
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)


@pulumi.input_type
class BucketAnalyticsConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 storage_class_analysis: pulumi.Input['BucketStorageClassAnalysisArgs'],
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]] = None):
        """
        Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
        :param pulumi.Input[str] id: The ID that identifies the analytics configuration.
        :param pulumi.Input['BucketStorageClassAnalysisArgs'] storage_class_analysis: Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
        :param pulumi.Input[str] prefix: The prefix that an object must have to be included in the analytics results.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]] tag_filters: The tags to use when evaluating an analytics filter.
                The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "storage_class_analysis", storage_class_analysis)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID that identifies the analytics configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="storageClassAnalysis")
    def storage_class_analysis(self) -> pulumi.Input['BucketStorageClassAnalysisArgs']:
        """
        Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
        """
        return pulumi.get(self, "storage_class_analysis")

    @storage_class_analysis.setter
    def storage_class_analysis(self, value: pulumi.Input['BucketStorageClassAnalysisArgs']):
        pulumi.set(self, "storage_class_analysis", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that an object must have to be included in the analytics results.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]:
        """
        The tags to use when evaluating an analytics filter.
         The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class BucketCorsConfigurationArgs:
    def __init__(__self__, *,
                 cors_rules: pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]):
        """
        Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]] cors_rules: A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
        """
        pulumi.set(__self__, "cors_rules", cors_rules)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]:
        """
        A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]):
        pulumi.set(self, "cors_rules", value)


@pulumi.input_type
class BucketCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleAllowedMethodsItem']]],
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None):
        """
        Specifies a cross-origin access rule for an Amazon S3 bucket.
        :param pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleAllowedMethodsItem']]] allowed_methods: An HTTP method that you allow the origin to run.
                *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: One or more origins you want customers to be able to access the bucket from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exposed_headers: One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
        :param pulumi.Input[str] id: A unique identifier for this rule. The value must be no more than 255 characters.
        :param pulumi.Input[int] max_age: The time in seconds that your browser is to cache the preflight response for the specified resource.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleAllowedMethodsItem']]]:
        """
        An HTTP method that you allow the origin to run.
         *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleAllowedMethodsItem']]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        One or more origins you want customers to be able to access the bucket from.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
        """
        return pulumi.get(self, "exposed_headers")

    @exposed_headers.setter
    def exposed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exposed_headers", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for this rule. The value must be no more than 255 characters.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        The time in seconds that your browser is to cache the preflight response for the specified resource.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)


@pulumi.input_type
class BucketDataExportArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['BucketDestinationArgs'],
                 output_schema_version: pulumi.Input[str]):
        """
        Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
        :param pulumi.Input['BucketDestinationArgs'] destination: The place to store the data for an analysis.
        :param pulumi.Input[str] output_schema_version: The version of the output schema to use when exporting data. Must be ``V_1``.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "output_schema_version", output_schema_version)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['BucketDestinationArgs']:
        """
        The place to store the data for an analysis.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['BucketDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="outputSchemaVersion")
    def output_schema_version(self) -> pulumi.Input[str]:
        """
        The version of the output schema to use when exporting data. Must be ``V_1``.
        """
        return pulumi.get(self, "output_schema_version")

    @output_schema_version.setter
    def output_schema_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_schema_version", value)


@pulumi.input_type
class BucketDefaultRetentionArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input['BucketDefaultRetentionMode']] = None,
                 years: Optional[pulumi.Input[int]] = None):
        """
        The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.
           +  The ``DefaultRetention`` settings require both a mode and a period.
          +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.
        :param pulumi.Input[int] days: The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        :param pulumi.Input['BucketDefaultRetentionMode'] mode: The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        :param pulumi.Input[int] years: The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if years is not None:
            pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['BucketDefaultRetentionMode']]:
        """
        The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['BucketDefaultRetentionMode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def years(self) -> Optional[pulumi.Input[int]]:
        """
        The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        """
        return pulumi.get(self, "years")

    @years.setter
    def years(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "years", value)


@pulumi.input_type
class BucketDeleteMarkerReplicationArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input['BucketDeleteMarkerReplicationStatus']] = None):
        """
        Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
         For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
          If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        :param pulumi.Input['BucketDeleteMarkerReplicationStatus'] status: Indicates whether to replicate delete markers. Disabled by default.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['BucketDeleteMarkerReplicationStatus']]:
        """
        Indicates whether to replicate delete markers. Disabled by default.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['BucketDeleteMarkerReplicationStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class BucketDestinationArgs:
    def __init__(__self__, *,
                 bucket_arn: pulumi.Input[str],
                 format: pulumi.Input['BucketDestinationFormat'],
                 bucket_account_id: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket.
        :param pulumi.Input[str] bucket_arn: The Amazon Resource Name (ARN) of the bucket to which data is exported.
        :param pulumi.Input['BucketDestinationFormat'] format: Specifies the file format used when exporting data to Amazon S3.
                *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``
        :param pulumi.Input[str] bucket_account_id: The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.
                  Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        :param pulumi.Input[str] prefix: The prefix to use when exporting data. The prefix is prepended to all results.
        """
        pulumi.set(__self__, "bucket_arn", bucket_arn)
        pulumi.set(__self__, "format", format)
        if bucket_account_id is not None:
            pulumi.set(__self__, "bucket_account_id", bucket_account_id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the bucket to which data is exported.
        """
        return pulumi.get(self, "bucket_arn")

    @bucket_arn.setter
    def bucket_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_arn", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['BucketDestinationFormat']:
        """
        Specifies the file format used when exporting data to Amazon S3.
         *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['BucketDestinationFormat']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="bucketAccountId")
    def bucket_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.
           Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
        """
        return pulumi.get(self, "bucket_account_id")

    @bucket_account_id.setter
    def bucket_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_account_id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix to use when exporting data. The prefix is prepended to all results.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 replica_kms_key_id: pulumi.Input[str]):
        """
        Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
        :param pulumi.Input[str] replica_kms_key_id: Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
        """
        pulumi.set(__self__, "replica_kms_key_id", replica_kms_key_id)

    @property
    @pulumi.getter(name="replicaKmsKeyId")
    def replica_kms_key_id(self) -> pulumi.Input[str]:
        """
        Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
        """
        return pulumi.get(self, "replica_kms_key_id")

    @replica_kms_key_id.setter
    def replica_kms_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "replica_kms_key_id", value)


@pulumi.input_type
class BucketEncryptionArgs:
    def __init__(__self__, *,
                 server_side_encryption_configuration: pulumi.Input[Sequence[pulumi.Input['BucketServerSideEncryptionRuleArgs']]]):
        """
        Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[Sequence[pulumi.Input['BucketServerSideEncryptionRuleArgs']]] server_side_encryption_configuration: Specifies the default server-side-encryption configuration.
        """
        pulumi.set(__self__, "server_side_encryption_configuration", server_side_encryption_configuration)

    @property
    @pulumi.getter(name="serverSideEncryptionConfiguration")
    def server_side_encryption_configuration(self) -> pulumi.Input[Sequence[pulumi.Input['BucketServerSideEncryptionRuleArgs']]]:
        """
        Specifies the default server-side-encryption configuration.
        """
        return pulumi.get(self, "server_side_encryption_configuration")

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, value: pulumi.Input[Sequence[pulumi.Input['BucketServerSideEncryptionRuleArgs']]]):
        pulumi.set(self, "server_side_encryption_configuration", value)


@pulumi.input_type
class BucketEventBridgeConfigurationArgs:
    def __init__(__self__, *,
                 event_bridge_enabled: pulumi.Input[bool]):
        """
        Amazon S3 can send events to Amazon EventBridge whenever certain events happen in your bucket, see [Using EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User Guide*.
         Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to additional targets. For more information, see [What Is Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge User Guide*
        :param pulumi.Input[bool] event_bridge_enabled: Enables delivery of events to Amazon EventBridge.
        """
        pulumi.set(__self__, "event_bridge_enabled", event_bridge_enabled)

    @property
    @pulumi.getter(name="eventBridgeEnabled")
    def event_bridge_enabled(self) -> pulumi.Input[bool]:
        """
        Enables delivery of events to Amazon EventBridge.
        """
        return pulumi.get(self, "event_bridge_enabled")

    @event_bridge_enabled.setter
    def event_bridge_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "event_bridge_enabled", value)


@pulumi.input_type
class BucketFilterRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.
        :param pulumi.Input[str] name: The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] value: The value that the filter searches for in object key names.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that the filter searches for in object key names.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BucketIntelligentTieringConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 status: pulumi.Input['BucketIntelligentTieringConfigurationStatus'],
                 tierings: pulumi.Input[Sequence[pulumi.Input['BucketTieringArgs']]],
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]] = None):
        """
        Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
         For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).
        :param pulumi.Input[str] id: The ID used to identify the S3 Intelligent-Tiering configuration.
        :param pulumi.Input['BucketIntelligentTieringConfigurationStatus'] status: Specifies the status of the configuration.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTieringArgs']]] tierings: Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.
                 You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.
        :param pulumi.Input[str] prefix: An object key name prefix that identifies the subset of objects to which the rule applies.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]] tag_filters: A container for a key-value pair.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tierings", tierings)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID used to identify the S3 Intelligent-Tiering configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketIntelligentTieringConfigurationStatus']:
        """
        Specifies the status of the configuration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketIntelligentTieringConfigurationStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tierings(self) -> pulumi.Input[Sequence[pulumi.Input['BucketTieringArgs']]]:
        """
        Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.
          You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.
        """
        return pulumi.get(self, "tierings")

    @tierings.setter
    def tierings(self, value: pulumi.Input[Sequence[pulumi.Input['BucketTieringArgs']]]):
        pulumi.set(self, "tierings", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An object key name prefix that identifies the subset of objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]:
        """
        A container for a key-value pair.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class BucketInventoryConfigurationArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['BucketDestinationArgs'],
                 enabled: pulumi.Input[bool],
                 id: pulumi.Input[str],
                 included_object_versions: pulumi.Input['BucketInventoryConfigurationIncludedObjectVersions'],
                 schedule_frequency: pulumi.Input['BucketInventoryConfigurationScheduleFrequency'],
                 optional_fields: Optional[pulumi.Input[Sequence[pulumi.Input['BucketInventoryConfigurationOptionalFieldsItem']]]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.
        :param pulumi.Input['BucketDestinationArgs'] destination: Contains information about where to publish the inventory results.
        :param pulumi.Input[bool] enabled: Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.
        :param pulumi.Input[str] id: The ID used to identify the inventory configuration.
        :param pulumi.Input['BucketInventoryConfigurationIncludedObjectVersions'] included_object_versions: Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
        :param pulumi.Input['BucketInventoryConfigurationScheduleFrequency'] schedule_frequency: Specifies the schedule for generating inventory results.
        :param pulumi.Input[Sequence[pulumi.Input['BucketInventoryConfigurationOptionalFieldsItem']]] optional_fields: Contains the optional fields that are included in the inventory results.
        :param pulumi.Input[str] prefix: Specifies the inventory filter prefix.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "schedule_frequency", schedule_frequency)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['BucketDestinationArgs']:
        """
        Contains information about where to publish the inventory results.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['BucketDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID used to identify the inventory configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> pulumi.Input['BucketInventoryConfigurationIncludedObjectVersions']:
        """
        Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
        """
        return pulumi.get(self, "included_object_versions")

    @included_object_versions.setter
    def included_object_versions(self, value: pulumi.Input['BucketInventoryConfigurationIncludedObjectVersions']):
        pulumi.set(self, "included_object_versions", value)

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> pulumi.Input['BucketInventoryConfigurationScheduleFrequency']:
        """
        Specifies the schedule for generating inventory results.
        """
        return pulumi.get(self, "schedule_frequency")

    @schedule_frequency.setter
    def schedule_frequency(self, value: pulumi.Input['BucketInventoryConfigurationScheduleFrequency']):
        pulumi.set(self, "schedule_frequency", value)

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketInventoryConfigurationOptionalFieldsItem']]]]:
        """
        Contains the optional fields that are included in the inventory results.
        """
        return pulumi.get(self, "optional_fields")

    @optional_fields.setter
    def optional_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketInventoryConfigurationOptionalFieldsItem']]]]):
        pulumi.set(self, "optional_fields", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the inventory filter prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketLambdaConfigurationArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 function: pulumi.Input[str],
                 filter: Optional[pulumi.Input['BucketNotificationFilterArgs']] = None):
        """
        Describes the LAMlong functions to invoke and the events for which to invoke them.
        :param pulumi.Input[str] event: The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] function: The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.
        :param pulumi.Input['BucketNotificationFilterArgs'] filter: The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.
        """
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "function", function)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketNotificationFilterArgs']]:
        """
        The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketNotificationFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class BucketLifecycleConfigurationArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['BucketRuleArgs']]]):
        """
        Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[Sequence[pulumi.Input['BucketRuleArgs']]] rules: A lifecycle rule for individual objects in an Amazon S3 bucket.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['BucketRuleArgs']]]:
        """
        A lifecycle rule for individual objects in an Amazon S3 bucket.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['BucketRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class BucketLoggingConfigurationArgs:
    def __init__(__self__, *,
                 destination_bucket_name: Optional[pulumi.Input[str]] = None,
                 log_file_prefix: Optional[pulumi.Input[str]] = None,
                 target_object_key_format: Optional[pulumi.Input['BucketTargetObjectKeyFormatArgs']] = None):
        """
        Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the *Amazon S3 API Reference*.
          To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request, you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
        :param pulumi.Input[str] destination_bucket_name: The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.
        :param pulumi.Input[str] log_file_prefix: A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        :param pulumi.Input['BucketTargetObjectKeyFormatArgs'] target_object_key_format: Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
        """
        if destination_bucket_name is not None:
            pulumi.set(__self__, "destination_bucket_name", destination_bucket_name)
        if log_file_prefix is not None:
            pulumi.set(__self__, "log_file_prefix", log_file_prefix)
        if target_object_key_format is not None:
            pulumi.set(__self__, "target_object_key_format", target_object_key_format)

    @property
    @pulumi.getter(name="destinationBucketName")
    def destination_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.
        """
        return pulumi.get(self, "destination_bucket_name")

    @destination_bucket_name.setter
    def destination_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_bucket_name", value)

    @property
    @pulumi.getter(name="logFilePrefix")
    def log_file_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        """
        return pulumi.get(self, "log_file_prefix")

    @log_file_prefix.setter
    def log_file_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_file_prefix", value)

    @property
    @pulumi.getter(name="targetObjectKeyFormat")
    def target_object_key_format(self) -> Optional[pulumi.Input['BucketTargetObjectKeyFormatArgs']]:
        """
        Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
        """
        return pulumi.get(self, "target_object_key_format")

    @target_object_key_format.setter
    def target_object_key_format(self, value: Optional[pulumi.Input['BucketTargetObjectKeyFormatArgs']]):
        pulumi.set(self, "target_object_key_format", value)


@pulumi.input_type
class BucketMetricsConfigurationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 access_point_arn: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]] = None):
        """
        Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For examples, see [AWS::S3::Bucket](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#aws-properties-s3-bucket--examples). For more information, see [PUT Bucket metrics](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html) in the *Amazon S3 API Reference*.
        :param pulumi.Input[str] id: The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.
        :param pulumi.Input[str] access_point_arn: The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.
        :param pulumi.Input[str] prefix: The prefix that an object must have to be included in the metrics results.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]] tag_filters: Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.
        """
        pulumi.set(__self__, "id", id)
        if access_point_arn is not None:
            pulumi.set(__self__, "access_point_arn", access_point_arn)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="accessPointArn")
    def access_point_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.
        """
        return pulumi.get(self, "access_point_arn")

    @access_point_arn.setter
    def access_point_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_point_arn", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix that an object must have to be included in the metrics results.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]:
        """
        Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class BucketMetricsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketMetricsStatus'],
                 event_threshold: Optional[pulumi.Input['BucketReplicationTimeValueArgs']] = None):
        """
        A container specifying replication metrics-related settings enabling replication metrics and events.
        :param pulumi.Input['BucketMetricsStatus'] status: Specifies whether the replication metrics are enabled.
        :param pulumi.Input['BucketReplicationTimeValueArgs'] event_threshold: A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.
        """
        pulumi.set(__self__, "status", status)
        if event_threshold is not None:
            pulumi.set(__self__, "event_threshold", event_threshold)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketMetricsStatus']:
        """
        Specifies whether the replication metrics are enabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketMetricsStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="eventThreshold")
    def event_threshold(self) -> Optional[pulumi.Input['BucketReplicationTimeValueArgs']]:
        """
        A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.
        """
        return pulumi.get(self, "event_threshold")

    @event_threshold.setter
    def event_threshold(self, value: Optional[pulumi.Input['BucketReplicationTimeValueArgs']]):
        pulumi.set(self, "event_threshold", value)


@pulumi.input_type
class BucketNoncurrentVersionExpirationArgs:
    def __init__(__self__, *,
                 noncurrent_days: pulumi.Input[int],
                 newer_noncurrent_versions: Optional[pulumi.Input[int]] = None):
        """
        Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
        :param pulumi.Input[int] noncurrent_days: Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
        :param pulumi.Input[int] newer_noncurrent_versions: Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
        """
        pulumi.set(__self__, "noncurrent_days", noncurrent_days)
        if newer_noncurrent_versions is not None:
            pulumi.set(__self__, "newer_noncurrent_versions", newer_noncurrent_versions)

    @property
    @pulumi.getter(name="noncurrentDays")
    def noncurrent_days(self) -> pulumi.Input[int]:
        """
        Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "noncurrent_days")

    @noncurrent_days.setter
    def noncurrent_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "noncurrent_days", value)

    @property
    @pulumi.getter(name="newerNoncurrentVersions")
    def newer_noncurrent_versions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "newer_noncurrent_versions")

    @newer_noncurrent_versions.setter
    def newer_noncurrent_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "newer_noncurrent_versions", value)


@pulumi.input_type
class BucketNoncurrentVersionTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input['BucketNoncurrentVersionTransitionStorageClass'],
                 transition_in_days: pulumi.Input[int],
                 newer_noncurrent_versions: Optional[pulumi.Input[int]] = None):
        """
        Container for the transition rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        :param pulumi.Input['BucketNoncurrentVersionTransitionStorageClass'] storage_class: The class of storage used to store the object.
        :param pulumi.Input[int] transition_in_days: Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
        :param pulumi.Input[int] newer_noncurrent_versions: Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        pulumi.set(__self__, "transition_in_days", transition_in_days)
        if newer_noncurrent_versions is not None:
            pulumi.set(__self__, "newer_noncurrent_versions", newer_noncurrent_versions)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input['BucketNoncurrentVersionTransitionStorageClass']:
        """
        The class of storage used to store the object.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input['BucketNoncurrentVersionTransitionStorageClass']):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="transitionInDays")
    def transition_in_days(self) -> pulumi.Input[int]:
        """
        Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "transition_in_days")

    @transition_in_days.setter
    def transition_in_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "transition_in_days", value)

    @property
    @pulumi.getter(name="newerNoncurrentVersions")
    def newer_noncurrent_versions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "newer_noncurrent_versions")

    @newer_noncurrent_versions.setter
    def newer_noncurrent_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "newer_noncurrent_versions", value)


@pulumi.input_type
class BucketNotificationConfigurationArgs:
    def __init__(__self__, *,
                 event_bridge_configuration: Optional[pulumi.Input['BucketEventBridgeConfigurationArgs']] = None,
                 lambda_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLambdaConfigurationArgs']]]] = None,
                 queue_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['BucketQueueConfigurationArgs']]]] = None,
                 topic_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTopicConfigurationArgs']]]] = None):
        """
        Describes the notification configuration for an Amazon S3 bucket.
          If you create the target resource and related permissions in the same template, you might have a circular dependency.
         For example, you might use the ``AWS::Lambda::Permission`` resource to grant the bucket permission to invoke an AWS Lambda function. However, AWS CloudFormation can't create the bucket until the bucket has permission to invoke the function (AWS CloudFormation checks whether the bucket can invoke the function). If you're using Refs to pass the bucket name, this leads to a circular dependency.
         To avoid this dependency, you can create all resources without specifying the notification configuration. Then, update the stack with a notification configuration.
         For more information on permissions, see [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html) and [Granting Permissions to Publish Event Notification Messages to a Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-permissions-to-s3).
        :param pulumi.Input['BucketEventBridgeConfigurationArgs'] event_bridge_configuration: Enables delivery of events to Amazon EventBridge.
        :param pulumi.Input[Sequence[pulumi.Input['BucketLambdaConfigurationArgs']]] lambda_configurations: Describes the LAMlong functions to invoke and the events for which to invoke them.
        :param pulumi.Input[Sequence[pulumi.Input['BucketQueueConfigurationArgs']]] queue_configurations: The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTopicConfigurationArgs']]] topic_configurations: The topic to which notifications are sent and the events for which notifications are generated.
        """
        if event_bridge_configuration is not None:
            pulumi.set(__self__, "event_bridge_configuration", event_bridge_configuration)
        if lambda_configurations is not None:
            pulumi.set(__self__, "lambda_configurations", lambda_configurations)
        if queue_configurations is not None:
            pulumi.set(__self__, "queue_configurations", queue_configurations)
        if topic_configurations is not None:
            pulumi.set(__self__, "topic_configurations", topic_configurations)

    @property
    @pulumi.getter(name="eventBridgeConfiguration")
    def event_bridge_configuration(self) -> Optional[pulumi.Input['BucketEventBridgeConfigurationArgs']]:
        """
        Enables delivery of events to Amazon EventBridge.
        """
        return pulumi.get(self, "event_bridge_configuration")

    @event_bridge_configuration.setter
    def event_bridge_configuration(self, value: Optional[pulumi.Input['BucketEventBridgeConfigurationArgs']]):
        pulumi.set(self, "event_bridge_configuration", value)

    @property
    @pulumi.getter(name="lambdaConfigurations")
    def lambda_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLambdaConfigurationArgs']]]]:
        """
        Describes the LAMlong functions to invoke and the events for which to invoke them.
        """
        return pulumi.get(self, "lambda_configurations")

    @lambda_configurations.setter
    def lambda_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLambdaConfigurationArgs']]]]):
        pulumi.set(self, "lambda_configurations", value)

    @property
    @pulumi.getter(name="queueConfigurations")
    def queue_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketQueueConfigurationArgs']]]]:
        """
        The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        """
        return pulumi.get(self, "queue_configurations")

    @queue_configurations.setter
    def queue_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketQueueConfigurationArgs']]]]):
        pulumi.set(self, "queue_configurations", value)

    @property
    @pulumi.getter(name="topicConfigurations")
    def topic_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTopicConfigurationArgs']]]]:
        """
        The topic to which notifications are sent and the events for which notifications are generated.
        """
        return pulumi.get(self, "topic_configurations")

    @topic_configurations.setter
    def topic_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTopicConfigurationArgs']]]]):
        pulumi.set(self, "topic_configurations", value)


@pulumi.input_type
class BucketNotificationFilterArgs:
    def __init__(__self__, *,
                 s3_key: pulumi.Input['BucketS3KeyFilterArgs']):
        """
        Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketS3KeyFilterArgs'] s3_key: A container for object key name prefix and suffix filtering rules.
        """
        pulumi.set(__self__, "s3_key", s3_key)

    @property
    @pulumi.getter(name="s3Key")
    def s3_key(self) -> pulumi.Input['BucketS3KeyFilterArgs']:
        """
        A container for object key name prefix and suffix filtering rules.
        """
        return pulumi.get(self, "s3_key")

    @s3_key.setter
    def s3_key(self, value: pulumi.Input['BucketS3KeyFilterArgs']):
        pulumi.set(self, "s3_key", value)


@pulumi.input_type
class BucketObjectLockConfigurationArgs:
    def __init__(__self__, *,
                 object_lock_enabled: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input['BucketObjectLockRuleArgs']] = None):
        """
        Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
        :param pulumi.Input[str] object_lock_enabled: Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
        :param pulumi.Input['BucketObjectLockRuleArgs'] rule: Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
        """
        if object_lock_enabled is not None:
            pulumi.set(__self__, "object_lock_enabled", object_lock_enabled)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="objectLockEnabled")
    def object_lock_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
        """
        return pulumi.get(self, "object_lock_enabled")

    @object_lock_enabled.setter
    def object_lock_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_lock_enabled", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['BucketObjectLockRuleArgs']]:
        """
        Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['BucketObjectLockRuleArgs']]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class BucketObjectLockRuleArgs:
    def __init__(__self__, *,
                 default_retention: Optional[pulumi.Input['BucketDefaultRetentionArgs']] = None):
        """
        Specifies the Object Lock rule for the specified object. Enable the this rule when you apply ``ObjectLockConfiguration`` to a bucket.
        :param pulumi.Input['BucketDefaultRetentionArgs'] default_retention: The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
        """
        if default_retention is not None:
            pulumi.set(__self__, "default_retention", default_retention)

    @property
    @pulumi.getter(name="defaultRetention")
    def default_retention(self) -> Optional[pulumi.Input['BucketDefaultRetentionArgs']]:
        """
        The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
        """
        return pulumi.get(self, "default_retention")

    @default_retention.setter
    def default_retention(self, value: Optional[pulumi.Input['BucketDefaultRetentionArgs']]):
        pulumi.set(self, "default_retention", value)


@pulumi.input_type
class BucketOwnershipControlsRuleArgs:
    def __init__(__self__, *,
                 object_ownership: Optional[pulumi.Input['BucketOwnershipControlsRuleObjectOwnership']] = None):
        """
        Specifies an Object Ownership rule.
         S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketOwnershipControlsRuleObjectOwnership'] object_ownership: Specifies an object ownership rule.
        """
        if object_ownership is not None:
            pulumi.set(__self__, "object_ownership", object_ownership)

    @property
    @pulumi.getter(name="objectOwnership")
    def object_ownership(self) -> Optional[pulumi.Input['BucketOwnershipControlsRuleObjectOwnership']]:
        """
        Specifies an object ownership rule.
        """
        return pulumi.get(self, "object_ownership")

    @object_ownership.setter
    def object_ownership(self, value: Optional[pulumi.Input['BucketOwnershipControlsRuleObjectOwnership']]):
        pulumi.set(self, "object_ownership", value)


@pulumi.input_type
class BucketOwnershipControlsArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['BucketOwnershipControlsRuleArgs']]]):
        """
        Specifies the container element for Object Ownership rules.
         S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[Sequence[pulumi.Input['BucketOwnershipControlsRuleArgs']]] rules: Specifies the container element for Object Ownership rules.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['BucketOwnershipControlsRuleArgs']]]:
        """
        Specifies the container element for Object Ownership rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['BucketOwnershipControlsRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class BucketPublicAccessBlockConfigurationArgs:
    def __init__(__self__, *,
                 block_public_acls: Optional[pulumi.Input[bool]] = None,
                 block_public_policy: Optional[pulumi.Input[bool]] = None,
                 ignore_public_acls: Optional[pulumi.Input[bool]] = None,
                 restrict_public_buckets: Optional[pulumi.Input[bool]] = None):
        """
        The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the *Amazon S3 User Guide*.
        :param pulumi.Input[bool] block_public_acls: Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes the following behavior:
                 +  PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
                 +  PUT Object calls fail if the request includes a public ACL.
                 +  PUT Bucket calls fail if the request includes a public ACL.
                 
                Enabling this setting doesn't affect existing policies or ACLs.
        :param pulumi.Input[bool] block_public_policy: Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to ``TRUE`` causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. 
                Enabling this setting doesn't affect existing bucket policies.
        :param pulumi.Input[bool] ignore_public_acls: Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.
                Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        :param pulumi.Input[bool] restrict_public_buckets: Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to ``TRUE`` restricts access to this bucket to only AWS-service principals and authorized users within this account if the bucket has a public policy.
                Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        if block_public_acls is not None:
            pulumi.set(__self__, "block_public_acls", block_public_acls)
        if block_public_policy is not None:
            pulumi.set(__self__, "block_public_policy", block_public_policy)
        if ignore_public_acls is not None:
            pulumi.set(__self__, "ignore_public_acls", ignore_public_acls)
        if restrict_public_buckets is not None:
            pulumi.set(__self__, "restrict_public_buckets", restrict_public_buckets)

    @property
    @pulumi.getter(name="blockPublicAcls")
    def block_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes the following behavior:
          +  PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
          +  PUT Object calls fail if the request includes a public ACL.
          +  PUT Bucket calls fail if the request includes a public ACL.
          
         Enabling this setting doesn't affect existing policies or ACLs.
        """
        return pulumi.get(self, "block_public_acls")

    @block_public_acls.setter
    def block_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_acls", value)

    @property
    @pulumi.getter(name="blockPublicPolicy")
    def block_public_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to ``TRUE`` causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. 
         Enabling this setting doesn't affect existing bucket policies.
        """
        return pulumi.get(self, "block_public_policy")

    @block_public_policy.setter
    def block_public_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_policy", value)

    @property
    @pulumi.getter(name="ignorePublicAcls")
    def ignore_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.
         Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        """
        return pulumi.get(self, "ignore_public_acls")

    @ignore_public_acls.setter
    def ignore_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_public_acls", value)

    @property
    @pulumi.getter(name="restrictPublicBuckets")
    def restrict_public_buckets(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to ``TRUE`` restricts access to this bucket to only AWS-service principals and authorized users within this account if the bucket has a public policy.
         Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        return pulumi.get(self, "restrict_public_buckets")

    @restrict_public_buckets.setter
    def restrict_public_buckets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_public_buckets", value)


@pulumi.input_type
class BucketQueueConfigurationArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 queue: pulumi.Input[str],
                 filter: Optional[pulumi.Input['BucketNotificationFilterArgs']] = None):
        """
        Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
        :param pulumi.Input[str] event: The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] queue: The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.
        :param pulumi.Input['BucketNotificationFilterArgs'] filter: The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
        """
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "queue", queue)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def queue(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketNotificationFilterArgs']]:
        """
        The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketNotificationFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class BucketRedirectAllRequestsToArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 protocol: Optional[pulumi.Input['BucketRedirectAllRequestsToProtocol']] = None):
        """
        Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
        :param pulumi.Input[str] host_name: Name of the host where requests are redirected.
        :param pulumi.Input['BucketRedirectAllRequestsToProtocol'] protocol: Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        """
        pulumi.set(__self__, "host_name", host_name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        Name of the host where requests are redirected.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['BucketRedirectAllRequestsToProtocol']]:
        """
        Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['BucketRedirectAllRequestsToProtocol']]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class BucketRedirectRuleArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[str]] = None,
                 http_redirect_code: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input['BucketRedirectRuleProtocol']] = None,
                 replace_key_prefix_with: Optional[pulumi.Input[str]] = None,
                 replace_key_with: Optional[pulumi.Input[str]] = None):
        """
        Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
        :param pulumi.Input[str] host_name: The host name to use in the redirect request.
        :param pulumi.Input[str] http_redirect_code: The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        :param pulumi.Input['BucketRedirectRuleProtocol'] protocol: Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        :param pulumi.Input[str] replace_key_prefix_with: The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.
                 Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        :param pulumi.Input[str] replace_key_with: The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.
                 Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if http_redirect_code is not None:
            pulumi.set(__self__, "http_redirect_code", http_redirect_code)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replace_key_prefix_with is not None:
            pulumi.set(__self__, "replace_key_prefix_with", replace_key_prefix_with)
        if replace_key_with is not None:
            pulumi.set(__self__, "replace_key_with", replace_key_with)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name to use in the redirect request.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="httpRedirectCode")
    def http_redirect_code(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        """
        return pulumi.get(self, "http_redirect_code")

    @http_redirect_code.setter
    def http_redirect_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_redirect_code", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['BucketRedirectRuleProtocol']]:
        """
        Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['BucketRedirectRuleProtocol']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="replaceKeyPrefixWith")
    def replace_key_prefix_with(self) -> Optional[pulumi.Input[str]]:
        """
        The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.
          Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        return pulumi.get(self, "replace_key_prefix_with")

    @replace_key_prefix_with.setter
    def replace_key_prefix_with(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_key_prefix_with", value)

    @property
    @pulumi.getter(name="replaceKeyWith")
    def replace_key_with(self) -> Optional[pulumi.Input[str]]:
        """
        The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.
          Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        return pulumi.get(self, "replace_key_with")

    @replace_key_with.setter
    def replace_key_with(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_key_with", value)


@pulumi.input_type
class BucketReplicaModificationsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketReplicaModificationsStatus']):
        """
        A filter that you can specify for selection for modifications on replicas.
        :param pulumi.Input['BucketReplicaModificationsStatus'] status: Specifies whether Amazon S3 replicates modifications on replicas.
                *Allowed values*: ``Enabled`` | ``Disabled``
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketReplicaModificationsStatus']:
        """
        Specifies whether Amazon S3 replicates modifications on replicas.
         *Allowed values*: ``Enabled`` | ``Disabled``
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketReplicaModificationsStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class BucketReplicationConfigurationArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['BucketReplicationRuleArgs']]]):
        """
        A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB. The latest version of the replication configuration XML is V2. For more information about XML V2 replication configurations, see [Replication configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] role: The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[Sequence[pulumi.Input['BucketReplicationRuleArgs']]] rules: A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['BucketReplicationRuleArgs']]]:
        """
        A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['BucketReplicationRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class BucketReplicationDestinationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 access_control_translation: Optional[pulumi.Input['BucketAccessControlTranslationArgs']] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 encryption_configuration: Optional[pulumi.Input['BucketEncryptionConfigurationArgs']] = None,
                 metrics: Optional[pulumi.Input['BucketMetricsArgs']] = None,
                 replication_time: Optional[pulumi.Input['BucketReplicationTimeArgs']] = None,
                 storage_class: Optional[pulumi.Input['BucketReplicationDestinationStorageClass']] = None):
        """
        A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        :param pulumi.Input[str] bucket: The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
        :param pulumi.Input['BucketAccessControlTranslationArgs'] access_control_translation: Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
        :param pulumi.Input[str] account: Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.
                If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.
        :param pulumi.Input['BucketEncryptionConfigurationArgs'] encryption_configuration: Specifies encryption-related information.
        :param pulumi.Input['BucketMetricsArgs'] metrics: A container specifying replication metrics-related settings enabling replication metrics and events.
        :param pulumi.Input['BucketReplicationTimeArgs'] replication_time: A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
        :param pulumi.Input['BucketReplicationDestinationStorageClass'] storage_class: The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 
                For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.
        """
        pulumi.set(__self__, "bucket", bucket)
        if access_control_translation is not None:
            pulumi.set(__self__, "access_control_translation", access_control_translation)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if encryption_configuration is not None:
            pulumi.set(__self__, "encryption_configuration", encryption_configuration)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if replication_time is not None:
            pulumi.set(__self__, "replication_time", replication_time)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="accessControlTranslation")
    def access_control_translation(self) -> Optional[pulumi.Input['BucketAccessControlTranslationArgs']]:
        """
        Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
        """
        return pulumi.get(self, "access_control_translation")

    @access_control_translation.setter
    def access_control_translation(self, value: Optional[pulumi.Input['BucketAccessControlTranslationArgs']]):
        pulumi.set(self, "access_control_translation", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.
         If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="encryptionConfiguration")
    def encryption_configuration(self) -> Optional[pulumi.Input['BucketEncryptionConfigurationArgs']]:
        """
        Specifies encryption-related information.
        """
        return pulumi.get(self, "encryption_configuration")

    @encryption_configuration.setter
    def encryption_configuration(self, value: Optional[pulumi.Input['BucketEncryptionConfigurationArgs']]):
        pulumi.set(self, "encryption_configuration", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['BucketMetricsArgs']]:
        """
        A container specifying replication metrics-related settings enabling replication metrics and events.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['BucketMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="replicationTime")
    def replication_time(self) -> Optional[pulumi.Input['BucketReplicationTimeArgs']]:
        """
        A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
        """
        return pulumi.get(self, "replication_time")

    @replication_time.setter
    def replication_time(self, value: Optional[pulumi.Input['BucketReplicationTimeArgs']]):
        pulumi.set(self, "replication_time", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input['BucketReplicationDestinationStorageClass']]:
        """
        The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 
         For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input['BucketReplicationDestinationStorageClass']]):
        pulumi.set(self, "storage_class", value)


@pulumi.input_type
class BucketReplicationRuleAndOperatorArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]] = None):
        """
        A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. 
         For example:
          +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. 
          +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag
        :param pulumi.Input[str] prefix: An object key name prefix that identifies the subset of objects to which the rule applies.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]] tag_filters: An array of tags containing key and value pairs.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An object key name prefix that identifies the subset of objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]:
        """
        An array of tags containing key and value pairs.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class BucketReplicationRuleFilterArgs:
    def __init__(__self__, *,
                 and_: Optional[pulumi.Input['BucketReplicationRuleAndOperatorArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filter: Optional[pulumi.Input['BucketTagFilterArgs']] = None):
        """
        A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element.
        :param pulumi.Input['BucketReplicationRuleAndOperatorArgs'] and_: A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
                 +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.
                 +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.
        :param pulumi.Input[str] prefix: An object key name prefix that identifies the subset of objects to which the rule applies.
                 Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        :param pulumi.Input['BucketTagFilterArgs'] tag_filter: A container for specifying a tag key and value. 
                The rule applies only to objects that have the tag in their tag set.
        """
        if and_ is not None:
            pulumi.set(__self__, "and_", and_)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filter is not None:
            pulumi.set(__self__, "tag_filter", tag_filter)

    @property
    @pulumi.getter(name="and")
    def and_(self) -> Optional[pulumi.Input['BucketReplicationRuleAndOperatorArgs']]:
        """
        A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
          +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.
          +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.
        """
        return pulumi.get(self, "and_")

    @and_.setter
    def and_(self, value: Optional[pulumi.Input['BucketReplicationRuleAndOperatorArgs']]):
        pulumi.set(self, "and_", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An object key name prefix that identifies the subset of objects to which the rule applies.
          Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilter")
    def tag_filter(self) -> Optional[pulumi.Input['BucketTagFilterArgs']]:
        """
        A container for specifying a tag key and value. 
         The rule applies only to objects that have the tag in their tag set.
        """
        return pulumi.get(self, "tag_filter")

    @tag_filter.setter
    def tag_filter(self, value: Optional[pulumi.Input['BucketTagFilterArgs']]):
        pulumi.set(self, "tag_filter", value)


@pulumi.input_type
class BucketReplicationRuleArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['BucketReplicationDestinationArgs'],
                 status: pulumi.Input['BucketReplicationRuleStatus'],
                 delete_marker_replication: Optional[pulumi.Input['BucketDeleteMarkerReplicationArgs']] = None,
                 filter: Optional[pulumi.Input['BucketReplicationRuleFilterArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 source_selection_criteria: Optional[pulumi.Input['BucketSourceSelectionCriteriaArgs']] = None):
        """
        Specifies which Amazon S3 objects to replicate and where to store the replicas.
        :param pulumi.Input['BucketReplicationDestinationArgs'] destination: A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        :param pulumi.Input['BucketReplicationRuleStatus'] status: Specifies whether the rule is enabled.
        :param pulumi.Input['BucketDeleteMarkerReplicationArgs'] delete_marker_replication: Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
                For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
                 If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        :param pulumi.Input['BucketReplicationRuleFilterArgs'] filter: A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.
                 V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
        :param pulumi.Input[str] id: A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as "ID".
        :param pulumi.Input[str] prefix: An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
                 Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        :param pulumi.Input[int] priority: The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. 
                For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketSourceSelectionCriteriaArgs'] source_selection_criteria: A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "status", status)
        if delete_marker_replication is not None:
            pulumi.set(__self__, "delete_marker_replication", delete_marker_replication)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if source_selection_criteria is not None:
            pulumi.set(__self__, "source_selection_criteria", source_selection_criteria)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['BucketReplicationDestinationArgs']:
        """
        A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['BucketReplicationDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketReplicationRuleStatus']:
        """
        Specifies whether the rule is enabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketReplicationRuleStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="deleteMarkerReplication")
    def delete_marker_replication(self) -> Optional[pulumi.Input['BucketDeleteMarkerReplicationArgs']]:
        """
        Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
         For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
          If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        """
        return pulumi.get(self, "delete_marker_replication")

    @delete_marker_replication.setter
    def delete_marker_replication(self, value: Optional[pulumi.Input['BucketDeleteMarkerReplicationArgs']]):
        pulumi.set(self, "delete_marker_replication", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketReplicationRuleFilterArgs']]:
        """
        A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.
          V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketReplicationRuleFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as "ID".
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
          Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. 
         For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="sourceSelectionCriteria")
    def source_selection_criteria(self) -> Optional[pulumi.Input['BucketSourceSelectionCriteriaArgs']]:
        """
        A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
        """
        return pulumi.get(self, "source_selection_criteria")

    @source_selection_criteria.setter
    def source_selection_criteria(self, value: Optional[pulumi.Input['BucketSourceSelectionCriteriaArgs']]):
        pulumi.set(self, "source_selection_criteria", value)


@pulumi.input_type
class BucketReplicationTimeValueArgs:
    def __init__(__self__, *,
                 minutes: pulumi.Input[int]):
        """
        A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics ``EventThreshold``.
        :param pulumi.Input[int] minutes: Contains an integer specifying time in minutes. 
                 Valid value: 15
        """
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        """
        Contains an integer specifying time in minutes. 
          Valid value: 15
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)


@pulumi.input_type
class BucketReplicationTimeArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketReplicationTimeStatus'],
                 time: pulumi.Input['BucketReplicationTimeValueArgs']):
        """
        A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
        :param pulumi.Input['BucketReplicationTimeStatus'] status: Specifies whether the replication time is enabled.
        :param pulumi.Input['BucketReplicationTimeValueArgs'] time: A container specifying the time by which replication should be complete for all objects and operations on objects.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketReplicationTimeStatus']:
        """
        Specifies whether the replication time is enabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketReplicationTimeStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input['BucketReplicationTimeValueArgs']:
        """
        A container specifying the time by which replication should be complete for all objects and operations on objects.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input['BucketReplicationTimeValueArgs']):
        pulumi.set(self, "time", value)


@pulumi.input_type
class BucketRoutingRuleConditionArgs:
    def __init__(__self__, *,
                 http_error_code_returned_equals: Optional[pulumi.Input[str]] = None,
                 key_prefix_equals: Optional[pulumi.Input[str]] = None):
        """
        A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        :param pulumi.Input[str] http_error_code_returned_equals: The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
                Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.
        :param pulumi.Input[str] key_prefix_equals: The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.
                Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        """
        if http_error_code_returned_equals is not None:
            pulumi.set(__self__, "http_error_code_returned_equals", http_error_code_returned_equals)
        if key_prefix_equals is not None:
            pulumi.set(__self__, "key_prefix_equals", key_prefix_equals)

    @property
    @pulumi.getter(name="httpErrorCodeReturnedEquals")
    def http_error_code_returned_equals(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
         Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.
        """
        return pulumi.get(self, "http_error_code_returned_equals")

    @http_error_code_returned_equals.setter
    def http_error_code_returned_equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_error_code_returned_equals", value)

    @property
    @pulumi.getter(name="keyPrefixEquals")
    def key_prefix_equals(self) -> Optional[pulumi.Input[str]]:
        """
        The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.
         Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.
        """
        return pulumi.get(self, "key_prefix_equals")

    @key_prefix_equals.setter
    def key_prefix_equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix_equals", value)


@pulumi.input_type
class BucketRoutingRuleArgs:
    def __init__(__self__, *,
                 redirect_rule: pulumi.Input['BucketRedirectRuleArgs'],
                 routing_rule_condition: Optional[pulumi.Input['BucketRoutingRuleConditionArgs']] = None):
        """
        Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketRedirectRuleArgs'] redirect_rule: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        :param pulumi.Input['BucketRoutingRuleConditionArgs'] routing_rule_condition: A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        """
        pulumi.set(__self__, "redirect_rule", redirect_rule)
        if routing_rule_condition is not None:
            pulumi.set(__self__, "routing_rule_condition", routing_rule_condition)

    @property
    @pulumi.getter(name="redirectRule")
    def redirect_rule(self) -> pulumi.Input['BucketRedirectRuleArgs']:
        """
        Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
        """
        return pulumi.get(self, "redirect_rule")

    @redirect_rule.setter
    def redirect_rule(self, value: pulumi.Input['BucketRedirectRuleArgs']):
        pulumi.set(self, "redirect_rule", value)

    @property
    @pulumi.getter(name="routingRuleCondition")
    def routing_rule_condition(self) -> Optional[pulumi.Input['BucketRoutingRuleConditionArgs']]:
        """
        A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
        """
        return pulumi.get(self, "routing_rule_condition")

    @routing_rule_condition.setter
    def routing_rule_condition(self, value: Optional[pulumi.Input['BucketRoutingRuleConditionArgs']]):
        pulumi.set(self, "routing_rule_condition", value)


@pulumi.input_type
class BucketRuleArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketRuleStatus'],
                 abort_incomplete_multipart_upload: Optional[pulumi.Input['BucketAbortIncompleteMultipartUploadArgs']] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 expiration_in_days: Optional[pulumi.Input[int]] = None,
                 expired_object_delete_marker: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input['BucketNoncurrentVersionExpirationArgs']] = None,
                 noncurrent_version_expiration_in_days: Optional[pulumi.Input[int]] = None,
                 noncurrent_version_transition: Optional[pulumi.Input['BucketNoncurrentVersionTransitionArgs']] = None,
                 noncurrent_version_transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]]] = None,
                 object_size_greater_than: Optional[pulumi.Input[str]] = None,
                 object_size_less_than: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]] = None,
                 transition: Optional[pulumi.Input['BucketTransitionArgs']] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTransitionArgs']]]] = None):
        """
        Specifies lifecycle rules for an Amazon S3 bucket. For more information, see [Put Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html) in the *Amazon S3 API Reference*.
         You must specify at least one of the following properties: ``AbortIncompleteMultipartUpload``, ``ExpirationDate``, ``ExpirationInDays``, ``NoncurrentVersionExpirationInDays``, ``NoncurrentVersionTransition``, ``NoncurrentVersionTransitions``, ``Transition``, or ``Transitions``.
        :param pulumi.Input['BucketRuleStatus'] status: If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        :param pulumi.Input['BucketAbortIncompleteMultipartUploadArgs'] abort_incomplete_multipart_upload: Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.
        :param pulumi.Input[str] expiration_date: Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        :param pulumi.Input[int] expiration_in_days: Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        :param pulumi.Input[bool] expired_object_delete_marker: Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
        :param pulumi.Input[str] id: Unique identifier for the rule. The value can't be longer than 255 characters.
        :param pulumi.Input['BucketNoncurrentVersionExpirationArgs'] noncurrent_version_expiration: Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.
        :param pulumi.Input[int] noncurrent_version_expiration_in_days: (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.
        :param pulumi.Input['BucketNoncurrentVersionTransitionArgs'] noncurrent_version_transition: (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        :param pulumi.Input[Sequence[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]] noncurrent_version_transitions: For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        :param pulumi.Input[str] object_size_greater_than: Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] object_size_less_than: Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] prefix: Object key prefix that identifies one or more objects to which this rule applies.
                 Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        :param pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]] tag_filters: Tags to use to identify a subset of objects to which the lifecycle rule applies.
        :param pulumi.Input['BucketTransitionArgs'] transition: (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.
        :param pulumi.Input[Sequence[pulumi.Input['BucketTransitionArgs']]] transitions: One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
        """
        pulumi.set(__self__, "status", status)
        if abort_incomplete_multipart_upload is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload", abort_incomplete_multipart_upload)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if expiration_in_days is not None:
            pulumi.set(__self__, "expiration_in_days", expiration_in_days)
        if expired_object_delete_marker is not None:
            pulumi.set(__self__, "expired_object_delete_marker", expired_object_delete_marker)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)
        if noncurrent_version_expiration_in_days is not None:
            pulumi.set(__self__, "noncurrent_version_expiration_in_days", noncurrent_version_expiration_in_days)
        if noncurrent_version_transition is not None:
            pulumi.set(__self__, "noncurrent_version_transition", noncurrent_version_transition)
        if noncurrent_version_transitions is not None:
            pulumi.set(__self__, "noncurrent_version_transitions", noncurrent_version_transitions)
        if object_size_greater_than is not None:
            pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        if object_size_less_than is not None:
            pulumi.set(__self__, "object_size_less_than", object_size_less_than)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if transition is not None:
            pulumi.set(__self__, "transition", transition)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketRuleStatus']:
        """
        If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketRuleStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="abortIncompleteMultipartUpload")
    def abort_incomplete_multipart_upload(self) -> Optional[pulumi.Input['BucketAbortIncompleteMultipartUploadArgs']]:
        """
        Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload")

    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, value: Optional[pulumi.Input['BucketAbortIncompleteMultipartUploadArgs']]):
        pulumi.set(self, "abort_incomplete_multipart_upload", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        """
        return pulumi.get(self, "expiration_in_days")

    @expiration_in_days.setter
    def expiration_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_in_days", value)

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
        """
        return pulumi.get(self, "expired_object_delete_marker")

    @expired_object_delete_marker.setter
    def expired_object_delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expired_object_delete_marker", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the rule. The value can't be longer than 255 characters.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional[pulumi.Input['BucketNoncurrentVersionExpirationArgs']]:
        """
        Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, value: Optional[pulumi.Input['BucketNoncurrentVersionExpirationArgs']]):
        pulumi.set(self, "noncurrent_version_expiration", value)

    @property
    @pulumi.getter(name="noncurrentVersionExpirationInDays")
    def noncurrent_version_expiration_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.
        """
        return pulumi.get(self, "noncurrent_version_expiration_in_days")

    @noncurrent_version_expiration_in_days.setter
    def noncurrent_version_expiration_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "noncurrent_version_expiration_in_days", value)

    @property
    @pulumi.getter(name="noncurrentVersionTransition")
    def noncurrent_version_transition(self) -> Optional[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]:
        """
        (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        """
        return pulumi.get(self, "noncurrent_version_transition")

    @noncurrent_version_transition.setter
    def noncurrent_version_transition(self, value: Optional[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]):
        pulumi.set(self, "noncurrent_version_transition", value)

    @property
    @pulumi.getter(name="noncurrentVersionTransitions")
    def noncurrent_version_transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]]]:
        """
        For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        """
        return pulumi.get(self, "noncurrent_version_transitions")

    @noncurrent_version_transitions.setter
    def noncurrent_version_transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketNoncurrentVersionTransitionArgs']]]]):
        pulumi.set(self, "noncurrent_version_transitions", value)

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "object_size_greater_than")

    @object_size_greater_than.setter
    def object_size_greater_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_size_greater_than", value)

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "object_size_less_than")

    @object_size_less_than.setter
    def object_size_less_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_size_less_than", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Object key prefix that identifies one or more objects to which this rule applies.
          Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]:
        """
        Tags to use to identify a subset of objects to which the lifecycle rule applies.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter
    def transition(self) -> Optional[pulumi.Input['BucketTransitionArgs']]:
        """
        (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.
        """
        return pulumi.get(self, "transition")

    @transition.setter
    def transition(self, value: Optional[pulumi.Input['BucketTransitionArgs']]):
        pulumi.set(self, "transition", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTransitionArgs']]]]:
        """
        One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
        """
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


@pulumi.input_type
class BucketS3KeyFilterArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['BucketFilterRuleArgs']]]):
        """
        A container for object key name prefix and suffix filtering rules. For more information about object key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
          The same type of filter rule cannot be used more than once. For example, you cannot specify two prefix rules.
        :param pulumi.Input[Sequence[pulumi.Input['BucketFilterRuleArgs']]] rules: A list of containers for the key-value pair that defines the criteria for the filter rule.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['BucketFilterRuleArgs']]]:
        """
        A list of containers for the key-value pair that defines the criteria for the filter rule.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['BucketFilterRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class BucketServerSideEncryptionByDefaultArgs:
    def __init__(__self__, *,
                 sse_algorithm: pulumi.Input['BucketServerSideEncryptionByDefaultSseAlgorithm'],
                 kms_master_key_id: Optional[pulumi.Input[str]] = None):
        """
        Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. If you don't specify a customer managed key at configuration, Amazon S3 automatically creates an AWS KMS key in your AWS account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS. For more information, see [PUT Bucket encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the *Amazon S3 API Reference*.
        :param pulumi.Input['BucketServerSideEncryptionByDefaultSseAlgorithm'] sse_algorithm: Server-side encryption algorithm to use for the default encryption.
        :param pulumi.Input[str] kms_master_key_id: AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
                You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
                 +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` 
                 +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` 
                 +  Key Alias: ``alias/alias-name`` 
                 
                If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. 
                If you are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
                 Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
        """
        pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if kms_master_key_id is not None:
            pulumi.set(__self__, "kms_master_key_id", kms_master_key_id)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> pulumi.Input['BucketServerSideEncryptionByDefaultSseAlgorithm']:
        """
        Server-side encryption algorithm to use for the default encryption.
        """
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: pulumi.Input['BucketServerSideEncryptionByDefaultSseAlgorithm']):
        pulumi.set(self, "sse_algorithm", value)

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
         You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
          +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` 
          +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` 
          +  Key Alias: ``alias/alias-name`` 
          
         If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. 
         If you are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
          Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
        """
        return pulumi.get(self, "kms_master_key_id")

    @kms_master_key_id.setter
    def kms_master_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_master_key_id", value)


@pulumi.input_type
class BucketServerSideEncryptionRuleArgs:
    def __init__(__self__, *,
                 bucket_key_enabled: Optional[pulumi.Input[bool]] = None,
                 server_side_encryption_by_default: Optional[pulumi.Input['BucketServerSideEncryptionByDefaultArgs']] = None):
        """
        Specifies the default server-side encryption configuration.
        :param pulumi.Input[bool] bucket_key_enabled: Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.
                For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketServerSideEncryptionByDefaultArgs'] server_side_encryption_by_default: Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
        """
        if bucket_key_enabled is not None:
            pulumi.set(__self__, "bucket_key_enabled", bucket_key_enabled)
        if server_side_encryption_by_default is not None:
            pulumi.set(__self__, "server_side_encryption_by_default", server_side_encryption_by_default)

    @property
    @pulumi.getter(name="bucketKeyEnabled")
    def bucket_key_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.
         For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "bucket_key_enabled")

    @bucket_key_enabled.setter
    def bucket_key_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bucket_key_enabled", value)

    @property
    @pulumi.getter(name="serverSideEncryptionByDefault")
    def server_side_encryption_by_default(self) -> Optional[pulumi.Input['BucketServerSideEncryptionByDefaultArgs']]:
        """
        Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
        """
        return pulumi.get(self, "server_side_encryption_by_default")

    @server_side_encryption_by_default.setter
    def server_side_encryption_by_default(self, value: Optional[pulumi.Input['BucketServerSideEncryptionByDefaultArgs']]):
        pulumi.set(self, "server_side_encryption_by_default", value)


@pulumi.input_type
class BucketSourceSelectionCriteriaArgs:
    def __init__(__self__, *,
                 replica_modifications: Optional[pulumi.Input['BucketReplicaModificationsArgs']] = None,
                 sse_kms_encrypted_objects: Optional[pulumi.Input['BucketSseKmsEncryptedObjectsArgs']] = None):
        """
        A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
        :param pulumi.Input['BucketReplicaModificationsArgs'] replica_modifications: A filter that you can specify for selection for modifications on replicas.
        :param pulumi.Input['BucketSseKmsEncryptedObjectsArgs'] sse_kms_encrypted_objects: A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.
        """
        if replica_modifications is not None:
            pulumi.set(__self__, "replica_modifications", replica_modifications)
        if sse_kms_encrypted_objects is not None:
            pulumi.set(__self__, "sse_kms_encrypted_objects", sse_kms_encrypted_objects)

    @property
    @pulumi.getter(name="replicaModifications")
    def replica_modifications(self) -> Optional[pulumi.Input['BucketReplicaModificationsArgs']]:
        """
        A filter that you can specify for selection for modifications on replicas.
        """
        return pulumi.get(self, "replica_modifications")

    @replica_modifications.setter
    def replica_modifications(self, value: Optional[pulumi.Input['BucketReplicaModificationsArgs']]):
        pulumi.set(self, "replica_modifications", value)

    @property
    @pulumi.getter(name="sseKmsEncryptedObjects")
    def sse_kms_encrypted_objects(self) -> Optional[pulumi.Input['BucketSseKmsEncryptedObjectsArgs']]:
        """
        A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.
        """
        return pulumi.get(self, "sse_kms_encrypted_objects")

    @sse_kms_encrypted_objects.setter
    def sse_kms_encrypted_objects(self, value: Optional[pulumi.Input['BucketSseKmsEncryptedObjectsArgs']]):
        pulumi.set(self, "sse_kms_encrypted_objects", value)


@pulumi.input_type
class BucketSseKmsEncryptedObjectsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketSseKmsEncryptedObjectsStatus']):
        """
        A container for filter information for the selection of S3 objects encrypted with AWS KMS.
        :param pulumi.Input['BucketSseKmsEncryptedObjectsStatus'] status: Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketSseKmsEncryptedObjectsStatus']:
        """
        Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketSseKmsEncryptedObjectsStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class BucketStorageClassAnalysisArgs:
    def __init__(__self__, *,
                 data_export: Optional[pulumi.Input['BucketDataExportArgs']] = None):
        """
        Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
        :param pulumi.Input['BucketDataExportArgs'] data_export: Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
        """
        if data_export is not None:
            pulumi.set(__self__, "data_export", data_export)

    @property
    @pulumi.getter(name="dataExport")
    def data_export(self) -> Optional[pulumi.Input['BucketDataExportArgs']]:
        """
        Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
        """
        return pulumi.get(self, "data_export")

    @data_export.setter
    def data_export(self, value: Optional[pulumi.Input['BucketDataExportArgs']]):
        pulumi.set(self, "data_export", value)


@pulumi.input_type
class BucketTagFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
        :param pulumi.Input[str] key: The tag key.
        :param pulumi.Input[str] value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The tag value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BucketTargetObjectKeyFormatArgs:
    def __init__(__self__):
        """
        Describes the key format for server access log file in the target bucket. You can choose between SimplePrefix and PartitionedPrefix.
        """
        pass


@pulumi.input_type
class BucketTieringArgs:
    def __init__(__self__, *,
                 access_tier: pulumi.Input['BucketTieringAccessTier'],
                 days: pulumi.Input[int]):
        """
        The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
        :param pulumi.Input['BucketTieringAccessTier'] access_tier: S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
        :param pulumi.Input[int] days: The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
        """
        pulumi.set(__self__, "access_tier", access_tier)
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="accessTier")
    def access_tier(self) -> pulumi.Input['BucketTieringAccessTier']:
        """
        S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
        """
        return pulumi.get(self, "access_tier")

    @access_tier.setter
    def access_tier(self, value: pulumi.Input['BucketTieringAccessTier']):
        pulumi.set(self, "access_tier", value)

    @property
    @pulumi.getter
    def days(self) -> pulumi.Input[int]:
        """
        The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: pulumi.Input[int]):
        pulumi.set(self, "days", value)


@pulumi.input_type
class BucketTopicConfigurationArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 filter: Optional[pulumi.Input['BucketNotificationFilterArgs']] = None):
        """
        A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
        :param pulumi.Input[str] event: The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input[str] topic: The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
        :param pulumi.Input['BucketNotificationFilterArgs'] filter: The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.
        """
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "topic", topic)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketNotificationFilterArgs']]:
        """
        The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketNotificationFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class BucketTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input['BucketTransitionStorageClass'],
                 transition_date: Optional[pulumi.Input[str]] = None,
                 transition_in_days: Optional[pulumi.Input[int]] = None):
        """
        Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the *Amazon S3 User Guide*.
        :param pulumi.Input['BucketTransitionStorageClass'] storage_class: The storage class to which you want the object to transition.
        :param pulumi.Input[str] transition_date: Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
        :param pulumi.Input[int] transition_in_days: Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if transition_date is not None:
            pulumi.set(__self__, "transition_date", transition_date)
        if transition_in_days is not None:
            pulumi.set(__self__, "transition_in_days", transition_in_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input['BucketTransitionStorageClass']:
        """
        The storage class to which you want the object to transition.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input['BucketTransitionStorageClass']):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="transitionDate")
    def transition_date(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
        """
        return pulumi.get(self, "transition_date")

    @transition_date.setter
    def transition_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transition_date", value)

    @property
    @pulumi.getter(name="transitionInDays")
    def transition_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
        """
        return pulumi.get(self, "transition_in_days")

    @transition_in_days.setter
    def transition_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transition_in_days", value)


@pulumi.input_type
class BucketVersioningConfigurationArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['BucketVersioningConfigurationStatus']):
        """
        Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3 API Reference*.
        :param pulumi.Input['BucketVersioningConfigurationStatus'] status: The versioning state of the bucket.
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['BucketVersioningConfigurationStatus']:
        """
        The versioning state of the bucket.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['BucketVersioningConfigurationStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class BucketWebsiteConfigurationArgs:
    def __init__(__self__, *,
                 error_document: Optional[pulumi.Input[str]] = None,
                 index_document: Optional[pulumi.Input[str]] = None,
                 redirect_all_requests_to: Optional[pulumi.Input['BucketRedirectAllRequestsToArgs']] = None,
                 routing_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketRoutingRuleArgs']]]] = None):
        """
        Specifies website configuration parameters for an Amazon S3 bucket.
        :param pulumi.Input[str] error_document: The name of the error document for the website.
        :param pulumi.Input[str] index_document: The name of the index document for the website.
        :param pulumi.Input['BucketRedirectAllRequestsToArgs'] redirect_all_requests_to: The redirect behavior for every request to this bucket's website endpoint.
                 If you specify this property, you can't specify any other property.
        :param pulumi.Input[Sequence[pulumi.Input['BucketRoutingRuleArgs']]] routing_rules: Rules that define when a redirect is applied and the redirect behavior.
        """
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)
        if routing_rules is not None:
            pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the error document for the website.
        """
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the index document for the website.
        """
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[pulumi.Input['BucketRedirectAllRequestsToArgs']]:
        """
        The redirect behavior for every request to this bucket's website endpoint.
          If you specify this property, you can't specify any other property.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @redirect_all_requests_to.setter
    def redirect_all_requests_to(self, value: Optional[pulumi.Input['BucketRedirectAllRequestsToArgs']]):
        pulumi.set(self, "redirect_all_requests_to", value)

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketRoutingRuleArgs']]]]:
        """
        Rules that define when a redirect is applied and the redirect behavior.
        """
        return pulumi.get(self, "routing_rules")

    @routing_rules.setter
    def routing_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketRoutingRuleArgs']]]]):
        pulumi.set(self, "routing_rules", value)


@pulumi.input_type
class MultiRegionAccessPointPublicAccessBlockConfigurationArgs:
    def __init__(__self__, *,
                 block_public_acls: Optional[pulumi.Input[bool]] = None,
                 block_public_policy: Optional[pulumi.Input[bool]] = None,
                 ignore_public_acls: Optional[pulumi.Input[bool]] = None,
                 restrict_public_buckets: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] block_public_acls: Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
               - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
                - PUT Object calls fail if the request includes a public ACL.
               . - PUT Bucket calls fail if the request includes a public ACL.
               Enabling this setting doesn't affect existing policies or ACLs.
        :param pulumi.Input[bool] block_public_policy: Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        :param pulumi.Input[bool] ignore_public_acls: Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        :param pulumi.Input[bool] restrict_public_buckets: Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
               Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        if block_public_acls is not None:
            pulumi.set(__self__, "block_public_acls", block_public_acls)
        if block_public_policy is not None:
            pulumi.set(__self__, "block_public_policy", block_public_policy)
        if ignore_public_acls is not None:
            pulumi.set(__self__, "ignore_public_acls", ignore_public_acls)
        if restrict_public_buckets is not None:
            pulumi.set(__self__, "restrict_public_buckets", restrict_public_buckets)

    @property
    @pulumi.getter(name="blockPublicAcls")
    def block_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
        - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         - PUT Object calls fail if the request includes a public ACL.
        . - PUT Bucket calls fail if the request includes a public ACL.
        Enabling this setting doesn't affect existing policies or ACLs.
        """
        return pulumi.get(self, "block_public_acls")

    @block_public_acls.setter
    def block_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_acls", value)

    @property
    @pulumi.getter(name="blockPublicPolicy")
    def block_public_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        """
        return pulumi.get(self, "block_public_policy")

    @block_public_policy.setter
    def block_public_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_public_policy", value)

    @property
    @pulumi.getter(name="ignorePublicAcls")
    def ignore_public_acls(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        """
        return pulumi.get(self, "ignore_public_acls")

    @ignore_public_acls.setter
    def ignore_public_acls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_public_acls", value)

    @property
    @pulumi.getter(name="restrictPublicBuckets")
    def restrict_public_buckets(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
        Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
        """
        return pulumi.get(self, "restrict_public_buckets")

    @restrict_public_buckets.setter
    def restrict_public_buckets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_public_buckets", value)


@pulumi.input_type
class MultiRegionAccessPointRegionArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_account_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        if bucket_account_id is not None:
            pulumi.set(__self__, "bucket_account_id", bucket_account_id)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketAccountId")
    def bucket_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_account_id")

    @bucket_account_id.setter
    def bucket_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_account_id", value)


@pulumi.input_type
class StorageLensAccountLevelArgs:
    def __init__(__self__, *,
                 bucket_level: pulumi.Input['StorageLensBucketLevelArgs'],
                 activity_metrics: Optional[pulumi.Input['StorageLensActivityMetricsArgs']] = None,
                 advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']] = None,
                 advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']] = None,
                 detailed_status_codes_metrics: Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']] = None,
                 storage_lens_group_level: Optional[pulumi.Input['StorageLensGroupLevelArgs']] = None):
        """
        Account-level metrics configurations.
        """
        pulumi.set(__self__, "bucket_level", bucket_level)
        if activity_metrics is not None:
            pulumi.set(__self__, "activity_metrics", activity_metrics)
        if advanced_cost_optimization_metrics is not None:
            pulumi.set(__self__, "advanced_cost_optimization_metrics", advanced_cost_optimization_metrics)
        if advanced_data_protection_metrics is not None:
            pulumi.set(__self__, "advanced_data_protection_metrics", advanced_data_protection_metrics)
        if detailed_status_codes_metrics is not None:
            pulumi.set(__self__, "detailed_status_codes_metrics", detailed_status_codes_metrics)
        if storage_lens_group_level is not None:
            pulumi.set(__self__, "storage_lens_group_level", storage_lens_group_level)

    @property
    @pulumi.getter(name="bucketLevel")
    def bucket_level(self) -> pulumi.Input['StorageLensBucketLevelArgs']:
        return pulumi.get(self, "bucket_level")

    @bucket_level.setter
    def bucket_level(self, value: pulumi.Input['StorageLensBucketLevelArgs']):
        pulumi.set(self, "bucket_level", value)

    @property
    @pulumi.getter(name="activityMetrics")
    def activity_metrics(self) -> Optional[pulumi.Input['StorageLensActivityMetricsArgs']]:
        return pulumi.get(self, "activity_metrics")

    @activity_metrics.setter
    def activity_metrics(self, value: Optional[pulumi.Input['StorageLensActivityMetricsArgs']]):
        pulumi.set(self, "activity_metrics", value)

    @property
    @pulumi.getter(name="advancedCostOptimizationMetrics")
    def advanced_cost_optimization_metrics(self) -> Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']]:
        return pulumi.get(self, "advanced_cost_optimization_metrics")

    @advanced_cost_optimization_metrics.setter
    def advanced_cost_optimization_metrics(self, value: Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']]):
        pulumi.set(self, "advanced_cost_optimization_metrics", value)

    @property
    @pulumi.getter(name="advancedDataProtectionMetrics")
    def advanced_data_protection_metrics(self) -> Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']]:
        return pulumi.get(self, "advanced_data_protection_metrics")

    @advanced_data_protection_metrics.setter
    def advanced_data_protection_metrics(self, value: Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']]):
        pulumi.set(self, "advanced_data_protection_metrics", value)

    @property
    @pulumi.getter(name="detailedStatusCodesMetrics")
    def detailed_status_codes_metrics(self) -> Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']]:
        return pulumi.get(self, "detailed_status_codes_metrics")

    @detailed_status_codes_metrics.setter
    def detailed_status_codes_metrics(self, value: Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']]):
        pulumi.set(self, "detailed_status_codes_metrics", value)

    @property
    @pulumi.getter(name="storageLensGroupLevel")
    def storage_lens_group_level(self) -> Optional[pulumi.Input['StorageLensGroupLevelArgs']]:
        return pulumi.get(self, "storage_lens_group_level")

    @storage_lens_group_level.setter
    def storage_lens_group_level(self, value: Optional[pulumi.Input['StorageLensGroupLevelArgs']]):
        pulumi.set(self, "storage_lens_group_level", value)


@pulumi.input_type
class StorageLensActivityMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Enables activity metrics.
        :param pulumi.Input[bool] is_enabled: Specifies whether activity metrics are enabled or disabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether activity metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class StorageLensAdvancedCostOptimizationMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Enables advanced cost optimization metrics.
        :param pulumi.Input[bool] is_enabled: Specifies whether advanced cost optimization metrics are enabled or disabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether advanced cost optimization metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class StorageLensAdvancedDataProtectionMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Enables advanced data protection metrics.
        :param pulumi.Input[bool] is_enabled: Specifies whether advanced data protection metrics are enabled or disabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether advanced data protection metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class StorageLensAwsOrgArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str]):
        """
        The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
        """
        pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class StorageLensBucketLevelArgs:
    def __init__(__self__, *,
                 activity_metrics: Optional[pulumi.Input['StorageLensActivityMetricsArgs']] = None,
                 advanced_cost_optimization_metrics: Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']] = None,
                 advanced_data_protection_metrics: Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']] = None,
                 detailed_status_codes_metrics: Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']] = None,
                 prefix_level: Optional[pulumi.Input['StorageLensPrefixLevelArgs']] = None):
        """
        Bucket-level metrics configurations.
        """
        if activity_metrics is not None:
            pulumi.set(__self__, "activity_metrics", activity_metrics)
        if advanced_cost_optimization_metrics is not None:
            pulumi.set(__self__, "advanced_cost_optimization_metrics", advanced_cost_optimization_metrics)
        if advanced_data_protection_metrics is not None:
            pulumi.set(__self__, "advanced_data_protection_metrics", advanced_data_protection_metrics)
        if detailed_status_codes_metrics is not None:
            pulumi.set(__self__, "detailed_status_codes_metrics", detailed_status_codes_metrics)
        if prefix_level is not None:
            pulumi.set(__self__, "prefix_level", prefix_level)

    @property
    @pulumi.getter(name="activityMetrics")
    def activity_metrics(self) -> Optional[pulumi.Input['StorageLensActivityMetricsArgs']]:
        return pulumi.get(self, "activity_metrics")

    @activity_metrics.setter
    def activity_metrics(self, value: Optional[pulumi.Input['StorageLensActivityMetricsArgs']]):
        pulumi.set(self, "activity_metrics", value)

    @property
    @pulumi.getter(name="advancedCostOptimizationMetrics")
    def advanced_cost_optimization_metrics(self) -> Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']]:
        return pulumi.get(self, "advanced_cost_optimization_metrics")

    @advanced_cost_optimization_metrics.setter
    def advanced_cost_optimization_metrics(self, value: Optional[pulumi.Input['StorageLensAdvancedCostOptimizationMetricsArgs']]):
        pulumi.set(self, "advanced_cost_optimization_metrics", value)

    @property
    @pulumi.getter(name="advancedDataProtectionMetrics")
    def advanced_data_protection_metrics(self) -> Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']]:
        return pulumi.get(self, "advanced_data_protection_metrics")

    @advanced_data_protection_metrics.setter
    def advanced_data_protection_metrics(self, value: Optional[pulumi.Input['StorageLensAdvancedDataProtectionMetricsArgs']]):
        pulumi.set(self, "advanced_data_protection_metrics", value)

    @property
    @pulumi.getter(name="detailedStatusCodesMetrics")
    def detailed_status_codes_metrics(self) -> Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']]:
        return pulumi.get(self, "detailed_status_codes_metrics")

    @detailed_status_codes_metrics.setter
    def detailed_status_codes_metrics(self, value: Optional[pulumi.Input['StorageLensDetailedStatusCodesMetricsArgs']]):
        pulumi.set(self, "detailed_status_codes_metrics", value)

    @property
    @pulumi.getter(name="prefixLevel")
    def prefix_level(self) -> Optional[pulumi.Input['StorageLensPrefixLevelArgs']]:
        return pulumi.get(self, "prefix_level")

    @prefix_level.setter
    def prefix_level(self, value: Optional[pulumi.Input['StorageLensPrefixLevelArgs']]):
        pulumi.set(self, "prefix_level", value)


@pulumi.input_type
class StorageLensBucketsAndRegionsArgs:
    def __init__(__self__, *,
                 buckets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
        """
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)


@pulumi.input_type
class StorageLensCloudWatchMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool]):
        """
        CloudWatch metrics settings for the Amazon S3 Storage Lens metrics export.
        :param pulumi.Input[bool] is_enabled: Specifies whether CloudWatch metrics are enabled or disabled.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether CloudWatch metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class StorageLensConfigurationArgs:
    def __init__(__self__, *,
                 account_level: pulumi.Input['StorageLensAccountLevelArgs'],
                 id: pulumi.Input[str],
                 is_enabled: pulumi.Input[bool],
                 aws_org: Optional[pulumi.Input['StorageLensAwsOrgArgs']] = None,
                 data_export: Optional[pulumi.Input['StorageLensDataExportArgs']] = None,
                 exclude: Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']] = None,
                 include: Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']] = None,
                 storage_lens_arn: Optional[pulumi.Input[str]] = None):
        """
        Specifies the details of Amazon S3 Storage Lens configuration.
        :param pulumi.Input[bool] is_enabled: Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
        :param pulumi.Input[str] storage_lens_arn: The ARN for the Amazon S3 Storage Lens configuration.
        """
        pulumi.set(__self__, "account_level", account_level)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        if aws_org is not None:
            pulumi.set(__self__, "aws_org", aws_org)
        if data_export is not None:
            pulumi.set(__self__, "data_export", data_export)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if storage_lens_arn is not None:
            pulumi.set(__self__, "storage_lens_arn", storage_lens_arn)

    @property
    @pulumi.getter(name="accountLevel")
    def account_level(self) -> pulumi.Input['StorageLensAccountLevelArgs']:
        return pulumi.get(self, "account_level")

    @account_level.setter
    def account_level(self, value: pulumi.Input['StorageLensAccountLevelArgs']):
        pulumi.set(self, "account_level", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="awsOrg")
    def aws_org(self) -> Optional[pulumi.Input['StorageLensAwsOrgArgs']]:
        return pulumi.get(self, "aws_org")

    @aws_org.setter
    def aws_org(self, value: Optional[pulumi.Input['StorageLensAwsOrgArgs']]):
        pulumi.set(self, "aws_org", value)

    @property
    @pulumi.getter(name="dataExport")
    def data_export(self) -> Optional[pulumi.Input['StorageLensDataExportArgs']]:
        return pulumi.get(self, "data_export")

    @data_export.setter
    def data_export(self, value: Optional[pulumi.Input['StorageLensDataExportArgs']]):
        pulumi.set(self, "data_export", value)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']]:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input['StorageLensBucketsAndRegionsArgs']]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter(name="storageLensArn")
    def storage_lens_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the Amazon S3 Storage Lens configuration.
        """
        return pulumi.get(self, "storage_lens_arn")

    @storage_lens_arn.setter
    def storage_lens_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_lens_arn", value)


@pulumi.input_type
class StorageLensDataExportArgs:
    def __init__(__self__, *,
                 cloud_watch_metrics: Optional[pulumi.Input['StorageLensCloudWatchMetricsArgs']] = None,
                 s3_bucket_destination: Optional[pulumi.Input['StorageLensS3BucketDestinationArgs']] = None):
        """
        Specifies how Amazon S3 Storage Lens metrics should be exported.
        """
        if cloud_watch_metrics is not None:
            pulumi.set(__self__, "cloud_watch_metrics", cloud_watch_metrics)
        if s3_bucket_destination is not None:
            pulumi.set(__self__, "s3_bucket_destination", s3_bucket_destination)

    @property
    @pulumi.getter(name="cloudWatchMetrics")
    def cloud_watch_metrics(self) -> Optional[pulumi.Input['StorageLensCloudWatchMetricsArgs']]:
        return pulumi.get(self, "cloud_watch_metrics")

    @cloud_watch_metrics.setter
    def cloud_watch_metrics(self, value: Optional[pulumi.Input['StorageLensCloudWatchMetricsArgs']]):
        pulumi.set(self, "cloud_watch_metrics", value)

    @property
    @pulumi.getter(name="s3BucketDestination")
    def s3_bucket_destination(self) -> Optional[pulumi.Input['StorageLensS3BucketDestinationArgs']]:
        return pulumi.get(self, "s3_bucket_destination")

    @s3_bucket_destination.setter
    def s3_bucket_destination(self, value: Optional[pulumi.Input['StorageLensS3BucketDestinationArgs']]):
        pulumi.set(self, "s3_bucket_destination", value)


@pulumi.input_type
class StorageLensDetailedStatusCodesMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Enables detailed status codes metrics.
        :param pulumi.Input[bool] is_enabled: Specifies whether detailed status codes metrics are enabled or disabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether detailed status codes metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)


@pulumi.input_type
class StorageLensEncryptionArgs:
    def __init__(__self__):
        """
        Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
        """
        pass


@pulumi.input_type
class StorageLensGroupAndArgs:
    def __init__(__self__, *,
                 match_any_prefix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_suffix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_tag: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]] = None,
                 match_object_age: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']] = None,
                 match_object_size: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']] = None):
        """
        The Storage Lens group will include objects that match all of the specified filter values.
        """
        if match_any_prefix is not None:
            pulumi.set(__self__, "match_any_prefix", match_any_prefix)
        if match_any_suffix is not None:
            pulumi.set(__self__, "match_any_suffix", match_any_suffix)
        if match_any_tag is not None:
            pulumi.set(__self__, "match_any_tag", match_any_tag)
        if match_object_age is not None:
            pulumi.set(__self__, "match_object_age", match_object_age)
        if match_object_size is not None:
            pulumi.set(__self__, "match_object_size", match_object_size)

    @property
    @pulumi.getter(name="matchAnyPrefix")
    def match_any_prefix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_prefix")

    @match_any_prefix.setter
    def match_any_prefix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_prefix", value)

    @property
    @pulumi.getter(name="matchAnySuffix")
    def match_any_suffix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_suffix")

    @match_any_suffix.setter
    def match_any_suffix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_suffix", value)

    @property
    @pulumi.getter(name="matchAnyTag")
    def match_any_tag(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]:
        return pulumi.get(self, "match_any_tag")

    @match_any_tag.setter
    def match_any_tag(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]):
        pulumi.set(self, "match_any_tag", value)

    @property
    @pulumi.getter(name="matchObjectAge")
    def match_object_age(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]:
        return pulumi.get(self, "match_object_age")

    @match_object_age.setter
    def match_object_age(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]):
        pulumi.set(self, "match_object_age", value)

    @property
    @pulumi.getter(name="matchObjectSize")
    def match_object_size(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]:
        return pulumi.get(self, "match_object_size")

    @match_object_size.setter
    def match_object_size(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]):
        pulumi.set(self, "match_object_size", value)


@pulumi.input_type
class StorageLensGroupFilterArgs:
    def __init__(__self__, *,
                 and_: Optional[pulumi.Input['StorageLensGroupAndArgs']] = None,
                 match_any_prefix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_suffix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_tag: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]] = None,
                 match_object_age: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']] = None,
                 match_object_size: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']] = None,
                 or_: Optional[pulumi.Input['StorageLensGroupOrArgs']] = None):
        """
        Sets the Storage Lens Group filter.
        """
        if and_ is not None:
            pulumi.set(__self__, "and_", and_)
        if match_any_prefix is not None:
            pulumi.set(__self__, "match_any_prefix", match_any_prefix)
        if match_any_suffix is not None:
            pulumi.set(__self__, "match_any_suffix", match_any_suffix)
        if match_any_tag is not None:
            pulumi.set(__self__, "match_any_tag", match_any_tag)
        if match_object_age is not None:
            pulumi.set(__self__, "match_object_age", match_object_age)
        if match_object_size is not None:
            pulumi.set(__self__, "match_object_size", match_object_size)
        if or_ is not None:
            pulumi.set(__self__, "or_", or_)

    @property
    @pulumi.getter(name="and")
    def and_(self) -> Optional[pulumi.Input['StorageLensGroupAndArgs']]:
        return pulumi.get(self, "and_")

    @and_.setter
    def and_(self, value: Optional[pulumi.Input['StorageLensGroupAndArgs']]):
        pulumi.set(self, "and_", value)

    @property
    @pulumi.getter(name="matchAnyPrefix")
    def match_any_prefix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_prefix")

    @match_any_prefix.setter
    def match_any_prefix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_prefix", value)

    @property
    @pulumi.getter(name="matchAnySuffix")
    def match_any_suffix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_suffix")

    @match_any_suffix.setter
    def match_any_suffix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_suffix", value)

    @property
    @pulumi.getter(name="matchAnyTag")
    def match_any_tag(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]:
        return pulumi.get(self, "match_any_tag")

    @match_any_tag.setter
    def match_any_tag(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]):
        pulumi.set(self, "match_any_tag", value)

    @property
    @pulumi.getter(name="matchObjectAge")
    def match_object_age(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]:
        return pulumi.get(self, "match_object_age")

    @match_object_age.setter
    def match_object_age(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]):
        pulumi.set(self, "match_object_age", value)

    @property
    @pulumi.getter(name="matchObjectSize")
    def match_object_size(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]:
        return pulumi.get(self, "match_object_size")

    @match_object_size.setter
    def match_object_size(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]):
        pulumi.set(self, "match_object_size", value)

    @property
    @pulumi.getter(name="or")
    def or_(self) -> Optional[pulumi.Input['StorageLensGroupOrArgs']]:
        return pulumi.get(self, "or_")

    @or_.setter
    def or_(self, value: Optional[pulumi.Input['StorageLensGroupOrArgs']]):
        pulumi.set(self, "or_", value)


@pulumi.input_type
class StorageLensGroupLevelArgs:
    def __init__(__self__, *,
                 storage_lens_group_selection_criteria: Optional[pulumi.Input['StorageLensGroupSelectionCriteriaArgs']] = None):
        """
        Specifies the details of Amazon S3 Storage Lens Group configuration.
        """
        if storage_lens_group_selection_criteria is not None:
            pulumi.set(__self__, "storage_lens_group_selection_criteria", storage_lens_group_selection_criteria)

    @property
    @pulumi.getter(name="storageLensGroupSelectionCriteria")
    def storage_lens_group_selection_criteria(self) -> Optional[pulumi.Input['StorageLensGroupSelectionCriteriaArgs']]:
        return pulumi.get(self, "storage_lens_group_selection_criteria")

    @storage_lens_group_selection_criteria.setter
    def storage_lens_group_selection_criteria(self, value: Optional[pulumi.Input['StorageLensGroupSelectionCriteriaArgs']]):
        pulumi.set(self, "storage_lens_group_selection_criteria", value)


@pulumi.input_type
class StorageLensGroupMatchObjectAgeArgs:
    def __init__(__self__, *,
                 days_greater_than: Optional[pulumi.Input[int]] = None,
                 days_less_than: Optional[pulumi.Input[int]] = None):
        """
        Filter to match all of the specified values for the minimum and maximum object age.
        :param pulumi.Input[int] days_greater_than: Minimum object age to which the rule applies.
        :param pulumi.Input[int] days_less_than: Maximum object age to which the rule applies.
        """
        if days_greater_than is not None:
            pulumi.set(__self__, "days_greater_than", days_greater_than)
        if days_less_than is not None:
            pulumi.set(__self__, "days_less_than", days_less_than)

    @property
    @pulumi.getter(name="daysGreaterThan")
    def days_greater_than(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum object age to which the rule applies.
        """
        return pulumi.get(self, "days_greater_than")

    @days_greater_than.setter
    def days_greater_than(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_greater_than", value)

    @property
    @pulumi.getter(name="daysLessThan")
    def days_less_than(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum object age to which the rule applies.
        """
        return pulumi.get(self, "days_less_than")

    @days_less_than.setter
    def days_less_than(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_less_than", value)


@pulumi.input_type
class StorageLensGroupMatchObjectSizeArgs:
    def __init__(__self__, *,
                 bytes_greater_than: Optional[pulumi.Input[int]] = None,
                 bytes_less_than: Optional[pulumi.Input[int]] = None):
        """
        Filter to match all of the specified values for the minimum and maximum object size.
        :param pulumi.Input[int] bytes_greater_than: Minimum object size to which the rule applies.
        :param pulumi.Input[int] bytes_less_than: Maximum object size to which the rule applies.
        """
        if bytes_greater_than is not None:
            pulumi.set(__self__, "bytes_greater_than", bytes_greater_than)
        if bytes_less_than is not None:
            pulumi.set(__self__, "bytes_less_than", bytes_less_than)

    @property
    @pulumi.getter(name="bytesGreaterThan")
    def bytes_greater_than(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum object size to which the rule applies.
        """
        return pulumi.get(self, "bytes_greater_than")

    @bytes_greater_than.setter
    def bytes_greater_than(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes_greater_than", value)

    @property
    @pulumi.getter(name="bytesLessThan")
    def bytes_less_than(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum object size to which the rule applies.
        """
        return pulumi.get(self, "bytes_less_than")

    @bytes_less_than.setter
    def bytes_less_than(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes_less_than", value)


@pulumi.input_type
class StorageLensGroupOrArgs:
    def __init__(__self__, *,
                 match_any_prefix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_suffix: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_any_tag: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]] = None,
                 match_object_age: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']] = None,
                 match_object_size: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']] = None):
        """
        The Storage Lens group will include objects that match any of the specified filter values.
        """
        if match_any_prefix is not None:
            pulumi.set(__self__, "match_any_prefix", match_any_prefix)
        if match_any_suffix is not None:
            pulumi.set(__self__, "match_any_suffix", match_any_suffix)
        if match_any_tag is not None:
            pulumi.set(__self__, "match_any_tag", match_any_tag)
        if match_object_age is not None:
            pulumi.set(__self__, "match_object_age", match_object_age)
        if match_object_size is not None:
            pulumi.set(__self__, "match_object_size", match_object_size)

    @property
    @pulumi.getter(name="matchAnyPrefix")
    def match_any_prefix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_prefix")

    @match_any_prefix.setter
    def match_any_prefix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_prefix", value)

    @property
    @pulumi.getter(name="matchAnySuffix")
    def match_any_suffix(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_any_suffix")

    @match_any_suffix.setter
    def match_any_suffix(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_any_suffix", value)

    @property
    @pulumi.getter(name="matchAnyTag")
    def match_any_tag(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]:
        return pulumi.get(self, "match_any_tag")

    @match_any_tag.setter
    def match_any_tag(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageLensGroupTagArgs']]]]):
        pulumi.set(self, "match_any_tag", value)

    @property
    @pulumi.getter(name="matchObjectAge")
    def match_object_age(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]:
        return pulumi.get(self, "match_object_age")

    @match_object_age.setter
    def match_object_age(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectAgeArgs']]):
        pulumi.set(self, "match_object_age", value)

    @property
    @pulumi.getter(name="matchObjectSize")
    def match_object_size(self) -> Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]:
        return pulumi.get(self, "match_object_size")

    @match_object_size.setter
    def match_object_size(self, value: Optional[pulumi.Input['StorageLensGroupMatchObjectSizeArgs']]):
        pulumi.set(self, "match_object_size", value)


@pulumi.input_type
class StorageLensGroupSelectionCriteriaArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 include: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Selection criteria for Storage Lens Group level metrics
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include", value)


@pulumi.input_type
class StorageLensGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StorageLensPrefixLevelStorageMetricsArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 selection_criteria: Optional[pulumi.Input['StorageLensSelectionCriteriaArgs']] = None):
        """
        :param pulumi.Input[bool] is_enabled: Specifies whether prefix-level storage metrics are enabled or disabled.
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether prefix-level storage metrics are enabled or disabled.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input['StorageLensSelectionCriteriaArgs']]:
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input['StorageLensSelectionCriteriaArgs']]):
        pulumi.set(self, "selection_criteria", value)


@pulumi.input_type
class StorageLensPrefixLevelArgs:
    def __init__(__self__, *,
                 storage_metrics: pulumi.Input['StorageLensPrefixLevelStorageMetricsArgs']):
        """
        Prefix-level metrics configurations.
        """
        pulumi.set(__self__, "storage_metrics", storage_metrics)

    @property
    @pulumi.getter(name="storageMetrics")
    def storage_metrics(self) -> pulumi.Input['StorageLensPrefixLevelStorageMetricsArgs']:
        return pulumi.get(self, "storage_metrics")

    @storage_metrics.setter
    def storage_metrics(self, value: pulumi.Input['StorageLensPrefixLevelStorageMetricsArgs']):
        pulumi.set(self, "storage_metrics", value)


@pulumi.input_type
class StorageLensS3BucketDestinationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 arn: pulumi.Input[str],
                 format: pulumi.Input['StorageLensS3BucketDestinationFormat'],
                 output_schema_version: pulumi.Input['StorageLensS3BucketDestinationOutputSchemaVersion'],
                 encryption: Optional[pulumi.Input['StorageLensEncryptionArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
        :param pulumi.Input[str] account_id: The AWS account ID that owns the destination S3 bucket.
        :param pulumi.Input[str] arn: The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
        :param pulumi.Input['StorageLensS3BucketDestinationFormat'] format: Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
        :param pulumi.Input['StorageLensS3BucketDestinationOutputSchemaVersion'] output_schema_version: The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
        :param pulumi.Input[str] prefix: The prefix to use for Amazon S3 Storage Lens export.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "output_schema_version", output_schema_version)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        The AWS account ID that owns the destination S3 bucket.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['StorageLensS3BucketDestinationFormat']:
        """
        Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['StorageLensS3BucketDestinationFormat']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="outputSchemaVersion")
    def output_schema_version(self) -> pulumi.Input['StorageLensS3BucketDestinationOutputSchemaVersion']:
        """
        The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
        """
        return pulumi.get(self, "output_schema_version")

    @output_schema_version.setter
    def output_schema_version(self, value: pulumi.Input['StorageLensS3BucketDestinationOutputSchemaVersion']):
        pulumi.set(self, "output_schema_version", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['StorageLensEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['StorageLensEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix to use for Amazon S3 Storage Lens export.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class StorageLensSelectionCriteriaArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 max_depth: Optional[pulumi.Input[int]] = None,
                 min_storage_bytes_percentage: Optional[pulumi.Input[float]] = None):
        """
        Selection criteria for prefix-level metrics.
        :param pulumi.Input[str] delimiter: Delimiter to divide S3 key into hierarchy of prefixes.
        :param pulumi.Input[int] max_depth: Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
        :param pulumi.Input[float] min_storage_bytes_percentage: The minimum storage bytes threshold for the prefixes to be included in the analysis.
        """
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if max_depth is not None:
            pulumi.set(__self__, "max_depth", max_depth)
        if min_storage_bytes_percentage is not None:
            pulumi.set(__self__, "min_storage_bytes_percentage", min_storage_bytes_percentage)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        Delimiter to divide S3 key into hierarchy of prefixes.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="maxDepth")
    def max_depth(self) -> Optional[pulumi.Input[int]]:
        """
        Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
        """
        return pulumi.get(self, "max_depth")

    @max_depth.setter
    def max_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_depth", value)

    @property
    @pulumi.getter(name="minStorageBytesPercentage")
    def min_storage_bytes_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum storage bytes threshold for the prefixes to be included in the analysis.
        """
        return pulumi.get(self, "min_storage_bytes_percentage")

    @min_storage_bytes_percentage.setter
    def min_storage_bytes_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_storage_bytes_percentage", value)


