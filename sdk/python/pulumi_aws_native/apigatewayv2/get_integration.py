# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetIntegrationResult',
    'AwaitableGetIntegrationResult',
    'get_integration',
    'get_integration_output',
]

@pulumi.output_type
class GetIntegrationResult:
    def __init__(__self__, connection_id=None, connection_type=None, content_handling_strategy=None, credentials_arn=None, description=None, id=None, integration_method=None, integration_subtype=None, integration_type=None, integration_uri=None, passthrough_behavior=None, payload_format_version=None, request_parameters=None, request_templates=None, response_parameters=None, template_selection_expression=None, timeout_in_millis=None, tls_config=None):
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if content_handling_strategy and not isinstance(content_handling_strategy, str):
            raise TypeError("Expected argument 'content_handling_strategy' to be a str")
        pulumi.set(__self__, "content_handling_strategy", content_handling_strategy)
        if credentials_arn and not isinstance(credentials_arn, str):
            raise TypeError("Expected argument 'credentials_arn' to be a str")
        pulumi.set(__self__, "credentials_arn", credentials_arn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if integration_method and not isinstance(integration_method, str):
            raise TypeError("Expected argument 'integration_method' to be a str")
        pulumi.set(__self__, "integration_method", integration_method)
        if integration_subtype and not isinstance(integration_subtype, str):
            raise TypeError("Expected argument 'integration_subtype' to be a str")
        pulumi.set(__self__, "integration_subtype", integration_subtype)
        if integration_type and not isinstance(integration_type, str):
            raise TypeError("Expected argument 'integration_type' to be a str")
        pulumi.set(__self__, "integration_type", integration_type)
        if integration_uri and not isinstance(integration_uri, str):
            raise TypeError("Expected argument 'integration_uri' to be a str")
        pulumi.set(__self__, "integration_uri", integration_uri)
        if passthrough_behavior and not isinstance(passthrough_behavior, str):
            raise TypeError("Expected argument 'passthrough_behavior' to be a str")
        pulumi.set(__self__, "passthrough_behavior", passthrough_behavior)
        if payload_format_version and not isinstance(payload_format_version, str):
            raise TypeError("Expected argument 'payload_format_version' to be a str")
        pulumi.set(__self__, "payload_format_version", payload_format_version)
        if request_parameters and not isinstance(request_parameters, dict):
            raise TypeError("Expected argument 'request_parameters' to be a dict")
        pulumi.set(__self__, "request_parameters", request_parameters)
        if request_templates and not isinstance(request_templates, dict):
            raise TypeError("Expected argument 'request_templates' to be a dict")
        pulumi.set(__self__, "request_templates", request_templates)
        if response_parameters and not isinstance(response_parameters, dict):
            raise TypeError("Expected argument 'response_parameters' to be a dict")
        pulumi.set(__self__, "response_parameters", response_parameters)
        if template_selection_expression and not isinstance(template_selection_expression, str):
            raise TypeError("Expected argument 'template_selection_expression' to be a str")
        pulumi.set(__self__, "template_selection_expression", template_selection_expression)
        if timeout_in_millis and not isinstance(timeout_in_millis, int):
            raise TypeError("Expected argument 'timeout_in_millis' to be a int")
        pulumi.set(__self__, "timeout_in_millis", timeout_in_millis)
        if tls_config and not isinstance(tls_config, dict):
            raise TypeError("Expected argument 'tls_config' to be a dict")
        pulumi.set(__self__, "tls_config", tls_config)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="contentHandlingStrategy")
    def content_handling_strategy(self) -> Optional[str]:
        return pulumi.get(self, "content_handling_strategy")

    @property
    @pulumi.getter(name="credentialsArn")
    def credentials_arn(self) -> Optional[str]:
        return pulumi.get(self, "credentials_arn")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="integrationMethod")
    def integration_method(self) -> Optional[str]:
        return pulumi.get(self, "integration_method")

    @property
    @pulumi.getter(name="integrationSubtype")
    def integration_subtype(self) -> Optional[str]:
        return pulumi.get(self, "integration_subtype")

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> Optional[str]:
        return pulumi.get(self, "integration_type")

    @property
    @pulumi.getter(name="integrationUri")
    def integration_uri(self) -> Optional[str]:
        return pulumi.get(self, "integration_uri")

    @property
    @pulumi.getter(name="passthroughBehavior")
    def passthrough_behavior(self) -> Optional[str]:
        return pulumi.get(self, "passthrough_behavior")

    @property
    @pulumi.getter(name="payloadFormatVersion")
    def payload_format_version(self) -> Optional[str]:
        return pulumi.get(self, "payload_format_version")

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> Optional[Any]:
        return pulumi.get(self, "request_parameters")

    @property
    @pulumi.getter(name="requestTemplates")
    def request_templates(self) -> Optional[Any]:
        return pulumi.get(self, "request_templates")

    @property
    @pulumi.getter(name="responseParameters")
    def response_parameters(self) -> Optional[Any]:
        return pulumi.get(self, "response_parameters")

    @property
    @pulumi.getter(name="templateSelectionExpression")
    def template_selection_expression(self) -> Optional[str]:
        return pulumi.get(self, "template_selection_expression")

    @property
    @pulumi.getter(name="timeoutInMillis")
    def timeout_in_millis(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_millis")

    @property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional['outputs.IntegrationTlsConfig']:
        return pulumi.get(self, "tls_config")


class AwaitableGetIntegrationResult(GetIntegrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntegrationResult(
            connection_id=self.connection_id,
            connection_type=self.connection_type,
            content_handling_strategy=self.content_handling_strategy,
            credentials_arn=self.credentials_arn,
            description=self.description,
            id=self.id,
            integration_method=self.integration_method,
            integration_subtype=self.integration_subtype,
            integration_type=self.integration_type,
            integration_uri=self.integration_uri,
            passthrough_behavior=self.passthrough_behavior,
            payload_format_version=self.payload_format_version,
            request_parameters=self.request_parameters,
            request_templates=self.request_templates,
            response_parameters=self.response_parameters,
            template_selection_expression=self.template_selection_expression,
            timeout_in_millis=self.timeout_in_millis,
            tls_config=self.tls_config)


def get_integration(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntegrationResult:
    """
    Resource Type definition for AWS::ApiGatewayV2::Integration
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:apigatewayv2:getIntegration', __args__, opts=opts, typ=GetIntegrationResult).value

    return AwaitableGetIntegrationResult(
        connection_id=pulumi.get(__ret__, 'connection_id'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        content_handling_strategy=pulumi.get(__ret__, 'content_handling_strategy'),
        credentials_arn=pulumi.get(__ret__, 'credentials_arn'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        integration_method=pulumi.get(__ret__, 'integration_method'),
        integration_subtype=pulumi.get(__ret__, 'integration_subtype'),
        integration_type=pulumi.get(__ret__, 'integration_type'),
        integration_uri=pulumi.get(__ret__, 'integration_uri'),
        passthrough_behavior=pulumi.get(__ret__, 'passthrough_behavior'),
        payload_format_version=pulumi.get(__ret__, 'payload_format_version'),
        request_parameters=pulumi.get(__ret__, 'request_parameters'),
        request_templates=pulumi.get(__ret__, 'request_templates'),
        response_parameters=pulumi.get(__ret__, 'response_parameters'),
        template_selection_expression=pulumi.get(__ret__, 'template_selection_expression'),
        timeout_in_millis=pulumi.get(__ret__, 'timeout_in_millis'),
        tls_config=pulumi.get(__ret__, 'tls_config'))


@_utilities.lift_output_func(get_integration)
def get_integration_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIntegrationResult]:
    """
    Resource Type definition for AWS::ApiGatewayV2::Integration
    """
    ...
