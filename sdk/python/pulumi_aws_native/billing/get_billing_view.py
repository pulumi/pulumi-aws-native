# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetBillingViewResult',
    'AwaitableGetBillingViewResult',
    'get_billing_view',
    'get_billing_view_output',
]

@pulumi.output_type
class GetBillingViewResult:
    def __init__(__self__, arn=None, billing_view_type=None, created_at=None, data_filter_expression=None, owner_account_id=None, tags=None, updated_at=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if billing_view_type and not isinstance(billing_view_type, str):
            raise TypeError("Expected argument 'billing_view_type' to be a str")
        pulumi.set(__self__, "billing_view_type", billing_view_type)
        if created_at and not isinstance(created_at, float):
            raise TypeError("Expected argument 'created_at' to be a float")
        pulumi.set(__self__, "created_at", created_at)
        if data_filter_expression and not isinstance(data_filter_expression, dict):
            raise TypeError("Expected argument 'data_filter_expression' to be a dict")
        pulumi.set(__self__, "data_filter_expression", data_filter_expression)
        if owner_account_id and not isinstance(owner_account_id, str):
            raise TypeError("Expected argument 'owner_account_id' to be a str")
        pulumi.set(__self__, "owner_account_id", owner_account_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, float):
            raise TypeError("Expected argument 'updated_at' to be a float")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="billingViewType")
    def billing_view_type(self) -> Optional['BillingViewType']:
        """
        The type of billing group.
        """
        return pulumi.get(self, "billing_view_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.float]:
        """
        The time when the billing view was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataFilterExpression")
    def data_filter_expression(self) -> Optional['outputs.DataFilterExpressionProperties']:
        """
        See [Expression](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_billing_Expression.html) . Billing view only supports `LINKED_ACCOUNT` and `Tags` .
        """
        return pulumi.get(self, "data_filter_expression")

    @property
    @pulumi.getter(name="ownerAccountId")
    def owner_account_id(self) -> Optional[builtins.str]:
        """
        The account owner of the billing view.
        """
        return pulumi.get(self, "owner_account_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs associated to the billing view being created.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.float]:
        """
        The time when the billing view was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetBillingViewResult(GetBillingViewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBillingViewResult(
            arn=self.arn,
            billing_view_type=self.billing_view_type,
            created_at=self.created_at,
            data_filter_expression=self.data_filter_expression,
            owner_account_id=self.owner_account_id,
            tags=self.tags,
            updated_at=self.updated_at)


def get_billing_view(arn: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBillingViewResult:
    """
    A billing view is a container of cost & usage metadata.


    :param builtins.str arn: The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:billing:getBillingView', __args__, opts=opts, typ=GetBillingViewResult).value

    return AwaitableGetBillingViewResult(
        arn=pulumi.get(__ret__, 'arn'),
        billing_view_type=pulumi.get(__ret__, 'billing_view_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        data_filter_expression=pulumi.get(__ret__, 'data_filter_expression'),
        owner_account_id=pulumi.get(__ret__, 'owner_account_id'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_billing_view_output(arn: Optional[pulumi.Input[builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBillingViewResult]:
    """
    A billing view is a container of cost & usage metadata.


    :param builtins.str arn: The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:billing:getBillingView', __args__, opts=opts, typ=GetBillingViewResult)
    return __ret__.apply(lambda __response__: GetBillingViewResult(
        arn=pulumi.get(__response__, 'arn'),
        billing_view_type=pulumi.get(__response__, 'billing_view_type'),
        created_at=pulumi.get(__response__, 'created_at'),
        data_filter_expression=pulumi.get(__response__, 'data_filter_expression'),
        owner_account_id=pulumi.get(__response__, 'owner_account_id'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at')))
