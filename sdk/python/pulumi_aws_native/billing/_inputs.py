# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'DataFilterExpressionPropertiesDimensionsPropertiesArgs',
    'DataFilterExpressionPropertiesDimensionsPropertiesArgsDict',
    'DataFilterExpressionPropertiesTagsPropertiesArgs',
    'DataFilterExpressionPropertiesTagsPropertiesArgsDict',
    'DataFilterExpressionPropertiesArgs',
    'DataFilterExpressionPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class DataFilterExpressionPropertiesDimensionsPropertiesArgsDict(TypedDict):
        """
        The specific `Dimension` to use for `Expression` .
        """
        key: NotRequired[pulumi.Input['BillingViewDimensionKey']]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    DataFilterExpressionPropertiesDimensionsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataFilterExpressionPropertiesDimensionsPropertiesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input['BillingViewDimensionKey']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The specific `Dimension` to use for `Expression` .
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input['BillingViewDimensionKey']]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input['BillingViewDimensionKey']]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DataFilterExpressionPropertiesTagsPropertiesArgsDict(TypedDict):
        """
        The specific `Tag` to use for `Expression` .
        """
        key: NotRequired[pulumi.Input[builtins.str]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    DataFilterExpressionPropertiesTagsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataFilterExpressionPropertiesTagsPropertiesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The specific `Tag` to use for `Expression` .
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class DataFilterExpressionPropertiesArgsDict(TypedDict):
        """
        See [Expression](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_billing_Expression.html) . Billing view only supports `LINKED_ACCOUNT` and `Tags` .
        """
        dimensions: NotRequired[pulumi.Input['DataFilterExpressionPropertiesDimensionsPropertiesArgsDict']]
        """
        The specific `Dimension` to use for `Expression` .
        """
        tags: NotRequired[pulumi.Input['DataFilterExpressionPropertiesTagsPropertiesArgsDict']]
        """
        The specific `Tag` to use for `Expression` .
        """
elif False:
    DataFilterExpressionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataFilterExpressionPropertiesArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input['DataFilterExpressionPropertiesDimensionsPropertiesArgs']] = None,
                 tags: Optional[pulumi.Input['DataFilterExpressionPropertiesTagsPropertiesArgs']] = None):
        """
        See [Expression](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_billing_Expression.html) . Billing view only supports `LINKED_ACCOUNT` and `Tags` .
        :param pulumi.Input['DataFilterExpressionPropertiesDimensionsPropertiesArgs'] dimensions: The specific `Dimension` to use for `Expression` .
        :param pulumi.Input['DataFilterExpressionPropertiesTagsPropertiesArgs'] tags: The specific `Tag` to use for `Expression` .
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['DataFilterExpressionPropertiesDimensionsPropertiesArgs']]:
        """
        The specific `Dimension` to use for `Expression` .
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['DataFilterExpressionPropertiesDimensionsPropertiesArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input['DataFilterExpressionPropertiesTagsPropertiesArgs']]:
        """
        The specific `Tag` to use for `Expression` .
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input['DataFilterExpressionPropertiesTagsPropertiesArgs']]):
        pulumi.set(self, "tags", value)


