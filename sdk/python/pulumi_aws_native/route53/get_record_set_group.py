# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordSetGroupResult',
    'AwaitableGetRecordSetGroupResult',
    'get_record_set_group',
    'get_record_set_group_output',
]

@pulumi.output_type
class GetRecordSetGroupResult:
    def __init__(__self__, comment=None, id=None, record_sets=None):
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if record_sets and not isinstance(record_sets, list):
            raise TypeError("Expected argument 'record_sets' to be a list")
        pulumi.set(__self__, "record_sets", record_sets)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recordSets")
    def record_sets(self) -> Optional[Sequence['outputs.RecordSetGroupRecordSet']]:
        return pulumi.get(self, "record_sets")


class AwaitableGetRecordSetGroupResult(GetRecordSetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordSetGroupResult(
            comment=self.comment,
            id=self.id,
            record_sets=self.record_sets)


def get_record_set_group(id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordSetGroupResult:
    """
    Resource Type definition for AWS::Route53::RecordSetGroup
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:route53:getRecordSetGroup', __args__, opts=opts, typ=GetRecordSetGroupResult).value

    return AwaitableGetRecordSetGroupResult(
        comment=pulumi.get(__ret__, 'comment'),
        id=pulumi.get(__ret__, 'id'),
        record_sets=pulumi.get(__ret__, 'record_sets'))


@_utilities.lift_output_func(get_record_set_group)
def get_record_set_group_output(id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRecordSetGroupResult]:
    """
    Resource Type definition for AWS::Route53::RecordSetGroup
    """
    ...
