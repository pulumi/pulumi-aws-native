# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RecordSetArgs', 'RecordSet']

@pulumi.input_type
class RecordSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 alias_target: Optional[pulumi.Input['RecordSetAliasTargetArgs']] = None,
                 cidr_routing_config: Optional[pulumi.Input['RecordSetCidrRoutingConfigArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 failover: Optional[pulumi.Input['RecordSetFailover']] = None,
                 geo_location: Optional[pulumi.Input['RecordSetGeoLocationArgs']] = None,
                 health_check_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_name: Optional[pulumi.Input[str]] = None,
                 multi_value_answer: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_records: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_identifier: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a RecordSet resource.
        :param pulumi.Input[str] type: The DNS record type.
        :param pulumi.Input['RecordSetAliasTargetArgs'] alias_target: Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
        :param pulumi.Input['RecordSetCidrRoutingConfigArgs'] cidr_routing_config: The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
        :param pulumi.Input[str] comment: Optional: Any comments you want to include about a change batch request.
        :param pulumi.Input['RecordSetFailover'] failover: To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
        :param pulumi.Input['RecordSetGeoLocationArgs'] geo_location: A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
        :param pulumi.Input[str] health_check_id: If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
        :param pulumi.Input[str] hosted_zone_id: The ID of the hosted zone that you want to create records in.
        :param pulumi.Input[str] hosted_zone_name: The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
        :param pulumi.Input[bool] multi_value_answer: To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
        :param pulumi.Input[str] name: The name of the record that you want to create, update, or delete.
        :param pulumi.Input[str] region: The Amazon EC2 Region where you created the resource that this resource record set refers to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_records: One or more values that correspond with the value that you specified for the Type property.
        :param pulumi.Input[str] set_identifier: An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
        :param pulumi.Input[str] ttl: The resource record cache time to live (TTL), in seconds.
        :param pulumi.Input[int] weight: Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
        """
        pulumi.set(__self__, "type", type)
        if alias_target is not None:
            pulumi.set(__self__, "alias_target", alias_target)
        if cidr_routing_config is not None:
            pulumi.set(__self__, "cidr_routing_config", cidr_routing_config)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if failover is not None:
            pulumi.set(__self__, "failover", failover)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if health_check_id is not None:
            pulumi.set(__self__, "health_check_id", health_check_id)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if multi_value_answer is not None:
            pulumi.set(__self__, "multi_value_answer", multi_value_answer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_records is not None:
            pulumi.set(__self__, "resource_records", resource_records)
        if set_identifier is not None:
            pulumi.set(__self__, "set_identifier", set_identifier)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The DNS record type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="aliasTarget")
    def alias_target(self) -> Optional[pulumi.Input['RecordSetAliasTargetArgs']]:
        """
        Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
        """
        return pulumi.get(self, "alias_target")

    @alias_target.setter
    def alias_target(self, value: Optional[pulumi.Input['RecordSetAliasTargetArgs']]):
        pulumi.set(self, "alias_target", value)

    @property
    @pulumi.getter(name="cidrRoutingConfig")
    def cidr_routing_config(self) -> Optional[pulumi.Input['RecordSetCidrRoutingConfigArgs']]:
        """
        The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
        """
        return pulumi.get(self, "cidr_routing_config")

    @cidr_routing_config.setter
    def cidr_routing_config(self, value: Optional[pulumi.Input['RecordSetCidrRoutingConfigArgs']]):
        pulumi.set(self, "cidr_routing_config", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Any comments you want to include about a change batch request.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def failover(self) -> Optional[pulumi.Input['RecordSetFailover']]:
        """
        To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
        """
        return pulumi.get(self, "failover")

    @failover.setter
    def failover(self, value: Optional[pulumi.Input['RecordSetFailover']]):
        pulumi.set(self, "failover", value)

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[pulumi.Input['RecordSetGeoLocationArgs']]:
        """
        A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
        """
        return pulumi.get(self, "geo_location")

    @geo_location.setter
    def geo_location(self, value: Optional[pulumi.Input['RecordSetGeoLocationArgs']]):
        pulumi.set(self, "geo_location", value)

    @property
    @pulumi.getter(name="healthCheckId")
    def health_check_id(self) -> Optional[pulumi.Input[str]]:
        """
        If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
        """
        return pulumi.get(self, "health_check_id")

    @health_check_id.setter
    def health_check_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_id", value)

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the hosted zone that you want to create records in.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="multiValueAnswer")
    def multi_value_answer(self) -> Optional[pulumi.Input[bool]]:
        """
        To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
        """
        return pulumi.get(self, "multi_value_answer")

    @multi_value_answer.setter
    def multi_value_answer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_value_answer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the record that you want to create, update, or delete.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon EC2 Region where you created the resource that this resource record set refers to.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceRecords")
    def resource_records(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more values that correspond with the value that you specified for the Type property.
        """
        return pulumi.get(self, "resource_records")

    @resource_records.setter
    def resource_records(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_records", value)

    @property
    @pulumi.getter(name="setIdentifier")
    def set_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
        """
        return pulumi.get(self, "set_identifier")

    @set_identifier.setter
    def set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_identifier", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        The resource record cache time to live (TTL), in seconds.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


class RecordSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_target: Optional[pulumi.Input[Union['RecordSetAliasTargetArgs', 'RecordSetAliasTargetArgsDict']]] = None,
                 cidr_routing_config: Optional[pulumi.Input[Union['RecordSetCidrRoutingConfigArgs', 'RecordSetCidrRoutingConfigArgsDict']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 failover: Optional[pulumi.Input['RecordSetFailover']] = None,
                 geo_location: Optional[pulumi.Input[Union['RecordSetGeoLocationArgs', 'RecordSetGeoLocationArgsDict']]] = None,
                 health_check_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_name: Optional[pulumi.Input[str]] = None,
                 multi_value_answer: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_records: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_identifier: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Route53::RecordSet.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RecordSetAliasTargetArgs', 'RecordSetAliasTargetArgsDict']] alias_target: Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
        :param pulumi.Input[Union['RecordSetCidrRoutingConfigArgs', 'RecordSetCidrRoutingConfigArgsDict']] cidr_routing_config: The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
        :param pulumi.Input[str] comment: Optional: Any comments you want to include about a change batch request.
        :param pulumi.Input['RecordSetFailover'] failover: To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
        :param pulumi.Input[Union['RecordSetGeoLocationArgs', 'RecordSetGeoLocationArgsDict']] geo_location: A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
        :param pulumi.Input[str] health_check_id: If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
        :param pulumi.Input[str] hosted_zone_id: The ID of the hosted zone that you want to create records in.
        :param pulumi.Input[str] hosted_zone_name: The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
        :param pulumi.Input[bool] multi_value_answer: To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
        :param pulumi.Input[str] name: The name of the record that you want to create, update, or delete.
        :param pulumi.Input[str] region: The Amazon EC2 Region where you created the resource that this resource record set refers to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_records: One or more values that correspond with the value that you specified for the Type property.
        :param pulumi.Input[str] set_identifier: An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
        :param pulumi.Input[str] ttl: The resource record cache time to live (TTL), in seconds.
        :param pulumi.Input[str] type: The DNS record type.
        :param pulumi.Input[int] weight: Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Route53::RecordSet.

        :param str resource_name: The name of the resource.
        :param RecordSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_target: Optional[pulumi.Input[Union['RecordSetAliasTargetArgs', 'RecordSetAliasTargetArgsDict']]] = None,
                 cidr_routing_config: Optional[pulumi.Input[Union['RecordSetCidrRoutingConfigArgs', 'RecordSetCidrRoutingConfigArgsDict']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 failover: Optional[pulumi.Input['RecordSetFailover']] = None,
                 geo_location: Optional[pulumi.Input[Union['RecordSetGeoLocationArgs', 'RecordSetGeoLocationArgsDict']]] = None,
                 health_check_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_name: Optional[pulumi.Input[str]] = None,
                 multi_value_answer: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_records: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_identifier: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordSetArgs.__new__(RecordSetArgs)

            __props__.__dict__["alias_target"] = alias_target
            __props__.__dict__["cidr_routing_config"] = cidr_routing_config
            __props__.__dict__["comment"] = comment
            __props__.__dict__["failover"] = failover
            __props__.__dict__["geo_location"] = geo_location
            __props__.__dict__["health_check_id"] = health_check_id
            __props__.__dict__["hosted_zone_id"] = hosted_zone_id
            __props__.__dict__["hosted_zone_name"] = hosted_zone_name
            __props__.__dict__["multi_value_answer"] = multi_value_answer
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_records"] = resource_records
            __props__.__dict__["set_identifier"] = set_identifier
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["weight"] = weight
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["hostedZoneId", "hostedZoneName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(RecordSet, __self__).__init__(
            'aws-native:route53:RecordSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RecordSet':
        """
        Get an existing RecordSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RecordSetArgs.__new__(RecordSetArgs)

        __props__.__dict__["alias_target"] = None
        __props__.__dict__["cidr_routing_config"] = None
        __props__.__dict__["comment"] = None
        __props__.__dict__["failover"] = None
        __props__.__dict__["geo_location"] = None
        __props__.__dict__["health_check_id"] = None
        __props__.__dict__["hosted_zone_id"] = None
        __props__.__dict__["hosted_zone_name"] = None
        __props__.__dict__["multi_value_answer"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["resource_records"] = None
        __props__.__dict__["set_identifier"] = None
        __props__.__dict__["ttl"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["weight"] = None
        return RecordSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aliasTarget")
    def alias_target(self) -> pulumi.Output[Optional['outputs.RecordSetAliasTarget']]:
        """
        Alias resource record sets only: Information about the AWS resource, such as a CloudFront distribution or an Amazon S3 bucket, that you want to route traffic to.
        """
        return pulumi.get(self, "alias_target")

    @property
    @pulumi.getter(name="cidrRoutingConfig")
    def cidr_routing_config(self) -> pulumi.Output[Optional['outputs.RecordSetCidrRoutingConfig']]:
        """
        The object that is specified in resource record set object when you are linking a resource record set to a CIDR location.
        """
        return pulumi.get(self, "cidr_routing_config")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Optional: Any comments you want to include about a change batch request.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def failover(self) -> pulumi.Output[Optional['RecordSetFailover']]:
        """
        To configure failover, you add the Failover element to two resource record sets. For one resource record set, you specify PRIMARY as the value for Failover; for the other resource record set, you specify SECONDARY. In addition, you include the HealthCheckId element and specify the health check that you want Amazon Route 53 to perform for each resource record set.
        """
        return pulumi.get(self, "failover")

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> pulumi.Output[Optional['outputs.RecordSetGeoLocation']]:
        """
        A complex type that lets you control how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.
        """
        return pulumi.get(self, "geo_location")

    @property
    @pulumi.getter(name="healthCheckId")
    def health_check_id(self) -> pulumi.Output[Optional[str]]:
        """
        If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a health check is healthy, include the HealthCheckId element and specify the ID of the applicable health check.
        """
        return pulumi.get(self, "health_check_id")

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the hosted zone that you want to create records in.
        """
        return pulumi.get(self, "hosted_zone_id")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the hosted zone that you want to create records in. You must include a trailing dot (for example, www.example.com.) as part of the HostedZoneName.
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="multiValueAnswer")
    def multi_value_answer(self) -> pulumi.Output[Optional[bool]]:
        """
        To route traffic approximately randomly to multiple resources, such as web servers, create one multivalue answer record for each resource and specify true for MultiValueAnswer.
        """
        return pulumi.get(self, "multi_value_answer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the record that you want to create, update, or delete.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The Amazon EC2 Region where you created the resource that this resource record set refers to.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceRecords")
    def resource_records(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        One or more values that correspond with the value that you specified for the Type property.
        """
        return pulumi.get(self, "resource_records")

    @property
    @pulumi.getter(name="setIdentifier")
    def set_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        An identifier that differentiates among multiple resource record sets that have the same combination of name and type.
        """
        return pulumi.get(self, "set_identifier")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[str]]:
        """
        The resource record cache time to live (TTL), in seconds.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The DNS record type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[int]]:
        """
        Among resource record sets that have the same combination of DNS name and type, a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries based on the ratio of a resource's weight to the total.
        """
        return pulumi.get(self, "weight")

