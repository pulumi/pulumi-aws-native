# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ConnectivityInfoPropertiesArgs',
    'ConnectivityInfoPropertiesArgsDict',
    'EnvironmentHostInfoForCreateArgs',
    'EnvironmentHostInfoForCreateArgsDict',
    'EnvironmentInitialVlanInfoArgs',
    'EnvironmentInitialVlanInfoArgsDict',
    'InitialVlansPropertiesArgs',
    'InitialVlansPropertiesArgsDict',
    'LicenseInfoPropertiesArgs',
    'LicenseInfoPropertiesArgsDict',
    'ServiceAccessSecurityGroupsPropertiesArgs',
    'ServiceAccessSecurityGroupsPropertiesArgsDict',
    'VcfHostnamesPropertiesArgs',
    'VcfHostnamesPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectivityInfoPropertiesArgsDict(TypedDict):
        private_route_server_peerings: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ConnectivityInfoPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectivityInfoPropertiesArgs:
    def __init__(__self__, *,
                 private_route_server_peerings: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "private_route_server_peerings", private_route_server_peerings)

    @property
    @pulumi.getter(name="privateRouteServerPeerings")
    def private_route_server_peerings(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "private_route_server_peerings")

    @private_route_server_peerings.setter
    def private_route_server_peerings(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "private_route_server_peerings", value)


if not MYPY:
    class EnvironmentHostInfoForCreateArgsDict(TypedDict):
        host_name: pulumi.Input[builtins.str]
        instance_type: pulumi.Input['EnvironmentHostInfoForCreateInstanceType']
        key_name: pulumi.Input[builtins.str]
        dedicated_host_id: NotRequired[pulumi.Input[builtins.str]]
        placement_group_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    EnvironmentHostInfoForCreateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentHostInfoForCreateArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[builtins.str],
                 instance_type: pulumi.Input['EnvironmentHostInfoForCreateInstanceType'],
                 key_name: pulumi.Input[builtins.str],
                 dedicated_host_id: Optional[pulumi.Input[builtins.str]] = None,
                 placement_group_id: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "key_name", key_name)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input['EnvironmentHostInfoForCreateInstanceType']:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input['EnvironmentHostInfoForCreateInstanceType']):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dedicated_host_id")

    @dedicated_host_id.setter
    def dedicated_host_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dedicated_host_id", value)

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "placement_group_id")

    @placement_group_id.setter
    def placement_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "placement_group_id", value)


if not MYPY:
    class EnvironmentInitialVlanInfoArgsDict(TypedDict):
        cidr: pulumi.Input[builtins.str]
elif False:
    EnvironmentInitialVlanInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentInitialVlanInfoArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cidr", value)


if not MYPY:
    class InitialVlansPropertiesArgsDict(TypedDict):
        """
        The initial Vlan configuration only required upon creation. Modification after creation will have no effect
        """
        edge_v_tep: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        expansion_vlan1: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        expansion_vlan2: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        hcx: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        nsx_up_link: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        v_motion: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        v_san: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        v_tep: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        vm_management: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
        vmk_management: pulumi.Input['EnvironmentInitialVlanInfoArgsDict']
elif False:
    InitialVlansPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InitialVlansPropertiesArgs:
    def __init__(__self__, *,
                 edge_v_tep: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 expansion_vlan1: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 expansion_vlan2: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 hcx: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 nsx_up_link: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 v_motion: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 v_san: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 v_tep: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 vm_management: pulumi.Input['EnvironmentInitialVlanInfoArgs'],
                 vmk_management: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        """
        The initial Vlan configuration only required upon creation. Modification after creation will have no effect
        """
        pulumi.set(__self__, "edge_v_tep", edge_v_tep)
        pulumi.set(__self__, "expansion_vlan1", expansion_vlan1)
        pulumi.set(__self__, "expansion_vlan2", expansion_vlan2)
        pulumi.set(__self__, "hcx", hcx)
        pulumi.set(__self__, "nsx_up_link", nsx_up_link)
        pulumi.set(__self__, "v_motion", v_motion)
        pulumi.set(__self__, "v_san", v_san)
        pulumi.set(__self__, "v_tep", v_tep)
        pulumi.set(__self__, "vm_management", vm_management)
        pulumi.set(__self__, "vmk_management", vmk_management)

    @property
    @pulumi.getter(name="edgeVTep")
    def edge_v_tep(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "edge_v_tep")

    @edge_v_tep.setter
    def edge_v_tep(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "edge_v_tep", value)

    @property
    @pulumi.getter(name="expansionVlan1")
    def expansion_vlan1(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "expansion_vlan1")

    @expansion_vlan1.setter
    def expansion_vlan1(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "expansion_vlan1", value)

    @property
    @pulumi.getter(name="expansionVlan2")
    def expansion_vlan2(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "expansion_vlan2")

    @expansion_vlan2.setter
    def expansion_vlan2(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "expansion_vlan2", value)

    @property
    @pulumi.getter
    def hcx(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "hcx")

    @hcx.setter
    def hcx(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "hcx", value)

    @property
    @pulumi.getter(name="nsxUpLink")
    def nsx_up_link(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "nsx_up_link")

    @nsx_up_link.setter
    def nsx_up_link(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "nsx_up_link", value)

    @property
    @pulumi.getter(name="vMotion")
    def v_motion(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "v_motion")

    @v_motion.setter
    def v_motion(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "v_motion", value)

    @property
    @pulumi.getter(name="vSan")
    def v_san(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "v_san")

    @v_san.setter
    def v_san(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "v_san", value)

    @property
    @pulumi.getter(name="vTep")
    def v_tep(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "v_tep")

    @v_tep.setter
    def v_tep(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "v_tep", value)

    @property
    @pulumi.getter(name="vmManagement")
    def vm_management(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "vm_management")

    @vm_management.setter
    def vm_management(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "vm_management", value)

    @property
    @pulumi.getter(name="vmkManagement")
    def vmk_management(self) -> pulumi.Input['EnvironmentInitialVlanInfoArgs']:
        return pulumi.get(self, "vmk_management")

    @vmk_management.setter
    def vmk_management(self, value: pulumi.Input['EnvironmentInitialVlanInfoArgs']):
        pulumi.set(self, "vmk_management", value)


if not MYPY:
    class LicenseInfoPropertiesArgsDict(TypedDict):
        """
        The license information for an EVS environment
        """
        solution_key: pulumi.Input[builtins.str]
        vsan_key: pulumi.Input[builtins.str]
elif False:
    LicenseInfoPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LicenseInfoPropertiesArgs:
    def __init__(__self__, *,
                 solution_key: pulumi.Input[builtins.str],
                 vsan_key: pulumi.Input[builtins.str]):
        """
        The license information for an EVS environment
        """
        pulumi.set(__self__, "solution_key", solution_key)
        pulumi.set(__self__, "vsan_key", vsan_key)

    @property
    @pulumi.getter(name="solutionKey")
    def solution_key(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "solution_key")

    @solution_key.setter
    def solution_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "solution_key", value)

    @property
    @pulumi.getter(name="vsanKey")
    def vsan_key(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "vsan_key")

    @vsan_key.setter
    def vsan_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vsan_key", value)


if not MYPY:
    class ServiceAccessSecurityGroupsPropertiesArgsDict(TypedDict):
        security_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    ServiceAccessSecurityGroupsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceAccessSecurityGroupsPropertiesArgs:
    def __init__(__self__, *,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_groups", value)


if not MYPY:
    class VcfHostnamesPropertiesArgsDict(TypedDict):
        cloud_builder: pulumi.Input[builtins.str]
        nsx: pulumi.Input[builtins.str]
        nsx_edge1: pulumi.Input[builtins.str]
        nsx_edge2: pulumi.Input[builtins.str]
        nsx_manager1: pulumi.Input[builtins.str]
        nsx_manager2: pulumi.Input[builtins.str]
        nsx_manager3: pulumi.Input[builtins.str]
        sddc_manager: pulumi.Input[builtins.str]
        v_center: pulumi.Input[builtins.str]
elif False:
    VcfHostnamesPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VcfHostnamesPropertiesArgs:
    def __init__(__self__, *,
                 cloud_builder: pulumi.Input[builtins.str],
                 nsx: pulumi.Input[builtins.str],
                 nsx_edge1: pulumi.Input[builtins.str],
                 nsx_edge2: pulumi.Input[builtins.str],
                 nsx_manager1: pulumi.Input[builtins.str],
                 nsx_manager2: pulumi.Input[builtins.str],
                 nsx_manager3: pulumi.Input[builtins.str],
                 sddc_manager: pulumi.Input[builtins.str],
                 v_center: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "cloud_builder", cloud_builder)
        pulumi.set(__self__, "nsx", nsx)
        pulumi.set(__self__, "nsx_edge1", nsx_edge1)
        pulumi.set(__self__, "nsx_edge2", nsx_edge2)
        pulumi.set(__self__, "nsx_manager1", nsx_manager1)
        pulumi.set(__self__, "nsx_manager2", nsx_manager2)
        pulumi.set(__self__, "nsx_manager3", nsx_manager3)
        pulumi.set(__self__, "sddc_manager", sddc_manager)
        pulumi.set(__self__, "v_center", v_center)

    @property
    @pulumi.getter(name="cloudBuilder")
    def cloud_builder(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "cloud_builder")

    @cloud_builder.setter
    def cloud_builder(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloud_builder", value)

    @property
    @pulumi.getter
    def nsx(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx")

    @nsx.setter
    def nsx(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx", value)

    @property
    @pulumi.getter(name="nsxEdge1")
    def nsx_edge1(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx_edge1")

    @nsx_edge1.setter
    def nsx_edge1(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx_edge1", value)

    @property
    @pulumi.getter(name="nsxEdge2")
    def nsx_edge2(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx_edge2")

    @nsx_edge2.setter
    def nsx_edge2(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx_edge2", value)

    @property
    @pulumi.getter(name="nsxManager1")
    def nsx_manager1(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx_manager1")

    @nsx_manager1.setter
    def nsx_manager1(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx_manager1", value)

    @property
    @pulumi.getter(name="nsxManager2")
    def nsx_manager2(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx_manager2")

    @nsx_manager2.setter
    def nsx_manager2(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx_manager2", value)

    @property
    @pulumi.getter(name="nsxManager3")
    def nsx_manager3(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "nsx_manager3")

    @nsx_manager3.setter
    def nsx_manager3(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "nsx_manager3", value)

    @property
    @pulumi.getter(name="sddcManager")
    def sddc_manager(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "sddc_manager")

    @sddc_manager.setter
    def sddc_manager(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sddc_manager", value)

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "v_center")

    @v_center.setter
    def v_center(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "v_center", value)


