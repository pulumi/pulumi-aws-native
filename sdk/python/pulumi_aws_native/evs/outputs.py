# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectivityInfoProperties',
    'EnvironmentCheck',
    'EnvironmentHostInfoForCreate',
    'EnvironmentInitialVlanInfo',
    'EnvironmentSecret',
    'InitialVlansProperties',
    'LicenseInfoProperties',
    'ServiceAccessSecurityGroupsProperties',
    'VcfHostnamesProperties',
]

@pulumi.output_type
class ConnectivityInfoProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateRouteServerPeerings":
            suggest = "private_route_server_peerings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectivityInfoProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectivityInfoProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectivityInfoProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_route_server_peerings: Sequence[builtins.str]):
        pulumi.set(__self__, "private_route_server_peerings", private_route_server_peerings)

    @property
    @pulumi.getter(name="privateRouteServerPeerings")
    def private_route_server_peerings(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "private_route_server_peerings")


@pulumi.output_type
class EnvironmentCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impairedSince":
            suggest = "impaired_since"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 result: 'EnvironmentCheckResult',
                 type: 'EnvironmentCheckType',
                 impaired_since: Optional[builtins.str] = None):
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "type", type)
        if impaired_since is not None:
            pulumi.set(__self__, "impaired_since", impaired_since)

    @property
    @pulumi.getter
    def result(self) -> 'EnvironmentCheckResult':
        return pulumi.get(self, "result")

    @property
    @pulumi.getter
    def type(self) -> 'EnvironmentCheckType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="impairedSince")
    def impaired_since(self) -> Optional[builtins.str]:
        return pulumi.get(self, "impaired_since")


@pulumi.output_type
class EnvironmentHostInfoForCreate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "dedicatedHostId":
            suggest = "dedicated_host_id"
        elif key == "placementGroupId":
            suggest = "placement_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentHostInfoForCreate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentHostInfoForCreate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentHostInfoForCreate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: builtins.str,
                 instance_type: 'EnvironmentHostInfoForCreateInstanceType',
                 key_name: builtins.str,
                 dedicated_host_id: Optional[builtins.str] = None,
                 placement_group_id: Optional[builtins.str] = None):
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "key_name", key_name)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> 'EnvironmentHostInfoForCreateInstanceType':
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> builtins.str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "dedicated_host_id")

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "placement_group_id")


@pulumi.output_type
class EnvironmentInitialVlanInfo(dict):
    def __init__(__self__, *,
                 cidr: builtins.str):
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> builtins.str:
        return pulumi.get(self, "cidr")


@pulumi.output_type
class EnvironmentSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretArn":
            suggest = "secret_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_arn: Optional[builtins.str] = None):
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "secret_arn")


@pulumi.output_type
class InitialVlansProperties(dict):
    """
    The initial Vlan configuration only required upon creation. Modification after creation will have no effect
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "edgeVTep":
            suggest = "edge_v_tep"
        elif key == "expansionVlan1":
            suggest = "expansion_vlan1"
        elif key == "expansionVlan2":
            suggest = "expansion_vlan2"
        elif key == "nsxUpLink":
            suggest = "nsx_up_link"
        elif key == "vMotion":
            suggest = "v_motion"
        elif key == "vSan":
            suggest = "v_san"
        elif key == "vTep":
            suggest = "v_tep"
        elif key == "vmManagement":
            suggest = "vm_management"
        elif key == "vmkManagement":
            suggest = "vmk_management"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InitialVlansProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InitialVlansProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InitialVlansProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 edge_v_tep: 'outputs.EnvironmentInitialVlanInfo',
                 expansion_vlan1: 'outputs.EnvironmentInitialVlanInfo',
                 expansion_vlan2: 'outputs.EnvironmentInitialVlanInfo',
                 hcx: 'outputs.EnvironmentInitialVlanInfo',
                 nsx_up_link: 'outputs.EnvironmentInitialVlanInfo',
                 v_motion: 'outputs.EnvironmentInitialVlanInfo',
                 v_san: 'outputs.EnvironmentInitialVlanInfo',
                 v_tep: 'outputs.EnvironmentInitialVlanInfo',
                 vm_management: 'outputs.EnvironmentInitialVlanInfo',
                 vmk_management: 'outputs.EnvironmentInitialVlanInfo'):
        """
        The initial Vlan configuration only required upon creation. Modification after creation will have no effect
        """
        pulumi.set(__self__, "edge_v_tep", edge_v_tep)
        pulumi.set(__self__, "expansion_vlan1", expansion_vlan1)
        pulumi.set(__self__, "expansion_vlan2", expansion_vlan2)
        pulumi.set(__self__, "hcx", hcx)
        pulumi.set(__self__, "nsx_up_link", nsx_up_link)
        pulumi.set(__self__, "v_motion", v_motion)
        pulumi.set(__self__, "v_san", v_san)
        pulumi.set(__self__, "v_tep", v_tep)
        pulumi.set(__self__, "vm_management", vm_management)
        pulumi.set(__self__, "vmk_management", vmk_management)

    @property
    @pulumi.getter(name="edgeVTep")
    def edge_v_tep(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "edge_v_tep")

    @property
    @pulumi.getter(name="expansionVlan1")
    def expansion_vlan1(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "expansion_vlan1")

    @property
    @pulumi.getter(name="expansionVlan2")
    def expansion_vlan2(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "expansion_vlan2")

    @property
    @pulumi.getter
    def hcx(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "hcx")

    @property
    @pulumi.getter(name="nsxUpLink")
    def nsx_up_link(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "nsx_up_link")

    @property
    @pulumi.getter(name="vMotion")
    def v_motion(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "v_motion")

    @property
    @pulumi.getter(name="vSan")
    def v_san(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "v_san")

    @property
    @pulumi.getter(name="vTep")
    def v_tep(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "v_tep")

    @property
    @pulumi.getter(name="vmManagement")
    def vm_management(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "vm_management")

    @property
    @pulumi.getter(name="vmkManagement")
    def vmk_management(self) -> 'outputs.EnvironmentInitialVlanInfo':
        return pulumi.get(self, "vmk_management")


@pulumi.output_type
class LicenseInfoProperties(dict):
    """
    The license information for an EVS environment
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "solutionKey":
            suggest = "solution_key"
        elif key == "vsanKey":
            suggest = "vsan_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseInfoProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseInfoProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseInfoProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 solution_key: builtins.str,
                 vsan_key: builtins.str):
        """
        The license information for an EVS environment
        """
        pulumi.set(__self__, "solution_key", solution_key)
        pulumi.set(__self__, "vsan_key", vsan_key)

    @property
    @pulumi.getter(name="solutionKey")
    def solution_key(self) -> builtins.str:
        return pulumi.get(self, "solution_key")

    @property
    @pulumi.getter(name="vsanKey")
    def vsan_key(self) -> builtins.str:
        return pulumi.get(self, "vsan_key")


@pulumi.output_type
class ServiceAccessSecurityGroupsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroups":
            suggest = "security_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAccessSecurityGroupsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAccessSecurityGroupsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAccessSecurityGroupsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_groups: Optional[Sequence[builtins.str]] = None):
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "security_groups")


@pulumi.output_type
class VcfHostnamesProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudBuilder":
            suggest = "cloud_builder"
        elif key == "nsxEdge1":
            suggest = "nsx_edge1"
        elif key == "nsxEdge2":
            suggest = "nsx_edge2"
        elif key == "nsxManager1":
            suggest = "nsx_manager1"
        elif key == "nsxManager2":
            suggest = "nsx_manager2"
        elif key == "nsxManager3":
            suggest = "nsx_manager3"
        elif key == "sddcManager":
            suggest = "sddc_manager"
        elif key == "vCenter":
            suggest = "v_center"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VcfHostnamesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VcfHostnamesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VcfHostnamesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_builder: builtins.str,
                 nsx: builtins.str,
                 nsx_edge1: builtins.str,
                 nsx_edge2: builtins.str,
                 nsx_manager1: builtins.str,
                 nsx_manager2: builtins.str,
                 nsx_manager3: builtins.str,
                 sddc_manager: builtins.str,
                 v_center: builtins.str):
        pulumi.set(__self__, "cloud_builder", cloud_builder)
        pulumi.set(__self__, "nsx", nsx)
        pulumi.set(__self__, "nsx_edge1", nsx_edge1)
        pulumi.set(__self__, "nsx_edge2", nsx_edge2)
        pulumi.set(__self__, "nsx_manager1", nsx_manager1)
        pulumi.set(__self__, "nsx_manager2", nsx_manager2)
        pulumi.set(__self__, "nsx_manager3", nsx_manager3)
        pulumi.set(__self__, "sddc_manager", sddc_manager)
        pulumi.set(__self__, "v_center", v_center)

    @property
    @pulumi.getter(name="cloudBuilder")
    def cloud_builder(self) -> builtins.str:
        return pulumi.get(self, "cloud_builder")

    @property
    @pulumi.getter
    def nsx(self) -> builtins.str:
        return pulumi.get(self, "nsx")

    @property
    @pulumi.getter(name="nsxEdge1")
    def nsx_edge1(self) -> builtins.str:
        return pulumi.get(self, "nsx_edge1")

    @property
    @pulumi.getter(name="nsxEdge2")
    def nsx_edge2(self) -> builtins.str:
        return pulumi.get(self, "nsx_edge2")

    @property
    @pulumi.getter(name="nsxManager1")
    def nsx_manager1(self) -> builtins.str:
        return pulumi.get(self, "nsx_manager1")

    @property
    @pulumi.getter(name="nsxManager2")
    def nsx_manager2(self) -> builtins.str:
        return pulumi.get(self, "nsx_manager2")

    @property
    @pulumi.getter(name="nsxManager3")
    def nsx_manager3(self) -> builtins.str:
        return pulumi.get(self, "nsx_manager3")

    @property
    @pulumi.getter(name="sddcManager")
    def sddc_manager(self) -> builtins.str:
        return pulumi.get(self, "sddc_manager")

    @property
    @pulumi.getter(name="vCenter")
    def v_center(self) -> builtins.str:
        return pulumi.get(self, "v_center")


