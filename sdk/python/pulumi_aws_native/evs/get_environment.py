# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetEnvironmentResult',
    'AwaitableGetEnvironmentResult',
    'get_environment',
    'get_environment_output',
]

@pulumi.output_type
class GetEnvironmentResult:
    def __init__(__self__, checks=None, created_at=None, credentials=None, environment_arn=None, environment_id=None, environment_state=None, modified_at=None, state_details=None, tags=None):
        if checks and not isinstance(checks, list):
            raise TypeError("Expected argument 'checks' to be a list")
        pulumi.set(__self__, "checks", checks)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if credentials and not isinstance(credentials, list):
            raise TypeError("Expected argument 'credentials' to be a list")
        pulumi.set(__self__, "credentials", credentials)
        if environment_arn and not isinstance(environment_arn, str):
            raise TypeError("Expected argument 'environment_arn' to be a str")
        pulumi.set(__self__, "environment_arn", environment_arn)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if environment_state and not isinstance(environment_state, str):
            raise TypeError("Expected argument 'environment_state' to be a str")
        pulumi.set(__self__, "environment_state", environment_state)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if state_details and not isinstance(state_details, str):
            raise TypeError("Expected argument 'state_details' to be a str")
        pulumi.set(__self__, "state_details", state_details)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def checks(self) -> Optional[Sequence['outputs.EnvironmentCheck']]:
        return pulumi.get(self, "checks")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.EnvironmentSecret']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="environmentArn")
    def environment_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "environment_arn")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="environmentState")
    def environment_state(self) -> Optional['EnvironmentState']:
        return pulumi.get(self, "environment_state")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter(name="stateDetails")
    def state_details(self) -> Optional[builtins.str]:
        return pulumi.get(self, "state_details")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetEnvironmentResult(GetEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentResult(
            checks=self.checks,
            created_at=self.created_at,
            credentials=self.credentials,
            environment_arn=self.environment_arn,
            environment_id=self.environment_id,
            environment_state=self.environment_state,
            modified_at=self.modified_at,
            state_details=self.state_details,
            tags=self.tags)


def get_environment(environment_id: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentResult:
    """
    An environment created within the EVS service
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:evs:getEnvironment', __args__, opts=opts, typ=GetEnvironmentResult).value

    return AwaitableGetEnvironmentResult(
        checks=pulumi.get(__ret__, 'checks'),
        created_at=pulumi.get(__ret__, 'created_at'),
        credentials=pulumi.get(__ret__, 'credentials'),
        environment_arn=pulumi.get(__ret__, 'environment_arn'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        environment_state=pulumi.get(__ret__, 'environment_state'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        state_details=pulumi.get(__ret__, 'state_details'),
        tags=pulumi.get(__ret__, 'tags'))
def get_environment_output(environment_id: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnvironmentResult]:
    """
    An environment created within the EVS service
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:evs:getEnvironment', __args__, opts=opts, typ=GetEnvironmentResult)
    return __ret__.apply(lambda __response__: GetEnvironmentResult(
        checks=pulumi.get(__response__, 'checks'),
        created_at=pulumi.get(__response__, 'created_at'),
        credentials=pulumi.get(__response__, 'credentials'),
        environment_arn=pulumi.get(__response__, 'environment_arn'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        environment_state=pulumi.get(__response__, 'environment_state'),
        modified_at=pulumi.get(__response__, 'modified_at'),
        state_details=pulumi.get(__response__, 'state_details'),
        tags=pulumi.get(__response__, 'tags')))
