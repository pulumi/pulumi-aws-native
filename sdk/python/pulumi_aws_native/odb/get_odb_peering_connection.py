# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetOdbPeeringConnectionResult',
    'AwaitableGetOdbPeeringConnectionResult',
    'get_odb_peering_connection',
    'get_odb_peering_connection_output',
]

@pulumi.output_type
class GetOdbPeeringConnectionResult:
    def __init__(__self__, odb_network_arn=None, odb_peering_connection_arn=None, odb_peering_connection_id=None, peer_network_arn=None, tags=None):
        if odb_network_arn and not isinstance(odb_network_arn, str):
            raise TypeError("Expected argument 'odb_network_arn' to be a str")
        pulumi.set(__self__, "odb_network_arn", odb_network_arn)
        if odb_peering_connection_arn and not isinstance(odb_peering_connection_arn, str):
            raise TypeError("Expected argument 'odb_peering_connection_arn' to be a str")
        pulumi.set(__self__, "odb_peering_connection_arn", odb_peering_connection_arn)
        if odb_peering_connection_id and not isinstance(odb_peering_connection_id, str):
            raise TypeError("Expected argument 'odb_peering_connection_id' to be a str")
        pulumi.set(__self__, "odb_peering_connection_id", odb_peering_connection_id)
        if peer_network_arn and not isinstance(peer_network_arn, str):
            raise TypeError("Expected argument 'peer_network_arn' to be a str")
        pulumi.set(__self__, "peer_network_arn", peer_network_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="odbNetworkArn")
    def odb_network_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ODB network.
        """
        return pulumi.get(self, "odb_network_arn")

    @property
    @pulumi.getter(name="odbPeeringConnectionArn")
    def odb_peering_connection_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ODB peering connection.
        """
        return pulumi.get(self, "odb_peering_connection_arn")

    @property
    @pulumi.getter(name="odbPeeringConnectionId")
    def odb_peering_connection_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the ODB peering connection.
        """
        return pulumi.get(self, "odb_peering_connection_id")

    @property
    @pulumi.getter(name="peerNetworkArn")
    def peer_network_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the peer network.
        """
        return pulumi.get(self, "peer_network_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        Tags to assign to the Odb peering connection.
        """
        return pulumi.get(self, "tags")


class AwaitableGetOdbPeeringConnectionResult(GetOdbPeeringConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOdbPeeringConnectionResult(
            odb_network_arn=self.odb_network_arn,
            odb_peering_connection_arn=self.odb_peering_connection_arn,
            odb_peering_connection_id=self.odb_peering_connection_id,
            peer_network_arn=self.peer_network_arn,
            tags=self.tags)


def get_odb_peering_connection(odb_peering_connection_arn: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOdbPeeringConnectionResult:
    """
    Resource Type definition for AWS::ODB::OdbPeeringConnection.


    :param builtins.str odb_peering_connection_arn: The Amazon Resource Name (ARN) of the ODB peering connection.
    """
    __args__ = dict()
    __args__['odbPeeringConnectionArn'] = odb_peering_connection_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:odb:getOdbPeeringConnection', __args__, opts=opts, typ=GetOdbPeeringConnectionResult).value

    return AwaitableGetOdbPeeringConnectionResult(
        odb_network_arn=pulumi.get(__ret__, 'odb_network_arn'),
        odb_peering_connection_arn=pulumi.get(__ret__, 'odb_peering_connection_arn'),
        odb_peering_connection_id=pulumi.get(__ret__, 'odb_peering_connection_id'),
        peer_network_arn=pulumi.get(__ret__, 'peer_network_arn'),
        tags=pulumi.get(__ret__, 'tags'))
def get_odb_peering_connection_output(odb_peering_connection_arn: Optional[pulumi.Input[builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOdbPeeringConnectionResult]:
    """
    Resource Type definition for AWS::ODB::OdbPeeringConnection.


    :param builtins.str odb_peering_connection_arn: The Amazon Resource Name (ARN) of the ODB peering connection.
    """
    __args__ = dict()
    __args__['odbPeeringConnectionArn'] = odb_peering_connection_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:odb:getOdbPeeringConnection', __args__, opts=opts, typ=GetOdbPeeringConnectionResult)
    return __ret__.apply(lambda __response__: GetOdbPeeringConnectionResult(
        odb_network_arn=pulumi.get(__response__, 'odb_network_arn'),
        odb_peering_connection_arn=pulumi.get(__response__, 'odb_peering_connection_arn'),
        odb_peering_connection_id=pulumi.get(__response__, 'odb_peering_connection_id'),
        peer_network_arn=pulumi.get(__response__, 'peer_network_arn'),
        tags=pulumi.get(__response__, 'tags')))
