# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['CloudAutonomousVmClusterArgs', 'CloudAutonomousVmCluster']

@pulumi.input_type
class CloudAutonomousVmClusterArgs:
    def __init__(__self__, *,
                 autonomous_data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count_per_node: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 is_mtls_enabled_vm_cluster: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudAutonomousVmClusterLicenseModel']] = None,
                 maintenance_window: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowArgs']] = None,
                 memory_per_oracle_compute_unit_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_non_tls: Optional[pulumi.Input[builtins.int]] = None,
                 scan_listener_port_tls: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 total_container_databases: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a CloudAutonomousVmCluster resource.
        :param pulumi.Input[builtins.float] autonomous_data_storage_size_in_tbs: The data storage size allocated for Autonomous Databases in the Autonomous VM cluster, in TB.
        :param pulumi.Input[builtins.str] cloud_exadata_infrastructure_id: The unique identifier of the Cloud Exadata Infrastructure containing this Autonomous VM cluster.
        :param pulumi.Input[builtins.int] cpu_core_count_per_node: The number of CPU cores enabled per node in the Autonomous VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] db_servers: The list of database servers associated with the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] description: The user-provided description of the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] display_name: The display name of the Autonomous VM cluster.
        :param pulumi.Input[builtins.bool] is_mtls_enabled_vm_cluster: Indicates whether mutual TLS (mTLS) authentication is enabled for the Autonomous VM cluster.
        :param pulumi.Input['CloudAutonomousVmClusterLicenseModel'] license_model: The Oracle license model that applies to the Autonomous VM cluster. Valid values are LICENSE_INCLUDED or BRING_YOUR_OWN_LICENSE.
        :param pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowArgs'] maintenance_window: The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param pulumi.Input[builtins.int] memory_per_oracle_compute_unit_in_gbs: The amount of memory allocated per Oracle Compute Unit, in GB.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network associated with this Autonomous VM cluster.
        :param pulumi.Input[builtins.int] scan_listener_port_non_tls: The SCAN listener port for non-TLS (TCP) protocol. The default is 1521.
        :param pulumi.Input[builtins.int] scan_listener_port_tls: The SCAN listener port for TLS (TCP) protocol. The default is 2484.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: The tags associated with the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] time_zone: The time zone of the Autonomous VM cluster.
        :param pulumi.Input[builtins.int] total_container_databases: The total number of Autonomous Container Databases that can be created with the allocated local storage.
        """
        if autonomous_data_storage_size_in_tbs is not None:
            pulumi.set(__self__, "autonomous_data_storage_size_in_tbs", autonomous_data_storage_size_in_tbs)
        if cloud_exadata_infrastructure_id is not None:
            pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        if cpu_core_count_per_node is not None:
            pulumi.set(__self__, "cpu_core_count_per_node", cpu_core_count_per_node)
        if db_servers is not None:
            pulumi.set(__self__, "db_servers", db_servers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_mtls_enabled_vm_cluster is not None:
            pulumi.set(__self__, "is_mtls_enabled_vm_cluster", is_mtls_enabled_vm_cluster)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if memory_per_oracle_compute_unit_in_gbs is not None:
            pulumi.set(__self__, "memory_per_oracle_compute_unit_in_gbs", memory_per_oracle_compute_unit_in_gbs)
        if odb_network_id is not None:
            pulumi.set(__self__, "odb_network_id", odb_network_id)
        if scan_listener_port_non_tls is not None:
            pulumi.set(__self__, "scan_listener_port_non_tls", scan_listener_port_non_tls)
        if scan_listener_port_tls is not None:
            pulumi.set(__self__, "scan_listener_port_tls", scan_listener_port_tls)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if total_container_databases is not None:
            pulumi.set(__self__, "total_container_databases", total_container_databases)

    @property
    @pulumi.getter(name="autonomousDataStorageSizeInTbs")
    def autonomous_data_storage_size_in_tbs(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The data storage size allocated for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "autonomous_data_storage_size_in_tbs")

    @autonomous_data_storage_size_in_tbs.setter
    def autonomous_data_storage_size_in_tbs(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "autonomous_data_storage_size_in_tbs", value)

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the Cloud Exadata Infrastructure containing this Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @cloud_exadata_infrastructure_id.setter
    def cloud_exadata_infrastructure_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cloud_exadata_infrastructure_id", value)

    @property
    @pulumi.getter(name="cpuCoreCountPerNode")
    def cpu_core_count_per_node(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of CPU cores enabled per node in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count_per_node")

    @cpu_core_count_per_node.setter
    def cpu_core_count_per_node(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu_core_count_per_node", value)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of database servers associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "db_servers")

    @db_servers.setter
    def db_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "db_servers", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user-provided description of the Autonomous VM cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The display name of the Autonomous VM cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="isMtlsEnabledVmCluster")
    def is_mtls_enabled_vm_cluster(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether mutual TLS (mTLS) authentication is enabled for the Autonomous VM cluster.
        """
        return pulumi.get(self, "is_mtls_enabled_vm_cluster")

    @is_mtls_enabled_vm_cluster.setter
    def is_mtls_enabled_vm_cluster(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_mtls_enabled_vm_cluster", value)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[pulumi.Input['CloudAutonomousVmClusterLicenseModel']]:
        """
        The Oracle license model that applies to the Autonomous VM cluster. Valid values are LICENSE_INCLUDED or BRING_YOUR_OWN_LICENSE.
        """
        return pulumi.get(self, "license_model")

    @license_model.setter
    def license_model(self, value: Optional[pulumi.Input['CloudAutonomousVmClusterLicenseModel']]):
        pulumi.set(self, "license_model", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowArgs']]:
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitInGbs")
    def memory_per_oracle_compute_unit_in_gbs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of memory allocated per Oracle Compute Unit, in GB.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_in_gbs")

    @memory_per_oracle_compute_unit_in_gbs.setter
    def memory_per_oracle_compute_unit_in_gbs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory_per_oracle_compute_unit_in_gbs", value)

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the ODB network associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "odb_network_id")

    @odb_network_id.setter
    def odb_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "odb_network_id", value)

    @property
    @pulumi.getter(name="scanListenerPortNonTls")
    def scan_listener_port_non_tls(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The SCAN listener port for non-TLS (TCP) protocol. The default is 1521.
        """
        return pulumi.get(self, "scan_listener_port_non_tls")

    @scan_listener_port_non_tls.setter
    def scan_listener_port_non_tls(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scan_listener_port_non_tls", value)

    @property
    @pulumi.getter(name="scanListenerPortTls")
    def scan_listener_port_tls(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The SCAN listener port for TLS (TCP) protocol. The default is 2484.
        """
        return pulumi.get(self, "scan_listener_port_tls")

    @scan_listener_port_tls.setter
    def scan_listener_port_tls(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scan_listener_port_tls", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        The tags associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone of the Autonomous VM cluster.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="totalContainerDatabases")
    def total_container_databases(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The total number of Autonomous Container Databases that can be created with the allocated local storage.
        """
        return pulumi.get(self, "total_container_databases")

    @total_container_databases.setter
    def total_container_databases(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "total_container_databases", value)


@pulumi.type_token("aws-native:odb:CloudAutonomousVmCluster")
class CloudAutonomousVmCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autonomous_data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count_per_node: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 is_mtls_enabled_vm_cluster: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudAutonomousVmClusterLicenseModel']] = None,
                 maintenance_window: Optional[pulumi.Input[Union['CloudAutonomousVmClusterMaintenanceWindowArgs', 'CloudAutonomousVmClusterMaintenanceWindowArgsDict']]] = None,
                 memory_per_oracle_compute_unit_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_non_tls: Optional[pulumi.Input[builtins.int]] = None,
                 scan_listener_port_tls: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 total_container_databases: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        The AWS::ODB::CloudAutonomousVmCluster resource creates a Cloud Autonomous VM Cluster

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.float] autonomous_data_storage_size_in_tbs: The data storage size allocated for Autonomous Databases in the Autonomous VM cluster, in TB.
        :param pulumi.Input[builtins.str] cloud_exadata_infrastructure_id: The unique identifier of the Cloud Exadata Infrastructure containing this Autonomous VM cluster.
        :param pulumi.Input[builtins.int] cpu_core_count_per_node: The number of CPU cores enabled per node in the Autonomous VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] db_servers: The list of database servers associated with the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] description: The user-provided description of the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] display_name: The display name of the Autonomous VM cluster.
        :param pulumi.Input[builtins.bool] is_mtls_enabled_vm_cluster: Indicates whether mutual TLS (mTLS) authentication is enabled for the Autonomous VM cluster.
        :param pulumi.Input['CloudAutonomousVmClusterLicenseModel'] license_model: The Oracle license model that applies to the Autonomous VM cluster. Valid values are LICENSE_INCLUDED or BRING_YOUR_OWN_LICENSE.
        :param pulumi.Input[Union['CloudAutonomousVmClusterMaintenanceWindowArgs', 'CloudAutonomousVmClusterMaintenanceWindowArgsDict']] maintenance_window: The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param pulumi.Input[builtins.int] memory_per_oracle_compute_unit_in_gbs: The amount of memory allocated per Oracle Compute Unit, in GB.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network associated with this Autonomous VM cluster.
        :param pulumi.Input[builtins.int] scan_listener_port_non_tls: The SCAN listener port for non-TLS (TCP) protocol. The default is 1521.
        :param pulumi.Input[builtins.int] scan_listener_port_tls: The SCAN listener port for TLS (TCP) protocol. The default is 2484.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: The tags associated with the Autonomous VM cluster.
        :param pulumi.Input[builtins.str] time_zone: The time zone of the Autonomous VM cluster.
        :param pulumi.Input[builtins.int] total_container_databases: The total number of Autonomous Container Databases that can be created with the allocated local storage.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudAutonomousVmClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::ODB::CloudAutonomousVmCluster resource creates a Cloud Autonomous VM Cluster

        :param str resource_name: The name of the resource.
        :param CloudAutonomousVmClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudAutonomousVmClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 autonomous_data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count_per_node: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 is_mtls_enabled_vm_cluster: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudAutonomousVmClusterLicenseModel']] = None,
                 maintenance_window: Optional[pulumi.Input[Union['CloudAutonomousVmClusterMaintenanceWindowArgs', 'CloudAutonomousVmClusterMaintenanceWindowArgsDict']]] = None,
                 memory_per_oracle_compute_unit_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_non_tls: Optional[pulumi.Input[builtins.int]] = None,
                 scan_listener_port_tls: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 total_container_databases: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudAutonomousVmClusterArgs.__new__(CloudAutonomousVmClusterArgs)

            __props__.__dict__["autonomous_data_storage_size_in_tbs"] = autonomous_data_storage_size_in_tbs
            __props__.__dict__["cloud_exadata_infrastructure_id"] = cloud_exadata_infrastructure_id
            __props__.__dict__["cpu_core_count_per_node"] = cpu_core_count_per_node
            __props__.__dict__["db_servers"] = db_servers
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["is_mtls_enabled_vm_cluster"] = is_mtls_enabled_vm_cluster
            __props__.__dict__["license_model"] = license_model
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["memory_per_oracle_compute_unit_in_gbs"] = memory_per_oracle_compute_unit_in_gbs
            __props__.__dict__["odb_network_id"] = odb_network_id
            __props__.__dict__["scan_listener_port_non_tls"] = scan_listener_port_non_tls
            __props__.__dict__["scan_listener_port_tls"] = scan_listener_port_tls
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["total_container_databases"] = total_container_databases
            __props__.__dict__["autonomous_data_storage_percentage"] = None
            __props__.__dict__["available_autonomous_data_storage_size_in_tbs"] = None
            __props__.__dict__["available_container_databases"] = None
            __props__.__dict__["available_cpus"] = None
            __props__.__dict__["cloud_autonomous_vm_cluster_arn"] = None
            __props__.__dict__["cloud_autonomous_vm_cluster_id"] = None
            __props__.__dict__["compute_model"] = None
            __props__.__dict__["cpu_core_count"] = None
            __props__.__dict__["cpu_percentage"] = None
            __props__.__dict__["data_storage_size_in_gbs"] = None
            __props__.__dict__["data_storage_size_in_tbs"] = None
            __props__.__dict__["db_node_storage_size_in_gbs"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["exadata_storage_in_tbs_lowest_scaled_value"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["max_acds_lowest_scaled_value"] = None
            __props__.__dict__["memory_size_in_gbs"] = None
            __props__.__dict__["node_count"] = None
            __props__.__dict__["non_provisionable_autonomous_container_databases"] = None
            __props__.__dict__["oci_resource_anchor_name"] = None
            __props__.__dict__["oci_url"] = None
            __props__.__dict__["ocid"] = None
            __props__.__dict__["provisionable_autonomous_container_databases"] = None
            __props__.__dict__["provisioned_autonomous_container_databases"] = None
            __props__.__dict__["provisioned_cpus"] = None
            __props__.__dict__["reclaimable_cpus"] = None
            __props__.__dict__["reserved_cpus"] = None
            __props__.__dict__["shape"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["autonomousDataStorageSizeInTbs", "cloudExadataInfrastructureId", "cpuCoreCountPerNode", "dbServers[*]", "description", "displayName", "isMtlsEnabledVmCluster", "licenseModel", "maintenanceWindow", "memoryPerOracleComputeUnitInGbs", "odbNetworkId", "scanListenerPortNonTls", "scanListenerPortTls", "timeZone", "totalContainerDatabases"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CloudAutonomousVmCluster, __self__).__init__(
            'aws-native:odb:CloudAutonomousVmCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CloudAutonomousVmCluster':
        """
        Get an existing CloudAutonomousVmCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CloudAutonomousVmClusterArgs.__new__(CloudAutonomousVmClusterArgs)

        __props__.__dict__["autonomous_data_storage_percentage"] = None
        __props__.__dict__["autonomous_data_storage_size_in_tbs"] = None
        __props__.__dict__["available_autonomous_data_storage_size_in_tbs"] = None
        __props__.__dict__["available_container_databases"] = None
        __props__.__dict__["available_cpus"] = None
        __props__.__dict__["cloud_autonomous_vm_cluster_arn"] = None
        __props__.__dict__["cloud_autonomous_vm_cluster_id"] = None
        __props__.__dict__["cloud_exadata_infrastructure_id"] = None
        __props__.__dict__["compute_model"] = None
        __props__.__dict__["cpu_core_count"] = None
        __props__.__dict__["cpu_core_count_per_node"] = None
        __props__.__dict__["cpu_percentage"] = None
        __props__.__dict__["data_storage_size_in_gbs"] = None
        __props__.__dict__["data_storage_size_in_tbs"] = None
        __props__.__dict__["db_node_storage_size_in_gbs"] = None
        __props__.__dict__["db_servers"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["domain"] = None
        __props__.__dict__["exadata_storage_in_tbs_lowest_scaled_value"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["is_mtls_enabled_vm_cluster"] = None
        __props__.__dict__["license_model"] = None
        __props__.__dict__["maintenance_window"] = None
        __props__.__dict__["max_acds_lowest_scaled_value"] = None
        __props__.__dict__["memory_per_oracle_compute_unit_in_gbs"] = None
        __props__.__dict__["memory_size_in_gbs"] = None
        __props__.__dict__["node_count"] = None
        __props__.__dict__["non_provisionable_autonomous_container_databases"] = None
        __props__.__dict__["oci_resource_anchor_name"] = None
        __props__.__dict__["oci_url"] = None
        __props__.__dict__["ocid"] = None
        __props__.__dict__["odb_network_id"] = None
        __props__.__dict__["provisionable_autonomous_container_databases"] = None
        __props__.__dict__["provisioned_autonomous_container_databases"] = None
        __props__.__dict__["provisioned_cpus"] = None
        __props__.__dict__["reclaimable_cpus"] = None
        __props__.__dict__["reserved_cpus"] = None
        __props__.__dict__["scan_listener_port_non_tls"] = None
        __props__.__dict__["scan_listener_port_tls"] = None
        __props__.__dict__["shape"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["time_zone"] = None
        __props__.__dict__["total_container_databases"] = None
        return CloudAutonomousVmCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autonomousDataStoragePercentage")
    def autonomous_data_storage_percentage(self) -> pulumi.Output[builtins.float]:
        """
        The percentage of data storage currently in use for Autonomous Databases in the Autonomous VM cluster.
        """
        return pulumi.get(self, "autonomous_data_storage_percentage")

    @property
    @pulumi.getter(name="autonomousDataStorageSizeInTbs")
    def autonomous_data_storage_size_in_tbs(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        The data storage size allocated for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "autonomous_data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="availableAutonomousDataStorageSizeInTbs")
    def available_autonomous_data_storage_size_in_tbs(self) -> pulumi.Output[builtins.float]:
        """
        The available data storage space for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "available_autonomous_data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="availableContainerDatabases")
    def available_container_databases(self) -> pulumi.Output[builtins.int]:
        """
        The number of Autonomous CDBs that you can create with the currently available storage.
        """
        return pulumi.get(self, "available_container_databases")

    @property
    @pulumi.getter(name="availableCpus")
    def available_cpus(self) -> pulumi.Output[builtins.float]:
        """
        The number of CPU cores available for allocation to Autonomous Databases.
        """
        return pulumi.get(self, "available_cpus")

    @property
    @pulumi.getter(name="cloudAutonomousVmClusterArn")
    def cloud_autonomous_vm_cluster_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) for the Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_autonomous_vm_cluster_arn")

    @property
    @pulumi.getter(name="cloudAutonomousVmClusterId")
    def cloud_autonomous_vm_cluster_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_autonomous_vm_cluster_id")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the Cloud Exadata Infrastructure containing this Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> pulumi.Output['CloudAutonomousVmClusterComputeModel']:
        """
        The compute model of the Autonomous VM cluster: ECPU or OCPU.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> pulumi.Output[builtins.int]:
        """
        The total number of CPU cores in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="cpuCoreCountPerNode")
    def cpu_core_count_per_node(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of CPU cores enabled per node in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count_per_node")

    @property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> pulumi.Output[builtins.float]:
        """
        The percentage of total CPU cores currently in use in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_percentage")

    @property
    @pulumi.getter(name="dataStorageSizeInGbs")
    def data_storage_size_in_gbs(self) -> pulumi.Output[builtins.float]:
        """
        The total data storage allocated to the Autonomous VM cluster, in GB.
        """
        return pulumi.get(self, "data_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> pulumi.Output[builtins.float]:
        """
        The total data storage allocated to the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The local node storage allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The list of database servers associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The user-provided description of the Autonomous VM cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The display name of the Autonomous VM cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[builtins.str]:
        """
        The domain name for the Autonomous VM cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="exadataStorageInTbsLowestScaledValue")
    def exadata_storage_in_tbs_lowest_scaled_value(self) -> pulumi.Output[builtins.float]:
        """
        The minimum value to which you can scale down the Exadata storage, in TB.
        """
        return pulumi.get(self, "exadata_storage_in_tbs_lowest_scaled_value")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[builtins.str]:
        """
        The hostname for the Autonomous VM cluster.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="isMtlsEnabledVmCluster")
    def is_mtls_enabled_vm_cluster(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether mutual TLS (mTLS) authentication is enabled for the Autonomous VM cluster.
        """
        return pulumi.get(self, "is_mtls_enabled_vm_cluster")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> pulumi.Output[Optional['CloudAutonomousVmClusterLicenseModel']]:
        """
        The Oracle license model that applies to the Autonomous VM cluster. Valid values are LICENSE_INCLUDED or BRING_YOUR_OWN_LICENSE.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output[Optional['outputs.CloudAutonomousVmClusterMaintenanceWindow']]:
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="maxAcdsLowestScaledValue")
    def max_acds_lowest_scaled_value(self) -> pulumi.Output[builtins.int]:
        """
        The minimum value to which you can scale down the maximum number of Autonomous CDBs.
        """
        return pulumi.get(self, "max_acds_lowest_scaled_value")

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitInGbs")
    def memory_per_oracle_compute_unit_in_gbs(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The amount of memory allocated per Oracle Compute Unit, in GB.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_in_gbs")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The total amount of memory allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[builtins.int]:
        """
        The number of database server nodes in the Autonomous VM cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nonProvisionableAutonomousContainerDatabases")
    def non_provisionable_autonomous_container_databases(self) -> pulumi.Output[builtins.int]:
        """
        The number of Autonomous CDBs that can't be provisioned because of resource constraints.
        """
        return pulumi.get(self, "non_provisionable_autonomous_container_databases")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the OCI resource anchor associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> pulumi.Output[builtins.str]:
        """
        The URL for accessing the OCI console page for this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> pulumi.Output[builtins.str]:
        """
        The Oracle Cloud Identifier (OCID) of the Autonomous VM cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the ODB network associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "odb_network_id")

    @property
    @pulumi.getter(name="provisionableAutonomousContainerDatabases")
    def provisionable_autonomous_container_databases(self) -> pulumi.Output[builtins.int]:
        """
        The number of Autonomous CDBs that can be provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisionable_autonomous_container_databases")

    @property
    @pulumi.getter(name="provisionedAutonomousContainerDatabases")
    def provisioned_autonomous_container_databases(self) -> pulumi.Output[builtins.int]:
        """
        The number of Autonomous CDBs currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_autonomous_container_databases")

    @property
    @pulumi.getter(name="provisionedCpus")
    def provisioned_cpus(self) -> pulumi.Output[builtins.float]:
        """
        The number of CPU cores currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_cpus")

    @property
    @pulumi.getter(name="reclaimableCpus")
    def reclaimable_cpus(self) -> pulumi.Output[builtins.float]:
        """
        The number of CPU cores that can be reclaimed from terminated or scaled-down Autonomous Databases.
        """
        return pulumi.get(self, "reclaimable_cpus")

    @property
    @pulumi.getter(name="reservedCpus")
    def reserved_cpus(self) -> pulumi.Output[builtins.float]:
        """
        The number of CPU cores reserved for system operations and redundancy.
        """
        return pulumi.get(self, "reserved_cpus")

    @property
    @pulumi.getter(name="scanListenerPortNonTls")
    def scan_listener_port_non_tls(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The SCAN listener port for non-TLS (TCP) protocol. The default is 1521.
        """
        return pulumi.get(self, "scan_listener_port_non_tls")

    @property
    @pulumi.getter(name="scanListenerPortTls")
    def scan_listener_port_tls(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The SCAN listener port for TLS (TCP) protocol. The default is 2484.
        """
        return pulumi.get(self, "scan_listener_port_tls")

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Output[builtins.str]:
        """
        The shape of the Exadata infrastructure for the Autonomous VM cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        The tags associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The time zone of the Autonomous VM cluster.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="totalContainerDatabases")
    def total_container_databases(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The total number of Autonomous Container Databases that can be created with the allocated local storage.
        """
        return pulumi.get(self, "total_container_databases")

