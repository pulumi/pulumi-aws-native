# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetCloudExadataInfrastructureResult',
    'AwaitableGetCloudExadataInfrastructureResult',
    'get_cloud_exadata_infrastructure',
    'get_cloud_exadata_infrastructure_output',
]

@pulumi.output_type
class GetCloudExadataInfrastructureResult:
    def __init__(__self__, activated_storage_count=None, additional_storage_count=None, available_storage_size_in_gbs=None, cloud_exadata_infrastructure_arn=None, cloud_exadata_infrastructure_id=None, compute_model=None, cpu_count=None, data_storage_size_in_tbs=None, db_node_storage_size_in_gbs=None, db_server_ids=None, db_server_version=None, max_cpu_count=None, max_data_storage_in_tbs=None, max_db_node_storage_size_in_gbs=None, max_memory_in_gbs=None, memory_size_in_gbs=None, oci_resource_anchor_name=None, oci_url=None, ocid=None, storage_server_version=None, tags=None, total_storage_size_in_gbs=None):
        if activated_storage_count and not isinstance(activated_storage_count, int):
            raise TypeError("Expected argument 'activated_storage_count' to be a int")
        pulumi.set(__self__, "activated_storage_count", activated_storage_count)
        if additional_storage_count and not isinstance(additional_storage_count, int):
            raise TypeError("Expected argument 'additional_storage_count' to be a int")
        pulumi.set(__self__, "additional_storage_count", additional_storage_count)
        if available_storage_size_in_gbs and not isinstance(available_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'available_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "available_storage_size_in_gbs", available_storage_size_in_gbs)
        if cloud_exadata_infrastructure_arn and not isinstance(cloud_exadata_infrastructure_arn, str):
            raise TypeError("Expected argument 'cloud_exadata_infrastructure_arn' to be a str")
        pulumi.set(__self__, "cloud_exadata_infrastructure_arn", cloud_exadata_infrastructure_arn)
        if cloud_exadata_infrastructure_id and not isinstance(cloud_exadata_infrastructure_id, str):
            raise TypeError("Expected argument 'cloud_exadata_infrastructure_id' to be a str")
        pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        if compute_model and not isinstance(compute_model, str):
            raise TypeError("Expected argument 'compute_model' to be a str")
        pulumi.set(__self__, "compute_model", compute_model)
        if cpu_count and not isinstance(cpu_count, int):
            raise TypeError("Expected argument 'cpu_count' to be a int")
        pulumi.set(__self__, "cpu_count", cpu_count)
        if data_storage_size_in_tbs and not isinstance(data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if db_node_storage_size_in_gbs and not isinstance(db_node_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'db_node_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if db_server_ids and not isinstance(db_server_ids, list):
            raise TypeError("Expected argument 'db_server_ids' to be a list")
        pulumi.set(__self__, "db_server_ids", db_server_ids)
        if db_server_version and not isinstance(db_server_version, str):
            raise TypeError("Expected argument 'db_server_version' to be a str")
        pulumi.set(__self__, "db_server_version", db_server_version)
        if max_cpu_count and not isinstance(max_cpu_count, int):
            raise TypeError("Expected argument 'max_cpu_count' to be a int")
        pulumi.set(__self__, "max_cpu_count", max_cpu_count)
        if max_data_storage_in_tbs and not isinstance(max_data_storage_in_tbs, float):
            raise TypeError("Expected argument 'max_data_storage_in_tbs' to be a float")
        pulumi.set(__self__, "max_data_storage_in_tbs", max_data_storage_in_tbs)
        if max_db_node_storage_size_in_gbs and not isinstance(max_db_node_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'max_db_node_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "max_db_node_storage_size_in_gbs", max_db_node_storage_size_in_gbs)
        if max_memory_in_gbs and not isinstance(max_memory_in_gbs, int):
            raise TypeError("Expected argument 'max_memory_in_gbs' to be a int")
        pulumi.set(__self__, "max_memory_in_gbs", max_memory_in_gbs)
        if memory_size_in_gbs and not isinstance(memory_size_in_gbs, int):
            raise TypeError("Expected argument 'memory_size_in_gbs' to be a int")
        pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if oci_resource_anchor_name and not isinstance(oci_resource_anchor_name, str):
            raise TypeError("Expected argument 'oci_resource_anchor_name' to be a str")
        pulumi.set(__self__, "oci_resource_anchor_name", oci_resource_anchor_name)
        if oci_url and not isinstance(oci_url, str):
            raise TypeError("Expected argument 'oci_url' to be a str")
        pulumi.set(__self__, "oci_url", oci_url)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if storage_server_version and not isinstance(storage_server_version, str):
            raise TypeError("Expected argument 'storage_server_version' to be a str")
        pulumi.set(__self__, "storage_server_version", storage_server_version)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_storage_size_in_gbs and not isinstance(total_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'total_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "total_storage_size_in_gbs", total_storage_size_in_gbs)

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> Optional[builtins.int]:
        """
        The number of storage servers requested for the Exadata infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> Optional[builtins.int]:
        """
        The number of storage servers requested for the Exadata infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @property
    @pulumi.getter(name="availableStorageSizeInGbs")
    def available_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
        """
        return pulumi.get(self, "available_storage_size_in_gbs")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureArn")
    def cloud_exadata_infrastructure_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) for the Exadata infrastructure.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_arn")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> Optional[builtins.str]:
        """
        The unique identifier for the Exadata infrastructure.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> Optional[builtins.str]:
        """
        The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[builtins.int]:
        """
        The total number of CPU cores that are allocated to the Exadata infrastructure.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> Optional[builtins.float]:
        """
        The size of the Exadata infrastructure's data disk group, in terabytes (TB).
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbServerIds")
    def db_server_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of database server identifiers for the Exadata infrastructure.
        """
        return pulumi.get(self, "db_server_ids")

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> Optional[builtins.str]:
        """
        The software version of the database servers (dom0) in the Exadata infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> Optional[builtins.int]:
        """
        The total number of CPU cores available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_cpu_count")

    @property
    @pulumi.getter(name="maxDataStorageInTbs")
    def max_data_storage_in_tbs(self) -> Optional[builtins.float]:
        """
        The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_data_storage_in_tbs")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeInGbs")
    def max_db_node_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="maxMemoryInGbs")
    def max_memory_in_gbs(self) -> Optional[builtins.int]:
        """
        The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_memory_in_gbs")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> Optional[builtins.str]:
        """
        The name of the OCI resource anchor for the Exadata infrastructure.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[builtins.str]:
        """
        The HTTPS link to the Exadata infrastructure in OCI.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[builtins.str]:
        """
        The OCID of the Exadata infrastructure.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> Optional[builtins.str]:
        """
        The software version of the storage servers on the Exadata infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        Tags to assign to the Exadata Infrastructure.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalStorageSizeInGbs")
    def total_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
        """
        return pulumi.get(self, "total_storage_size_in_gbs")


class AwaitableGetCloudExadataInfrastructureResult(GetCloudExadataInfrastructureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudExadataInfrastructureResult(
            activated_storage_count=self.activated_storage_count,
            additional_storage_count=self.additional_storage_count,
            available_storage_size_in_gbs=self.available_storage_size_in_gbs,
            cloud_exadata_infrastructure_arn=self.cloud_exadata_infrastructure_arn,
            cloud_exadata_infrastructure_id=self.cloud_exadata_infrastructure_id,
            compute_model=self.compute_model,
            cpu_count=self.cpu_count,
            data_storage_size_in_tbs=self.data_storage_size_in_tbs,
            db_node_storage_size_in_gbs=self.db_node_storage_size_in_gbs,
            db_server_ids=self.db_server_ids,
            db_server_version=self.db_server_version,
            max_cpu_count=self.max_cpu_count,
            max_data_storage_in_tbs=self.max_data_storage_in_tbs,
            max_db_node_storage_size_in_gbs=self.max_db_node_storage_size_in_gbs,
            max_memory_in_gbs=self.max_memory_in_gbs,
            memory_size_in_gbs=self.memory_size_in_gbs,
            oci_resource_anchor_name=self.oci_resource_anchor_name,
            oci_url=self.oci_url,
            ocid=self.ocid,
            storage_server_version=self.storage_server_version,
            tags=self.tags,
            total_storage_size_in_gbs=self.total_storage_size_in_gbs)


def get_cloud_exadata_infrastructure(cloud_exadata_infrastructure_arn: Optional[builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudExadataInfrastructureResult:
    """
    The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure


    :param builtins.str cloud_exadata_infrastructure_arn: The Amazon Resource Name (ARN) for the Exadata infrastructure.
    """
    __args__ = dict()
    __args__['cloudExadataInfrastructureArn'] = cloud_exadata_infrastructure_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:odb:getCloudExadataInfrastructure', __args__, opts=opts, typ=GetCloudExadataInfrastructureResult).value

    return AwaitableGetCloudExadataInfrastructureResult(
        activated_storage_count=pulumi.get(__ret__, 'activated_storage_count'),
        additional_storage_count=pulumi.get(__ret__, 'additional_storage_count'),
        available_storage_size_in_gbs=pulumi.get(__ret__, 'available_storage_size_in_gbs'),
        cloud_exadata_infrastructure_arn=pulumi.get(__ret__, 'cloud_exadata_infrastructure_arn'),
        cloud_exadata_infrastructure_id=pulumi.get(__ret__, 'cloud_exadata_infrastructure_id'),
        compute_model=pulumi.get(__ret__, 'compute_model'),
        cpu_count=pulumi.get(__ret__, 'cpu_count'),
        data_storage_size_in_tbs=pulumi.get(__ret__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__ret__, 'db_node_storage_size_in_gbs'),
        db_server_ids=pulumi.get(__ret__, 'db_server_ids'),
        db_server_version=pulumi.get(__ret__, 'db_server_version'),
        max_cpu_count=pulumi.get(__ret__, 'max_cpu_count'),
        max_data_storage_in_tbs=pulumi.get(__ret__, 'max_data_storage_in_tbs'),
        max_db_node_storage_size_in_gbs=pulumi.get(__ret__, 'max_db_node_storage_size_in_gbs'),
        max_memory_in_gbs=pulumi.get(__ret__, 'max_memory_in_gbs'),
        memory_size_in_gbs=pulumi.get(__ret__, 'memory_size_in_gbs'),
        oci_resource_anchor_name=pulumi.get(__ret__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__ret__, 'oci_url'),
        ocid=pulumi.get(__ret__, 'ocid'),
        storage_server_version=pulumi.get(__ret__, 'storage_server_version'),
        tags=pulumi.get(__ret__, 'tags'),
        total_storage_size_in_gbs=pulumi.get(__ret__, 'total_storage_size_in_gbs'))
def get_cloud_exadata_infrastructure_output(cloud_exadata_infrastructure_arn: Optional[pulumi.Input[builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudExadataInfrastructureResult]:
    """
    The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure


    :param builtins.str cloud_exadata_infrastructure_arn: The Amazon Resource Name (ARN) for the Exadata infrastructure.
    """
    __args__ = dict()
    __args__['cloudExadataInfrastructureArn'] = cloud_exadata_infrastructure_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:odb:getCloudExadataInfrastructure', __args__, opts=opts, typ=GetCloudExadataInfrastructureResult)
    return __ret__.apply(lambda __response__: GetCloudExadataInfrastructureResult(
        activated_storage_count=pulumi.get(__response__, 'activated_storage_count'),
        additional_storage_count=pulumi.get(__response__, 'additional_storage_count'),
        available_storage_size_in_gbs=pulumi.get(__response__, 'available_storage_size_in_gbs'),
        cloud_exadata_infrastructure_arn=pulumi.get(__response__, 'cloud_exadata_infrastructure_arn'),
        cloud_exadata_infrastructure_id=pulumi.get(__response__, 'cloud_exadata_infrastructure_id'),
        compute_model=pulumi.get(__response__, 'compute_model'),
        cpu_count=pulumi.get(__response__, 'cpu_count'),
        data_storage_size_in_tbs=pulumi.get(__response__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__response__, 'db_node_storage_size_in_gbs'),
        db_server_ids=pulumi.get(__response__, 'db_server_ids'),
        db_server_version=pulumi.get(__response__, 'db_server_version'),
        max_cpu_count=pulumi.get(__response__, 'max_cpu_count'),
        max_data_storage_in_tbs=pulumi.get(__response__, 'max_data_storage_in_tbs'),
        max_db_node_storage_size_in_gbs=pulumi.get(__response__, 'max_db_node_storage_size_in_gbs'),
        max_memory_in_gbs=pulumi.get(__response__, 'max_memory_in_gbs'),
        memory_size_in_gbs=pulumi.get(__response__, 'memory_size_in_gbs'),
        oci_resource_anchor_name=pulumi.get(__response__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__response__, 'oci_url'),
        ocid=pulumi.get(__response__, 'ocid'),
        storage_server_version=pulumi.get(__response__, 'storage_server_version'),
        tags=pulumi.get(__response__, 'tags'),
        total_storage_size_in_gbs=pulumi.get(__response__, 'total_storage_size_in_gbs')))
