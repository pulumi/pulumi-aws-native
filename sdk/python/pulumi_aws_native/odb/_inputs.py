# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CloudAutonomousVmClusterMaintenanceWindowArgs',
    'CloudAutonomousVmClusterMaintenanceWindowArgsDict',
    'CloudExadataInfrastructureCustomerContactArgs',
    'CloudExadataInfrastructureCustomerContactArgsDict',
    'CloudExadataInfrastructureMaintenanceWindowArgs',
    'CloudExadataInfrastructureMaintenanceWindowArgsDict',
    'CloudVmClusterDataCollectionOptionsArgs',
    'CloudVmClusterDataCollectionOptionsArgsDict',
    'CloudVmClusterDbNodeArgs',
    'CloudVmClusterDbNodeArgsDict',
    'CloudVmClusterTagArgs',
    'CloudVmClusterTagArgsDict',
]

MYPY = False

if not MYPY:
    class CloudAutonomousVmClusterMaintenanceWindowArgsDict(TypedDict):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        """
        days_of_week: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]
        """
        The days of the week when maintenance can be performed.
        """
        hours_of_day: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The hours of the day when maintenance can be performed.
        """
        lead_time_in_weeks: NotRequired[pulumi.Input[builtins.int]]
        """
        The lead time in weeks before the maintenance window.
        """
        months: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]
        """
        The months when maintenance can be performed.
        """
        preference: NotRequired[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]
        """
        The preference for the maintenance window scheduling.
        """
        weeks_of_month: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The weeks of the month when maintenance can be performed.
        """
elif False:
    CloudAutonomousVmClusterMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAutonomousVmClusterMaintenanceWindowArgs:
    def __init__(__self__, *,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]] = None,
                 hours_of_day: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 lead_time_in_weeks: Optional[pulumi.Input[builtins.int]] = None,
                 months: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]] = None,
                 preference: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']] = None,
                 weeks_of_month: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]] days_of_week: The days of the week when maintenance can be performed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] hours_of_day: The hours of the day when maintenance can be performed.
        :param pulumi.Input[builtins.int] lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]] months: The months when maintenance can be performed.
        :param pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference'] preference: The preference for the maintenance window scheduling.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]):
        pulumi.set(self, "days_of_week", value)

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @hours_of_day.setter
    def hours_of_day(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "hours_of_day", value)

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @lead_time_in_weeks.setter
    def lead_time_in_weeks(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lead_time_in_weeks", value)

    @property
    @pulumi.getter
    def months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")

    @weeks_of_month.setter
    def weeks_of_month(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "weeks_of_month", value)


if not MYPY:
    class CloudExadataInfrastructureCustomerContactArgsDict(TypedDict):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        """
        email: NotRequired[pulumi.Input[builtins.str]]
        """
        The email address of the contact.
        """
elif False:
    CloudExadataInfrastructureCustomerContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructureCustomerContactArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[builtins.str]] = None):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        :param pulumi.Input[builtins.str] email: The email address of the contact.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)


if not MYPY:
    class CloudExadataInfrastructureMaintenanceWindowArgsDict(TypedDict):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        """
        custom_action_timeout_in_mins: NotRequired[pulumi.Input[builtins.int]]
        """
        The timeout duration for custom actions in minutes.
        """
        days_of_week: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]]]
        """
        The days of the week when maintenance can be performed.
        """
        hours_of_day: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The hours of the day when maintenance can be performed.
        """
        is_custom_action_timeout_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether custom action timeout is enabled.
        """
        lead_time_in_weeks: NotRequired[pulumi.Input[builtins.int]]
        """
        The lead time in weeks before the maintenance window.
        """
        months: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]]]
        """
        The months when maintenance can be performed.
        """
        patching_mode: NotRequired[pulumi.Input[builtins.str]]
        """
        The patching mode for the maintenance window.
        """
        preference: NotRequired[pulumi.Input[builtins.str]]
        """
        The preference for the maintenance window scheduling.
        """
        weeks_of_month: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The weeks of the month when maintenance can be performed.
        """
elif False:
    CloudExadataInfrastructureMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructureMaintenanceWindowArgs:
    def __init__(__self__, *,
                 custom_action_timeout_in_mins: Optional[pulumi.Input[builtins.int]] = None,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]]] = None,
                 hours_of_day: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 is_custom_action_timeout_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 lead_time_in_weeks: Optional[pulumi.Input[builtins.int]] = None,
                 months: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]]] = None,
                 patching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 preference: Optional[pulumi.Input[builtins.str]] = None,
                 weeks_of_month: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param pulumi.Input[builtins.int] custom_action_timeout_in_mins: The timeout duration for custom actions in minutes.
        :param pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]] days_of_week: The days of the week when maintenance can be performed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] hours_of_day: The hours of the day when maintenance can be performed.
        :param pulumi.Input[builtins.bool] is_custom_action_timeout_enabled: Indicates whether custom action timeout is enabled.
        :param pulumi.Input[builtins.int] lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]] months: The months when maintenance can be performed.
        :param pulumi.Input[builtins.str] patching_mode: The patching mode for the maintenance window.
        :param pulumi.Input[builtins.str] preference: The preference for the maintenance window scheduling.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if custom_action_timeout_in_mins is not None:
            pulumi.set(__self__, "custom_action_timeout_in_mins", custom_action_timeout_in_mins)
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if is_custom_action_timeout_enabled is not None:
            pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if patching_mode is not None:
            pulumi.set(__self__, "patching_mode", patching_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="customActionTimeoutInMins")
    def custom_action_timeout_in_mins(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The timeout duration for custom actions in minutes.
        """
        return pulumi.get(self, "custom_action_timeout_in_mins")

    @custom_action_timeout_in_mins.setter
    def custom_action_timeout_in_mins(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "custom_action_timeout_in_mins", value)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]]]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]]]):
        pulumi.set(self, "days_of_week", value)

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @hours_of_day.setter
    def hours_of_day(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "hours_of_day", value)

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether custom action timeout is enabled.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @is_custom_action_timeout_enabled.setter
    def is_custom_action_timeout_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_custom_action_timeout_enabled", value)

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @lead_time_in_weeks.setter
    def lead_time_in_weeks(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lead_time_in_weeks", value)

    @property
    @pulumi.getter
    def months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]]]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The patching mode for the maintenance window.
        """
        return pulumi.get(self, "patching_mode")

    @patching_mode.setter
    def patching_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "patching_mode", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")

    @weeks_of_month.setter
    def weeks_of_month(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "weeks_of_month", value)


if not MYPY:
    class CloudVmClusterDataCollectionOptionsArgsDict(TypedDict):
        """
        Information about the data collection options enabled for a VM cluster.
        """
        is_diagnostics_events_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        is_health_monitoring_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        is_incident_logs_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
elif False:
    CloudVmClusterDataCollectionOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterDataCollectionOptionsArgs:
    def __init__(__self__, *,
                 is_diagnostics_events_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_health_monitoring_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_incident_logs_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Information about the data collection options enabled for a VM cluster.
        :param pulumi.Input[builtins.bool] is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_incident_logs_enabled: Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        if is_diagnostics_events_enabled is not None:
            pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        if is_health_monitoring_enabled is not None:
            pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        if is_incident_logs_enabled is not None:
            pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @is_diagnostics_events_enabled.setter
    def is_diagnostics_events_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_diagnostics_events_enabled", value)

    @property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_health_monitoring_enabled")

    @is_health_monitoring_enabled.setter
    def is_health_monitoring_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_health_monitoring_enabled", value)

    @property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        return pulumi.get(self, "is_incident_logs_enabled")

    @is_incident_logs_enabled.setter
    def is_incident_logs_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_incident_logs_enabled", value)


if not MYPY:
    class CloudVmClusterDbNodeArgsDict(TypedDict):
        """
        A DbNode is a virtual machine that hosts Oracle database instances and provides access to shared storage servers within a VM Cluster
        """
        db_server_id: pulumi.Input[builtins.str]
        """
        The unique identifier of the database server that's associated with the DB node.
        """
        backup_ip_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.
        """
        backup_vnic2_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the second backup virtual network interface card (VNIC) for the DB node.
        """
        cpu_core_count: NotRequired[pulumi.Input[builtins.int]]
        """
        The number of CPU cores enabled on the DB node.
        """
        db_node_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        The Amazon Resource Name (ARN) of the DB node.
        """
        db_node_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The unique identifier of the DB node.
        """
        db_node_storage_size_in_gbs: NotRequired[pulumi.Input[builtins.int]]
        """
        The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.
        """
        db_system_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the DB system.
        """
        host_ip_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the host IP address that's associated with the DB node.
        """
        hostname: NotRequired[pulumi.Input[builtins.str]]
        """
        The host name for the DB node.
        """
        memory_size_in_gbs: NotRequired[pulumi.Input[builtins.int]]
        """
        The amount of memory, in gigabytes (GB), that allocated on the DB node.
        """
        ocid: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the DB node.
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        The current status of the DB node.
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudVmClusterTagArgsDict']]]]
        vnic2_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the second VNIC.
        """
        vnic_id: NotRequired[pulumi.Input[builtins.str]]
        """
        The OCID of the VNIC.
        """
elif False:
    CloudVmClusterDbNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterDbNodeArgs:
    def __init__(__self__, *,
                 db_server_id: pulumi.Input[builtins.str],
                 backup_ip_id: Optional[pulumi.Input[builtins.str]] = None,
                 backup_vnic2_id: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count: Optional[pulumi.Input[builtins.int]] = None,
                 db_node_arn: Optional[pulumi.Input[builtins.str]] = None,
                 db_node_id: Optional[pulumi.Input[builtins.str]] = None,
                 db_node_storage_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 db_system_id: Optional[pulumi.Input[builtins.str]] = None,
                 host_ip_id: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 memory_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 ocid: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CloudVmClusterTagArgs']]]] = None,
                 vnic2_id: Optional[pulumi.Input[builtins.str]] = None,
                 vnic_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        A DbNode is a virtual machine that hosts Oracle database instances and provides access to shared storage servers within a VM Cluster
        :param pulumi.Input[builtins.str] db_server_id: The unique identifier of the database server that's associated with the DB node.
        :param pulumi.Input[builtins.str] backup_ip_id: The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.
        :param pulumi.Input[builtins.str] backup_vnic2_id: The OCID of the second backup virtual network interface card (VNIC) for the DB node.
        :param pulumi.Input[builtins.int] cpu_core_count: The number of CPU cores enabled on the DB node.
        :param pulumi.Input[builtins.str] db_node_arn: The Amazon Resource Name (ARN) of the DB node.
        :param pulumi.Input[builtins.str] db_node_id: The unique identifier of the DB node.
        :param pulumi.Input[builtins.int] db_node_storage_size_in_gbs: The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.
        :param pulumi.Input[builtins.str] db_system_id: The OCID of the DB system.
        :param pulumi.Input[builtins.str] host_ip_id: The OCID of the host IP address that's associated with the DB node.
        :param pulumi.Input[builtins.str] hostname: The host name for the DB node.
        :param pulumi.Input[builtins.int] memory_size_in_gbs: The amount of memory, in gigabytes (GB), that allocated on the DB node.
        :param pulumi.Input[builtins.str] ocid: The OCID of the DB node.
        :param pulumi.Input[builtins.str] status: The current status of the DB node.
        :param pulumi.Input[builtins.str] vnic2_id: The OCID of the second VNIC.
        :param pulumi.Input[builtins.str] vnic_id: The OCID of the VNIC.
        """
        pulumi.set(__self__, "db_server_id", db_server_id)
        if backup_ip_id is not None:
            pulumi.set(__self__, "backup_ip_id", backup_ip_id)
        if backup_vnic2_id is not None:
            pulumi.set(__self__, "backup_vnic2_id", backup_vnic2_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if db_node_arn is not None:
            pulumi.set(__self__, "db_node_arn", db_node_arn)
        if db_node_id is not None:
            pulumi.set(__self__, "db_node_id", db_node_id)
        if db_node_storage_size_in_gbs is not None:
            pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if host_ip_id is not None:
            pulumi.set(__self__, "host_ip_id", host_ip_id)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vnic2_id is not None:
            pulumi.set(__self__, "vnic2_id", vnic2_id)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="dbServerId")
    def db_server_id(self) -> pulumi.Input[builtins.str]:
        """
        The unique identifier of the database server that's associated with the DB node.
        """
        return pulumi.get(self, "db_server_id")

    @db_server_id.setter
    def db_server_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "db_server_id", value)

    @property
    @pulumi.getter(name="backupIpId")
    def backup_ip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.
        """
        return pulumi.get(self, "backup_ip_id")

    @backup_ip_id.setter
    def backup_ip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "backup_ip_id", value)

    @property
    @pulumi.getter(name="backupVnic2Id")
    def backup_vnic2_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the second backup virtual network interface card (VNIC) for the DB node.
        """
        return pulumi.get(self, "backup_vnic2_id")

    @backup_vnic2_id.setter
    def backup_vnic2_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "backup_vnic2_id", value)

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of CPU cores enabled on the DB node.
        """
        return pulumi.get(self, "cpu_core_count")

    @cpu_core_count.setter
    def cpu_core_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu_core_count", value)

    @property
    @pulumi.getter(name="dbNodeArn")
    def db_node_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Amazon Resource Name (ARN) of the DB node.
        """
        return pulumi.get(self, "db_node_arn")

    @db_node_arn.setter
    def db_node_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "db_node_arn", value)

    @property
    @pulumi.getter(name="dbNodeId")
    def db_node_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the DB node.
        """
        return pulumi.get(self, "db_node_id")

    @db_node_id.setter
    def db_node_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "db_node_id", value)

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @db_node_storage_size_in_gbs.setter
    def db_node_storage_size_in_gbs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "db_node_storage_size_in_gbs", value)

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the DB system.
        """
        return pulumi.get(self, "db_system_id")

    @db_system_id.setter
    def db_system_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "db_system_id", value)

    @property
    @pulumi.getter(name="hostIpId")
    def host_ip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the host IP address that's associated with the DB node.
        """
        return pulumi.get(self, "host_ip_id")

    @host_ip_id.setter
    def host_ip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host_ip_id", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The host name for the DB node.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of memory, in gigabytes (GB), that allocated on the DB node.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @memory_size_in_gbs.setter
    def memory_size_in_gbs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory_size_in_gbs", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the DB node.
        """
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The current status of the DB node.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudVmClusterTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudVmClusterTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vnic2Id")
    def vnic2_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the second VNIC.
        """
        return pulumi.get(self, "vnic2_id")

    @vnic2_id.setter
    def vnic2_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vnic2_id", value)

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The OCID of the VNIC.
        """
        return pulumi.get(self, "vnic_id")

    @vnic_id.setter
    def vnic_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vnic_id", value)


if not MYPY:
    class CloudVmClusterTagArgsDict(TypedDict):
        """
        A key-value pair to associate with a resource.
        """
        key: pulumi.Input[builtins.str]
        """
        The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and ".
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
elif False:
    CloudVmClusterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[builtins.str] key: The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and ".
        :param pulumi.Input[builtins.str] value: The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and ".
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


