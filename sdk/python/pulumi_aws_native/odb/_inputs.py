# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CloudAutonomousVmClusterMaintenanceWindowArgs',
    'CloudAutonomousVmClusterMaintenanceWindowArgsDict',
    'CloudExadataInfrastructureCustomerContactArgs',
    'CloudExadataInfrastructureCustomerContactArgsDict',
    'CloudVmClusterDataCollectionOptionsArgs',
    'CloudVmClusterDataCollectionOptionsArgsDict',
]

MYPY = False

if not MYPY:
    class CloudAutonomousVmClusterMaintenanceWindowArgsDict(TypedDict):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        """
        days_of_week: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]
        """
        The days of the week when maintenance can be performed.
        """
        hours_of_day: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The hours of the day when maintenance can be performed.
        """
        lead_time_in_weeks: NotRequired[pulumi.Input[builtins.int]]
        """
        The lead time in weeks before the maintenance window.
        """
        months: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]
        """
        The months when maintenance can be performed.
        """
        preference: NotRequired[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]
        """
        The preference for the maintenance window scheduling.
        """
        weeks_of_month: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The weeks of the month when maintenance can be performed.
        """
elif False:
    CloudAutonomousVmClusterMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAutonomousVmClusterMaintenanceWindowArgs:
    def __init__(__self__, *,
                 days_of_week: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]] = None,
                 hours_of_day: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 lead_time_in_weeks: Optional[pulumi.Input[builtins.int]] = None,
                 months: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]] = None,
                 preference: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']] = None,
                 weeks_of_month: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]] days_of_week: The days of the week when maintenance can be performed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] hours_of_day: The hours of the day when maintenance can be performed.
        :param pulumi.Input[builtins.int] lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]] months: The months when maintenance can be performed.
        :param pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference'] preference: The preference for the maintenance window scheduling.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @days_of_week.setter
    def days_of_week(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]]]):
        pulumi.set(self, "days_of_week", value)

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @hours_of_day.setter
    def hours_of_day(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "hours_of_day", value)

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @lead_time_in_weeks.setter
    def lead_time_in_weeks(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "lead_time_in_weeks", value)

    @property
    @pulumi.getter
    def months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input['CloudAutonomousVmClusterMaintenanceWindowPreference']]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")

    @weeks_of_month.setter
    def weeks_of_month(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "weeks_of_month", value)


if not MYPY:
    class CloudExadataInfrastructureCustomerContactArgsDict(TypedDict):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        """
        email: NotRequired[pulumi.Input[builtins.str]]
        """
        The email address of the contact.
        """
elif False:
    CloudExadataInfrastructureCustomerContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructureCustomerContactArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[builtins.str]] = None):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        :param pulumi.Input[builtins.str] email: The email address of the contact.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)


if not MYPY:
    class CloudVmClusterDataCollectionOptionsArgsDict(TypedDict):
        """
        Information about the data collection options enabled for a VM cluster.
        """
        is_diagnostics_events_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        is_health_monitoring_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        is_incident_logs_enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
elif False:
    CloudVmClusterDataCollectionOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterDataCollectionOptionsArgs:
    def __init__(__self__, *,
                 is_diagnostics_events_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_health_monitoring_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_incident_logs_enabled: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Information about the data collection options enabled for a VM cluster.
        :param pulumi.Input[builtins.bool] is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_incident_logs_enabled: Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        if is_diagnostics_events_enabled is not None:
            pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        if is_health_monitoring_enabled is not None:
            pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        if is_incident_logs_enabled is not None:
            pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @is_diagnostics_events_enabled.setter
    def is_diagnostics_events_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_diagnostics_events_enabled", value)

    @property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_health_monitoring_enabled")

    @is_health_monitoring_enabled.setter
    def is_health_monitoring_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_health_monitoring_enabled", value)

    @property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        return pulumi.get(self, "is_incident_logs_enabled")

    @is_incident_logs_enabled.setter
    def is_incident_logs_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_incident_logs_enabled", value)


