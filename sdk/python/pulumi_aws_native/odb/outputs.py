# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CloudAutonomousVmClusterMaintenanceWindow',
    'CloudExadataInfrastructureCustomerContact',
    'CloudExadataInfrastructureMaintenanceWindow',
    'CloudVmClusterDataCollectionOptions',
    'CloudVmClusterDbNode',
    'CloudVmClusterTag',
    'OdbNetworkManagedServices',
    'OdbNetworkManagedServicesManagedS3BackupAccessProperties',
    'OdbNetworkManagedServicesS3AccessProperties',
    'OdbNetworkManagedServicesServiceNetworkEndpointProperties',
    'OdbNetworkManagedServicesZeroEtlAccessProperties',
]

@pulumi.output_type
class CloudAutonomousVmClusterMaintenanceWindow(dict):
    """
    The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeek":
            suggest = "days_of_week"
        elif key == "hoursOfDay":
            suggest = "hours_of_day"
        elif key == "leadTimeInWeeks":
            suggest = "lead_time_in_weeks"
        elif key == "weeksOfMonth":
            suggest = "weeks_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAutonomousVmClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_week: Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']] = None,
                 hours_of_day: Optional[Sequence[builtins.int]] = None,
                 lead_time_in_weeks: Optional[builtins.int] = None,
                 months: Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']] = None,
                 preference: Optional['CloudAutonomousVmClusterMaintenanceWindowPreference'] = None,
                 weeks_of_month: Optional[Sequence[builtins.int]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem'] days_of_week: The days of the week when maintenance can be performed.
        :param Sequence[builtins.int] hours_of_day: The hours of the day when maintenance can be performed.
        :param builtins.int lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem'] months: The months when maintenance can be performed.
        :param 'CloudAutonomousVmClusterMaintenanceWindowPreference' preference: The preference for the maintenance window scheduling.
        :param Sequence[builtins.int] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[Sequence[builtins.int]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[builtins.int]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter
    def preference(self) -> Optional['CloudAutonomousVmClusterMaintenanceWindowPreference']:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[Sequence[builtins.int]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")


@pulumi.output_type
class CloudExadataInfrastructureCustomerContact(dict):
    """
    A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
    """
    def __init__(__self__, *,
                 email: Optional[builtins.str] = None):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        :param builtins.str email: The email address of the contact.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        """
        The email address of the contact.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class CloudExadataInfrastructureMaintenanceWindow(dict):
    """
    The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customActionTimeoutInMins":
            suggest = "custom_action_timeout_in_mins"
        elif key == "daysOfWeek":
            suggest = "days_of_week"
        elif key == "hoursOfDay":
            suggest = "hours_of_day"
        elif key == "isCustomActionTimeoutEnabled":
            suggest = "is_custom_action_timeout_enabled"
        elif key == "leadTimeInWeeks":
            suggest = "lead_time_in_weeks"
        elif key == "patchingMode":
            suggest = "patching_mode"
        elif key == "weeksOfMonth":
            suggest = "weeks_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudExadataInfrastructureMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudExadataInfrastructureMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudExadataInfrastructureMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_action_timeout_in_mins: Optional[builtins.int] = None,
                 days_of_week: Optional[Sequence['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']] = None,
                 hours_of_day: Optional[Sequence[builtins.int]] = None,
                 is_custom_action_timeout_enabled: Optional[builtins.bool] = None,
                 lead_time_in_weeks: Optional[builtins.int] = None,
                 months: Optional[Sequence['CloudExadataInfrastructureMaintenanceWindowMonthsItem']] = None,
                 patching_mode: Optional[builtins.str] = None,
                 preference: Optional[builtins.str] = None,
                 weeks_of_month: Optional[Sequence[builtins.int]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param builtins.int custom_action_timeout_in_mins: The timeout duration for custom actions in minutes.
        :param Sequence['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem'] days_of_week: The days of the week when maintenance can be performed.
        :param Sequence[builtins.int] hours_of_day: The hours of the day when maintenance can be performed.
        :param builtins.bool is_custom_action_timeout_enabled: Indicates whether custom action timeout is enabled.
        :param builtins.int lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param Sequence['CloudExadataInfrastructureMaintenanceWindowMonthsItem'] months: The months when maintenance can be performed.
        :param builtins.str patching_mode: The patching mode for the maintenance window.
        :param builtins.str preference: The preference for the maintenance window scheduling.
        :param Sequence[builtins.int] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if custom_action_timeout_in_mins is not None:
            pulumi.set(__self__, "custom_action_timeout_in_mins", custom_action_timeout_in_mins)
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if is_custom_action_timeout_enabled is not None:
            pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if patching_mode is not None:
            pulumi.set(__self__, "patching_mode", patching_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="customActionTimeoutInMins")
    def custom_action_timeout_in_mins(self) -> Optional[builtins.int]:
        """
        The timeout duration for custom actions in minutes.
        """
        return pulumi.get(self, "custom_action_timeout_in_mins")

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[Sequence['CloudExadataInfrastructureMaintenanceWindowDaysOfWeekItem']]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[Sequence[builtins.int]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether custom action timeout is enabled.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[builtins.int]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence['CloudExadataInfrastructureMaintenanceWindowMonthsItem']]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> Optional[builtins.str]:
        """
        The patching mode for the maintenance window.
        """
        return pulumi.get(self, "patching_mode")

    @property
    @pulumi.getter
    def preference(self) -> Optional[builtins.str]:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[Sequence[builtins.int]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")


@pulumi.output_type
class CloudVmClusterDataCollectionOptions(dict):
    """
    Information about the data collection options enabled for a VM cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDiagnosticsEventsEnabled":
            suggest = "is_diagnostics_events_enabled"
        elif key == "isHealthMonitoringEnabled":
            suggest = "is_health_monitoring_enabled"
        elif key == "isIncidentLogsEnabled":
            suggest = "is_incident_logs_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterDataCollectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_diagnostics_events_enabled: Optional[builtins.bool] = None,
                 is_health_monitoring_enabled: Optional[builtins.bool] = None,
                 is_incident_logs_enabled: Optional[builtins.bool] = None):
        """
        Information about the data collection options enabled for a VM cluster.
        :param builtins.bool is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster.
        :param builtins.bool is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster.
        :param builtins.bool is_incident_logs_enabled: Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        if is_diagnostics_events_enabled is not None:
            pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        if is_health_monitoring_enabled is not None:
            pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        if is_incident_logs_enabled is not None:
            pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_health_monitoring_enabled")

    @property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        return pulumi.get(self, "is_incident_logs_enabled")


@pulumi.output_type
class CloudVmClusterDbNode(dict):
    """
    A DbNode is a virtual machine that hosts Oracle database instances and provides access to shared storage servers within a VM Cluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbServerId":
            suggest = "db_server_id"
        elif key == "backupIpId":
            suggest = "backup_ip_id"
        elif key == "backupVnic2Id":
            suggest = "backup_vnic2_id"
        elif key == "cpuCoreCount":
            suggest = "cpu_core_count"
        elif key == "dbNodeArn":
            suggest = "db_node_arn"
        elif key == "dbNodeId":
            suggest = "db_node_id"
        elif key == "dbNodeStorageSizeInGbs":
            suggest = "db_node_storage_size_in_gbs"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "hostIpId":
            suggest = "host_ip_id"
        elif key == "memorySizeInGbs":
            suggest = "memory_size_in_gbs"
        elif key == "vnic2Id":
            suggest = "vnic2_id"
        elif key == "vnicId":
            suggest = "vnic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterDbNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterDbNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterDbNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_server_id: builtins.str,
                 backup_ip_id: Optional[builtins.str] = None,
                 backup_vnic2_id: Optional[builtins.str] = None,
                 cpu_core_count: Optional[builtins.int] = None,
                 db_node_arn: Optional[builtins.str] = None,
                 db_node_id: Optional[builtins.str] = None,
                 db_node_storage_size_in_gbs: Optional[builtins.int] = None,
                 db_system_id: Optional[builtins.str] = None,
                 host_ip_id: Optional[builtins.str] = None,
                 hostname: Optional[builtins.str] = None,
                 memory_size_in_gbs: Optional[builtins.int] = None,
                 ocid: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 tags: Optional[Sequence['outputs.CloudVmClusterTag']] = None,
                 vnic2_id: Optional[builtins.str] = None,
                 vnic_id: Optional[builtins.str] = None):
        """
        A DbNode is a virtual machine that hosts Oracle database instances and provides access to shared storage servers within a VM Cluster
        :param builtins.str db_server_id: The unique identifier of the database server that's associated with the DB node.
        :param builtins.str backup_ip_id: The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.
        :param builtins.str backup_vnic2_id: The OCID of the second backup virtual network interface card (VNIC) for the DB node.
        :param builtins.int cpu_core_count: The number of CPU cores enabled on the DB node.
        :param builtins.str db_node_arn: The Amazon Resource Name (ARN) of the DB node.
        :param builtins.str db_node_id: The unique identifier of the DB node.
        :param builtins.int db_node_storage_size_in_gbs: The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.
        :param builtins.str db_system_id: The OCID of the DB system.
        :param builtins.str host_ip_id: The OCID of the host IP address that's associated with the DB node.
        :param builtins.str hostname: The host name for the DB node.
        :param builtins.int memory_size_in_gbs: The amount of memory, in gigabytes (GB), that allocated on the DB node.
        :param builtins.str ocid: The OCID of the DB node.
        :param builtins.str status: The current status of the DB node.
        :param builtins.str vnic2_id: The OCID of the second VNIC.
        :param builtins.str vnic_id: The OCID of the VNIC.
        """
        pulumi.set(__self__, "db_server_id", db_server_id)
        if backup_ip_id is not None:
            pulumi.set(__self__, "backup_ip_id", backup_ip_id)
        if backup_vnic2_id is not None:
            pulumi.set(__self__, "backup_vnic2_id", backup_vnic2_id)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if db_node_arn is not None:
            pulumi.set(__self__, "db_node_arn", db_node_arn)
        if db_node_id is not None:
            pulumi.set(__self__, "db_node_id", db_node_id)
        if db_node_storage_size_in_gbs is not None:
            pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if host_ip_id is not None:
            pulumi.set(__self__, "host_ip_id", host_ip_id)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vnic2_id is not None:
            pulumi.set(__self__, "vnic2_id", vnic2_id)
        if vnic_id is not None:
            pulumi.set(__self__, "vnic_id", vnic_id)

    @property
    @pulumi.getter(name="dbServerId")
    def db_server_id(self) -> builtins.str:
        """
        The unique identifier of the database server that's associated with the DB node.
        """
        return pulumi.get(self, "db_server_id")

    @property
    @pulumi.getter(name="backupIpId")
    def backup_ip_id(self) -> Optional[builtins.str]:
        """
        The Oracle Cloud ID (OCID) of the backup IP address that's associated with the DB node.
        """
        return pulumi.get(self, "backup_ip_id")

    @property
    @pulumi.getter(name="backupVnic2Id")
    def backup_vnic2_id(self) -> Optional[builtins.str]:
        """
        The OCID of the second backup virtual network interface card (VNIC) for the DB node.
        """
        return pulumi.get(self, "backup_vnic2_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[builtins.int]:
        """
        The number of CPU cores enabled on the DB node.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="dbNodeArn")
    def db_node_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the DB node.
        """
        return pulumi.get(self, "db_node_arn")

    @property
    @pulumi.getter(name="dbNodeId")
    def db_node_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the DB node.
        """
        return pulumi.get(self, "db_node_id")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated on the DB node.
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[builtins.str]:
        """
        The OCID of the DB system.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="hostIpId")
    def host_ip_id(self) -> Optional[builtins.str]:
        """
        The OCID of the host IP address that's associated with the DB node.
        """
        return pulumi.get(self, "host_ip_id")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        """
        The host name for the DB node.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The amount of memory, in gigabytes (GB), that allocated on the DB node.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[builtins.str]:
        """
        The OCID of the DB node.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The current status of the DB node.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CloudVmClusterTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vnic2Id")
    def vnic2_id(self) -> Optional[builtins.str]:
        """
        The OCID of the second VNIC.
        """
        return pulumi.get(self, "vnic2_id")

    @property
    @pulumi.getter(name="vnicId")
    def vnic_id(self) -> Optional[builtins.str]:
        """
        The OCID of the VNIC.
        """
        return pulumi.get(self, "vnic_id")


@pulumi.output_type
class CloudVmClusterTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: builtins.str,
                 value: Optional[builtins.str] = None):
        """
        A key-value pair to associate with a resource.
        :param builtins.str key: The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and ".
        :param builtins.str value: The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and ".
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OdbNetworkManagedServices(dict):
    """
    The managed services configuration for the ODB network.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managedS3BackupAccess":
            suggest = "managed_s3_backup_access"
        elif key == "managedServicesIpv4Cidrs":
            suggest = "managed_services_ipv4_cidrs"
        elif key == "resourceGatewayArn":
            suggest = "resource_gateway_arn"
        elif key == "s3Access":
            suggest = "s3_access"
        elif key == "serviceNetworkArn":
            suggest = "service_network_arn"
        elif key == "serviceNetworkEndpoint":
            suggest = "service_network_endpoint"
        elif key == "zeroEtlAccess":
            suggest = "zero_etl_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdbNetworkManagedServices. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdbNetworkManagedServices.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdbNetworkManagedServices.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 managed_s3_backup_access: Optional['outputs.OdbNetworkManagedServicesManagedS3BackupAccessProperties'] = None,
                 managed_services_ipv4_cidrs: Optional[Sequence[builtins.str]] = None,
                 resource_gateway_arn: Optional[builtins.str] = None,
                 s3_access: Optional['outputs.OdbNetworkManagedServicesS3AccessProperties'] = None,
                 service_network_arn: Optional[builtins.str] = None,
                 service_network_endpoint: Optional['outputs.OdbNetworkManagedServicesServiceNetworkEndpointProperties'] = None,
                 zero_etl_access: Optional['outputs.OdbNetworkManagedServicesZeroEtlAccessProperties'] = None):
        """
        The managed services configuration for the ODB network.
        :param 'OdbNetworkManagedServicesManagedS3BackupAccessProperties' managed_s3_backup_access: The managed Amazon S3 backup access configuration.
        :param Sequence[builtins.str] managed_services_ipv4_cidrs: The IPv4 CIDR blocks for the managed services.
        :param builtins.str resource_gateway_arn: The Amazon Resource Name (ARN) of the resource gateway.
        :param 'OdbNetworkManagedServicesS3AccessProperties' s3_access: The Amazon S3 access configuration.
        :param builtins.str service_network_arn: The Amazon Resource Name (ARN) of the service network.
        :param 'OdbNetworkManagedServicesServiceNetworkEndpointProperties' service_network_endpoint: The service network endpoint configuration.
        :param 'OdbNetworkManagedServicesZeroEtlAccessProperties' zero_etl_access: The Zero-ETL access configuration.
        """
        if managed_s3_backup_access is not None:
            pulumi.set(__self__, "managed_s3_backup_access", managed_s3_backup_access)
        if managed_services_ipv4_cidrs is not None:
            pulumi.set(__self__, "managed_services_ipv4_cidrs", managed_services_ipv4_cidrs)
        if resource_gateway_arn is not None:
            pulumi.set(__self__, "resource_gateway_arn", resource_gateway_arn)
        if s3_access is not None:
            pulumi.set(__self__, "s3_access", s3_access)
        if service_network_arn is not None:
            pulumi.set(__self__, "service_network_arn", service_network_arn)
        if service_network_endpoint is not None:
            pulumi.set(__self__, "service_network_endpoint", service_network_endpoint)
        if zero_etl_access is not None:
            pulumi.set(__self__, "zero_etl_access", zero_etl_access)

    @property
    @pulumi.getter(name="managedS3BackupAccess")
    def managed_s3_backup_access(self) -> Optional['outputs.OdbNetworkManagedServicesManagedS3BackupAccessProperties']:
        """
        The managed Amazon S3 backup access configuration.
        """
        return pulumi.get(self, "managed_s3_backup_access")

    @property
    @pulumi.getter(name="managedServicesIpv4Cidrs")
    def managed_services_ipv4_cidrs(self) -> Optional[Sequence[builtins.str]]:
        """
        The IPv4 CIDR blocks for the managed services.
        """
        return pulumi.get(self, "managed_services_ipv4_cidrs")

    @property
    @pulumi.getter(name="resourceGatewayArn")
    def resource_gateway_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the resource gateway.
        """
        return pulumi.get(self, "resource_gateway_arn")

    @property
    @pulumi.getter(name="s3Access")
    def s3_access(self) -> Optional['outputs.OdbNetworkManagedServicesS3AccessProperties']:
        """
        The Amazon S3 access configuration.
        """
        return pulumi.get(self, "s3_access")

    @property
    @pulumi.getter(name="serviceNetworkArn")
    def service_network_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the service network.
        """
        return pulumi.get(self, "service_network_arn")

    @property
    @pulumi.getter(name="serviceNetworkEndpoint")
    def service_network_endpoint(self) -> Optional['outputs.OdbNetworkManagedServicesServiceNetworkEndpointProperties']:
        """
        The service network endpoint configuration.
        """
        return pulumi.get(self, "service_network_endpoint")

    @property
    @pulumi.getter(name="zeroEtlAccess")
    def zero_etl_access(self) -> Optional['outputs.OdbNetworkManagedServicesZeroEtlAccessProperties']:
        """
        The Zero-ETL access configuration.
        """
        return pulumi.get(self, "zero_etl_access")


@pulumi.output_type
class OdbNetworkManagedServicesManagedS3BackupAccessProperties(dict):
    """
    The managed Amazon S3 backup access configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Addresses":
            suggest = "ipv4_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdbNetworkManagedServicesManagedS3BackupAccessProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdbNetworkManagedServicesManagedS3BackupAccessProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdbNetworkManagedServicesManagedS3BackupAccessProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_addresses: Optional[Sequence[builtins.str]] = None,
                 status: Optional['OdbNetworkManagedResourceStatus'] = None):
        """
        The managed Amazon S3 backup access configuration.
        :param Sequence[builtins.str] ipv4_addresses: The IPv4 addresses for the managed Amazon S3 backup access.
        :param 'OdbNetworkManagedResourceStatus' status: The status of the managed Amazon S3 backup access.
        """
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[Sequence[builtins.str]]:
        """
        The IPv4 addresses for the managed Amazon S3 backup access.
        """
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter
    def status(self) -> Optional['OdbNetworkManagedResourceStatus']:
        """
        The status of the managed Amazon S3 backup access.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class OdbNetworkManagedServicesS3AccessProperties(dict):
    """
    The Amazon S3 access configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "ipv4Addresses":
            suggest = "ipv4_addresses"
        elif key == "s3PolicyDocument":
            suggest = "s3_policy_document"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdbNetworkManagedServicesS3AccessProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdbNetworkManagedServicesS3AccessProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdbNetworkManagedServicesS3AccessProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[builtins.str] = None,
                 ipv4_addresses: Optional[Sequence[builtins.str]] = None,
                 s3_policy_document: Optional[builtins.str] = None,
                 status: Optional['OdbNetworkManagedResourceStatus'] = None):
        """
        The Amazon S3 access configuration.
        :param builtins.str domain_name: The domain name for the Amazon S3 access.
        :param Sequence[builtins.str] ipv4_addresses: The IPv4 addresses for the Amazon S3 access.
        :param builtins.str s3_policy_document: The endpoint policy for the Amazon S3 access.
        :param 'OdbNetworkManagedResourceStatus' status: The status of the Amazon S3 access.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if s3_policy_document is not None:
            pulumi.set(__self__, "s3_policy_document", s3_policy_document)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[builtins.str]:
        """
        The domain name for the Amazon S3 access.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[Sequence[builtins.str]]:
        """
        The IPv4 addresses for the Amazon S3 access.
        """
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter(name="s3PolicyDocument")
    def s3_policy_document(self) -> Optional[builtins.str]:
        """
        The endpoint policy for the Amazon S3 access.
        """
        return pulumi.get(self, "s3_policy_document")

    @property
    @pulumi.getter
    def status(self) -> Optional['OdbNetworkManagedResourceStatus']:
        """
        The status of the Amazon S3 access.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class OdbNetworkManagedServicesServiceNetworkEndpointProperties(dict):
    """
    The service network endpoint configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcEndpointId":
            suggest = "vpc_endpoint_id"
        elif key == "vpcEndpointType":
            suggest = "vpc_endpoint_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OdbNetworkManagedServicesServiceNetworkEndpointProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OdbNetworkManagedServicesServiceNetworkEndpointProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OdbNetworkManagedServicesServiceNetworkEndpointProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpc_endpoint_id: Optional[builtins.str] = None,
                 vpc_endpoint_type: Optional['OdbNetworkManagedServicesServiceNetworkEndpointPropertiesVpcEndpointType'] = None):
        """
        The service network endpoint configuration.
        :param builtins.str vpc_endpoint_id: The identifier of the VPC endpoint.
        :param 'OdbNetworkManagedServicesServiceNetworkEndpointPropertiesVpcEndpointType' vpc_endpoint_type: The type of the VPC endpoint.
        """
        if vpc_endpoint_id is not None:
            pulumi.set(__self__, "vpc_endpoint_id", vpc_endpoint_id)
        if vpc_endpoint_type is not None:
            pulumi.set(__self__, "vpc_endpoint_type", vpc_endpoint_type)

    @property
    @pulumi.getter(name="vpcEndpointId")
    def vpc_endpoint_id(self) -> Optional[builtins.str]:
        """
        The identifier of the VPC endpoint.
        """
        return pulumi.get(self, "vpc_endpoint_id")

    @property
    @pulumi.getter(name="vpcEndpointType")
    def vpc_endpoint_type(self) -> Optional['OdbNetworkManagedServicesServiceNetworkEndpointPropertiesVpcEndpointType']:
        """
        The type of the VPC endpoint.
        """
        return pulumi.get(self, "vpc_endpoint_type")


@pulumi.output_type
class OdbNetworkManagedServicesZeroEtlAccessProperties(dict):
    """
    The Zero-ETL access configuration.
    """
    def __init__(__self__, *,
                 cidr: Optional[builtins.str] = None,
                 status: Optional['OdbNetworkManagedResourceStatus'] = None):
        """
        The Zero-ETL access configuration.
        :param builtins.str cidr: The CIDR block for the Zero-ETL access.
        :param 'OdbNetworkManagedResourceStatus' status: The status of the Zero-ETL access.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[builtins.str]:
        """
        The CIDR block for the Zero-ETL access.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def status(self) -> Optional['OdbNetworkManagedResourceStatus']:
        """
        The status of the Zero-ETL access.
        """
        return pulumi.get(self, "status")


