# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'CloudAutonomousVmClusterMaintenanceWindow',
    'CloudExadataInfrastructureCustomerContact',
    'CloudVmClusterDataCollectionOptions',
]

@pulumi.output_type
class CloudAutonomousVmClusterMaintenanceWindow(dict):
    """
    The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysOfWeek":
            suggest = "days_of_week"
        elif key == "hoursOfDay":
            suggest = "hours_of_day"
        elif key == "leadTimeInWeeks":
            suggest = "lead_time_in_weeks"
        elif key == "weeksOfMonth":
            suggest = "weeks_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAutonomousVmClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAutonomousVmClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_of_week: Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']] = None,
                 hours_of_day: Optional[Sequence[builtins.int]] = None,
                 lead_time_in_weeks: Optional[builtins.int] = None,
                 months: Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']] = None,
                 preference: Optional['CloudAutonomousVmClusterMaintenanceWindowPreference'] = None,
                 weeks_of_month: Optional[Sequence[builtins.int]] = None):
        """
        The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem'] days_of_week: The days of the week when maintenance can be performed.
        :param Sequence[builtins.int] hours_of_day: The hours of the day when maintenance can be performed.
        :param builtins.int lead_time_in_weeks: The lead time in weeks before the maintenance window.
        :param Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem'] months: The months when maintenance can be performed.
        :param 'CloudAutonomousVmClusterMaintenanceWindowPreference' preference: The preference for the maintenance window scheduling.
        :param Sequence[builtins.int] weeks_of_month: The weeks of the month when maintenance can be performed.
        """
        if days_of_week is not None:
            pulumi.set(__self__, "days_of_week", days_of_week)
        if hours_of_day is not None:
            pulumi.set(__self__, "hours_of_day", hours_of_day)
        if lead_time_in_weeks is not None:
            pulumi.set(__self__, "lead_time_in_weeks", lead_time_in_weeks)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_month is not None:
            pulumi.set(__self__, "weeks_of_month", weeks_of_month)

    @property
    @pulumi.getter(name="daysOfWeek")
    def days_of_week(self) -> Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowDaysOfWeekItem']]:
        """
        The days of the week when maintenance can be performed.
        """
        return pulumi.get(self, "days_of_week")

    @property
    @pulumi.getter(name="hoursOfDay")
    def hours_of_day(self) -> Optional[Sequence[builtins.int]]:
        """
        The hours of the day when maintenance can be performed.
        """
        return pulumi.get(self, "hours_of_day")

    @property
    @pulumi.getter(name="leadTimeInWeeks")
    def lead_time_in_weeks(self) -> Optional[builtins.int]:
        """
        The lead time in weeks before the maintenance window.
        """
        return pulumi.get(self, "lead_time_in_weeks")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence['CloudAutonomousVmClusterMaintenanceWindowMonthsItem']]:
        """
        The months when maintenance can be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter
    def preference(self) -> Optional['CloudAutonomousVmClusterMaintenanceWindowPreference']:
        """
        The preference for the maintenance window scheduling.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonth")
    def weeks_of_month(self) -> Optional[Sequence[builtins.int]]:
        """
        The weeks of the month when maintenance can be performed.
        """
        return pulumi.get(self, "weeks_of_month")


@pulumi.output_type
class CloudExadataInfrastructureCustomerContact(dict):
    """
    A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
    """
    def __init__(__self__, *,
                 email: Optional[builtins.str] = None):
        """
        A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.
        :param builtins.str email: The email address of the contact.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        """
        The email address of the contact.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class CloudVmClusterDataCollectionOptions(dict):
    """
    Information about the data collection options enabled for a VM cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDiagnosticsEventsEnabled":
            suggest = "is_diagnostics_events_enabled"
        elif key == "isHealthMonitoringEnabled":
            suggest = "is_health_monitoring_enabled"
        elif key == "isIncidentLogsEnabled":
            suggest = "is_incident_logs_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterDataCollectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterDataCollectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_diagnostics_events_enabled: Optional[builtins.bool] = None,
                 is_health_monitoring_enabled: Optional[builtins.bool] = None,
                 is_incident_logs_enabled: Optional[builtins.bool] = None):
        """
        Information about the data collection options enabled for a VM cluster.
        :param builtins.bool is_diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster.
        :param builtins.bool is_health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster.
        :param builtins.bool is_incident_logs_enabled: Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        if is_diagnostics_events_enabled is not None:
            pulumi.set(__self__, "is_diagnostics_events_enabled", is_diagnostics_events_enabled)
        if is_health_monitoring_enabled is not None:
            pulumi.set(__self__, "is_health_monitoring_enabled", is_health_monitoring_enabled)
        if is_incident_logs_enabled is not None:
            pulumi.set(__self__, "is_incident_logs_enabled", is_incident_logs_enabled)

    @property
    @pulumi.getter(name="isDiagnosticsEventsEnabled")
    def is_diagnostics_events_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_diagnostics_events_enabled")

    @property
    @pulumi.getter(name="isHealthMonitoringEnabled")
    def is_health_monitoring_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether health monitoring is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_health_monitoring_enabled")

    @property
    @pulumi.getter(name="isIncidentLogsEnabled")
    def is_incident_logs_enabled(self) -> Optional[builtins.bool]:
        """
        Indicates whether incident logs are enabled for the cloud VM cluster.
        """
        return pulumi.get(self, "is_incident_logs_enabled")


