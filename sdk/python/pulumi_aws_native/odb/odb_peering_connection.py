# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs

__all__ = ['OdbPeeringConnectionArgs', 'OdbPeeringConnection']

@pulumi.input_type
class OdbPeeringConnectionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 peer_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a OdbPeeringConnection resource.
        :param pulumi.Input[builtins.str] display_name: The name of the ODB peering connection.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network.
        :param pulumi.Input[builtins.str] peer_network_id: The unique identifier of the peer network.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: Tags to assign to the Odb peering connection.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if odb_network_id is not None:
            pulumi.set(__self__, "odb_network_id", odb_network_id)
        if peer_network_id is not None:
            pulumi.set(__self__, "peer_network_id", peer_network_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the ODB peering connection.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the ODB network.
        """
        return pulumi.get(self, "odb_network_id")

    @odb_network_id.setter
    def odb_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "odb_network_id", value)

    @property
    @pulumi.getter(name="peerNetworkId")
    def peer_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the peer network.
        """
        return pulumi.get(self, "peer_network_id")

    @peer_network_id.setter
    def peer_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "peer_network_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        Tags to assign to the Odb peering connection.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:odb:OdbPeeringConnection")
class OdbPeeringConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 peer_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::ODB::OdbPeeringConnection.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] display_name: The name of the ODB peering connection.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network.
        :param pulumi.Input[builtins.str] peer_network_id: The unique identifier of the peer network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: Tags to assign to the Odb peering connection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OdbPeeringConnectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::ODB::OdbPeeringConnection.

        :param str resource_name: The name of the resource.
        :param OdbPeeringConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OdbPeeringConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 peer_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OdbPeeringConnectionArgs.__new__(OdbPeeringConnectionArgs)

            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["odb_network_id"] = odb_network_id
            __props__.__dict__["peer_network_id"] = peer_network_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["odb_network_arn"] = None
            __props__.__dict__["odb_peering_connection_arn"] = None
            __props__.__dict__["odb_peering_connection_id"] = None
            __props__.__dict__["peer_network_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["displayName", "odbNetworkId", "peerNetworkId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(OdbPeeringConnection, __self__).__init__(
            'aws-native:odb:OdbPeeringConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'OdbPeeringConnection':
        """
        Get an existing OdbPeeringConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = OdbPeeringConnectionArgs.__new__(OdbPeeringConnectionArgs)

        __props__.__dict__["display_name"] = None
        __props__.__dict__["odb_network_arn"] = None
        __props__.__dict__["odb_network_id"] = None
        __props__.__dict__["odb_peering_connection_arn"] = None
        __props__.__dict__["odb_peering_connection_id"] = None
        __props__.__dict__["peer_network_arn"] = None
        __props__.__dict__["peer_network_id"] = None
        __props__.__dict__["tags"] = None
        return OdbPeeringConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the ODB peering connection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="odbNetworkArn")
    def odb_network_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ODB network.
        """
        return pulumi.get(self, "odb_network_arn")

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the ODB network.
        """
        return pulumi.get(self, "odb_network_id")

    @property
    @pulumi.getter(name="odbPeeringConnectionArn")
    def odb_peering_connection_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ODB peering connection.
        """
        return pulumi.get(self, "odb_peering_connection_arn")

    @property
    @pulumi.getter(name="odbPeeringConnectionId")
    def odb_peering_connection_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the ODB peering connection.
        """
        return pulumi.get(self, "odb_peering_connection_id")

    @property
    @pulumi.getter(name="peerNetworkArn")
    def peer_network_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the peer network.
        """
        return pulumi.get(self, "peer_network_arn")

    @property
    @pulumi.getter(name="peerNetworkId")
    def peer_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the peer network.
        """
        return pulumi.get(self, "peer_network_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        Tags to assign to the Odb peering connection.
        """
        return pulumi.get(self, "tags")

