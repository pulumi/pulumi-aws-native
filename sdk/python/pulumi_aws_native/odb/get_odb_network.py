# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetOdbNetworkResult',
    'AwaitableGetOdbNetworkResult',
    'get_odb_network',
    'get_odb_network_output',
]

@pulumi.output_type
class GetOdbNetworkResult:
    def __init__(__self__, oci_network_anchor_id=None, oci_resource_anchor_name=None, oci_vcn_url=None, odb_network_arn=None, odb_network_id=None, tags=None):
        if oci_network_anchor_id and not isinstance(oci_network_anchor_id, str):
            raise TypeError("Expected argument 'oci_network_anchor_id' to be a str")
        pulumi.set(__self__, "oci_network_anchor_id", oci_network_anchor_id)
        if oci_resource_anchor_name and not isinstance(oci_resource_anchor_name, str):
            raise TypeError("Expected argument 'oci_resource_anchor_name' to be a str")
        pulumi.set(__self__, "oci_resource_anchor_name", oci_resource_anchor_name)
        if oci_vcn_url and not isinstance(oci_vcn_url, str):
            raise TypeError("Expected argument 'oci_vcn_url' to be a str")
        pulumi.set(__self__, "oci_vcn_url", oci_vcn_url)
        if odb_network_arn and not isinstance(odb_network_arn, str):
            raise TypeError("Expected argument 'odb_network_arn' to be a str")
        pulumi.set(__self__, "odb_network_arn", odb_network_arn)
        if odb_network_id and not isinstance(odb_network_id, str):
            raise TypeError("Expected argument 'odb_network_id' to be a str")
        pulumi.set(__self__, "odb_network_id", odb_network_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="ociNetworkAnchorId")
    def oci_network_anchor_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the OCI network anchor for the ODB network.
        """
        return pulumi.get(self, "oci_network_anchor_id")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> Optional[builtins.str]:
        """
        The name of the OCI resource anchor that's associated with the ODB network.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociVcnUrl")
    def oci_vcn_url(self) -> Optional[builtins.str]:
        """
        The URL for the VCN that's associated with the ODB network.
        """
        return pulumi.get(self, "oci_vcn_url")

    @property
    @pulumi.getter(name="odbNetworkArn")
    def odb_network_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ODB network.
        """
        return pulumi.get(self, "odb_network_arn")

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the ODB network.
        """
        return pulumi.get(self, "odb_network_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        Tags to assign to the Odb Network.
        """
        return pulumi.get(self, "tags")


class AwaitableGetOdbNetworkResult(GetOdbNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOdbNetworkResult(
            oci_network_anchor_id=self.oci_network_anchor_id,
            oci_resource_anchor_name=self.oci_resource_anchor_name,
            oci_vcn_url=self.oci_vcn_url,
            odb_network_arn=self.odb_network_arn,
            odb_network_id=self.odb_network_id,
            tags=self.tags)


def get_odb_network(odb_network_arn: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOdbNetworkResult:
    """
    The AWS::ODB::OdbNetwork resource creates an ODB Network


    :param builtins.str odb_network_arn: The Amazon Resource Name (ARN) of the ODB network.
    """
    __args__ = dict()
    __args__['odbNetworkArn'] = odb_network_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:odb:getOdbNetwork', __args__, opts=opts, typ=GetOdbNetworkResult).value

    return AwaitableGetOdbNetworkResult(
        oci_network_anchor_id=pulumi.get(__ret__, 'oci_network_anchor_id'),
        oci_resource_anchor_name=pulumi.get(__ret__, 'oci_resource_anchor_name'),
        oci_vcn_url=pulumi.get(__ret__, 'oci_vcn_url'),
        odb_network_arn=pulumi.get(__ret__, 'odb_network_arn'),
        odb_network_id=pulumi.get(__ret__, 'odb_network_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_odb_network_output(odb_network_arn: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOdbNetworkResult]:
    """
    The AWS::ODB::OdbNetwork resource creates an ODB Network


    :param builtins.str odb_network_arn: The Amazon Resource Name (ARN) of the ODB network.
    """
    __args__ = dict()
    __args__['odbNetworkArn'] = odb_network_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:odb:getOdbNetwork', __args__, opts=opts, typ=GetOdbNetworkResult)
    return __ret__.apply(lambda __response__: GetOdbNetworkResult(
        oci_network_anchor_id=pulumi.get(__response__, 'oci_network_anchor_id'),
        oci_resource_anchor_name=pulumi.get(__response__, 'oci_resource_anchor_name'),
        oci_vcn_url=pulumi.get(__response__, 'oci_vcn_url'),
        odb_network_arn=pulumi.get(__response__, 'odb_network_arn'),
        odb_network_id=pulumi.get(__response__, 'odb_network_id'),
        tags=pulumi.get(__response__, 'tags')))
