# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetCloudVmClusterResult',
    'AwaitableGetCloudVmClusterResult',
    'get_cloud_vm_cluster',
    'get_cloud_vm_cluster_output',
]

@pulumi.output_type
class GetCloudVmClusterResult:
    def __init__(__self__, cloud_vm_cluster_arn=None, cloud_vm_cluster_id=None, compute_model=None, disk_redundancy=None, domain=None, listener_port=None, node_count=None, oci_resource_anchor_name=None, oci_url=None, ocid=None, scan_dns_name=None, scan_ip_ids=None, shape=None, storage_size_in_gbs=None, tags=None, vip_ids=None):
        if cloud_vm_cluster_arn and not isinstance(cloud_vm_cluster_arn, str):
            raise TypeError("Expected argument 'cloud_vm_cluster_arn' to be a str")
        pulumi.set(__self__, "cloud_vm_cluster_arn", cloud_vm_cluster_arn)
        if cloud_vm_cluster_id and not isinstance(cloud_vm_cluster_id, str):
            raise TypeError("Expected argument 'cloud_vm_cluster_id' to be a str")
        pulumi.set(__self__, "cloud_vm_cluster_id", cloud_vm_cluster_id)
        if compute_model and not isinstance(compute_model, str):
            raise TypeError("Expected argument 'compute_model' to be a str")
        pulumi.set(__self__, "compute_model", compute_model)
        if disk_redundancy and not isinstance(disk_redundancy, str):
            raise TypeError("Expected argument 'disk_redundancy' to be a str")
        pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if listener_port and not isinstance(listener_port, int):
            raise TypeError("Expected argument 'listener_port' to be a int")
        pulumi.set(__self__, "listener_port", listener_port)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if oci_resource_anchor_name and not isinstance(oci_resource_anchor_name, str):
            raise TypeError("Expected argument 'oci_resource_anchor_name' to be a str")
        pulumi.set(__self__, "oci_resource_anchor_name", oci_resource_anchor_name)
        if oci_url and not isinstance(oci_url, str):
            raise TypeError("Expected argument 'oci_url' to be a str")
        pulumi.set(__self__, "oci_url", oci_url)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if scan_dns_name and not isinstance(scan_dns_name, str):
            raise TypeError("Expected argument 'scan_dns_name' to be a str")
        pulumi.set(__self__, "scan_dns_name", scan_dns_name)
        if scan_ip_ids and not isinstance(scan_ip_ids, list):
            raise TypeError("Expected argument 'scan_ip_ids' to be a list")
        pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        if shape and not isinstance(shape, str):
            raise TypeError("Expected argument 'shape' to be a str")
        pulumi.set(__self__, "shape", shape)
        if storage_size_in_gbs and not isinstance(storage_size_in_gbs, int):
            raise TypeError("Expected argument 'storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "storage_size_in_gbs", storage_size_in_gbs)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vip_ids and not isinstance(vip_ids, list):
            raise TypeError("Expected argument 'vip_ids' to be a list")
        pulumi.set(__self__, "vip_ids", vip_ids)

    @property
    @pulumi.getter(name="cloudVmClusterArn")
    def cloud_vm_cluster_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the VM cluster.
        """
        return pulumi.get(self, "cloud_vm_cluster_arn")

    @property
    @pulumi.getter(name="cloudVmClusterId")
    def cloud_vm_cluster_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the VM cluster.
        """
        return pulumi.get(self, "cloud_vm_cluster_id")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> Optional[builtins.str]:
        """
        The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> Optional[builtins.str]:
        """
        The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter
    def domain(self) -> Optional[builtins.str]:
        """
        The domain of the VM cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[builtins.int]:
        """
        The port number configured for the listener on the VM cluster.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[builtins.int]:
        """
        The number of nodes in the VM cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> Optional[builtins.str]:
        """
        The name of the OCI resource anchor for the VM cluster.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[builtins.str]:
        """
        The HTTPS link to the VM cluster in OCI.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[builtins.str]:
        """
        The OCID of the VM cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="scanDnsName")
    def scan_dns_name(self) -> Optional[builtins.str]:
        """
        The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
        """
        return pulumi.get(self, "scan_dns_name")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The OCID of the SCAN IP addresses that are associated with the VM cluster.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter
    def shape(self) -> Optional[builtins.str]:
        """
        The hardware model name of the Exadata infrastructure that's running the VM cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        Tags to assign to the Vm Cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vipIds")
    def vip_ids(self) -> Optional[Sequence[builtins.str]]:
        """
        The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
        """
        return pulumi.get(self, "vip_ids")


class AwaitableGetCloudVmClusterResult(GetCloudVmClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudVmClusterResult(
            cloud_vm_cluster_arn=self.cloud_vm_cluster_arn,
            cloud_vm_cluster_id=self.cloud_vm_cluster_id,
            compute_model=self.compute_model,
            disk_redundancy=self.disk_redundancy,
            domain=self.domain,
            listener_port=self.listener_port,
            node_count=self.node_count,
            oci_resource_anchor_name=self.oci_resource_anchor_name,
            oci_url=self.oci_url,
            ocid=self.ocid,
            scan_dns_name=self.scan_dns_name,
            scan_ip_ids=self.scan_ip_ids,
            shape=self.shape,
            storage_size_in_gbs=self.storage_size_in_gbs,
            tags=self.tags,
            vip_ids=self.vip_ids)


def get_cloud_vm_cluster(cloud_vm_cluster_arn: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudVmClusterResult:
    """
    The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster


    :param builtins.str cloud_vm_cluster_arn: The Amazon Resource Name (ARN) of the VM cluster.
    """
    __args__ = dict()
    __args__['cloudVmClusterArn'] = cloud_vm_cluster_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:odb:getCloudVmCluster', __args__, opts=opts, typ=GetCloudVmClusterResult).value

    return AwaitableGetCloudVmClusterResult(
        cloud_vm_cluster_arn=pulumi.get(__ret__, 'cloud_vm_cluster_arn'),
        cloud_vm_cluster_id=pulumi.get(__ret__, 'cloud_vm_cluster_id'),
        compute_model=pulumi.get(__ret__, 'compute_model'),
        disk_redundancy=pulumi.get(__ret__, 'disk_redundancy'),
        domain=pulumi.get(__ret__, 'domain'),
        listener_port=pulumi.get(__ret__, 'listener_port'),
        node_count=pulumi.get(__ret__, 'node_count'),
        oci_resource_anchor_name=pulumi.get(__ret__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__ret__, 'oci_url'),
        ocid=pulumi.get(__ret__, 'ocid'),
        scan_dns_name=pulumi.get(__ret__, 'scan_dns_name'),
        scan_ip_ids=pulumi.get(__ret__, 'scan_ip_ids'),
        shape=pulumi.get(__ret__, 'shape'),
        storage_size_in_gbs=pulumi.get(__ret__, 'storage_size_in_gbs'),
        tags=pulumi.get(__ret__, 'tags'),
        vip_ids=pulumi.get(__ret__, 'vip_ids'))
def get_cloud_vm_cluster_output(cloud_vm_cluster_arn: Optional[pulumi.Input[builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudVmClusterResult]:
    """
    The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster


    :param builtins.str cloud_vm_cluster_arn: The Amazon Resource Name (ARN) of the VM cluster.
    """
    __args__ = dict()
    __args__['cloudVmClusterArn'] = cloud_vm_cluster_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:odb:getCloudVmCluster', __args__, opts=opts, typ=GetCloudVmClusterResult)
    return __ret__.apply(lambda __response__: GetCloudVmClusterResult(
        cloud_vm_cluster_arn=pulumi.get(__response__, 'cloud_vm_cluster_arn'),
        cloud_vm_cluster_id=pulumi.get(__response__, 'cloud_vm_cluster_id'),
        compute_model=pulumi.get(__response__, 'compute_model'),
        disk_redundancy=pulumi.get(__response__, 'disk_redundancy'),
        domain=pulumi.get(__response__, 'domain'),
        listener_port=pulumi.get(__response__, 'listener_port'),
        node_count=pulumi.get(__response__, 'node_count'),
        oci_resource_anchor_name=pulumi.get(__response__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__response__, 'oci_url'),
        ocid=pulumi.get(__response__, 'ocid'),
        scan_dns_name=pulumi.get(__response__, 'scan_dns_name'),
        scan_ip_ids=pulumi.get(__response__, 'scan_ip_ids'),
        shape=pulumi.get(__response__, 'shape'),
        storage_size_in_gbs=pulumi.get(__response__, 'storage_size_in_gbs'),
        tags=pulumi.get(__response__, 'tags'),
        vip_ids=pulumi.get(__response__, 'vip_ids')))
