# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['CloudExadataInfrastructureArgs', 'CloudExadataInfrastructure']

@pulumi.input_type
class CloudExadataInfrastructureArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 compute_count: Optional[pulumi.Input[builtins.int]] = None,
                 customer_contacts_to_send_to_oci: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureCustomerContactArgs']]]] = None,
                 database_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 shape: Optional[pulumi.Input[builtins.str]] = None,
                 storage_count: Optional[pulumi.Input[builtins.int]] = None,
                 storage_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a CloudExadataInfrastructure resource.
        :param pulumi.Input[builtins.str] availability_zone: The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        :param pulumi.Input[builtins.str] availability_zone_id: The AZ ID of the AZ where the Exadata infrastructure is located.
        :param pulumi.Input[builtins.int] compute_count: The number of database servers for the Exadata infrastructure.
        :param pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureCustomerContactArgs']]] customer_contacts_to_send_to_oci: The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] database_server_type: The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        :param pulumi.Input[builtins.str] display_name: The user-friendly name for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] shape: The model name of the Exadata infrastructure.
        :param pulumi.Input[builtins.int] storage_count: The number of storage servers that are activated for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] storage_server_type: The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: Tags to assign to the Exadata Infrastructure.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if availability_zone_id is not None:
            pulumi.set(__self__, "availability_zone_id", availability_zone_id)
        if compute_count is not None:
            pulumi.set(__self__, "compute_count", compute_count)
        if customer_contacts_to_send_to_oci is not None:
            pulumi.set(__self__, "customer_contacts_to_send_to_oci", customer_contacts_to_send_to_oci)
        if database_server_type is not None:
            pulumi.set(__self__, "database_server_type", database_server_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if storage_count is not None:
            pulumi.set(__self__, "storage_count", storage_count)
        if storage_server_type is not None:
            pulumi.set(__self__, "storage_server_type", storage_server_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="availabilityZoneId")
    def availability_zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The AZ ID of the AZ where the Exadata infrastructure is located.
        """
        return pulumi.get(self, "availability_zone_id")

    @availability_zone_id.setter
    def availability_zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone_id", value)

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of database servers for the Exadata infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @compute_count.setter
    def compute_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "compute_count", value)

    @property
    @pulumi.getter(name="customerContactsToSendToOci")
    def customer_contacts_to_send_to_oci(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureCustomerContactArgs']]]]:
        """
        The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        """
        return pulumi.get(self, "customer_contacts_to_send_to_oci")

    @customer_contacts_to_send_to_oci.setter
    def customer_contacts_to_send_to_oci(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructureCustomerContactArgs']]]]):
        pulumi.set(self, "customer_contacts_to_send_to_oci", value)

    @property
    @pulumi.getter(name="databaseServerType")
    def database_server_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        """
        return pulumi.get(self, "database_server_type")

    @database_server_type.setter
    def database_server_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database_server_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user-friendly name for the Exadata infrastructure.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The model name of the Exadata infrastructure.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of storage servers that are activated for the Exadata infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @storage_count.setter
    def storage_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "storage_count", value)

    @property
    @pulumi.getter(name="storageServerType")
    def storage_server_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        """
        return pulumi.get(self, "storage_server_type")

    @storage_server_type.setter
    def storage_server_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_server_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        Tags to assign to the Exadata Infrastructure.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:odb:CloudExadataInfrastructure")
class CloudExadataInfrastructure(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 compute_count: Optional[pulumi.Input[builtins.int]] = None,
                 customer_contacts_to_send_to_oci: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudExadataInfrastructureCustomerContactArgs', 'CloudExadataInfrastructureCustomerContactArgsDict']]]]] = None,
                 database_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 shape: Optional[pulumi.Input[builtins.str]] = None,
                 storage_count: Optional[pulumi.Input[builtins.int]] = None,
                 storage_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] availability_zone: The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        :param pulumi.Input[builtins.str] availability_zone_id: The AZ ID of the AZ where the Exadata infrastructure is located.
        :param pulumi.Input[builtins.int] compute_count: The number of database servers for the Exadata infrastructure.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudExadataInfrastructureCustomerContactArgs', 'CloudExadataInfrastructureCustomerContactArgsDict']]]] customer_contacts_to_send_to_oci: The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] database_server_type: The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        :param pulumi.Input[builtins.str] display_name: The user-friendly name for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] shape: The model name of the Exadata infrastructure.
        :param pulumi.Input[builtins.int] storage_count: The number of storage servers that are activated for the Exadata infrastructure.
        :param pulumi.Input[builtins.str] storage_server_type: The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: Tags to assign to the Exadata Infrastructure.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudExadataInfrastructureArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure

        :param str resource_name: The name of the resource.
        :param CloudExadataInfrastructureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudExadataInfrastructureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 availability_zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 compute_count: Optional[pulumi.Input[builtins.int]] = None,
                 customer_contacts_to_send_to_oci: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudExadataInfrastructureCustomerContactArgs', 'CloudExadataInfrastructureCustomerContactArgsDict']]]]] = None,
                 database_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 shape: Optional[pulumi.Input[builtins.str]] = None,
                 storage_count: Optional[pulumi.Input[builtins.int]] = None,
                 storage_server_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudExadataInfrastructureArgs.__new__(CloudExadataInfrastructureArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["availability_zone_id"] = availability_zone_id
            __props__.__dict__["compute_count"] = compute_count
            __props__.__dict__["customer_contacts_to_send_to_oci"] = customer_contacts_to_send_to_oci
            __props__.__dict__["database_server_type"] = database_server_type
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["shape"] = shape
            __props__.__dict__["storage_count"] = storage_count
            __props__.__dict__["storage_server_type"] = storage_server_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["activated_storage_count"] = None
            __props__.__dict__["additional_storage_count"] = None
            __props__.__dict__["available_storage_size_in_gbs"] = None
            __props__.__dict__["cloud_exadata_infrastructure_arn"] = None
            __props__.__dict__["cloud_exadata_infrastructure_id"] = None
            __props__.__dict__["compute_model"] = None
            __props__.__dict__["cpu_count"] = None
            __props__.__dict__["data_storage_size_in_tbs"] = None
            __props__.__dict__["db_node_storage_size_in_gbs"] = None
            __props__.__dict__["db_server_ids"] = None
            __props__.__dict__["db_server_version"] = None
            __props__.__dict__["max_cpu_count"] = None
            __props__.__dict__["max_data_storage_in_tbs"] = None
            __props__.__dict__["max_db_node_storage_size_in_gbs"] = None
            __props__.__dict__["max_memory_in_gbs"] = None
            __props__.__dict__["memory_size_in_gbs"] = None
            __props__.__dict__["oci_resource_anchor_name"] = None
            __props__.__dict__["oci_url"] = None
            __props__.__dict__["ocid"] = None
            __props__.__dict__["storage_server_version"] = None
            __props__.__dict__["total_storage_size_in_gbs"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["availabilityZone", "availabilityZoneId", "computeCount", "customerContactsToSendToOci[*]", "databaseServerType", "displayName", "shape", "storageCount", "storageServerType"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CloudExadataInfrastructure, __self__).__init__(
            'aws-native:odb:CloudExadataInfrastructure',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CloudExadataInfrastructure':
        """
        Get an existing CloudExadataInfrastructure resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CloudExadataInfrastructureArgs.__new__(CloudExadataInfrastructureArgs)

        __props__.__dict__["activated_storage_count"] = None
        __props__.__dict__["additional_storage_count"] = None
        __props__.__dict__["availability_zone"] = None
        __props__.__dict__["availability_zone_id"] = None
        __props__.__dict__["available_storage_size_in_gbs"] = None
        __props__.__dict__["cloud_exadata_infrastructure_arn"] = None
        __props__.__dict__["cloud_exadata_infrastructure_id"] = None
        __props__.__dict__["compute_count"] = None
        __props__.__dict__["compute_model"] = None
        __props__.__dict__["cpu_count"] = None
        __props__.__dict__["customer_contacts_to_send_to_oci"] = None
        __props__.__dict__["data_storage_size_in_tbs"] = None
        __props__.__dict__["database_server_type"] = None
        __props__.__dict__["db_node_storage_size_in_gbs"] = None
        __props__.__dict__["db_server_ids"] = None
        __props__.__dict__["db_server_version"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["max_cpu_count"] = None
        __props__.__dict__["max_data_storage_in_tbs"] = None
        __props__.__dict__["max_db_node_storage_size_in_gbs"] = None
        __props__.__dict__["max_memory_in_gbs"] = None
        __props__.__dict__["memory_size_in_gbs"] = None
        __props__.__dict__["oci_resource_anchor_name"] = None
        __props__.__dict__["oci_url"] = None
        __props__.__dict__["ocid"] = None
        __props__.__dict__["shape"] = None
        __props__.__dict__["storage_count"] = None
        __props__.__dict__["storage_server_type"] = None
        __props__.__dict__["storage_server_version"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["total_storage_size_in_gbs"] = None
        return CloudExadataInfrastructure(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> pulumi.Output[builtins.int]:
        """
        The number of storage servers requested for the Exadata infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> pulumi.Output[builtins.int]:
        """
        The number of storage servers requested for the Exadata infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="availabilityZoneId")
    def availability_zone_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The AZ ID of the AZ where the Exadata infrastructure is located.
        """
        return pulumi.get(self, "availability_zone_id")

    @property
    @pulumi.getter(name="availableStorageSizeInGbs")
    def available_storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
        """
        return pulumi.get(self, "available_storage_size_in_gbs")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureArn")
    def cloud_exadata_infrastructure_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) for the Exadata infrastructure.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_arn")

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier for the Exadata infrastructure.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of database servers for the Exadata infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> pulumi.Output[builtins.str]:
        """
        The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> pulumi.Output[builtins.int]:
        """
        The total number of CPU cores that are allocated to the Exadata infrastructure.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="customerContactsToSendToOci")
    def customer_contacts_to_send_to_oci(self) -> pulumi.Output[Optional[Sequence['outputs.CloudExadataInfrastructureCustomerContact']]]:
        """
        The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        """
        return pulumi.get(self, "customer_contacts_to_send_to_oci")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> pulumi.Output[builtins.float]:
        """
        The size of the Exadata infrastructure's data disk group, in terabytes (TB).
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="databaseServerType")
    def database_server_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        """
        return pulumi.get(self, "database_server_type")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbServerIds")
    def db_server_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of database server identifiers for the Exadata infrastructure.
        """
        return pulumi.get(self, "db_server_ids")

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> pulumi.Output[builtins.str]:
        """
        The software version of the database servers (dom0) in the Exadata infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The user-friendly name for the Exadata infrastructure.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> pulumi.Output[builtins.int]:
        """
        The total number of CPU cores available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_cpu_count")

    @property
    @pulumi.getter(name="maxDataStorageInTbs")
    def max_data_storage_in_tbs(self) -> pulumi.Output[builtins.float]:
        """
        The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_data_storage_in_tbs")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeInGbs")
    def max_db_node_storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="maxMemoryInGbs")
    def max_memory_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
        """
        return pulumi.get(self, "max_memory_in_gbs")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the OCI resource anchor for the Exadata infrastructure.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> pulumi.Output[builtins.str]:
        """
        The HTTPS link to the Exadata infrastructure in OCI.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> pulumi.Output[builtins.str]:
        """
        The OCID of the Exadata infrastructure.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The model name of the Exadata infrastructure.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of storage servers that are activated for the Exadata infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @property
    @pulumi.getter(name="storageServerType")
    def storage_server_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        """
        return pulumi.get(self, "storage_server_type")

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> pulumi.Output[builtins.str]:
        """
        The software version of the storage servers on the Exadata infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        Tags to assign to the Exadata Infrastructure.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalStorageSizeInGbs")
    def total_storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
        """
        return pulumi.get(self, "total_storage_size_in_gbs")

