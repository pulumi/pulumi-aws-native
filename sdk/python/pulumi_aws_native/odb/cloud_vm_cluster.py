# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['CloudVmClusterArgs', 'CloudVmCluster']

@pulumi.input_type
class CloudVmClusterArgs:
    def __init__(__self__, *,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count: Optional[pulumi.Input[builtins.int]] = None,
                 data_collection_options: Optional[pulumi.Input['CloudVmClusterDataCollectionOptionsArgs']] = None,
                 data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 db_node_storage_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 gi_version: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 is_local_backup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_sparse_diskgroup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudVmClusterLicenseModel']] = None,
                 memory_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_tcp: Optional[pulumi.Input[builtins.int]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 system_version: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a CloudVmCluster resource.
        :param pulumi.Input[builtins.str] cloud_exadata_infrastructure_id: The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
        :param pulumi.Input[builtins.str] cluster_name: The name of the Grid Infrastructure (GI) cluster.
        :param pulumi.Input[builtins.int] cpu_core_count: The number of CPU cores enabled on the VM cluster.
        :param pulumi.Input['CloudVmClusterDataCollectionOptionsArgs'] data_collection_options: The set of diagnostic collection options enabled for the VM cluster.
        :param pulumi.Input[builtins.float] data_storage_size_in_tbs: The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
        :param pulumi.Input[builtins.int] db_node_storage_size_in_gbs: The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] db_servers: The list of database servers for the VM cluster.
        :param pulumi.Input[builtins.str] display_name: The user-friendly name for the VM cluster.
        :param pulumi.Input[builtins.str] gi_version: The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
        :param pulumi.Input[builtins.str] hostname: The host name for the VM cluster.
        :param pulumi.Input[builtins.bool] is_local_backup_enabled: Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_sparse_diskgroup_enabled: Indicates whether the VM cluster is configured with a sparse disk group.
        :param pulumi.Input['CloudVmClusterLicenseModel'] license_model: The Oracle license model applied to the VM cluster.
        :param pulumi.Input[builtins.int] memory_size_in_gbs: The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network for the VM cluster.
        :param pulumi.Input[builtins.int] scan_listener_port_tcp: Property description not available.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ssh_public_keys: The public key portion of one or more key pairs used for SSH access to the VM cluster.
        :param pulumi.Input[builtins.str] system_version: The operating system version of the image chosen for the VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: Tags to assign to the Vm Cluster.
        :param pulumi.Input[builtins.str] time_zone: The time zone of the VM cluster.
        """
        if cloud_exadata_infrastructure_id is not None:
            pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cpu_core_count is not None:
            pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if data_collection_options is not None:
            pulumi.set(__self__, "data_collection_options", data_collection_options)
        if data_storage_size_in_tbs is not None:
            pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if db_node_storage_size_in_gbs is not None:
            pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if db_servers is not None:
            pulumi.set(__self__, "db_servers", db_servers)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if gi_version is not None:
            pulumi.set(__self__, "gi_version", gi_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if is_local_backup_enabled is not None:
            pulumi.set(__self__, "is_local_backup_enabled", is_local_backup_enabled)
        if is_sparse_diskgroup_enabled is not None:
            pulumi.set(__self__, "is_sparse_diskgroup_enabled", is_sparse_diskgroup_enabled)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if memory_size_in_gbs is not None:
            pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if odb_network_id is not None:
            pulumi.set(__self__, "odb_network_id", odb_network_id)
        if scan_listener_port_tcp is not None:
            pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if system_version is not None:
            pulumi.set(__self__, "system_version", system_version)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @cloud_exadata_infrastructure_id.setter
    def cloud_exadata_infrastructure_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cloud_exadata_infrastructure_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Grid Infrastructure (GI) cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of CPU cores enabled on the VM cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @cpu_core_count.setter
    def cpu_core_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu_core_count", value)

    @property
    @pulumi.getter(name="dataCollectionOptions")
    def data_collection_options(self) -> Optional[pulumi.Input['CloudVmClusterDataCollectionOptionsArgs']]:
        """
        The set of diagnostic collection options enabled for the VM cluster.
        """
        return pulumi.get(self, "data_collection_options")

    @data_collection_options.setter
    def data_collection_options(self, value: Optional[pulumi.Input['CloudVmClusterDataCollectionOptionsArgs']]):
        pulumi.set(self, "data_collection_options", value)

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @data_storage_size_in_tbs.setter
    def data_storage_size_in_tbs(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "data_storage_size_in_tbs", value)

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @db_node_storage_size_in_gbs.setter
    def db_node_storage_size_in_gbs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "db_node_storage_size_in_gbs", value)

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of database servers for the VM cluster.
        """
        return pulumi.get(self, "db_servers")

    @db_servers.setter
    def db_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "db_servers", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user-friendly name for the VM cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
        """
        return pulumi.get(self, "gi_version")

    @gi_version.setter
    def gi_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gi_version", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The host name for the VM cluster.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="isLocalBackupEnabled")
    def is_local_backup_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_local_backup_enabled")

    @is_local_backup_enabled.setter
    def is_local_backup_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_local_backup_enabled", value)

    @property
    @pulumi.getter(name="isSparseDiskgroupEnabled")
    def is_sparse_diskgroup_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the VM cluster is configured with a sparse disk group.
        """
        return pulumi.get(self, "is_sparse_diskgroup_enabled")

    @is_sparse_diskgroup_enabled.setter
    def is_sparse_diskgroup_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_sparse_diskgroup_enabled", value)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[pulumi.Input['CloudVmClusterLicenseModel']]:
        """
        The Oracle license model applied to the VM cluster.
        """
        return pulumi.get(self, "license_model")

    @license_model.setter
    def license_model(self, value: Optional[pulumi.Input['CloudVmClusterLicenseModel']]):
        pulumi.set(self, "license_model", value)

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @memory_size_in_gbs.setter
    def memory_size_in_gbs(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory_size_in_gbs", value)

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the ODB network for the VM cluster.
        """
        return pulumi.get(self, "odb_network_id")

    @odb_network_id.setter
    def odb_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "odb_network_id", value)

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Property description not available.
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @scan_listener_port_tcp.setter
    def scan_listener_port_tcp(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "scan_listener_port_tcp", value)

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The public key portion of one or more key pairs used for SSH access to the VM cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @ssh_public_keys.setter
    def ssh_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ssh_public_keys", value)

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The operating system version of the image chosen for the VM cluster.
        """
        return pulumi.get(self, "system_version")

    @system_version.setter
    def system_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "system_version", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        Tags to assign to the Vm Cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone of the VM cluster.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.type_token("aws-native:odb:CloudVmCluster")
class CloudVmCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count: Optional[pulumi.Input[builtins.int]] = None,
                 data_collection_options: Optional[pulumi.Input[Union['CloudVmClusterDataCollectionOptionsArgs', 'CloudVmClusterDataCollectionOptionsArgsDict']]] = None,
                 data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 db_node_storage_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 gi_version: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 is_local_backup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_sparse_diskgroup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudVmClusterLicenseModel']] = None,
                 memory_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_tcp: Optional[pulumi.Input[builtins.int]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 system_version: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cloud_exadata_infrastructure_id: The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
        :param pulumi.Input[builtins.str] cluster_name: The name of the Grid Infrastructure (GI) cluster.
        :param pulumi.Input[builtins.int] cpu_core_count: The number of CPU cores enabled on the VM cluster.
        :param pulumi.Input[Union['CloudVmClusterDataCollectionOptionsArgs', 'CloudVmClusterDataCollectionOptionsArgsDict']] data_collection_options: The set of diagnostic collection options enabled for the VM cluster.
        :param pulumi.Input[builtins.float] data_storage_size_in_tbs: The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
        :param pulumi.Input[builtins.int] db_node_storage_size_in_gbs: The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] db_servers: The list of database servers for the VM cluster.
        :param pulumi.Input[builtins.str] display_name: The user-friendly name for the VM cluster.
        :param pulumi.Input[builtins.str] gi_version: The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
        :param pulumi.Input[builtins.str] hostname: The host name for the VM cluster.
        :param pulumi.Input[builtins.bool] is_local_backup_enabled: Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
        :param pulumi.Input[builtins.bool] is_sparse_diskgroup_enabled: Indicates whether the VM cluster is configured with a sparse disk group.
        :param pulumi.Input['CloudVmClusterLicenseModel'] license_model: The Oracle license model applied to the VM cluster.
        :param pulumi.Input[builtins.int] memory_size_in_gbs: The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
        :param pulumi.Input[builtins.str] odb_network_id: The unique identifier of the ODB network for the VM cluster.
        :param pulumi.Input[builtins.int] scan_listener_port_tcp: Property description not available.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ssh_public_keys: The public key portion of one or more key pairs used for SSH access to the VM cluster.
        :param pulumi.Input[builtins.str] system_version: The operating system version of the image chosen for the VM cluster.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: Tags to assign to the Vm Cluster.
        :param pulumi.Input[builtins.str] time_zone: The time zone of the VM cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudVmClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::ODB::CloudVmCluster resource creates a Cloud VM Cluster

        :param str resource_name: The name of the resource.
        :param CloudVmClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudVmClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_exadata_infrastructure_id: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_name: Optional[pulumi.Input[builtins.str]] = None,
                 cpu_core_count: Optional[pulumi.Input[builtins.int]] = None,
                 data_collection_options: Optional[pulumi.Input[Union['CloudVmClusterDataCollectionOptionsArgs', 'CloudVmClusterDataCollectionOptionsArgsDict']]] = None,
                 data_storage_size_in_tbs: Optional[pulumi.Input[builtins.float]] = None,
                 db_node_storage_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 db_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 gi_version: Optional[pulumi.Input[builtins.str]] = None,
                 hostname: Optional[pulumi.Input[builtins.str]] = None,
                 is_local_backup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_sparse_diskgroup_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 license_model: Optional[pulumi.Input['CloudVmClusterLicenseModel']] = None,
                 memory_size_in_gbs: Optional[pulumi.Input[builtins.int]] = None,
                 odb_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 scan_listener_port_tcp: Optional[pulumi.Input[builtins.int]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 system_version: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudVmClusterArgs.__new__(CloudVmClusterArgs)

            __props__.__dict__["cloud_exadata_infrastructure_id"] = cloud_exadata_infrastructure_id
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cpu_core_count"] = cpu_core_count
            __props__.__dict__["data_collection_options"] = data_collection_options
            __props__.__dict__["data_storage_size_in_tbs"] = data_storage_size_in_tbs
            __props__.__dict__["db_node_storage_size_in_gbs"] = db_node_storage_size_in_gbs
            __props__.__dict__["db_servers"] = db_servers
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["gi_version"] = gi_version
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["is_local_backup_enabled"] = is_local_backup_enabled
            __props__.__dict__["is_sparse_diskgroup_enabled"] = is_sparse_diskgroup_enabled
            __props__.__dict__["license_model"] = license_model
            __props__.__dict__["memory_size_in_gbs"] = memory_size_in_gbs
            __props__.__dict__["odb_network_id"] = odb_network_id
            __props__.__dict__["scan_listener_port_tcp"] = scan_listener_port_tcp
            __props__.__dict__["ssh_public_keys"] = ssh_public_keys
            __props__.__dict__["system_version"] = system_version
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["cloud_vm_cluster_arn"] = None
            __props__.__dict__["cloud_vm_cluster_id"] = None
            __props__.__dict__["compute_model"] = None
            __props__.__dict__["disk_redundancy"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["listener_port"] = None
            __props__.__dict__["node_count"] = None
            __props__.__dict__["oci_resource_anchor_name"] = None
            __props__.__dict__["oci_url"] = None
            __props__.__dict__["ocid"] = None
            __props__.__dict__["scan_dns_name"] = None
            __props__.__dict__["scan_ip_ids"] = None
            __props__.__dict__["shape"] = None
            __props__.__dict__["storage_size_in_gbs"] = None
            __props__.__dict__["vip_ids"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["cloudExadataInfrastructureId", "clusterName", "cpuCoreCount", "dataCollectionOptions", "dataStorageSizeInTbs", "dbNodeStorageSizeInGbs", "dbServers[*]", "displayName", "giVersion", "hostname", "isLocalBackupEnabled", "isSparseDiskgroupEnabled", "licenseModel", "memorySizeInGbs", "odbNetworkId", "scanListenerPortTcp", "sshPublicKeys[*]", "systemVersion", "timeZone"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CloudVmCluster, __self__).__init__(
            'aws-native:odb:CloudVmCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CloudVmCluster':
        """
        Get an existing CloudVmCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CloudVmClusterArgs.__new__(CloudVmClusterArgs)

        __props__.__dict__["cloud_exadata_infrastructure_id"] = None
        __props__.__dict__["cloud_vm_cluster_arn"] = None
        __props__.__dict__["cloud_vm_cluster_id"] = None
        __props__.__dict__["cluster_name"] = None
        __props__.__dict__["compute_model"] = None
        __props__.__dict__["cpu_core_count"] = None
        __props__.__dict__["data_collection_options"] = None
        __props__.__dict__["data_storage_size_in_tbs"] = None
        __props__.__dict__["db_node_storage_size_in_gbs"] = None
        __props__.__dict__["db_servers"] = None
        __props__.__dict__["disk_redundancy"] = None
        __props__.__dict__["display_name"] = None
        __props__.__dict__["domain"] = None
        __props__.__dict__["gi_version"] = None
        __props__.__dict__["hostname"] = None
        __props__.__dict__["is_local_backup_enabled"] = None
        __props__.__dict__["is_sparse_diskgroup_enabled"] = None
        __props__.__dict__["license_model"] = None
        __props__.__dict__["listener_port"] = None
        __props__.__dict__["memory_size_in_gbs"] = None
        __props__.__dict__["node_count"] = None
        __props__.__dict__["oci_resource_anchor_name"] = None
        __props__.__dict__["oci_url"] = None
        __props__.__dict__["ocid"] = None
        __props__.__dict__["odb_network_id"] = None
        __props__.__dict__["scan_dns_name"] = None
        __props__.__dict__["scan_ip_ids"] = None
        __props__.__dict__["scan_listener_port_tcp"] = None
        __props__.__dict__["shape"] = None
        __props__.__dict__["ssh_public_keys"] = None
        __props__.__dict__["storage_size_in_gbs"] = None
        __props__.__dict__["system_version"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["time_zone"] = None
        __props__.__dict__["vip_ids"] = None
        return CloudVmCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the Exadata infrastructure that this VM cluster belongs to.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="cloudVmClusterArn")
    def cloud_vm_cluster_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the VM cluster.
        """
        return pulumi.get(self, "cloud_vm_cluster_arn")

    @property
    @pulumi.getter(name="cloudVmClusterId")
    def cloud_vm_cluster_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the VM cluster.
        """
        return pulumi.get(self, "cloud_vm_cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the Grid Infrastructure (GI) cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> pulumi.Output[builtins.str]:
        """
        The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of CPU cores enabled on the VM cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="dataCollectionOptions")
    def data_collection_options(self) -> pulumi.Output[Optional['outputs.CloudVmClusterDataCollectionOptions']]:
        """
        The set of diagnostic collection options enabled for the VM cluster.
        """
        return pulumi.get(self, "data_collection_options")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dbServers")
    def db_servers(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The list of database servers for the VM cluster.
        """
        return pulumi.get(self, "db_servers")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> pulumi.Output[builtins.str]:
        """
        The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The user-friendly name for the VM cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[builtins.str]:
        """
        The domain of the VM cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.
        """
        return pulumi.get(self, "gi_version")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The host name for the VM cluster.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="isLocalBackupEnabled")
    def is_local_backup_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether database backups to local Exadata storage is enabled for the VM cluster.
        """
        return pulumi.get(self, "is_local_backup_enabled")

    @property
    @pulumi.getter(name="isSparseDiskgroupEnabled")
    def is_sparse_diskgroup_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether the VM cluster is configured with a sparse disk group.
        """
        return pulumi.get(self, "is_sparse_diskgroup_enabled")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> pulumi.Output[Optional['CloudVmClusterLicenseModel']]:
        """
        The Oracle license model applied to the VM cluster.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Output[builtins.int]:
        """
        The port number configured for the listener on the VM cluster.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[builtins.int]:
        """
        The number of nodes in the VM cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the OCI resource anchor for the VM cluster.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> pulumi.Output[builtins.str]:
        """
        The HTTPS link to the VM cluster in OCI.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> pulumi.Output[builtins.str]:
        """
        The OCID of the VM cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="odbNetworkId")
    def odb_network_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier of the ODB network for the VM cluster.
        """
        return pulumi.get(self, "odb_network_id")

    @property
    @pulumi.getter(name="scanDnsName")
    def scan_dns_name(self) -> pulumi.Output[builtins.str]:
        """
        The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.
        """
        return pulumi.get(self, "scan_dns_name")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The OCID of the SCAN IP addresses that are associated with the VM cluster.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Property description not available.
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Output[builtins.str]:
        """
        The hardware model name of the Exadata infrastructure that's running the VM cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The public key portion of one or more key pairs used for SSH access to the VM cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> pulumi.Output[builtins.int]:
        """
        The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The operating system version of the image chosen for the VM cluster.
        """
        return pulumi.get(self, "system_version")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        Tags to assign to the Vm Cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The time zone of the VM cluster.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="vipIds")
    def vip_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.
        """
        return pulumi.get(self, "vip_ids")

