# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetCloudAutonomousVmClusterResult',
    'AwaitableGetCloudAutonomousVmClusterResult',
    'get_cloud_autonomous_vm_cluster',
    'get_cloud_autonomous_vm_cluster_output',
]

@pulumi.output_type
class GetCloudAutonomousVmClusterResult:
    def __init__(__self__, autonomous_data_storage_percentage=None, available_autonomous_data_storage_size_in_tbs=None, available_container_databases=None, available_cpus=None, cloud_autonomous_vm_cluster_arn=None, cloud_autonomous_vm_cluster_id=None, compute_model=None, cpu_core_count=None, cpu_percentage=None, data_storage_size_in_gbs=None, data_storage_size_in_tbs=None, db_node_storage_size_in_gbs=None, domain=None, exadata_storage_in_tbs_lowest_scaled_value=None, hostname=None, max_acds_lowest_scaled_value=None, memory_size_in_gbs=None, node_count=None, non_provisionable_autonomous_container_databases=None, oci_resource_anchor_name=None, oci_url=None, ocid=None, provisionable_autonomous_container_databases=None, provisioned_autonomous_container_databases=None, provisioned_cpus=None, reclaimable_cpus=None, reserved_cpus=None, shape=None, tags=None):
        if autonomous_data_storage_percentage and not isinstance(autonomous_data_storage_percentage, float):
            raise TypeError("Expected argument 'autonomous_data_storage_percentage' to be a float")
        pulumi.set(__self__, "autonomous_data_storage_percentage", autonomous_data_storage_percentage)
        if available_autonomous_data_storage_size_in_tbs and not isinstance(available_autonomous_data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'available_autonomous_data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "available_autonomous_data_storage_size_in_tbs", available_autonomous_data_storage_size_in_tbs)
        if available_container_databases and not isinstance(available_container_databases, int):
            raise TypeError("Expected argument 'available_container_databases' to be a int")
        pulumi.set(__self__, "available_container_databases", available_container_databases)
        if available_cpus and not isinstance(available_cpus, float):
            raise TypeError("Expected argument 'available_cpus' to be a float")
        pulumi.set(__self__, "available_cpus", available_cpus)
        if cloud_autonomous_vm_cluster_arn and not isinstance(cloud_autonomous_vm_cluster_arn, str):
            raise TypeError("Expected argument 'cloud_autonomous_vm_cluster_arn' to be a str")
        pulumi.set(__self__, "cloud_autonomous_vm_cluster_arn", cloud_autonomous_vm_cluster_arn)
        if cloud_autonomous_vm_cluster_id and not isinstance(cloud_autonomous_vm_cluster_id, str):
            raise TypeError("Expected argument 'cloud_autonomous_vm_cluster_id' to be a str")
        pulumi.set(__self__, "cloud_autonomous_vm_cluster_id", cloud_autonomous_vm_cluster_id)
        if compute_model and not isinstance(compute_model, str):
            raise TypeError("Expected argument 'compute_model' to be a str")
        pulumi.set(__self__, "compute_model", compute_model)
        if cpu_core_count and not isinstance(cpu_core_count, int):
            raise TypeError("Expected argument 'cpu_core_count' to be a int")
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        if cpu_percentage and not isinstance(cpu_percentage, float):
            raise TypeError("Expected argument 'cpu_percentage' to be a float")
        pulumi.set(__self__, "cpu_percentage", cpu_percentage)
        if data_storage_size_in_gbs and not isinstance(data_storage_size_in_gbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_gbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_gbs", data_storage_size_in_gbs)
        if data_storage_size_in_tbs and not isinstance(data_storage_size_in_tbs, float):
            raise TypeError("Expected argument 'data_storage_size_in_tbs' to be a float")
        pulumi.set(__self__, "data_storage_size_in_tbs", data_storage_size_in_tbs)
        if db_node_storage_size_in_gbs and not isinstance(db_node_storage_size_in_gbs, int):
            raise TypeError("Expected argument 'db_node_storage_size_in_gbs' to be a int")
        pulumi.set(__self__, "db_node_storage_size_in_gbs", db_node_storage_size_in_gbs)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if exadata_storage_in_tbs_lowest_scaled_value and not isinstance(exadata_storage_in_tbs_lowest_scaled_value, float):
            raise TypeError("Expected argument 'exadata_storage_in_tbs_lowest_scaled_value' to be a float")
        pulumi.set(__self__, "exadata_storage_in_tbs_lowest_scaled_value", exadata_storage_in_tbs_lowest_scaled_value)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if max_acds_lowest_scaled_value and not isinstance(max_acds_lowest_scaled_value, int):
            raise TypeError("Expected argument 'max_acds_lowest_scaled_value' to be a int")
        pulumi.set(__self__, "max_acds_lowest_scaled_value", max_acds_lowest_scaled_value)
        if memory_size_in_gbs and not isinstance(memory_size_in_gbs, int):
            raise TypeError("Expected argument 'memory_size_in_gbs' to be a int")
        pulumi.set(__self__, "memory_size_in_gbs", memory_size_in_gbs)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if non_provisionable_autonomous_container_databases and not isinstance(non_provisionable_autonomous_container_databases, int):
            raise TypeError("Expected argument 'non_provisionable_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "non_provisionable_autonomous_container_databases", non_provisionable_autonomous_container_databases)
        if oci_resource_anchor_name and not isinstance(oci_resource_anchor_name, str):
            raise TypeError("Expected argument 'oci_resource_anchor_name' to be a str")
        pulumi.set(__self__, "oci_resource_anchor_name", oci_resource_anchor_name)
        if oci_url and not isinstance(oci_url, str):
            raise TypeError("Expected argument 'oci_url' to be a str")
        pulumi.set(__self__, "oci_url", oci_url)
        if ocid and not isinstance(ocid, str):
            raise TypeError("Expected argument 'ocid' to be a str")
        pulumi.set(__self__, "ocid", ocid)
        if provisionable_autonomous_container_databases and not isinstance(provisionable_autonomous_container_databases, int):
            raise TypeError("Expected argument 'provisionable_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "provisionable_autonomous_container_databases", provisionable_autonomous_container_databases)
        if provisioned_autonomous_container_databases and not isinstance(provisioned_autonomous_container_databases, int):
            raise TypeError("Expected argument 'provisioned_autonomous_container_databases' to be a int")
        pulumi.set(__self__, "provisioned_autonomous_container_databases", provisioned_autonomous_container_databases)
        if provisioned_cpus and not isinstance(provisioned_cpus, float):
            raise TypeError("Expected argument 'provisioned_cpus' to be a float")
        pulumi.set(__self__, "provisioned_cpus", provisioned_cpus)
        if reclaimable_cpus and not isinstance(reclaimable_cpus, float):
            raise TypeError("Expected argument 'reclaimable_cpus' to be a float")
        pulumi.set(__self__, "reclaimable_cpus", reclaimable_cpus)
        if reserved_cpus and not isinstance(reserved_cpus, float):
            raise TypeError("Expected argument 'reserved_cpus' to be a float")
        pulumi.set(__self__, "reserved_cpus", reserved_cpus)
        if shape and not isinstance(shape, str):
            raise TypeError("Expected argument 'shape' to be a str")
        pulumi.set(__self__, "shape", shape)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="autonomousDataStoragePercentage")
    def autonomous_data_storage_percentage(self) -> Optional[builtins.float]:
        """
        The percentage of data storage currently in use for Autonomous Databases in the Autonomous VM cluster.
        """
        return pulumi.get(self, "autonomous_data_storage_percentage")

    @property
    @pulumi.getter(name="availableAutonomousDataStorageSizeInTbs")
    def available_autonomous_data_storage_size_in_tbs(self) -> Optional[builtins.float]:
        """
        The available data storage space for Autonomous Databases in the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "available_autonomous_data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="availableContainerDatabases")
    def available_container_databases(self) -> Optional[builtins.int]:
        """
        The number of Autonomous CDBs that you can create with the currently available storage.
        """
        return pulumi.get(self, "available_container_databases")

    @property
    @pulumi.getter(name="availableCpus")
    def available_cpus(self) -> Optional[builtins.float]:
        """
        The number of CPU cores available for allocation to Autonomous Databases.
        """
        return pulumi.get(self, "available_cpus")

    @property
    @pulumi.getter(name="cloudAutonomousVmClusterArn")
    def cloud_autonomous_vm_cluster_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) for the Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_autonomous_vm_cluster_arn")

    @property
    @pulumi.getter(name="cloudAutonomousVmClusterId")
    def cloud_autonomous_vm_cluster_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the Autonomous VM cluster.
        """
        return pulumi.get(self, "cloud_autonomous_vm_cluster_id")

    @property
    @pulumi.getter(name="computeModel")
    def compute_model(self) -> Optional['CloudAutonomousVmClusterComputeModel']:
        """
        The compute model of the Autonomous VM cluster: ECPU or OCPU.
        """
        return pulumi.get(self, "compute_model")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> Optional[builtins.int]:
        """
        The total number of CPU cores in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> Optional[builtins.float]:
        """
        The percentage of total CPU cores currently in use in the Autonomous VM cluster.
        """
        return pulumi.get(self, "cpu_percentage")

    @property
    @pulumi.getter(name="dataStorageSizeInGbs")
    def data_storage_size_in_gbs(self) -> Optional[builtins.float]:
        """
        The total data storage allocated to the Autonomous VM cluster, in GB.
        """
        return pulumi.get(self, "data_storage_size_in_gbs")

    @property
    @pulumi.getter(name="dataStorageSizeInTbs")
    def data_storage_size_in_tbs(self) -> Optional[builtins.float]:
        """
        The total data storage allocated to the Autonomous VM cluster, in TB.
        """
        return pulumi.get(self, "data_storage_size_in_tbs")

    @property
    @pulumi.getter(name="dbNodeStorageSizeInGbs")
    def db_node_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The local node storage allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "db_node_storage_size_in_gbs")

    @property
    @pulumi.getter
    def domain(self) -> Optional[builtins.str]:
        """
        The domain name for the Autonomous VM cluster.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="exadataStorageInTbsLowestScaledValue")
    def exadata_storage_in_tbs_lowest_scaled_value(self) -> Optional[builtins.float]:
        """
        The minimum value to which you can scale down the Exadata storage, in TB.
        """
        return pulumi.get(self, "exadata_storage_in_tbs_lowest_scaled_value")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[builtins.str]:
        """
        The hostname for the Autonomous VM cluster.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="maxAcdsLowestScaledValue")
    def max_acds_lowest_scaled_value(self) -> Optional[builtins.int]:
        """
        The minimum value to which you can scale down the maximum number of Autonomous CDBs.
        """
        return pulumi.get(self, "max_acds_lowest_scaled_value")

    @property
    @pulumi.getter(name="memorySizeInGbs")
    def memory_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The total amount of memory allocated to the Autonomous VM cluster, in gigabytes (GB).
        """
        return pulumi.get(self, "memory_size_in_gbs")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[builtins.int]:
        """
        The number of database server nodes in the Autonomous VM cluster.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nonProvisionableAutonomousContainerDatabases")
    def non_provisionable_autonomous_container_databases(self) -> Optional[builtins.int]:
        """
        The number of Autonomous CDBs that can't be provisioned because of resource constraints.
        """
        return pulumi.get(self, "non_provisionable_autonomous_container_databases")

    @property
    @pulumi.getter(name="ociResourceAnchorName")
    def oci_resource_anchor_name(self) -> Optional[builtins.str]:
        """
        The name of the OCI resource anchor associated with this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_resource_anchor_name")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[builtins.str]:
        """
        The URL for accessing the OCI console page for this Autonomous VM cluster.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[builtins.str]:
        """
        The Oracle Cloud Identifier (OCID) of the Autonomous VM cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="provisionableAutonomousContainerDatabases")
    def provisionable_autonomous_container_databases(self) -> Optional[builtins.int]:
        """
        The number of Autonomous CDBs that can be provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisionable_autonomous_container_databases")

    @property
    @pulumi.getter(name="provisionedAutonomousContainerDatabases")
    def provisioned_autonomous_container_databases(self) -> Optional[builtins.int]:
        """
        The number of Autonomous CDBs currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_autonomous_container_databases")

    @property
    @pulumi.getter(name="provisionedCpus")
    def provisioned_cpus(self) -> Optional[builtins.float]:
        """
        The number of CPU cores currently provisioned in the Autonomous VM cluster.
        """
        return pulumi.get(self, "provisioned_cpus")

    @property
    @pulumi.getter(name="reclaimableCpus")
    def reclaimable_cpus(self) -> Optional[builtins.float]:
        """
        The number of CPU cores that can be reclaimed from terminated or scaled-down Autonomous Databases.
        """
        return pulumi.get(self, "reclaimable_cpus")

    @property
    @pulumi.getter(name="reservedCpus")
    def reserved_cpus(self) -> Optional[builtins.float]:
        """
        The number of CPU cores reserved for system operations and redundancy.
        """
        return pulumi.get(self, "reserved_cpus")

    @property
    @pulumi.getter
    def shape(self) -> Optional[builtins.str]:
        """
        The shape of the Exadata infrastructure for the Autonomous VM cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        The tags associated with the Autonomous VM cluster.
        """
        return pulumi.get(self, "tags")


class AwaitableGetCloudAutonomousVmClusterResult(GetCloudAutonomousVmClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudAutonomousVmClusterResult(
            autonomous_data_storage_percentage=self.autonomous_data_storage_percentage,
            available_autonomous_data_storage_size_in_tbs=self.available_autonomous_data_storage_size_in_tbs,
            available_container_databases=self.available_container_databases,
            available_cpus=self.available_cpus,
            cloud_autonomous_vm_cluster_arn=self.cloud_autonomous_vm_cluster_arn,
            cloud_autonomous_vm_cluster_id=self.cloud_autonomous_vm_cluster_id,
            compute_model=self.compute_model,
            cpu_core_count=self.cpu_core_count,
            cpu_percentage=self.cpu_percentage,
            data_storage_size_in_gbs=self.data_storage_size_in_gbs,
            data_storage_size_in_tbs=self.data_storage_size_in_tbs,
            db_node_storage_size_in_gbs=self.db_node_storage_size_in_gbs,
            domain=self.domain,
            exadata_storage_in_tbs_lowest_scaled_value=self.exadata_storage_in_tbs_lowest_scaled_value,
            hostname=self.hostname,
            max_acds_lowest_scaled_value=self.max_acds_lowest_scaled_value,
            memory_size_in_gbs=self.memory_size_in_gbs,
            node_count=self.node_count,
            non_provisionable_autonomous_container_databases=self.non_provisionable_autonomous_container_databases,
            oci_resource_anchor_name=self.oci_resource_anchor_name,
            oci_url=self.oci_url,
            ocid=self.ocid,
            provisionable_autonomous_container_databases=self.provisionable_autonomous_container_databases,
            provisioned_autonomous_container_databases=self.provisioned_autonomous_container_databases,
            provisioned_cpus=self.provisioned_cpus,
            reclaimable_cpus=self.reclaimable_cpus,
            reserved_cpus=self.reserved_cpus,
            shape=self.shape,
            tags=self.tags)


def get_cloud_autonomous_vm_cluster(cloud_autonomous_vm_cluster_arn: Optional[builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudAutonomousVmClusterResult:
    """
    The AWS::ODB::CloudAutonomousVmCluster resource creates a Cloud Autonomous VM Cluster


    :param builtins.str cloud_autonomous_vm_cluster_arn: The Amazon Resource Name (ARN) for the Autonomous VM cluster.
    """
    __args__ = dict()
    __args__['cloudAutonomousVmClusterArn'] = cloud_autonomous_vm_cluster_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:odb:getCloudAutonomousVmCluster', __args__, opts=opts, typ=GetCloudAutonomousVmClusterResult).value

    return AwaitableGetCloudAutonomousVmClusterResult(
        autonomous_data_storage_percentage=pulumi.get(__ret__, 'autonomous_data_storage_percentage'),
        available_autonomous_data_storage_size_in_tbs=pulumi.get(__ret__, 'available_autonomous_data_storage_size_in_tbs'),
        available_container_databases=pulumi.get(__ret__, 'available_container_databases'),
        available_cpus=pulumi.get(__ret__, 'available_cpus'),
        cloud_autonomous_vm_cluster_arn=pulumi.get(__ret__, 'cloud_autonomous_vm_cluster_arn'),
        cloud_autonomous_vm_cluster_id=pulumi.get(__ret__, 'cloud_autonomous_vm_cluster_id'),
        compute_model=pulumi.get(__ret__, 'compute_model'),
        cpu_core_count=pulumi.get(__ret__, 'cpu_core_count'),
        cpu_percentage=pulumi.get(__ret__, 'cpu_percentage'),
        data_storage_size_in_gbs=pulumi.get(__ret__, 'data_storage_size_in_gbs'),
        data_storage_size_in_tbs=pulumi.get(__ret__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__ret__, 'db_node_storage_size_in_gbs'),
        domain=pulumi.get(__ret__, 'domain'),
        exadata_storage_in_tbs_lowest_scaled_value=pulumi.get(__ret__, 'exadata_storage_in_tbs_lowest_scaled_value'),
        hostname=pulumi.get(__ret__, 'hostname'),
        max_acds_lowest_scaled_value=pulumi.get(__ret__, 'max_acds_lowest_scaled_value'),
        memory_size_in_gbs=pulumi.get(__ret__, 'memory_size_in_gbs'),
        node_count=pulumi.get(__ret__, 'node_count'),
        non_provisionable_autonomous_container_databases=pulumi.get(__ret__, 'non_provisionable_autonomous_container_databases'),
        oci_resource_anchor_name=pulumi.get(__ret__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__ret__, 'oci_url'),
        ocid=pulumi.get(__ret__, 'ocid'),
        provisionable_autonomous_container_databases=pulumi.get(__ret__, 'provisionable_autonomous_container_databases'),
        provisioned_autonomous_container_databases=pulumi.get(__ret__, 'provisioned_autonomous_container_databases'),
        provisioned_cpus=pulumi.get(__ret__, 'provisioned_cpus'),
        reclaimable_cpus=pulumi.get(__ret__, 'reclaimable_cpus'),
        reserved_cpus=pulumi.get(__ret__, 'reserved_cpus'),
        shape=pulumi.get(__ret__, 'shape'),
        tags=pulumi.get(__ret__, 'tags'))
def get_cloud_autonomous_vm_cluster_output(cloud_autonomous_vm_cluster_arn: Optional[pulumi.Input[builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudAutonomousVmClusterResult]:
    """
    The AWS::ODB::CloudAutonomousVmCluster resource creates a Cloud Autonomous VM Cluster


    :param builtins.str cloud_autonomous_vm_cluster_arn: The Amazon Resource Name (ARN) for the Autonomous VM cluster.
    """
    __args__ = dict()
    __args__['cloudAutonomousVmClusterArn'] = cloud_autonomous_vm_cluster_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:odb:getCloudAutonomousVmCluster', __args__, opts=opts, typ=GetCloudAutonomousVmClusterResult)
    return __ret__.apply(lambda __response__: GetCloudAutonomousVmClusterResult(
        autonomous_data_storage_percentage=pulumi.get(__response__, 'autonomous_data_storage_percentage'),
        available_autonomous_data_storage_size_in_tbs=pulumi.get(__response__, 'available_autonomous_data_storage_size_in_tbs'),
        available_container_databases=pulumi.get(__response__, 'available_container_databases'),
        available_cpus=pulumi.get(__response__, 'available_cpus'),
        cloud_autonomous_vm_cluster_arn=pulumi.get(__response__, 'cloud_autonomous_vm_cluster_arn'),
        cloud_autonomous_vm_cluster_id=pulumi.get(__response__, 'cloud_autonomous_vm_cluster_id'),
        compute_model=pulumi.get(__response__, 'compute_model'),
        cpu_core_count=pulumi.get(__response__, 'cpu_core_count'),
        cpu_percentage=pulumi.get(__response__, 'cpu_percentage'),
        data_storage_size_in_gbs=pulumi.get(__response__, 'data_storage_size_in_gbs'),
        data_storage_size_in_tbs=pulumi.get(__response__, 'data_storage_size_in_tbs'),
        db_node_storage_size_in_gbs=pulumi.get(__response__, 'db_node_storage_size_in_gbs'),
        domain=pulumi.get(__response__, 'domain'),
        exadata_storage_in_tbs_lowest_scaled_value=pulumi.get(__response__, 'exadata_storage_in_tbs_lowest_scaled_value'),
        hostname=pulumi.get(__response__, 'hostname'),
        max_acds_lowest_scaled_value=pulumi.get(__response__, 'max_acds_lowest_scaled_value'),
        memory_size_in_gbs=pulumi.get(__response__, 'memory_size_in_gbs'),
        node_count=pulumi.get(__response__, 'node_count'),
        non_provisionable_autonomous_container_databases=pulumi.get(__response__, 'non_provisionable_autonomous_container_databases'),
        oci_resource_anchor_name=pulumi.get(__response__, 'oci_resource_anchor_name'),
        oci_url=pulumi.get(__response__, 'oci_url'),
        ocid=pulumi.get(__response__, 'ocid'),
        provisionable_autonomous_container_databases=pulumi.get(__response__, 'provisionable_autonomous_container_databases'),
        provisioned_autonomous_container_databases=pulumi.get(__response__, 'provisioned_autonomous_container_databases'),
        provisioned_cpus=pulumi.get(__response__, 'provisioned_cpus'),
        reclaimable_cpus=pulumi.get(__response__, 'reclaimable_cpus'),
        reserved_cpus=pulumi.get(__response__, 'reserved_cpus'),
        shape=pulumi.get(__response__, 'shape'),
        tags=pulumi.get(__response__, 'tags')))
