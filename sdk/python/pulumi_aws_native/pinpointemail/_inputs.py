# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConfigurationSetDeliveryOptionsArgs',
    'ConfigurationSetEventDestinationCloudWatchDestinationArgs',
    'ConfigurationSetEventDestinationDimensionConfigurationArgs',
    'ConfigurationSetEventDestinationEventDestinationArgs',
    'ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs',
    'ConfigurationSetEventDestinationPinpointDestinationArgs',
    'ConfigurationSetEventDestinationSnsDestinationArgs',
    'ConfigurationSetReputationOptionsArgs',
    'ConfigurationSetSendingOptionsArgs',
    'ConfigurationSetTagsArgs',
    'ConfigurationSetTrackingOptionsArgs',
    'DedicatedIpPoolTagsArgs',
    'IdentityMailFromAttributesArgs',
    'IdentityTagsArgs',
]

@pulumi.input_type
class ConfigurationSetDeliveryOptionsArgs:
    def __init__(__self__, *,
                 sending_pool_name: Optional[pulumi.Input[str]] = None):
        ConfigurationSetDeliveryOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sending_pool_name=sending_pool_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sending_pool_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if sending_pool_name is None and 'sendingPoolName' in kwargs:
            sending_pool_name = kwargs['sendingPoolName']

        if sending_pool_name is not None:
            _setter("sending_pool_name", sending_pool_name)

    @property
    @pulumi.getter(name="sendingPoolName")
    def sending_pool_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sending_pool_name")

    @sending_pool_name.setter
    def sending_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sending_pool_name", value)


@pulumi.input_type
class ConfigurationSetEventDestinationCloudWatchDestinationArgs:
    def __init__(__self__, *,
                 dimension_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]] = None):
        ConfigurationSetEventDestinationCloudWatchDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_configurations=dimension_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dimension_configurations is None and 'dimensionConfigurations' in kwargs:
            dimension_configurations = kwargs['dimensionConfigurations']

        if dimension_configurations is not None:
            _setter("dimension_configurations", dimension_configurations)

    @property
    @pulumi.getter(name="dimensionConfigurations")
    def dimension_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]]:
        return pulumi.get(self, "dimension_configurations")

    @dimension_configurations.setter
    def dimension_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]]):
        pulumi.set(self, "dimension_configurations", value)


@pulumi.input_type
class ConfigurationSetEventDestinationDimensionConfigurationArgs:
    def __init__(__self__, *,
                 default_dimension_value: pulumi.Input[str],
                 dimension_name: pulumi.Input[str],
                 dimension_value_source: pulumi.Input[str]):
        ConfigurationSetEventDestinationDimensionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_dimension_value=default_dimension_value,
            dimension_name=dimension_name,
            dimension_value_source=dimension_value_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_dimension_value: Optional[pulumi.Input[str]] = None,
             dimension_name: Optional[pulumi.Input[str]] = None,
             dimension_value_source: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if default_dimension_value is None and 'defaultDimensionValue' in kwargs:
            default_dimension_value = kwargs['defaultDimensionValue']
        if default_dimension_value is None:
            raise TypeError("Missing 'default_dimension_value' argument")
        if dimension_name is None and 'dimensionName' in kwargs:
            dimension_name = kwargs['dimensionName']
        if dimension_name is None:
            raise TypeError("Missing 'dimension_name' argument")
        if dimension_value_source is None and 'dimensionValueSource' in kwargs:
            dimension_value_source = kwargs['dimensionValueSource']
        if dimension_value_source is None:
            raise TypeError("Missing 'dimension_value_source' argument")

        _setter("default_dimension_value", default_dimension_value)
        _setter("dimension_name", dimension_name)
        _setter("dimension_value_source", dimension_value_source)

    @property
    @pulumi.getter(name="defaultDimensionValue")
    def default_dimension_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_dimension_value")

    @default_dimension_value.setter
    def default_dimension_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_dimension_value", value)

    @property
    @pulumi.getter(name="dimensionName")
    def dimension_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimension_name")

    @dimension_name.setter
    def dimension_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_name", value)

    @property
    @pulumi.getter(name="dimensionValueSource")
    def dimension_value_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimension_value_source")

    @dimension_value_source.setter
    def dimension_value_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_value_source", value)


@pulumi.input_type
class ConfigurationSetEventDestinationEventDestinationArgs:
    def __init__(__self__, *,
                 matching_event_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cloud_watch_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kinesis_firehose_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']] = None,
                 pinpoint_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationPinpointDestinationArgs']] = None,
                 sns_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']] = None):
        ConfigurationSetEventDestinationEventDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            matching_event_types=matching_event_types,
            cloud_watch_destination=cloud_watch_destination,
            enabled=enabled,
            kinesis_firehose_destination=kinesis_firehose_destination,
            pinpoint_destination=pinpoint_destination,
            sns_destination=sns_destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             matching_event_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cloud_watch_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             kinesis_firehose_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']] = None,
             pinpoint_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationPinpointDestinationArgs']] = None,
             sns_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if matching_event_types is None and 'matchingEventTypes' in kwargs:
            matching_event_types = kwargs['matchingEventTypes']
        if matching_event_types is None:
            raise TypeError("Missing 'matching_event_types' argument")
        if cloud_watch_destination is None and 'cloudWatchDestination' in kwargs:
            cloud_watch_destination = kwargs['cloudWatchDestination']
        if kinesis_firehose_destination is None and 'kinesisFirehoseDestination' in kwargs:
            kinesis_firehose_destination = kwargs['kinesisFirehoseDestination']
        if pinpoint_destination is None and 'pinpointDestination' in kwargs:
            pinpoint_destination = kwargs['pinpointDestination']
        if sns_destination is None and 'snsDestination' in kwargs:
            sns_destination = kwargs['snsDestination']

        _setter("matching_event_types", matching_event_types)
        if cloud_watch_destination is not None:
            _setter("cloud_watch_destination", cloud_watch_destination)
        if enabled is not None:
            _setter("enabled", enabled)
        if kinesis_firehose_destination is not None:
            _setter("kinesis_firehose_destination", kinesis_firehose_destination)
        if pinpoint_destination is not None:
            _setter("pinpoint_destination", pinpoint_destination)
        if sns_destination is not None:
            _setter("sns_destination", sns_destination)

    @property
    @pulumi.getter(name="matchingEventTypes")
    def matching_event_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "matching_event_types")

    @matching_event_types.setter
    def matching_event_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "matching_event_types", value)

    @property
    @pulumi.getter(name="cloudWatchDestination")
    def cloud_watch_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']]:
        return pulumi.get(self, "cloud_watch_destination")

    @cloud_watch_destination.setter
    def cloud_watch_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']]):
        pulumi.set(self, "cloud_watch_destination", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kinesisFirehoseDestination")
    def kinesis_firehose_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']]:
        return pulumi.get(self, "kinesis_firehose_destination")

    @kinesis_firehose_destination.setter
    def kinesis_firehose_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']]):
        pulumi.set(self, "kinesis_firehose_destination", value)

    @property
    @pulumi.getter(name="pinpointDestination")
    def pinpoint_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationPinpointDestinationArgs']]:
        return pulumi.get(self, "pinpoint_destination")

    @pinpoint_destination.setter
    def pinpoint_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationPinpointDestinationArgs']]):
        pulumi.set(self, "pinpoint_destination", value)

    @property
    @pulumi.getter(name="snsDestination")
    def sns_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']]:
        return pulumi.get(self, "sns_destination")

    @sns_destination.setter
    def sns_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']]):
        pulumi.set(self, "sns_destination", value)


@pulumi.input_type
class ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs:
    def __init__(__self__, *,
                 delivery_stream_arn: pulumi.Input[str],
                 iam_role_arn: pulumi.Input[str]):
        ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delivery_stream_arn=delivery_stream_arn,
            iam_role_arn=iam_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delivery_stream_arn: Optional[pulumi.Input[str]] = None,
             iam_role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delivery_stream_arn is None and 'deliveryStreamArn' in kwargs:
            delivery_stream_arn = kwargs['deliveryStreamArn']
        if delivery_stream_arn is None:
            raise TypeError("Missing 'delivery_stream_arn' argument")
        if iam_role_arn is None and 'iamRoleArn' in kwargs:
            iam_role_arn = kwargs['iamRoleArn']
        if iam_role_arn is None:
            raise TypeError("Missing 'iam_role_arn' argument")

        _setter("delivery_stream_arn", delivery_stream_arn)
        _setter("iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delivery_stream_arn")

    @delivery_stream_arn.setter
    def delivery_stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "delivery_stream_arn", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iam_role_arn", value)


@pulumi.input_type
class ConfigurationSetEventDestinationPinpointDestinationArgs:
    def __init__(__self__, *,
                 application_arn: Optional[pulumi.Input[str]] = None):
        ConfigurationSetEventDestinationPinpointDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_arn=application_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if application_arn is None and 'applicationArn' in kwargs:
            application_arn = kwargs['applicationArn']

        if application_arn is not None:
            _setter("application_arn", application_arn)

    @property
    @pulumi.getter(name="applicationArn")
    def application_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_arn")

    @application_arn.setter
    def application_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_arn", value)


@pulumi.input_type
class ConfigurationSetEventDestinationSnsDestinationArgs:
    def __init__(__self__, *,
                 topic_arn: pulumi.Input[str]):
        ConfigurationSetEventDestinationSnsDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if topic_arn is None and 'topicArn' in kwargs:
            topic_arn = kwargs['topicArn']
        if topic_arn is None:
            raise TypeError("Missing 'topic_arn' argument")

        _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ConfigurationSetReputationOptionsArgs:
    def __init__(__self__, *,
                 reputation_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        ConfigurationSetReputationOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            reputation_metrics_enabled=reputation_metrics_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             reputation_metrics_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if reputation_metrics_enabled is None and 'reputationMetricsEnabled' in kwargs:
            reputation_metrics_enabled = kwargs['reputationMetricsEnabled']

        if reputation_metrics_enabled is not None:
            _setter("reputation_metrics_enabled", reputation_metrics_enabled)

    @property
    @pulumi.getter(name="reputationMetricsEnabled")
    def reputation_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reputation_metrics_enabled")

    @reputation_metrics_enabled.setter
    def reputation_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reputation_metrics_enabled", value)


@pulumi.input_type
class ConfigurationSetSendingOptionsArgs:
    def __init__(__self__, *,
                 sending_enabled: Optional[pulumi.Input[bool]] = None):
        ConfigurationSetSendingOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sending_enabled=sending_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sending_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if sending_enabled is None and 'sendingEnabled' in kwargs:
            sending_enabled = kwargs['sendingEnabled']

        if sending_enabled is not None:
            _setter("sending_enabled", sending_enabled)

    @property
    @pulumi.getter(name="sendingEnabled")
    def sending_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sending_enabled")

    @sending_enabled.setter
    def sending_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sending_enabled", value)


@pulumi.input_type
class ConfigurationSetTagsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        ConfigurationSetTagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfigurationSetTrackingOptionsArgs:
    def __init__(__self__, *,
                 custom_redirect_domain: Optional[pulumi.Input[str]] = None):
        ConfigurationSetTrackingOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_redirect_domain=custom_redirect_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_redirect_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_redirect_domain is None and 'customRedirectDomain' in kwargs:
            custom_redirect_domain = kwargs['customRedirectDomain']

        if custom_redirect_domain is not None:
            _setter("custom_redirect_domain", custom_redirect_domain)

    @property
    @pulumi.getter(name="customRedirectDomain")
    def custom_redirect_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_redirect_domain")

    @custom_redirect_domain.setter
    def custom_redirect_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_redirect_domain", value)


@pulumi.input_type
class DedicatedIpPoolTagsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        DedicatedIpPoolTagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IdentityMailFromAttributesArgs:
    def __init__(__self__, *,
                 behavior_on_mx_failure: Optional[pulumi.Input[str]] = None,
                 mail_from_domain: Optional[pulumi.Input[str]] = None):
        IdentityMailFromAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_on_mx_failure=behavior_on_mx_failure,
            mail_from_domain=mail_from_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_on_mx_failure: Optional[pulumi.Input[str]] = None,
             mail_from_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if behavior_on_mx_failure is None and 'behaviorOnMxFailure' in kwargs:
            behavior_on_mx_failure = kwargs['behaviorOnMxFailure']
        if mail_from_domain is None and 'mailFromDomain' in kwargs:
            mail_from_domain = kwargs['mailFromDomain']

        if behavior_on_mx_failure is not None:
            _setter("behavior_on_mx_failure", behavior_on_mx_failure)
        if mail_from_domain is not None:
            _setter("mail_from_domain", mail_from_domain)

    @property
    @pulumi.getter(name="behaviorOnMxFailure")
    def behavior_on_mx_failure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "behavior_on_mx_failure")

    @behavior_on_mx_failure.setter
    def behavior_on_mx_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior_on_mx_failure", value)

    @property
    @pulumi.getter(name="mailFromDomain")
    def mail_from_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mail_from_domain")

    @mail_from_domain.setter
    def mail_from_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mail_from_domain", value)


@pulumi.input_type
class IdentityTagsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        IdentityTagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


