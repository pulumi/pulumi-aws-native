# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GroupConfigurationItem',
    'GroupConfigurationParameter',
    'GroupQuery',
    'GroupResourceQuery',
    'GroupTagFilter',
]

@pulumi.output_type
class GroupConfigurationItem(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.GroupConfigurationParameter']] = None,
                 type: Optional[str] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GroupConfigurationParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GroupConfigurationParameter(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GroupQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTypeFilters":
            suggest = "resource_type_filters"
        elif key == "stackIdentifier":
            suggest = "stack_identifier"
        elif key == "tagFilters":
            suggest = "tag_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type_filters: Optional[Sequence[str]] = None,
                 stack_identifier: Optional[str] = None,
                 tag_filters: Optional[Sequence['outputs.GroupTagFilter']] = None):
        """
        :param Sequence[str] resource_type_filters: Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
        :param str stack_identifier: Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
               
               You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
        :param Sequence['GroupTagFilter'] tag_filters: A list of key-value pair objects that limit which resources can be members of the resource group. This property is required when the `ResourceQuery.Type` property is `TAG_FILTERS_1_0` .
               
               A resource must have a tag that matches every filter that is provided in the `TagFilters` list.
        """
        if resource_type_filters is not None:
            pulumi.set(__self__, "resource_type_filters", resource_type_filters)
        if stack_identifier is not None:
            pulumi.set(__self__, "stack_identifier", stack_identifier)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter(name="resourceTypeFilters")
    def resource_type_filters(self) -> Optional[Sequence[str]]:
        """
        Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
        """
        return pulumi.get(self, "resource_type_filters")

    @property
    @pulumi.getter(name="stackIdentifier")
    def stack_identifier(self) -> Optional[str]:
        """
        Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.

        You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
        """
        return pulumi.get(self, "stack_identifier")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.GroupTagFilter']]:
        """
        A list of key-value pair objects that limit which resources can be members of the resource group. This property is required when the `ResourceQuery.Type` property is `TAG_FILTERS_1_0` .

        A resource must have a tag that matches every filter that is provided in the `TagFilters` list.
        """
        return pulumi.get(self, "tag_filters")


@pulumi.output_type
class GroupResourceQuery(dict):
    def __init__(__self__, *,
                 query: Optional['outputs.GroupQuery'] = None,
                 type: Optional['GroupResourceQueryType'] = None):
        """
        :param 'GroupQuery' query: The query that defines the membership of the group. This is a structure with properties that depend on the `Type` .
               
               The `Query` structure must be included in the following scenarios:
               
               - When the `Type` is `TAG_FILTERS_1_0` , you must specify a `Query` structure that contains a `TagFilters` list of tags. Resources with tags that match those in the `TagFilter` list become members of the resource group.
               - When the `Type` is `CLOUDFORMATION_STACK_1_0` then this field is required only when you must specify a CloudFormation stack other than the one you are defining. To do this, the `Query` structure must contain the `StackIdentifier` property. If you don't specify either a `Query` structure or a `StackIdentifier` within that `Query` , then it defaults to the CloudFormation stack that you're currently constructing.
        :param 'GroupResourceQueryType' type: Specifies the type of resource query that determines this group's membership. There are two valid query types:
               
               - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
               - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
        """
        if query is not None:
            pulumi.set(__self__, "query", query)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def query(self) -> Optional['outputs.GroupQuery']:
        """
        The query that defines the membership of the group. This is a structure with properties that depend on the `Type` .

        The `Query` structure must be included in the following scenarios:

        - When the `Type` is `TAG_FILTERS_1_0` , you must specify a `Query` structure that contains a `TagFilters` list of tags. Resources with tags that match those in the `TagFilter` list become members of the resource group.
        - When the `Type` is `CLOUDFORMATION_STACK_1_0` then this field is required only when you must specify a CloudFormation stack other than the one you are defining. To do this, the `Query` structure must contain the `StackIdentifier` property. If you don't specify either a `Query` structure or a `StackIdentifier` within that `Query` , then it defaults to the CloudFormation stack that you're currently constructing.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def type(self) -> Optional['GroupResourceQueryType']:
        """
        Specifies the type of resource query that determines this group's membership. There are two valid query types:

        - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
        - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GroupTagFilter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str key: A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.
               
               This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
        :param Sequence[str] values: A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.

        This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
        """
        return pulumi.get(self, "values")


