# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AssumeRole',
    'AutoNaming',
    'DefaultTags',
    'Endpoints',
    'IgnoreTags',
]

@pulumi.output_type
class AssumeRole(dict):
    """
    The configuration for a Provider to assume a role.
    """
    def __init__(__self__, *,
                 duration_seconds: Optional[_builtins.int] = None,
                 external_id: Optional[_builtins.str] = None,
                 policy: Optional[_builtins.str] = None,
                 policy_arns: Optional[Sequence[_builtins.str]] = None,
                 role_arn: Optional[_builtins.str] = None,
                 session_name: Optional[_builtins.str] = None,
                 tags: Optional[Mapping[str, _builtins.str]] = None,
                 transitive_tag_keys: Optional[Sequence[_builtins.str]] = None):
        """
        The configuration for a Provider to assume a role.
        :param _builtins.int duration_seconds: Number of seconds to restrict the assume role session duration.
        :param _builtins.str external_id: External identifier to use when assuming the role.
        :param _builtins.str policy: IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
        :param Sequence[_builtins.str] policy_arns: Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the role.
        :param _builtins.str role_arn: Amazon Resource Name (ARN) of the IAM Role to assume.
        :param _builtins.str session_name: Session name to use when assuming the role.
        :param Mapping[str, _builtins.str] tags: Map of assume role session tags.
        :param Sequence[_builtins.str] transitive_tag_keys: A list of keys for session tags that you want to set as transitive. If you set a tag key as transitive, the corresponding key and value passes to subsequent sessions in a role chain.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policy_arns is not None:
            pulumi.set(__self__, "policy_arns", policy_arns)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if session_name is not None:
            pulumi.set(__self__, "session_name", session_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transitive_tag_keys is not None:
            pulumi.set(__self__, "transitive_tag_keys", transitive_tag_keys)

    @_builtins.property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[_builtins.int]:
        """
        Number of seconds to restrict the assume role session duration.
        """
        return pulumi.get(self, "duration_seconds")

    @_builtins.property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[_builtins.str]:
        """
        External identifier to use when assuming the role.
        """
        return pulumi.get(self, "external_id")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[_builtins.str]:
        """
        IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="policyArns")
    def policy_arns(self) -> Optional[Sequence[_builtins.str]]:
        """
        Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the role.
        """
        return pulumi.get(self, "policy_arns")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        """
        Amazon Resource Name (ARN) of the IAM Role to assume.
        """
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter(name="sessionName")
    def session_name(self) -> Optional[_builtins.str]:
        """
        Session name to use when assuming the role.
        """
        return pulumi.get(self, "session_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Map of assume role session tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="transitiveTagKeys")
    def transitive_tag_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        A list of keys for session tags that you want to set as transitive. If you set a tag key as transitive, the corresponding key and value passes to subsequent sessions in a role chain.
        """
        return pulumi.get(self, "transitive_tag_keys")


@pulumi.output_type
class AutoNaming(dict):
    """
    The configuration for automatically naming resources.
    """
    def __init__(__self__, *,
                 auto_trim: Optional[_builtins.bool] = None,
                 random_suffix_min_length: Optional[_builtins.int] = None):
        """
        The configuration for automatically naming resources.
        :param _builtins.bool auto_trim: Automatically trim the auto-generated name to meet the maximum length constraint.
        :param _builtins.int random_suffix_min_length: The minimum length of the random suffix to append to the auto-generated name.
        """
        if auto_trim is not None:
            pulumi.set(__self__, "auto_trim", auto_trim)
        if random_suffix_min_length is None:
            random_suffix_min_length = 1
        if random_suffix_min_length is not None:
            pulumi.set(__self__, "random_suffix_min_length", random_suffix_min_length)

    @_builtins.property
    @pulumi.getter(name="autoTrim")
    def auto_trim(self) -> Optional[_builtins.bool]:
        """
        Automatically trim the auto-generated name to meet the maximum length constraint.
        """
        return pulumi.get(self, "auto_trim")

    @_builtins.property
    @pulumi.getter(name="randomSuffixMinLength")
    def random_suffix_min_length(self) -> Optional[_builtins.int]:
        """
        The minimum length of the random suffix to append to the auto-generated name.
        """
        return pulumi.get(self, "random_suffix_min_length")


@pulumi.output_type
class DefaultTags(dict):
    """
    The configuration with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
    """
    def __init__(__self__, *,
                 tags: Optional[Mapping[str, _builtins.str]] = None):
        """
        The configuration with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
        :param Mapping[str, _builtins.str] tags: A group of tags to set across all resources.
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        A group of tags to set across all resources.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class Endpoints(dict):
    """
    The configuration for for customizing service endpoints.
    """
    def __init__(__self__, *,
                 cloudcontrol: Optional[_builtins.str] = None,
                 cloudformation: Optional[_builtins.str] = None,
                 ec2: Optional[_builtins.str] = None,
                 ssm: Optional[_builtins.str] = None,
                 sts: Optional[_builtins.str] = None):
        """
        The configuration for for customizing service endpoints.
        :param _builtins.str cloudcontrol: Override the default endpoint for AWS CloudControl
        :param _builtins.str cloudformation: Override the default endpoint for AWS CloudFormation
        :param _builtins.str ec2: Override the default endpoint for AWS Elastic Compute Cloud (EC2)
        :param _builtins.str ssm: Override the default endpoint for AWS Systems Manager
        :param _builtins.str sts: Override the default endpoint for AWS Security Token Service (STS)
        """
        if cloudcontrol is not None:
            pulumi.set(__self__, "cloudcontrol", cloudcontrol)
        if cloudformation is not None:
            pulumi.set(__self__, "cloudformation", cloudformation)
        if ec2 is not None:
            pulumi.set(__self__, "ec2", ec2)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if sts is not None:
            pulumi.set(__self__, "sts", sts)

    @_builtins.property
    @pulumi.getter
    def cloudcontrol(self) -> Optional[_builtins.str]:
        """
        Override the default endpoint for AWS CloudControl
        """
        return pulumi.get(self, "cloudcontrol")

    @_builtins.property
    @pulumi.getter
    def cloudformation(self) -> Optional[_builtins.str]:
        """
        Override the default endpoint for AWS CloudFormation
        """
        return pulumi.get(self, "cloudformation")

    @_builtins.property
    @pulumi.getter
    def ec2(self) -> Optional[_builtins.str]:
        """
        Override the default endpoint for AWS Elastic Compute Cloud (EC2)
        """
        return pulumi.get(self, "ec2")

    @_builtins.property
    @pulumi.getter
    def ssm(self) -> Optional[_builtins.str]:
        """
        Override the default endpoint for AWS Systems Manager
        """
        return pulumi.get(self, "ssm")

    @_builtins.property
    @pulumi.getter
    def sts(self) -> Optional[_builtins.str]:
        """
        Override the default endpoint for AWS Security Token Service (STS)
        """
        return pulumi.get(self, "sts")


@pulumi.output_type
class IgnoreTags(dict):
    """
    The configuration with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
    """
    def __init__(__self__, *,
                 key_prefixes: Optional[Sequence[_builtins.str]] = None,
                 keys: Optional[Sequence[_builtins.str]] = None):
        """
        The configuration with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
        :param Sequence[_builtins.str] key_prefixes: List of exact resource tag keys to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning the tag in any `tags` attributes and displaying any configuration difference for the tag value. If any resource configuration still has this tag key configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
        :param Sequence[_builtins.str] keys: List of resource tag key prefixes to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning any tag key matching the prefixes in any `tags` attributes and displaying any configuration difference for those tag values. If any resource configuration still has a tag matching one of the prefixes configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
        """
        if key_prefixes is not None:
            pulumi.set(__self__, "key_prefixes", key_prefixes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @_builtins.property
    @pulumi.getter(name="keyPrefixes")
    def key_prefixes(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of exact resource tag keys to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning the tag in any `tags` attributes and displaying any configuration difference for the tag value. If any resource configuration still has this tag key configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
        """
        return pulumi.get(self, "key_prefixes")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of resource tag key prefixes to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning any tag key matching the prefixes in any `tags` attributes and displaying any configuration difference for those tag values. If any resource configuration still has a tag matching one of the prefixes configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
        """
        return pulumi.get(self, "keys")


