# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs

__all__ = [
    'GetAnomalyDetectorResult',
    'AwaitableGetAnomalyDetectorResult',
    'get_anomaly_detector',
    'get_anomaly_detector_output',
]

@pulumi.output_type
class GetAnomalyDetectorResult:
    def __init__(__self__, arn=None, configuration=None, evaluation_interval_in_seconds=None, labels=None, missing_data_action=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if evaluation_interval_in_seconds and not isinstance(evaluation_interval_in_seconds, int):
            raise TypeError("Expected argument 'evaluation_interval_in_seconds' to be a int")
        pulumi.set(__self__, "evaluation_interval_in_seconds", evaluation_interval_in_seconds)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if missing_data_action and not isinstance(missing_data_action, dict):
            raise TypeError("Expected argument 'missing_data_action' to be a dict")
        pulumi.set(__self__, "missing_data_action", missing_data_action)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[_builtins.str]:
        """
        The AnomalyDetector ARN.
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.AnomalyDetectorConfiguration']:
        """
        Determines the anomaly detector's algorithm and its configuration.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="evaluationIntervalInSeconds")
    def evaluation_interval_in_seconds(self) -> Optional[_builtins.int]:
        """
        The AnomalyDetector period of detection and metric generation.
        """
        return pulumi.get(self, "evaluation_interval_in_seconds")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.AnomalyDetectorLabel']]:
        """
        An array of key-value pairs to provide meta-data.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="missingDataAction")
    def missing_data_action(self) -> Optional['outputs.AnomalyDetectorMissingDataAction']:
        """
        The action to perform when running the expression returns no data.
        """
        return pulumi.get(self, "missing_data_action")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetAnomalyDetectorResult(GetAnomalyDetectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnomalyDetectorResult(
            arn=self.arn,
            configuration=self.configuration,
            evaluation_interval_in_seconds=self.evaluation_interval_in_seconds,
            labels=self.labels,
            missing_data_action=self.missing_data_action,
            tags=self.tags)


def get_anomaly_detector(arn: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnomalyDetectorResult:
    """
    AnomalyDetector schema for cloudformation.


    :param _builtins.str arn: The AnomalyDetector ARN.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:aps:getAnomalyDetector', __args__, opts=opts, typ=GetAnomalyDetectorResult).value

    return AwaitableGetAnomalyDetectorResult(
        arn=pulumi.get(__ret__, 'arn'),
        configuration=pulumi.get(__ret__, 'configuration'),
        evaluation_interval_in_seconds=pulumi.get(__ret__, 'evaluation_interval_in_seconds'),
        labels=pulumi.get(__ret__, 'labels'),
        missing_data_action=pulumi.get(__ret__, 'missing_data_action'),
        tags=pulumi.get(__ret__, 'tags'))
def get_anomaly_detector_output(arn: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAnomalyDetectorResult]:
    """
    AnomalyDetector schema for cloudformation.


    :param _builtins.str arn: The AnomalyDetector ARN.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:aps:getAnomalyDetector', __args__, opts=opts, typ=GetAnomalyDetectorResult)
    return __ret__.apply(lambda __response__: GetAnomalyDetectorResult(
        arn=pulumi.get(__response__, 'arn'),
        configuration=pulumi.get(__response__, 'configuration'),
        evaluation_interval_in_seconds=pulumi.get(__response__, 'evaluation_interval_in_seconds'),
        labels=pulumi.get(__response__, 'labels'),
        missing_data_action=pulumi.get(__response__, 'missing_data_action'),
        tags=pulumi.get(__response__, 'tags')))
