# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['AnomalyDetectorArgs', 'AnomalyDetector']

@pulumi.input_type
class AnomalyDetectorArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[_builtins.str],
                 configuration: pulumi.Input['AnomalyDetectorConfigurationArgs'],
                 workspace: pulumi.Input[_builtins.str],
                 evaluation_interval_in_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['AnomalyDetectorLabelArgs']]]] = None,
                 missing_data_action: Optional[pulumi.Input['AnomalyDetectorMissingDataActionArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a AnomalyDetector resource.
        :param pulumi.Input[_builtins.str] alias: The AnomalyDetector alias.
        :param pulumi.Input['AnomalyDetectorConfigurationArgs'] configuration: Determines the anomaly detector's algorithm and its configuration.
        :param pulumi.Input[_builtins.str] workspace: Required to identify a specific APS Workspace associated with this Anomaly Detector.
        :param pulumi.Input[_builtins.int] evaluation_interval_in_seconds: The AnomalyDetector period of detection and metric generation.
        :param pulumi.Input[Sequence[pulumi.Input['AnomalyDetectorLabelArgs']]] labels: An array of key-value pairs to provide meta-data.
        :param pulumi.Input['AnomalyDetectorMissingDataActionArgs'] missing_data_action: The action to perform when running the expression returns no data.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to this resource.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "workspace", workspace)
        if evaluation_interval_in_seconds is not None:
            pulumi.set(__self__, "evaluation_interval_in_seconds", evaluation_interval_in_seconds)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if missing_data_action is not None:
            pulumi.set(__self__, "missing_data_action", missing_data_action)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Input[_builtins.str]:
        """
        The AnomalyDetector alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AnomalyDetectorConfigurationArgs']:
        """
        Determines the anomaly detector's algorithm and its configuration.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AnomalyDetectorConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[_builtins.str]:
        """
        Required to identify a specific APS Workspace associated with this Anomaly Detector.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workspace", value)

    @_builtins.property
    @pulumi.getter(name="evaluationIntervalInSeconds")
    def evaluation_interval_in_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The AnomalyDetector period of detection and metric generation.
        """
        return pulumi.get(self, "evaluation_interval_in_seconds")

    @evaluation_interval_in_seconds.setter
    def evaluation_interval_in_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "evaluation_interval_in_seconds", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnomalyDetectorLabelArgs']]]]:
        """
        An array of key-value pairs to provide meta-data.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnomalyDetectorLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="missingDataAction")
    def missing_data_action(self) -> Optional[pulumi.Input['AnomalyDetectorMissingDataActionArgs']]:
        """
        The action to perform when running the expression returns no data.
        """
        return pulumi.get(self, "missing_data_action")

    @missing_data_action.setter
    def missing_data_action(self, value: Optional[pulumi.Input['AnomalyDetectorMissingDataActionArgs']]):
        pulumi.set(self, "missing_data_action", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:aps:AnomalyDetector")
class AnomalyDetector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['AnomalyDetectorConfigurationArgs', 'AnomalyDetectorConfigurationArgsDict']]] = None,
                 evaluation_interval_in_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AnomalyDetectorLabelArgs', 'AnomalyDetectorLabelArgsDict']]]]] = None,
                 missing_data_action: Optional[pulumi.Input[Union['AnomalyDetectorMissingDataActionArgs', 'AnomalyDetectorMissingDataActionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 workspace: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        AnomalyDetector schema for cloudformation.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: The AnomalyDetector alias.
        :param pulumi.Input[Union['AnomalyDetectorConfigurationArgs', 'AnomalyDetectorConfigurationArgsDict']] configuration: Determines the anomaly detector's algorithm and its configuration.
        :param pulumi.Input[_builtins.int] evaluation_interval_in_seconds: The AnomalyDetector period of detection and metric generation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AnomalyDetectorLabelArgs', 'AnomalyDetectorLabelArgsDict']]]] labels: An array of key-value pairs to provide meta-data.
        :param pulumi.Input[Union['AnomalyDetectorMissingDataActionArgs', 'AnomalyDetectorMissingDataActionArgsDict']] missing_data_action: The action to perform when running the expression returns no data.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to this resource.
        :param pulumi.Input[_builtins.str] workspace: Required to identify a specific APS Workspace associated with this Anomaly Detector.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AnomalyDetectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        AnomalyDetector schema for cloudformation.

        :param str resource_name: The name of the resource.
        :param AnomalyDetectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AnomalyDetectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['AnomalyDetectorConfigurationArgs', 'AnomalyDetectorConfigurationArgsDict']]] = None,
                 evaluation_interval_in_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AnomalyDetectorLabelArgs', 'AnomalyDetectorLabelArgsDict']]]]] = None,
                 missing_data_action: Optional[pulumi.Input[Union['AnomalyDetectorMissingDataActionArgs', 'AnomalyDetectorMissingDataActionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 workspace: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AnomalyDetectorArgs.__new__(AnomalyDetectorArgs)

            if alias is None and not opts.urn:
                raise TypeError("Missing required property 'alias'")
            __props__.__dict__["alias"] = alias
            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["evaluation_interval_in_seconds"] = evaluation_interval_in_seconds
            __props__.__dict__["labels"] = labels
            __props__.__dict__["missing_data_action"] = missing_data_action
            __props__.__dict__["tags"] = tags
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
            __props__.__dict__["arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["alias", "workspace"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(AnomalyDetector, __self__).__init__(
            'aws-native:aps:AnomalyDetector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AnomalyDetector':
        """
        Get an existing AnomalyDetector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AnomalyDetectorArgs.__new__(AnomalyDetectorArgs)

        __props__.__dict__["alias"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["evaluation_interval_in_seconds"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["missing_data_action"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["workspace"] = None
        return AnomalyDetector(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        The AnomalyDetector alias.
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Output[_builtins.str]:
        """
        The AnomalyDetector ARN.
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.AnomalyDetectorConfiguration']:
        """
        Determines the anomaly detector's algorithm and its configuration.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="evaluationIntervalInSeconds")
    def evaluation_interval_in_seconds(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The AnomalyDetector period of detection and metric generation.
        """
        return pulumi.get(self, "evaluation_interval_in_seconds")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence['outputs.AnomalyDetectorLabel']]]:
        """
        An array of key-value pairs to provide meta-data.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="missingDataAction")
    def missing_data_action(self) -> pulumi.Output[Optional['outputs.AnomalyDetectorMissingDataAction']]:
        """
        The action to perform when running the expression returns no data.
        """
        return pulumi.get(self, "missing_data_action")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[_builtins.str]:
        """
        Required to identify a specific APS Workspace associated with this Anomaly Detector.
        """
        return pulumi.get(self, "workspace")

