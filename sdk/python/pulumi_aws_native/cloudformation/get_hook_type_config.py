# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetHookTypeConfigResult',
    'AwaitableGetHookTypeConfigResult',
    'get_hook_type_config',
    'get_hook_type_config_output',
]

@pulumi.output_type
class GetHookTypeConfigResult:
    def __init__(__self__, configuration=None, configuration_arn=None, type_name=None):
        if configuration and not isinstance(configuration, str):
            raise TypeError("Expected argument 'configuration' to be a str")
        pulumi.set(__self__, "configuration", configuration)
        if configuration_arn and not isinstance(configuration_arn, str):
            raise TypeError("Expected argument 'configuration_arn' to be a str")
        pulumi.set(__self__, "configuration_arn", configuration_arn)
        if type_name and not isinstance(type_name, str):
            raise TypeError("Expected argument 'type_name' to be a str")
        pulumi.set(__self__, "type_name", type_name)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        """
        The configuration data for the extension, in this account and region.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="configurationArn")
    def configuration_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) for the configuration data, in this account and region.
        """
        return pulumi.get(self, "configuration_arn")

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[str]:
        """
        The name of the type being registered.

        We recommend that type names adhere to the following pattern: company_or_organization::service::type.
        """
        return pulumi.get(self, "type_name")


class AwaitableGetHookTypeConfigResult(GetHookTypeConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHookTypeConfigResult(
            configuration=self.configuration,
            configuration_arn=self.configuration_arn,
            type_name=self.type_name)


def get_hook_type_config(type_arn: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHookTypeConfigResult:
    """
    Specifies the configuration data for a registered hook in CloudFormation Registry.


    :param str type_arn: The Amazon Resource Name (ARN) of the type version.
    """
    __args__ = dict()
    __args__['typeArn'] = type_arn
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:cloudformation:getHookTypeConfig', __args__, opts=opts, typ=GetHookTypeConfigResult).value

    return AwaitableGetHookTypeConfigResult(
        configuration=__ret__.configuration,
        configuration_arn=__ret__.configuration_arn,
        type_name=__ret__.type_name)


@_utilities.lift_output_func(get_hook_type_config)
def get_hook_type_config_output(type_arn: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHookTypeConfigResult]:
    """
    Specifies the configuration data for a registered hook in CloudFormation Registry.


    :param str type_arn: The Amazon Resource Name (ARN) of the type version.
    """
    ...
