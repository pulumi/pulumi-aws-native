# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetGuardHookResult',
    'AwaitableGetGuardHookResult',
    'get_guard_hook',
    'get_guard_hook_output',
]

@pulumi.output_type
class GetGuardHookResult:
    def __init__(__self__, failure_mode=None, hook_arn=None, hook_status=None, log_bucket=None, options=None, rule_location=None, stack_filters=None, target_filters=None, target_operations=None):
        if failure_mode and not isinstance(failure_mode, str):
            raise TypeError("Expected argument 'failure_mode' to be a str")
        pulumi.set(__self__, "failure_mode", failure_mode)
        if hook_arn and not isinstance(hook_arn, str):
            raise TypeError("Expected argument 'hook_arn' to be a str")
        pulumi.set(__self__, "hook_arn", hook_arn)
        if hook_status and not isinstance(hook_status, str):
            raise TypeError("Expected argument 'hook_status' to be a str")
        pulumi.set(__self__, "hook_status", hook_status)
        if log_bucket and not isinstance(log_bucket, str):
            raise TypeError("Expected argument 'log_bucket' to be a str")
        pulumi.set(__self__, "log_bucket", log_bucket)
        if options and not isinstance(options, dict):
            raise TypeError("Expected argument 'options' to be a dict")
        pulumi.set(__self__, "options", options)
        if rule_location and not isinstance(rule_location, dict):
            raise TypeError("Expected argument 'rule_location' to be a dict")
        pulumi.set(__self__, "rule_location", rule_location)
        if stack_filters and not isinstance(stack_filters, dict):
            raise TypeError("Expected argument 'stack_filters' to be a dict")
        pulumi.set(__self__, "stack_filters", stack_filters)
        if target_filters and not isinstance(target_filters, dict):
            raise TypeError("Expected argument 'target_filters' to be a dict")
        pulumi.set(__self__, "target_filters", target_filters)
        if target_operations and not isinstance(target_operations, list):
            raise TypeError("Expected argument 'target_operations' to be a list")
        pulumi.set(__self__, "target_operations", target_operations)

    @property
    @pulumi.getter(name="failureMode")
    def failure_mode(self) -> Optional['GuardHookFailureMode']:
        """
        Attribute to specify CloudFormation behavior on hook failure.
        """
        return pulumi.get(self, "failure_mode")

    @property
    @pulumi.getter(name="hookArn")
    def hook_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the activated hook
        """
        return pulumi.get(self, "hook_arn")

    @property
    @pulumi.getter(name="hookStatus")
    def hook_status(self) -> Optional['GuardHookHookStatus']:
        """
        Attribute to specify which stacks this hook applies to or should get invoked for
        """
        return pulumi.get(self, "hook_status")

    @property
    @pulumi.getter(name="logBucket")
    def log_bucket(self) -> Optional[str]:
        """
        S3 Bucket where the guard validate report will be uploaded to
        """
        return pulumi.get(self, "log_bucket")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.OptionsProperties']:
        """
        Specifies the S3 location of your input parameters.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="ruleLocation")
    def rule_location(self) -> Optional['outputs.GuardHookS3Location']:
        """
        Specifies the S3 location of your Guard rules.
        """
        return pulumi.get(self, "rule_location")

    @property
    @pulumi.getter(name="stackFilters")
    def stack_filters(self) -> Optional['outputs.StackFiltersProperties']:
        """
        Filters to allow hooks to target specific stack attributes
        """
        return pulumi.get(self, "stack_filters")

    @property
    @pulumi.getter(name="targetFilters")
    def target_filters(self) -> Optional[Any]:
        """
        Attribute to specify which targets should invoke the hook
        """
        return pulumi.get(self, "target_filters")

    @property
    @pulumi.getter(name="targetOperations")
    def target_operations(self) -> Optional[Sequence['GuardHookTargetOperation']]:
        """
        Which operations should this Hook run against? Resource changes, stacks or change sets.
        """
        return pulumi.get(self, "target_operations")


class AwaitableGetGuardHookResult(GetGuardHookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGuardHookResult(
            failure_mode=self.failure_mode,
            hook_arn=self.hook_arn,
            hook_status=self.hook_status,
            log_bucket=self.log_bucket,
            options=self.options,
            rule_location=self.rule_location,
            stack_filters=self.stack_filters,
            target_filters=self.target_filters,
            target_operations=self.target_operations)


def get_guard_hook(hook_arn: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGuardHookResult:
    """
    This is a CloudFormation resource for activating the first-party AWS::Hooks::GuardHook.


    :param str hook_arn: The Amazon Resource Name (ARN) of the activated hook
    """
    __args__ = dict()
    __args__['hookArn'] = hook_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cloudformation:getGuardHook', __args__, opts=opts, typ=GetGuardHookResult).value

    return AwaitableGetGuardHookResult(
        failure_mode=pulumi.get(__ret__, 'failure_mode'),
        hook_arn=pulumi.get(__ret__, 'hook_arn'),
        hook_status=pulumi.get(__ret__, 'hook_status'),
        log_bucket=pulumi.get(__ret__, 'log_bucket'),
        options=pulumi.get(__ret__, 'options'),
        rule_location=pulumi.get(__ret__, 'rule_location'),
        stack_filters=pulumi.get(__ret__, 'stack_filters'),
        target_filters=pulumi.get(__ret__, 'target_filters'),
        target_operations=pulumi.get(__ret__, 'target_operations'))
def get_guard_hook_output(hook_arn: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGuardHookResult]:
    """
    This is a CloudFormation resource for activating the first-party AWS::Hooks::GuardHook.


    :param str hook_arn: The Amazon Resource Name (ARN) of the activated hook
    """
    __args__ = dict()
    __args__['hookArn'] = hook_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:cloudformation:getGuardHook', __args__, opts=opts, typ=GetGuardHookResult)
    return __ret__.apply(lambda __response__: GetGuardHookResult(
        failure_mode=pulumi.get(__response__, 'failure_mode'),
        hook_arn=pulumi.get(__response__, 'hook_arn'),
        hook_status=pulumi.get(__response__, 'hook_status'),
        log_bucket=pulumi.get(__response__, 'log_bucket'),
        options=pulumi.get(__response__, 'options'),
        rule_location=pulumi.get(__response__, 'rule_location'),
        stack_filters=pulumi.get(__response__, 'stack_filters'),
        target_filters=pulumi.get(__response__, 'target_filters'),
        target_operations=pulumi.get(__response__, 'target_operations')))
