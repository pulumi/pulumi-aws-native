# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetPlanResult',
    'AwaitableGetPlanResult',
    'get_plan',
    'get_plan_output',
]

@pulumi.output_type
class GetPlanResult:
    def __init__(__self__, arn=None, associated_alarms=None, description=None, execution_role=None, health_checks_for_plan=None, owner=None, recovery_time_objective_minutes=None, route53_health_checks=None, tags=None, triggers=None, version=None, workflows=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if associated_alarms and not isinstance(associated_alarms, dict):
            raise TypeError("Expected argument 'associated_alarms' to be a dict")
        pulumi.set(__self__, "associated_alarms", associated_alarms)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if execution_role and not isinstance(execution_role, str):
            raise TypeError("Expected argument 'execution_role' to be a str")
        pulumi.set(__self__, "execution_role", execution_role)
        if health_checks_for_plan and not isinstance(health_checks_for_plan, dict):
            raise TypeError("Expected argument 'health_checks_for_plan' to be a dict")
        pulumi.set(__self__, "health_checks_for_plan", health_checks_for_plan)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if recovery_time_objective_minutes and not isinstance(recovery_time_objective_minutes, float):
            raise TypeError("Expected argument 'recovery_time_objective_minutes' to be a float")
        pulumi.set(__self__, "recovery_time_objective_minutes", recovery_time_objective_minutes)
        if route53_health_checks and not isinstance(route53_health_checks, dict):
            raise TypeError("Expected argument 'route53_health_checks' to be a dict")
        pulumi.set(__self__, "route53_health_checks", route53_health_checks)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if workflows and not isinstance(workflows, list):
            raise TypeError("Expected argument 'workflows' to be a list")
        pulumi.set(__self__, "workflows", workflows)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the plan.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="associatedAlarms")
    def associated_alarms(self) -> Optional[Mapping[str, 'outputs.PlanAssociatedAlarm']]:
        """
        The associated application health alarms for a plan.
        """
        return pulumi.get(self, "associated_alarms")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description for a plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[builtins.str]:
        """
        The execution role for a plan.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="healthChecksForPlan")
    def health_checks_for_plan(self) -> Optional[Mapping[str, Sequence['outputs.PlanHealthCheckState']]]:
        """
        Represents a Region switch plan. A plan defines the steps required to shift traffic from one AWS Region to another.
        """
        return pulumi.get(self, "health_checks_for_plan")

    @property
    @pulumi.getter
    def owner(self) -> Optional[builtins.str]:
        """
        The owner of a plan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="recoveryTimeObjectiveMinutes")
    def recovery_time_objective_minutes(self) -> Optional[builtins.float]:
        """
        The recovery time objective for a plan.
        """
        return pulumi.get(self, "recovery_time_objective_minutes")

    @property
    @pulumi.getter(name="route53HealthChecks")
    def route53_health_checks(self) -> Optional['outputs.Route53HealthChecksProperties']:
        return pulumi.get(self, "route53_health_checks")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence['outputs.PlanTrigger']]:
        """
        The triggers for a plan.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version for the plan.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def workflows(self) -> Optional[Sequence['outputs.PlanWorkflow']]:
        """
        The workflows for a plan.
        """
        return pulumi.get(self, "workflows")


class AwaitableGetPlanResult(GetPlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlanResult(
            arn=self.arn,
            associated_alarms=self.associated_alarms,
            description=self.description,
            execution_role=self.execution_role,
            health_checks_for_plan=self.health_checks_for_plan,
            owner=self.owner,
            recovery_time_objective_minutes=self.recovery_time_objective_minutes,
            route53_health_checks=self.route53_health_checks,
            tags=self.tags,
            triggers=self.triggers,
            version=self.version,
            workflows=self.workflows)


def get_plan(arn: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlanResult:
    """
    Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application


    :param builtins.str arn: The Amazon Resource Name (ARN) of the plan.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:arcregionswitch:getPlan', __args__, opts=opts, typ=GetPlanResult).value

    return AwaitableGetPlanResult(
        arn=pulumi.get(__ret__, 'arn'),
        associated_alarms=pulumi.get(__ret__, 'associated_alarms'),
        description=pulumi.get(__ret__, 'description'),
        execution_role=pulumi.get(__ret__, 'execution_role'),
        health_checks_for_plan=pulumi.get(__ret__, 'health_checks_for_plan'),
        owner=pulumi.get(__ret__, 'owner'),
        recovery_time_objective_minutes=pulumi.get(__ret__, 'recovery_time_objective_minutes'),
        route53_health_checks=pulumi.get(__ret__, 'route53_health_checks'),
        tags=pulumi.get(__ret__, 'tags'),
        triggers=pulumi.get(__ret__, 'triggers'),
        version=pulumi.get(__ret__, 'version'),
        workflows=pulumi.get(__ret__, 'workflows'))
def get_plan_output(arn: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlanResult]:
    """
    Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application


    :param builtins.str arn: The Amazon Resource Name (ARN) of the plan.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:arcregionswitch:getPlan', __args__, opts=opts, typ=GetPlanResult)
    return __ret__.apply(lambda __response__: GetPlanResult(
        arn=pulumi.get(__response__, 'arn'),
        associated_alarms=pulumi.get(__response__, 'associated_alarms'),
        description=pulumi.get(__response__, 'description'),
        execution_role=pulumi.get(__response__, 'execution_role'),
        health_checks_for_plan=pulumi.get(__response__, 'health_checks_for_plan'),
        owner=pulumi.get(__response__, 'owner'),
        recovery_time_objective_minutes=pulumi.get(__response__, 'recovery_time_objective_minutes'),
        route53_health_checks=pulumi.get(__response__, 'route53_health_checks'),
        tags=pulumi.get(__response__, 'tags'),
        triggers=pulumi.get(__response__, 'triggers'),
        version=pulumi.get(__response__, 'version'),
        workflows=pulumi.get(__response__, 'workflows')))
