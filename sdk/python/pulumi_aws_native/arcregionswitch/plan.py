# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PlanArgs', 'Plan']

@pulumi.input_type
class PlanArgs:
    def __init__(__self__, *,
                 execution_role: pulumi.Input[builtins.str],
                 recovery_approach: pulumi.Input['PlanRecoveryApproach'],
                 regions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 workflows: pulumi.Input[Sequence[pulumi.Input['PlanWorkflowArgs']]],
                 associated_alarms: Optional[pulumi.Input[Mapping[str, pulumi.Input['PlanAssociatedAlarmArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_region: Optional[pulumi.Input[builtins.str]] = None,
                 recovery_time_objective_minutes: Optional[pulumi.Input[builtins.float]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['PlanTriggerArgs']]]] = None):
        """
        The set of arguments for constructing a Plan resource.
        :param pulumi.Input[builtins.str] execution_role: The execution role for a plan.
        :param pulumi.Input['PlanRecoveryApproach'] recovery_approach: The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] regions: The AWS Regions for a plan.
        :param pulumi.Input[Sequence[pulumi.Input['PlanWorkflowArgs']]] workflows: The workflows for a plan.
        :param pulumi.Input[Mapping[str, pulumi.Input['PlanAssociatedAlarmArgs']]] associated_alarms: The associated application health alarms for a plan.
        :param pulumi.Input[builtins.str] description: The description for a plan.
        :param pulumi.Input[builtins.str] name: The name for a plan.
        :param pulumi.Input[builtins.str] primary_region: The primary Region for a plan.
        :param pulumi.Input[builtins.float] recovery_time_objective_minutes: The recovery time objective for a plan.
        :param pulumi.Input[Sequence[pulumi.Input['PlanTriggerArgs']]] triggers: The triggers for a plan.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        pulumi.set(__self__, "recovery_approach", recovery_approach)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "workflows", workflows)
        if associated_alarms is not None:
            pulumi.set(__self__, "associated_alarms", associated_alarms)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_region is not None:
            pulumi.set(__self__, "primary_region", primary_region)
        if recovery_time_objective_minutes is not None:
            pulumi.set(__self__, "recovery_time_objective_minutes", recovery_time_objective_minutes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Input[builtins.str]:
        """
        The execution role for a plan.
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="recoveryApproach")
    def recovery_approach(self) -> pulumi.Input['PlanRecoveryApproach']:
        """
        The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
        """
        return pulumi.get(self, "recovery_approach")

    @recovery_approach.setter
    def recovery_approach(self, value: pulumi.Input['PlanRecoveryApproach']):
        pulumi.set(self, "recovery_approach", value)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The AWS Regions for a plan.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter
    def workflows(self) -> pulumi.Input[Sequence[pulumi.Input['PlanWorkflowArgs']]]:
        """
        The workflows for a plan.
        """
        return pulumi.get(self, "workflows")

    @workflows.setter
    def workflows(self, value: pulumi.Input[Sequence[pulumi.Input['PlanWorkflowArgs']]]):
        pulumi.set(self, "workflows", value)

    @property
    @pulumi.getter(name="associatedAlarms")
    def associated_alarms(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['PlanAssociatedAlarmArgs']]]]:
        """
        The associated application health alarms for a plan.
        """
        return pulumi.get(self, "associated_alarms")

    @associated_alarms.setter
    def associated_alarms(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['PlanAssociatedAlarmArgs']]]]):
        pulumi.set(self, "associated_alarms", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description for a plan.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name for a plan.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryRegion")
    def primary_region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The primary Region for a plan.
        """
        return pulumi.get(self, "primary_region")

    @primary_region.setter
    def primary_region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "primary_region", value)

    @property
    @pulumi.getter(name="recoveryTimeObjectiveMinutes")
    def recovery_time_objective_minutes(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The recovery time objective for a plan.
        """
        return pulumi.get(self, "recovery_time_objective_minutes")

    @recovery_time_objective_minutes.setter
    def recovery_time_objective_minutes(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "recovery_time_objective_minutes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlanTriggerArgs']]]]:
        """
        The triggers for a plan.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlanTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)


@pulumi.type_token("aws-native:arcregionswitch:Plan")
class Plan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_alarms: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['PlanAssociatedAlarmArgs', 'PlanAssociatedAlarmArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 execution_role: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_region: Optional[pulumi.Input[builtins.str]] = None,
                 recovery_approach: Optional[pulumi.Input['PlanRecoveryApproach']] = None,
                 recovery_time_objective_minutes: Optional[pulumi.Input[builtins.float]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlanTriggerArgs', 'PlanTriggerArgsDict']]]]] = None,
                 workflows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlanWorkflowArgs', 'PlanWorkflowArgsDict']]]]] = None,
                 __props__=None):
        """
        Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['PlanAssociatedAlarmArgs', 'PlanAssociatedAlarmArgsDict']]]] associated_alarms: The associated application health alarms for a plan.
        :param pulumi.Input[builtins.str] description: The description for a plan.
        :param pulumi.Input[builtins.str] execution_role: The execution role for a plan.
        :param pulumi.Input[builtins.str] name: The name for a plan.
        :param pulumi.Input[builtins.str] primary_region: The primary Region for a plan.
        :param pulumi.Input['PlanRecoveryApproach'] recovery_approach: The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
        :param pulumi.Input[builtins.float] recovery_time_objective_minutes: The recovery time objective for a plan.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] regions: The AWS Regions for a plan.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PlanTriggerArgs', 'PlanTriggerArgsDict']]]] triggers: The triggers for a plan.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PlanWorkflowArgs', 'PlanWorkflowArgsDict']]]] workflows: The workflows for a plan.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application

        :param str resource_name: The name of the resource.
        :param PlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_alarms: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['PlanAssociatedAlarmArgs', 'PlanAssociatedAlarmArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 execution_role: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 primary_region: Optional[pulumi.Input[builtins.str]] = None,
                 recovery_approach: Optional[pulumi.Input['PlanRecoveryApproach']] = None,
                 recovery_time_objective_minutes: Optional[pulumi.Input[builtins.float]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlanTriggerArgs', 'PlanTriggerArgsDict']]]]] = None,
                 workflows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PlanWorkflowArgs', 'PlanWorkflowArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlanArgs.__new__(PlanArgs)

            __props__.__dict__["associated_alarms"] = associated_alarms
            __props__.__dict__["description"] = description
            if execution_role is None and not opts.urn:
                raise TypeError("Missing required property 'execution_role'")
            __props__.__dict__["execution_role"] = execution_role
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_region"] = primary_region
            if recovery_approach is None and not opts.urn:
                raise TypeError("Missing required property 'recovery_approach'")
            __props__.__dict__["recovery_approach"] = recovery_approach
            __props__.__dict__["recovery_time_objective_minutes"] = recovery_time_objective_minutes
            if regions is None and not opts.urn:
                raise TypeError("Missing required property 'regions'")
            __props__.__dict__["regions"] = regions
            __props__.__dict__["tags"] = tags
            __props__.__dict__["triggers"] = triggers
            if workflows is None and not opts.urn:
                raise TypeError("Missing required property 'workflows'")
            __props__.__dict__["workflows"] = workflows
            __props__.__dict__["arn"] = None
            __props__.__dict__["health_checks_for_plan"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["route53_health_checks"] = None
            __props__.__dict__["version"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["name", "primaryRegion", "recoveryApproach", "regions[*]"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Plan, __self__).__init__(
            'aws-native:arcregionswitch:Plan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Plan':
        """
        Get an existing Plan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PlanArgs.__new__(PlanArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["associated_alarms"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["execution_role"] = None
        __props__.__dict__["health_checks_for_plan"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["owner"] = None
        __props__.__dict__["primary_region"] = None
        __props__.__dict__["recovery_approach"] = None
        __props__.__dict__["recovery_time_objective_minutes"] = None
        __props__.__dict__["regions"] = None
        __props__.__dict__["route53_health_checks"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["version"] = None
        __props__.__dict__["workflows"] = None
        return Plan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the plan.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="associatedAlarms")
    def associated_alarms(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.PlanAssociatedAlarm']]]:
        """
        The associated application health alarms for a plan.
        """
        return pulumi.get(self, "associated_alarms")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description for a plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> pulumi.Output[builtins.str]:
        """
        The execution role for a plan.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="healthChecksForPlan")
    def health_checks_for_plan(self) -> pulumi.Output[Mapping[str, Sequence['outputs.PlanHealthCheckState']]]:
        """
        Represents a Region switch plan. A plan defines the steps required to shift traffic from one AWS Region to another.
        """
        return pulumi.get(self, "health_checks_for_plan")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name for a plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[builtins.str]:
        """
        The owner of a plan.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="primaryRegion")
    def primary_region(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The primary Region for a plan.
        """
        return pulumi.get(self, "primary_region")

    @property
    @pulumi.getter(name="recoveryApproach")
    def recovery_approach(self) -> pulumi.Output['PlanRecoveryApproach']:
        """
        The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).
        """
        return pulumi.get(self, "recovery_approach")

    @property
    @pulumi.getter(name="recoveryTimeObjectiveMinutes")
    def recovery_time_objective_minutes(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        The recovery time objective for a plan.
        """
        return pulumi.get(self, "recovery_time_objective_minutes")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The AWS Regions for a plan.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="route53HealthChecks")
    def route53_health_checks(self) -> pulumi.Output['outputs.Route53HealthChecksProperties']:
        return pulumi.get(self, "route53_health_checks")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.PlanTrigger']]]:
        """
        The triggers for a plan.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        """
        The version for the plan.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def workflows(self) -> pulumi.Output[Sequence['outputs.PlanWorkflow']]:
        """
        The workflows for a plan.
        """
        return pulumi.get(self, "workflows")

