# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'LaunchProfileStreamConfigurationSessionBackupArgs',
    'LaunchProfileStreamConfigurationSessionBackupArgsDict',
    'LaunchProfileStreamConfigurationSessionStorageArgs',
    'LaunchProfileStreamConfigurationSessionStorageArgsDict',
    'LaunchProfileStreamConfigurationArgs',
    'LaunchProfileStreamConfigurationArgsDict',
    'LaunchProfileStreamingSessionStorageRootArgs',
    'LaunchProfileStreamingSessionStorageRootArgsDict',
    'LaunchProfileVolumeConfigurationArgs',
    'LaunchProfileVolumeConfigurationArgsDict',
    'StudioComponentActiveDirectoryComputerAttributeArgs',
    'StudioComponentActiveDirectoryComputerAttributeArgsDict',
    'StudioComponentActiveDirectoryConfigurationArgs',
    'StudioComponentActiveDirectoryConfigurationArgsDict',
    'StudioComponentComputeFarmConfigurationArgs',
    'StudioComponentComputeFarmConfigurationArgsDict',
    'StudioComponentConfigurationArgs',
    'StudioComponentConfigurationArgsDict',
    'StudioComponentInitializationScriptArgs',
    'StudioComponentInitializationScriptArgsDict',
    'StudioComponentLicenseServiceConfigurationArgs',
    'StudioComponentLicenseServiceConfigurationArgsDict',
    'StudioComponentScriptParameterKeyValueArgs',
    'StudioComponentScriptParameterKeyValueArgsDict',
    'StudioComponentSharedFileSystemConfigurationArgs',
    'StudioComponentSharedFileSystemConfigurationArgsDict',
    'StudioEncryptionConfigurationArgs',
    'StudioEncryptionConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class LaunchProfileStreamConfigurationSessionBackupArgsDict(TypedDict):
        max_backups_to_retain: NotRequired[pulumi.Input[float]]
        """
        The maximum number of backups that each streaming session created from this launch profile can have.
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        Specifies how artists sessions are backed up.

        Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
        """
elif False:
    LaunchProfileStreamConfigurationSessionBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LaunchProfileStreamConfigurationSessionBackupArgs:
    def __init__(__self__, *,
                 max_backups_to_retain: Optional[pulumi.Input[float]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] max_backups_to_retain: The maximum number of backups that each streaming session created from this launch profile can have.
        :param pulumi.Input[str] mode: Specifies how artists sessions are backed up.
               
               Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
        """
        if max_backups_to_retain is not None:
            pulumi.set(__self__, "max_backups_to_retain", max_backups_to_retain)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="maxBackupsToRetain")
    def max_backups_to_retain(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum number of backups that each streaming session created from this launch profile can have.
        """
        return pulumi.get(self, "max_backups_to_retain")

    @max_backups_to_retain.setter
    def max_backups_to_retain(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_backups_to_retain", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how artists sessions are backed up.

        Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


if not MYPY:
    class LaunchProfileStreamConfigurationSessionStorageArgsDict(TypedDict):
        mode: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
        """
        root: NotRequired[pulumi.Input['LaunchProfileStreamingSessionStorageRootArgsDict']]
        """
        The configuration for the upload storage root of the streaming session.
        """
elif False:
    LaunchProfileStreamConfigurationSessionStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LaunchProfileStreamConfigurationSessionStorageArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[Sequence[pulumi.Input[str]]],
                 root: Optional[pulumi.Input['LaunchProfileStreamingSessionStorageRootArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mode: Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
        :param pulumi.Input['LaunchProfileStreamingSessionStorageRootArgs'] root: The configuration for the upload storage root of the streaming session.
        """
        pulumi.set(__self__, "mode", mode)
        if root is not None:
            pulumi.set(__self__, "root", root)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Allows artists to upload files to their workstations. The only valid option is `UPLOAD` .
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def root(self) -> Optional[pulumi.Input['LaunchProfileStreamingSessionStorageRootArgs']]:
        """
        The configuration for the upload storage root of the streaming session.
        """
        return pulumi.get(self, "root")

    @root.setter
    def root(self, value: Optional[pulumi.Input['LaunchProfileStreamingSessionStorageRootArgs']]):
        pulumi.set(self, "root", value)


if not MYPY:
    class LaunchProfileStreamConfigurationArgsDict(TypedDict):
        clipboard_mode: pulumi.Input[str]
        """
        Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
        """
        ec2_instance_types: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The EC2 instance types that users can select from when launching a streaming session with this launch profile.
        """
        streaming_image_ids: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The streaming images that users can select from when launching a streaming session with this launch profile.
        """
        automatic_termination_mode: NotRequired[pulumi.Input[str]]
        """
        Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.

        - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
        - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.

        This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
        """
        max_session_length_in_minutes: NotRequired[pulumi.Input[float]]
        """
        The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
        """
        max_stopped_session_length_in_minutes: NotRequired[pulumi.Input[float]]
        """
        Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.

        This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .

        If the value is set to 0, your sessions canâ€™t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).

        If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
        """
        session_backup: NotRequired[pulumi.Input['LaunchProfileStreamConfigurationSessionBackupArgsDict']]
        """
        Information about the streaming session backup.
        """
        session_persistence_mode: NotRequired[pulumi.Input[str]]
        """
        Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
        """
        session_storage: NotRequired[pulumi.Input['LaunchProfileStreamConfigurationSessionStorageArgsDict']]
        """
        The upload storage for a streaming session.
        """
        volume_configuration: NotRequired[pulumi.Input['LaunchProfileVolumeConfigurationArgsDict']]
        """
        Custom volume configuration for the root volumes that are attached to streaming sessions.

        This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
        """
elif False:
    LaunchProfileStreamConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LaunchProfileStreamConfigurationArgs:
    def __init__(__self__, *,
                 clipboard_mode: pulumi.Input[str],
                 ec2_instance_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 streaming_image_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 automatic_termination_mode: Optional[pulumi.Input[str]] = None,
                 max_session_length_in_minutes: Optional[pulumi.Input[float]] = None,
                 max_stopped_session_length_in_minutes: Optional[pulumi.Input[float]] = None,
                 session_backup: Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionBackupArgs']] = None,
                 session_persistence_mode: Optional[pulumi.Input[str]] = None,
                 session_storage: Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionStorageArgs']] = None,
                 volume_configuration: Optional[pulumi.Input['LaunchProfileVolumeConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] clipboard_mode: Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ec2_instance_types: The EC2 instance types that users can select from when launching a streaming session with this launch profile.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] streaming_image_ids: The streaming images that users can select from when launching a streaming session with this launch profile.
        :param pulumi.Input[str] automatic_termination_mode: Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
               
               - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
               - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
               
               This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
        :param pulumi.Input[float] max_session_length_in_minutes: The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
        :param pulumi.Input[float] max_stopped_session_length_in_minutes: Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.
               
               This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .
               
               If the value is set to 0, your sessions canâ€™t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).
               
               If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
        :param pulumi.Input['LaunchProfileStreamConfigurationSessionBackupArgs'] session_backup: Information about the streaming session backup.
        :param pulumi.Input[str] session_persistence_mode: Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
        :param pulumi.Input['LaunchProfileStreamConfigurationSessionStorageArgs'] session_storage: The upload storage for a streaming session.
        :param pulumi.Input['LaunchProfileVolumeConfigurationArgs'] volume_configuration: Custom volume configuration for the root volumes that are attached to streaming sessions.
               
               This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
        """
        pulumi.set(__self__, "clipboard_mode", clipboard_mode)
        pulumi.set(__self__, "ec2_instance_types", ec2_instance_types)
        pulumi.set(__self__, "streaming_image_ids", streaming_image_ids)
        if automatic_termination_mode is not None:
            pulumi.set(__self__, "automatic_termination_mode", automatic_termination_mode)
        if max_session_length_in_minutes is not None:
            pulumi.set(__self__, "max_session_length_in_minutes", max_session_length_in_minutes)
        if max_stopped_session_length_in_minutes is not None:
            pulumi.set(__self__, "max_stopped_session_length_in_minutes", max_stopped_session_length_in_minutes)
        if session_backup is not None:
            pulumi.set(__self__, "session_backup", session_backup)
        if session_persistence_mode is not None:
            pulumi.set(__self__, "session_persistence_mode", session_persistence_mode)
        if session_storage is not None:
            pulumi.set(__self__, "session_storage", session_storage)
        if volume_configuration is not None:
            pulumi.set(__self__, "volume_configuration", volume_configuration)

    @property
    @pulumi.getter(name="clipboardMode")
    def clipboard_mode(self) -> pulumi.Input[str]:
        """
        Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
        """
        return pulumi.get(self, "clipboard_mode")

    @clipboard_mode.setter
    def clipboard_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "clipboard_mode", value)

    @property
    @pulumi.getter(name="ec2InstanceTypes")
    def ec2_instance_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The EC2 instance types that users can select from when launching a streaming session with this launch profile.
        """
        return pulumi.get(self, "ec2_instance_types")

    @ec2_instance_types.setter
    def ec2_instance_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ec2_instance_types", value)

    @property
    @pulumi.getter(name="streamingImageIds")
    def streaming_image_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The streaming images that users can select from when launching a streaming session with this launch profile.
        """
        return pulumi.get(self, "streaming_image_ids")

    @streaming_image_ids.setter
    def streaming_image_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "streaming_image_ids", value)

    @property
    @pulumi.getter(name="automaticTerminationMode")
    def automatic_termination_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.

        - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
        - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.

        This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
        """
        return pulumi.get(self, "automatic_termination_mode")

    @automatic_termination_mode.setter
    def automatic_termination_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automatic_termination_mode", value)

    @property
    @pulumi.getter(name="maxSessionLengthInMinutes")
    def max_session_length_in_minutes(self) -> Optional[pulumi.Input[float]]:
        """
        The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.
        """
        return pulumi.get(self, "max_session_length_in_minutes")

    @max_session_length_in_minutes.setter
    def max_session_length_in_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_session_length_in_minutes", value)

    @property
    @pulumi.getter(name="maxStoppedSessionLengthInMinutes")
    def max_stopped_session_length_in_minutes(self) -> Optional[pulumi.Input[float]]:
        """
        Integer that determines if you can start and stop your sessions and how long a session can stay in the `STOPPED` state. The default value is 0. The maximum value is 5760.

        This field is allowed only when `sessionPersistenceMode` is `ACTIVATED` and `automaticTerminationMode` is `ACTIVATED` .

        If the value is set to 0, your sessions canâ€™t be `STOPPED` . If you then call `StopStreamingSession` , the session fails. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be terminated (instead of `STOPPED` ).

        If the value is set to a positive number, the session can be stopped. You can call `StopStreamingSession` to stop sessions in the `READY` state. If the time that a session stays in the `READY` state exceeds the `maxSessionLengthInMinutes` value, the session will automatically be stopped (instead of terminated).
        """
        return pulumi.get(self, "max_stopped_session_length_in_minutes")

    @max_stopped_session_length_in_minutes.setter
    def max_stopped_session_length_in_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_stopped_session_length_in_minutes", value)

    @property
    @pulumi.getter(name="sessionBackup")
    def session_backup(self) -> Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionBackupArgs']]:
        """
        Information about the streaming session backup.
        """
        return pulumi.get(self, "session_backup")

    @session_backup.setter
    def session_backup(self, value: Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionBackupArgs']]):
        pulumi.set(self, "session_backup", value)

    @property
    @pulumi.getter(name="sessionPersistenceMode")
    def session_persistence_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
        """
        return pulumi.get(self, "session_persistence_mode")

    @session_persistence_mode.setter
    def session_persistence_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_persistence_mode", value)

    @property
    @pulumi.getter(name="sessionStorage")
    def session_storage(self) -> Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionStorageArgs']]:
        """
        The upload storage for a streaming session.
        """
        return pulumi.get(self, "session_storage")

    @session_storage.setter
    def session_storage(self, value: Optional[pulumi.Input['LaunchProfileStreamConfigurationSessionStorageArgs']]):
        pulumi.set(self, "session_storage", value)

    @property
    @pulumi.getter(name="volumeConfiguration")
    def volume_configuration(self) -> Optional[pulumi.Input['LaunchProfileVolumeConfigurationArgs']]:
        """
        Custom volume configuration for the root volumes that are attached to streaming sessions.

        This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
        """
        return pulumi.get(self, "volume_configuration")

    @volume_configuration.setter
    def volume_configuration(self, value: Optional[pulumi.Input['LaunchProfileVolumeConfigurationArgs']]):
        pulumi.set(self, "volume_configuration", value)


if not MYPY:
    class LaunchProfileStreamingSessionStorageRootArgsDict(TypedDict):
        linux: NotRequired[pulumi.Input[str]]
        """
        The folder path in Linux workstations where files are uploaded.
        """
        windows: NotRequired[pulumi.Input[str]]
        """
        The folder path in Windows workstations where files are uploaded.
        """
elif False:
    LaunchProfileStreamingSessionStorageRootArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LaunchProfileStreamingSessionStorageRootArgs:
    def __init__(__self__, *,
                 linux: Optional[pulumi.Input[str]] = None,
                 windows: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] linux: The folder path in Linux workstations where files are uploaded.
        :param pulumi.Input[str] windows: The folder path in Windows workstations where files are uploaded.
        """
        if linux is not None:
            pulumi.set(__self__, "linux", linux)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def linux(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path in Linux workstations where files are uploaded.
        """
        return pulumi.get(self, "linux")

    @linux.setter
    def linux(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux", value)

    @property
    @pulumi.getter
    def windows(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path in Windows workstations where files are uploaded.
        """
        return pulumi.get(self, "windows")

    @windows.setter
    def windows(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows", value)


if not MYPY:
    class LaunchProfileVolumeConfigurationArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[float]]
        """
        The number of I/O operations per second for the root volume that is attached to streaming session.
        """
        size: NotRequired[pulumi.Input[float]]
        """
        The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
        """
        throughput: NotRequired[pulumi.Input[float]]
        """
        The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
        """
elif False:
    LaunchProfileVolumeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LaunchProfileVolumeConfigurationArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[float]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 throughput: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] iops: The number of I/O operations per second for the root volume that is attached to streaming session.
        :param pulumi.Input[float] size: The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
        :param pulumi.Input[float] throughput: The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
        """
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[float]]:
        """
        The number of I/O operations per second for the root volume that is attached to streaming session.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        The size of the root volume that is attached to the streaming session. The root volume size is measured in GiBs.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[float]]:
        """
        The throughput to provision for the root volume that is attached to the streaming session. The throughput is measured in MiB/s.
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "throughput", value)


if not MYPY:
    class StudioComponentActiveDirectoryComputerAttributeArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the LDAP attribute.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value for the LDAP attribute.
        """
elif False:
    StudioComponentActiveDirectoryComputerAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentActiveDirectoryComputerAttributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name for the LDAP attribute.
        :param pulumi.Input[str] value: The value for the LDAP attribute.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the LDAP attribute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the LDAP attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class StudioComponentActiveDirectoryConfigurationArgsDict(TypedDict):
        computer_attributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['StudioComponentActiveDirectoryComputerAttributeArgsDict']]]]
        """
        A collection of custom attributes for an Active Directory computer.
        """
        directory_id: NotRequired[pulumi.Input[str]]
        """
        The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
        """
        organizational_unit_distinguished_name: NotRequired[pulumi.Input[str]]
        """
        The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
        """
elif False:
    StudioComponentActiveDirectoryConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentActiveDirectoryConfigurationArgs:
    def __init__(__self__, *,
                 computer_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['StudioComponentActiveDirectoryComputerAttributeArgs']]]] = None,
                 directory_id: Optional[pulumi.Input[str]] = None,
                 organizational_unit_distinguished_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StudioComponentActiveDirectoryComputerAttributeArgs']]] computer_attributes: A collection of custom attributes for an Active Directory computer.
        :param pulumi.Input[str] directory_id: The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
        :param pulumi.Input[str] organizational_unit_distinguished_name: The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
        """
        if computer_attributes is not None:
            pulumi.set(__self__, "computer_attributes", computer_attributes)
        if directory_id is not None:
            pulumi.set(__self__, "directory_id", directory_id)
        if organizational_unit_distinguished_name is not None:
            pulumi.set(__self__, "organizational_unit_distinguished_name", organizational_unit_distinguished_name)

    @property
    @pulumi.getter(name="computerAttributes")
    def computer_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StudioComponentActiveDirectoryComputerAttributeArgs']]]]:
        """
        A collection of custom attributes for an Active Directory computer.
        """
        return pulumi.get(self, "computer_attributes")

    @computer_attributes.setter
    def computer_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StudioComponentActiveDirectoryComputerAttributeArgs']]]]):
        pulumi.set(self, "computer_attributes", value)

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> Optional[pulumi.Input[str]]:
        """
        The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.
        """
        return pulumi.get(self, "directory_id")

    @directory_id.setter
    def directory_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_id", value)

    @property
    @pulumi.getter(name="organizationalUnitDistinguishedName")
    def organizational_unit_distinguished_name(self) -> Optional[pulumi.Input[str]]:
        """
        The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.
        """
        return pulumi.get(self, "organizational_unit_distinguished_name")

    @organizational_unit_distinguished_name.setter
    def organizational_unit_distinguished_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organizational_unit_distinguished_name", value)


if not MYPY:
    class StudioComponentComputeFarmConfigurationArgsDict(TypedDict):
        active_directory_user: NotRequired[pulumi.Input[str]]
        """
        The name of an Active Directory user that is used on ComputeFarm worker instances.
        """
        endpoint: NotRequired[pulumi.Input[str]]
        """
        The endpoint of the ComputeFarm that is accessed by the studio component resource.
        """
elif False:
    StudioComponentComputeFarmConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentComputeFarmConfigurationArgs:
    def __init__(__self__, *,
                 active_directory_user: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] active_directory_user: The name of an Active Directory user that is used on ComputeFarm worker instances.
        :param pulumi.Input[str] endpoint: The endpoint of the ComputeFarm that is accessed by the studio component resource.
        """
        if active_directory_user is not None:
            pulumi.set(__self__, "active_directory_user", active_directory_user)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter(name="activeDirectoryUser")
    def active_directory_user(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an Active Directory user that is used on ComputeFarm worker instances.
        """
        return pulumi.get(self, "active_directory_user")

    @active_directory_user.setter
    def active_directory_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_directory_user", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint of the ComputeFarm that is accessed by the studio component resource.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)


if not MYPY:
    class StudioComponentConfigurationArgsDict(TypedDict):
        active_directory_configuration: NotRequired[pulumi.Input['StudioComponentActiveDirectoryConfigurationArgsDict']]
        """
        The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
        """
        compute_farm_configuration: NotRequired[pulumi.Input['StudioComponentComputeFarmConfigurationArgsDict']]
        """
        The configuration for a render farm that is associated with a studio resource.
        """
        license_service_configuration: NotRequired[pulumi.Input['StudioComponentLicenseServiceConfigurationArgsDict']]
        """
        The configuration for a license service that is associated with a studio resource.
        """
        shared_file_system_configuration: NotRequired[pulumi.Input['StudioComponentSharedFileSystemConfigurationArgsDict']]
        """
        The configuration for a shared file storage system that is associated with a studio resource.
        """
elif False:
    StudioComponentConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentConfigurationArgs:
    def __init__(__self__, *,
                 active_directory_configuration: Optional[pulumi.Input['StudioComponentActiveDirectoryConfigurationArgs']] = None,
                 compute_farm_configuration: Optional[pulumi.Input['StudioComponentComputeFarmConfigurationArgs']] = None,
                 license_service_configuration: Optional[pulumi.Input['StudioComponentLicenseServiceConfigurationArgs']] = None,
                 shared_file_system_configuration: Optional[pulumi.Input['StudioComponentSharedFileSystemConfigurationArgs']] = None):
        """
        :param pulumi.Input['StudioComponentActiveDirectoryConfigurationArgs'] active_directory_configuration: The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
        :param pulumi.Input['StudioComponentComputeFarmConfigurationArgs'] compute_farm_configuration: The configuration for a render farm that is associated with a studio resource.
        :param pulumi.Input['StudioComponentLicenseServiceConfigurationArgs'] license_service_configuration: The configuration for a license service that is associated with a studio resource.
        :param pulumi.Input['StudioComponentSharedFileSystemConfigurationArgs'] shared_file_system_configuration: The configuration for a shared file storage system that is associated with a studio resource.
        """
        if active_directory_configuration is not None:
            pulumi.set(__self__, "active_directory_configuration", active_directory_configuration)
        if compute_farm_configuration is not None:
            pulumi.set(__self__, "compute_farm_configuration", compute_farm_configuration)
        if license_service_configuration is not None:
            pulumi.set(__self__, "license_service_configuration", license_service_configuration)
        if shared_file_system_configuration is not None:
            pulumi.set(__self__, "shared_file_system_configuration", shared_file_system_configuration)

    @property
    @pulumi.getter(name="activeDirectoryConfiguration")
    def active_directory_configuration(self) -> Optional[pulumi.Input['StudioComponentActiveDirectoryConfigurationArgs']]:
        """
        The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.
        """
        return pulumi.get(self, "active_directory_configuration")

    @active_directory_configuration.setter
    def active_directory_configuration(self, value: Optional[pulumi.Input['StudioComponentActiveDirectoryConfigurationArgs']]):
        pulumi.set(self, "active_directory_configuration", value)

    @property
    @pulumi.getter(name="computeFarmConfiguration")
    def compute_farm_configuration(self) -> Optional[pulumi.Input['StudioComponentComputeFarmConfigurationArgs']]:
        """
        The configuration for a render farm that is associated with a studio resource.
        """
        return pulumi.get(self, "compute_farm_configuration")

    @compute_farm_configuration.setter
    def compute_farm_configuration(self, value: Optional[pulumi.Input['StudioComponentComputeFarmConfigurationArgs']]):
        pulumi.set(self, "compute_farm_configuration", value)

    @property
    @pulumi.getter(name="licenseServiceConfiguration")
    def license_service_configuration(self) -> Optional[pulumi.Input['StudioComponentLicenseServiceConfigurationArgs']]:
        """
        The configuration for a license service that is associated with a studio resource.
        """
        return pulumi.get(self, "license_service_configuration")

    @license_service_configuration.setter
    def license_service_configuration(self, value: Optional[pulumi.Input['StudioComponentLicenseServiceConfigurationArgs']]):
        pulumi.set(self, "license_service_configuration", value)

    @property
    @pulumi.getter(name="sharedFileSystemConfiguration")
    def shared_file_system_configuration(self) -> Optional[pulumi.Input['StudioComponentSharedFileSystemConfigurationArgs']]:
        """
        The configuration for a shared file storage system that is associated with a studio resource.
        """
        return pulumi.get(self, "shared_file_system_configuration")

    @shared_file_system_configuration.setter
    def shared_file_system_configuration(self, value: Optional[pulumi.Input['StudioComponentSharedFileSystemConfigurationArgs']]):
        pulumi.set(self, "shared_file_system_configuration", value)


if not MYPY:
    class StudioComponentInitializationScriptArgsDict(TypedDict):
        launch_profile_protocol_version: NotRequired[pulumi.Input[str]]
        """
        The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
        """
        platform: NotRequired[pulumi.Input[str]]
        """
        The platform of the initialization script, either Windows or Linux.
        """
        run_context: NotRequired[pulumi.Input[str]]
        """
        The method to use when running the initialization script.
        """
        script: NotRequired[pulumi.Input[str]]
        """
        The initialization script.
        """
elif False:
    StudioComponentInitializationScriptArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentInitializationScriptArgs:
    def __init__(__self__, *,
                 launch_profile_protocol_version: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None,
                 run_context: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] launch_profile_protocol_version: The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
        :param pulumi.Input[str] platform: The platform of the initialization script, either Windows or Linux.
        :param pulumi.Input[str] run_context: The method to use when running the initialization script.
        :param pulumi.Input[str] script: The initialization script.
        """
        if launch_profile_protocol_version is not None:
            pulumi.set(__self__, "launch_profile_protocol_version", launch_profile_protocol_version)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if run_context is not None:
            pulumi.set(__self__, "run_context", run_context)
        if script is not None:
            pulumi.set(__self__, "script", script)

    @property
    @pulumi.getter(name="launchProfileProtocolVersion")
    def launch_profile_protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
        """
        return pulumi.get(self, "launch_profile_protocol_version")

    @launch_profile_protocol_version.setter
    def launch_profile_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_profile_protocol_version", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        """
        The platform of the initialization script, either Windows or Linux.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="runContext")
    def run_context(self) -> Optional[pulumi.Input[str]]:
        """
        The method to use when running the initialization script.
        """
        return pulumi.get(self, "run_context")

    @run_context.setter
    def run_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_context", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        The initialization script.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)


if not MYPY:
    class StudioComponentLicenseServiceConfigurationArgsDict(TypedDict):
        endpoint: NotRequired[pulumi.Input[str]]
        """
        The endpoint of the license service that is accessed by the studio component resource.
        """
elif False:
    StudioComponentLicenseServiceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentLicenseServiceConfigurationArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint: The endpoint of the license service that is accessed by the studio component resource.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint of the license service that is accessed by the studio component resource.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)


if not MYPY:
    class StudioComponentScriptParameterKeyValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        A script parameter key.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        A script parameter value.
        """
elif False:
    StudioComponentScriptParameterKeyValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentScriptParameterKeyValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: A script parameter key.
        :param pulumi.Input[str] value: A script parameter value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A script parameter key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        A script parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class StudioComponentSharedFileSystemConfigurationArgsDict(TypedDict):
        endpoint: NotRequired[pulumi.Input[str]]
        """
        The endpoint of the shared file system that is accessed by the studio component resource.
        """
        file_system_id: NotRequired[pulumi.Input[str]]
        """
        The unique identifier for a file system.
        """
        linux_mount_point: NotRequired[pulumi.Input[str]]
        """
        The mount location for a shared file system on a Linux virtual workstation.
        """
        share_name: NotRequired[pulumi.Input[str]]
        """
        The name of the file share.
        """
        windows_mount_drive: NotRequired[pulumi.Input[str]]
        """
        The mount location for a shared file system on a Windows virtual workstation.
        """
elif False:
    StudioComponentSharedFileSystemConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioComponentSharedFileSystemConfigurationArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 linux_mount_point: Optional[pulumi.Input[str]] = None,
                 share_name: Optional[pulumi.Input[str]] = None,
                 windows_mount_drive: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint: The endpoint of the shared file system that is accessed by the studio component resource.
        :param pulumi.Input[str] file_system_id: The unique identifier for a file system.
        :param pulumi.Input[str] linux_mount_point: The mount location for a shared file system on a Linux virtual workstation.
        :param pulumi.Input[str] share_name: The name of the file share.
        :param pulumi.Input[str] windows_mount_drive: The mount location for a shared file system on a Windows virtual workstation.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if linux_mount_point is not None:
            pulumi.set(__self__, "linux_mount_point", linux_mount_point)
        if share_name is not None:
            pulumi.set(__self__, "share_name", share_name)
        if windows_mount_drive is not None:
            pulumi.set(__self__, "windows_mount_drive", windows_mount_drive)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint of the shared file system that is accessed by the studio component resource.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for a file system.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="linuxMountPoint")
    def linux_mount_point(self) -> Optional[pulumi.Input[str]]:
        """
        The mount location for a shared file system on a Linux virtual workstation.
        """
        return pulumi.get(self, "linux_mount_point")

    @linux_mount_point.setter
    def linux_mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_mount_point", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the file share.
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="windowsMountDrive")
    def windows_mount_drive(self) -> Optional[pulumi.Input[str]]:
        """
        The mount location for a shared file system on a Windows virtual workstation.
        """
        return pulumi.get(self, "windows_mount_drive")

    @windows_mount_drive.setter
    def windows_mount_drive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_mount_drive", value)


if not MYPY:
    class StudioEncryptionConfigurationArgsDict(TypedDict):
        key_type: pulumi.Input[str]
        """
        The type of KMS key that is used to encrypt studio data.
        """
        key_arn: NotRequired[pulumi.Input[str]]
        """
        The ARN for a KMS key that is used to encrypt studio data.
        """
elif False:
    StudioEncryptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StudioEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 key_type: pulumi.Input[str],
                 key_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_type: The type of KMS key that is used to encrypt studio data.
        :param pulumi.Input[str] key_arn: The ARN for a KMS key that is used to encrypt studio data.
        """
        pulumi.set(__self__, "key_type", key_type)
        if key_arn is not None:
            pulumi.set(__self__, "key_arn", key_arn)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Input[str]:
        """
        The type of KMS key that is used to encrypt studio data.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="keyArn")
    def key_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for a KMS key that is used to encrypt studio data.
        """
        return pulumi.get(self, "key_arn")

    @key_arn.setter
    def key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_arn", value)


