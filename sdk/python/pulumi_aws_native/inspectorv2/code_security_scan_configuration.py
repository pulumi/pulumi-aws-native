# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CodeSecurityScanConfigurationInitArgs', 'CodeSecurityScanConfiguration']

@pulumi.input_type
class CodeSecurityScanConfigurationInitArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['CodeSecurityScanConfigurationArgs']] = None,
                 level: Optional[pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope_settings: Optional[pulumi.Input['CodeSecurityScanConfigurationScopeSettingsArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a CodeSecurityScanConfiguration resource.
        :param pulumi.Input['CodeSecurityScanConfigurationArgs'] configuration: Code Security Scan Configuration
        :param pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel'] level: Configuration Level
        :param pulumi.Input[builtins.str] name: Code Security Scan Configuration name
        :param pulumi.Input['CodeSecurityScanConfigurationScopeSettingsArgs'] scope_settings: Scope Settings
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The tags to apply to the scan configuration.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_settings is not None:
            pulumi.set(__self__, "scope_settings", scope_settings)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['CodeSecurityScanConfigurationArgs']]:
        """
        Code Security Scan Configuration
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['CodeSecurityScanConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel']]:
        """
        Configuration Level
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel']]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Code Security Scan Configuration name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeSettings")
    def scope_settings(self) -> Optional[pulumi.Input['CodeSecurityScanConfigurationScopeSettingsArgs']]:
        """
        Scope Settings
        """
        return pulumi.get(self, "scope_settings")

    @scope_settings.setter
    def scope_settings(self, value: Optional[pulumi.Input['CodeSecurityScanConfigurationScopeSettingsArgs']]):
        pulumi.set(self, "scope_settings", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The tags to apply to the scan configuration.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:inspectorv2:CodeSecurityScanConfiguration")
class CodeSecurityScanConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['CodeSecurityScanConfigurationArgs', 'CodeSecurityScanConfigurationArgsDict']]] = None,
                 level: Optional[pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope_settings: Optional[pulumi.Input[Union['CodeSecurityScanConfigurationScopeSettingsArgs', 'CodeSecurityScanConfigurationScopeSettingsArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Inspector CodeSecurityScanConfiguration resource schema

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CodeSecurityScanConfigurationArgs', 'CodeSecurityScanConfigurationArgsDict']] configuration: Code Security Scan Configuration
        :param pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel'] level: Configuration Level
        :param pulumi.Input[builtins.str] name: Code Security Scan Configuration name
        :param pulumi.Input[Union['CodeSecurityScanConfigurationScopeSettingsArgs', 'CodeSecurityScanConfigurationScopeSettingsArgsDict']] scope_settings: Scope Settings
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The tags to apply to the scan configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CodeSecurityScanConfigurationInitArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Inspector CodeSecurityScanConfiguration resource schema

        :param str resource_name: The name of the resource.
        :param CodeSecurityScanConfigurationInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeSecurityScanConfigurationInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[Union['CodeSecurityScanConfigurationArgs', 'CodeSecurityScanConfigurationArgsDict']]] = None,
                 level: Optional[pulumi.Input['CodeSecurityScanConfigurationConfigurationLevel']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 scope_settings: Optional[pulumi.Input[Union['CodeSecurityScanConfigurationScopeSettingsArgs', 'CodeSecurityScanConfigurationScopeSettingsArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeSecurityScanConfigurationInitArgs.__new__(CodeSecurityScanConfigurationInitArgs)

            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["level"] = level
            __props__.__dict__["name"] = name
            __props__.__dict__["scope_settings"] = scope_settings
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["level", "name", "scopeSettings", "tags.*"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CodeSecurityScanConfiguration, __self__).__init__(
            'aws-native:inspectorv2:CodeSecurityScanConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CodeSecurityScanConfiguration':
        """
        Get an existing CodeSecurityScanConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CodeSecurityScanConfigurationInitArgs.__new__(CodeSecurityScanConfigurationInitArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["level"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["scope_settings"] = None
        __props__.__dict__["tags"] = None
        return CodeSecurityScanConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        Code Security Scan Configuration ARN
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.CodeSecurityScanConfiguration']]:
        """
        Code Security Scan Configuration
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[Optional['CodeSecurityScanConfigurationConfigurationLevel']]:
        """
        Configuration Level
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Code Security Scan Configuration name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeSettings")
    def scope_settings(self) -> pulumi.Output[Optional['outputs.CodeSecurityScanConfigurationScopeSettings']]:
        """
        Scope Settings
        """
        return pulumi.get(self, "scope_settings")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The tags to apply to the scan configuration.
        """
        return pulumi.get(self, "tags")

