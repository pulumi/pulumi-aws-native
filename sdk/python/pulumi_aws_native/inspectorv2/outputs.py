# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CisScanConfigurationCisTargets',
    'CisScanConfigurationDailySchedule',
    'CisScanConfigurationMonthlySchedule',
    'CisScanConfigurationOneTimeSchedule',
    'CisScanConfigurationSchedule',
    'CisScanConfigurationTime',
    'CisScanConfigurationWeeklySchedule',
    'CodeSecurityIntegrationCreateDetails',
    'CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail',
    'CodeSecurityIntegrationUpdateDetails',
    'CodeSecurityIntegrationUpdateGitHubIntegrationDetail',
    'CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail',
    'CodeSecurityScanConfiguration',
    'CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration',
    'CodeSecurityScanConfigurationPeriodicScanConfiguration',
    'CodeSecurityScanConfigurationScopeSettings',
    'FilterCriteria',
    'FilterDateFilter',
    'FilterMapFilter',
    'FilterNumberFilter',
    'FilterPackageFilter',
    'FilterPortRangeFilter',
    'FilterStringFilter',
]

@pulumi.output_type
class CisScanConfigurationCisTargets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "targetResourceTags":
            suggest = "target_resource_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationCisTargets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationCisTargets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationCisTargets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Sequence[builtins.str],
                 target_resource_tags: Mapping[str, Any]):
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "target_resource_tags", target_resource_tags)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="targetResourceTags")
    def target_resource_tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "target_resource_tags")


@pulumi.output_type
class CisScanConfigurationDailySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationDailySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationDailySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationDailySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: 'outputs.CisScanConfigurationTime'):
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.CisScanConfigurationTime':
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CisScanConfigurationMonthlySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationMonthlySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationMonthlySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationMonthlySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: 'CisScanConfigurationDay',
                 start_time: 'outputs.CisScanConfigurationTime'):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> 'CisScanConfigurationDay':
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.CisScanConfigurationTime':
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CisScanConfigurationOneTimeSchedule(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class CisScanConfigurationSchedule(dict):
    """
    Choose a Schedule cadence
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oneTime":
            suggest = "one_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily: Optional['outputs.CisScanConfigurationDailySchedule'] = None,
                 monthly: Optional['outputs.CisScanConfigurationMonthlySchedule'] = None,
                 one_time: Optional['outputs.CisScanConfigurationOneTimeSchedule'] = None,
                 weekly: Optional['outputs.CisScanConfigurationWeeklySchedule'] = None):
        """
        Choose a Schedule cadence
        """
        if daily is not None:
            pulumi.set(__self__, "daily", daily)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)
        if one_time is not None:
            pulumi.set(__self__, "one_time", one_time)
        if weekly is not None:
            pulumi.set(__self__, "weekly", weekly)

    @property
    @pulumi.getter
    def daily(self) -> Optional['outputs.CisScanConfigurationDailySchedule']:
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter
    def monthly(self) -> Optional['outputs.CisScanConfigurationMonthlySchedule']:
        return pulumi.get(self, "monthly")

    @property
    @pulumi.getter(name="oneTime")
    def one_time(self) -> Optional['outputs.CisScanConfigurationOneTimeSchedule']:
        return pulumi.get(self, "one_time")

    @property
    @pulumi.getter
    def weekly(self) -> Optional['outputs.CisScanConfigurationWeeklySchedule']:
        return pulumi.get(self, "weekly")


@pulumi.output_type
class CisScanConfigurationTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOfDay":
            suggest = "time_of_day"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_of_day: builtins.str,
                 time_zone: builtins.str):
        pulumi.set(__self__, "time_of_day", time_of_day)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> builtins.str:
        return pulumi.get(self, "time_of_day")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> builtins.str:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class CisScanConfigurationWeeklySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CisScanConfigurationWeeklySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CisScanConfigurationWeeklySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CisScanConfigurationWeeklySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days: Sequence['CisScanConfigurationDay'],
                 start_time: 'outputs.CisScanConfigurationTime'):
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def days(self) -> Sequence['CisScanConfigurationDay']:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.CisScanConfigurationTime':
        return pulumi.get(self, "start_time")


@pulumi.output_type
class CodeSecurityIntegrationCreateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitlabSelfManaged":
            suggest = "gitlab_self_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityIntegrationCreateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityIntegrationCreateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityIntegrationCreateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gitlab_self_managed: 'outputs.CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail'):
        """
        :param 'CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail' gitlab_self_managed: Details specific to creating an integration with a self-managed GitLab instance.
        """
        pulumi.set(__self__, "gitlab_self_managed", gitlab_self_managed)

    @property
    @pulumi.getter(name="gitlabSelfManaged")
    def gitlab_self_managed(self) -> 'outputs.CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail':
        """
        Details specific to creating an integration with a self-managed GitLab instance.
        """
        return pulumi.get(self, "gitlab_self_managed")


@pulumi.output_type
class CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "instanceUrl":
            suggest = "instance_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityIntegrationCreateGitLabSelfManagedIntegrationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: builtins.str,
                 instance_url: builtins.str):
        """
        :param builtins.str access_token: The personal access token used to authenticate with the self-managed GitLab instance.
        :param builtins.str instance_url: The URL of the self-managed GitLab instance.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> builtins.str:
        """
        The personal access token used to authenticate with the self-managed GitLab instance.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> builtins.str:
        """
        The URL of the self-managed GitLab instance.
        """
        return pulumi.get(self, "instance_url")


@pulumi.output_type
class CodeSecurityIntegrationUpdateDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitlabSelfManaged":
            suggest = "gitlab_self_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityIntegrationUpdateDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityIntegrationUpdateDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityIntegrationUpdateDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 github: Optional['outputs.CodeSecurityIntegrationUpdateGitHubIntegrationDetail'] = None,
                 gitlab_self_managed: Optional['outputs.CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail'] = None):
        """
        :param 'CodeSecurityIntegrationUpdateGitHubIntegrationDetail' github: Details specific to updating an integration with GitHub.
        :param 'CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail' gitlab_self_managed: Details specific to updating an integration with a self-managed GitLab instance.
        """
        if github is not None:
            pulumi.set(__self__, "github", github)
        if gitlab_self_managed is not None:
            pulumi.set(__self__, "gitlab_self_managed", gitlab_self_managed)

    @property
    @pulumi.getter
    def github(self) -> Optional['outputs.CodeSecurityIntegrationUpdateGitHubIntegrationDetail']:
        """
        Details specific to updating an integration with GitHub.
        """
        return pulumi.get(self, "github")

    @property
    @pulumi.getter(name="gitlabSelfManaged")
    def gitlab_self_managed(self) -> Optional['outputs.CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail']:
        """
        Details specific to updating an integration with a self-managed GitLab instance.
        """
        return pulumi.get(self, "gitlab_self_managed")


@pulumi.output_type
class CodeSecurityIntegrationUpdateGitHubIntegrationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installationId":
            suggest = "installation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityIntegrationUpdateGitHubIntegrationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityIntegrationUpdateGitHubIntegrationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityIntegrationUpdateGitHubIntegrationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: builtins.str,
                 installation_id: builtins.str):
        """
        :param builtins.str code: The authorization code received from GitHub to update the integration.
        :param builtins.str installation_id: The installation ID of the GitHub App associated with the integration.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "installation_id", installation_id)

    @property
    @pulumi.getter
    def code(self) -> builtins.str:
        """
        The authorization code received from GitHub to update the integration.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="installationId")
    def installation_id(self) -> builtins.str:
        """
        The installation ID of the GitHub App associated with the integration.
        """
        return pulumi.get(self, "installation_id")


@pulumi.output_type
class CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authCode":
            suggest = "auth_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityIntegrationUpdateGitLabSelfManagedIntegrationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_code: builtins.str):
        """
        :param builtins.str auth_code: The authorization code received from the self-managed GitLab instance to update the integration.
        """
        pulumi.set(__self__, "auth_code", auth_code)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> builtins.str:
        """
        The authorization code received from the self-managed GitLab instance to update the integration.
        """
        return pulumi.get(self, "auth_code")


@pulumi.output_type
class CodeSecurityScanConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleSetCategories":
            suggest = "rule_set_categories"
        elif key == "continuousIntegrationScanConfiguration":
            suggest = "continuous_integration_scan_configuration"
        elif key == "periodicScanConfiguration":
            suggest = "periodic_scan_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityScanConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityScanConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityScanConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_set_categories: Sequence['CodeSecurityScanConfigurationRuleSetCategory'],
                 continuous_integration_scan_configuration: Optional['outputs.CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration'] = None,
                 periodic_scan_configuration: Optional['outputs.CodeSecurityScanConfigurationPeriodicScanConfiguration'] = None):
        """
        :param Sequence['CodeSecurityScanConfigurationRuleSetCategory'] rule_set_categories: The categories of security rules to be applied during the scan.
        :param 'CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration' continuous_integration_scan_configuration: Configuration settings for continuous integration scans that run automatically when code changes are made.
        :param 'CodeSecurityScanConfigurationPeriodicScanConfiguration' periodic_scan_configuration: Configuration settings for periodic scans that run on a scheduled basis.
        """
        pulumi.set(__self__, "rule_set_categories", rule_set_categories)
        if continuous_integration_scan_configuration is not None:
            pulumi.set(__self__, "continuous_integration_scan_configuration", continuous_integration_scan_configuration)
        if periodic_scan_configuration is not None:
            pulumi.set(__self__, "periodic_scan_configuration", periodic_scan_configuration)

    @property
    @pulumi.getter(name="ruleSetCategories")
    def rule_set_categories(self) -> Sequence['CodeSecurityScanConfigurationRuleSetCategory']:
        """
        The categories of security rules to be applied during the scan.
        """
        return pulumi.get(self, "rule_set_categories")

    @property
    @pulumi.getter(name="continuousIntegrationScanConfiguration")
    def continuous_integration_scan_configuration(self) -> Optional['outputs.CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration']:
        """
        Configuration settings for continuous integration scans that run automatically when code changes are made.
        """
        return pulumi.get(self, "continuous_integration_scan_configuration")

    @property
    @pulumi.getter(name="periodicScanConfiguration")
    def periodic_scan_configuration(self) -> Optional['outputs.CodeSecurityScanConfigurationPeriodicScanConfiguration']:
        """
        Configuration settings for periodic scans that run on a scheduled basis.
        """
        return pulumi.get(self, "periodic_scan_configuration")


@pulumi.output_type
class CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportedEvents":
            suggest = "supported_events"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityScanConfigurationContinuousIntegrationScanConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 supported_events: Sequence['CodeSecurityScanConfigurationContinuousIntegrationScanEvent']):
        """
        :param Sequence['CodeSecurityScanConfigurationContinuousIntegrationScanEvent'] supported_events: The repository events that trigger continuous integration scans, such as pull requests or commits.
        """
        pulumi.set(__self__, "supported_events", supported_events)

    @property
    @pulumi.getter(name="supportedEvents")
    def supported_events(self) -> Sequence['CodeSecurityScanConfigurationContinuousIntegrationScanEvent']:
        """
        The repository events that trigger continuous integration scans, such as pull requests or commits.
        """
        return pulumi.get(self, "supported_events")


@pulumi.output_type
class CodeSecurityScanConfigurationPeriodicScanConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "frequencyExpression":
            suggest = "frequency_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityScanConfigurationPeriodicScanConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityScanConfigurationPeriodicScanConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityScanConfigurationPeriodicScanConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frequency: Optional['CodeSecurityScanConfigurationPeriodicScanFrequency'] = None,
                 frequency_expression: Optional[builtins.str] = None):
        """
        :param 'CodeSecurityScanConfigurationPeriodicScanFrequency' frequency: The frequency at which periodic scans are performed (such as weekly or monthly).
               
               If you don't provide the `frequencyExpression` Amazon Inspector chooses day for the scan to run. If you provide the `frequencyExpression` , the schedule must match the specified `frequency` .
        :param builtins.str frequency_expression: The schedule expression for periodic scans, in cron format.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if frequency_expression is not None:
            pulumi.set(__self__, "frequency_expression", frequency_expression)

    @property
    @pulumi.getter
    def frequency(self) -> Optional['CodeSecurityScanConfigurationPeriodicScanFrequency']:
        """
        The frequency at which periodic scans are performed (such as weekly or monthly).

        If you don't provide the `frequencyExpression` Amazon Inspector chooses day for the scan to run. If you provide the `frequencyExpression` , the schedule must match the specified `frequency` .
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="frequencyExpression")
    def frequency_expression(self) -> Optional[builtins.str]:
        """
        The schedule expression for periodic scans, in cron format.
        """
        return pulumi.get(self, "frequency_expression")


@pulumi.output_type
class CodeSecurityScanConfigurationScopeSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectSelectionScope":
            suggest = "project_selection_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeSecurityScanConfigurationScopeSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeSecurityScanConfigurationScopeSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeSecurityScanConfigurationScopeSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_selection_scope: Optional['CodeSecurityScanConfigurationProjectSelectionScope'] = None):
        """
        :param 'CodeSecurityScanConfigurationProjectSelectionScope' project_selection_scope: The scope of projects to be selected for scanning within the integrated repositories.
        """
        if project_selection_scope is not None:
            pulumi.set(__self__, "project_selection_scope", project_selection_scope)

    @property
    @pulumi.getter(name="projectSelectionScope")
    def project_selection_scope(self) -> Optional['CodeSecurityScanConfigurationProjectSelectionScope']:
        """
        The scope of projects to be selected for scanning within the integrated repositories.
        """
        return pulumi.get(self, "project_selection_scope")


@pulumi.output_type
class FilterCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "codeVulnerabilityDetectorName":
            suggest = "code_vulnerability_detector_name"
        elif key == "codeVulnerabilityDetectorTags":
            suggest = "code_vulnerability_detector_tags"
        elif key == "codeVulnerabilityFilePath":
            suggest = "code_vulnerability_file_path"
        elif key == "componentId":
            suggest = "component_id"
        elif key == "componentType":
            suggest = "component_type"
        elif key == "ec2InstanceImageId":
            suggest = "ec2_instance_image_id"
        elif key == "ec2InstanceSubnetId":
            suggest = "ec2_instance_subnet_id"
        elif key == "ec2InstanceVpcId":
            suggest = "ec2_instance_vpc_id"
        elif key == "ecrImageArchitecture":
            suggest = "ecr_image_architecture"
        elif key == "ecrImageHash":
            suggest = "ecr_image_hash"
        elif key == "ecrImagePushedAt":
            suggest = "ecr_image_pushed_at"
        elif key == "ecrImageRegistry":
            suggest = "ecr_image_registry"
        elif key == "ecrImageRepositoryName":
            suggest = "ecr_image_repository_name"
        elif key == "ecrImageTags":
            suggest = "ecr_image_tags"
        elif key == "epssScore":
            suggest = "epss_score"
        elif key == "exploitAvailable":
            suggest = "exploit_available"
        elif key == "findingArn":
            suggest = "finding_arn"
        elif key == "findingStatus":
            suggest = "finding_status"
        elif key == "findingType":
            suggest = "finding_type"
        elif key == "firstObservedAt":
            suggest = "first_observed_at"
        elif key == "fixAvailable":
            suggest = "fix_available"
        elif key == "inspectorScore":
            suggest = "inspector_score"
        elif key == "lambdaFunctionExecutionRoleArn":
            suggest = "lambda_function_execution_role_arn"
        elif key == "lambdaFunctionLastModifiedAt":
            suggest = "lambda_function_last_modified_at"
        elif key == "lambdaFunctionLayers":
            suggest = "lambda_function_layers"
        elif key == "lambdaFunctionName":
            suggest = "lambda_function_name"
        elif key == "lambdaFunctionRuntime":
            suggest = "lambda_function_runtime"
        elif key == "lastObservedAt":
            suggest = "last_observed_at"
        elif key == "networkProtocol":
            suggest = "network_protocol"
        elif key == "portRange":
            suggest = "port_range"
        elif key == "relatedVulnerabilities":
            suggest = "related_vulnerabilities"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceTags":
            suggest = "resource_tags"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "vendorSeverity":
            suggest = "vendor_severity"
        elif key == "vulnerabilityId":
            suggest = "vulnerability_id"
        elif key == "vulnerabilitySource":
            suggest = "vulnerability_source"
        elif key == "vulnerablePackages":
            suggest = "vulnerable_packages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 code_vulnerability_detector_name: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 code_vulnerability_detector_tags: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 code_vulnerability_file_path: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 component_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 component_type: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ec2_instance_image_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ec2_instance_subnet_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ec2_instance_vpc_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ecr_image_architecture: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ecr_image_hash: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ecr_image_pushed_at: Optional[Sequence['outputs.FilterDateFilter']] = None,
                 ecr_image_registry: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ecr_image_repository_name: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 ecr_image_tags: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 epss_score: Optional[Sequence['outputs.FilterNumberFilter']] = None,
                 exploit_available: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 finding_arn: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 finding_status: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 finding_type: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 first_observed_at: Optional[Sequence['outputs.FilterDateFilter']] = None,
                 fix_available: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 inspector_score: Optional[Sequence['outputs.FilterNumberFilter']] = None,
                 lambda_function_execution_role_arn: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 lambda_function_last_modified_at: Optional[Sequence['outputs.FilterDateFilter']] = None,
                 lambda_function_layers: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 lambda_function_name: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 lambda_function_runtime: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 last_observed_at: Optional[Sequence['outputs.FilterDateFilter']] = None,
                 network_protocol: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 port_range: Optional[Sequence['outputs.FilterPortRangeFilter']] = None,
                 related_vulnerabilities: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 resource_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 resource_tags: Optional[Sequence['outputs.FilterMapFilter']] = None,
                 resource_type: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 severity: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 title: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 updated_at: Optional[Sequence['outputs.FilterDateFilter']] = None,
                 vendor_severity: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 vulnerability_id: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 vulnerability_source: Optional[Sequence['outputs.FilterStringFilter']] = None,
                 vulnerable_packages: Optional[Sequence['outputs.FilterPackageFilter']] = None):
        """
        :param Sequence['FilterStringFilter'] aws_account_id: Details of the AWS account IDs used to filter findings.
        :param Sequence['FilterStringFilter'] component_id: Details of the component IDs used to filter findings.
        :param Sequence['FilterStringFilter'] component_type: Details of the component types used to filter findings.
        :param Sequence['FilterStringFilter'] ec2_instance_image_id: Details of the Amazon EC2 instance image IDs used to filter findings.
        :param Sequence['FilterStringFilter'] ec2_instance_subnet_id: Details of the Amazon EC2 instance subnet IDs used to filter findings.
        :param Sequence['FilterStringFilter'] ec2_instance_vpc_id: Details of the Amazon EC2 instance VPC IDs used to filter findings.
        :param Sequence['FilterStringFilter'] ecr_image_architecture: Details of the Amazon ECR image architecture types used to filter findings.
        :param Sequence['FilterStringFilter'] ecr_image_hash: Details of the Amazon ECR image hashes used to filter findings.
        :param Sequence['FilterDateFilter'] ecr_image_pushed_at: Details on the Amazon ECR image push date and time used to filter findings.
        :param Sequence['FilterStringFilter'] ecr_image_registry: Details on the Amazon ECR registry used to filter findings.
        :param Sequence['FilterStringFilter'] ecr_image_repository_name: Details on the name of the Amazon ECR repository used to filter findings.
        :param Sequence['FilterStringFilter'] ecr_image_tags: The tags attached to the Amazon ECR container image.
        :param Sequence['FilterStringFilter'] finding_arn: Details on the finding ARNs used to filter findings.
        :param Sequence['FilterStringFilter'] finding_status: Details on the finding status types used to filter findings.
        :param Sequence['FilterStringFilter'] finding_type: Details on the finding types used to filter findings.
        :param Sequence['FilterDateFilter'] first_observed_at: Details on the date and time a finding was first seen used to filter findings.
        :param Sequence['FilterNumberFilter'] inspector_score: The Amazon Inspector score to filter on.
        :param Sequence['FilterDateFilter'] last_observed_at: Details on the date and time a finding was last seen used to filter findings.
        :param Sequence['FilterStringFilter'] network_protocol: Details on network protocol used to filter findings.
        :param Sequence['FilterPortRangeFilter'] port_range: Details on the port ranges used to filter findings.
        :param Sequence['FilterStringFilter'] related_vulnerabilities: Details on the related vulnerabilities used to filter findings.
        :param Sequence['FilterStringFilter'] resource_id: Details on the resource IDs used to filter findings.
        :param Sequence['FilterMapFilter'] resource_tags: Details on the resource tags used to filter findings.
        :param Sequence['FilterStringFilter'] resource_type: Details on the resource types used to filter findings.
        :param Sequence['FilterStringFilter'] severity: Details on the severity used to filter findings.
        :param Sequence['FilterStringFilter'] title: Details on the finding title used to filter findings.
        :param Sequence['FilterDateFilter'] updated_at: Details on the date and time a finding was last updated at used to filter findings.
        :param Sequence['FilterStringFilter'] vendor_severity: Details on the vendor severity used to filter findings.
        :param Sequence['FilterStringFilter'] vulnerability_id: Details on the vulnerability ID used to filter findings.
        :param Sequence['FilterStringFilter'] vulnerability_source: Details on the vulnerability score to filter findings by.
        :param Sequence['FilterPackageFilter'] vulnerable_packages: Details on the vulnerable packages used to filter findings.
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if code_vulnerability_detector_name is not None:
            pulumi.set(__self__, "code_vulnerability_detector_name", code_vulnerability_detector_name)
        if code_vulnerability_detector_tags is not None:
            pulumi.set(__self__, "code_vulnerability_detector_tags", code_vulnerability_detector_tags)
        if code_vulnerability_file_path is not None:
            pulumi.set(__self__, "code_vulnerability_file_path", code_vulnerability_file_path)
        if component_id is not None:
            pulumi.set(__self__, "component_id", component_id)
        if component_type is not None:
            pulumi.set(__self__, "component_type", component_type)
        if ec2_instance_image_id is not None:
            pulumi.set(__self__, "ec2_instance_image_id", ec2_instance_image_id)
        if ec2_instance_subnet_id is not None:
            pulumi.set(__self__, "ec2_instance_subnet_id", ec2_instance_subnet_id)
        if ec2_instance_vpc_id is not None:
            pulumi.set(__self__, "ec2_instance_vpc_id", ec2_instance_vpc_id)
        if ecr_image_architecture is not None:
            pulumi.set(__self__, "ecr_image_architecture", ecr_image_architecture)
        if ecr_image_hash is not None:
            pulumi.set(__self__, "ecr_image_hash", ecr_image_hash)
        if ecr_image_pushed_at is not None:
            pulumi.set(__self__, "ecr_image_pushed_at", ecr_image_pushed_at)
        if ecr_image_registry is not None:
            pulumi.set(__self__, "ecr_image_registry", ecr_image_registry)
        if ecr_image_repository_name is not None:
            pulumi.set(__self__, "ecr_image_repository_name", ecr_image_repository_name)
        if ecr_image_tags is not None:
            pulumi.set(__self__, "ecr_image_tags", ecr_image_tags)
        if epss_score is not None:
            pulumi.set(__self__, "epss_score", epss_score)
        if exploit_available is not None:
            pulumi.set(__self__, "exploit_available", exploit_available)
        if finding_arn is not None:
            pulumi.set(__self__, "finding_arn", finding_arn)
        if finding_status is not None:
            pulumi.set(__self__, "finding_status", finding_status)
        if finding_type is not None:
            pulumi.set(__self__, "finding_type", finding_type)
        if first_observed_at is not None:
            pulumi.set(__self__, "first_observed_at", first_observed_at)
        if fix_available is not None:
            pulumi.set(__self__, "fix_available", fix_available)
        if inspector_score is not None:
            pulumi.set(__self__, "inspector_score", inspector_score)
        if lambda_function_execution_role_arn is not None:
            pulumi.set(__self__, "lambda_function_execution_role_arn", lambda_function_execution_role_arn)
        if lambda_function_last_modified_at is not None:
            pulumi.set(__self__, "lambda_function_last_modified_at", lambda_function_last_modified_at)
        if lambda_function_layers is not None:
            pulumi.set(__self__, "lambda_function_layers", lambda_function_layers)
        if lambda_function_name is not None:
            pulumi.set(__self__, "lambda_function_name", lambda_function_name)
        if lambda_function_runtime is not None:
            pulumi.set(__self__, "lambda_function_runtime", lambda_function_runtime)
        if last_observed_at is not None:
            pulumi.set(__self__, "last_observed_at", last_observed_at)
        if network_protocol is not None:
            pulumi.set(__self__, "network_protocol", network_protocol)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if related_vulnerabilities is not None:
            pulumi.set(__self__, "related_vulnerabilities", related_vulnerabilities)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vendor_severity is not None:
            pulumi.set(__self__, "vendor_severity", vendor_severity)
        if vulnerability_id is not None:
            pulumi.set(__self__, "vulnerability_id", vulnerability_id)
        if vulnerability_source is not None:
            pulumi.set(__self__, "vulnerability_source", vulnerability_source)
        if vulnerable_packages is not None:
            pulumi.set(__self__, "vulnerable_packages", vulnerable_packages)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the AWS account IDs used to filter findings.
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorName")
    def code_vulnerability_detector_name(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "code_vulnerability_detector_name")

    @property
    @pulumi.getter(name="codeVulnerabilityDetectorTags")
    def code_vulnerability_detector_tags(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "code_vulnerability_detector_tags")

    @property
    @pulumi.getter(name="codeVulnerabilityFilePath")
    def code_vulnerability_file_path(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "code_vulnerability_file_path")

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the component IDs used to filter findings.
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the component types used to filter findings.
        """
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="ec2InstanceImageId")
    def ec2_instance_image_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the Amazon EC2 instance image IDs used to filter findings.
        """
        return pulumi.get(self, "ec2_instance_image_id")

    @property
    @pulumi.getter(name="ec2InstanceSubnetId")
    def ec2_instance_subnet_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the Amazon EC2 instance subnet IDs used to filter findings.
        """
        return pulumi.get(self, "ec2_instance_subnet_id")

    @property
    @pulumi.getter(name="ec2InstanceVpcId")
    def ec2_instance_vpc_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the Amazon EC2 instance VPC IDs used to filter findings.
        """
        return pulumi.get(self, "ec2_instance_vpc_id")

    @property
    @pulumi.getter(name="ecrImageArchitecture")
    def ecr_image_architecture(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the Amazon ECR image architecture types used to filter findings.
        """
        return pulumi.get(self, "ecr_image_architecture")

    @property
    @pulumi.getter(name="ecrImageHash")
    def ecr_image_hash(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details of the Amazon ECR image hashes used to filter findings.
        """
        return pulumi.get(self, "ecr_image_hash")

    @property
    @pulumi.getter(name="ecrImagePushedAt")
    def ecr_image_pushed_at(self) -> Optional[Sequence['outputs.FilterDateFilter']]:
        """
        Details on the Amazon ECR image push date and time used to filter findings.
        """
        return pulumi.get(self, "ecr_image_pushed_at")

    @property
    @pulumi.getter(name="ecrImageRegistry")
    def ecr_image_registry(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the Amazon ECR registry used to filter findings.
        """
        return pulumi.get(self, "ecr_image_registry")

    @property
    @pulumi.getter(name="ecrImageRepositoryName")
    def ecr_image_repository_name(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the name of the Amazon ECR repository used to filter findings.
        """
        return pulumi.get(self, "ecr_image_repository_name")

    @property
    @pulumi.getter(name="ecrImageTags")
    def ecr_image_tags(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        The tags attached to the Amazon ECR container image.
        """
        return pulumi.get(self, "ecr_image_tags")

    @property
    @pulumi.getter(name="epssScore")
    def epss_score(self) -> Optional[Sequence['outputs.FilterNumberFilter']]:
        return pulumi.get(self, "epss_score")

    @property
    @pulumi.getter(name="exploitAvailable")
    def exploit_available(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "exploit_available")

    @property
    @pulumi.getter(name="findingArn")
    def finding_arn(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the finding ARNs used to filter findings.
        """
        return pulumi.get(self, "finding_arn")

    @property
    @pulumi.getter(name="findingStatus")
    def finding_status(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the finding status types used to filter findings.
        """
        return pulumi.get(self, "finding_status")

    @property
    @pulumi.getter(name="findingType")
    def finding_type(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the finding types used to filter findings.
        """
        return pulumi.get(self, "finding_type")

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[Sequence['outputs.FilterDateFilter']]:
        """
        Details on the date and time a finding was first seen used to filter findings.
        """
        return pulumi.get(self, "first_observed_at")

    @property
    @pulumi.getter(name="fixAvailable")
    def fix_available(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "fix_available")

    @property
    @pulumi.getter(name="inspectorScore")
    def inspector_score(self) -> Optional[Sequence['outputs.FilterNumberFilter']]:
        """
        The Amazon Inspector score to filter on.
        """
        return pulumi.get(self, "inspector_score")

    @property
    @pulumi.getter(name="lambdaFunctionExecutionRoleArn")
    def lambda_function_execution_role_arn(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "lambda_function_execution_role_arn")

    @property
    @pulumi.getter(name="lambdaFunctionLastModifiedAt")
    def lambda_function_last_modified_at(self) -> Optional[Sequence['outputs.FilterDateFilter']]:
        return pulumi.get(self, "lambda_function_last_modified_at")

    @property
    @pulumi.getter(name="lambdaFunctionLayers")
    def lambda_function_layers(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "lambda_function_layers")

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "lambda_function_name")

    @property
    @pulumi.getter(name="lambdaFunctionRuntime")
    def lambda_function_runtime(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        return pulumi.get(self, "lambda_function_runtime")

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[Sequence['outputs.FilterDateFilter']]:
        """
        Details on the date and time a finding was last seen used to filter findings.
        """
        return pulumi.get(self, "last_observed_at")

    @property
    @pulumi.getter(name="networkProtocol")
    def network_protocol(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on network protocol used to filter findings.
        """
        return pulumi.get(self, "network_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[Sequence['outputs.FilterPortRangeFilter']]:
        """
        Details on the port ranges used to filter findings.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="relatedVulnerabilities")
    def related_vulnerabilities(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the related vulnerabilities used to filter findings.
        """
        return pulumi.get(self, "related_vulnerabilities")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the resource IDs used to filter findings.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.FilterMapFilter']]:
        """
        Details on the resource tags used to filter findings.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the resource types used to filter findings.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def severity(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the severity used to filter findings.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def title(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the finding title used to filter findings.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[Sequence['outputs.FilterDateFilter']]:
        """
        Details on the date and time a finding was last updated at used to filter findings.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the vendor severity used to filter findings.
        """
        return pulumi.get(self, "vendor_severity")

    @property
    @pulumi.getter(name="vulnerabilityId")
    def vulnerability_id(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the vulnerability ID used to filter findings.
        """
        return pulumi.get(self, "vulnerability_id")

    @property
    @pulumi.getter(name="vulnerabilitySource")
    def vulnerability_source(self) -> Optional[Sequence['outputs.FilterStringFilter']]:
        """
        Details on the vulnerability score to filter findings by.
        """
        return pulumi.get(self, "vulnerability_source")

    @property
    @pulumi.getter(name="vulnerablePackages")
    def vulnerable_packages(self) -> Optional[Sequence['outputs.FilterPackageFilter']]:
        """
        Details on the vulnerable packages used to filter findings.
        """
        return pulumi.get(self, "vulnerable_packages")


@pulumi.output_type
class FilterDateFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endInclusive":
            suggest = "end_inclusive"
        elif key == "startInclusive":
            suggest = "start_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterDateFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterDateFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterDateFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_inclusive: Optional[builtins.int] = None,
                 start_inclusive: Optional[builtins.int] = None):
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)
        if start_inclusive is not None:
            pulumi.set(__self__, "start_inclusive", start_inclusive)

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end_inclusive")

    @property
    @pulumi.getter(name="startInclusive")
    def start_inclusive(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start_inclusive")


@pulumi.output_type
class FilterMapFilter(dict):
    def __init__(__self__, *,
                 comparison: 'FilterMapComparison',
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        pulumi.set(__self__, "comparison", comparison)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'FilterMapComparison':
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FilterNumberFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lowerInclusive":
            suggest = "lower_inclusive"
        elif key == "upperInclusive":
            suggest = "upper_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterNumberFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterNumberFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterNumberFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lower_inclusive: Optional[builtins.float] = None,
                 upper_inclusive: Optional[builtins.float] = None):
        if lower_inclusive is not None:
            pulumi.set(__self__, "lower_inclusive", lower_inclusive)
        if upper_inclusive is not None:
            pulumi.set(__self__, "upper_inclusive", upper_inclusive)

    @property
    @pulumi.getter(name="lowerInclusive")
    def lower_inclusive(self) -> Optional[builtins.float]:
        return pulumi.get(self, "lower_inclusive")

    @property
    @pulumi.getter(name="upperInclusive")
    def upper_inclusive(self) -> Optional[builtins.float]:
        return pulumi.get(self, "upper_inclusive")


@pulumi.output_type
class FilterPackageFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePath":
            suggest = "file_path"
        elif key == "sourceLambdaLayerArn":
            suggest = "source_lambda_layer_arn"
        elif key == "sourceLayerHash":
            suggest = "source_layer_hash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterPackageFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterPackageFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterPackageFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 architecture: Optional['outputs.FilterStringFilter'] = None,
                 epoch: Optional['outputs.FilterNumberFilter'] = None,
                 file_path: Optional['outputs.FilterStringFilter'] = None,
                 name: Optional['outputs.FilterStringFilter'] = None,
                 release: Optional['outputs.FilterStringFilter'] = None,
                 source_lambda_layer_arn: Optional['outputs.FilterStringFilter'] = None,
                 source_layer_hash: Optional['outputs.FilterStringFilter'] = None,
                 version: Optional['outputs.FilterStringFilter'] = None):
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if source_lambda_layer_arn is not None:
            pulumi.set(__self__, "source_lambda_layer_arn", source_lambda_layer_arn)
        if source_layer_hash is not None:
            pulumi.set(__self__, "source_layer_hash", source_layer_hash)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def architecture(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def epoch(self) -> Optional['outputs.FilterNumberFilter']:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter
    def name(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="sourceLambdaLayerArn")
    def source_lambda_layer_arn(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "source_lambda_layer_arn")

    @property
    @pulumi.getter(name="sourceLayerHash")
    def source_layer_hash(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "source_layer_hash")

    @property
    @pulumi.getter
    def version(self) -> Optional['outputs.FilterStringFilter']:
        return pulumi.get(self, "version")


@pulumi.output_type
class FilterPortRangeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginInclusive":
            suggest = "begin_inclusive"
        elif key == "endInclusive":
            suggest = "end_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilterPortRangeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilterPortRangeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilterPortRangeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_inclusive: Optional[builtins.int] = None,
                 end_inclusive: Optional[builtins.int] = None):
        if begin_inclusive is not None:
            pulumi.set(__self__, "begin_inclusive", begin_inclusive)
        if end_inclusive is not None:
            pulumi.set(__self__, "end_inclusive", end_inclusive)

    @property
    @pulumi.getter(name="beginInclusive")
    def begin_inclusive(self) -> Optional[builtins.int]:
        return pulumi.get(self, "begin_inclusive")

    @property
    @pulumi.getter(name="endInclusive")
    def end_inclusive(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end_inclusive")


@pulumi.output_type
class FilterStringFilter(dict):
    def __init__(__self__, *,
                 comparison: 'FilterStringComparison',
                 value: builtins.str):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'FilterStringComparison':
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


