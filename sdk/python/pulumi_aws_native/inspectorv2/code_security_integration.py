# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CodeSecurityIntegrationArgs', 'CodeSecurityIntegration']

@pulumi.input_type
class CodeSecurityIntegrationArgs:
    def __init__(__self__, *,
                 create_integration_details: Optional[pulumi.Input['CodeSecurityIntegrationCreateDetailsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 type: Optional[pulumi.Input['CodeSecurityIntegrationIntegrationType']] = None,
                 update_integration_details: Optional[pulumi.Input['CodeSecurityIntegrationUpdateDetailsArgs']] = None):
        """
        The set of arguments for constructing a CodeSecurityIntegration resource.
        :param pulumi.Input['CodeSecurityIntegrationCreateDetailsArgs'] create_integration_details: Create Integration Details
        :param pulumi.Input[builtins.str] name: Code Security Integration name
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The tags to apply to the code security integration.
        :param pulumi.Input['CodeSecurityIntegrationIntegrationType'] type: Integration Type
        :param pulumi.Input['CodeSecurityIntegrationUpdateDetailsArgs'] update_integration_details: Update Integration Details
        """
        if create_integration_details is not None:
            pulumi.set(__self__, "create_integration_details", create_integration_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_integration_details is not None:
            pulumi.set(__self__, "update_integration_details", update_integration_details)

    @property
    @pulumi.getter(name="createIntegrationDetails")
    def create_integration_details(self) -> Optional[pulumi.Input['CodeSecurityIntegrationCreateDetailsArgs']]:
        """
        Create Integration Details
        """
        return pulumi.get(self, "create_integration_details")

    @create_integration_details.setter
    def create_integration_details(self, value: Optional[pulumi.Input['CodeSecurityIntegrationCreateDetailsArgs']]):
        pulumi.set(self, "create_integration_details", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Code Security Integration name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The tags to apply to the code security integration.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['CodeSecurityIntegrationIntegrationType']]:
        """
        Integration Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['CodeSecurityIntegrationIntegrationType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateIntegrationDetails")
    def update_integration_details(self) -> Optional[pulumi.Input['CodeSecurityIntegrationUpdateDetailsArgs']]:
        """
        Update Integration Details
        """
        return pulumi.get(self, "update_integration_details")

    @update_integration_details.setter
    def update_integration_details(self, value: Optional[pulumi.Input['CodeSecurityIntegrationUpdateDetailsArgs']]):
        pulumi.set(self, "update_integration_details", value)


@pulumi.type_token("aws-native:inspectorv2:CodeSecurityIntegration")
class CodeSecurityIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_integration_details: Optional[pulumi.Input[Union['CodeSecurityIntegrationCreateDetailsArgs', 'CodeSecurityIntegrationCreateDetailsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 type: Optional[pulumi.Input['CodeSecurityIntegrationIntegrationType']] = None,
                 update_integration_details: Optional[pulumi.Input[Union['CodeSecurityIntegrationUpdateDetailsArgs', 'CodeSecurityIntegrationUpdateDetailsArgsDict']]] = None,
                 __props__=None):
        """
        Inspector CodeSecurityIntegration resource schema

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CodeSecurityIntegrationCreateDetailsArgs', 'CodeSecurityIntegrationCreateDetailsArgsDict']] create_integration_details: Create Integration Details
        :param pulumi.Input[builtins.str] name: Code Security Integration name
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The tags to apply to the code security integration.
        :param pulumi.Input['CodeSecurityIntegrationIntegrationType'] type: Integration Type
        :param pulumi.Input[Union['CodeSecurityIntegrationUpdateDetailsArgs', 'CodeSecurityIntegrationUpdateDetailsArgsDict']] update_integration_details: Update Integration Details
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CodeSecurityIntegrationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Inspector CodeSecurityIntegration resource schema

        :param str resource_name: The name of the resource.
        :param CodeSecurityIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeSecurityIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_integration_details: Optional[pulumi.Input[Union['CodeSecurityIntegrationCreateDetailsArgs', 'CodeSecurityIntegrationCreateDetailsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 type: Optional[pulumi.Input['CodeSecurityIntegrationIntegrationType']] = None,
                 update_integration_details: Optional[pulumi.Input[Union['CodeSecurityIntegrationUpdateDetailsArgs', 'CodeSecurityIntegrationUpdateDetailsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeSecurityIntegrationArgs.__new__(CodeSecurityIntegrationArgs)

            __props__.__dict__["create_integration_details"] = create_integration_details
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["update_integration_details"] = update_integration_details
            __props__.__dict__["arn"] = None
            __props__.__dict__["authorization_url"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_updated_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reason"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["createIntegrationDetails", "tags.*"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CodeSecurityIntegration, __self__).__init__(
            'aws-native:inspectorv2:CodeSecurityIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CodeSecurityIntegration':
        """
        Get an existing CodeSecurityIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CodeSecurityIntegrationArgs.__new__(CodeSecurityIntegrationArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["authorization_url"] = None
        __props__.__dict__["create_integration_details"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["last_updated_at"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["status_reason"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        __props__.__dict__["update_integration_details"] = None
        return CodeSecurityIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        Code Security Integration ARN
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Output[builtins.str]:
        """
        Authorization URL for OAuth flow
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="createIntegrationDetails")
    def create_integration_details(self) -> pulumi.Output[Optional['outputs.CodeSecurityIntegrationCreateDetails']]:
        """
        Create Integration Details
        """
        return pulumi.get(self, "create_integration_details")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Last update timestamp
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Code Security Integration name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['CodeSecurityIntegrationIntegrationStatus']:
        """
        Integration Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> pulumi.Output[builtins.str]:
        """
        Reason for the current status
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The tags to apply to the code security integration.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional['CodeSecurityIntegrationIntegrationType']]:
        """
        Integration Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateIntegrationDetails")
    def update_integration_details(self) -> pulumi.Output[Optional['outputs.CodeSecurityIntegrationUpdateDetails']]:
        """
        Update Integration Details
        """
        return pulumi.get(self, "update_integration_details")

