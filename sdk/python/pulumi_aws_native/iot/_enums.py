# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AuthorizerStatus',
    'CaCertificateAutoRegistrationStatus',
    'CaCertificateCertificateMode',
    'CaCertificateStatus',
    'CertificateMode',
    'CertificateProviderOperation',
    'CertificateStatus',
    'CustomMetricMetricType',
    'DimensionType',
    'DomainConfigurationDomainType',
    'DomainConfigurationServerCertificateSummaryServerCertificateStatus',
    'DomainConfigurationServiceType',
    'DomainConfigurationStatus',
    'JobTemplateAction',
    'JobTemplateFailureType',
    'JobTemplateJobRetryFailureType',
    'LoggingDefaultLogLevel',
    'MitigationActionEnableIoTLoggingParamsLogLevel',
    'MitigationActionReplaceDefaultPolicyVersionParamsTemplateName',
    'MitigationActionUpdateCaCertificateParamsAction',
    'MitigationActionUpdateDeviceCertificateParamsAction',
    'ProvisioningTemplateTemplateType',
    'ResourceSpecificLoggingLogLevel',
    'ResourceSpecificLoggingTargetType',
    'ScheduledAuditDayOfWeek',
    'ScheduledAuditFrequency',
    'SecurityProfileBehaviorCriteriaComparisonOperator',
    'SecurityProfileMachineLearningDetectionConfigConfidenceLevel',
    'SecurityProfileMetricDimensionOperator',
    'SecurityProfileStatisticalThresholdStatistic',
    'SoftwarePackageVersionPackageVersionStatus',
    'TopicRuleCannedAccessControlList',
    'TopicRuleDestinationStatus',
]


class AuthorizerStatus(str, Enum):
    """
    The status of the authorizer.

    Valid values: `ACTIVE` | `INACTIVE`
    """
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class CaCertificateAutoRegistrationStatus(str, Enum):
    """
    Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
    """
    ENABLE = "ENABLE"
    DISABLE = "DISABLE"


class CaCertificateCertificateMode(str, Enum):
    """
    The mode of the CA.

    All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .

    Valid values are "DEFAULT" and "SNI_ONLY".
    """
    DEFAULT = "DEFAULT"
    SNI_ONLY = "SNI_ONLY"


class CaCertificateStatus(str, Enum):
    """
    The status of the CA certificate.

    Valid values are "ACTIVE" and "INACTIVE".
    """
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class CertificateMode(str, Enum):
    """
    Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.

    `DEFAULT` : A certificate in `DEFAULT` mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA). Devices with certificates in `DEFAULT` mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core . However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core .

    `SNI_ONLY` : A certificate in `SNI_ONLY` mode is registered without an issuer CA. Devices with certificates in `SNI_ONLY` mode must send the SNI extension when connecting to AWS IoT Core .
    """
    DEFAULT = "DEFAULT"
    SNI_ONLY = "SNI_ONLY"


class CertificateProviderOperation(str, Enum):
    CREATE_CERTIFICATE_FROM_CSR = "CreateCertificateFromCsr"


class CertificateStatus(str, Enum):
    """
    The status of the certificate.

    Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.

    The status value REGISTER_INACTIVE is deprecated and should not be used.
    """
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    REVOKED = "REVOKED"
    PENDING_TRANSFER = "PENDING_TRANSFER"
    PENDING_ACTIVATION = "PENDING_ACTIVATION"


class CustomMetricMetricType(str, Enum):
    """
    The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
    """
    STRING_LIST = "string-list"
    IP_ADDRESS_LIST = "ip-address-list"
    NUMBER_LIST = "number-list"
    NUMBER = "number"


class DimensionType(str, Enum):
    """
    Specifies the type of the dimension.
    """
    TOPIC_FILTER = "TOPIC_FILTER"


class DomainConfigurationDomainType(str, Enum):
    """
    The type of service delivered by the domain.
    """
    ENDPOINT = "ENDPOINT"
    AWS_MANAGED = "AWS_MANAGED"
    CUSTOMER_MANAGED = "CUSTOMER_MANAGED"


class DomainConfigurationServerCertificateSummaryServerCertificateStatus(str, Enum):
    """
    The status of the server certificate.
    """
    INVALID = "INVALID"
    VALID = "VALID"


class DomainConfigurationServiceType(str, Enum):
    """
    The type of service delivered by the endpoint.

    > AWS IoT Core currently supports only the `DATA` service type.
    """
    DATA = "DATA"
    CREDENTIAL_PROVIDER = "CREDENTIAL_PROVIDER"
    JOBS = "JOBS"


class DomainConfigurationStatus(str, Enum):
    """
    The status to which the domain configuration should be updated.

    Valid values: `ENABLED` | `DISABLED`
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class JobTemplateAction(str, Enum):
    CANCEL = "CANCEL"


class JobTemplateFailureType(str, Enum):
    FAILED = "FAILED"
    REJECTED = "REJECTED"
    TIMED_OUT = "TIMED_OUT"
    ALL = "ALL"


class JobTemplateJobRetryFailureType(str, Enum):
    FAILED = "FAILED"
    TIMED_OUT = "TIMED_OUT"
    ALL = "ALL"


class LoggingDefaultLogLevel(str, Enum):
    """
    The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
    """
    ERROR = "ERROR"
    WARN = "WARN"
    INFO = "INFO"
    DEBUG = "DEBUG"
    DISABLED = "DISABLED"


class MitigationActionEnableIoTLoggingParamsLogLevel(str, Enum):
    """
     Specifies which types of information are logged.
    """
    DEBUG = "DEBUG"
    INFO = "INFO"
    ERROR = "ERROR"
    WARN = "WARN"
    UNSET_VALUE = "UNSET_VALUE"


class MitigationActionReplaceDefaultPolicyVersionParamsTemplateName(str, Enum):
    """
    The name of the template to be applied. The only supported value is `BLANK_POLICY` .
    """
    BLANK_POLICY = "BLANK_POLICY"
    UNSET_VALUE = "UNSET_VALUE"


class MitigationActionUpdateCaCertificateParamsAction(str, Enum):
    """
    The action that you want to apply to the CA certificate. The only supported value is `DEACTIVATE` .
    """
    DEACTIVATE = "DEACTIVATE"
    UNSET_VALUE = "UNSET_VALUE"


class MitigationActionUpdateDeviceCertificateParamsAction(str, Enum):
    """
    The action that you want to apply to the device certificate. The only supported value is `DEACTIVATE` .
    """
    DEACTIVATE = "DEACTIVATE"
    UNSET_VALUE = "UNSET_VALUE"


class ProvisioningTemplateTemplateType(str, Enum):
    """
    The type of the provisioning template.
    """
    FLEET_PROVISIONING = "FLEET_PROVISIONING"
    JITP = "JITP"


class ResourceSpecificLoggingLogLevel(str, Enum):
    """
    The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
    """
    ERROR = "ERROR"
    WARN = "WARN"
    INFO = "INFO"
    DEBUG = "DEBUG"
    DISABLED = "DISABLED"


class ResourceSpecificLoggingTargetType(str, Enum):
    """
    The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
    """
    THING_GROUP = "THING_GROUP"
    CLIENT_ID = "CLIENT_ID"
    SOURCE_IP = "SOURCE_IP"
    PRINCIPAL_ID = "PRINCIPAL_ID"
    EVENT_TYPE = "EVENT_TYPE"


class ScheduledAuditDayOfWeek(str, Enum):
    """
    The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
    """
    SUN = "SUN"
    MON = "MON"
    TUE = "TUE"
    WED = "WED"
    THU = "THU"
    FRI = "FRI"
    SAT = "SAT"
    UNSET_VALUE = "UNSET_VALUE"


class ScheduledAuditFrequency(str, Enum):
    """
    How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
    """
    DAILY = "DAILY"
    WEEKLY = "WEEKLY"
    BIWEEKLY = "BIWEEKLY"
    MONTHLY = "MONTHLY"


class SecurityProfileBehaviorCriteriaComparisonOperator(str, Enum):
    """
    The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
    """
    LESS_THAN = "less-than"
    LESS_THAN_EQUALS = "less-than-equals"
    GREATER_THAN = "greater-than"
    GREATER_THAN_EQUALS = "greater-than-equals"
    IN_CIDR_SET = "in-cidr-set"
    NOT_IN_CIDR_SET = "not-in-cidr-set"
    IN_PORT_SET = "in-port-set"
    NOT_IN_PORT_SET = "not-in-port-set"
    IN_SET = "in-set"
    NOT_IN_SET = "not-in-set"


class SecurityProfileMachineLearningDetectionConfigConfidenceLevel(str, Enum):
    """
    The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
    """
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class SecurityProfileMetricDimensionOperator(str, Enum):
    """
    Defines how the dimensionValues of a dimension are interpreted.
    """
    IN_ = "IN"
    NOT_IN = "NOT_IN"


class SecurityProfileStatisticalThresholdStatistic(str, Enum):
    """
    The percentile which resolves to a threshold value by which compliance with a behavior is determined
    """
    AVERAGE = "Average"
    P0 = "p0"
    P01 = "p0.1"
    P001 = "p0.01"
    P1 = "p1"
    P10 = "p10"
    P50 = "p50"
    P90 = "p90"
    P99 = "p99"
    P999 = "p99.9"
    P9999 = "p99.99"
    P100 = "p100"


class SoftwarePackageVersionPackageVersionStatus(str, Enum):
    DRAFT = "DRAFT"
    PUBLISHED = "PUBLISHED"
    DEPRECATED = "DEPRECATED"


class TopicRuleCannedAccessControlList(str, Enum):
    PRIVATE = "private"
    PUBLIC_READ = "public-read"
    PUBLIC_READ_WRITE = "public-read-write"
    AWS_EXEC_READ = "aws-exec-read"
    AUTHENTICATED_READ = "authenticated-read"
    BUCKET_OWNER_READ = "bucket-owner-read"
    BUCKET_OWNER_FULL_CONTROL = "bucket-owner-full-control"
    LOG_DELIVERY_WRITE = "log-delivery-write"


class TopicRuleDestinationStatus(str, Enum):
    ENABLED = "ENABLED"
    IN_PROGRESS = "IN_PROGRESS"
    DISABLED = "DISABLED"
