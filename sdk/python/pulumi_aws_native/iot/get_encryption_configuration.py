# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetEncryptionConfigurationResult',
    'AwaitableGetEncryptionConfigurationResult',
    'get_encryption_configuration',
    'get_encryption_configuration_output',
]

@pulumi.output_type
class GetEncryptionConfigurationResult:
    def __init__(__self__, account_id=None, configuration_details=None, encryption_type=None, kms_access_role_arn=None, kms_key_arn=None, last_modified_date=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if configuration_details and not isinstance(configuration_details, dict):
            raise TypeError("Expected argument 'configuration_details' to be a dict")
        pulumi.set(__self__, "configuration_details", configuration_details)
        if encryption_type and not isinstance(encryption_type, str):
            raise TypeError("Expected argument 'encryption_type' to be a str")
        pulumi.set(__self__, "encryption_type", encryption_type)
        if kms_access_role_arn and not isinstance(kms_access_role_arn, str):
            raise TypeError("Expected argument 'kms_access_role_arn' to be a str")
        pulumi.set(__self__, "kms_access_role_arn", kms_access_role_arn)
        if kms_key_arn and not isinstance(kms_key_arn, str):
            raise TypeError("Expected argument 'kms_key_arn' to be a str")
        pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if last_modified_date and not isinstance(last_modified_date, str):
            raise TypeError("Expected argument 'last_modified_date' to be a str")
        pulumi.set(__self__, "last_modified_date", last_modified_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Optional['outputs.ConfigurationDetailsProperties']:
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional['EncryptionConfigurationEncryptionType']:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsAccessRoleArn")
    def kms_access_role_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_access_role_arn")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_modified_date")


class AwaitableGetEncryptionConfigurationResult(GetEncryptionConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEncryptionConfigurationResult(
            account_id=self.account_id,
            configuration_details=self.configuration_details,
            encryption_type=self.encryption_type,
            kms_access_role_arn=self.kms_access_role_arn,
            kms_key_arn=self.kms_key_arn,
            last_modified_date=self.last_modified_date)


def get_encryption_configuration(account_id: Optional[builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEncryptionConfigurationResult:
    """
    Resource Type definition for AWS::IoT::EncryptionConfiguration
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iot:getEncryptionConfiguration', __args__, opts=opts, typ=GetEncryptionConfigurationResult).value

    return AwaitableGetEncryptionConfigurationResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        configuration_details=pulumi.get(__ret__, 'configuration_details'),
        encryption_type=pulumi.get(__ret__, 'encryption_type'),
        kms_access_role_arn=pulumi.get(__ret__, 'kms_access_role_arn'),
        kms_key_arn=pulumi.get(__ret__, 'kms_key_arn'),
        last_modified_date=pulumi.get(__ret__, 'last_modified_date'))
def get_encryption_configuration_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEncryptionConfigurationResult]:
    """
    Resource Type definition for AWS::IoT::EncryptionConfiguration
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:iot:getEncryptionConfiguration', __args__, opts=opts, typ=GetEncryptionConfigurationResult)
    return __ret__.apply(lambda __response__: GetEncryptionConfigurationResult(
        account_id=pulumi.get(__response__, 'account_id'),
        configuration_details=pulumi.get(__response__, 'configuration_details'),
        encryption_type=pulumi.get(__response__, 'encryption_type'),
        kms_access_role_arn=pulumi.get(__response__, 'kms_access_role_arn'),
        kms_key_arn=pulumi.get(__response__, 'kms_key_arn'),
        last_modified_date=pulumi.get(__response__, 'last_modified_date')))
