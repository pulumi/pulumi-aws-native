# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetThingGroupResult',
    'AwaitableGetThingGroupResult',
    'get_thing_group',
    'get_thing_group_output',
]

@pulumi.output_type
class GetThingGroupResult:
    def __init__(__self__, arn=None, id=None, query_string=None, tags=None, thing_group_properties=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if query_string and not isinstance(query_string, str):
            raise TypeError("Expected argument 'query_string' to be a str")
        pulumi.set(__self__, "query_string", query_string)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if thing_group_properties and not isinstance(thing_group_properties, dict):
            raise TypeError("Expected argument 'thing_group_properties' to be a dict")
        pulumi.set(__self__, "thing_group_properties", thing_group_properties)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ThingGroupTag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="thingGroupProperties")
    def thing_group_properties(self) -> Optional['outputs.ThingGroupPropertiesProperties']:
        return pulumi.get(self, "thing_group_properties")


class AwaitableGetThingGroupResult(GetThingGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetThingGroupResult(
            arn=self.arn,
            id=self.id,
            query_string=self.query_string,
            tags=self.tags,
            thing_group_properties=self.thing_group_properties)


def get_thing_group(thing_group_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetThingGroupResult:
    """
    Resource Type definition for AWS::IoT::ThingGroup
    """
    __args__ = dict()
    __args__['thingGroupName'] = thing_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iot:getThingGroup', __args__, opts=opts, typ=GetThingGroupResult).value

    return AwaitableGetThingGroupResult(
        arn=pulumi.get(__ret__, 'arn'),
        id=pulumi.get(__ret__, 'id'),
        query_string=pulumi.get(__ret__, 'query_string'),
        tags=pulumi.get(__ret__, 'tags'),
        thing_group_properties=pulumi.get(__ret__, 'thing_group_properties'))


@_utilities.lift_output_func(get_thing_group)
def get_thing_group_output(thing_group_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetThingGroupResult]:
    """
    Resource Type definition for AWS::IoT::ThingGroup
    """
    ...
