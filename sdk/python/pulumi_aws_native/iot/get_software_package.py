# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSoftwarePackageResult',
    'AwaitableGetSoftwarePackageResult',
    'get_software_package',
    'get_software_package_output',
]

@pulumi.output_type
class GetSoftwarePackageResult:
    def __init__(__self__, description=None, package_arn=None, tags=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if package_arn and not isinstance(package_arn, str):
            raise TypeError("Expected argument 'package_arn' to be a str")
        pulumi.set(__self__, "package_arn", package_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="packageArn")
    def package_arn(self) -> Optional[str]:
        return pulumi.get(self, "package_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SoftwarePackageTag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetSoftwarePackageResult(GetSoftwarePackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSoftwarePackageResult(
            description=self.description,
            package_arn=self.package_arn,
            tags=self.tags)


def get_software_package(package_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSoftwarePackageResult:
    """
    resource definition
    """
    __args__ = dict()
    __args__['packageName'] = package_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iot:getSoftwarePackage', __args__, opts=opts, typ=GetSoftwarePackageResult).value

    return AwaitableGetSoftwarePackageResult(
        description=pulumi.get(__ret__, 'description'),
        package_arn=pulumi.get(__ret__, 'package_arn'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_software_package)
def get_software_package_output(package_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSoftwarePackageResult]:
    """
    resource definition
    """
    ...
