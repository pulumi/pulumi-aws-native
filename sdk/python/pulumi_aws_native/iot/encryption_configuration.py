# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['EncryptionConfigurationArgs', 'EncryptionConfiguration']

@pulumi.input_type
class EncryptionConfigurationArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input['EncryptionConfigurationEncryptionType'],
                 kms_access_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a EncryptionConfiguration resource.
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        if kms_access_role_arn is not None:
            pulumi.set(__self__, "kms_access_role_arn", kms_access_role_arn)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input['EncryptionConfigurationEncryptionType']:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input['EncryptionConfigurationEncryptionType']):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="kmsAccessRoleArn")
    def kms_access_role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_access_role_arn")

    @kms_access_role_arn.setter
    def kms_access_role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_access_role_arn", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


@pulumi.type_token("aws-native:iot:EncryptionConfiguration")
class EncryptionConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_type: Optional[pulumi.Input['EncryptionConfigurationEncryptionType']] = None,
                 kms_access_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::IoT::EncryptionConfiguration

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EncryptionConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::IoT::EncryptionConfiguration

        :param str resource_name: The name of the resource.
        :param EncryptionConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EncryptionConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_type: Optional[pulumi.Input['EncryptionConfigurationEncryptionType']] = None,
                 kms_access_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EncryptionConfigurationArgs.__new__(EncryptionConfigurationArgs)

            if encryption_type is None and not opts.urn:
                raise TypeError("Missing required property 'encryption_type'")
            __props__.__dict__["encryption_type"] = encryption_type
            __props__.__dict__["kms_access_role_arn"] = kms_access_role_arn
            __props__.__dict__["kms_key_arn"] = kms_key_arn
            __props__.__dict__["account_id"] = None
            __props__.__dict__["configuration_details"] = None
            __props__.__dict__["last_modified_date"] = None
        super(EncryptionConfiguration, __self__).__init__(
            'aws-native:iot:EncryptionConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'EncryptionConfiguration':
        """
        Get an existing EncryptionConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = EncryptionConfigurationArgs.__new__(EncryptionConfigurationArgs)

        __props__.__dict__["account_id"] = None
        __props__.__dict__["configuration_details"] = None
        __props__.__dict__["encryption_type"] = None
        __props__.__dict__["kms_access_role_arn"] = None
        __props__.__dict__["kms_key_arn"] = None
        __props__.__dict__["last_modified_date"] = None
        return EncryptionConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> pulumi.Output['outputs.ConfigurationDetailsProperties']:
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Output['EncryptionConfigurationEncryptionType']:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsAccessRoleArn")
    def kms_access_role_arn(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "kms_access_role_arn")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_modified_date")

