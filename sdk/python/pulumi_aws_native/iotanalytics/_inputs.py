# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ChannelCustomerManagedS3Args',
    'ChannelRetentionPeriodArgs',
    'ChannelServiceManagedS3Args',
    'ChannelStorageArgs',
    'ChannelTagArgs',
    'DatasetActionArgs',
    'DatasetContainerActionArgs',
    'DatasetContentDeliveryRuleDestinationArgs',
    'DatasetContentDeliveryRuleArgs',
    'DatasetContentVersionValueArgs',
    'DatasetDeltaTimeSessionWindowConfigurationArgs',
    'DatasetDeltaTimeArgs',
    'DatasetFilterArgs',
    'DatasetGlueConfigurationArgs',
    'DatasetIotEventsDestinationConfigurationArgs',
    'DatasetLateDataRuleConfigurationArgs',
    'DatasetLateDataRuleArgs',
    'DatasetOutputFileUriValueArgs',
    'DatasetQueryActionArgs',
    'DatasetResourceConfigurationArgs',
    'DatasetRetentionPeriodArgs',
    'DatasetS3DestinationConfigurationArgs',
    'DatasetScheduleArgs',
    'DatasetTagArgs',
    'DatasetTriggeringDatasetArgs',
    'DatasetTriggerArgs',
    'DatasetVariableArgs',
    'DatasetVersioningConfigurationArgs',
    'DatastoreColumnArgs',
    'DatastoreCustomerManagedS3StorageArgs',
    'DatastoreCustomerManagedS3Args',
    'DatastoreFileFormatConfigurationArgs',
    'DatastoreIotSiteWiseMultiLayerStorageArgs',
    'DatastoreJsonConfigurationArgs',
    'DatastoreParquetConfigurationArgs',
    'DatastorePartitionsArgs',
    'DatastorePartitionArgs',
    'DatastoreRetentionPeriodArgs',
    'DatastoreSchemaDefinitionArgs',
    'DatastoreServiceManagedS3Args',
    'DatastoreStorageArgs',
    'DatastoreTagArgs',
    'DatastoreTimestampPartitionArgs',
    'PartitionArgs',
    'PipelineActivityArgs',
    'PipelineAddAttributesArgs',
    'PipelineChannelArgs',
    'PipelineDatastoreArgs',
    'PipelineDeviceRegistryEnrichArgs',
    'PipelineDeviceShadowEnrichArgs',
    'PipelineFilterArgs',
    'PipelineLambdaArgs',
    'PipelineMathArgs',
    'PipelineRemoveAttributesArgs',
    'PipelineSelectAttributesArgs',
    'PipelineTagArgs',
]

@pulumi.input_type
class ChannelCustomerManagedS3Args:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 key_prefix: Optional[pulumi.Input[str]] = None):
        ChannelCustomerManagedS3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            role_arn=role_arn,
            key_prefix=key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             key_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if key_prefix is None and 'keyPrefix' in kwargs:
            key_prefix = kwargs['keyPrefix']

        _setter("bucket", bucket)
        _setter("role_arn", role_arn)
        if key_prefix is not None:
            _setter("key_prefix", key_prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_prefix")

    @key_prefix.setter
    def key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix", value)


@pulumi.input_type
class ChannelRetentionPeriodArgs:
    def __init__(__self__, *,
                 number_of_days: Optional[pulumi.Input[int]] = None,
                 unlimited: Optional[pulumi.Input[bool]] = None):
        ChannelRetentionPeriodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_days=number_of_days,
            unlimited=unlimited,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_days: Optional[pulumi.Input[int]] = None,
             unlimited: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if number_of_days is None and 'numberOfDays' in kwargs:
            number_of_days = kwargs['numberOfDays']

        if number_of_days is not None:
            _setter("number_of_days", number_of_days)
        if unlimited is not None:
            _setter("unlimited", unlimited)

    @property
    @pulumi.getter(name="numberOfDays")
    def number_of_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_days")

    @number_of_days.setter
    def number_of_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_days", value)

    @property
    @pulumi.getter
    def unlimited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unlimited")

    @unlimited.setter
    def unlimited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unlimited", value)


@pulumi.input_type
class ChannelServiceManagedS3Args:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        pass



@pulumi.input_type
class ChannelStorageArgs:
    def __init__(__self__, *,
                 customer_managed_s3: Optional[pulumi.Input['ChannelCustomerManagedS3Args']] = None,
                 service_managed_s3: Optional[pulumi.Input['ChannelServiceManagedS3Args']] = None):
        ChannelStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_s3=customer_managed_s3,
            service_managed_s3=service_managed_s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_s3: Optional[pulumi.Input['ChannelCustomerManagedS3Args']] = None,
             service_managed_s3: Optional[pulumi.Input['ChannelServiceManagedS3Args']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if customer_managed_s3 is None and 'customerManagedS3' in kwargs:
            customer_managed_s3 = kwargs['customerManagedS3']
        if service_managed_s3 is None and 'serviceManagedS3' in kwargs:
            service_managed_s3 = kwargs['serviceManagedS3']

        if customer_managed_s3 is not None:
            _setter("customer_managed_s3", customer_managed_s3)
        if service_managed_s3 is not None:
            _setter("service_managed_s3", service_managed_s3)

    @property
    @pulumi.getter(name="customerManagedS3")
    def customer_managed_s3(self) -> Optional[pulumi.Input['ChannelCustomerManagedS3Args']]:
        return pulumi.get(self, "customer_managed_s3")

    @customer_managed_s3.setter
    def customer_managed_s3(self, value: Optional[pulumi.Input['ChannelCustomerManagedS3Args']]):
        pulumi.set(self, "customer_managed_s3", value)

    @property
    @pulumi.getter(name="serviceManagedS3")
    def service_managed_s3(self) -> Optional[pulumi.Input['ChannelServiceManagedS3Args']]:
        return pulumi.get(self, "service_managed_s3")

    @service_managed_s3.setter
    def service_managed_s3(self, value: Optional[pulumi.Input['ChannelServiceManagedS3Args']]):
        pulumi.set(self, "service_managed_s3", value)


@pulumi.input_type
class ChannelTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ChannelTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetActionArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 container_action: Optional[pulumi.Input['DatasetContainerActionArgs']] = None,
                 query_action: Optional[pulumi.Input['DatasetQueryActionArgs']] = None):
        DatasetActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_name=action_name,
            container_action=container_action,
            query_action=query_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_name: Optional[pulumi.Input[str]] = None,
             container_action: Optional[pulumi.Input['DatasetContainerActionArgs']] = None,
             query_action: Optional[pulumi.Input['DatasetQueryActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if action_name is None and 'actionName' in kwargs:
            action_name = kwargs['actionName']
        if action_name is None:
            raise TypeError("Missing 'action_name' argument")
        if container_action is None and 'containerAction' in kwargs:
            container_action = kwargs['containerAction']
        if query_action is None and 'queryAction' in kwargs:
            query_action = kwargs['queryAction']

        _setter("action_name", action_name)
        if container_action is not None:
            _setter("container_action", container_action)
        if query_action is not None:
            _setter("query_action", query_action)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="containerAction")
    def container_action(self) -> Optional[pulumi.Input['DatasetContainerActionArgs']]:
        return pulumi.get(self, "container_action")

    @container_action.setter
    def container_action(self, value: Optional[pulumi.Input['DatasetContainerActionArgs']]):
        pulumi.set(self, "container_action", value)

    @property
    @pulumi.getter(name="queryAction")
    def query_action(self) -> Optional[pulumi.Input['DatasetQueryActionArgs']]:
        return pulumi.get(self, "query_action")

    @query_action.setter
    def query_action(self, value: Optional[pulumi.Input['DatasetQueryActionArgs']]):
        pulumi.set(self, "query_action", value)


@pulumi.input_type
class DatasetContainerActionArgs:
    def __init__(__self__, *,
                 execution_role_arn: pulumi.Input[str],
                 image: pulumi.Input[str],
                 resource_configuration: pulumi.Input['DatasetResourceConfigurationArgs'],
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetVariableArgs']]]] = None):
        DatasetContainerActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            execution_role_arn=execution_role_arn,
            image=image,
            resource_configuration=resource_configuration,
            variables=variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             execution_role_arn: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             resource_configuration: Optional[pulumi.Input['DatasetResourceConfigurationArgs']] = None,
             variables: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetVariableArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if execution_role_arn is None and 'executionRoleArn' in kwargs:
            execution_role_arn = kwargs['executionRoleArn']
        if execution_role_arn is None:
            raise TypeError("Missing 'execution_role_arn' argument")
        if image is None:
            raise TypeError("Missing 'image' argument")
        if resource_configuration is None and 'resourceConfiguration' in kwargs:
            resource_configuration = kwargs['resourceConfiguration']
        if resource_configuration is None:
            raise TypeError("Missing 'resource_configuration' argument")

        _setter("execution_role_arn", execution_role_arn)
        _setter("image", image)
        _setter("resource_configuration", resource_configuration)
        if variables is not None:
            _setter("variables", variables)

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_role_arn")

    @execution_role_arn.setter
    def execution_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role_arn", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="resourceConfiguration")
    def resource_configuration(self) -> pulumi.Input['DatasetResourceConfigurationArgs']:
        return pulumi.get(self, "resource_configuration")

    @resource_configuration.setter
    def resource_configuration(self, value: pulumi.Input['DatasetResourceConfigurationArgs']):
        pulumi.set(self, "resource_configuration", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasetVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class DatasetContentDeliveryRuleDestinationArgs:
    def __init__(__self__, *,
                 iot_events_destination_configuration: Optional[pulumi.Input['DatasetIotEventsDestinationConfigurationArgs']] = None,
                 s3_destination_configuration: Optional[pulumi.Input['DatasetS3DestinationConfigurationArgs']] = None):
        DatasetContentDeliveryRuleDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iot_events_destination_configuration=iot_events_destination_configuration,
            s3_destination_configuration=s3_destination_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iot_events_destination_configuration: Optional[pulumi.Input['DatasetIotEventsDestinationConfigurationArgs']] = None,
             s3_destination_configuration: Optional[pulumi.Input['DatasetS3DestinationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if iot_events_destination_configuration is None and 'iotEventsDestinationConfiguration' in kwargs:
            iot_events_destination_configuration = kwargs['iotEventsDestinationConfiguration']
        if s3_destination_configuration is None and 's3DestinationConfiguration' in kwargs:
            s3_destination_configuration = kwargs['s3DestinationConfiguration']

        if iot_events_destination_configuration is not None:
            _setter("iot_events_destination_configuration", iot_events_destination_configuration)
        if s3_destination_configuration is not None:
            _setter("s3_destination_configuration", s3_destination_configuration)

    @property
    @pulumi.getter(name="iotEventsDestinationConfiguration")
    def iot_events_destination_configuration(self) -> Optional[pulumi.Input['DatasetIotEventsDestinationConfigurationArgs']]:
        return pulumi.get(self, "iot_events_destination_configuration")

    @iot_events_destination_configuration.setter
    def iot_events_destination_configuration(self, value: Optional[pulumi.Input['DatasetIotEventsDestinationConfigurationArgs']]):
        pulumi.set(self, "iot_events_destination_configuration", value)

    @property
    @pulumi.getter(name="s3DestinationConfiguration")
    def s3_destination_configuration(self) -> Optional[pulumi.Input['DatasetS3DestinationConfigurationArgs']]:
        return pulumi.get(self, "s3_destination_configuration")

    @s3_destination_configuration.setter
    def s3_destination_configuration(self, value: Optional[pulumi.Input['DatasetS3DestinationConfigurationArgs']]):
        pulumi.set(self, "s3_destination_configuration", value)


@pulumi.input_type
class DatasetContentDeliveryRuleArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['DatasetContentDeliveryRuleDestinationArgs'],
                 entry_name: Optional[pulumi.Input[str]] = None):
        DatasetContentDeliveryRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            entry_name=entry_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[pulumi.Input['DatasetContentDeliveryRuleDestinationArgs']] = None,
             entry_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination is None:
            raise TypeError("Missing 'destination' argument")
        if entry_name is None and 'entryName' in kwargs:
            entry_name = kwargs['entryName']

        _setter("destination", destination)
        if entry_name is not None:
            _setter("entry_name", entry_name)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['DatasetContentDeliveryRuleDestinationArgs']:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['DatasetContentDeliveryRuleDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry_name", value)


@pulumi.input_type
class DatasetContentVersionValueArgs:
    def __init__(__self__, *,
                 dataset_name: pulumi.Input[str]):
        DatasetContentVersionValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_name=dataset_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dataset_name is None and 'datasetName' in kwargs:
            dataset_name = kwargs['datasetName']
        if dataset_name is None:
            raise TypeError("Missing 'dataset_name' argument")

        _setter("dataset_name", dataset_name)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_name", value)


@pulumi.input_type
class DatasetDeltaTimeSessionWindowConfigurationArgs:
    def __init__(__self__, *,
                 timeout_in_minutes: pulumi.Input[int]):
        DatasetDeltaTimeSessionWindowConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            timeout_in_minutes=timeout_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             timeout_in_minutes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if timeout_in_minutes is None and 'timeoutInMinutes' in kwargs:
            timeout_in_minutes = kwargs['timeoutInMinutes']
        if timeout_in_minutes is None:
            raise TypeError("Missing 'timeout_in_minutes' argument")

        _setter("timeout_in_minutes", timeout_in_minutes)

    @property
    @pulumi.getter(name="timeoutInMinutes")
    def timeout_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "timeout_in_minutes")

    @timeout_in_minutes.setter
    def timeout_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_in_minutes", value)


@pulumi.input_type
class DatasetDeltaTimeArgs:
    def __init__(__self__, *,
                 offset_seconds: pulumi.Input[int],
                 time_expression: pulumi.Input[str]):
        DatasetDeltaTimeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            offset_seconds=offset_seconds,
            time_expression=time_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             offset_seconds: Optional[pulumi.Input[int]] = None,
             time_expression: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if offset_seconds is None and 'offsetSeconds' in kwargs:
            offset_seconds = kwargs['offsetSeconds']
        if offset_seconds is None:
            raise TypeError("Missing 'offset_seconds' argument")
        if time_expression is None and 'timeExpression' in kwargs:
            time_expression = kwargs['timeExpression']
        if time_expression is None:
            raise TypeError("Missing 'time_expression' argument")

        _setter("offset_seconds", offset_seconds)
        _setter("time_expression", time_expression)

    @property
    @pulumi.getter(name="offsetSeconds")
    def offset_seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "offset_seconds")

    @offset_seconds.setter
    def offset_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "offset_seconds", value)

    @property
    @pulumi.getter(name="timeExpression")
    def time_expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_expression")

    @time_expression.setter
    def time_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_expression", value)


@pulumi.input_type
class DatasetFilterArgs:
    def __init__(__self__, *,
                 delta_time: Optional[pulumi.Input['DatasetDeltaTimeArgs']] = None):
        DatasetFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delta_time=delta_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delta_time: Optional[pulumi.Input['DatasetDeltaTimeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delta_time is None and 'deltaTime' in kwargs:
            delta_time = kwargs['deltaTime']

        if delta_time is not None:
            _setter("delta_time", delta_time)

    @property
    @pulumi.getter(name="deltaTime")
    def delta_time(self) -> Optional[pulumi.Input['DatasetDeltaTimeArgs']]:
        return pulumi.get(self, "delta_time")

    @delta_time.setter
    def delta_time(self, value: Optional[pulumi.Input['DatasetDeltaTimeArgs']]):
        pulumi.set(self, "delta_time", value)


@pulumi.input_type
class DatasetGlueConfigurationArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        DatasetGlueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_name=database_name,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_name: Optional[pulumi.Input[str]] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if database_name is None and 'databaseName' in kwargs:
            database_name = kwargs['databaseName']
        if database_name is None:
            raise TypeError("Missing 'database_name' argument")
        if table_name is None and 'tableName' in kwargs:
            table_name = kwargs['tableName']
        if table_name is None:
            raise TypeError("Missing 'table_name' argument")

        _setter("database_name", database_name)
        _setter("table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class DatasetIotEventsDestinationConfigurationArgs:
    def __init__(__self__, *,
                 input_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        DatasetIotEventsDestinationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_name=input_name,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_name: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if input_name is None and 'inputName' in kwargs:
            input_name = kwargs['inputName']
        if input_name is None:
            raise TypeError("Missing 'input_name' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("input_name", input_name)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "input_name")

    @input_name.setter
    def input_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class DatasetLateDataRuleConfigurationArgs:
    def __init__(__self__, *,
                 delta_time_session_window_configuration: Optional[pulumi.Input['DatasetDeltaTimeSessionWindowConfigurationArgs']] = None):
        DatasetLateDataRuleConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delta_time_session_window_configuration=delta_time_session_window_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delta_time_session_window_configuration: Optional[pulumi.Input['DatasetDeltaTimeSessionWindowConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delta_time_session_window_configuration is None and 'deltaTimeSessionWindowConfiguration' in kwargs:
            delta_time_session_window_configuration = kwargs['deltaTimeSessionWindowConfiguration']

        if delta_time_session_window_configuration is not None:
            _setter("delta_time_session_window_configuration", delta_time_session_window_configuration)

    @property
    @pulumi.getter(name="deltaTimeSessionWindowConfiguration")
    def delta_time_session_window_configuration(self) -> Optional[pulumi.Input['DatasetDeltaTimeSessionWindowConfigurationArgs']]:
        return pulumi.get(self, "delta_time_session_window_configuration")

    @delta_time_session_window_configuration.setter
    def delta_time_session_window_configuration(self, value: Optional[pulumi.Input['DatasetDeltaTimeSessionWindowConfigurationArgs']]):
        pulumi.set(self, "delta_time_session_window_configuration", value)


@pulumi.input_type
class DatasetLateDataRuleArgs:
    def __init__(__self__, *,
                 rule_configuration: pulumi.Input['DatasetLateDataRuleConfigurationArgs'],
                 rule_name: Optional[pulumi.Input[str]] = None):
        DatasetLateDataRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_configuration=rule_configuration,
            rule_name=rule_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_configuration: Optional[pulumi.Input['DatasetLateDataRuleConfigurationArgs']] = None,
             rule_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rule_configuration is None and 'ruleConfiguration' in kwargs:
            rule_configuration = kwargs['ruleConfiguration']
        if rule_configuration is None:
            raise TypeError("Missing 'rule_configuration' argument")
        if rule_name is None and 'ruleName' in kwargs:
            rule_name = kwargs['ruleName']

        _setter("rule_configuration", rule_configuration)
        if rule_name is not None:
            _setter("rule_name", rule_name)

    @property
    @pulumi.getter(name="ruleConfiguration")
    def rule_configuration(self) -> pulumi.Input['DatasetLateDataRuleConfigurationArgs']:
        return pulumi.get(self, "rule_configuration")

    @rule_configuration.setter
    def rule_configuration(self, value: pulumi.Input['DatasetLateDataRuleConfigurationArgs']):
        pulumi.set(self, "rule_configuration", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)


@pulumi.input_type
class DatasetOutputFileUriValueArgs:
    def __init__(__self__, *,
                 file_name: pulumi.Input[str]):
        DatasetOutputFileUriValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file_name=file_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if file_name is None and 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if file_name is None:
            raise TypeError("Missing 'file_name' argument")

        _setter("file_name", file_name)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_name", value)


@pulumi.input_type
class DatasetQueryActionArgs:
    def __init__(__self__, *,
                 sql_query: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetFilterArgs']]]] = None):
        DatasetQueryActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sql_query=sql_query,
            filters=filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sql_query: Optional[pulumi.Input[str]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if sql_query is None and 'sqlQuery' in kwargs:
            sql_query = kwargs['sqlQuery']
        if sql_query is None:
            raise TypeError("Missing 'sql_query' argument")

        _setter("sql_query", sql_query)
        if filters is not None:
            _setter("filters", filters)

    @property
    @pulumi.getter(name="sqlQuery")
    def sql_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sql_query")

    @sql_query.setter
    def sql_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_query", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasetFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class DatasetResourceConfigurationArgs:
    def __init__(__self__, *,
                 compute_type: pulumi.Input['DatasetResourceConfigurationComputeType'],
                 volume_size_in_gb: pulumi.Input[int]):
        DatasetResourceConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_type=compute_type,
            volume_size_in_gb=volume_size_in_gb,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_type: Optional[pulumi.Input['DatasetResourceConfigurationComputeType']] = None,
             volume_size_in_gb: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compute_type is None and 'computeType' in kwargs:
            compute_type = kwargs['computeType']
        if compute_type is None:
            raise TypeError("Missing 'compute_type' argument")
        if volume_size_in_gb is None and 'volumeSizeInGb' in kwargs:
            volume_size_in_gb = kwargs['volumeSizeInGb']
        if volume_size_in_gb is None:
            raise TypeError("Missing 'volume_size_in_gb' argument")

        _setter("compute_type", compute_type)
        _setter("volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="computeType")
    def compute_type(self) -> pulumi.Input['DatasetResourceConfigurationComputeType']:
        return pulumi.get(self, "compute_type")

    @compute_type.setter
    def compute_type(self, value: pulumi.Input['DatasetResourceConfigurationComputeType']):
        pulumi.set(self, "compute_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class DatasetRetentionPeriodArgs:
    def __init__(__self__, *,
                 number_of_days: Optional[pulumi.Input[int]] = None,
                 unlimited: Optional[pulumi.Input[bool]] = None):
        DatasetRetentionPeriodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_days=number_of_days,
            unlimited=unlimited,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_days: Optional[pulumi.Input[int]] = None,
             unlimited: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if number_of_days is None and 'numberOfDays' in kwargs:
            number_of_days = kwargs['numberOfDays']

        if number_of_days is not None:
            _setter("number_of_days", number_of_days)
        if unlimited is not None:
            _setter("unlimited", unlimited)

    @property
    @pulumi.getter(name="numberOfDays")
    def number_of_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_days")

    @number_of_days.setter
    def number_of_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_days", value)

    @property
    @pulumi.getter
    def unlimited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unlimited")

    @unlimited.setter
    def unlimited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unlimited", value)


@pulumi.input_type
class DatasetS3DestinationConfigurationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 glue_configuration: Optional[pulumi.Input['DatasetGlueConfigurationArgs']] = None):
        DatasetS3DestinationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key=key,
            role_arn=role_arn,
            glue_configuration=glue_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             glue_configuration: Optional[pulumi.Input['DatasetGlueConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if glue_configuration is None and 'glueConfiguration' in kwargs:
            glue_configuration = kwargs['glueConfiguration']

        _setter("bucket", bucket)
        _setter("key", key)
        _setter("role_arn", role_arn)
        if glue_configuration is not None:
            _setter("glue_configuration", glue_configuration)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="glueConfiguration")
    def glue_configuration(self) -> Optional[pulumi.Input['DatasetGlueConfigurationArgs']]:
        return pulumi.get(self, "glue_configuration")

    @glue_configuration.setter
    def glue_configuration(self, value: Optional[pulumi.Input['DatasetGlueConfigurationArgs']]):
        pulumi.set(self, "glue_configuration", value)


@pulumi.input_type
class DatasetScheduleArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str]):
        DatasetScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_expression=schedule_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_expression: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if schedule_expression is None and 'scheduleExpression' in kwargs:
            schedule_expression = kwargs['scheduleExpression']
        if schedule_expression is None:
            raise TypeError("Missing 'schedule_expression' argument")

        _setter("schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)


@pulumi.input_type
class DatasetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        DatasetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatasetTriggeringDatasetArgs:
    def __init__(__self__, *,
                 dataset_name: pulumi.Input[str]):
        DatasetTriggeringDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_name=dataset_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dataset_name is None and 'datasetName' in kwargs:
            dataset_name = kwargs['datasetName']
        if dataset_name is None:
            raise TypeError("Missing 'dataset_name' argument")

        _setter("dataset_name", dataset_name)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_name", value)


@pulumi.input_type
class DatasetTriggerArgs:
    def __init__(__self__, *,
                 schedule: Optional[pulumi.Input['DatasetScheduleArgs']] = None,
                 triggering_dataset: Optional[pulumi.Input['DatasetTriggeringDatasetArgs']] = None):
        DatasetTriggerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule=schedule,
            triggering_dataset=triggering_dataset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule: Optional[pulumi.Input['DatasetScheduleArgs']] = None,
             triggering_dataset: Optional[pulumi.Input['DatasetTriggeringDatasetArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if triggering_dataset is None and 'triggeringDataset' in kwargs:
            triggering_dataset = kwargs['triggeringDataset']

        if schedule is not None:
            _setter("schedule", schedule)
        if triggering_dataset is not None:
            _setter("triggering_dataset", triggering_dataset)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['DatasetScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['DatasetScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="triggeringDataset")
    def triggering_dataset(self) -> Optional[pulumi.Input['DatasetTriggeringDatasetArgs']]:
        return pulumi.get(self, "triggering_dataset")

    @triggering_dataset.setter
    def triggering_dataset(self, value: Optional[pulumi.Input['DatasetTriggeringDatasetArgs']]):
        pulumi.set(self, "triggering_dataset", value)


@pulumi.input_type
class DatasetVariableArgs:
    def __init__(__self__, *,
                 variable_name: pulumi.Input[str],
                 dataset_content_version_value: Optional[pulumi.Input['DatasetContentVersionValueArgs']] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 output_file_uri_value: Optional[pulumi.Input['DatasetOutputFileUriValueArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        DatasetVariableArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            variable_name=variable_name,
            dataset_content_version_value=dataset_content_version_value,
            double_value=double_value,
            output_file_uri_value=output_file_uri_value,
            string_value=string_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             variable_name: Optional[pulumi.Input[str]] = None,
             dataset_content_version_value: Optional[pulumi.Input['DatasetContentVersionValueArgs']] = None,
             double_value: Optional[pulumi.Input[float]] = None,
             output_file_uri_value: Optional[pulumi.Input['DatasetOutputFileUriValueArgs']] = None,
             string_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if variable_name is None and 'variableName' in kwargs:
            variable_name = kwargs['variableName']
        if variable_name is None:
            raise TypeError("Missing 'variable_name' argument")
        if dataset_content_version_value is None and 'datasetContentVersionValue' in kwargs:
            dataset_content_version_value = kwargs['datasetContentVersionValue']
        if double_value is None and 'doubleValue' in kwargs:
            double_value = kwargs['doubleValue']
        if output_file_uri_value is None and 'outputFileUriValue' in kwargs:
            output_file_uri_value = kwargs['outputFileUriValue']
        if string_value is None and 'stringValue' in kwargs:
            string_value = kwargs['stringValue']

        _setter("variable_name", variable_name)
        if dataset_content_version_value is not None:
            _setter("dataset_content_version_value", dataset_content_version_value)
        if double_value is not None:
            _setter("double_value", double_value)
        if output_file_uri_value is not None:
            _setter("output_file_uri_value", output_file_uri_value)
        if string_value is not None:
            _setter("string_value", string_value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="datasetContentVersionValue")
    def dataset_content_version_value(self) -> Optional[pulumi.Input['DatasetContentVersionValueArgs']]:
        return pulumi.get(self, "dataset_content_version_value")

    @dataset_content_version_value.setter
    def dataset_content_version_value(self, value: Optional[pulumi.Input['DatasetContentVersionValueArgs']]):
        pulumi.set(self, "dataset_content_version_value", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="outputFileUriValue")
    def output_file_uri_value(self) -> Optional[pulumi.Input['DatasetOutputFileUriValueArgs']]:
        return pulumi.get(self, "output_file_uri_value")

    @output_file_uri_value.setter
    def output_file_uri_value(self, value: Optional[pulumi.Input['DatasetOutputFileUriValueArgs']]):
        pulumi.set(self, "output_file_uri_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class DatasetVersioningConfigurationArgs:
    def __init__(__self__, *,
                 max_versions: Optional[pulumi.Input[int]] = None,
                 unlimited: Optional[pulumi.Input[bool]] = None):
        DatasetVersioningConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_versions=max_versions,
            unlimited=unlimited,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_versions: Optional[pulumi.Input[int]] = None,
             unlimited: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if max_versions is None and 'maxVersions' in kwargs:
            max_versions = kwargs['maxVersions']

        if max_versions is not None:
            _setter("max_versions", max_versions)
        if unlimited is not None:
            _setter("unlimited", unlimited)

    @property
    @pulumi.getter(name="maxVersions")
    def max_versions(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_versions")

    @max_versions.setter
    def max_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_versions", value)

    @property
    @pulumi.getter
    def unlimited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unlimited")

    @unlimited.setter
    def unlimited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unlimited", value)


@pulumi.input_type
class DatastoreColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        DatastoreColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatastoreCustomerManagedS3StorageArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key_prefix: Optional[pulumi.Input[str]] = None):
        DatastoreCustomerManagedS3StorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key_prefix=key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             key_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if key_prefix is None and 'keyPrefix' in kwargs:
            key_prefix = kwargs['keyPrefix']

        _setter("bucket", bucket)
        if key_prefix is not None:
            _setter("key_prefix", key_prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_prefix")

    @key_prefix.setter
    def key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix", value)


@pulumi.input_type
class DatastoreCustomerManagedS3Args:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 key_prefix: Optional[pulumi.Input[str]] = None):
        DatastoreCustomerManagedS3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            role_arn=role_arn,
            key_prefix=key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             key_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if key_prefix is None and 'keyPrefix' in kwargs:
            key_prefix = kwargs['keyPrefix']

        _setter("bucket", bucket)
        _setter("role_arn", role_arn)
        if key_prefix is not None:
            _setter("key_prefix", key_prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_prefix")

    @key_prefix.setter
    def key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix", value)


@pulumi.input_type
class DatastoreFileFormatConfigurationArgs:
    def __init__(__self__, *,
                 json_configuration: Optional[pulumi.Input['DatastoreJsonConfigurationArgs']] = None,
                 parquet_configuration: Optional[pulumi.Input['DatastoreParquetConfigurationArgs']] = None):
        DatastoreFileFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            json_configuration=json_configuration,
            parquet_configuration=parquet_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             json_configuration: Optional[pulumi.Input['DatastoreJsonConfigurationArgs']] = None,
             parquet_configuration: Optional[pulumi.Input['DatastoreParquetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if json_configuration is None and 'jsonConfiguration' in kwargs:
            json_configuration = kwargs['jsonConfiguration']
        if parquet_configuration is None and 'parquetConfiguration' in kwargs:
            parquet_configuration = kwargs['parquetConfiguration']

        if json_configuration is not None:
            _setter("json_configuration", json_configuration)
        if parquet_configuration is not None:
            _setter("parquet_configuration", parquet_configuration)

    @property
    @pulumi.getter(name="jsonConfiguration")
    def json_configuration(self) -> Optional[pulumi.Input['DatastoreJsonConfigurationArgs']]:
        return pulumi.get(self, "json_configuration")

    @json_configuration.setter
    def json_configuration(self, value: Optional[pulumi.Input['DatastoreJsonConfigurationArgs']]):
        pulumi.set(self, "json_configuration", value)

    @property
    @pulumi.getter(name="parquetConfiguration")
    def parquet_configuration(self) -> Optional[pulumi.Input['DatastoreParquetConfigurationArgs']]:
        return pulumi.get(self, "parquet_configuration")

    @parquet_configuration.setter
    def parquet_configuration(self, value: Optional[pulumi.Input['DatastoreParquetConfigurationArgs']]):
        pulumi.set(self, "parquet_configuration", value)


@pulumi.input_type
class DatastoreIotSiteWiseMultiLayerStorageArgs:
    def __init__(__self__, *,
                 customer_managed_s3_storage: Optional[pulumi.Input['DatastoreCustomerManagedS3StorageArgs']] = None):
        DatastoreIotSiteWiseMultiLayerStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_s3_storage=customer_managed_s3_storage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_s3_storage: Optional[pulumi.Input['DatastoreCustomerManagedS3StorageArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if customer_managed_s3_storage is None and 'customerManagedS3Storage' in kwargs:
            customer_managed_s3_storage = kwargs['customerManagedS3Storage']

        if customer_managed_s3_storage is not None:
            _setter("customer_managed_s3_storage", customer_managed_s3_storage)

    @property
    @pulumi.getter(name="customerManagedS3Storage")
    def customer_managed_s3_storage(self) -> Optional[pulumi.Input['DatastoreCustomerManagedS3StorageArgs']]:
        return pulumi.get(self, "customer_managed_s3_storage")

    @customer_managed_s3_storage.setter
    def customer_managed_s3_storage(self, value: Optional[pulumi.Input['DatastoreCustomerManagedS3StorageArgs']]):
        pulumi.set(self, "customer_managed_s3_storage", value)


@pulumi.input_type
class DatastoreJsonConfigurationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        pass



@pulumi.input_type
class DatastoreParquetConfigurationArgs:
    def __init__(__self__, *,
                 schema_definition: Optional[pulumi.Input['DatastoreSchemaDefinitionArgs']] = None):
        DatastoreParquetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schema_definition=schema_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schema_definition: Optional[pulumi.Input['DatastoreSchemaDefinitionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if schema_definition is None and 'schemaDefinition' in kwargs:
            schema_definition = kwargs['schemaDefinition']

        if schema_definition is not None:
            _setter("schema_definition", schema_definition)

    @property
    @pulumi.getter(name="schemaDefinition")
    def schema_definition(self) -> Optional[pulumi.Input['DatastoreSchemaDefinitionArgs']]:
        return pulumi.get(self, "schema_definition")

    @schema_definition.setter
    def schema_definition(self, value: Optional[pulumi.Input['DatastoreSchemaDefinitionArgs']]):
        pulumi.set(self, "schema_definition", value)


@pulumi.input_type
class DatastorePartitionsArgs:
    def __init__(__self__, *,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['DatastorePartitionArgs']]]] = None):
        DatastorePartitionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            partitions=partitions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             partitions: Optional[pulumi.Input[Sequence[pulumi.Input['DatastorePartitionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if partitions is not None:
            _setter("partitions", partitions)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatastorePartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatastorePartitionArgs']]]]):
        pulumi.set(self, "partitions", value)


@pulumi.input_type
class DatastorePartitionArgs:
    def __init__(__self__, *,
                 partition: Optional[pulumi.Input['PartitionArgs']] = None,
                 timestamp_partition: Optional[pulumi.Input['DatastoreTimestampPartitionArgs']] = None):
        DatastorePartitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            partition=partition,
            timestamp_partition=timestamp_partition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             partition: Optional[pulumi.Input['PartitionArgs']] = None,
             timestamp_partition: Optional[pulumi.Input['DatastoreTimestampPartitionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if timestamp_partition is None and 'timestampPartition' in kwargs:
            timestamp_partition = kwargs['timestampPartition']

        if partition is not None:
            _setter("partition", partition)
        if timestamp_partition is not None:
            _setter("timestamp_partition", timestamp_partition)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input['PartitionArgs']]:
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input['PartitionArgs']]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="timestampPartition")
    def timestamp_partition(self) -> Optional[pulumi.Input['DatastoreTimestampPartitionArgs']]:
        return pulumi.get(self, "timestamp_partition")

    @timestamp_partition.setter
    def timestamp_partition(self, value: Optional[pulumi.Input['DatastoreTimestampPartitionArgs']]):
        pulumi.set(self, "timestamp_partition", value)


@pulumi.input_type
class DatastoreRetentionPeriodArgs:
    def __init__(__self__, *,
                 number_of_days: Optional[pulumi.Input[int]] = None,
                 unlimited: Optional[pulumi.Input[bool]] = None):
        DatastoreRetentionPeriodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_of_days=number_of_days,
            unlimited=unlimited,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_of_days: Optional[pulumi.Input[int]] = None,
             unlimited: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if number_of_days is None and 'numberOfDays' in kwargs:
            number_of_days = kwargs['numberOfDays']

        if number_of_days is not None:
            _setter("number_of_days", number_of_days)
        if unlimited is not None:
            _setter("unlimited", unlimited)

    @property
    @pulumi.getter(name="numberOfDays")
    def number_of_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_days")

    @number_of_days.setter
    def number_of_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_days", value)

    @property
    @pulumi.getter
    def unlimited(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unlimited")

    @unlimited.setter
    def unlimited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unlimited", value)


@pulumi.input_type
class DatastoreSchemaDefinitionArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreColumnArgs']]]] = None):
        DatastoreSchemaDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreColumnArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if columns is not None:
            _setter("columns", columns)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreColumnArgs']]]]):
        pulumi.set(self, "columns", value)


@pulumi.input_type
class DatastoreServiceManagedS3Args:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        pass



@pulumi.input_type
class DatastoreStorageArgs:
    def __init__(__self__, *,
                 customer_managed_s3: Optional[pulumi.Input['DatastoreCustomerManagedS3Args']] = None,
                 iot_site_wise_multi_layer_storage: Optional[pulumi.Input['DatastoreIotSiteWiseMultiLayerStorageArgs']] = None,
                 service_managed_s3: Optional[pulumi.Input['DatastoreServiceManagedS3Args']] = None):
        DatastoreStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_s3=customer_managed_s3,
            iot_site_wise_multi_layer_storage=iot_site_wise_multi_layer_storage,
            service_managed_s3=service_managed_s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_s3: Optional[pulumi.Input['DatastoreCustomerManagedS3Args']] = None,
             iot_site_wise_multi_layer_storage: Optional[pulumi.Input['DatastoreIotSiteWiseMultiLayerStorageArgs']] = None,
             service_managed_s3: Optional[pulumi.Input['DatastoreServiceManagedS3Args']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if customer_managed_s3 is None and 'customerManagedS3' in kwargs:
            customer_managed_s3 = kwargs['customerManagedS3']
        if iot_site_wise_multi_layer_storage is None and 'iotSiteWiseMultiLayerStorage' in kwargs:
            iot_site_wise_multi_layer_storage = kwargs['iotSiteWiseMultiLayerStorage']
        if service_managed_s3 is None and 'serviceManagedS3' in kwargs:
            service_managed_s3 = kwargs['serviceManagedS3']

        if customer_managed_s3 is not None:
            _setter("customer_managed_s3", customer_managed_s3)
        if iot_site_wise_multi_layer_storage is not None:
            _setter("iot_site_wise_multi_layer_storage", iot_site_wise_multi_layer_storage)
        if service_managed_s3 is not None:
            _setter("service_managed_s3", service_managed_s3)

    @property
    @pulumi.getter(name="customerManagedS3")
    def customer_managed_s3(self) -> Optional[pulumi.Input['DatastoreCustomerManagedS3Args']]:
        return pulumi.get(self, "customer_managed_s3")

    @customer_managed_s3.setter
    def customer_managed_s3(self, value: Optional[pulumi.Input['DatastoreCustomerManagedS3Args']]):
        pulumi.set(self, "customer_managed_s3", value)

    @property
    @pulumi.getter(name="iotSiteWiseMultiLayerStorage")
    def iot_site_wise_multi_layer_storage(self) -> Optional[pulumi.Input['DatastoreIotSiteWiseMultiLayerStorageArgs']]:
        return pulumi.get(self, "iot_site_wise_multi_layer_storage")

    @iot_site_wise_multi_layer_storage.setter
    def iot_site_wise_multi_layer_storage(self, value: Optional[pulumi.Input['DatastoreIotSiteWiseMultiLayerStorageArgs']]):
        pulumi.set(self, "iot_site_wise_multi_layer_storage", value)

    @property
    @pulumi.getter(name="serviceManagedS3")
    def service_managed_s3(self) -> Optional[pulumi.Input['DatastoreServiceManagedS3Args']]:
        return pulumi.get(self, "service_managed_s3")

    @service_managed_s3.setter
    def service_managed_s3(self, value: Optional[pulumi.Input['DatastoreServiceManagedS3Args']]):
        pulumi.set(self, "service_managed_s3", value)


@pulumi.input_type
class DatastoreTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        DatastoreTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatastoreTimestampPartitionArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 timestamp_format: Optional[pulumi.Input[str]] = None):
        DatastoreTimestampPartitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            timestamp_format=timestamp_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: Optional[pulumi.Input[str]] = None,
             timestamp_format: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_name is None and 'attributeName' in kwargs:
            attribute_name = kwargs['attributeName']
        if attribute_name is None:
            raise TypeError("Missing 'attribute_name' argument")
        if timestamp_format is None and 'timestampFormat' in kwargs:
            timestamp_format = kwargs['timestampFormat']

        _setter("attribute_name", attribute_name)
        if timestamp_format is not None:
            _setter("timestamp_format", timestamp_format)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="timestampFormat")
    def timestamp_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timestamp_format")

    @timestamp_format.setter
    def timestamp_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp_format", value)


@pulumi.input_type
class PartitionArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str]):
        PartitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute_name is None and 'attributeName' in kwargs:
            attribute_name = kwargs['attributeName']
        if attribute_name is None:
            raise TypeError("Missing 'attribute_name' argument")

        _setter("attribute_name", attribute_name)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)


@pulumi.input_type
class PipelineActivityArgs:
    def __init__(__self__, *,
                 add_attributes: Optional[pulumi.Input['PipelineAddAttributesArgs']] = None,
                 channel: Optional[pulumi.Input['PipelineChannelArgs']] = None,
                 datastore: Optional[pulumi.Input['PipelineDatastoreArgs']] = None,
                 device_registry_enrich: Optional[pulumi.Input['PipelineDeviceRegistryEnrichArgs']] = None,
                 device_shadow_enrich: Optional[pulumi.Input['PipelineDeviceShadowEnrichArgs']] = None,
                 filter: Optional[pulumi.Input['PipelineFilterArgs']] = None,
                 lambda_: Optional[pulumi.Input['PipelineLambdaArgs']] = None,
                 math: Optional[pulumi.Input['PipelineMathArgs']] = None,
                 remove_attributes: Optional[pulumi.Input['PipelineRemoveAttributesArgs']] = None,
                 select_attributes: Optional[pulumi.Input['PipelineSelectAttributesArgs']] = None):
        PipelineActivityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_attributes=add_attributes,
            channel=channel,
            datastore=datastore,
            device_registry_enrich=device_registry_enrich,
            device_shadow_enrich=device_shadow_enrich,
            filter=filter,
            lambda_=lambda_,
            math=math,
            remove_attributes=remove_attributes,
            select_attributes=select_attributes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_attributes: Optional[pulumi.Input['PipelineAddAttributesArgs']] = None,
             channel: Optional[pulumi.Input['PipelineChannelArgs']] = None,
             datastore: Optional[pulumi.Input['PipelineDatastoreArgs']] = None,
             device_registry_enrich: Optional[pulumi.Input['PipelineDeviceRegistryEnrichArgs']] = None,
             device_shadow_enrich: Optional[pulumi.Input['PipelineDeviceShadowEnrichArgs']] = None,
             filter: Optional[pulumi.Input['PipelineFilterArgs']] = None,
             lambda_: Optional[pulumi.Input['PipelineLambdaArgs']] = None,
             math: Optional[pulumi.Input['PipelineMathArgs']] = None,
             remove_attributes: Optional[pulumi.Input['PipelineRemoveAttributesArgs']] = None,
             select_attributes: Optional[pulumi.Input['PipelineSelectAttributesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if add_attributes is None and 'addAttributes' in kwargs:
            add_attributes = kwargs['addAttributes']
        if device_registry_enrich is None and 'deviceRegistryEnrich' in kwargs:
            device_registry_enrich = kwargs['deviceRegistryEnrich']
        if device_shadow_enrich is None and 'deviceShadowEnrich' in kwargs:
            device_shadow_enrich = kwargs['deviceShadowEnrich']
        if lambda_ is None and 'lambda' in kwargs:
            lambda_ = kwargs['lambda']
        if remove_attributes is None and 'removeAttributes' in kwargs:
            remove_attributes = kwargs['removeAttributes']
        if select_attributes is None and 'selectAttributes' in kwargs:
            select_attributes = kwargs['selectAttributes']

        if add_attributes is not None:
            _setter("add_attributes", add_attributes)
        if channel is not None:
            _setter("channel", channel)
        if datastore is not None:
            _setter("datastore", datastore)
        if device_registry_enrich is not None:
            _setter("device_registry_enrich", device_registry_enrich)
        if device_shadow_enrich is not None:
            _setter("device_shadow_enrich", device_shadow_enrich)
        if filter is not None:
            _setter("filter", filter)
        if lambda_ is not None:
            _setter("lambda_", lambda_)
        if math is not None:
            _setter("math", math)
        if remove_attributes is not None:
            _setter("remove_attributes", remove_attributes)
        if select_attributes is not None:
            _setter("select_attributes", select_attributes)

    @property
    @pulumi.getter(name="addAttributes")
    def add_attributes(self) -> Optional[pulumi.Input['PipelineAddAttributesArgs']]:
        return pulumi.get(self, "add_attributes")

    @add_attributes.setter
    def add_attributes(self, value: Optional[pulumi.Input['PipelineAddAttributesArgs']]):
        pulumi.set(self, "add_attributes", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input['PipelineChannelArgs']]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input['PipelineChannelArgs']]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def datastore(self) -> Optional[pulumi.Input['PipelineDatastoreArgs']]:
        return pulumi.get(self, "datastore")

    @datastore.setter
    def datastore(self, value: Optional[pulumi.Input['PipelineDatastoreArgs']]):
        pulumi.set(self, "datastore", value)

    @property
    @pulumi.getter(name="deviceRegistryEnrich")
    def device_registry_enrich(self) -> Optional[pulumi.Input['PipelineDeviceRegistryEnrichArgs']]:
        return pulumi.get(self, "device_registry_enrich")

    @device_registry_enrich.setter
    def device_registry_enrich(self, value: Optional[pulumi.Input['PipelineDeviceRegistryEnrichArgs']]):
        pulumi.set(self, "device_registry_enrich", value)

    @property
    @pulumi.getter(name="deviceShadowEnrich")
    def device_shadow_enrich(self) -> Optional[pulumi.Input['PipelineDeviceShadowEnrichArgs']]:
        return pulumi.get(self, "device_shadow_enrich")

    @device_shadow_enrich.setter
    def device_shadow_enrich(self, value: Optional[pulumi.Input['PipelineDeviceShadowEnrichArgs']]):
        pulumi.set(self, "device_shadow_enrich", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['PipelineFilterArgs']]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['PipelineFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['PipelineLambdaArgs']]:
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['PipelineLambdaArgs']]):
        pulumi.set(self, "lambda_", value)

    @property
    @pulumi.getter
    def math(self) -> Optional[pulumi.Input['PipelineMathArgs']]:
        return pulumi.get(self, "math")

    @math.setter
    def math(self, value: Optional[pulumi.Input['PipelineMathArgs']]):
        pulumi.set(self, "math", value)

    @property
    @pulumi.getter(name="removeAttributes")
    def remove_attributes(self) -> Optional[pulumi.Input['PipelineRemoveAttributesArgs']]:
        return pulumi.get(self, "remove_attributes")

    @remove_attributes.setter
    def remove_attributes(self, value: Optional[pulumi.Input['PipelineRemoveAttributesArgs']]):
        pulumi.set(self, "remove_attributes", value)

    @property
    @pulumi.getter(name="selectAttributes")
    def select_attributes(self) -> Optional[pulumi.Input['PipelineSelectAttributesArgs']]:
        return pulumi.get(self, "select_attributes")

    @select_attributes.setter
    def select_attributes(self, value: Optional[pulumi.Input['PipelineSelectAttributesArgs']]):
        pulumi.set(self, "select_attributes", value)


@pulumi.input_type
class PipelineAddAttributesArgs:
    def __init__(__self__, *,
                 attributes: Any,
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineAddAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attributes is None:
            raise TypeError("Missing 'attributes' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("attributes", attributes)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attributes(self) -> Any:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Any):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineChannelArgs:
    def __init__(__self__, *,
                 channel_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineChannelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            channel_name=channel_name,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             channel_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if channel_name is None and 'channelName' in kwargs:
            channel_name = kwargs['channelName']
        if channel_name is None:
            raise TypeError("Missing 'channel_name' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("channel_name", channel_name)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "channel_name")

    @channel_name.setter
    def channel_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineDatastoreArgs:
    def __init__(__self__, *,
                 datastore_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        PipelineDatastoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datastore_name=datastore_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datastore_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if datastore_name is None and 'datastoreName' in kwargs:
            datastore_name = kwargs['datastoreName']
        if datastore_name is None:
            raise TypeError("Missing 'datastore_name' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("datastore_name", datastore_name)
        _setter("name", name)

    @property
    @pulumi.getter(name="datastoreName")
    def datastore_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datastore_name")

    @datastore_name.setter
    def datastore_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "datastore_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PipelineDeviceRegistryEnrichArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 thing_name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineDeviceRegistryEnrichArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute=attribute,
            name=name,
            role_arn=role_arn,
            thing_name=thing_name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             thing_name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute is None:
            raise TypeError("Missing 'attribute' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if thing_name is None and 'thingName' in kwargs:
            thing_name = kwargs['thingName']
        if thing_name is None:
            raise TypeError("Missing 'thing_name' argument")

        _setter("attribute", attribute)
        _setter("name", name)
        _setter("role_arn", role_arn)
        _setter("thing_name", thing_name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="thingName")
    def thing_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "thing_name")

    @thing_name.setter
    def thing_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "thing_name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineDeviceShadowEnrichArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 thing_name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineDeviceShadowEnrichArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute=attribute,
            name=name,
            role_arn=role_arn,
            thing_name=thing_name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             thing_name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute is None:
            raise TypeError("Missing 'attribute' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if thing_name is None and 'thingName' in kwargs:
            thing_name = kwargs['thingName']
        if thing_name is None:
            raise TypeError("Missing 'thing_name' argument")

        _setter("attribute", attribute)
        _setter("name", name)
        _setter("role_arn", role_arn)
        _setter("thing_name", thing_name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="thingName")
    def thing_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "thing_name")

    @thing_name.setter
    def thing_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "thing_name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineFilterArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if filter is None:
            raise TypeError("Missing 'filter' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("filter", filter)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineLambdaArgs:
    def __init__(__self__, *,
                 batch_size: pulumi.Input[int],
                 lambda_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineLambdaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            batch_size=batch_size,
            lambda_name=lambda_name,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             batch_size: Optional[pulumi.Input[int]] = None,
             lambda_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if batch_size is None and 'batchSize' in kwargs:
            batch_size = kwargs['batchSize']
        if batch_size is None:
            raise TypeError("Missing 'batch_size' argument")
        if lambda_name is None and 'lambdaName' in kwargs:
            lambda_name = kwargs['lambdaName']
        if lambda_name is None:
            raise TypeError("Missing 'lambda_name' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("batch_size", batch_size)
        _setter("lambda_name", lambda_name)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="lambdaName")
    def lambda_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lambda_name")

    @lambda_name.setter
    def lambda_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineMathArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 math: pulumi.Input[str],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineMathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute=attribute,
            math=math,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute: Optional[pulumi.Input[str]] = None,
             math: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attribute is None:
            raise TypeError("Missing 'attribute' argument")
        if math is None:
            raise TypeError("Missing 'math' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("attribute", attribute)
        _setter("math", math)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def math(self) -> pulumi.Input[str]:
        return pulumi.get(self, "math")

    @math.setter
    def math(self, value: pulumi.Input[str]):
        pulumi.set(self, "math", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineRemoveAttributesArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineRemoveAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attributes is None:
            raise TypeError("Missing 'attributes' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("attributes", attributes)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineSelectAttributesArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 next: Optional[pulumi.Input[str]] = None):
        PipelineSelectAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            name=name,
            next=next,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             next: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attributes is None:
            raise TypeError("Missing 'attributes' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("attributes", attributes)
        _setter("name", name)
        if next is not None:
            _setter("next", next)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def next(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next")

    @next.setter
    def next(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next", value)


@pulumi.input_type
class PipelineTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        PipelineTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


