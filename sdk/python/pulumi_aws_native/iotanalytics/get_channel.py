# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetChannelResult',
    'AwaitableGetChannelResult',
    'get_channel',
    'get_channel_output',
]

@pulumi.output_type
class GetChannelResult:
    def __init__(__self__, channel_storage=None, id=None, retention_period=None, tags=None):
        if channel_storage and not isinstance(channel_storage, dict):
            raise TypeError("Expected argument 'channel_storage' to be a dict")
        pulumi.set(__self__, "channel_storage", channel_storage)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if retention_period and not isinstance(retention_period, dict):
            raise TypeError("Expected argument 'retention_period' to be a dict")
        pulumi.set(__self__, "retention_period", retention_period)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="channelStorage")
    def channel_storage(self) -> Optional['outputs.ChannelStorage']:
        return pulumi.get(self, "channel_storage")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional['outputs.ChannelRetentionPeriod']:
        return pulumi.get(self, "retention_period")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ChannelTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetChannelResult(GetChannelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChannelResult(
            channel_storage=self.channel_storage,
            id=self.id,
            retention_period=self.retention_period,
            tags=self.tags)


def get_channel(channel_name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChannelResult:
    """
    Resource Type definition for AWS::IoTAnalytics::Channel
    """
    __args__ = dict()
    __args__['channelName'] = channel_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:iotanalytics:getChannel', __args__, opts=opts, typ=GetChannelResult).value

    return AwaitableGetChannelResult(
        channel_storage=__ret__.channel_storage,
        id=__ret__.id,
        retention_period=__ret__.retention_period,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_channel)
def get_channel_output(channel_name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetChannelResult]:
    """
    Resource Type definition for AWS::IoTAnalytics::Channel
    """
    ...
