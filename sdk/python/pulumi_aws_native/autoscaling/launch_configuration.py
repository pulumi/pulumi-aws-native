# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LaunchConfigurationArgs', 'LaunchConfiguration']

@pulumi.input_type
class LaunchConfigurationArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 associate_public_ip_address: Optional[pulumi.Input[bool]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchConfigurationBlockDeviceMappingArgs']]]] = None,
                 classic_link_vpc_id: Optional[pulumi.Input[str]] = None,
                 classic_link_vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 kernel_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 launch_configuration_name: Optional[pulumi.Input[str]] = None,
                 metadata_options: Optional[pulumi.Input['LaunchConfigurationMetadataOptionsArgs']] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 ram_disk_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LaunchConfiguration resource.
        :param pulumi.Input[str] image_id: Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        :param pulumi.Input[str] instance_type: Specifies the instance type of the EC2 instance.
        :param pulumi.Input[bool] associate_public_ip_address: For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        :param pulumi.Input[Sequence[pulumi.Input['LaunchConfigurationBlockDeviceMappingArgs']]] block_device_mappings: Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        :param pulumi.Input[str] classic_link_vpc_id: The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] classic_link_vpc_security_groups: The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        :param pulumi.Input[bool] ebs_optimized: Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        :param pulumi.Input[str] iam_instance_profile: Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        :param pulumi.Input[str] instance_id: The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        :param pulumi.Input[bool] instance_monitoring: Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        :param pulumi.Input[str] kernel_id: Provides the ID of the kernel associated with the EC2 AMI.
        :param pulumi.Input[str] key_name: Provides the name of the EC2 key pair.
        :param pulumi.Input[str] launch_configuration_name: The name of the launch configuration. This name must be unique per Region per account.
        :param pulumi.Input['LaunchConfigurationMetadataOptionsArgs'] metadata_options: The metadata options for the instances.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the instance, either default or dedicated.
        :param pulumi.Input[str] ram_disk_id: The ID of the RAM disk to select.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list that contains the security groups to assign to the instances in the Auto Scaling group.
        :param pulumi.Input[str] spot_price: The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        :param pulumi.Input[str] user_data: The Base64-encoded user data to make available to the launched EC2 instances.
        """
        LaunchConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_id=image_id,
            instance_type=instance_type,
            associate_public_ip_address=associate_public_ip_address,
            block_device_mappings=block_device_mappings,
            classic_link_vpc_id=classic_link_vpc_id,
            classic_link_vpc_security_groups=classic_link_vpc_security_groups,
            ebs_optimized=ebs_optimized,
            iam_instance_profile=iam_instance_profile,
            instance_id=instance_id,
            instance_monitoring=instance_monitoring,
            kernel_id=kernel_id,
            key_name=key_name,
            launch_configuration_name=launch_configuration_name,
            metadata_options=metadata_options,
            placement_tenancy=placement_tenancy,
            ram_disk_id=ram_disk_id,
            security_groups=security_groups,
            spot_price=spot_price,
            user_data=user_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_id: pulumi.Input[str],
             instance_type: pulumi.Input[str],
             associate_public_ip_address: Optional[pulumi.Input[bool]] = None,
             block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchConfigurationBlockDeviceMappingArgs']]]] = None,
             classic_link_vpc_id: Optional[pulumi.Input[str]] = None,
             classic_link_vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             ebs_optimized: Optional[pulumi.Input[bool]] = None,
             iam_instance_profile: Optional[pulumi.Input[str]] = None,
             instance_id: Optional[pulumi.Input[str]] = None,
             instance_monitoring: Optional[pulumi.Input[bool]] = None,
             kernel_id: Optional[pulumi.Input[str]] = None,
             key_name: Optional[pulumi.Input[str]] = None,
             launch_configuration_name: Optional[pulumi.Input[str]] = None,
             metadata_options: Optional[pulumi.Input['LaunchConfigurationMetadataOptionsArgs']] = None,
             placement_tenancy: Optional[pulumi.Input[str]] = None,
             ram_disk_id: Optional[pulumi.Input[str]] = None,
             security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             spot_price: Optional[pulumi.Input[str]] = None,
             user_data: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("image_id", image_id)
        _setter("instance_type", instance_type)
        if associate_public_ip_address is not None:
            _setter("associate_public_ip_address", associate_public_ip_address)
        if block_device_mappings is not None:
            _setter("block_device_mappings", block_device_mappings)
        if classic_link_vpc_id is not None:
            _setter("classic_link_vpc_id", classic_link_vpc_id)
        if classic_link_vpc_security_groups is not None:
            _setter("classic_link_vpc_security_groups", classic_link_vpc_security_groups)
        if ebs_optimized is not None:
            _setter("ebs_optimized", ebs_optimized)
        if iam_instance_profile is not None:
            _setter("iam_instance_profile", iam_instance_profile)
        if instance_id is not None:
            _setter("instance_id", instance_id)
        if instance_monitoring is not None:
            _setter("instance_monitoring", instance_monitoring)
        if kernel_id is not None:
            _setter("kernel_id", kernel_id)
        if key_name is not None:
            _setter("key_name", key_name)
        if launch_configuration_name is not None:
            _setter("launch_configuration_name", launch_configuration_name)
        if metadata_options is not None:
            _setter("metadata_options", metadata_options)
        if placement_tenancy is not None:
            _setter("placement_tenancy", placement_tenancy)
        if ram_disk_id is not None:
            _setter("ram_disk_id", ram_disk_id)
        if security_groups is not None:
            _setter("security_groups", security_groups)
        if spot_price is not None:
            _setter("spot_price", spot_price)
        if user_data is not None:
            _setter("user_data", user_data)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specifies the instance type of the EC2 instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="associatePublicIpAddress")
    def associate_public_ip_address(self) -> Optional[pulumi.Input[bool]]:
        """
        For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        """
        return pulumi.get(self, "associate_public_ip_address")

    @associate_public_ip_address.setter
    def associate_public_ip_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_public_ip_address", value)

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaunchConfigurationBlockDeviceMappingArgs']]]]:
        """
        Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        """
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchConfigurationBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @property
    @pulumi.getter(name="classicLinkVpcId")
    def classic_link_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        """
        return pulumi.get(self, "classic_link_vpc_id")

    @classic_link_vpc_id.setter
    def classic_link_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classic_link_vpc_id", value)

    @property
    @pulumi.getter(name="classicLinkVpcSecurityGroups")
    def classic_link_vpc_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        """
        return pulumi.get(self, "classic_link_vpc_security_groups")

    @classic_link_vpc_security_groups.setter
    def classic_link_vpc_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "classic_link_vpc_security_groups", value)

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        """
        return pulumi.get(self, "ebs_optimized")

    @ebs_optimized.setter
    def ebs_optimized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ebs_optimized", value)

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        """
        return pulumi.get(self, "iam_instance_profile")

    @iam_instance_profile.setter
    def iam_instance_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_instance_profile", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceMonitoring")
    def instance_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        """
        return pulumi.get(self, "instance_monitoring")

    @instance_monitoring.setter
    def instance_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "instance_monitoring", value)

    @property
    @pulumi.getter(name="kernelId")
    def kernel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Provides the ID of the kernel associated with the EC2 AMI.
        """
        return pulumi.get(self, "kernel_id")

    @kernel_id.setter
    def kernel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kernel_id", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Provides the name of the EC2 key pair.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="launchConfigurationName")
    def launch_configuration_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the launch configuration. This name must be unique per Region per account.
        """
        return pulumi.get(self, "launch_configuration_name")

    @launch_configuration_name.setter
    def launch_configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_configuration_name", value)

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> Optional[pulumi.Input['LaunchConfigurationMetadataOptionsArgs']]:
        """
        The metadata options for the instances.
        """
        return pulumi.get(self, "metadata_options")

    @metadata_options.setter
    def metadata_options(self, value: Optional[pulumi.Input['LaunchConfigurationMetadataOptionsArgs']]):
        pulumi.set(self, "metadata_options", value)

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The tenancy of the instance, either default or dedicated.
        """
        return pulumi.get(self, "placement_tenancy")

    @placement_tenancy.setter
    def placement_tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_tenancy", value)

    @property
    @pulumi.getter(name="ramDiskId")
    def ram_disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the RAM disk to select.
        """
        return pulumi.get(self, "ram_disk_id")

    @ram_disk_id.setter
    def ram_disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ram_disk_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list that contains the security groups to assign to the instances in the Auto Scaling group.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_price", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The Base64-encoded user data to make available to the launched EC2 instances.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


class LaunchConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_public_ip_address: Optional[pulumi.Input[bool]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchConfigurationBlockDeviceMappingArgs']]]]] = None,
                 classic_link_vpc_id: Optional[pulumi.Input[str]] = None,
                 classic_link_vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kernel_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 launch_configuration_name: Optional[pulumi.Input[str]] = None,
                 metadata_options: Optional[pulumi.Input[pulumi.InputType['LaunchConfigurationMetadataOptionsArgs']]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 ram_disk_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] associate_public_ip_address: For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchConfigurationBlockDeviceMappingArgs']]]] block_device_mappings: Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        :param pulumi.Input[str] classic_link_vpc_id: The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] classic_link_vpc_security_groups: The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        :param pulumi.Input[bool] ebs_optimized: Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        :param pulumi.Input[str] iam_instance_profile: Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        :param pulumi.Input[str] image_id: Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        :param pulumi.Input[str] instance_id: The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        :param pulumi.Input[bool] instance_monitoring: Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        :param pulumi.Input[str] instance_type: Specifies the instance type of the EC2 instance.
        :param pulumi.Input[str] kernel_id: Provides the ID of the kernel associated with the EC2 AMI.
        :param pulumi.Input[str] key_name: Provides the name of the EC2 key pair.
        :param pulumi.Input[str] launch_configuration_name: The name of the launch configuration. This name must be unique per Region per account.
        :param pulumi.Input[pulumi.InputType['LaunchConfigurationMetadataOptionsArgs']] metadata_options: The metadata options for the instances.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the instance, either default or dedicated.
        :param pulumi.Input[str] ram_disk_id: The ID of the RAM disk to select.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A list that contains the security groups to assign to the instances in the Auto Scaling group.
        :param pulumi.Input[str] spot_price: The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        :param pulumi.Input[str] user_data: The Base64-encoded user data to make available to the launched EC2 instances.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LaunchConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.

        :param str resource_name: The name of the resource.
        :param LaunchConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LaunchConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            LaunchConfigurationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_public_ip_address: Optional[pulumi.Input[bool]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchConfigurationBlockDeviceMappingArgs']]]]] = None,
                 classic_link_vpc_id: Optional[pulumi.Input[str]] = None,
                 classic_link_vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ebs_optimized: Optional[pulumi.Input[bool]] = None,
                 iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_monitoring: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kernel_id: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 launch_configuration_name: Optional[pulumi.Input[str]] = None,
                 metadata_options: Optional[pulumi.Input[pulumi.InputType['LaunchConfigurationMetadataOptionsArgs']]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 ram_disk_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LaunchConfigurationArgs.__new__(LaunchConfigurationArgs)

            __props__.__dict__["associate_public_ip_address"] = associate_public_ip_address
            __props__.__dict__["block_device_mappings"] = block_device_mappings
            __props__.__dict__["classic_link_vpc_id"] = classic_link_vpc_id
            __props__.__dict__["classic_link_vpc_security_groups"] = classic_link_vpc_security_groups
            __props__.__dict__["ebs_optimized"] = ebs_optimized
            __props__.__dict__["iam_instance_profile"] = iam_instance_profile
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["instance_monitoring"] = instance_monitoring
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["kernel_id"] = kernel_id
            __props__.__dict__["key_name"] = key_name
            __props__.__dict__["launch_configuration_name"] = launch_configuration_name
            if metadata_options is not None and not isinstance(metadata_options, LaunchConfigurationMetadataOptionsArgs):
                metadata_options = metadata_options or {}
                def _setter(key, value):
                    metadata_options[key] = value
                LaunchConfigurationMetadataOptionsArgs._configure(_setter, **metadata_options)
            __props__.__dict__["metadata_options"] = metadata_options
            __props__.__dict__["placement_tenancy"] = placement_tenancy
            __props__.__dict__["ram_disk_id"] = ram_disk_id
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["spot_price"] = spot_price
            __props__.__dict__["user_data"] = user_data
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["associate_public_ip_address", "block_device_mappings[*]", "classic_link_vpc_id", "classic_link_vpc_security_groups[*]", "ebs_optimized", "iam_instance_profile", "image_id", "instance_id", "instance_monitoring", "instance_type", "kernel_id", "key_name", "launch_configuration_name", "metadata_options", "placement_tenancy", "ram_disk_id", "security_groups[*]", "spot_price", "user_data"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(LaunchConfiguration, __self__).__init__(
            'aws-native:autoscaling:LaunchConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'LaunchConfiguration':
        """
        Get an existing LaunchConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LaunchConfigurationArgs.__new__(LaunchConfigurationArgs)

        __props__.__dict__["associate_public_ip_address"] = None
        __props__.__dict__["block_device_mappings"] = None
        __props__.__dict__["classic_link_vpc_id"] = None
        __props__.__dict__["classic_link_vpc_security_groups"] = None
        __props__.__dict__["ebs_optimized"] = None
        __props__.__dict__["iam_instance_profile"] = None
        __props__.__dict__["image_id"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["instance_monitoring"] = None
        __props__.__dict__["instance_type"] = None
        __props__.__dict__["kernel_id"] = None
        __props__.__dict__["key_name"] = None
        __props__.__dict__["launch_configuration_name"] = None
        __props__.__dict__["metadata_options"] = None
        __props__.__dict__["placement_tenancy"] = None
        __props__.__dict__["ram_disk_id"] = None
        __props__.__dict__["security_groups"] = None
        __props__.__dict__["spot_price"] = None
        __props__.__dict__["user_data"] = None
        return LaunchConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="associatePublicIpAddress")
    def associate_public_ip_address(self) -> pulumi.Output[Optional[bool]]:
        """
        For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        """
        return pulumi.get(self, "associate_public_ip_address")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.LaunchConfigurationBlockDeviceMapping']]]:
        """
        Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        """
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="classicLinkVpcId")
    def classic_link_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        """
        return pulumi.get(self, "classic_link_vpc_id")

    @property
    @pulumi.getter(name="classicLinkVpcSecurityGroups")
    def classic_link_vpc_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        """
        return pulumi.get(self, "classic_link_vpc_security_groups")

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        """
        return pulumi.get(self, "ebs_optimized")

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        """
        return pulumi.get(self, "iam_instance_profile")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceMonitoring")
    def instance_monitoring(self) -> pulumi.Output[Optional[bool]]:
        """
        Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        """
        return pulumi.get(self, "instance_monitoring")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        Specifies the instance type of the EC2 instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="kernelId")
    def kernel_id(self) -> pulumi.Output[Optional[str]]:
        """
        Provides the ID of the kernel associated with the EC2 AMI.
        """
        return pulumi.get(self, "kernel_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> pulumi.Output[Optional[str]]:
        """
        Provides the name of the EC2 key pair.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="launchConfigurationName")
    def launch_configuration_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the launch configuration. This name must be unique per Region per account.
        """
        return pulumi.get(self, "launch_configuration_name")

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> pulumi.Output[Optional['outputs.LaunchConfigurationMetadataOptions']]:
        """
        The metadata options for the instances.
        """
        return pulumi.get(self, "metadata_options")

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> pulumi.Output[Optional[str]]:
        """
        The tenancy of the instance, either default or dedicated.
        """
        return pulumi.get(self, "placement_tenancy")

    @property
    @pulumi.getter(name="ramDiskId")
    def ram_disk_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the RAM disk to select.
        """
        return pulumi.get(self, "ram_disk_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list that contains the security groups to assign to the instances in the Auto Scaling group.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        """
        return pulumi.get(self, "spot_price")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        The Base64-encoded user data to make available to the launched EC2 instances.
        """
        return pulumi.get(self, "user_data")

