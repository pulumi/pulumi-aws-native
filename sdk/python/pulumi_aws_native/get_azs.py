# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAzsResult',
    'AwaitableGetAzsResult',
    'get_azs',
    'get_azs_output',
]

@pulumi.output_type
class GetAzsResult:
    def __init__(__self__, azs=None):
        if azs and not isinstance(azs, list):
            raise TypeError("Expected argument 'azs' to be a list")
        pulumi.set(__self__, "azs", azs)

    @property
    @pulumi.getter
    def azs(self) -> Sequence[str]:
        return pulumi.get(self, "azs")


class AwaitableGetAzsResult(GetAzsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzsResult(
            azs=self.azs)


def get_azs(region: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:index:getAzs', __args__, opts=opts, typ=GetAzsResult).value

    return AwaitableGetAzsResult(
        azs=__ret__.azs)


@_utilities.lift_output_func(get_azs)
def get_azs_output(region: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAzsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
