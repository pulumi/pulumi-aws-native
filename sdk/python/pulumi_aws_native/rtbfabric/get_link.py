# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetLinkResult',
    'AwaitableGetLinkResult',
    'get_link',
    'get_link_output',
]

@pulumi.output_type
class GetLinkResult:
    def __init__(__self__, arn=None, created_timestamp=None, gateway_id=None, link_attributes=None, link_direction=None, link_id=None, link_log_settings=None, link_status=None, peer_gateway_id=None, tags=None, updated_timestamp=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_timestamp and not isinstance(created_timestamp, str):
            raise TypeError("Expected argument 'created_timestamp' to be a str")
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if link_attributes and not isinstance(link_attributes, dict):
            raise TypeError("Expected argument 'link_attributes' to be a dict")
        pulumi.set(__self__, "link_attributes", link_attributes)
        if link_direction and not isinstance(link_direction, str):
            raise TypeError("Expected argument 'link_direction' to be a str")
        pulumi.set(__self__, "link_direction", link_direction)
        if link_id and not isinstance(link_id, str):
            raise TypeError("Expected argument 'link_id' to be a str")
        pulumi.set(__self__, "link_id", link_id)
        if link_log_settings and not isinstance(link_log_settings, dict):
            raise TypeError("Expected argument 'link_log_settings' to be a dict")
        pulumi.set(__self__, "link_log_settings", link_log_settings)
        if link_status and not isinstance(link_status, str):
            raise TypeError("Expected argument 'link_status' to be a str")
        pulumi.set(__self__, "link_status", link_status)
        if peer_gateway_id and not isinstance(peer_gateway_id, str):
            raise TypeError("Expected argument 'peer_gateway_id' to be a str")
        pulumi.set(__self__, "peer_gateway_id", peer_gateway_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_timestamp and not isinstance(updated_timestamp, str):
            raise TypeError("Expected argument 'updated_timestamp' to be a str")
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "created_timestamp")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="linkAttributes")
    def link_attributes(self) -> Optional['outputs.LinkAttributes']:
        return pulumi.get(self, "link_attributes")

    @_builtins.property
    @pulumi.getter(name="linkDirection")
    def link_direction(self) -> Optional['LinkDirection']:
        return pulumi.get(self, "link_direction")

    @_builtins.property
    @pulumi.getter(name="linkId")
    def link_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "link_id")

    @_builtins.property
    @pulumi.getter(name="linkLogSettings")
    def link_log_settings(self) -> Optional['outputs.LinkLogSettings']:
        return pulumi.get(self, "link_log_settings")

    @_builtins.property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> Optional['LinkStatus']:
        return pulumi.get(self, "link_status")

    @_builtins.property
    @pulumi.getter(name="peerGatewayId")
    def peer_gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "peer_gateway_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "updated_timestamp")


class AwaitableGetLinkResult(GetLinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLinkResult(
            arn=self.arn,
            created_timestamp=self.created_timestamp,
            gateway_id=self.gateway_id,
            link_attributes=self.link_attributes,
            link_direction=self.link_direction,
            link_id=self.link_id,
            link_log_settings=self.link_log_settings,
            link_status=self.link_status,
            peer_gateway_id=self.peer_gateway_id,
            tags=self.tags,
            updated_timestamp=self.updated_timestamp)


def get_link(arn: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLinkResult:
    """
    Resource Type definition for AWS::RTBFabric::Link Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:rtbfabric:getLink', __args__, opts=opts, typ=GetLinkResult).value

    return AwaitableGetLinkResult(
        arn=pulumi.get(__ret__, 'arn'),
        created_timestamp=pulumi.get(__ret__, 'created_timestamp'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        link_attributes=pulumi.get(__ret__, 'link_attributes'),
        link_direction=pulumi.get(__ret__, 'link_direction'),
        link_id=pulumi.get(__ret__, 'link_id'),
        link_log_settings=pulumi.get(__ret__, 'link_log_settings'),
        link_status=pulumi.get(__ret__, 'link_status'),
        peer_gateway_id=pulumi.get(__ret__, 'peer_gateway_id'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_timestamp=pulumi.get(__ret__, 'updated_timestamp'))
def get_link_output(arn: Optional[pulumi.Input[_builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLinkResult]:
    """
    Resource Type definition for AWS::RTBFabric::Link Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:rtbfabric:getLink', __args__, opts=opts, typ=GetLinkResult)
    return __ret__.apply(lambda __response__: GetLinkResult(
        arn=pulumi.get(__response__, 'arn'),
        created_timestamp=pulumi.get(__response__, 'created_timestamp'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        link_attributes=pulumi.get(__response__, 'link_attributes'),
        link_direction=pulumi.get(__response__, 'link_direction'),
        link_id=pulumi.get(__response__, 'link_id'),
        link_log_settings=pulumi.get(__response__, 'link_log_settings'),
        link_status=pulumi.get(__response__, 'link_status'),
        peer_gateway_id=pulumi.get(__response__, 'peer_gateway_id'),
        tags=pulumi.get(__response__, 'tags'),
        updated_timestamp=pulumi.get(__response__, 'updated_timestamp')))
