# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetRequesterGatewayResult',
    'AwaitableGetRequesterGatewayResult',
    'get_requester_gateway',
    'get_requester_gateway_output',
]

@pulumi.output_type
class GetRequesterGatewayResult:
    def __init__(__self__, active_links_count=None, arn=None, created_timestamp=None, description=None, domain_name=None, gateway_id=None, requester_gateway_status=None, security_group_ids=None, subnet_ids=None, tags=None, total_links_count=None, updated_timestamp=None, vpc_id=None):
        if active_links_count and not isinstance(active_links_count, int):
            raise TypeError("Expected argument 'active_links_count' to be a int")
        pulumi.set(__self__, "active_links_count", active_links_count)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_timestamp and not isinstance(created_timestamp, str):
            raise TypeError("Expected argument 'created_timestamp' to be a str")
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if requester_gateway_status and not isinstance(requester_gateway_status, str):
            raise TypeError("Expected argument 'requester_gateway_status' to be a str")
        pulumi.set(__self__, "requester_gateway_status", requester_gateway_status)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids and not isinstance(subnet_ids, list):
            raise TypeError("Expected argument 'subnet_ids' to be a list")
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_links_count and not isinstance(total_links_count, int):
            raise TypeError("Expected argument 'total_links_count' to be a int")
        pulumi.set(__self__, "total_links_count", total_links_count)
        if updated_timestamp and not isinstance(updated_timestamp, str):
            raise TypeError("Expected argument 'updated_timestamp' to be a str")
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="activeLinksCount")
    def active_links_count(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "active_links_count")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "created_timestamp")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="requesterGatewayStatus")
    def requester_gateway_status(self) -> Optional['RequesterGatewayStatus']:
        return pulumi.get(self, "requester_gateway_status")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalLinksCount")
    def total_links_count(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "total_links_count")

    @_builtins.property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "updated_timestamp")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetRequesterGatewayResult(GetRequesterGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRequesterGatewayResult(
            active_links_count=self.active_links_count,
            arn=self.arn,
            created_timestamp=self.created_timestamp,
            description=self.description,
            domain_name=self.domain_name,
            gateway_id=self.gateway_id,
            requester_gateway_status=self.requester_gateway_status,
            security_group_ids=self.security_group_ids,
            subnet_ids=self.subnet_ids,
            tags=self.tags,
            total_links_count=self.total_links_count,
            updated_timestamp=self.updated_timestamp,
            vpc_id=self.vpc_id)


def get_requester_gateway(arn: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRequesterGatewayResult:
    """
    Resource Type definition for AWS::RTBFabric::RequesterGateway Resource Type.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:rtbfabric:getRequesterGateway', __args__, opts=opts, typ=GetRequesterGatewayResult).value

    return AwaitableGetRequesterGatewayResult(
        active_links_count=pulumi.get(__ret__, 'active_links_count'),
        arn=pulumi.get(__ret__, 'arn'),
        created_timestamp=pulumi.get(__ret__, 'created_timestamp'),
        description=pulumi.get(__ret__, 'description'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        requester_gateway_status=pulumi.get(__ret__, 'requester_gateway_status'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        subnet_ids=pulumi.get(__ret__, 'subnet_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        total_links_count=pulumi.get(__ret__, 'total_links_count'),
        updated_timestamp=pulumi.get(__ret__, 'updated_timestamp'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_requester_gateway_output(arn: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRequesterGatewayResult]:
    """
    Resource Type definition for AWS::RTBFabric::RequesterGateway Resource Type.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:rtbfabric:getRequesterGateway', __args__, opts=opts, typ=GetRequesterGatewayResult)
    return __ret__.apply(lambda __response__: GetRequesterGatewayResult(
        active_links_count=pulumi.get(__response__, 'active_links_count'),
        arn=pulumi.get(__response__, 'arn'),
        created_timestamp=pulumi.get(__response__, 'created_timestamp'),
        description=pulumi.get(__response__, 'description'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        requester_gateway_status=pulumi.get(__response__, 'requester_gateway_status'),
        security_group_ids=pulumi.get(__response__, 'security_group_ids'),
        subnet_ids=pulumi.get(__response__, 'subnet_ids'),
        tags=pulumi.get(__response__, 'tags'),
        total_links_count=pulumi.get(__response__, 'total_links_count'),
        updated_timestamp=pulumi.get(__response__, 'updated_timestamp'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
