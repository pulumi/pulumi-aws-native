# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['LinkArgs', 'Link']

@pulumi.input_type
class LinkArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[_builtins.str],
                 link_log_settings: pulumi.Input['LinkLogSettingsArgs'],
                 peer_gateway_id: pulumi.Input[_builtins.str],
                 http_responder_allowed: Optional[pulumi.Input[_builtins.bool]] = None,
                 link_attributes: Optional[pulumi.Input['LinkAttributesArgs']] = None,
                 module_configuration_list: Optional[pulumi.Input[Sequence[pulumi.Input['LinkModuleConfigurationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a Link resource.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "link_log_settings", link_log_settings)
        pulumi.set(__self__, "peer_gateway_id", peer_gateway_id)
        if http_responder_allowed is not None:
            pulumi.set(__self__, "http_responder_allowed", http_responder_allowed)
        if link_attributes is not None:
            pulumi.set(__self__, "link_attributes", link_attributes)
        if module_configuration_list is not None:
            pulumi.set(__self__, "module_configuration_list", module_configuration_list)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="linkLogSettings")
    def link_log_settings(self) -> pulumi.Input['LinkLogSettingsArgs']:
        return pulumi.get(self, "link_log_settings")

    @link_log_settings.setter
    def link_log_settings(self, value: pulumi.Input['LinkLogSettingsArgs']):
        pulumi.set(self, "link_log_settings", value)

    @_builtins.property
    @pulumi.getter(name="peerGatewayId")
    def peer_gateway_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "peer_gateway_id")

    @peer_gateway_id.setter
    def peer_gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "peer_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="httpResponderAllowed")
    def http_responder_allowed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "http_responder_allowed")

    @http_responder_allowed.setter
    def http_responder_allowed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "http_responder_allowed", value)

    @_builtins.property
    @pulumi.getter(name="linkAttributes")
    def link_attributes(self) -> Optional[pulumi.Input['LinkAttributesArgs']]:
        return pulumi.get(self, "link_attributes")

    @link_attributes.setter
    def link_attributes(self, value: Optional[pulumi.Input['LinkAttributesArgs']]):
        pulumi.set(self, "link_attributes", value)

    @_builtins.property
    @pulumi.getter(name="moduleConfigurationList")
    def module_configuration_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkModuleConfigurationArgs']]]]:
        return pulumi.get(self, "module_configuration_list")

    @module_configuration_list.setter
    def module_configuration_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkModuleConfigurationArgs']]]]):
        pulumi.set(self, "module_configuration_list", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:rtbfabric:Link")
class Link(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 http_responder_allowed: Optional[pulumi.Input[_builtins.bool]] = None,
                 link_attributes: Optional[pulumi.Input[Union['LinkAttributesArgs', 'LinkAttributesArgsDict']]] = None,
                 link_log_settings: Optional[pulumi.Input[Union['LinkLogSettingsArgs', 'LinkLogSettingsArgsDict']]] = None,
                 module_configuration_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LinkModuleConfigurationArgs', 'LinkModuleConfigurationArgsDict']]]]] = None,
                 peer_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::RTBFabric::Link Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::RTBFabric::Link Resource Type

        :param str resource_name: The name of the resource.
        :param LinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 http_responder_allowed: Optional[pulumi.Input[_builtins.bool]] = None,
                 link_attributes: Optional[pulumi.Input[Union['LinkAttributesArgs', 'LinkAttributesArgsDict']]] = None,
                 link_log_settings: Optional[pulumi.Input[Union['LinkLogSettingsArgs', 'LinkLogSettingsArgsDict']]] = None,
                 module_configuration_list: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LinkModuleConfigurationArgs', 'LinkModuleConfigurationArgsDict']]]]] = None,
                 peer_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LinkArgs.__new__(LinkArgs)

            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["http_responder_allowed"] = http_responder_allowed
            __props__.__dict__["link_attributes"] = link_attributes
            if link_log_settings is None and not opts.urn:
                raise TypeError("Missing required property 'link_log_settings'")
            __props__.__dict__["link_log_settings"] = link_log_settings
            __props__.__dict__["module_configuration_list"] = module_configuration_list
            if peer_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'peer_gateway_id'")
            __props__.__dict__["peer_gateway_id"] = peer_gateway_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["created_timestamp"] = None
            __props__.__dict__["link_direction"] = None
            __props__.__dict__["link_id"] = None
            __props__.__dict__["link_status"] = None
            __props__.__dict__["updated_timestamp"] = None
        super(Link, __self__).__init__(
            'aws-native:rtbfabric:Link',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Link':
        """
        Get an existing Link resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LinkArgs.__new__(LinkArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["created_timestamp"] = None
        __props__.__dict__["gateway_id"] = None
        __props__.__dict__["http_responder_allowed"] = None
        __props__.__dict__["link_attributes"] = None
        __props__.__dict__["link_direction"] = None
        __props__.__dict__["link_id"] = None
        __props__.__dict__["link_log_settings"] = None
        __props__.__dict__["link_status"] = None
        __props__.__dict__["module_configuration_list"] = None
        __props__.__dict__["peer_gateway_id"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_timestamp"] = None
        return Link(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_timestamp")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="httpResponderAllowed")
    def http_responder_allowed(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "http_responder_allowed")

    @_builtins.property
    @pulumi.getter(name="linkAttributes")
    def link_attributes(self) -> pulumi.Output[Optional['outputs.LinkAttributes']]:
        return pulumi.get(self, "link_attributes")

    @_builtins.property
    @pulumi.getter(name="linkDirection")
    def link_direction(self) -> pulumi.Output['LinkDirection']:
        return pulumi.get(self, "link_direction")

    @_builtins.property
    @pulumi.getter(name="linkId")
    def link_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "link_id")

    @_builtins.property
    @pulumi.getter(name="linkLogSettings")
    def link_log_settings(self) -> pulumi.Output['outputs.LinkLogSettings']:
        return pulumi.get(self, "link_log_settings")

    @_builtins.property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> pulumi.Output['LinkStatus']:
        return pulumi.get(self, "link_status")

    @_builtins.property
    @pulumi.getter(name="moduleConfigurationList")
    def module_configuration_list(self) -> pulumi.Output[Optional[Sequence['outputs.LinkModuleConfiguration']]]:
        return pulumi.get(self, "module_configuration_list")

    @_builtins.property
    @pulumi.getter(name="peerGatewayId")
    def peer_gateway_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "peer_gateway_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "updated_timestamp")

