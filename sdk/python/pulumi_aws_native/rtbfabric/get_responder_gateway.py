# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetResponderGatewayResult',
    'AwaitableGetResponderGatewayResult',
    'get_responder_gateway',
    'get_responder_gateway_output',
]

@pulumi.output_type
class GetResponderGatewayResult:
    def __init__(__self__, arn=None, created_timestamp=None, description=None, domain_name=None, gateway_id=None, managed_endpoint_configuration=None, port=None, protocol=None, responder_gateway_status=None, security_group_ids=None, subnet_ids=None, tags=None, trust_store_configuration=None, updated_timestamp=None, vpc_id=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_timestamp and not isinstance(created_timestamp, str):
            raise TypeError("Expected argument 'created_timestamp' to be a str")
        pulumi.set(__self__, "created_timestamp", created_timestamp)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if managed_endpoint_configuration and not isinstance(managed_endpoint_configuration, dict):
            raise TypeError("Expected argument 'managed_endpoint_configuration' to be a dict")
        pulumi.set(__self__, "managed_endpoint_configuration", managed_endpoint_configuration)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if responder_gateway_status and not isinstance(responder_gateway_status, str):
            raise TypeError("Expected argument 'responder_gateway_status' to be a str")
        pulumi.set(__self__, "responder_gateway_status", responder_gateway_status)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids and not isinstance(subnet_ids, list):
            raise TypeError("Expected argument 'subnet_ids' to be a list")
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if trust_store_configuration and not isinstance(trust_store_configuration, dict):
            raise TypeError("Expected argument 'trust_store_configuration' to be a dict")
        pulumi.set(__self__, "trust_store_configuration", trust_store_configuration)
        if updated_timestamp and not isinstance(updated_timestamp, str):
            raise TypeError("Expected argument 'updated_timestamp' to be a str")
        pulumi.set(__self__, "updated_timestamp", updated_timestamp)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="createdTimestamp")
    def created_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "created_timestamp")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="managedEndpointConfiguration")
    def managed_endpoint_configuration(self) -> Optional['outputs.ResponderGatewayManagedEndpointConfiguration']:
        return pulumi.get(self, "managed_endpoint_configuration")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional['ResponderGatewayProtocol']:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="responderGatewayStatus")
    def responder_gateway_status(self) -> Optional['ResponderGatewayStatus']:
        return pulumi.get(self, "responder_gateway_status")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="trustStoreConfiguration")
    def trust_store_configuration(self) -> Optional['outputs.ResponderGatewayTrustStoreConfiguration']:
        return pulumi.get(self, "trust_store_configuration")

    @_builtins.property
    @pulumi.getter(name="updatedTimestamp")
    def updated_timestamp(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "updated_timestamp")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetResponderGatewayResult(GetResponderGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResponderGatewayResult(
            arn=self.arn,
            created_timestamp=self.created_timestamp,
            description=self.description,
            domain_name=self.domain_name,
            gateway_id=self.gateway_id,
            managed_endpoint_configuration=self.managed_endpoint_configuration,
            port=self.port,
            protocol=self.protocol,
            responder_gateway_status=self.responder_gateway_status,
            security_group_ids=self.security_group_ids,
            subnet_ids=self.subnet_ids,
            tags=self.tags,
            trust_store_configuration=self.trust_store_configuration,
            updated_timestamp=self.updated_timestamp,
            vpc_id=self.vpc_id)


def get_responder_gateway(arn: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResponderGatewayResult:
    """
    Resource Type definition for AWS::RTBFabric::ResponderGateway Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:rtbfabric:getResponderGateway', __args__, opts=opts, typ=GetResponderGatewayResult).value

    return AwaitableGetResponderGatewayResult(
        arn=pulumi.get(__ret__, 'arn'),
        created_timestamp=pulumi.get(__ret__, 'created_timestamp'),
        description=pulumi.get(__ret__, 'description'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        managed_endpoint_configuration=pulumi.get(__ret__, 'managed_endpoint_configuration'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        responder_gateway_status=pulumi.get(__ret__, 'responder_gateway_status'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        subnet_ids=pulumi.get(__ret__, 'subnet_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        trust_store_configuration=pulumi.get(__ret__, 'trust_store_configuration'),
        updated_timestamp=pulumi.get(__ret__, 'updated_timestamp'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_responder_gateway_output(arn: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResponderGatewayResult]:
    """
    Resource Type definition for AWS::RTBFabric::ResponderGateway Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:rtbfabric:getResponderGateway', __args__, opts=opts, typ=GetResponderGatewayResult)
    return __ret__.apply(lambda __response__: GetResponderGatewayResult(
        arn=pulumi.get(__response__, 'arn'),
        created_timestamp=pulumi.get(__response__, 'created_timestamp'),
        description=pulumi.get(__response__, 'description'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        managed_endpoint_configuration=pulumi.get(__response__, 'managed_endpoint_configuration'),
        port=pulumi.get(__response__, 'port'),
        protocol=pulumi.get(__response__, 'protocol'),
        responder_gateway_status=pulumi.get(__response__, 'responder_gateway_status'),
        security_group_ids=pulumi.get(__response__, 'security_group_ids'),
        subnet_ids=pulumi.get(__response__, 'subnet_ids'),
        tags=pulumi.get(__response__, 'tags'),
        trust_store_configuration=pulumi.get(__response__, 'trust_store_configuration'),
        updated_timestamp=pulumi.get(__response__, 'updated_timestamp'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
