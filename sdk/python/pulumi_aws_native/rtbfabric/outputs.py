# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'LinkAttributes',
    'LinkLogSettings',
    'LinkLogSettingsApplicationLogsProperties',
    'LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties',
    'LinkResponderErrorMaskingForHttpCode',
    'ResponderGatewayManagedEndpointConfiguration',
    'ResponderGatewayTrustStoreConfiguration',
]

@pulumi.output_type
class LinkAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerProvidedId":
            suggest = "customer_provided_id"
        elif key == "responderErrorMasking":
            suggest = "responder_error_masking"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_provided_id: Optional[_builtins.str] = None,
                 responder_error_masking: Optional[Sequence['outputs.LinkResponderErrorMaskingForHttpCode']] = None):
        if customer_provided_id is not None:
            pulumi.set(__self__, "customer_provided_id", customer_provided_id)
        if responder_error_masking is not None:
            pulumi.set(__self__, "responder_error_masking", responder_error_masking)

    @_builtins.property
    @pulumi.getter(name="customerProvidedId")
    def customer_provided_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "customer_provided_id")

    @_builtins.property
    @pulumi.getter(name="responderErrorMasking")
    def responder_error_masking(self) -> Optional[Sequence['outputs.LinkResponderErrorMaskingForHttpCode']]:
        return pulumi.get(self, "responder_error_masking")


@pulumi.output_type
class LinkLogSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationLogs":
            suggest = "application_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkLogSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkLogSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkLogSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_logs: 'outputs.LinkLogSettingsApplicationLogsProperties'):
        pulumi.set(__self__, "application_logs", application_logs)

    @_builtins.property
    @pulumi.getter(name="applicationLogs")
    def application_logs(self) -> 'outputs.LinkLogSettingsApplicationLogsProperties':
        return pulumi.get(self, "application_logs")


@pulumi.output_type
class LinkLogSettingsApplicationLogsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkApplicationLogSampling":
            suggest = "link_application_log_sampling"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkLogSettingsApplicationLogsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkLogSettingsApplicationLogsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkLogSettingsApplicationLogsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_application_log_sampling: 'outputs.LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties'):
        pulumi.set(__self__, "link_application_log_sampling", link_application_log_sampling)

    @_builtins.property
    @pulumi.getter(name="linkApplicationLogSampling")
    def link_application_log_sampling(self) -> 'outputs.LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties':
        return pulumi.get(self, "link_application_log_sampling")


@pulumi.output_type
class LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorLog":
            suggest = "error_log"
        elif key == "filterLog":
            suggest = "filter_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_log: _builtins.float,
                 filter_log: _builtins.float):
        pulumi.set(__self__, "error_log", error_log)
        pulumi.set(__self__, "filter_log", filter_log)

    @_builtins.property
    @pulumi.getter(name="errorLog")
    def error_log(self) -> _builtins.float:
        return pulumi.get(self, "error_log")

    @_builtins.property
    @pulumi.getter(name="filterLog")
    def filter_log(self) -> _builtins.float:
        return pulumi.get(self, "filter_log")


@pulumi.output_type
class LinkResponderErrorMaskingForHttpCode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCode":
            suggest = "http_code"
        elif key == "loggingTypes":
            suggest = "logging_types"
        elif key == "responseLoggingPercentage":
            suggest = "response_logging_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LinkResponderErrorMaskingForHttpCode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LinkResponderErrorMaskingForHttpCode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LinkResponderErrorMaskingForHttpCode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'LinkResponderErrorMaskingForHttpCodeAction',
                 http_code: _builtins.str,
                 logging_types: Sequence['LinkResponderErrorMaskingLoggingType'],
                 response_logging_percentage: Optional[_builtins.float] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "http_code", http_code)
        pulumi.set(__self__, "logging_types", logging_types)
        if response_logging_percentage is not None:
            pulumi.set(__self__, "response_logging_percentage", response_logging_percentage)

    @_builtins.property
    @pulumi.getter
    def action(self) -> 'LinkResponderErrorMaskingForHttpCodeAction':
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> _builtins.str:
        return pulumi.get(self, "http_code")

    @_builtins.property
    @pulumi.getter(name="loggingTypes")
    def logging_types(self) -> Sequence['LinkResponderErrorMaskingLoggingType']:
        return pulumi.get(self, "logging_types")

    @_builtins.property
    @pulumi.getter(name="responseLoggingPercentage")
    def response_logging_percentage(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "response_logging_percentage")


@pulumi.output_type
class ResponderGatewayManagedEndpointConfiguration(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ResponderGatewayTrustStoreConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityCertificates":
            suggest = "certificate_authority_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponderGatewayTrustStoreConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponderGatewayTrustStoreConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponderGatewayTrustStoreConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_certificates: Sequence[_builtins.str]):
        pulumi.set(__self__, "certificate_authority_certificates", certificate_authority_certificates)

    @_builtins.property
    @pulumi.getter(name="certificateAuthorityCertificates")
    def certificate_authority_certificates(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "certificate_authority_certificates")


