# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'LinkAttributesArgs',
    'LinkAttributesArgsDict',
    'LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgs',
    'LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgsDict',
    'LinkLogSettingsApplicationLogsPropertiesArgs',
    'LinkLogSettingsApplicationLogsPropertiesArgsDict',
    'LinkLogSettingsArgs',
    'LinkLogSettingsArgsDict',
    'LinkResponderErrorMaskingForHttpCodeArgs',
    'LinkResponderErrorMaskingForHttpCodeArgsDict',
    'ResponderGatewayManagedEndpointConfigurationArgs',
    'ResponderGatewayManagedEndpointConfigurationArgsDict',
    'ResponderGatewayTrustStoreConfigurationArgs',
    'ResponderGatewayTrustStoreConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class LinkAttributesArgsDict(TypedDict):
        customer_provided_id: NotRequired[pulumi.Input[_builtins.str]]
        responder_error_masking: NotRequired[pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingForHttpCodeArgsDict']]]]
elif False:
    LinkAttributesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkAttributesArgs:
    def __init__(__self__, *,
                 customer_provided_id: Optional[pulumi.Input[_builtins.str]] = None,
                 responder_error_masking: Optional[pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingForHttpCodeArgs']]]] = None):
        if customer_provided_id is not None:
            pulumi.set(__self__, "customer_provided_id", customer_provided_id)
        if responder_error_masking is not None:
            pulumi.set(__self__, "responder_error_masking", responder_error_masking)

    @_builtins.property
    @pulumi.getter(name="customerProvidedId")
    def customer_provided_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "customer_provided_id")

    @customer_provided_id.setter
    def customer_provided_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_provided_id", value)

    @_builtins.property
    @pulumi.getter(name="responderErrorMasking")
    def responder_error_masking(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingForHttpCodeArgs']]]]:
        return pulumi.get(self, "responder_error_masking")

    @responder_error_masking.setter
    def responder_error_masking(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingForHttpCodeArgs']]]]):
        pulumi.set(self, "responder_error_masking", value)


if not MYPY:
    class LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgsDict(TypedDict):
        error_log: pulumi.Input[_builtins.float]
        filter_log: pulumi.Input[_builtins.float]
elif False:
    LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgs:
    def __init__(__self__, *,
                 error_log: pulumi.Input[_builtins.float],
                 filter_log: pulumi.Input[_builtins.float]):
        pulumi.set(__self__, "error_log", error_log)
        pulumi.set(__self__, "filter_log", filter_log)

    @_builtins.property
    @pulumi.getter(name="errorLog")
    def error_log(self) -> pulumi.Input[_builtins.float]:
        return pulumi.get(self, "error_log")

    @error_log.setter
    def error_log(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "error_log", value)

    @_builtins.property
    @pulumi.getter(name="filterLog")
    def filter_log(self) -> pulumi.Input[_builtins.float]:
        return pulumi.get(self, "filter_log")

    @filter_log.setter
    def filter_log(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "filter_log", value)


if not MYPY:
    class LinkLogSettingsApplicationLogsPropertiesArgsDict(TypedDict):
        link_application_log_sampling: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgsDict']
elif False:
    LinkLogSettingsApplicationLogsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkLogSettingsApplicationLogsPropertiesArgs:
    def __init__(__self__, *,
                 link_application_log_sampling: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgs']):
        pulumi.set(__self__, "link_application_log_sampling", link_application_log_sampling)

    @_builtins.property
    @pulumi.getter(name="linkApplicationLogSampling")
    def link_application_log_sampling(self) -> pulumi.Input['LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgs']:
        return pulumi.get(self, "link_application_log_sampling")

    @link_application_log_sampling.setter
    def link_application_log_sampling(self, value: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesLinkApplicationLogSamplingPropertiesArgs']):
        pulumi.set(self, "link_application_log_sampling", value)


if not MYPY:
    class LinkLogSettingsArgsDict(TypedDict):
        application_logs: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesArgsDict']
elif False:
    LinkLogSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkLogSettingsArgs:
    def __init__(__self__, *,
                 application_logs: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesArgs']):
        pulumi.set(__self__, "application_logs", application_logs)

    @_builtins.property
    @pulumi.getter(name="applicationLogs")
    def application_logs(self) -> pulumi.Input['LinkLogSettingsApplicationLogsPropertiesArgs']:
        return pulumi.get(self, "application_logs")

    @application_logs.setter
    def application_logs(self, value: pulumi.Input['LinkLogSettingsApplicationLogsPropertiesArgs']):
        pulumi.set(self, "application_logs", value)


if not MYPY:
    class LinkResponderErrorMaskingForHttpCodeArgsDict(TypedDict):
        action: pulumi.Input['LinkResponderErrorMaskingForHttpCodeAction']
        http_code: pulumi.Input[_builtins.str]
        logging_types: pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingLoggingType']]]
        response_logging_percentage: NotRequired[pulumi.Input[_builtins.float]]
elif False:
    LinkResponderErrorMaskingForHttpCodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkResponderErrorMaskingForHttpCodeArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['LinkResponderErrorMaskingForHttpCodeAction'],
                 http_code: pulumi.Input[_builtins.str],
                 logging_types: pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingLoggingType']]],
                 response_logging_percentage: Optional[pulumi.Input[_builtins.float]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "http_code", http_code)
        pulumi.set(__self__, "logging_types", logging_types)
        if response_logging_percentage is not None:
            pulumi.set(__self__, "response_logging_percentage", response_logging_percentage)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input['LinkResponderErrorMaskingForHttpCodeAction']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['LinkResponderErrorMaskingForHttpCodeAction']):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "http_code")

    @http_code.setter
    def http_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "http_code", value)

    @_builtins.property
    @pulumi.getter(name="loggingTypes")
    def logging_types(self) -> pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingLoggingType']]]:
        return pulumi.get(self, "logging_types")

    @logging_types.setter
    def logging_types(self, value: pulumi.Input[Sequence[pulumi.Input['LinkResponderErrorMaskingLoggingType']]]):
        pulumi.set(self, "logging_types", value)

    @_builtins.property
    @pulumi.getter(name="responseLoggingPercentage")
    def response_logging_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "response_logging_percentage")

    @response_logging_percentage.setter
    def response_logging_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "response_logging_percentage", value)


if not MYPY:
    class ResponderGatewayManagedEndpointConfigurationArgsDict(TypedDict):
        pass
elif False:
    ResponderGatewayManagedEndpointConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResponderGatewayManagedEndpointConfigurationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class ResponderGatewayTrustStoreConfigurationArgsDict(TypedDict):
        certificate_authority_certificates: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ResponderGatewayTrustStoreConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ResponderGatewayTrustStoreConfigurationArgs:
    def __init__(__self__, *,
                 certificate_authority_certificates: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "certificate_authority_certificates", certificate_authority_certificates)

    @_builtins.property
    @pulumi.getter(name="certificateAuthorityCertificates")
    def certificate_authority_certificates(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "certificate_authority_certificates")

    @certificate_authority_certificates.setter
    def certificate_authority_certificates(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "certificate_authority_certificates", value)


