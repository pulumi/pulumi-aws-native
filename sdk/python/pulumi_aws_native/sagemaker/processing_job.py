# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['ProcessingJobArgs', 'ProcessingJob']

@pulumi.input_type
class ProcessingJobArgs:
    def __init__(__self__, *,
                 app_specification: pulumi.Input['ProcessingJobAppSpecificationArgs'],
                 processing_resources: pulumi.Input['ProcessingJobProcessingResourcesArgs'],
                 role_arn: pulumi.Input[builtins.str],
                 environment: Optional[pulumi.Input['ProcessingJobEnvironmentArgs']] = None,
                 experiment_config: Optional[pulumi.Input['ProcessingJobExperimentConfigArgs']] = None,
                 network_config: Optional[pulumi.Input['ProcessingJobNetworkConfigArgs']] = None,
                 processing_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessingJobProcessingInputsObjectArgs']]]] = None,
                 processing_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 processing_output_config: Optional[pulumi.Input['ProcessingJobProcessingOutputConfigArgs']] = None,
                 stopping_condition: Optional[pulumi.Input['ProcessingJobStoppingConditionArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.CreateOnlyTagArgs']]]] = None):
        """
        The set of arguments for constructing a ProcessingJob resource.
        :param pulumi.Input['ProcessingJobAppSpecificationArgs'] app_specification: Configuration to run a processing job in a specified container image.
        :param pulumi.Input['ProcessingJobProcessingResourcesArgs'] processing_resources: Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        :param pulumi.Input[builtins.str] role_arn: The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        :param pulumi.Input['ProcessingJobEnvironmentArgs'] environment: Sets the environment variables in the Docker container.
        :param pulumi.Input['ProcessingJobExperimentConfigArgs'] experiment_config: Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html) API.
        :param pulumi.Input['ProcessingJobNetworkConfigArgs'] network_config: Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[Sequence[pulumi.Input['ProcessingJobProcessingInputsObjectArgs']]] processing_inputs: An array of inputs configuring the data to download into the processing container.
        :param pulumi.Input[builtins.str] processing_job_name: The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        :param pulumi.Input['ProcessingJobProcessingOutputConfigArgs'] processing_output_config: Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
        :param pulumi.Input['ProcessingJobStoppingConditionArgs'] stopping_condition: Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.CreateOnlyTagArgs']]] tags: (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
        """
        pulumi.set(__self__, "app_specification", app_specification)
        pulumi.set(__self__, "processing_resources", processing_resources)
        pulumi.set(__self__, "role_arn", role_arn)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if experiment_config is not None:
            pulumi.set(__self__, "experiment_config", experiment_config)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if processing_inputs is not None:
            pulumi.set(__self__, "processing_inputs", processing_inputs)
        if processing_job_name is not None:
            pulumi.set(__self__, "processing_job_name", processing_job_name)
        if processing_output_config is not None:
            pulumi.set(__self__, "processing_output_config", processing_output_config)
        if stopping_condition is not None:
            pulumi.set(__self__, "stopping_condition", stopping_condition)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appSpecification")
    def app_specification(self) -> pulumi.Input['ProcessingJobAppSpecificationArgs']:
        """
        Configuration to run a processing job in a specified container image.
        """
        return pulumi.get(self, "app_specification")

    @app_specification.setter
    def app_specification(self, value: pulumi.Input['ProcessingJobAppSpecificationArgs']):
        pulumi.set(self, "app_specification", value)

    @property
    @pulumi.getter(name="processingResources")
    def processing_resources(self) -> pulumi.Input['ProcessingJobProcessingResourcesArgs']:
        """
        Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        """
        return pulumi.get(self, "processing_resources")

    @processing_resources.setter
    def processing_resources(self, value: pulumi.Input['ProcessingJobProcessingResourcesArgs']):
        pulumi.set(self, "processing_resources", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['ProcessingJobEnvironmentArgs']]:
        """
        Sets the environment variables in the Docker container.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['ProcessingJobEnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="experimentConfig")
    def experiment_config(self) -> Optional[pulumi.Input['ProcessingJobExperimentConfigArgs']]:
        """
        Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html) API.
        """
        return pulumi.get(self, "experiment_config")

    @experiment_config.setter
    def experiment_config(self, value: Optional[pulumi.Input['ProcessingJobExperimentConfigArgs']]):
        pulumi.set(self, "experiment_config", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['ProcessingJobNetworkConfigArgs']]:
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['ProcessingJobNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter(name="processingInputs")
    def processing_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessingJobProcessingInputsObjectArgs']]]]:
        """
        An array of inputs configuring the data to download into the processing container.
        """
        return pulumi.get(self, "processing_inputs")

    @processing_inputs.setter
    def processing_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessingJobProcessingInputsObjectArgs']]]]):
        pulumi.set(self, "processing_inputs", value)

    @property
    @pulumi.getter(name="processingJobName")
    def processing_job_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        """
        return pulumi.get(self, "processing_job_name")

    @processing_job_name.setter
    def processing_job_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "processing_job_name", value)

    @property
    @pulumi.getter(name="processingOutputConfig")
    def processing_output_config(self) -> Optional[pulumi.Input['ProcessingJobProcessingOutputConfigArgs']]:
        """
        Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
        """
        return pulumi.get(self, "processing_output_config")

    @processing_output_config.setter
    def processing_output_config(self, value: Optional[pulumi.Input['ProcessingJobProcessingOutputConfigArgs']]):
        pulumi.set(self, "processing_output_config", value)

    @property
    @pulumi.getter(name="stoppingCondition")
    def stopping_condition(self) -> Optional[pulumi.Input['ProcessingJobStoppingConditionArgs']]:
        """
        Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        """
        return pulumi.get(self, "stopping_condition")

    @stopping_condition.setter
    def stopping_condition(self, value: Optional[pulumi.Input['ProcessingJobStoppingConditionArgs']]):
        pulumi.set(self, "stopping_condition", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.CreateOnlyTagArgs']]]]:
        """
        (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.CreateOnlyTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:sagemaker:ProcessingJob")
class ProcessingJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_specification: Optional[pulumi.Input[Union['ProcessingJobAppSpecificationArgs', 'ProcessingJobAppSpecificationArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Union['ProcessingJobEnvironmentArgs', 'ProcessingJobEnvironmentArgsDict']]] = None,
                 experiment_config: Optional[pulumi.Input[Union['ProcessingJobExperimentConfigArgs', 'ProcessingJobExperimentConfigArgsDict']]] = None,
                 network_config: Optional[pulumi.Input[Union['ProcessingJobNetworkConfigArgs', 'ProcessingJobNetworkConfigArgsDict']]] = None,
                 processing_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProcessingJobProcessingInputsObjectArgs', 'ProcessingJobProcessingInputsObjectArgsDict']]]]] = None,
                 processing_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 processing_output_config: Optional[pulumi.Input[Union['ProcessingJobProcessingOutputConfigArgs', 'ProcessingJobProcessingOutputConfigArgsDict']]] = None,
                 processing_resources: Optional[pulumi.Input[Union['ProcessingJobProcessingResourcesArgs', 'ProcessingJobProcessingResourcesArgsDict']]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 stopping_condition: Optional[pulumi.Input[Union['ProcessingJobStoppingConditionArgs', 'ProcessingJobStoppingConditionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.CreateOnlyTagArgs', '_root_inputs.CreateOnlyTagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SageMaker::ProcessingJob

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProcessingJobAppSpecificationArgs', 'ProcessingJobAppSpecificationArgsDict']] app_specification: Configuration to run a processing job in a specified container image.
        :param pulumi.Input[Union['ProcessingJobEnvironmentArgs', 'ProcessingJobEnvironmentArgsDict']] environment: Sets the environment variables in the Docker container.
        :param pulumi.Input[Union['ProcessingJobExperimentConfigArgs', 'ProcessingJobExperimentConfigArgsDict']] experiment_config: Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html) API.
        :param pulumi.Input[Union['ProcessingJobNetworkConfigArgs', 'ProcessingJobNetworkConfigArgsDict']] network_config: Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProcessingJobProcessingInputsObjectArgs', 'ProcessingJobProcessingInputsObjectArgsDict']]]] processing_inputs: An array of inputs configuring the data to download into the processing container.
        :param pulumi.Input[builtins.str] processing_job_name: The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        :param pulumi.Input[Union['ProcessingJobProcessingOutputConfigArgs', 'ProcessingJobProcessingOutputConfigArgsDict']] processing_output_config: Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
        :param pulumi.Input[Union['ProcessingJobProcessingResourcesArgs', 'ProcessingJobProcessingResourcesArgsDict']] processing_resources: Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        :param pulumi.Input[builtins.str] role_arn: The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        :param pulumi.Input[Union['ProcessingJobStoppingConditionArgs', 'ProcessingJobStoppingConditionArgsDict']] stopping_condition: Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.CreateOnlyTagArgs', '_root_inputs.CreateOnlyTagArgsDict']]]] tags: (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProcessingJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SageMaker::ProcessingJob

        :param str resource_name: The name of the resource.
        :param ProcessingJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProcessingJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_specification: Optional[pulumi.Input[Union['ProcessingJobAppSpecificationArgs', 'ProcessingJobAppSpecificationArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Union['ProcessingJobEnvironmentArgs', 'ProcessingJobEnvironmentArgsDict']]] = None,
                 experiment_config: Optional[pulumi.Input[Union['ProcessingJobExperimentConfigArgs', 'ProcessingJobExperimentConfigArgsDict']]] = None,
                 network_config: Optional[pulumi.Input[Union['ProcessingJobNetworkConfigArgs', 'ProcessingJobNetworkConfigArgsDict']]] = None,
                 processing_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProcessingJobProcessingInputsObjectArgs', 'ProcessingJobProcessingInputsObjectArgsDict']]]]] = None,
                 processing_job_name: Optional[pulumi.Input[builtins.str]] = None,
                 processing_output_config: Optional[pulumi.Input[Union['ProcessingJobProcessingOutputConfigArgs', 'ProcessingJobProcessingOutputConfigArgsDict']]] = None,
                 processing_resources: Optional[pulumi.Input[Union['ProcessingJobProcessingResourcesArgs', 'ProcessingJobProcessingResourcesArgsDict']]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 stopping_condition: Optional[pulumi.Input[Union['ProcessingJobStoppingConditionArgs', 'ProcessingJobStoppingConditionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.CreateOnlyTagArgs', '_root_inputs.CreateOnlyTagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProcessingJobArgs.__new__(ProcessingJobArgs)

            if app_specification is None and not opts.urn:
                raise TypeError("Missing required property 'app_specification'")
            __props__.__dict__["app_specification"] = app_specification
            __props__.__dict__["environment"] = environment
            __props__.__dict__["experiment_config"] = experiment_config
            __props__.__dict__["network_config"] = network_config
            __props__.__dict__["processing_inputs"] = processing_inputs
            __props__.__dict__["processing_job_name"] = processing_job_name
            __props__.__dict__["processing_output_config"] = processing_output_config
            if processing_resources is None and not opts.urn:
                raise TypeError("Missing required property 'processing_resources'")
            __props__.__dict__["processing_resources"] = processing_resources
            if role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'role_arn'")
            __props__.__dict__["role_arn"] = role_arn
            __props__.__dict__["stopping_condition"] = stopping_condition
            __props__.__dict__["tags"] = tags
            __props__.__dict__["auto_ml_job_arn"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["exit_message"] = None
            __props__.__dict__["failure_reason"] = None
            __props__.__dict__["last_modified_time"] = None
            __props__.__dict__["monitoring_schedule_arn"] = None
            __props__.__dict__["processing_end_time"] = None
            __props__.__dict__["processing_job_arn"] = None
            __props__.__dict__["processing_job_status"] = None
            __props__.__dict__["processing_start_time"] = None
            __props__.__dict__["training_job_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["appSpecification", "environment", "experimentConfig", "networkConfig", "processingInputs[*]", "processingJobName", "processingOutputConfig", "processingResources", "roleArn", "stoppingCondition", "tags[*]"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ProcessingJob, __self__).__init__(
            'aws-native:sagemaker:ProcessingJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ProcessingJob':
        """
        Get an existing ProcessingJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ProcessingJobArgs.__new__(ProcessingJobArgs)

        __props__.__dict__["app_specification"] = None
        __props__.__dict__["auto_ml_job_arn"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["exit_message"] = None
        __props__.__dict__["experiment_config"] = None
        __props__.__dict__["failure_reason"] = None
        __props__.__dict__["last_modified_time"] = None
        __props__.__dict__["monitoring_schedule_arn"] = None
        __props__.__dict__["network_config"] = None
        __props__.__dict__["processing_end_time"] = None
        __props__.__dict__["processing_inputs"] = None
        __props__.__dict__["processing_job_arn"] = None
        __props__.__dict__["processing_job_name"] = None
        __props__.__dict__["processing_job_status"] = None
        __props__.__dict__["processing_output_config"] = None
        __props__.__dict__["processing_resources"] = None
        __props__.__dict__["processing_start_time"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["stopping_condition"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["training_job_arn"] = None
        return ProcessingJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appSpecification")
    def app_specification(self) -> pulumi.Output['outputs.ProcessingJobAppSpecification']:
        """
        Configuration to run a processing job in a specified container image.
        """
        return pulumi.get(self, "app_specification")

    @property
    @pulumi.getter(name="autoMlJobArn")
    def auto_ml_job_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of an AutoML job associated with this processing job.
        """
        return pulumi.get(self, "auto_ml_job_arn")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[builtins.str]:
        """
        The time at which the processing job was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional['outputs.ProcessingJobEnvironment']]:
        """
        Sets the environment variables in the Docker container.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="exitMessage")
    def exit_message(self) -> pulumi.Output[builtins.str]:
        """
        An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        """
        return pulumi.get(self, "exit_message")

    @property
    @pulumi.getter(name="experimentConfig")
    def experiment_config(self) -> pulumi.Output[Optional['outputs.ProcessingJobExperimentConfig']]:
        """
        Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html) API.
        """
        return pulumi.get(self, "experiment_config")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[builtins.str]:
        """
        A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Output[builtins.str]:
        """
        The time at which the processing job was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="monitoringScheduleArn")
    def monitoring_schedule_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of a monitoring schedule for an endpoint associated with this processing job.
        """
        return pulumi.get(self, "monitoring_schedule_arn")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> pulumi.Output[Optional['outputs.ProcessingJobNetworkConfig']]:
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="processingEndTime")
    def processing_end_time(self) -> pulumi.Output[builtins.str]:
        """
        The time at which the processing job completed.
        """
        return pulumi.get(self, "processing_end_time")

    @property
    @pulumi.getter(name="processingInputs")
    def processing_inputs(self) -> pulumi.Output[Optional[Sequence['outputs.ProcessingJobProcessingInputsObject']]]:
        """
        An array of inputs configuring the data to download into the processing container.
        """
        return pulumi.get(self, "processing_inputs")

    @property
    @pulumi.getter(name="processingJobArn")
    def processing_job_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the processing job.
        """
        return pulumi.get(self, "processing_job_arn")

    @property
    @pulumi.getter(name="processingJobName")
    def processing_job_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the processing job. The name must be unique within an AWS Region in the AWS account.
        """
        return pulumi.get(self, "processing_job_name")

    @property
    @pulumi.getter(name="processingJobStatus")
    def processing_job_status(self) -> pulumi.Output['ProcessingJobStatus']:
        """
        Provides the status of a processing job.
        """
        return pulumi.get(self, "processing_job_status")

    @property
    @pulumi.getter(name="processingOutputConfig")
    def processing_output_config(self) -> pulumi.Output[Optional['outputs.ProcessingJobProcessingOutputConfig']]:
        """
        Contains information about the output location for the compiled model and the target device that the model runs on. `TargetDevice` and `TargetPlatform` are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the `TargetDevice` list, use `TargetPlatform` to describe the platform of your edge device and `CompilerOptions` if there are specific settings that are required or recommended to use for particular TargetPlatform.
        """
        return pulumi.get(self, "processing_output_config")

    @property
    @pulumi.getter(name="processingResources")
    def processing_resources(self) -> pulumi.Output['outputs.ProcessingJobProcessingResources']:
        """
        Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        """
        return pulumi.get(self, "processing_resources")

    @property
    @pulumi.getter(name="processingStartTime")
    def processing_start_time(self) -> pulumi.Output[builtins.str]:
        """
        The time at which the processing job started.
        """
        return pulumi.get(self, "processing_start_time")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="stoppingCondition")
    def stopping_condition(self) -> pulumi.Output[Optional['outputs.ProcessingJobStoppingCondition']]:
        """
        Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        """
        return pulumi.get(self, "stopping_condition")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.CreateOnlyTag']]]:
        """
        (Optional) An array of key-value pairs. For more information, see Using Cost Allocation Tags(https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the AWS Billing and Cost Management User Guide.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trainingJobArn")
    def training_job_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of a training job associated with this processing job
        """
        return pulumi.get(self, "training_job_arn")

