# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AppImageConfigFileSystemConfigArgs',
    'AppImageConfigKernelGatewayImageConfigArgs',
    'AppImageConfigKernelSpecArgs',
    'AppImageConfigTagArgs',
    'AppResourceSpecArgs',
    'AppTagArgs',
    'CodeRepositoryGitConfigArgs',
    'CodeRepositoryTagArgs',
    'DataQualityJobDefinitionBatchTransformInputArgs',
    'DataQualityJobDefinitionClusterConfigArgs',
    'DataQualityJobDefinitionConstraintsResourceArgs',
    'DataQualityJobDefinitionCsvArgs',
    'DataQualityJobDefinitionDataQualityAppSpecificationArgs',
    'DataQualityJobDefinitionDataQualityBaselineConfigArgs',
    'DataQualityJobDefinitionDataQualityJobInputArgs',
    'DataQualityJobDefinitionDatasetFormatArgs',
    'DataQualityJobDefinitionEndpointInputArgs',
    'DataQualityJobDefinitionJsonArgs',
    'DataQualityJobDefinitionMonitoringOutputConfigArgs',
    'DataQualityJobDefinitionMonitoringOutputArgs',
    'DataQualityJobDefinitionMonitoringResourcesArgs',
    'DataQualityJobDefinitionNetworkConfigArgs',
    'DataQualityJobDefinitionS3OutputArgs',
    'DataQualityJobDefinitionStatisticsResourceArgs',
    'DataQualityJobDefinitionStoppingConditionArgs',
    'DataQualityJobDefinitionTagArgs',
    'DataQualityJobDefinitionVpcConfigArgs',
    'DeviceFleetEdgeOutputConfigArgs',
    'DeviceFleetTagArgs',
    'DeviceTagArgs',
    'DeviceArgs',
    'DomainCustomImageArgs',
    'DomainJupyterServerAppSettingsArgs',
    'DomainKernelGatewayAppSettingsArgs',
    'DomainRSessionAppSettingsArgs',
    'DomainRStudioServerProAppSettingsArgs',
    'DomainRStudioServerProDomainSettingsArgs',
    'DomainResourceSpecArgs',
    'DomainSettingsArgs',
    'DomainSharingSettingsArgs',
    'DomainTagArgs',
    'DomainUserSettingsArgs',
    'EndpointAlarmArgs',
    'EndpointAutoRollbackConfigArgs',
    'EndpointBlueGreenUpdatePolicyArgs',
    'EndpointCapacitySizeArgs',
    'EndpointConfigAsyncInferenceClientConfigArgs',
    'EndpointConfigAsyncInferenceConfigArgs',
    'EndpointConfigAsyncInferenceNotificationConfigArgs',
    'EndpointConfigAsyncInferenceOutputConfigArgs',
    'EndpointConfigCaptureContentTypeHeaderArgs',
    'EndpointConfigCaptureOptionArgs',
    'EndpointConfigClarifyExplainerConfigArgs',
    'EndpointConfigClarifyFeatureTypeArgs',
    'EndpointConfigClarifyHeaderArgs',
    'EndpointConfigClarifyInferenceConfigArgs',
    'EndpointConfigClarifyShapBaselineConfigArgs',
    'EndpointConfigClarifyShapConfigArgs',
    'EndpointConfigClarifyTextConfigArgs',
    'EndpointConfigDataCaptureConfigArgs',
    'EndpointConfigExplainerConfigArgs',
    'EndpointConfigProductionVariantArgs',
    'EndpointConfigServerlessConfigArgs',
    'EndpointConfigTagArgs',
    'EndpointDeploymentConfigArgs',
    'EndpointTagArgs',
    'EndpointTrafficRoutingConfigArgs',
    'EndpointVariantPropertyArgs',
    'FeatureGroupDataCatalogConfigArgs',
    'FeatureGroupFeatureDefinitionArgs',
    'FeatureGroupOnlineStoreSecurityConfigArgs',
    'FeatureGroupS3StorageConfigArgs',
    'FeatureGroupTagArgs',
    'ImageTagArgs',
    'ModelBiasJobDefinitionBatchTransformInputArgs',
    'ModelBiasJobDefinitionClusterConfigArgs',
    'ModelBiasJobDefinitionConstraintsResourceArgs',
    'ModelBiasJobDefinitionCsvArgs',
    'ModelBiasJobDefinitionDatasetFormatArgs',
    'ModelBiasJobDefinitionEndpointInputArgs',
    'ModelBiasJobDefinitionJsonArgs',
    'ModelBiasJobDefinitionModelBiasAppSpecificationArgs',
    'ModelBiasJobDefinitionModelBiasBaselineConfigArgs',
    'ModelBiasJobDefinitionModelBiasJobInputArgs',
    'ModelBiasJobDefinitionMonitoringGroundTruthS3InputArgs',
    'ModelBiasJobDefinitionMonitoringOutputConfigArgs',
    'ModelBiasJobDefinitionMonitoringOutputArgs',
    'ModelBiasJobDefinitionMonitoringResourcesArgs',
    'ModelBiasJobDefinitionNetworkConfigArgs',
    'ModelBiasJobDefinitionS3OutputArgs',
    'ModelBiasJobDefinitionStoppingConditionArgs',
    'ModelBiasJobDefinitionTagArgs',
    'ModelBiasJobDefinitionVpcConfigArgs',
    'ModelContainerDefinitionArgs',
    'ModelExplainabilityJobDefinitionBatchTransformInputArgs',
    'ModelExplainabilityJobDefinitionClusterConfigArgs',
    'ModelExplainabilityJobDefinitionConstraintsResourceArgs',
    'ModelExplainabilityJobDefinitionCsvArgs',
    'ModelExplainabilityJobDefinitionDatasetFormatArgs',
    'ModelExplainabilityJobDefinitionEndpointInputArgs',
    'ModelExplainabilityJobDefinitionJsonArgs',
    'ModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationArgs',
    'ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigArgs',
    'ModelExplainabilityJobDefinitionModelExplainabilityJobInputArgs',
    'ModelExplainabilityJobDefinitionMonitoringOutputConfigArgs',
    'ModelExplainabilityJobDefinitionMonitoringOutputArgs',
    'ModelExplainabilityJobDefinitionMonitoringResourcesArgs',
    'ModelExplainabilityJobDefinitionNetworkConfigArgs',
    'ModelExplainabilityJobDefinitionS3OutputArgs',
    'ModelExplainabilityJobDefinitionStoppingConditionArgs',
    'ModelExplainabilityJobDefinitionTagArgs',
    'ModelExplainabilityJobDefinitionVpcConfigArgs',
    'ModelImageConfigArgs',
    'ModelInferenceExecutionConfigArgs',
    'ModelMultiModelConfigArgs',
    'ModelPackageAdditionalInferenceSpecificationDefinitionArgs',
    'ModelPackageBiasArgs',
    'ModelPackageContainerDefinitionModelInputPropertiesArgs',
    'ModelPackageContainerDefinitionArgs',
    'ModelPackageCreatedByArgs',
    'ModelPackageCustomerMetadataPropertiesArgs',
    'ModelPackageDataSourceArgs',
    'ModelPackageDriftCheckBaselinesArgs',
    'ModelPackageDriftCheckBiasArgs',
    'ModelPackageDriftCheckExplainabilityArgs',
    'ModelPackageDriftCheckModelDataQualityArgs',
    'ModelPackageDriftCheckModelQualityArgs',
    'ModelPackageEnvironmentArgs',
    'ModelPackageExplainabilityArgs',
    'ModelPackageFileSourceArgs',
    'ModelPackageGroupTagArgs',
    'ModelPackageInferenceSpecificationArgs',
    'ModelPackageLastModifiedByArgs',
    'ModelPackageMetadataPropertiesArgs',
    'ModelPackageMetricsSourceArgs',
    'ModelPackageModelDataQualityArgs',
    'ModelPackageModelMetricsArgs',
    'ModelPackageModelQualityArgs',
    'ModelPackageS3DataSourceArgs',
    'ModelPackageSourceAlgorithmSpecificationArgs',
    'ModelPackageSourceAlgorithmArgs',
    'ModelPackageStatusDetailsArgs',
    'ModelPackageStatusItemArgs',
    'ModelPackageTagArgs',
    'ModelPackageTransformInputArgs',
    'ModelPackageTransformJobDefinitionArgs',
    'ModelPackageTransformOutputArgs',
    'ModelPackageTransformResourcesArgs',
    'ModelPackageValidationProfileArgs',
    'ModelPackageValidationSpecificationArgs',
    'ModelQualityJobDefinitionBatchTransformInputArgs',
    'ModelQualityJobDefinitionClusterConfigArgs',
    'ModelQualityJobDefinitionConstraintsResourceArgs',
    'ModelQualityJobDefinitionCsvArgs',
    'ModelQualityJobDefinitionDatasetFormatArgs',
    'ModelQualityJobDefinitionEndpointInputArgs',
    'ModelQualityJobDefinitionJsonArgs',
    'ModelQualityJobDefinitionModelQualityAppSpecificationArgs',
    'ModelQualityJobDefinitionModelQualityBaselineConfigArgs',
    'ModelQualityJobDefinitionModelQualityJobInputArgs',
    'ModelQualityJobDefinitionMonitoringGroundTruthS3InputArgs',
    'ModelQualityJobDefinitionMonitoringOutputConfigArgs',
    'ModelQualityJobDefinitionMonitoringOutputArgs',
    'ModelQualityJobDefinitionMonitoringResourcesArgs',
    'ModelQualityJobDefinitionNetworkConfigArgs',
    'ModelQualityJobDefinitionS3OutputArgs',
    'ModelQualityJobDefinitionStoppingConditionArgs',
    'ModelQualityJobDefinitionTagArgs',
    'ModelQualityJobDefinitionVpcConfigArgs',
    'ModelRepositoryAuthConfigArgs',
    'ModelTagArgs',
    'ModelVpcConfigArgs',
    'MonitoringScheduleBaselineConfigArgs',
    'MonitoringScheduleBatchTransformInputArgs',
    'MonitoringScheduleClusterConfigArgs',
    'MonitoringScheduleConfigArgs',
    'MonitoringScheduleConstraintsResourceArgs',
    'MonitoringScheduleCsvArgs',
    'MonitoringScheduleDatasetFormatArgs',
    'MonitoringScheduleEndpointInputArgs',
    'MonitoringScheduleJsonArgs',
    'MonitoringScheduleMonitoringAppSpecificationArgs',
    'MonitoringScheduleMonitoringExecutionSummaryArgs',
    'MonitoringScheduleMonitoringInputArgs',
    'MonitoringScheduleMonitoringJobDefinitionArgs',
    'MonitoringScheduleMonitoringOutputConfigArgs',
    'MonitoringScheduleMonitoringOutputArgs',
    'MonitoringScheduleMonitoringResourcesArgs',
    'MonitoringScheduleNetworkConfigArgs',
    'MonitoringScheduleS3OutputArgs',
    'MonitoringScheduleScheduleConfigArgs',
    'MonitoringScheduleStatisticsResourceArgs',
    'MonitoringScheduleStoppingConditionArgs',
    'MonitoringScheduleTagArgs',
    'MonitoringScheduleVpcConfigArgs',
    'NotebookInstanceInstanceMetadataServiceConfigurationArgs',
    'NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs',
    'NotebookInstanceTagArgs',
    'OfflineStoreConfigPropertiesArgs',
    'OnlineStoreConfigPropertiesArgs',
    'ParallelismConfigurationPropertiesArgs',
    'PipelineDefinition0PropertiesArgs',
    'PipelineDefinition1PropertiesArgs',
    'PipelineS3LocationArgs',
    'PipelineTagArgs',
    'ProjectProvisioningParameterArgs',
    'ProjectTagArgs',
    'ServiceCatalogProvisioningDetailsPropertiesArgs',
    'UserProfileCustomImageArgs',
    'UserProfileJupyterServerAppSettingsArgs',
    'UserProfileKernelGatewayAppSettingsArgs',
    'UserProfileRStudioServerProAppSettingsArgs',
    'UserProfileResourceSpecArgs',
    'UserProfileSharingSettingsArgs',
    'UserProfileTagArgs',
    'UserProfileUserSettingsArgs',
    'WorkteamCognitoMemberDefinitionArgs',
    'WorkteamMemberDefinitionArgs',
    'WorkteamNotificationConfigurationArgs',
    'WorkteamOidcMemberDefinitionArgs',
    'WorkteamTagArgs',
]

@pulumi.input_type
class AppImageConfigFileSystemConfigArgs:
    def __init__(__self__, *,
                 default_gid: Optional[pulumi.Input[int]] = None,
                 default_uid: Optional[pulumi.Input[int]] = None,
                 mount_path: Optional[pulumi.Input[str]] = None):
        """
        The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        :param pulumi.Input[int] default_gid: The default POSIX group ID (GID). If not specified, defaults to 100.
        :param pulumi.Input[int] default_uid: The default POSIX user ID (UID). If not specified, defaults to 1000.
        :param pulumi.Input[str] mount_path: The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        """
        if default_gid is not None:
            pulumi.set(__self__, "default_gid", default_gid)
        if default_uid is not None:
            pulumi.set(__self__, "default_uid", default_uid)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="defaultGid")
    def default_gid(self) -> Optional[pulumi.Input[int]]:
        """
        The default POSIX group ID (GID). If not specified, defaults to 100.
        """
        return pulumi.get(self, "default_gid")

    @default_gid.setter
    def default_gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_gid", value)

    @property
    @pulumi.getter(name="defaultUid")
    def default_uid(self) -> Optional[pulumi.Input[int]]:
        """
        The default POSIX user ID (UID). If not specified, defaults to 1000.
        """
        return pulumi.get(self, "default_uid")

    @default_uid.setter
    def default_uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_uid", value)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)


@pulumi.input_type
class AppImageConfigKernelGatewayImageConfigArgs:
    def __init__(__self__, *,
                 kernel_specs: pulumi.Input[Sequence[pulumi.Input['AppImageConfigKernelSpecArgs']]],
                 file_system_config: Optional[pulumi.Input['AppImageConfigFileSystemConfigArgs']] = None):
        """
        The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
        :param pulumi.Input[Sequence[pulumi.Input['AppImageConfigKernelSpecArgs']]] kernel_specs: The specification of the Jupyter kernels in the image.
        :param pulumi.Input['AppImageConfigFileSystemConfigArgs'] file_system_config: The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        """
        pulumi.set(__self__, "kernel_specs", kernel_specs)
        if file_system_config is not None:
            pulumi.set(__self__, "file_system_config", file_system_config)

    @property
    @pulumi.getter(name="kernelSpecs")
    def kernel_specs(self) -> pulumi.Input[Sequence[pulumi.Input['AppImageConfigKernelSpecArgs']]]:
        """
        The specification of the Jupyter kernels in the image.
        """
        return pulumi.get(self, "kernel_specs")

    @kernel_specs.setter
    def kernel_specs(self, value: pulumi.Input[Sequence[pulumi.Input['AppImageConfigKernelSpecArgs']]]):
        pulumi.set(self, "kernel_specs", value)

    @property
    @pulumi.getter(name="fileSystemConfig")
    def file_system_config(self) -> Optional[pulumi.Input['AppImageConfigFileSystemConfigArgs']]:
        """
        The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        """
        return pulumi.get(self, "file_system_config")

    @file_system_config.setter
    def file_system_config(self, value: Optional[pulumi.Input['AppImageConfigFileSystemConfigArgs']]):
        pulumi.set(self, "file_system_config", value)


@pulumi.input_type
class AppImageConfigKernelSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the kernel.
        :param pulumi.Input[str] display_name: The display name of the kernel.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the kernel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the kernel.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class AppImageConfigTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AppResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input['AppResourceSpecInstanceType']] = None,
                 sage_maker_image_arn: Optional[pulumi.Input[str]] = None,
                 sage_maker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AppResourceSpecInstanceType'] instance_type: The instance type that the image version runs on.
        :param pulumi.Input[str] sage_maker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sage_maker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input['AppResourceSpecInstanceType']]:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input['AppResourceSpecInstanceType']]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @sage_maker_image_arn.setter
    def sage_maker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_arn", value)

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")

    @sage_maker_image_version_arn.setter
    def sage_maker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_version_arn", value)


@pulumi.input_type
class AppTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CodeRepositoryGitConfigArgs:
    def __init__(__self__, *,
                 repository_url: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "repository_url", repository_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_url")

    @repository_url.setter
    def repository_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_url", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class CodeRepositoryTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataQualityJobDefinitionBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['DataQualityJobDefinitionDatasetFormatArgs'],
                 local_path: pulumi.Input[str],
                 s3_data_distribution_type: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3InputMode']] = None):
        """
        The batch transform input for a monitoring job.
        :param pulumi.Input[str] data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['DataQualityJobDefinitionDatasetFormatArgs']:
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['DataQualityJobDefinitionDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class DataQualityJobDefinitionConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        The CSV format
        :param pulumi.Input[bool] header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityAppSpecificationArgs:
    def __init__(__self__, *,
                 image_uri: pulumi.Input[str],
                 container_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[Any] = None,
                 post_analytics_processor_source_uri: Optional[pulumi.Input[str]] = None,
                 record_preprocessor_source_uri: Optional[pulumi.Input[str]] = None):
        """
        Container image configuration object for the monitoring job.
        :param pulumi.Input[str] image_uri: The container image to be run by the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        :param pulumi.Input[str] post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param pulumi.Input[str] record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @container_arguments.setter
    def container_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_arguments", value)

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @container_entrypoint.setter
    def container_entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_entrypoint", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @post_analytics_processor_source_uri.setter
    def post_analytics_processor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_analytics_processor_source_uri", value)

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")

    @record_preprocessor_source_uri.setter
    def record_preprocessor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_preprocessor_source_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityBaselineConfigArgs:
    def __init__(__self__, *,
                 baselining_job_name: Optional[pulumi.Input[str]] = None,
                 constraints_resource: Optional[pulumi.Input['DataQualityJobDefinitionConstraintsResourceArgs']] = None,
                 statistics_resource: Optional[pulumi.Input['DataQualityJobDefinitionStatisticsResourceArgs']] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baselining_job_name")

    @baselining_job_name.setter
    def baselining_job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baselining_job_name", value)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['DataQualityJobDefinitionConstraintsResourceArgs']]:
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['DataQualityJobDefinitionConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional[pulumi.Input['DataQualityJobDefinitionStatisticsResourceArgs']]:
        return pulumi.get(self, "statistics_resource")

    @statistics_resource.setter
    def statistics_resource(self, value: Optional[pulumi.Input['DataQualityJobDefinitionStatisticsResourceArgs']]):
        pulumi.set(self, "statistics_resource", value)


@pulumi.input_type
class DataQualityJobDefinitionDataQualityJobInputArgs:
    def __init__(__self__, *,
                 batch_transform_input: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputArgs']] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputArgs']]:
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['DataQualityJobDefinitionBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputArgs']]:
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class DataQualityJobDefinitionDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['DataQualityJobDefinitionCsvArgs']] = None,
                 json: Optional[pulumi.Input['DataQualityJobDefinitionJsonArgs']] = None,
                 parquet: Optional[pulumi.Input[bool]] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['DataQualityJobDefinitionCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['DataQualityJobDefinitionCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['DataQualityJobDefinitionJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['DataQualityJobDefinitionJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet", value)


@pulumi.input_type
class DataQualityJobDefinitionEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: pulumi.Input[str],
                 s3_data_distribution_type: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3InputMode']] = None):
        """
        The endpoint for a monitoring job.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input['DataQualityJobDefinitionEndpointInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['DataQualityJobDefinitionEndpointInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['DataQualityJobDefinitionEndpointInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        The Json format
        :param pulumi.Input[bool] line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class DataQualityJobDefinitionMonitoringOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input[Sequence[pulumi.Input['DataQualityJobDefinitionMonitoringOutputArgs']]],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        The output configuration for monitoring jobs.
        :param pulumi.Input[Sequence[pulumi.Input['DataQualityJobDefinitionMonitoringOutputArgs']]] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input[Sequence[pulumi.Input['DataQualityJobDefinitionMonitoringOutputArgs']]]:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input[Sequence[pulumi.Input['DataQualityJobDefinitionMonitoringOutputArgs']]]):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DataQualityJobDefinitionMonitoringOutputArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['DataQualityJobDefinitionS3OutputArgs']):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['DataQualityJobDefinitionS3OutputArgs']:
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['DataQualityJobDefinitionS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class DataQualityJobDefinitionMonitoringResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['DataQualityJobDefinitionClusterConfigArgs']):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['DataQualityJobDefinitionClusterConfigArgs']:
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['DataQualityJobDefinitionClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class DataQualityJobDefinitionNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['DataQualityJobDefinitionVpcConfigArgs']] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['DataQualityJobDefinitionVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['DataQualityJobDefinitionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class DataQualityJobDefinitionS3OutputArgs:
    def __init__(__self__, *,
                 local_path: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 s3_upload_mode: Optional[pulumi.Input['DataQualityJobDefinitionS3OutputS3UploadMode']] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param pulumi.Input[str] local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param pulumi.Input['DataQualityJobDefinitionS3OutputS3UploadMode'] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input['DataQualityJobDefinitionS3OutputS3UploadMode']]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input['DataQualityJobDefinitionS3OutputS3UploadMode']]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class DataQualityJobDefinitionStatisticsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline statistics resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class DataQualityJobDefinitionStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: pulumi.Input[int]):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> pulumi.Input[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class DataQualityJobDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataQualityJobDefinitionVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class DeviceFleetEdgeOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_location: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] s3_output_location: The Amazon Simple Storage (S3) bucket URI
        :param pulumi.Input[str] kms_key_id: The KMS key id used for encryption on the S3 bucket
        """
        pulumi.set(__self__, "s3_output_location", s3_output_location)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputLocation")
    def s3_output_location(self) -> pulumi.Input[str]:
        """
        The Amazon Simple Storage (S3) bucket URI
        """
        return pulumi.get(self, "s3_output_location")

    @s3_output_location.setter
    def s3_output_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_location", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KMS key id used for encryption on the S3 bucket
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DeviceFleetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Key-value pair to associate as a tag for the resource
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeviceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeviceArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 iot_thing_name: Optional[pulumi.Input[str]] = None):
        """
        Edge device you want to create
        :param pulumi.Input[str] device_name: The name of the device
        :param pulumi.Input[str] description: Description of the device
        :param pulumi.Input[str] iot_thing_name: AWS Internet of Things (IoT) object name.
        """
        pulumi.set(__self__, "device_name", device_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iot_thing_name is not None:
            pulumi.set(__self__, "iot_thing_name", iot_thing_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        """
        The name of the device
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the device
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="iotThingName")
    def iot_thing_name(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Internet of Things (IoT) object name.
        """
        return pulumi.get(self, "iot_thing_name")

    @iot_thing_name.setter
    def iot_thing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iot_thing_name", value)


@pulumi.input_type
class DomainCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        A custom SageMaker image.
        :param pulumi.Input[str] app_image_config_name: The Name of the AppImageConfig.
        :param pulumi.Input[str] image_name: The name of the CustomImage. Must be unique to your account.
        :param pulumi.Input[int] image_version_number: The version number of the CustomImage.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The Name of the AppImageConfig.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the CustomImage. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the CustomImage.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class DomainJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: Optional[pulumi.Input['DomainResourceSpecArgs']] = None):
        """
        The JupyterServer app settings.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainResourceSpecArgs']] = None):
        """
        The kernel gateway app settings.
        :param pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        :param pulumi.Input['DomainResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainRSessionAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['DomainResourceSpecArgs']] = None):
        """
        A collection of settings that apply to an RSessionGateway app.
        :param pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class DomainRStudioServerProAppSettingsArgs:
    def __init__(__self__, *,
                 access_status: Optional[pulumi.Input['DomainRStudioServerProAppSettingsAccessStatus']] = None,
                 user_group: Optional[pulumi.Input['DomainRStudioServerProAppSettingsUserGroup']] = None):
        """
        A collection of settings that configure user interaction with the RStudioServerPro app.
        :param pulumi.Input['DomainRStudioServerProAppSettingsAccessStatus'] access_status: Indicates whether the current user has access to the RStudioServerPro app.
        :param pulumi.Input['DomainRStudioServerProAppSettingsUserGroup'] user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[pulumi.Input['DomainRStudioServerProAppSettingsAccessStatus']]:
        """
        Indicates whether the current user has access to the RStudioServerPro app.
        """
        return pulumi.get(self, "access_status")

    @access_status.setter
    def access_status(self, value: Optional[pulumi.Input['DomainRStudioServerProAppSettingsAccessStatus']]):
        pulumi.set(self, "access_status", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input['DomainRStudioServerProAppSettingsUserGroup']]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input['DomainRStudioServerProAppSettingsUserGroup']]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class DomainRStudioServerProDomainSettingsArgs:
    def __init__(__self__, *,
                 domain_execution_role_arn: pulumi.Input[str],
                 default_resource_spec: Optional[pulumi.Input['DomainResourceSpecArgs']] = None,
                 r_studio_connect_url: Optional[pulumi.Input[str]] = None,
                 r_studio_package_manager_url: Optional[pulumi.Input[str]] = None):
        """
        A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
        :param pulumi.Input[str] domain_execution_role_arn: The ARN of the execution role for the RStudioServerPro Domain-level app.
        :param pulumi.Input[str] r_studio_connect_url: A URL pointing to an RStudio Connect server.
        :param pulumi.Input[str] r_studio_package_manager_url: A URL pointing to an RStudio Package Manager server.
        """
        pulumi.set(__self__, "domain_execution_role_arn", domain_execution_role_arn)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if r_studio_connect_url is not None:
            pulumi.set(__self__, "r_studio_connect_url", r_studio_connect_url)
        if r_studio_package_manager_url is not None:
            pulumi.set(__self__, "r_studio_package_manager_url", r_studio_package_manager_url)

    @property
    @pulumi.getter(name="domainExecutionRoleArn")
    def domain_execution_role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the execution role for the RStudioServerPro Domain-level app.
        """
        return pulumi.get(self, "domain_execution_role_arn")

    @domain_execution_role_arn.setter
    def domain_execution_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_execution_role_arn", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['DomainResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['DomainResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)

    @property
    @pulumi.getter(name="rStudioConnectUrl")
    def r_studio_connect_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL pointing to an RStudio Connect server.
        """
        return pulumi.get(self, "r_studio_connect_url")

    @r_studio_connect_url.setter
    def r_studio_connect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "r_studio_connect_url", value)

    @property
    @pulumi.getter(name="rStudioPackageManagerUrl")
    def r_studio_package_manager_url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL pointing to an RStudio Package Manager server.
        """
        return pulumi.get(self, "r_studio_package_manager_url")

    @r_studio_package_manager_url.setter
    def r_studio_package_manager_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "r_studio_package_manager_url", value)


@pulumi.input_type
class DomainResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input['DomainResourceSpecInstanceType']] = None,
                 lifecycle_config_arn: Optional[pulumi.Input[str]] = None,
                 sage_maker_image_arn: Optional[pulumi.Input[str]] = None,
                 sage_maker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DomainResourceSpecInstanceType'] instance_type: The instance type that the image version runs on.
        :param pulumi.Input[str] lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
        :param pulumi.Input[str] sage_maker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sage_maker_image_version_arn: The Amazon Resource Name (ARN) of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input['DomainResourceSpecInstanceType']]:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input['DomainResourceSpecInstanceType']]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @lifecycle_config_arn.setter
    def lifecycle_config_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_config_arn", value)

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @sage_maker_image_arn.setter
    def sage_maker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_arn", value)

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")

    @sage_maker_image_version_arn.setter
    def sage_maker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_version_arn", value)


@pulumi.input_type
class DomainSettingsArgs:
    def __init__(__self__, *,
                 r_studio_server_pro_domain_settings: Optional[pulumi.Input['DomainRStudioServerProDomainSettingsArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A collection of Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        if r_studio_server_pro_domain_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_domain_settings", r_studio_server_pro_domain_settings)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="rStudioServerProDomainSettings")
    def r_studio_server_pro_domain_settings(self) -> Optional[pulumi.Input['DomainRStudioServerProDomainSettingsArgs']]:
        return pulumi.get(self, "r_studio_server_pro_domain_settings")

    @r_studio_server_pro_domain_settings.setter
    def r_studio_server_pro_domain_settings(self, value: Optional[pulumi.Input['DomainRStudioServerProDomainSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_domain_settings", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class DomainSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input['DomainSharingSettingsNotebookOutputOption']] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
        :param pulumi.Input['DomainSharingSettingsNotebookOutputOption'] notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        :param pulumi.Input[str] s3_kms_key_id: When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param pulumi.Input[str] s3_output_path: When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input['DomainSharingSettingsNotebookOutputOption']]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        """
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input['DomainSharingSettingsNotebookOutputOption']]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        """
        When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class DomainTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DomainUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: Optional[pulumi.Input[str]] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['DomainJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['DomainKernelGatewayAppSettingsArgs']] = None,
                 r_session_app_settings: Optional[pulumi.Input['DomainRSessionAppSettingsArgs']] = None,
                 r_studio_server_pro_app_settings: Optional[pulumi.Input['DomainRStudioServerProAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['DomainSharingSettingsArgs']] = None):
        """
        A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
        :param pulumi.Input[str] execution_role: The user profile Amazon Resource Name (ARN).
        :param pulumi.Input['DomainJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings.
        :param pulumi.Input['DomainKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        :param pulumi.Input['DomainSharingSettingsArgs'] sharing_settings: The sharing settings.
        """
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[str]]:
        """
        The user profile Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['DomainJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['DomainJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['DomainKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['DomainKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional[pulumi.Input['DomainRSessionAppSettingsArgs']]:
        return pulumi.get(self, "r_session_app_settings")

    @r_session_app_settings.setter
    def r_session_app_settings(self, value: Optional[pulumi.Input['DomainRSessionAppSettingsArgs']]):
        pulumi.set(self, "r_session_app_settings", value)

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional[pulumi.Input['DomainRStudioServerProAppSettingsArgs']]:
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @r_studio_server_pro_app_settings.setter
    def r_studio_server_pro_app_settings(self, value: Optional[pulumi.Input['DomainRStudioServerProAppSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['DomainSharingSettingsArgs']]:
        """
        The sharing settings.
        """
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['DomainSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)


@pulumi.input_type
class EndpointAlarmArgs:
    def __init__(__self__, *,
                 alarm_name: pulumi.Input[str]):
        pulumi.set(__self__, "alarm_name", alarm_name)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alarm_name")

    @alarm_name.setter
    def alarm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alarm_name", value)


@pulumi.input_type
class EndpointAutoRollbackConfigArgs:
    def __init__(__self__, *,
                 alarms: pulumi.Input[Sequence[pulumi.Input['EndpointAlarmArgs']]]):
        pulumi.set(__self__, "alarms", alarms)

    @property
    @pulumi.getter
    def alarms(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointAlarmArgs']]]:
        return pulumi.get(self, "alarms")

    @alarms.setter
    def alarms(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointAlarmArgs']]]):
        pulumi.set(self, "alarms", value)


@pulumi.input_type
class EndpointBlueGreenUpdatePolicyArgs:
    def __init__(__self__, *,
                 traffic_routing_configuration: pulumi.Input['EndpointTrafficRoutingConfigArgs'],
                 maximum_execution_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 termination_wait_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "traffic_routing_configuration", traffic_routing_configuration)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if termination_wait_in_seconds is not None:
            pulumi.set(__self__, "termination_wait_in_seconds", termination_wait_in_seconds)

    @property
    @pulumi.getter(name="trafficRoutingConfiguration")
    def traffic_routing_configuration(self) -> pulumi.Input['EndpointTrafficRoutingConfigArgs']:
        return pulumi.get(self, "traffic_routing_configuration")

    @traffic_routing_configuration.setter
    def traffic_routing_configuration(self, value: pulumi.Input['EndpointTrafficRoutingConfigArgs']):
        pulumi.set(self, "traffic_routing_configuration", value)

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @maximum_execution_timeout_in_seconds.setter
    def maximum_execution_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_execution_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="terminationWaitInSeconds")
    def termination_wait_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "termination_wait_in_seconds")

    @termination_wait_in_seconds.setter
    def termination_wait_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "termination_wait_in_seconds", value)


@pulumi.input_type
class EndpointCapacitySizeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[int]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointConfigAsyncInferenceClientConfigArgs:
    def __init__(__self__, *,
                 max_concurrent_invocations_per_instance: Optional[pulumi.Input[int]] = None):
        if max_concurrent_invocations_per_instance is not None:
            pulumi.set(__self__, "max_concurrent_invocations_per_instance", max_concurrent_invocations_per_instance)

    @property
    @pulumi.getter(name="maxConcurrentInvocationsPerInstance")
    def max_concurrent_invocations_per_instance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrent_invocations_per_instance")

    @max_concurrent_invocations_per_instance.setter
    def max_concurrent_invocations_per_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_invocations_per_instance", value)


@pulumi.input_type
class EndpointConfigAsyncInferenceConfigArgs:
    def __init__(__self__, *,
                 output_config: pulumi.Input['EndpointConfigAsyncInferenceOutputConfigArgs'],
                 client_config: Optional[pulumi.Input['EndpointConfigAsyncInferenceClientConfigArgs']] = None):
        pulumi.set(__self__, "output_config", output_config)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Input['EndpointConfigAsyncInferenceOutputConfigArgs']:
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: pulumi.Input['EndpointConfigAsyncInferenceOutputConfigArgs']):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional[pulumi.Input['EndpointConfigAsyncInferenceClientConfigArgs']]:
        return pulumi.get(self, "client_config")

    @client_config.setter
    def client_config(self, value: Optional[pulumi.Input['EndpointConfigAsyncInferenceClientConfigArgs']]):
        pulumi.set(self, "client_config", value)


@pulumi.input_type
class EndpointConfigAsyncInferenceNotificationConfigArgs:
    def __init__(__self__, *,
                 error_topic: Optional[pulumi.Input[str]] = None,
                 success_topic: Optional[pulumi.Input[str]] = None):
        if error_topic is not None:
            pulumi.set(__self__, "error_topic", error_topic)
        if success_topic is not None:
            pulumi.set(__self__, "success_topic", success_topic)

    @property
    @pulumi.getter(name="errorTopic")
    def error_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_topic")

    @error_topic.setter
    def error_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_topic", value)

    @property
    @pulumi.getter(name="successTopic")
    def success_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_topic")

    @success_topic.setter
    def success_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_topic", value)


@pulumi.input_type
class EndpointConfigAsyncInferenceOutputConfigArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 notification_config: Optional[pulumi.Input['EndpointConfigAsyncInferenceNotificationConfigArgs']] = None):
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if notification_config is not None:
            pulumi.set(__self__, "notification_config", notification_config)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> Optional[pulumi.Input['EndpointConfigAsyncInferenceNotificationConfigArgs']]:
        return pulumi.get(self, "notification_config")

    @notification_config.setter
    def notification_config(self, value: Optional[pulumi.Input['EndpointConfigAsyncInferenceNotificationConfigArgs']]):
        pulumi.set(self, "notification_config", value)


@pulumi.input_type
class EndpointConfigCaptureContentTypeHeaderArgs:
    def __init__(__self__, *,
                 csv_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "csv_content_types")

    @csv_content_types.setter
    def csv_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "csv_content_types", value)

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_content_types")

    @json_content_types.setter
    def json_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_content_types", value)


@pulumi.input_type
class EndpointConfigCaptureOptionArgs:
    def __init__(__self__, *,
                 capture_mode: pulumi.Input[str]):
        pulumi.set(__self__, "capture_mode", capture_mode)

    @property
    @pulumi.getter(name="captureMode")
    def capture_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capture_mode")

    @capture_mode.setter
    def capture_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "capture_mode", value)


@pulumi.input_type
class EndpointConfigClarifyExplainerConfigArgs:
    def __init__(__self__, *,
                 shap_config: pulumi.Input['EndpointConfigClarifyShapConfigArgs'],
                 enable_explanations: Optional[pulumi.Input[str]] = None,
                 inference_config: Optional[pulumi.Input['EndpointConfigClarifyInferenceConfigArgs']] = None):
        pulumi.set(__self__, "shap_config", shap_config)
        if enable_explanations is not None:
            pulumi.set(__self__, "enable_explanations", enable_explanations)
        if inference_config is not None:
            pulumi.set(__self__, "inference_config", inference_config)

    @property
    @pulumi.getter(name="shapConfig")
    def shap_config(self) -> pulumi.Input['EndpointConfigClarifyShapConfigArgs']:
        return pulumi.get(self, "shap_config")

    @shap_config.setter
    def shap_config(self, value: pulumi.Input['EndpointConfigClarifyShapConfigArgs']):
        pulumi.set(self, "shap_config", value)

    @property
    @pulumi.getter(name="enableExplanations")
    def enable_explanations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_explanations")

    @enable_explanations.setter
    def enable_explanations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_explanations", value)

    @property
    @pulumi.getter(name="inferenceConfig")
    def inference_config(self) -> Optional[pulumi.Input['EndpointConfigClarifyInferenceConfigArgs']]:
        return pulumi.get(self, "inference_config")

    @inference_config.setter
    def inference_config(self, value: Optional[pulumi.Input['EndpointConfigClarifyInferenceConfigArgs']]):
        pulumi.set(self, "inference_config", value)


@pulumi.input_type
class EndpointConfigClarifyFeatureTypeArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class EndpointConfigClarifyHeaderArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class EndpointConfigClarifyInferenceConfigArgs:
    def __init__(__self__, *,
                 content_template: Optional[pulumi.Input[str]] = None,
                 feature_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]] = None,
                 feature_types: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyFeatureTypeArgs']]]] = None,
                 features_attribute: Optional[pulumi.Input[str]] = None,
                 label_attribute: Optional[pulumi.Input[str]] = None,
                 label_headers: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]] = None,
                 label_index: Optional[pulumi.Input[int]] = None,
                 max_payload_in_mb: Optional[pulumi.Input[int]] = None,
                 max_record_count: Optional[pulumi.Input[int]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 probability_index: Optional[pulumi.Input[int]] = None):
        if content_template is not None:
            pulumi.set(__self__, "content_template", content_template)
        if feature_headers is not None:
            pulumi.set(__self__, "feature_headers", feature_headers)
        if feature_types is not None:
            pulumi.set(__self__, "feature_types", feature_types)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if label_attribute is not None:
            pulumi.set(__self__, "label_attribute", label_attribute)
        if label_headers is not None:
            pulumi.set(__self__, "label_headers", label_headers)
        if label_index is not None:
            pulumi.set(__self__, "label_index", label_index)
        if max_payload_in_mb is not None:
            pulumi.set(__self__, "max_payload_in_mb", max_payload_in_mb)
        if max_record_count is not None:
            pulumi.set(__self__, "max_record_count", max_record_count)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_index is not None:
            pulumi.set(__self__, "probability_index", probability_index)

    @property
    @pulumi.getter(name="contentTemplate")
    def content_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_template")

    @content_template.setter
    def content_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_template", value)

    @property
    @pulumi.getter(name="featureHeaders")
    def feature_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]]:
        return pulumi.get(self, "feature_headers")

    @feature_headers.setter
    def feature_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]]):
        pulumi.set(self, "feature_headers", value)

    @property
    @pulumi.getter(name="featureTypes")
    def feature_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyFeatureTypeArgs']]]]:
        return pulumi.get(self, "feature_types")

    @feature_types.setter
    def feature_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyFeatureTypeArgs']]]]):
        pulumi.set(self, "feature_types", value)

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "features_attribute")

    @features_attribute.setter
    def features_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "features_attribute", value)

    @property
    @pulumi.getter(name="labelAttribute")
    def label_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_attribute")

    @label_attribute.setter
    def label_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_attribute", value)

    @property
    @pulumi.getter(name="labelHeaders")
    def label_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]]:
        return pulumi.get(self, "label_headers")

    @label_headers.setter
    def label_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointConfigClarifyHeaderArgs']]]]):
        pulumi.set(self, "label_headers", value)

    @property
    @pulumi.getter(name="labelIndex")
    def label_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "label_index")

    @label_index.setter
    def label_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "label_index", value)

    @property
    @pulumi.getter(name="maxPayloadInMB")
    def max_payload_in_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_payload_in_mb")

    @max_payload_in_mb.setter
    def max_payload_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_payload_in_mb", value)

    @property
    @pulumi.getter(name="maxRecordCount")
    def max_record_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_record_count")

    @max_record_count.setter
    def max_record_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_record_count", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="probabilityIndex")
    def probability_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "probability_index")

    @probability_index.setter
    def probability_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probability_index", value)


@pulumi.input_type
class EndpointConfigClarifyShapBaselineConfigArgs:
    def __init__(__self__, *,
                 mime_type: Optional[pulumi.Input[str]] = None,
                 shap_baseline: Optional[pulumi.Input[str]] = None,
                 shap_baseline_uri: Optional[pulumi.Input[str]] = None):
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if shap_baseline is not None:
            pulumi.set(__self__, "shap_baseline", shap_baseline)
        if shap_baseline_uri is not None:
            pulumi.set(__self__, "shap_baseline_uri", shap_baseline_uri)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mime_type")

    @mime_type.setter
    def mime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mime_type", value)

    @property
    @pulumi.getter(name="shapBaseline")
    def shap_baseline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shap_baseline")

    @shap_baseline.setter
    def shap_baseline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shap_baseline", value)

    @property
    @pulumi.getter(name="shapBaselineUri")
    def shap_baseline_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shap_baseline_uri")

    @shap_baseline_uri.setter
    def shap_baseline_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shap_baseline_uri", value)


@pulumi.input_type
class EndpointConfigClarifyShapConfigArgs:
    def __init__(__self__, *,
                 shap_baseline_config: pulumi.Input['EndpointConfigClarifyShapBaselineConfigArgs'],
                 number_of_samples: Optional[pulumi.Input[int]] = None,
                 seed: Optional[pulumi.Input[int]] = None,
                 text_config: Optional[pulumi.Input['EndpointConfigClarifyTextConfigArgs']] = None,
                 use_logit: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "shap_baseline_config", shap_baseline_config)
        if number_of_samples is not None:
            pulumi.set(__self__, "number_of_samples", number_of_samples)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if text_config is not None:
            pulumi.set(__self__, "text_config", text_config)
        if use_logit is not None:
            pulumi.set(__self__, "use_logit", use_logit)

    @property
    @pulumi.getter(name="shapBaselineConfig")
    def shap_baseline_config(self) -> pulumi.Input['EndpointConfigClarifyShapBaselineConfigArgs']:
        return pulumi.get(self, "shap_baseline_config")

    @shap_baseline_config.setter
    def shap_baseline_config(self, value: pulumi.Input['EndpointConfigClarifyShapBaselineConfigArgs']):
        pulumi.set(self, "shap_baseline_config", value)

    @property
    @pulumi.getter(name="numberOfSamples")
    def number_of_samples(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_samples")

    @number_of_samples.setter
    def number_of_samples(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_samples", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter(name="textConfig")
    def text_config(self) -> Optional[pulumi.Input['EndpointConfigClarifyTextConfigArgs']]:
        return pulumi.get(self, "text_config")

    @text_config.setter
    def text_config(self, value: Optional[pulumi.Input['EndpointConfigClarifyTextConfigArgs']]):
        pulumi.set(self, "text_config", value)

    @property
    @pulumi.getter(name="useLogit")
    def use_logit(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_logit")

    @use_logit.setter
    def use_logit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_logit", value)


@pulumi.input_type
class EndpointConfigClarifyTextConfigArgs:
    def __init__(__self__, *,
                 granularity: pulumi.Input[str],
                 language: pulumi.Input[str]):
        pulumi.set(__self__, "granularity", granularity)
        pulumi.set(__self__, "language", language)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def language(self) -> pulumi.Input[str]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: pulumi.Input[str]):
        pulumi.set(self, "language", value)


@pulumi.input_type
class EndpointConfigDataCaptureConfigArgs:
    def __init__(__self__, *,
                 capture_options: pulumi.Input[Sequence[pulumi.Input['EndpointConfigCaptureOptionArgs']]],
                 destination_s3_uri: pulumi.Input[str],
                 initial_sampling_percentage: pulumi.Input[int],
                 capture_content_type_header: Optional[pulumi.Input['EndpointConfigCaptureContentTypeHeaderArgs']] = None,
                 enable_capture: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capture_options", capture_options)
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "initial_sampling_percentage", initial_sampling_percentage)
        if capture_content_type_header is not None:
            pulumi.set(__self__, "capture_content_type_header", capture_content_type_header)
        if enable_capture is not None:
            pulumi.set(__self__, "enable_capture", enable_capture)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="captureOptions")
    def capture_options(self) -> pulumi.Input[Sequence[pulumi.Input['EndpointConfigCaptureOptionArgs']]]:
        return pulumi.get(self, "capture_options")

    @capture_options.setter
    def capture_options(self, value: pulumi.Input[Sequence[pulumi.Input['EndpointConfigCaptureOptionArgs']]]):
        pulumi.set(self, "capture_options", value)

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_s3_uri")

    @destination_s3_uri.setter
    def destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_s3_uri", value)

    @property
    @pulumi.getter(name="initialSamplingPercentage")
    def initial_sampling_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "initial_sampling_percentage")

    @initial_sampling_percentage.setter
    def initial_sampling_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "initial_sampling_percentage", value)

    @property
    @pulumi.getter(name="captureContentTypeHeader")
    def capture_content_type_header(self) -> Optional[pulumi.Input['EndpointConfigCaptureContentTypeHeaderArgs']]:
        return pulumi.get(self, "capture_content_type_header")

    @capture_content_type_header.setter
    def capture_content_type_header(self, value: Optional[pulumi.Input['EndpointConfigCaptureContentTypeHeaderArgs']]):
        pulumi.set(self, "capture_content_type_header", value)

    @property
    @pulumi.getter(name="enableCapture")
    def enable_capture(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_capture")

    @enable_capture.setter
    def enable_capture(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_capture", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class EndpointConfigExplainerConfigArgs:
    def __init__(__self__, *,
                 clarify_explainer_config: Optional[pulumi.Input['EndpointConfigClarifyExplainerConfigArgs']] = None):
        if clarify_explainer_config is not None:
            pulumi.set(__self__, "clarify_explainer_config", clarify_explainer_config)

    @property
    @pulumi.getter(name="clarifyExplainerConfig")
    def clarify_explainer_config(self) -> Optional[pulumi.Input['EndpointConfigClarifyExplainerConfigArgs']]:
        return pulumi.get(self, "clarify_explainer_config")

    @clarify_explainer_config.setter
    def clarify_explainer_config(self, value: Optional[pulumi.Input['EndpointConfigClarifyExplainerConfigArgs']]):
        pulumi.set(self, "clarify_explainer_config", value)


@pulumi.input_type
class EndpointConfigProductionVariantArgs:
    def __init__(__self__, *,
                 initial_variant_weight: pulumi.Input[float],
                 model_name: pulumi.Input[str],
                 variant_name: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_download_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 serverless_config: Optional[pulumi.Input['EndpointConfigServerlessConfigArgs']] = None,
                 volume_size_in_gb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "variant_name", variant_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> pulumi.Input[float]:
        return pulumi.get(self, "initial_variant_weight")

    @initial_variant_weight.setter
    def initial_variant_weight(self, value: pulumi.Input[float]):
        pulumi.set(self, "initial_variant_weight", value)

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model_name")

    @model_name.setter
    def model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_name", value)

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "variant_name")

    @variant_name.setter
    def variant_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "variant_name", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @container_startup_health_check_timeout_in_seconds.setter
    def container_startup_health_check_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_startup_health_check_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @model_data_download_timeout_in_seconds.setter
    def model_data_download_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "model_data_download_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional[pulumi.Input['EndpointConfigServerlessConfigArgs']]:
        return pulumi.get(self, "serverless_config")

    @serverless_config.setter
    def serverless_config(self, value: Optional[pulumi.Input['EndpointConfigServerlessConfigArgs']]):
        pulumi.set(self, "serverless_config", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size_in_gb", value)


@pulumi.input_type
class EndpointConfigServerlessConfigArgs:
    def __init__(__self__, *,
                 max_concurrency: pulumi.Input[int],
                 memory_size_in_mb: pulumi.Input[int]):
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="memorySizeInMB")
    def memory_size_in_mb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory_size_in_mb")

    @memory_size_in_mb.setter
    def memory_size_in_mb(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory_size_in_mb", value)


@pulumi.input_type
class EndpointConfigTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointDeploymentConfigArgs:
    def __init__(__self__, *,
                 blue_green_update_policy: pulumi.Input['EndpointBlueGreenUpdatePolicyArgs'],
                 auto_rollback_configuration: Optional[pulumi.Input['EndpointAutoRollbackConfigArgs']] = None):
        pulumi.set(__self__, "blue_green_update_policy", blue_green_update_policy)
        if auto_rollback_configuration is not None:
            pulumi.set(__self__, "auto_rollback_configuration", auto_rollback_configuration)

    @property
    @pulumi.getter(name="blueGreenUpdatePolicy")
    def blue_green_update_policy(self) -> pulumi.Input['EndpointBlueGreenUpdatePolicyArgs']:
        return pulumi.get(self, "blue_green_update_policy")

    @blue_green_update_policy.setter
    def blue_green_update_policy(self, value: pulumi.Input['EndpointBlueGreenUpdatePolicyArgs']):
        pulumi.set(self, "blue_green_update_policy", value)

    @property
    @pulumi.getter(name="autoRollbackConfiguration")
    def auto_rollback_configuration(self) -> Optional[pulumi.Input['EndpointAutoRollbackConfigArgs']]:
        return pulumi.get(self, "auto_rollback_configuration")

    @auto_rollback_configuration.setter
    def auto_rollback_configuration(self, value: Optional[pulumi.Input['EndpointAutoRollbackConfigArgs']]):
        pulumi.set(self, "auto_rollback_configuration", value)


@pulumi.input_type
class EndpointTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EndpointTrafficRoutingConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 canary_size: Optional[pulumi.Input['EndpointCapacitySizeArgs']] = None,
                 linear_step_size: Optional[pulumi.Input['EndpointCapacitySizeArgs']] = None,
                 wait_interval_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if canary_size is not None:
            pulumi.set(__self__, "canary_size", canary_size)
        if linear_step_size is not None:
            pulumi.set(__self__, "linear_step_size", linear_step_size)
        if wait_interval_in_seconds is not None:
            pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="canarySize")
    def canary_size(self) -> Optional[pulumi.Input['EndpointCapacitySizeArgs']]:
        return pulumi.get(self, "canary_size")

    @canary_size.setter
    def canary_size(self, value: Optional[pulumi.Input['EndpointCapacitySizeArgs']]):
        pulumi.set(self, "canary_size", value)

    @property
    @pulumi.getter(name="linearStepSize")
    def linear_step_size(self) -> Optional[pulumi.Input['EndpointCapacitySizeArgs']]:
        return pulumi.get(self, "linear_step_size")

    @linear_step_size.setter
    def linear_step_size(self, value: Optional[pulumi.Input['EndpointCapacitySizeArgs']]):
        pulumi.set(self, "linear_step_size", value)

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wait_interval_in_seconds")

    @wait_interval_in_seconds.setter
    def wait_interval_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_interval_in_seconds", value)


@pulumi.input_type
class EndpointVariantPropertyArgs:
    def __init__(__self__, *,
                 variant_property_type: Optional[pulumi.Input[str]] = None):
        if variant_property_type is not None:
            pulumi.set(__self__, "variant_property_type", variant_property_type)

    @property
    @pulumi.getter(name="variantPropertyType")
    def variant_property_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variant_property_type")

    @variant_property_type.setter
    def variant_property_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variant_property_type", value)


@pulumi.input_type
class FeatureGroupDataCatalogConfigArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class FeatureGroupFeatureDefinitionArgs:
    def __init__(__self__, *,
                 feature_name: pulumi.Input[str],
                 feature_type: pulumi.Input['FeatureGroupFeatureDefinitionFeatureType']):
        pulumi.set(__self__, "feature_name", feature_name)
        pulumi.set(__self__, "feature_type", feature_type)

    @property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "feature_name")

    @feature_name.setter
    def feature_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "feature_name", value)

    @property
    @pulumi.getter(name="featureType")
    def feature_type(self) -> pulumi.Input['FeatureGroupFeatureDefinitionFeatureType']:
        return pulumi.get(self, "feature_type")

    @feature_type.setter
    def feature_type(self, value: pulumi.Input['FeatureGroupFeatureDefinitionFeatureType']):
        pulumi.set(self, "feature_type", value)


@pulumi.input_type
class FeatureGroupOnlineStoreSecurityConfigArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FeatureGroupS3StorageConfigArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "s3_uri", s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class FeatureGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelBiasJobDefinitionBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['ModelBiasJobDefinitionDatasetFormatArgs'],
                 local_path: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 features_attribute: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 probability_threshold_attribute: Optional[pulumi.Input[float]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3InputMode']] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        The batch transform input for a monitoring job.
        :param pulumi.Input[str] data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] end_time_offset: Monitoring end time offset, e.g. PT0H
        :param pulumi.Input[str] features_attribute: JSONpath to locate features in JSONlines dataset
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param pulumi.Input[str] start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['ModelBiasJobDefinitionDatasetFormatArgs']:
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['ModelBiasJobDefinitionDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @features_attribute.setter
    def features_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "features_attribute", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "probability_threshold_attribute")

    @probability_threshold_attribute.setter
    def probability_threshold_attribute(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "probability_threshold_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


@pulumi.input_type
class ModelBiasJobDefinitionClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class ModelBiasJobDefinitionConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelBiasJobDefinitionCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        The CSV format
        :param pulumi.Input[bool] header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class ModelBiasJobDefinitionDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['ModelBiasJobDefinitionCsvArgs']] = None,
                 json: Optional[pulumi.Input['ModelBiasJobDefinitionJsonArgs']] = None,
                 parquet: Optional[pulumi.Input[bool]] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet", value)


@pulumi.input_type
class ModelBiasJobDefinitionEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 features_attribute: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 probability_threshold_attribute: Optional[pulumi.Input[float]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3InputMode']] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        The endpoint for a monitoring job.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] end_time_offset: Monitoring end time offset, e.g. PT0H
        :param pulumi.Input[str] features_attribute: JSONpath to locate features in JSONlines dataset
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelBiasJobDefinitionEndpointInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelBiasJobDefinitionEndpointInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param pulumi.Input[str] start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @features_attribute.setter
    def features_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "features_attribute", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "probability_threshold_attribute")

    @probability_threshold_attribute.setter
    def probability_threshold_attribute(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "probability_threshold_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


@pulumi.input_type
class ModelBiasJobDefinitionJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        The Json format
        :param pulumi.Input[bool] line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class ModelBiasJobDefinitionModelBiasAppSpecificationArgs:
    def __init__(__self__, *,
                 config_uri: pulumi.Input[str],
                 image_uri: pulumi.Input[str],
                 environment: Optional[Any] = None):
        """
        Container image configuration object for the monitoring job.
        :param pulumi.Input[str] config_uri: The S3 URI to an analysis configuration file
        :param pulumi.Input[str] image_uri: The container image to be run by the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "config_uri", config_uri)
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="configUri")
    def config_uri(self) -> pulumi.Input[str]:
        """
        The S3 URI to an analysis configuration file
        """
        return pulumi.get(self, "config_uri")

    @config_uri.setter
    def config_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_uri", value)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class ModelBiasJobDefinitionModelBiasBaselineConfigArgs:
    def __init__(__self__, *,
                 baselining_job_name: Optional[pulumi.Input[str]] = None,
                 constraints_resource: Optional[pulumi.Input['ModelBiasJobDefinitionConstraintsResourceArgs']] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baselining_job_name")

    @baselining_job_name.setter
    def baselining_job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baselining_job_name", value)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionConstraintsResourceArgs']]:
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)


@pulumi.input_type
class ModelBiasJobDefinitionModelBiasJobInputArgs:
    def __init__(__self__, *,
                 ground_truth_s3_input: pulumi.Input['ModelBiasJobDefinitionMonitoringGroundTruthS3InputArgs'],
                 batch_transform_input: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputArgs']] = None):
        """
        The inputs for a monitoring job.
        """
        pulumi.set(__self__, "ground_truth_s3_input", ground_truth_s3_input)
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="groundTruthS3Input")
    def ground_truth_s3_input(self) -> pulumi.Input['ModelBiasJobDefinitionMonitoringGroundTruthS3InputArgs']:
        return pulumi.get(self, "ground_truth_s3_input")

    @ground_truth_s3_input.setter
    def ground_truth_s3_input(self, value: pulumi.Input['ModelBiasJobDefinitionMonitoringGroundTruthS3InputArgs']):
        pulumi.set(self, "ground_truth_s3_input", value)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputArgs']]:
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputArgs']]:
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class ModelBiasJobDefinitionMonitoringGroundTruthS3InputArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str]):
        """
        Ground truth input provided in S3 
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelBiasJobDefinitionMonitoringOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input[Sequence[pulumi.Input['ModelBiasJobDefinitionMonitoringOutputArgs']]],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        The output configuration for monitoring jobs.
        :param pulumi.Input[Sequence[pulumi.Input['ModelBiasJobDefinitionMonitoringOutputArgs']]] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input[Sequence[pulumi.Input['ModelBiasJobDefinitionMonitoringOutputArgs']]]:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input[Sequence[pulumi.Input['ModelBiasJobDefinitionMonitoringOutputArgs']]]):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class ModelBiasJobDefinitionMonitoringOutputArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['ModelBiasJobDefinitionS3OutputArgs']):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['ModelBiasJobDefinitionS3OutputArgs']:
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['ModelBiasJobDefinitionS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class ModelBiasJobDefinitionMonitoringResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['ModelBiasJobDefinitionClusterConfigArgs']):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['ModelBiasJobDefinitionClusterConfigArgs']:
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['ModelBiasJobDefinitionClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class ModelBiasJobDefinitionNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['ModelBiasJobDefinitionVpcConfigArgs']] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class ModelBiasJobDefinitionS3OutputArgs:
    def __init__(__self__, *,
                 local_path: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 s3_upload_mode: Optional[pulumi.Input['ModelBiasJobDefinitionS3OutputS3UploadMode']] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param pulumi.Input[str] local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param pulumi.Input['ModelBiasJobDefinitionS3OutputS3UploadMode'] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input['ModelBiasJobDefinitionS3OutputS3UploadMode']]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input['ModelBiasJobDefinitionS3OutputS3UploadMode']]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class ModelBiasJobDefinitionStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: pulumi.Input[int]):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> pulumi.Input[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class ModelBiasJobDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelBiasJobDefinitionVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class ModelContainerDefinitionArgs:
    def __init__(__self__, *,
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[Any] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_config: Optional[pulumi.Input['ModelImageConfigArgs']] = None,
                 inference_specification_name: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None,
                 model_package_name: Optional[pulumi.Input[str]] = None,
                 multi_model_config: Optional[pulumi.Input['ModelMultiModelConfigArgs']] = None):
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if inference_specification_name is not None:
            pulumi.set(__self__, "inference_specification_name", inference_specification_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)
        if multi_model_config is not None:
            pulumi.set(__self__, "multi_model_config", multi_model_config)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional[pulumi.Input['ModelImageConfigArgs']]:
        return pulumi.get(self, "image_config")

    @image_config.setter
    def image_config(self, value: Optional[pulumi.Input['ModelImageConfigArgs']]):
        pulumi.set(self, "image_config", value)

    @property
    @pulumi.getter(name="inferenceSpecificationName")
    def inference_specification_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inference_specification_name")

    @inference_specification_name.setter
    def inference_specification_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_specification_name", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_package_name")

    @model_package_name.setter
    def model_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_package_name", value)

    @property
    @pulumi.getter(name="multiModelConfig")
    def multi_model_config(self) -> Optional[pulumi.Input['ModelMultiModelConfigArgs']]:
        return pulumi.get(self, "multi_model_config")

    @multi_model_config.setter
    def multi_model_config(self, value: Optional[pulumi.Input['ModelMultiModelConfigArgs']]):
        pulumi.set(self, "multi_model_config", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['ModelExplainabilityJobDefinitionDatasetFormatArgs'],
                 local_path: pulumi.Input[str],
                 features_attribute: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode']] = None):
        """
        The batch transform input for a monitoring job.
        :param pulumi.Input[str] data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] features_attribute: JSONpath to locate features in JSONlines dataset
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['ModelExplainabilityJobDefinitionDatasetFormatArgs']:
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['ModelExplainabilityJobDefinitionDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @features_attribute.setter
    def features_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "features_attribute", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        The CSV format
        :param pulumi.Input[bool] header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['ModelExplainabilityJobDefinitionCsvArgs']] = None,
                 json: Optional[pulumi.Input['ModelExplainabilityJobDefinitionJsonArgs']] = None,
                 parquet: Optional[pulumi.Input[bool]] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: pulumi.Input[str],
                 features_attribute: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3InputMode']] = None):
        """
        The endpoint for a monitoring job.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] features_attribute: JSONpath to locate features in JSONlines dataset
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @features_attribute.setter
    def features_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "features_attribute", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        The Json format
        :param pulumi.Input[bool] line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationArgs:
    def __init__(__self__, *,
                 config_uri: pulumi.Input[str],
                 image_uri: pulumi.Input[str],
                 environment: Optional[Any] = None):
        """
        Container image configuration object for the monitoring job.
        :param pulumi.Input[str] config_uri: The S3 URI to an analysis configuration file
        :param pulumi.Input[str] image_uri: The container image to be run by the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "config_uri", config_uri)
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="configUri")
    def config_uri(self) -> pulumi.Input[str]:
        """
        The S3 URI to an analysis configuration file
        """
        return pulumi.get(self, "config_uri")

    @config_uri.setter
    def config_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_uri", value)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigArgs:
    def __init__(__self__, *,
                 baselining_job_name: Optional[pulumi.Input[str]] = None,
                 constraints_resource: Optional[pulumi.Input['ModelExplainabilityJobDefinitionConstraintsResourceArgs']] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baselining_job_name")

    @baselining_job_name.setter
    def baselining_job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baselining_job_name", value)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionConstraintsResourceArgs']]:
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionModelExplainabilityJobInputArgs:
    def __init__(__self__, *,
                 batch_transform_input: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputArgs']] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputArgs']]:
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputArgs']]:
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionMonitoringOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input[Sequence[pulumi.Input['ModelExplainabilityJobDefinitionMonitoringOutputArgs']]],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        The output configuration for monitoring jobs.
        :param pulumi.Input[Sequence[pulumi.Input['ModelExplainabilityJobDefinitionMonitoringOutputArgs']]] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input[Sequence[pulumi.Input['ModelExplainabilityJobDefinitionMonitoringOutputArgs']]]:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input[Sequence[pulumi.Input['ModelExplainabilityJobDefinitionMonitoringOutputArgs']]]):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionMonitoringOutputArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['ModelExplainabilityJobDefinitionS3OutputArgs']):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['ModelExplainabilityJobDefinitionS3OutputArgs']:
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['ModelExplainabilityJobDefinitionS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionMonitoringResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['ModelExplainabilityJobDefinitionClusterConfigArgs']):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['ModelExplainabilityJobDefinitionClusterConfigArgs']:
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['ModelExplainabilityJobDefinitionClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['ModelExplainabilityJobDefinitionVpcConfigArgs']] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionS3OutputArgs:
    def __init__(__self__, *,
                 local_path: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 s3_upload_mode: Optional[pulumi.Input['ModelExplainabilityJobDefinitionS3OutputS3UploadMode']] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param pulumi.Input[str] local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param pulumi.Input['ModelExplainabilityJobDefinitionS3OutputS3UploadMode'] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input['ModelExplainabilityJobDefinitionS3OutputS3UploadMode']]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input['ModelExplainabilityJobDefinitionS3OutputS3UploadMode']]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: pulumi.Input[int]):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> pulumi.Input[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelExplainabilityJobDefinitionVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class ModelImageConfigArgs:
    def __init__(__self__, *,
                 repository_access_mode: pulumi.Input[str],
                 repository_auth_config: Optional[pulumi.Input['ModelRepositoryAuthConfigArgs']] = None):
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_access_mode")

    @repository_access_mode.setter
    def repository_access_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_access_mode", value)

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional[pulumi.Input['ModelRepositoryAuthConfigArgs']]:
        return pulumi.get(self, "repository_auth_config")

    @repository_auth_config.setter
    def repository_auth_config(self, value: Optional[pulumi.Input['ModelRepositoryAuthConfigArgs']]):
        pulumi.set(self, "repository_auth_config", value)


@pulumi.input_type
class ModelInferenceExecutionConfigArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ModelMultiModelConfigArgs:
    def __init__(__self__, *,
                 model_cache_setting: Optional[pulumi.Input[str]] = None):
        if model_cache_setting is not None:
            pulumi.set(__self__, "model_cache_setting", model_cache_setting)

    @property
    @pulumi.getter(name="modelCacheSetting")
    def model_cache_setting(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_cache_setting")

    @model_cache_setting.setter
    def model_cache_setting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_cache_setting", value)


@pulumi.input_type
class ModelPackageAdditionalInferenceSpecificationDefinitionArgs:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 supported_content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 supported_realtime_inference_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 supported_response_mime_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 supported_transform_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
        :param pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]] containers: The Amazon ECR registry path of the Docker image that contains the inference code.
        :param pulumi.Input[str] name: A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        :param pulumi.Input[str] description: A description of the additional Inference specification.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_content_types: The supported MIME types for the input data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_realtime_inference_instance_types: A list of the instance types that are used to generate inferences in real-time
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_response_mime_types: The supported MIME types for the output data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_transform_instance_types: A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if supported_content_types is not None:
            pulumi.set(__self__, "supported_content_types", supported_content_types)
        if supported_realtime_inference_instance_types is not None:
            pulumi.set(__self__, "supported_realtime_inference_instance_types", supported_realtime_inference_instance_types)
        if supported_response_mime_types is not None:
            pulumi.set(__self__, "supported_response_mime_types", supported_response_mime_types)
        if supported_transform_instance_types is not None:
            pulumi.set(__self__, "supported_transform_instance_types", supported_transform_instance_types)

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]]:
        """
        The Amazon ECR registry path of the Docker image that contains the inference code.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the additional Inference specification.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="supportedContentTypes")
    def supported_content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The supported MIME types for the input data.
        """
        return pulumi.get(self, "supported_content_types")

    @supported_content_types.setter
    def supported_content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_content_types", value)

    @property
    @pulumi.getter(name="supportedRealtimeInferenceInstanceTypes")
    def supported_realtime_inference_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the instance types that are used to generate inferences in real-time
        """
        return pulumi.get(self, "supported_realtime_inference_instance_types")

    @supported_realtime_inference_instance_types.setter
    def supported_realtime_inference_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_realtime_inference_instance_types", value)

    @property
    @pulumi.getter(name="supportedResponseMIMETypes")
    def supported_response_mime_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The supported MIME types for the output data.
        """
        return pulumi.get(self, "supported_response_mime_types")

    @supported_response_mime_types.setter
    def supported_response_mime_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_response_mime_types", value)

    @property
    @pulumi.getter(name="supportedTransformInstanceTypes")
    def supported_transform_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        return pulumi.get(self, "supported_transform_instance_types")

    @supported_transform_instance_types.setter
    def supported_transform_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_transform_instance_types", value)


@pulumi.input_type
class ModelPackageBiasArgs:
    def __init__(__self__, *,
                 post_training_report: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 pre_training_report: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 report: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Contains bias metrics for a model.
        """
        if post_training_report is not None:
            pulumi.set(__self__, "post_training_report", post_training_report)
        if pre_training_report is not None:
            pulumi.set(__self__, "pre_training_report", pre_training_report)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter(name="postTrainingReport")
    def post_training_report(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "post_training_report")

    @post_training_report.setter
    def post_training_report(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "post_training_report", value)

    @property
    @pulumi.getter(name="preTrainingReport")
    def pre_training_report(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "pre_training_report")

    @pre_training_report.setter
    def pre_training_report(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "pre_training_report", value)

    @property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "report", value)


@pulumi.input_type
class ModelPackageContainerDefinitionModelInputPropertiesArgs:
    def __init__(__self__, *,
                 data_input_config: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_input_config: The input configuration object for the model.
        """
        pulumi.set(__self__, "data_input_config", data_input_config)

    @property
    @pulumi.getter(name="dataInputConfig")
    def data_input_config(self) -> pulumi.Input[str]:
        """
        The input configuration object for the model.
        """
        return pulumi.get(self, "data_input_config")

    @data_input_config.setter
    def data_input_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_input_config", value)


@pulumi.input_type
class ModelPackageContainerDefinitionArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 container_hostname: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input['ModelPackageEnvironmentArgs']] = None,
                 framework: Optional[pulumi.Input[str]] = None,
                 framework_version: Optional[pulumi.Input[str]] = None,
                 image_digest: Optional[pulumi.Input[str]] = None,
                 model_data_url: Optional[pulumi.Input[str]] = None,
                 model_input: Optional[pulumi.Input['ModelPackageContainerDefinitionModelInputPropertiesArgs']] = None,
                 nearest_model_name: Optional[pulumi.Input[str]] = None,
                 product_id: Optional[pulumi.Input[str]] = None):
        """
        Describes the Docker container for the model package.
        :param pulumi.Input[str] image: The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        :param pulumi.Input[str] container_hostname: The DNS host name for the Docker container.
        :param pulumi.Input[str] framework: The machine learning framework of the model package container image.
        :param pulumi.Input[str] framework_version: The framework version of the Model Package Container Image.
        :param pulumi.Input[str] image_digest: An MD5 hash of the training algorithm that identifies the Docker image used for training.
        :param pulumi.Input[str] model_data_url: A structure with Model Input details.
        :param pulumi.Input[str] nearest_model_name: The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        :param pulumi.Input[str] product_id: The AWS Marketplace product ID of the model package.
        """
        pulumi.set(__self__, "image", image)
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if framework is not None:
            pulumi.set(__self__, "framework", framework)
        if framework_version is not None:
            pulumi.set(__self__, "framework_version", framework_version)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_input is not None:
            pulumi.set(__self__, "model_input", model_input)
        if nearest_model_name is not None:
            pulumi.set(__self__, "nearest_model_name", nearest_model_name)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS host name for the Docker container.
        """
        return pulumi.get(self, "container_hostname")

    @container_hostname.setter
    def container_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_hostname", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['ModelPackageEnvironmentArgs']]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['ModelPackageEnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def framework(self) -> Optional[pulumi.Input[str]]:
        """
        The machine learning framework of the model package container image.
        """
        return pulumi.get(self, "framework")

    @framework.setter
    def framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "framework", value)

    @property
    @pulumi.getter(name="frameworkVersion")
    def framework_version(self) -> Optional[pulumi.Input[str]]:
        """
        The framework version of the Model Package Container Image.
        """
        return pulumi.get(self, "framework_version")

    @framework_version.setter
    def framework_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "framework_version", value)

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[pulumi.Input[str]]:
        """
        An MD5 hash of the training algorithm that identifies the Docker image used for training.
        """
        return pulumi.get(self, "image_digest")

    @image_digest.setter
    def image_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_digest", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        """
        A structure with Model Input details.
        """
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)

    @property
    @pulumi.getter(name="modelInput")
    def model_input(self) -> Optional[pulumi.Input['ModelPackageContainerDefinitionModelInputPropertiesArgs']]:
        return pulumi.get(self, "model_input")

    @model_input.setter
    def model_input(self, value: Optional[pulumi.Input['ModelPackageContainerDefinitionModelInputPropertiesArgs']]):
        pulumi.set(self, "model_input", value)

    @property
    @pulumi.getter(name="nearestModelName")
    def nearest_model_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        """
        return pulumi.get(self, "nearest_model_name")

    @nearest_model_name.setter
    def nearest_model_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nearest_model_name", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Marketplace product ID of the model package.
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)


@pulumi.input_type
class ModelPackageCreatedByArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ModelPackageCustomerMetadataPropertiesArgs:
    def __init__(__self__):
        """
        The metadata properties associated with the model package versions.
        """
        pass


@pulumi.input_type
class ModelPackageDataSourceArgs:
    def __init__(__self__, *,
                 s3_data_source: pulumi.Input['ModelPackageS3DataSourceArgs']):
        """
        Describes the input source of a transform job and the way the transform job consumes it.
        """
        pulumi.set(__self__, "s3_data_source", s3_data_source)

    @property
    @pulumi.getter(name="s3DataSource")
    def s3_data_source(self) -> pulumi.Input['ModelPackageS3DataSourceArgs']:
        return pulumi.get(self, "s3_data_source")

    @s3_data_source.setter
    def s3_data_source(self, value: pulumi.Input['ModelPackageS3DataSourceArgs']):
        pulumi.set(self, "s3_data_source", value)


@pulumi.input_type
class ModelPackageDriftCheckBaselinesArgs:
    def __init__(__self__, *,
                 bias: Optional[pulumi.Input['ModelPackageDriftCheckBiasArgs']] = None,
                 explainability: Optional[pulumi.Input['ModelPackageDriftCheckExplainabilityArgs']] = None,
                 model_data_quality: Optional[pulumi.Input['ModelPackageDriftCheckModelDataQualityArgs']] = None,
                 model_quality: Optional[pulumi.Input['ModelPackageDriftCheckModelQualityArgs']] = None):
        """
        Represents the drift check baselines that can be used when the model monitor is set using the model package.
        """
        if bias is not None:
            pulumi.set(__self__, "bias", bias)
        if explainability is not None:
            pulumi.set(__self__, "explainability", explainability)
        if model_data_quality is not None:
            pulumi.set(__self__, "model_data_quality", model_data_quality)
        if model_quality is not None:
            pulumi.set(__self__, "model_quality", model_quality)

    @property
    @pulumi.getter
    def bias(self) -> Optional[pulumi.Input['ModelPackageDriftCheckBiasArgs']]:
        return pulumi.get(self, "bias")

    @bias.setter
    def bias(self, value: Optional[pulumi.Input['ModelPackageDriftCheckBiasArgs']]):
        pulumi.set(self, "bias", value)

    @property
    @pulumi.getter
    def explainability(self) -> Optional[pulumi.Input['ModelPackageDriftCheckExplainabilityArgs']]:
        return pulumi.get(self, "explainability")

    @explainability.setter
    def explainability(self, value: Optional[pulumi.Input['ModelPackageDriftCheckExplainabilityArgs']]):
        pulumi.set(self, "explainability", value)

    @property
    @pulumi.getter(name="modelDataQuality")
    def model_data_quality(self) -> Optional[pulumi.Input['ModelPackageDriftCheckModelDataQualityArgs']]:
        return pulumi.get(self, "model_data_quality")

    @model_data_quality.setter
    def model_data_quality(self, value: Optional[pulumi.Input['ModelPackageDriftCheckModelDataQualityArgs']]):
        pulumi.set(self, "model_data_quality", value)

    @property
    @pulumi.getter(name="modelQuality")
    def model_quality(self) -> Optional[pulumi.Input['ModelPackageDriftCheckModelQualityArgs']]:
        return pulumi.get(self, "model_quality")

    @model_quality.setter
    def model_quality(self, value: Optional[pulumi.Input['ModelPackageDriftCheckModelQualityArgs']]):
        pulumi.set(self, "model_quality", value)


@pulumi.input_type
class ModelPackageDriftCheckBiasArgs:
    def __init__(__self__, *,
                 config_file: Optional[pulumi.Input['ModelPackageFileSourceArgs']] = None,
                 post_training_constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 pre_training_constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
        """
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if post_training_constraints is not None:
            pulumi.set(__self__, "post_training_constraints", post_training_constraints)
        if pre_training_constraints is not None:
            pulumi.set(__self__, "pre_training_constraints", pre_training_constraints)

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[pulumi.Input['ModelPackageFileSourceArgs']]:
        return pulumi.get(self, "config_file")

    @config_file.setter
    def config_file(self, value: Optional[pulumi.Input['ModelPackageFileSourceArgs']]):
        pulumi.set(self, "config_file", value)

    @property
    @pulumi.getter(name="postTrainingConstraints")
    def post_training_constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "post_training_constraints")

    @post_training_constraints.setter
    def post_training_constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "post_training_constraints", value)

    @property
    @pulumi.getter(name="preTrainingConstraints")
    def pre_training_constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "pre_training_constraints")

    @pre_training_constraints.setter
    def pre_training_constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "pre_training_constraints", value)


@pulumi.input_type
class ModelPackageDriftCheckExplainabilityArgs:
    def __init__(__self__, *,
                 config_file: Optional[pulumi.Input['ModelPackageFileSourceArgs']] = None,
                 constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Contains explainability metrics for a model.
        """
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional[pulumi.Input['ModelPackageFileSourceArgs']]:
        return pulumi.get(self, "config_file")

    @config_file.setter
    def config_file(self, value: Optional[pulumi.Input['ModelPackageFileSourceArgs']]):
        pulumi.set(self, "config_file", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "constraints", value)


@pulumi.input_type
class ModelPackageDriftCheckModelDataQualityArgs:
    def __init__(__self__, *,
                 constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 statistics: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def statistics(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "statistics", value)


@pulumi.input_type
class ModelPackageDriftCheckModelQualityArgs:
    def __init__(__self__, *,
                 constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 statistics: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def statistics(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "statistics", value)


@pulumi.input_type
class ModelPackageEnvironmentArgs:
    def __init__(__self__):
        """
        Sets the environment variables in the Docker container
        """
        pass


@pulumi.input_type
class ModelPackageExplainabilityArgs:
    def __init__(__self__, *,
                 report: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Contains explainability metrics for a model.
        """
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def report(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "report", value)


@pulumi.input_type
class ModelPackageFileSourceArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str],
                 content_digest: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None):
        """
        Represents a File Source Object.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the file source.
        :param pulumi.Input[str] content_digest: The digest of the file source.
        :param pulumi.Input[str] content_type: The type of content stored in the file source.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if content_digest is not None:
            pulumi.set(__self__, "content_digest", content_digest)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 URI for the file source.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="contentDigest")
    def content_digest(self) -> Optional[pulumi.Input[str]]:
        """
        The digest of the file source.
        """
        return pulumi.get(self, "content_digest")

    @content_digest.setter
    def content_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_digest", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of content stored in the file source.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)


@pulumi.input_type
class ModelPackageGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelPackageInferenceSpecificationArgs:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]],
                 supported_content_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 supported_response_mime_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 supported_realtime_inference_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 supported_transform_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Details about inference jobs that can be run with models based on this model package.
        :param pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]] containers: The Amazon ECR registry path of the Docker image that contains the inference code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_content_types: The supported MIME types for the input data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_response_mime_types: The supported MIME types for the output data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_realtime_inference_instance_types: A list of the instance types that are used to generate inferences in real-time
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_transform_instance_types: A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "supported_content_types", supported_content_types)
        pulumi.set(__self__, "supported_response_mime_types", supported_response_mime_types)
        if supported_realtime_inference_instance_types is not None:
            pulumi.set(__self__, "supported_realtime_inference_instance_types", supported_realtime_inference_instance_types)
        if supported_transform_instance_types is not None:
            pulumi.set(__self__, "supported_transform_instance_types", supported_transform_instance_types)

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]]:
        """
        The Amazon ECR registry path of the Docker image that contains the inference code.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['ModelPackageContainerDefinitionArgs']]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="supportedContentTypes")
    def supported_content_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The supported MIME types for the input data.
        """
        return pulumi.get(self, "supported_content_types")

    @supported_content_types.setter
    def supported_content_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "supported_content_types", value)

    @property
    @pulumi.getter(name="supportedResponseMIMETypes")
    def supported_response_mime_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The supported MIME types for the output data.
        """
        return pulumi.get(self, "supported_response_mime_types")

    @supported_response_mime_types.setter
    def supported_response_mime_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "supported_response_mime_types", value)

    @property
    @pulumi.getter(name="supportedRealtimeInferenceInstanceTypes")
    def supported_realtime_inference_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the instance types that are used to generate inferences in real-time
        """
        return pulumi.get(self, "supported_realtime_inference_instance_types")

    @supported_realtime_inference_instance_types.setter
    def supported_realtime_inference_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_realtime_inference_instance_types", value)

    @property
    @pulumi.getter(name="supportedTransformInstanceTypes")
    def supported_transform_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        return pulumi.get(self, "supported_transform_instance_types")

    @supported_transform_instance_types.setter
    def supported_transform_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_transform_instance_types", value)


@pulumi.input_type
class ModelPackageLastModifiedByArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ModelPackageMetadataPropertiesArgs:
    def __init__(__self__, *,
                 commit_id: Optional[pulumi.Input[str]] = None,
                 generated_by: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None):
        """
        Metadata properties of the tracking entity, trial, or trial component.
        :param pulumi.Input[str] commit_id: The commit ID.
        :param pulumi.Input[str] generated_by: The entity this entity was generated by.
        :param pulumi.Input[str] project_id: The project ID metadata.
        :param pulumi.Input[str] repository: The repository metadata.
        """
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if generated_by is not None:
            pulumi.set(__self__, "generated_by", generated_by)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[pulumi.Input[str]]:
        """
        The commit ID.
        """
        return pulumi.get(self, "commit_id")

    @commit_id.setter
    def commit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_id", value)

    @property
    @pulumi.getter(name="generatedBy")
    def generated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The entity this entity was generated by.
        """
        return pulumi.get(self, "generated_by")

    @generated_by.setter
    def generated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generated_by", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project ID metadata.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The repository metadata.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)


@pulumi.input_type
class ModelPackageMetricsSourceArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 content_digest: Optional[pulumi.Input[str]] = None):
        """
        Represents a Metric Source Object.
        :param pulumi.Input[str] content_type: The type of content stored in the metric source.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the metric source.
        :param pulumi.Input[str] content_digest: The digest of the metric source.
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if content_digest is not None:
            pulumi.set(__self__, "content_digest", content_digest)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The type of content stored in the metric source.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        The Amazon S3 URI for the metric source.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="contentDigest")
    def content_digest(self) -> Optional[pulumi.Input[str]]:
        """
        The digest of the metric source.
        """
        return pulumi.get(self, "content_digest")

    @content_digest.setter
    def content_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_digest", value)


@pulumi.input_type
class ModelPackageModelDataQualityArgs:
    def __init__(__self__, *,
                 constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 statistics: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Metrics that measure the quality of the input data for a model.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def statistics(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "statistics", value)


@pulumi.input_type
class ModelPackageModelMetricsArgs:
    def __init__(__self__, *,
                 bias: Optional[pulumi.Input['ModelPackageBiasArgs']] = None,
                 explainability: Optional[pulumi.Input['ModelPackageExplainabilityArgs']] = None,
                 model_data_quality: Optional[pulumi.Input['ModelPackageModelDataQualityArgs']] = None,
                 model_quality: Optional[pulumi.Input['ModelPackageModelQualityArgs']] = None):
        """
        A structure that contains model metrics reports.
        """
        if bias is not None:
            pulumi.set(__self__, "bias", bias)
        if explainability is not None:
            pulumi.set(__self__, "explainability", explainability)
        if model_data_quality is not None:
            pulumi.set(__self__, "model_data_quality", model_data_quality)
        if model_quality is not None:
            pulumi.set(__self__, "model_quality", model_quality)

    @property
    @pulumi.getter
    def bias(self) -> Optional[pulumi.Input['ModelPackageBiasArgs']]:
        return pulumi.get(self, "bias")

    @bias.setter
    def bias(self, value: Optional[pulumi.Input['ModelPackageBiasArgs']]):
        pulumi.set(self, "bias", value)

    @property
    @pulumi.getter
    def explainability(self) -> Optional[pulumi.Input['ModelPackageExplainabilityArgs']]:
        return pulumi.get(self, "explainability")

    @explainability.setter
    def explainability(self, value: Optional[pulumi.Input['ModelPackageExplainabilityArgs']]):
        pulumi.set(self, "explainability", value)

    @property
    @pulumi.getter(name="modelDataQuality")
    def model_data_quality(self) -> Optional[pulumi.Input['ModelPackageModelDataQualityArgs']]:
        return pulumi.get(self, "model_data_quality")

    @model_data_quality.setter
    def model_data_quality(self, value: Optional[pulumi.Input['ModelPackageModelDataQualityArgs']]):
        pulumi.set(self, "model_data_quality", value)

    @property
    @pulumi.getter(name="modelQuality")
    def model_quality(self) -> Optional[pulumi.Input['ModelPackageModelQualityArgs']]:
        return pulumi.get(self, "model_quality")

    @model_quality.setter
    def model_quality(self, value: Optional[pulumi.Input['ModelPackageModelQualityArgs']]):
        pulumi.set(self, "model_quality", value)


@pulumi.input_type
class ModelPackageModelQualityArgs:
    def __init__(__self__, *,
                 constraints: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None,
                 statistics: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']] = None):
        """
        Metrics that measure the quality of a model.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def statistics(self) -> Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Optional[pulumi.Input['ModelPackageMetricsSourceArgs']]):
        pulumi.set(self, "statistics", value)


@pulumi.input_type
class ModelPackageS3DataSourceArgs:
    def __init__(__self__, *,
                 s3_data_type: pulumi.Input['ModelPackageS3DataSourceS3DataType'],
                 s3_uri: pulumi.Input[str]):
        """
        Describes the S3 data source.
        :param pulumi.Input['ModelPackageS3DataSourceS3DataType'] s3_data_type: The S3 Data Source Type
        :param pulumi.Input[str] s3_uri: Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
        """
        pulumi.set(__self__, "s3_data_type", s3_data_type)
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3DataType")
    def s3_data_type(self) -> pulumi.Input['ModelPackageS3DataSourceS3DataType']:
        """
        The S3 Data Source Type
        """
        return pulumi.get(self, "s3_data_type")

    @s3_data_type.setter
    def s3_data_type(self, value: pulumi.Input['ModelPackageS3DataSourceS3DataType']):
        pulumi.set(self, "s3_data_type", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelPackageSourceAlgorithmSpecificationArgs:
    def __init__(__self__, *,
                 source_algorithms: pulumi.Input[Sequence[pulumi.Input['ModelPackageSourceAlgorithmArgs']]]):
        """
        Details about the algorithm that was used to create the model package.
        :param pulumi.Input[Sequence[pulumi.Input['ModelPackageSourceAlgorithmArgs']]] source_algorithms: A list of algorithms that were used to create a model package.
        """
        pulumi.set(__self__, "source_algorithms", source_algorithms)

    @property
    @pulumi.getter(name="sourceAlgorithms")
    def source_algorithms(self) -> pulumi.Input[Sequence[pulumi.Input['ModelPackageSourceAlgorithmArgs']]]:
        """
        A list of algorithms that were used to create a model package.
        """
        return pulumi.get(self, "source_algorithms")

    @source_algorithms.setter
    def source_algorithms(self, value: pulumi.Input[Sequence[pulumi.Input['ModelPackageSourceAlgorithmArgs']]]):
        pulumi.set(self, "source_algorithms", value)


@pulumi.input_type
class ModelPackageSourceAlgorithmArgs:
    def __init__(__self__, *,
                 algorithm_name: pulumi.Input[str],
                 model_data_url: Optional[pulumi.Input[str]] = None):
        """
        Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        :param pulumi.Input[str] algorithm_name: The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        :param pulumi.Input[str] model_data_url: The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        """
        pulumi.set(__self__, "algorithm_name", algorithm_name)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)

    @property
    @pulumi.getter(name="algorithmName")
    def algorithm_name(self) -> pulumi.Input[str]:
        """
        The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        """
        return pulumi.get(self, "algorithm_name")

    @algorithm_name.setter
    def algorithm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm_name", value)

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        """
        return pulumi.get(self, "model_data_url")

    @model_data_url.setter
    def model_data_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_url", value)


@pulumi.input_type
class ModelPackageStatusDetailsArgs:
    def __init__(__self__, *,
                 validation_statuses: pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]],
                 image_scan_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]]] = None):
        """
        Details about the current status of the model package.
        """
        pulumi.set(__self__, "validation_statuses", validation_statuses)
        if image_scan_statuses is not None:
            pulumi.set(__self__, "image_scan_statuses", image_scan_statuses)

    @property
    @pulumi.getter(name="validationStatuses")
    def validation_statuses(self) -> pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]]:
        return pulumi.get(self, "validation_statuses")

    @validation_statuses.setter
    def validation_statuses(self, value: pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]]):
        pulumi.set(self, "validation_statuses", value)

    @property
    @pulumi.getter(name="imageScanStatuses")
    def image_scan_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]]]:
        return pulumi.get(self, "image_scan_statuses")

    @image_scan_statuses.setter
    def image_scan_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ModelPackageStatusItemArgs']]]]):
        pulumi.set(self, "image_scan_statuses", value)


@pulumi.input_type
class ModelPackageStatusItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status: pulumi.Input['ModelPackageStatusItemStatus'],
                 failure_reason: Optional[pulumi.Input[str]] = None):
        """
        Represents the overall status of a model package.
        :param pulumi.Input[str] name: The name of the model package for which the overall status is being reported.
        :param pulumi.Input['ModelPackageStatusItemStatus'] status: The current status.
        :param pulumi.Input[str] failure_reason: If the overall status is Failed, the reason for the failure.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the model package for which the overall status is being reported.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['ModelPackageStatusItemStatus']:
        """
        The current status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['ModelPackageStatusItemStatus']):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        If the overall status is Failed, the reason for the failure.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)


@pulumi.input_type
class ModelPackageTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelPackageTransformInputArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input['ModelPackageDataSourceArgs'],
                 compression_type: Optional[pulumi.Input['ModelPackageTransformInputCompressionType']] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 split_type: Optional[pulumi.Input['ModelPackageTransformInputSplitType']] = None):
        """
        Describes the input source of a transform job and the way the transform job consumes it.
        :param pulumi.Input['ModelPackageTransformInputCompressionType'] compression_type: If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        :param pulumi.Input[str] content_type: The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        :param pulumi.Input['ModelPackageTransformInputSplitType'] split_type: The method to use to split the transform job's data files into smaller batches. 
        """
        pulumi.set(__self__, "data_source", data_source)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if split_type is not None:
            pulumi.set(__self__, "split_type", split_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input['ModelPackageDataSourceArgs']:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input['ModelPackageDataSourceArgs']):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input['ModelPackageTransformInputCompressionType']]:
        """
        If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input['ModelPackageTransformInputCompressionType']]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="splitType")
    def split_type(self) -> Optional[pulumi.Input['ModelPackageTransformInputSplitType']]:
        """
        The method to use to split the transform job's data files into smaller batches. 
        """
        return pulumi.get(self, "split_type")

    @split_type.setter
    def split_type(self, value: Optional[pulumi.Input['ModelPackageTransformInputSplitType']]):
        pulumi.set(self, "split_type", value)


@pulumi.input_type
class ModelPackageTransformJobDefinitionArgs:
    def __init__(__self__, *,
                 transform_input: pulumi.Input['ModelPackageTransformInputArgs'],
                 transform_output: pulumi.Input['ModelPackageTransformOutputArgs'],
                 transform_resources: pulumi.Input['ModelPackageTransformResourcesArgs'],
                 batch_strategy: Optional[pulumi.Input['ModelPackageTransformJobDefinitionBatchStrategy']] = None,
                 environment: Optional[pulumi.Input['ModelPackageEnvironmentArgs']] = None,
                 max_concurrent_transforms: Optional[pulumi.Input[int]] = None,
                 max_payload_in_mb: Optional[pulumi.Input[int]] = None):
        """
        Defines the input needed to run a transform job using the inference specification specified in the algorithm.
        :param pulumi.Input['ModelPackageTransformJobDefinitionBatchStrategy'] batch_strategy: A string that determines the number of records included in a single mini-batch.
        :param pulumi.Input[int] max_concurrent_transforms: The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        :param pulumi.Input[int] max_payload_in_mb: The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        """
        pulumi.set(__self__, "transform_input", transform_input)
        pulumi.set(__self__, "transform_output", transform_output)
        pulumi.set(__self__, "transform_resources", transform_resources)
        if batch_strategy is not None:
            pulumi.set(__self__, "batch_strategy", batch_strategy)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if max_concurrent_transforms is not None:
            pulumi.set(__self__, "max_concurrent_transforms", max_concurrent_transforms)
        if max_payload_in_mb is not None:
            pulumi.set(__self__, "max_payload_in_mb", max_payload_in_mb)

    @property
    @pulumi.getter(name="transformInput")
    def transform_input(self) -> pulumi.Input['ModelPackageTransformInputArgs']:
        return pulumi.get(self, "transform_input")

    @transform_input.setter
    def transform_input(self, value: pulumi.Input['ModelPackageTransformInputArgs']):
        pulumi.set(self, "transform_input", value)

    @property
    @pulumi.getter(name="transformOutput")
    def transform_output(self) -> pulumi.Input['ModelPackageTransformOutputArgs']:
        return pulumi.get(self, "transform_output")

    @transform_output.setter
    def transform_output(self, value: pulumi.Input['ModelPackageTransformOutputArgs']):
        pulumi.set(self, "transform_output", value)

    @property
    @pulumi.getter(name="transformResources")
    def transform_resources(self) -> pulumi.Input['ModelPackageTransformResourcesArgs']:
        return pulumi.get(self, "transform_resources")

    @transform_resources.setter
    def transform_resources(self, value: pulumi.Input['ModelPackageTransformResourcesArgs']):
        pulumi.set(self, "transform_resources", value)

    @property
    @pulumi.getter(name="batchStrategy")
    def batch_strategy(self) -> Optional[pulumi.Input['ModelPackageTransformJobDefinitionBatchStrategy']]:
        """
        A string that determines the number of records included in a single mini-batch.
        """
        return pulumi.get(self, "batch_strategy")

    @batch_strategy.setter
    def batch_strategy(self, value: Optional[pulumi.Input['ModelPackageTransformJobDefinitionBatchStrategy']]):
        pulumi.set(self, "batch_strategy", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['ModelPackageEnvironmentArgs']]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['ModelPackageEnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="maxConcurrentTransforms")
    def max_concurrent_transforms(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        """
        return pulumi.get(self, "max_concurrent_transforms")

    @max_concurrent_transforms.setter
    def max_concurrent_transforms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_transforms", value)

    @property
    @pulumi.getter(name="maxPayloadInMB")
    def max_payload_in_mb(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        """
        return pulumi.get(self, "max_payload_in_mb")

    @max_payload_in_mb.setter
    def max_payload_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_payload_in_mb", value)


@pulumi.input_type
class ModelPackageTransformOutputArgs:
    def __init__(__self__, *,
                 s3_output_path: pulumi.Input[str],
                 accept: Optional[pulumi.Input[str]] = None,
                 assemble_with: Optional[pulumi.Input['ModelPackageTransformOutputAssembleWith']] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Describes the results of a transform job.
        :param pulumi.Input[str] s3_output_path: The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
        :param pulumi.Input[str] accept: The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        :param pulumi.Input['ModelPackageTransformOutputAssembleWith'] assemble_with: Defines how to assemble the results of the transform job as a single S3 object.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if assemble_with is not None:
            pulumi.set(__self__, "assemble_with", assemble_with)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> pulumi.Input[str]:
        """
        The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_output_path", value)

    @property
    @pulumi.getter
    def accept(self) -> Optional[pulumi.Input[str]]:
        """
        The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        """
        return pulumi.get(self, "accept")

    @accept.setter
    def accept(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept", value)

    @property
    @pulumi.getter(name="assembleWith")
    def assemble_with(self) -> Optional[pulumi.Input['ModelPackageTransformOutputAssembleWith']]:
        """
        Defines how to assemble the results of the transform job as a single S3 object.
        """
        return pulumi.get(self, "assemble_with")

    @assemble_with.setter
    def assemble_with(self, value: Optional[pulumi.Input['ModelPackageTransformOutputAssembleWith']]):
        pulumi.set(self, "assemble_with", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class ModelPackageTransformResourcesArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Describes the resources, including ML instance types and ML instance count, to use for transform job.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the transform job.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the transform job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class ModelPackageValidationProfileArgs:
    def __init__(__self__, *,
                 profile_name: pulumi.Input[str],
                 transform_job_definition: pulumi.Input['ModelPackageTransformJobDefinitionArgs']):
        """
        Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
        :param pulumi.Input[str] profile_name: The name of the profile for the model package.
        """
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "transform_job_definition", transform_job_definition)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> pulumi.Input[str]:
        """
        The name of the profile for the model package.
        """
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_name", value)

    @property
    @pulumi.getter(name="transformJobDefinition")
    def transform_job_definition(self) -> pulumi.Input['ModelPackageTransformJobDefinitionArgs']:
        return pulumi.get(self, "transform_job_definition")

    @transform_job_definition.setter
    def transform_job_definition(self, value: pulumi.Input['ModelPackageTransformJobDefinitionArgs']):
        pulumi.set(self, "transform_job_definition", value)


@pulumi.input_type
class ModelPackageValidationSpecificationArgs:
    def __init__(__self__, *,
                 validation_profiles: pulumi.Input[Sequence[pulumi.Input['ModelPackageValidationProfileArgs']]],
                 validation_role: pulumi.Input[str]):
        """
        Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
        :param pulumi.Input[str] validation_role: The IAM roles to be used for the validation of the model package.
        """
        pulumi.set(__self__, "validation_profiles", validation_profiles)
        pulumi.set(__self__, "validation_role", validation_role)

    @property
    @pulumi.getter(name="validationProfiles")
    def validation_profiles(self) -> pulumi.Input[Sequence[pulumi.Input['ModelPackageValidationProfileArgs']]]:
        return pulumi.get(self, "validation_profiles")

    @validation_profiles.setter
    def validation_profiles(self, value: pulumi.Input[Sequence[pulumi.Input['ModelPackageValidationProfileArgs']]]):
        pulumi.set(self, "validation_profiles", value)

    @property
    @pulumi.getter(name="validationRole")
    def validation_role(self) -> pulumi.Input[str]:
        """
        The IAM roles to be used for the validation of the model package.
        """
        return pulumi.get(self, "validation_role")

    @validation_role.setter
    def validation_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "validation_role", value)


@pulumi.input_type
class ModelQualityJobDefinitionBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['ModelQualityJobDefinitionDatasetFormatArgs'],
                 local_path: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 probability_threshold_attribute: Optional[pulumi.Input[float]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3InputMode']] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        The batch transform input for a monitoring job.
        :param pulumi.Input[str] data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] end_time_offset: Monitoring end time offset, e.g. PT0H
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param pulumi.Input[str] start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['ModelQualityJobDefinitionDatasetFormatArgs']:
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['ModelQualityJobDefinitionDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "probability_threshold_attribute")

    @probability_threshold_attribute.setter
    def probability_threshold_attribute(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "probability_threshold_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


@pulumi.input_type
class ModelQualityJobDefinitionClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class ModelQualityJobDefinitionConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelQualityJobDefinitionCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        The CSV format
        :param pulumi.Input[bool] header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class ModelQualityJobDefinitionDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['ModelQualityJobDefinitionCsvArgs']] = None,
                 json: Optional[pulumi.Input['ModelQualityJobDefinitionJsonArgs']] = None,
                 parquet: Optional[pulumi.Input[bool]] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet", value)


@pulumi.input_type
class ModelQualityJobDefinitionEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 inference_attribute: Optional[pulumi.Input[str]] = None,
                 probability_attribute: Optional[pulumi.Input[str]] = None,
                 probability_threshold_attribute: Optional[pulumi.Input[float]] = None,
                 s3_data_distribution_type: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3InputMode']] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        The endpoint for a monitoring job.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input[str] end_time_offset: Monitoring end time offset, e.g. PT0H
        :param pulumi.Input[str] inference_attribute: Index or JSONpath to locate predicted label(s)
        :param pulumi.Input[str] probability_attribute: Index or JSONpath to locate probabilities
        :param pulumi.Input['ModelQualityJobDefinitionEndpointInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['ModelQualityJobDefinitionEndpointInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param pulumi.Input[str] start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @inference_attribute.setter
    def inference_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inference_attribute", value)

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @probability_attribute.setter
    def probability_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probability_attribute", value)

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "probability_threshold_attribute")

    @probability_threshold_attribute.setter
    def probability_threshold_attribute(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "probability_threshold_attribute", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


@pulumi.input_type
class ModelQualityJobDefinitionJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        The Json format
        :param pulumi.Input[bool] line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class ModelQualityJobDefinitionModelQualityAppSpecificationArgs:
    def __init__(__self__, *,
                 image_uri: pulumi.Input[str],
                 problem_type: pulumi.Input['ModelQualityJobDefinitionProblemType'],
                 container_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[Any] = None,
                 post_analytics_processor_source_uri: Optional[pulumi.Input[str]] = None,
                 record_preprocessor_source_uri: Optional[pulumi.Input[str]] = None):
        """
        Container image configuration object for the monitoring job.
        :param pulumi.Input[str] image_uri: The container image to be run by the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        :param pulumi.Input[str] post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param pulumi.Input[str] record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "problem_type", problem_type)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter(name="problemType")
    def problem_type(self) -> pulumi.Input['ModelQualityJobDefinitionProblemType']:
        return pulumi.get(self, "problem_type")

    @problem_type.setter
    def problem_type(self, value: pulumi.Input['ModelQualityJobDefinitionProblemType']):
        pulumi.set(self, "problem_type", value)

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @container_arguments.setter
    def container_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_arguments", value)

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @container_entrypoint.setter
    def container_entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_entrypoint", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @post_analytics_processor_source_uri.setter
    def post_analytics_processor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_analytics_processor_source_uri", value)

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")

    @record_preprocessor_source_uri.setter
    def record_preprocessor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_preprocessor_source_uri", value)


@pulumi.input_type
class ModelQualityJobDefinitionModelQualityBaselineConfigArgs:
    def __init__(__self__, *,
                 baselining_job_name: Optional[pulumi.Input[str]] = None,
                 constraints_resource: Optional[pulumi.Input['ModelQualityJobDefinitionConstraintsResourceArgs']] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "baselining_job_name")

    @baselining_job_name.setter
    def baselining_job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "baselining_job_name", value)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionConstraintsResourceArgs']]:
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)


@pulumi.input_type
class ModelQualityJobDefinitionModelQualityJobInputArgs:
    def __init__(__self__, *,
                 ground_truth_s3_input: pulumi.Input['ModelQualityJobDefinitionMonitoringGroundTruthS3InputArgs'],
                 batch_transform_input: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputArgs']] = None):
        """
        The inputs for a monitoring job.
        """
        pulumi.set(__self__, "ground_truth_s3_input", ground_truth_s3_input)
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="groundTruthS3Input")
    def ground_truth_s3_input(self) -> pulumi.Input['ModelQualityJobDefinitionMonitoringGroundTruthS3InputArgs']:
        return pulumi.get(self, "ground_truth_s3_input")

    @ground_truth_s3_input.setter
    def ground_truth_s3_input(self, value: pulumi.Input['ModelQualityJobDefinitionMonitoringGroundTruthS3InputArgs']):
        pulumi.set(self, "ground_truth_s3_input", value)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputArgs']]:
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputArgs']]:
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class ModelQualityJobDefinitionMonitoringGroundTruthS3InputArgs:
    def __init__(__self__, *,
                 s3_uri: pulumi.Input[str]):
        """
        Ground truth input provided in S3 
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class ModelQualityJobDefinitionMonitoringOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input[Sequence[pulumi.Input['ModelQualityJobDefinitionMonitoringOutputArgs']]],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        The output configuration for monitoring jobs.
        :param pulumi.Input[Sequence[pulumi.Input['ModelQualityJobDefinitionMonitoringOutputArgs']]] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input[Sequence[pulumi.Input['ModelQualityJobDefinitionMonitoringOutputArgs']]]:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input[Sequence[pulumi.Input['ModelQualityJobDefinitionMonitoringOutputArgs']]]):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class ModelQualityJobDefinitionMonitoringOutputArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['ModelQualityJobDefinitionS3OutputArgs']):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['ModelQualityJobDefinitionS3OutputArgs']:
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['ModelQualityJobDefinitionS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class ModelQualityJobDefinitionMonitoringResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['ModelQualityJobDefinitionClusterConfigArgs']):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['ModelQualityJobDefinitionClusterConfigArgs']:
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['ModelQualityJobDefinitionClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class ModelQualityJobDefinitionNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['ModelQualityJobDefinitionVpcConfigArgs']] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class ModelQualityJobDefinitionS3OutputArgs:
    def __init__(__self__, *,
                 local_path: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 s3_upload_mode: Optional[pulumi.Input['ModelQualityJobDefinitionS3OutputS3UploadMode']] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param pulumi.Input[str] local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param pulumi.Input['ModelQualityJobDefinitionS3OutputS3UploadMode'] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input['ModelQualityJobDefinitionS3OutputS3UploadMode']]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input['ModelQualityJobDefinitionS3OutputS3UploadMode']]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class ModelQualityJobDefinitionStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: pulumi.Input[int]):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> pulumi.Input[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class ModelQualityJobDefinitionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelQualityJobDefinitionVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class ModelRepositoryAuthConfigArgs:
    def __init__(__self__, *,
                 repository_credentials_provider_arn: pulumi.Input[str]):
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository_credentials_provider_arn")

    @repository_credentials_provider_arn.setter
    def repository_credentials_provider_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_credentials_provider_arn", value)


@pulumi.input_type
class ModelTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class MonitoringScheduleBaselineConfigArgs:
    def __init__(__self__, *,
                 constraints_resource: Optional[pulumi.Input['MonitoringScheduleConstraintsResourceArgs']] = None,
                 statistics_resource: Optional[pulumi.Input['MonitoringScheduleStatisticsResourceArgs']] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional[pulumi.Input['MonitoringScheduleConstraintsResourceArgs']]:
        return pulumi.get(self, "constraints_resource")

    @constraints_resource.setter
    def constraints_resource(self, value: Optional[pulumi.Input['MonitoringScheduleConstraintsResourceArgs']]):
        pulumi.set(self, "constraints_resource", value)

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional[pulumi.Input['MonitoringScheduleStatisticsResourceArgs']]:
        return pulumi.get(self, "statistics_resource")

    @statistics_resource.setter
    def statistics_resource(self, value: Optional[pulumi.Input['MonitoringScheduleStatisticsResourceArgs']]):
        pulumi.set(self, "statistics_resource", value)


@pulumi.input_type
class MonitoringScheduleBatchTransformInputArgs:
    def __init__(__self__, *,
                 data_captured_destination_s3_uri: pulumi.Input[str],
                 dataset_format: pulumi.Input['MonitoringScheduleDatasetFormatArgs'],
                 local_path: pulumi.Input[str],
                 s3_data_distribution_type: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3InputMode']] = None):
        """
        The batch transform input for a monitoring job.
        :param pulumi.Input[str] data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input['MonitoringScheduleBatchTransformInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['MonitoringScheduleBatchTransformInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @data_captured_destination_s3_uri.setter
    def data_captured_destination_s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_captured_destination_s3_uri", value)

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> pulumi.Input['MonitoringScheduleDatasetFormatArgs']:
        return pulumi.get(self, "dataset_format")

    @dataset_format.setter
    def dataset_format(self, value: pulumi.Input['MonitoringScheduleDatasetFormatArgs']):
        pulumi.set(self, "dataset_format", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class MonitoringScheduleClusterConfigArgs:
    def __init__(__self__, *,
                 instance_count: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 volume_size_in_gb: pulumi.Input[int],
                 volume_kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param pulumi.Input[int] instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param pulumi.Input[str] instance_type: The ML compute instance type for the processing job.
        :param pulumi.Input[int] volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param pulumi.Input[str] volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Input[int]:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="volumeSizeInGB")
    def volume_size_in_gb(self) -> pulumi.Input[int]:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @volume_size_in_gb.setter
    def volume_size_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size_in_gb", value)

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")

    @volume_kms_key_id.setter
    def volume_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_kms_key_id", value)


@pulumi.input_type
class MonitoringScheduleConfigArgs:
    def __init__(__self__, *,
                 monitoring_job_definition: Optional[pulumi.Input['MonitoringScheduleMonitoringJobDefinitionArgs']] = None,
                 monitoring_job_definition_name: Optional[pulumi.Input[str]] = None,
                 monitoring_type: Optional[pulumi.Input['MonitoringScheduleMonitoringType']] = None,
                 schedule_config: Optional[pulumi.Input['MonitoringScheduleScheduleConfigArgs']] = None):
        """
        The configuration object that specifies the monitoring schedule and defines the monitoring job.
        :param pulumi.Input[str] monitoring_job_definition_name: Name of the job definition
        """
        if monitoring_job_definition is not None:
            pulumi.set(__self__, "monitoring_job_definition", monitoring_job_definition)
        if monitoring_job_definition_name is not None:
            pulumi.set(__self__, "monitoring_job_definition_name", monitoring_job_definition_name)
        if monitoring_type is not None:
            pulumi.set(__self__, "monitoring_type", monitoring_type)
        if schedule_config is not None:
            pulumi.set(__self__, "schedule_config", schedule_config)

    @property
    @pulumi.getter(name="monitoringJobDefinition")
    def monitoring_job_definition(self) -> Optional[pulumi.Input['MonitoringScheduleMonitoringJobDefinitionArgs']]:
        return pulumi.get(self, "monitoring_job_definition")

    @monitoring_job_definition.setter
    def monitoring_job_definition(self, value: Optional[pulumi.Input['MonitoringScheduleMonitoringJobDefinitionArgs']]):
        pulumi.set(self, "monitoring_job_definition", value)

    @property
    @pulumi.getter(name="monitoringJobDefinitionName")
    def monitoring_job_definition_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the job definition
        """
        return pulumi.get(self, "monitoring_job_definition_name")

    @monitoring_job_definition_name.setter
    def monitoring_job_definition_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_job_definition_name", value)

    @property
    @pulumi.getter(name="monitoringType")
    def monitoring_type(self) -> Optional[pulumi.Input['MonitoringScheduleMonitoringType']]:
        return pulumi.get(self, "monitoring_type")

    @monitoring_type.setter
    def monitoring_type(self, value: Optional[pulumi.Input['MonitoringScheduleMonitoringType']]):
        pulumi.set(self, "monitoring_type", value)

    @property
    @pulumi.getter(name="scheduleConfig")
    def schedule_config(self) -> Optional[pulumi.Input['MonitoringScheduleScheduleConfigArgs']]:
        return pulumi.get(self, "schedule_config")

    @schedule_config.setter
    def schedule_config(self, value: Optional[pulumi.Input['MonitoringScheduleScheduleConfigArgs']]):
        pulumi.set(self, "schedule_config", value)


@pulumi.input_type
class MonitoringScheduleConstraintsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class MonitoringScheduleCsvArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[bool]] = None):
        """
        The CSV format
        :param pulumi.Input[bool] header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class MonitoringScheduleDatasetFormatArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['MonitoringScheduleCsvArgs']] = None,
                 json: Optional[pulumi.Input['MonitoringScheduleJsonArgs']] = None,
                 parquet: Optional[pulumi.Input[bool]] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['MonitoringScheduleCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['MonitoringScheduleCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['MonitoringScheduleJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['MonitoringScheduleJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def parquet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "parquet")

    @parquet.setter
    def parquet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parquet", value)


@pulumi.input_type
class MonitoringScheduleEndpointInputArgs:
    def __init__(__self__, *,
                 endpoint_name: pulumi.Input[str],
                 local_path: pulumi.Input[str],
                 s3_data_distribution_type: Optional[pulumi.Input['MonitoringScheduleEndpointInputS3DataDistributionType']] = None,
                 s3_input_mode: Optional[pulumi.Input['MonitoringScheduleEndpointInputS3InputMode']] = None):
        """
        The endpoint for a monitoring job.
        :param pulumi.Input[str] local_path: Path to the filesystem where the endpoint data is available to the container.
        :param pulumi.Input['MonitoringScheduleEndpointInputS3DataDistributionType'] s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param pulumi.Input['MonitoringScheduleEndpointInputS3InputMode'] s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional[pulumi.Input['MonitoringScheduleEndpointInputS3DataDistributionType']]:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @s3_data_distribution_type.setter
    def s3_data_distribution_type(self, value: Optional[pulumi.Input['MonitoringScheduleEndpointInputS3DataDistributionType']]):
        pulumi.set(self, "s3_data_distribution_type", value)

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional[pulumi.Input['MonitoringScheduleEndpointInputS3InputMode']]:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @s3_input_mode.setter
    def s3_input_mode(self, value: Optional[pulumi.Input['MonitoringScheduleEndpointInputS3InputMode']]):
        pulumi.set(self, "s3_input_mode", value)


@pulumi.input_type
class MonitoringScheduleJsonArgs:
    def __init__(__self__, *,
                 line: Optional[pulumi.Input[bool]] = None):
        """
        The Json format
        :param pulumi.Input[bool] line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")

    @line.setter
    def line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "line", value)


@pulumi.input_type
class MonitoringScheduleMonitoringAppSpecificationArgs:
    def __init__(__self__, *,
                 image_uri: pulumi.Input[str],
                 container_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 container_entrypoint: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 post_analytics_processor_source_uri: Optional[pulumi.Input[str]] = None,
                 record_preprocessor_source_uri: Optional[pulumi.Input[str]] = None):
        """
        Container image configuration object for the monitoring job.
        :param pulumi.Input[str] image_uri: The container image to be run by the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param pulumi.Input[str] post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param pulumi.Input[str] record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[str]:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_uri", value)

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @container_arguments.setter
    def container_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_arguments", value)

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @container_entrypoint.setter
    def container_entrypoint(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "container_entrypoint", value)

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @post_analytics_processor_source_uri.setter
    def post_analytics_processor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_analytics_processor_source_uri", value)

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[pulumi.Input[str]]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")

    @record_preprocessor_source_uri.setter
    def record_preprocessor_source_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_preprocessor_source_uri", value)


@pulumi.input_type
class MonitoringScheduleMonitoringExecutionSummaryArgs:
    def __init__(__self__, *,
                 creation_time: pulumi.Input[str],
                 last_modified_time: pulumi.Input[str],
                 monitoring_execution_status: pulumi.Input['MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus'],
                 monitoring_schedule_name: pulumi.Input[str],
                 scheduled_time: pulumi.Input[str],
                 endpoint_name: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 processing_job_arn: Optional[pulumi.Input[str]] = None):
        """
        Summary of information about monitoring job
        :param pulumi.Input[str] creation_time: The time at which the monitoring job was created.
        :param pulumi.Input[str] last_modified_time: A timestamp that indicates the last time the monitoring job was modified.
        :param pulumi.Input['MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus'] monitoring_execution_status: The status of the monitoring job.
        :param pulumi.Input[str] scheduled_time: The time the monitoring job was scheduled.
        :param pulumi.Input[str] failure_reason: Contains the reason a monitoring job failed, if it failed.
        :param pulumi.Input[str] processing_job_arn: The Amazon Resource Name (ARN) of the monitoring job.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "monitoring_execution_status", monitoring_execution_status)
        pulumi.set(__self__, "monitoring_schedule_name", monitoring_schedule_name)
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if processing_job_arn is not None:
            pulumi.set(__self__, "processing_job_arn", processing_job_arn)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Input[str]:
        """
        The time at which the monitoring job was created.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Input[str]:
        """
        A timestamp that indicates the last time the monitoring job was modified.
        """
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="monitoringExecutionStatus")
    def monitoring_execution_status(self) -> pulumi.Input['MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus']:
        """
        The status of the monitoring job.
        """
        return pulumi.get(self, "monitoring_execution_status")

    @monitoring_execution_status.setter
    def monitoring_execution_status(self, value: pulumi.Input['MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus']):
        pulumi.set(self, "monitoring_execution_status", value)

    @property
    @pulumi.getter(name="monitoringScheduleName")
    def monitoring_schedule_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "monitoring_schedule_name")

    @monitoring_schedule_name.setter
    def monitoring_schedule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitoring_schedule_name", value)

    @property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> pulumi.Input[str]:
        """
        The time the monitoring job was scheduled.
        """
        return pulumi.get(self, "scheduled_time")

    @scheduled_time.setter
    def scheduled_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheduled_time", value)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_name")

    @endpoint_name.setter
    def endpoint_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_name", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Contains the reason a monitoring job failed, if it failed.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="processingJobArn")
    def processing_job_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the monitoring job.
        """
        return pulumi.get(self, "processing_job_arn")

    @processing_job_arn.setter
    def processing_job_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "processing_job_arn", value)


@pulumi.input_type
class MonitoringScheduleMonitoringInputArgs:
    def __init__(__self__, *,
                 batch_transform_input: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputArgs']] = None,
                 endpoint_input: Optional[pulumi.Input['MonitoringScheduleEndpointInputArgs']] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional[pulumi.Input['MonitoringScheduleBatchTransformInputArgs']]:
        return pulumi.get(self, "batch_transform_input")

    @batch_transform_input.setter
    def batch_transform_input(self, value: Optional[pulumi.Input['MonitoringScheduleBatchTransformInputArgs']]):
        pulumi.set(self, "batch_transform_input", value)

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional[pulumi.Input['MonitoringScheduleEndpointInputArgs']]:
        return pulumi.get(self, "endpoint_input")

    @endpoint_input.setter
    def endpoint_input(self, value: Optional[pulumi.Input['MonitoringScheduleEndpointInputArgs']]):
        pulumi.set(self, "endpoint_input", value)


@pulumi.input_type
class MonitoringScheduleMonitoringJobDefinitionArgs:
    def __init__(__self__, *,
                 monitoring_app_specification: pulumi.Input['MonitoringScheduleMonitoringAppSpecificationArgs'],
                 monitoring_inputs: pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringInputArgs']]],
                 monitoring_output_config: pulumi.Input['MonitoringScheduleMonitoringOutputConfigArgs'],
                 monitoring_resources: pulumi.Input['MonitoringScheduleMonitoringResourcesArgs'],
                 role_arn: pulumi.Input[str],
                 baseline_config: Optional[pulumi.Input['MonitoringScheduleBaselineConfigArgs']] = None,
                 environment: Optional[Any] = None,
                 network_config: Optional[pulumi.Input['MonitoringScheduleNetworkConfigArgs']] = None,
                 stopping_condition: Optional[pulumi.Input['MonitoringScheduleStoppingConditionArgs']] = None):
        """
        Defines the monitoring job.
        :param pulumi.Input[str] role_arn: The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "monitoring_app_specification", monitoring_app_specification)
        pulumi.set(__self__, "monitoring_inputs", monitoring_inputs)
        pulumi.set(__self__, "monitoring_output_config", monitoring_output_config)
        pulumi.set(__self__, "monitoring_resources", monitoring_resources)
        pulumi.set(__self__, "role_arn", role_arn)
        if baseline_config is not None:
            pulumi.set(__self__, "baseline_config", baseline_config)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if stopping_condition is not None:
            pulumi.set(__self__, "stopping_condition", stopping_condition)

    @property
    @pulumi.getter(name="monitoringAppSpecification")
    def monitoring_app_specification(self) -> pulumi.Input['MonitoringScheduleMonitoringAppSpecificationArgs']:
        return pulumi.get(self, "monitoring_app_specification")

    @monitoring_app_specification.setter
    def monitoring_app_specification(self, value: pulumi.Input['MonitoringScheduleMonitoringAppSpecificationArgs']):
        pulumi.set(self, "monitoring_app_specification", value)

    @property
    @pulumi.getter(name="monitoringInputs")
    def monitoring_inputs(self) -> pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringInputArgs']]]:
        return pulumi.get(self, "monitoring_inputs")

    @monitoring_inputs.setter
    def monitoring_inputs(self, value: pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringInputArgs']]]):
        pulumi.set(self, "monitoring_inputs", value)

    @property
    @pulumi.getter(name="monitoringOutputConfig")
    def monitoring_output_config(self) -> pulumi.Input['MonitoringScheduleMonitoringOutputConfigArgs']:
        return pulumi.get(self, "monitoring_output_config")

    @monitoring_output_config.setter
    def monitoring_output_config(self, value: pulumi.Input['MonitoringScheduleMonitoringOutputConfigArgs']):
        pulumi.set(self, "monitoring_output_config", value)

    @property
    @pulumi.getter(name="monitoringResources")
    def monitoring_resources(self) -> pulumi.Input['MonitoringScheduleMonitoringResourcesArgs']:
        return pulumi.get(self, "monitoring_resources")

    @monitoring_resources.setter
    def monitoring_resources(self, value: pulumi.Input['MonitoringScheduleMonitoringResourcesArgs']):
        pulumi.set(self, "monitoring_resources", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="baselineConfig")
    def baseline_config(self) -> Optional[pulumi.Input['MonitoringScheduleBaselineConfigArgs']]:
        return pulumi.get(self, "baseline_config")

    @baseline_config.setter
    def baseline_config(self, value: Optional[pulumi.Input['MonitoringScheduleBaselineConfigArgs']]):
        pulumi.set(self, "baseline_config", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[Any]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['MonitoringScheduleNetworkConfigArgs']]:
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['MonitoringScheduleNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter(name="stoppingCondition")
    def stopping_condition(self) -> Optional[pulumi.Input['MonitoringScheduleStoppingConditionArgs']]:
        return pulumi.get(self, "stopping_condition")

    @stopping_condition.setter
    def stopping_condition(self, value: Optional[pulumi.Input['MonitoringScheduleStoppingConditionArgs']]):
        pulumi.set(self, "stopping_condition", value)


@pulumi.input_type
class MonitoringScheduleMonitoringOutputConfigArgs:
    def __init__(__self__, *,
                 monitoring_outputs: pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringOutputArgs']]],
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        The output configuration for monitoring jobs.
        :param pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringOutputArgs']]] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param pulumi.Input[str] kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringOutputArgs']]]:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @monitoring_outputs.setter
    def monitoring_outputs(self, value: pulumi.Input[Sequence[pulumi.Input['MonitoringScheduleMonitoringOutputArgs']]]):
        pulumi.set(self, "monitoring_outputs", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class MonitoringScheduleMonitoringOutputArgs:
    def __init__(__self__, *,
                 s3_output: pulumi.Input['MonitoringScheduleS3OutputArgs']):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> pulumi.Input['MonitoringScheduleS3OutputArgs']:
        return pulumi.get(self, "s3_output")

    @s3_output.setter
    def s3_output(self, value: pulumi.Input['MonitoringScheduleS3OutputArgs']):
        pulumi.set(self, "s3_output", value)


@pulumi.input_type
class MonitoringScheduleMonitoringResourcesArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['MonitoringScheduleClusterConfigArgs']):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['MonitoringScheduleClusterConfigArgs']:
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['MonitoringScheduleClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)


@pulumi.input_type
class MonitoringScheduleNetworkConfigArgs:
    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[pulumi.Input[bool]] = None,
                 enable_network_isolation: Optional[pulumi.Input[bool]] = None,
                 vpc_config: Optional[pulumi.Input['MonitoringScheduleVpcConfigArgs']] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param pulumi.Input[bool] enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param pulumi.Input[bool] enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @enable_inter_container_traffic_encryption.setter
    def enable_inter_container_traffic_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_inter_container_traffic_encryption", value)

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @enable_network_isolation.setter
    def enable_network_isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_isolation", value)

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['MonitoringScheduleVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['MonitoringScheduleVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


@pulumi.input_type
class MonitoringScheduleS3OutputArgs:
    def __init__(__self__, *,
                 local_path: pulumi.Input[str],
                 s3_uri: pulumi.Input[str],
                 s3_upload_mode: Optional[pulumi.Input['MonitoringScheduleS3OutputS3UploadMode']] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param pulumi.Input[str] local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param pulumi.Input[str] s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param pulumi.Input['MonitoringScheduleS3OutputS3UploadMode'] s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> pulumi.Input[str]:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_path", value)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> pulumi.Input[str]:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_uri", value)

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional[pulumi.Input['MonitoringScheduleS3OutputS3UploadMode']]:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")

    @s3_upload_mode.setter
    def s3_upload_mode(self, value: Optional[pulumi.Input['MonitoringScheduleS3OutputS3UploadMode']]):
        pulumi.set(self, "s3_upload_mode", value)


@pulumi.input_type
class MonitoringScheduleScheduleConfigArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str]):
        """
        Configuration details about the monitoring schedule.
        :param pulumi.Input[str] schedule_expression: A cron expression that describes details about the monitoring schedule.
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        A cron expression that describes details about the monitoring schedule.
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)


@pulumi.input_type
class MonitoringScheduleStatisticsResourceArgs:
    def __init__(__self__, *,
                 s3_uri: Optional[pulumi.Input[str]] = None):
        """
        The baseline statistics resource for a monitoring job.
        :param pulumi.Input[str] s3_uri: The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        return pulumi.get(self, "s3_uri")

    @s3_uri.setter
    def s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_uri", value)


@pulumi.input_type
class MonitoringScheduleStoppingConditionArgs:
    def __init__(__self__, *,
                 max_runtime_in_seconds: pulumi.Input[int]):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param pulumi.Input[int] max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> pulumi.Input[int]:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")

    @max_runtime_in_seconds.setter
    def max_runtime_in_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_runtime_in_seconds", value)


@pulumi.input_type
class MonitoringScheduleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MonitoringScheduleVpcConfigArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class NotebookInstanceInstanceMetadataServiceConfigurationArgs:
    def __init__(__self__, *,
                 minimum_instance_metadata_service_version: pulumi.Input[str]):
        pulumi.set(__self__, "minimum_instance_metadata_service_version", minimum_instance_metadata_service_version)

    @property
    @pulumi.getter(name="minimumInstanceMetadataServiceVersion")
    def minimum_instance_metadata_service_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "minimum_instance_metadata_service_version")

    @minimum_instance_metadata_service_version.setter
    def minimum_instance_metadata_service_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "minimum_instance_metadata_service_version", value)


@pulumi.input_type
class NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


@pulumi.input_type
class NotebookInstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OfflineStoreConfigPropertiesArgs:
    def __init__(__self__, *,
                 s3_storage_config: pulumi.Input['FeatureGroupS3StorageConfigArgs'],
                 data_catalog_config: Optional[pulumi.Input['FeatureGroupDataCatalogConfigArgs']] = None,
                 disable_glue_table_creation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "s3_storage_config", s3_storage_config)
        if data_catalog_config is not None:
            pulumi.set(__self__, "data_catalog_config", data_catalog_config)
        if disable_glue_table_creation is not None:
            pulumi.set(__self__, "disable_glue_table_creation", disable_glue_table_creation)

    @property
    @pulumi.getter(name="s3StorageConfig")
    def s3_storage_config(self) -> pulumi.Input['FeatureGroupS3StorageConfigArgs']:
        return pulumi.get(self, "s3_storage_config")

    @s3_storage_config.setter
    def s3_storage_config(self, value: pulumi.Input['FeatureGroupS3StorageConfigArgs']):
        pulumi.set(self, "s3_storage_config", value)

    @property
    @pulumi.getter(name="dataCatalogConfig")
    def data_catalog_config(self) -> Optional[pulumi.Input['FeatureGroupDataCatalogConfigArgs']]:
        return pulumi.get(self, "data_catalog_config")

    @data_catalog_config.setter
    def data_catalog_config(self, value: Optional[pulumi.Input['FeatureGroupDataCatalogConfigArgs']]):
        pulumi.set(self, "data_catalog_config", value)

    @property
    @pulumi.getter(name="disableGlueTableCreation")
    def disable_glue_table_creation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_glue_table_creation")

    @disable_glue_table_creation.setter
    def disable_glue_table_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_glue_table_creation", value)


@pulumi.input_type
class OnlineStoreConfigPropertiesArgs:
    def __init__(__self__, *,
                 enable_online_store: Optional[pulumi.Input[bool]] = None,
                 security_config: Optional[pulumi.Input['FeatureGroupOnlineStoreSecurityConfigArgs']] = None):
        if enable_online_store is not None:
            pulumi.set(__self__, "enable_online_store", enable_online_store)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter(name="enableOnlineStore")
    def enable_online_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_online_store")

    @enable_online_store.setter
    def enable_online_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_online_store", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input['FeatureGroupOnlineStoreSecurityConfigArgs']]:
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input['FeatureGroupOnlineStoreSecurityConfigArgs']]):
        pulumi.set(self, "security_config", value)


@pulumi.input_type
class ParallelismConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 max_parallel_execution_steps: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max_parallel_execution_steps: Maximum parallel execution steps
        """
        pulumi.set(__self__, "max_parallel_execution_steps", max_parallel_execution_steps)

    @property
    @pulumi.getter(name="maxParallelExecutionSteps")
    def max_parallel_execution_steps(self) -> pulumi.Input[int]:
        """
        Maximum parallel execution steps
        """
        return pulumi.get(self, "max_parallel_execution_steps")

    @max_parallel_execution_steps.setter
    def max_parallel_execution_steps(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_parallel_execution_steps", value)


@pulumi.input_type
class PipelineDefinition0PropertiesArgs:
    def __init__(__self__, *,
                 pipeline_definition_body: pulumi.Input[str]):
        """
        :param pulumi.Input[str] pipeline_definition_body: A specification that defines the pipeline in JSON format.
        """
        pulumi.set(__self__, "pipeline_definition_body", pipeline_definition_body)

    @property
    @pulumi.getter(name="pipelineDefinitionBody")
    def pipeline_definition_body(self) -> pulumi.Input[str]:
        """
        A specification that defines the pipeline in JSON format.
        """
        return pulumi.get(self, "pipeline_definition_body")

    @pipeline_definition_body.setter
    def pipeline_definition_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "pipeline_definition_body", value)


@pulumi.input_type
class PipelineDefinition1PropertiesArgs:
    def __init__(__self__, *,
                 pipeline_definition_s3_location: pulumi.Input['PipelineS3LocationArgs']):
        pulumi.set(__self__, "pipeline_definition_s3_location", pipeline_definition_s3_location)

    @property
    @pulumi.getter(name="pipelineDefinitionS3Location")
    def pipeline_definition_s3_location(self) -> pulumi.Input['PipelineS3LocationArgs']:
        return pulumi.get(self, "pipeline_definition_s3_location")

    @pipeline_definition_s3_location.setter
    def pipeline_definition_s3_location(self, value: pulumi.Input['PipelineS3LocationArgs']):
        pulumi.set(self, "pipeline_definition_s3_location", value)


@pulumi.input_type
class PipelineS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str],
                 e_tag: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The name of the S3 bucket where the PipelineDefinition file is stored.
        :param pulumi.Input[str] key: The file name of the PipelineDefinition file (Amazon S3 object name).
        :param pulumi.Input[str] e_tag: The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
        :param pulumi.Input[str] version: For versioning-enabled buckets, a specific version of the PipelineDefinition file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)
        if e_tag is not None:
            pulumi.set(__self__, "e_tag", e_tag)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the S3 bucket where the PipelineDefinition file is stored.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The file name of the PipelineDefinition file (Amazon S3 object name).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
        """
        return pulumi.get(self, "e_tag")

    @e_tag.setter
    def e_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e_tag", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        For versioning-enabled buckets, a specific version of the PipelineDefinition file.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PipelineTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProjectProvisioningParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        Information about a parameter used to provision a product.
        :param pulumi.Input[str] key: The parameter key.
        :param pulumi.Input[str] value: The parameter value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The parameter key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProjectTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceCatalogProvisioningDetailsPropertiesArgs:
    def __init__(__self__, *,
                 product_id: pulumi.Input[str],
                 path_id: Optional[pulumi.Input[str]] = None,
                 provisioning_artifact_id: Optional[pulumi.Input[str]] = None,
                 provisioning_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectProvisioningParameterArgs']]]] = None):
        """
        Input ServiceCatalog Provisioning Details
        :param pulumi.Input[Sequence[pulumi.Input['ProjectProvisioningParameterArgs']]] provisioning_parameters: Parameters specified by the administrator that are required for provisioning the product.
        """
        pulumi.set(__self__, "product_id", product_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if provisioning_artifact_id is not None:
            pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_parameters is not None:
            pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_id")

    @path_id.setter
    def path_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_id", value)

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioning_artifact_id")

    @provisioning_artifact_id.setter
    def provisioning_artifact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_artifact_id", value)

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectProvisioningParameterArgs']]]]:
        """
        Parameters specified by the administrator that are required for provisioning the product.
        """
        return pulumi.get(self, "provisioning_parameters")

    @provisioning_parameters.setter
    def provisioning_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectProvisioningParameterArgs']]]]):
        pulumi.set(self, "provisioning_parameters", value)


@pulumi.input_type
class UserProfileCustomImageArgs:
    def __init__(__self__, *,
                 app_image_config_name: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_version_number: Optional[pulumi.Input[int]] = None):
        """
        A custom SageMaker image.
        :param pulumi.Input[str] app_image_config_name: The Name of the AppImageConfig.
        :param pulumi.Input[str] image_name: The name of the CustomImage. Must be unique to your account.
        :param pulumi.Input[int] image_version_number: The version number of the CustomImage.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> pulumi.Input[str]:
        """
        The Name of the AppImageConfig.
        """
        return pulumi.get(self, "app_image_config_name")

    @app_image_config_name.setter
    def app_image_config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_image_config_name", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the CustomImage. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the CustomImage.
        """
        return pulumi.get(self, "image_version_number")

    @image_version_number.setter
    def image_version_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_version_number", value)


@pulumi.input_type
class UserProfileJupyterServerAppSettingsArgs:
    def __init__(__self__, *,
                 default_resource_spec: Optional[pulumi.Input['UserProfileResourceSpecArgs']] = None):
        """
        The JupyterServer app settings.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileResourceSpecArgs']]:
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileKernelGatewayAppSettingsArgs:
    def __init__(__self__, *,
                 custom_images: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileCustomImageArgs']]]] = None,
                 default_resource_spec: Optional[pulumi.Input['UserProfileResourceSpecArgs']] = None):
        """
        The kernel gateway app settings.
        :param pulumi.Input[Sequence[pulumi.Input['UserProfileCustomImageArgs']]] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        :param pulumi.Input['UserProfileResourceSpecArgs'] default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileCustomImageArgs']]]]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @custom_images.setter
    def custom_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserProfileCustomImageArgs']]]]):
        pulumi.set(self, "custom_images", value)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional[pulumi.Input['UserProfileResourceSpecArgs']]:
        """
        The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        return pulumi.get(self, "default_resource_spec")

    @default_resource_spec.setter
    def default_resource_spec(self, value: Optional[pulumi.Input['UserProfileResourceSpecArgs']]):
        pulumi.set(self, "default_resource_spec", value)


@pulumi.input_type
class UserProfileRStudioServerProAppSettingsArgs:
    def __init__(__self__, *,
                 access_status: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsAccessStatus']] = None,
                 user_group: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsUserGroup']] = None):
        """
        A collection of settings that configure user interaction with the RStudioServerPro app.
        :param pulumi.Input['UserProfileRStudioServerProAppSettingsAccessStatus'] access_status: Indicates whether the current user has access to the RStudioServerPro app.
        :param pulumi.Input['UserProfileRStudioServerProAppSettingsUserGroup'] user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsAccessStatus']]:
        """
        Indicates whether the current user has access to the RStudioServerPro app.
        """
        return pulumi.get(self, "access_status")

    @access_status.setter
    def access_status(self, value: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsAccessStatus']]):
        pulumi.set(self, "access_status", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsUserGroup']]:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsUserGroup']]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class UserProfileResourceSpecArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input['UserProfileResourceSpecInstanceType']] = None,
                 sage_maker_image_arn: Optional[pulumi.Input[str]] = None,
                 sage_maker_image_version_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['UserProfileResourceSpecInstanceType'] instance_type: The instance type that the image version runs on.
        :param pulumi.Input[str] sage_maker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param pulumi.Input[str] sage_maker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input['UserProfileResourceSpecInstanceType']]:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input['UserProfileResourceSpecInstanceType']]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @sage_maker_image_arn.setter
    def sage_maker_image_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_arn", value)

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")

    @sage_maker_image_version_arn.setter
    def sage_maker_image_version_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sage_maker_image_version_arn", value)


@pulumi.input_type
class UserProfileSharingSettingsArgs:
    def __init__(__self__, *,
                 notebook_output_option: Optional[pulumi.Input['UserProfileSharingSettingsNotebookOutputOption']] = None,
                 s3_kms_key_id: Optional[pulumi.Input[str]] = None,
                 s3_output_path: Optional[pulumi.Input[str]] = None):
        """
        Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
        :param pulumi.Input['UserProfileSharingSettingsNotebookOutputOption'] notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        :param pulumi.Input[str] s3_kms_key_id: When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param pulumi.Input[str] s3_output_path: When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional[pulumi.Input['UserProfileSharingSettingsNotebookOutputOption']]:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        """
        return pulumi.get(self, "notebook_output_option")

    @notebook_output_option.setter
    def notebook_output_option(self, value: Optional[pulumi.Input['UserProfileSharingSettingsNotebookOutputOption']]):
        pulumi.set(self, "notebook_output_option", value)

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @s3_kms_key_id.setter
    def s3_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_kms_key_id", value)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[pulumi.Input[str]]:
        """
        When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        return pulumi.get(self, "s3_output_path")

    @s3_output_path.setter
    def s3_output_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_output_path", value)


@pulumi.input_type
class UserProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserProfileUserSettingsArgs:
    def __init__(__self__, *,
                 execution_role: Optional[pulumi.Input[str]] = None,
                 jupyter_server_app_settings: Optional[pulumi.Input['UserProfileJupyterServerAppSettingsArgs']] = None,
                 kernel_gateway_app_settings: Optional[pulumi.Input['UserProfileKernelGatewayAppSettingsArgs']] = None,
                 r_studio_server_pro_app_settings: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharing_settings: Optional[pulumi.Input['UserProfileSharingSettingsArgs']] = None):
        """
        A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
        :param pulumi.Input[str] execution_role: The user profile Amazon Resource Name (ARN).
        :param pulumi.Input['UserProfileJupyterServerAppSettingsArgs'] jupyter_server_app_settings: The Jupyter server's app settings.
        :param pulumi.Input['UserProfileKernelGatewayAppSettingsArgs'] kernel_gateway_app_settings: The kernel gateway app settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        :param pulumi.Input['UserProfileSharingSettingsArgs'] sharing_settings: The sharing settings.
        """
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[pulumi.Input[str]]:
        """
        The user profile Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "execution_role")

    @execution_role.setter
    def execution_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_role", value)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional[pulumi.Input['UserProfileJupyterServerAppSettingsArgs']]:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @jupyter_server_app_settings.setter
    def jupyter_server_app_settings(self, value: Optional[pulumi.Input['UserProfileJupyterServerAppSettingsArgs']]):
        pulumi.set(self, "jupyter_server_app_settings", value)

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional[pulumi.Input['UserProfileKernelGatewayAppSettingsArgs']]:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @kernel_gateway_app_settings.setter
    def kernel_gateway_app_settings(self, value: Optional[pulumi.Input['UserProfileKernelGatewayAppSettingsArgs']]):
        pulumi.set(self, "kernel_gateway_app_settings", value)

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsArgs']]:
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @r_studio_server_pro_app_settings.setter
    def r_studio_server_pro_app_settings(self, value: Optional[pulumi.Input['UserProfileRStudioServerProAppSettingsArgs']]):
        pulumi.set(self, "r_studio_server_pro_app_settings", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional[pulumi.Input['UserProfileSharingSettingsArgs']]:
        """
        The sharing settings.
        """
        return pulumi.get(self, "sharing_settings")

    @sharing_settings.setter
    def sharing_settings(self, value: Optional[pulumi.Input['UserProfileSharingSettingsArgs']]):
        pulumi.set(self, "sharing_settings", value)


@pulumi.input_type
class WorkteamCognitoMemberDefinitionArgs:
    def __init__(__self__, *,
                 cognito_client_id: pulumi.Input[str],
                 cognito_user_group: pulumi.Input[str],
                 cognito_user_pool: pulumi.Input[str]):
        pulumi.set(__self__, "cognito_client_id", cognito_client_id)
        pulumi.set(__self__, "cognito_user_group", cognito_user_group)
        pulumi.set(__self__, "cognito_user_pool", cognito_user_pool)

    @property
    @pulumi.getter(name="cognitoClientId")
    def cognito_client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cognito_client_id")

    @cognito_client_id.setter
    def cognito_client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cognito_client_id", value)

    @property
    @pulumi.getter(name="cognitoUserGroup")
    def cognito_user_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cognito_user_group")

    @cognito_user_group.setter
    def cognito_user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "cognito_user_group", value)

    @property
    @pulumi.getter(name="cognitoUserPool")
    def cognito_user_pool(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cognito_user_pool")

    @cognito_user_pool.setter
    def cognito_user_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "cognito_user_pool", value)


@pulumi.input_type
class WorkteamMemberDefinitionArgs:
    def __init__(__self__, *,
                 cognito_member_definition: Optional[pulumi.Input['WorkteamCognitoMemberDefinitionArgs']] = None,
                 oidc_member_definition: Optional[pulumi.Input['WorkteamOidcMemberDefinitionArgs']] = None):
        if cognito_member_definition is not None:
            pulumi.set(__self__, "cognito_member_definition", cognito_member_definition)
        if oidc_member_definition is not None:
            pulumi.set(__self__, "oidc_member_definition", oidc_member_definition)

    @property
    @pulumi.getter(name="cognitoMemberDefinition")
    def cognito_member_definition(self) -> Optional[pulumi.Input['WorkteamCognitoMemberDefinitionArgs']]:
        return pulumi.get(self, "cognito_member_definition")

    @cognito_member_definition.setter
    def cognito_member_definition(self, value: Optional[pulumi.Input['WorkteamCognitoMemberDefinitionArgs']]):
        pulumi.set(self, "cognito_member_definition", value)

    @property
    @pulumi.getter(name="oidcMemberDefinition")
    def oidc_member_definition(self) -> Optional[pulumi.Input['WorkteamOidcMemberDefinitionArgs']]:
        return pulumi.get(self, "oidc_member_definition")

    @oidc_member_definition.setter
    def oidc_member_definition(self, value: Optional[pulumi.Input['WorkteamOidcMemberDefinitionArgs']]):
        pulumi.set(self, "oidc_member_definition", value)


@pulumi.input_type
class WorkteamNotificationConfigurationArgs:
    def __init__(__self__, *,
                 notification_topic_arn: pulumi.Input[str]):
        pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "notification_topic_arn")

    @notification_topic_arn.setter
    def notification_topic_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "notification_topic_arn", value)


@pulumi.input_type
class WorkteamOidcMemberDefinitionArgs:
    def __init__(__self__, *,
                 oidc_groups: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "oidc_groups", oidc_groups)

    @property
    @pulumi.getter(name="oidcGroups")
    def oidc_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "oidc_groups")

    @oidc_groups.setter
    def oidc_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "oidc_groups", value)


@pulumi.input_type
class WorkteamTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


