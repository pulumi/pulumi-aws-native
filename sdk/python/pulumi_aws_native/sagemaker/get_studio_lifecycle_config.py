# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetStudioLifecycleConfigResult',
    'AwaitableGetStudioLifecycleConfigResult',
    'get_studio_lifecycle_config',
    'get_studio_lifecycle_config_output',
]

@pulumi.output_type
class GetStudioLifecycleConfigResult:
    def __init__(__self__, studio_lifecycle_config_arn=None):
        if studio_lifecycle_config_arn and not isinstance(studio_lifecycle_config_arn, str):
            raise TypeError("Expected argument 'studio_lifecycle_config_arn' to be a str")
        pulumi.set(__self__, "studio_lifecycle_config_arn", studio_lifecycle_config_arn)

    @property
    @pulumi.getter(name="studioLifecycleConfigArn")
    def studio_lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration.
        """
        return pulumi.get(self, "studio_lifecycle_config_arn")


class AwaitableGetStudioLifecycleConfigResult(GetStudioLifecycleConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStudioLifecycleConfigResult(
            studio_lifecycle_config_arn=self.studio_lifecycle_config_arn)


def get_studio_lifecycle_config(studio_lifecycle_config_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStudioLifecycleConfigResult:
    """
    Resource Type definition for AWS::SageMaker::StudioLifecycleConfig


    :param str studio_lifecycle_config_name: The name of the Amazon SageMaker Studio Lifecycle Configuration.
    """
    __args__ = dict()
    __args__['studioLifecycleConfigName'] = studio_lifecycle_config_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:sagemaker:getStudioLifecycleConfig', __args__, opts=opts, typ=GetStudioLifecycleConfigResult).value

    return AwaitableGetStudioLifecycleConfigResult(
        studio_lifecycle_config_arn=pulumi.get(__ret__, 'studio_lifecycle_config_arn'))
def get_studio_lifecycle_config_output(studio_lifecycle_config_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStudioLifecycleConfigResult]:
    """
    Resource Type definition for AWS::SageMaker::StudioLifecycleConfig


    :param str studio_lifecycle_config_name: The name of the Amazon SageMaker Studio Lifecycle Configuration.
    """
    __args__ = dict()
    __args__['studioLifecycleConfigName'] = studio_lifecycle_config_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:sagemaker:getStudioLifecycleConfig', __args__, opts=opts, typ=GetStudioLifecycleConfigResult)
    return __ret__.apply(lambda __response__: GetStudioLifecycleConfigResult(
        studio_lifecycle_config_arn=pulumi.get(__response__, 'studio_lifecycle_config_arn')))
