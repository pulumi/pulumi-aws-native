# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetProcessingJobResult',
    'AwaitableGetProcessingJobResult',
    'get_processing_job',
    'get_processing_job_output',
]

@pulumi.output_type
class GetProcessingJobResult:
    def __init__(__self__, auto_ml_job_arn=None, creation_time=None, exit_message=None, failure_reason=None, last_modified_time=None, monitoring_schedule_arn=None, processing_end_time=None, processing_job_arn=None, processing_job_status=None, processing_start_time=None, training_job_arn=None):
        if auto_ml_job_arn and not isinstance(auto_ml_job_arn, str):
            raise TypeError("Expected argument 'auto_ml_job_arn' to be a str")
        pulumi.set(__self__, "auto_ml_job_arn", auto_ml_job_arn)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if exit_message and not isinstance(exit_message, str):
            raise TypeError("Expected argument 'exit_message' to be a str")
        pulumi.set(__self__, "exit_message", exit_message)
        if failure_reason and not isinstance(failure_reason, str):
            raise TypeError("Expected argument 'failure_reason' to be a str")
        pulumi.set(__self__, "failure_reason", failure_reason)
        if last_modified_time and not isinstance(last_modified_time, str):
            raise TypeError("Expected argument 'last_modified_time' to be a str")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if monitoring_schedule_arn and not isinstance(monitoring_schedule_arn, str):
            raise TypeError("Expected argument 'monitoring_schedule_arn' to be a str")
        pulumi.set(__self__, "monitoring_schedule_arn", monitoring_schedule_arn)
        if processing_end_time and not isinstance(processing_end_time, str):
            raise TypeError("Expected argument 'processing_end_time' to be a str")
        pulumi.set(__self__, "processing_end_time", processing_end_time)
        if processing_job_arn and not isinstance(processing_job_arn, str):
            raise TypeError("Expected argument 'processing_job_arn' to be a str")
        pulumi.set(__self__, "processing_job_arn", processing_job_arn)
        if processing_job_status and not isinstance(processing_job_status, str):
            raise TypeError("Expected argument 'processing_job_status' to be a str")
        pulumi.set(__self__, "processing_job_status", processing_job_status)
        if processing_start_time and not isinstance(processing_start_time, str):
            raise TypeError("Expected argument 'processing_start_time' to be a str")
        pulumi.set(__self__, "processing_start_time", processing_start_time)
        if training_job_arn and not isinstance(training_job_arn, str):
            raise TypeError("Expected argument 'training_job_arn' to be a str")
        pulumi.set(__self__, "training_job_arn", training_job_arn)

    @property
    @pulumi.getter(name="autoMlJobArn")
    def auto_ml_job_arn(self) -> Optional[builtins.str]:
        """
        The ARN of an AutoML job associated with this processing job.
        """
        return pulumi.get(self, "auto_ml_job_arn")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[builtins.str]:
        """
        The time at which the processing job was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="exitMessage")
    def exit_message(self) -> Optional[builtins.str]:
        """
        An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        """
        return pulumi.get(self, "exit_message")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[builtins.str]:
        """
        A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[builtins.str]:
        """
        The time at which the processing job was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="monitoringScheduleArn")
    def monitoring_schedule_arn(self) -> Optional[builtins.str]:
        """
        The ARN of a monitoring schedule for an endpoint associated with this processing job.
        """
        return pulumi.get(self, "monitoring_schedule_arn")

    @property
    @pulumi.getter(name="processingEndTime")
    def processing_end_time(self) -> Optional[builtins.str]:
        """
        The time at which the processing job completed.
        """
        return pulumi.get(self, "processing_end_time")

    @property
    @pulumi.getter(name="processingJobArn")
    def processing_job_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the processing job.
        """
        return pulumi.get(self, "processing_job_arn")

    @property
    @pulumi.getter(name="processingJobStatus")
    def processing_job_status(self) -> Optional['ProcessingJobStatus']:
        """
        Provides the status of a processing job.
        """
        return pulumi.get(self, "processing_job_status")

    @property
    @pulumi.getter(name="processingStartTime")
    def processing_start_time(self) -> Optional[builtins.str]:
        """
        The time at which the processing job started.
        """
        return pulumi.get(self, "processing_start_time")

    @property
    @pulumi.getter(name="trainingJobArn")
    def training_job_arn(self) -> Optional[builtins.str]:
        """
        The ARN of a training job associated with this processing job
        """
        return pulumi.get(self, "training_job_arn")


class AwaitableGetProcessingJobResult(GetProcessingJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProcessingJobResult(
            auto_ml_job_arn=self.auto_ml_job_arn,
            creation_time=self.creation_time,
            exit_message=self.exit_message,
            failure_reason=self.failure_reason,
            last_modified_time=self.last_modified_time,
            monitoring_schedule_arn=self.monitoring_schedule_arn,
            processing_end_time=self.processing_end_time,
            processing_job_arn=self.processing_job_arn,
            processing_job_status=self.processing_job_status,
            processing_start_time=self.processing_start_time,
            training_job_arn=self.training_job_arn)


def get_processing_job(processing_job_arn: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProcessingJobResult:
    """
    Resource Type definition for AWS::SageMaker::ProcessingJob


    :param builtins.str processing_job_arn: The Amazon Resource Name (ARN) of the processing job.
    """
    __args__ = dict()
    __args__['processingJobArn'] = processing_job_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:sagemaker:getProcessingJob', __args__, opts=opts, typ=GetProcessingJobResult).value

    return AwaitableGetProcessingJobResult(
        auto_ml_job_arn=pulumi.get(__ret__, 'auto_ml_job_arn'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        exit_message=pulumi.get(__ret__, 'exit_message'),
        failure_reason=pulumi.get(__ret__, 'failure_reason'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        monitoring_schedule_arn=pulumi.get(__ret__, 'monitoring_schedule_arn'),
        processing_end_time=pulumi.get(__ret__, 'processing_end_time'),
        processing_job_arn=pulumi.get(__ret__, 'processing_job_arn'),
        processing_job_status=pulumi.get(__ret__, 'processing_job_status'),
        processing_start_time=pulumi.get(__ret__, 'processing_start_time'),
        training_job_arn=pulumi.get(__ret__, 'training_job_arn'))
def get_processing_job_output(processing_job_arn: Optional[pulumi.Input[builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProcessingJobResult]:
    """
    Resource Type definition for AWS::SageMaker::ProcessingJob


    :param builtins.str processing_job_arn: The Amazon Resource Name (ARN) of the processing job.
    """
    __args__ = dict()
    __args__['processingJobArn'] = processing_job_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:sagemaker:getProcessingJob', __args__, opts=opts, typ=GetProcessingJobResult)
    return __ret__.apply(lambda __response__: GetProcessingJobResult(
        auto_ml_job_arn=pulumi.get(__response__, 'auto_ml_job_arn'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        exit_message=pulumi.get(__response__, 'exit_message'),
        failure_reason=pulumi.get(__response__, 'failure_reason'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        monitoring_schedule_arn=pulumi.get(__response__, 'monitoring_schedule_arn'),
        processing_end_time=pulumi.get(__response__, 'processing_end_time'),
        processing_job_arn=pulumi.get(__response__, 'processing_job_arn'),
        processing_job_status=pulumi.get(__response__, 'processing_job_status'),
        processing_start_time=pulumi.get(__response__, 'processing_start_time'),
        training_job_arn=pulumi.get(__response__, 'training_job_arn')))
