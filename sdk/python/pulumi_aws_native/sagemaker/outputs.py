# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AppImageConfigFileSystemConfig',
    'AppImageConfigKernelGatewayImageConfig',
    'AppImageConfigKernelSpec',
    'AppImageConfigTag',
    'AppResourceSpec',
    'AppTag',
    'CodeRepositoryGitConfig',
    'CodeRepositoryTag',
    'DataQualityJobDefinitionBatchTransformInput',
    'DataQualityJobDefinitionClusterConfig',
    'DataQualityJobDefinitionConstraintsResource',
    'DataQualityJobDefinitionCsv',
    'DataQualityJobDefinitionDataQualityAppSpecification',
    'DataQualityJobDefinitionDataQualityBaselineConfig',
    'DataQualityJobDefinitionDataQualityJobInput',
    'DataQualityJobDefinitionDatasetFormat',
    'DataQualityJobDefinitionEndpointInput',
    'DataQualityJobDefinitionJson',
    'DataQualityJobDefinitionMonitoringOutput',
    'DataQualityJobDefinitionMonitoringOutputConfig',
    'DataQualityJobDefinitionMonitoringResources',
    'DataQualityJobDefinitionNetworkConfig',
    'DataQualityJobDefinitionS3Output',
    'DataQualityJobDefinitionStatisticsResource',
    'DataQualityJobDefinitionStoppingCondition',
    'DataQualityJobDefinitionTag',
    'DataQualityJobDefinitionVpcConfig',
    'Device',
    'DeviceFleetEdgeOutputConfig',
    'DeviceFleetTag',
    'DeviceTag',
    'DomainCustomImage',
    'DomainDefaultSpaceSettings',
    'DomainJupyterServerAppSettings',
    'DomainKernelGatewayAppSettings',
    'DomainRSessionAppSettings',
    'DomainRStudioServerProAppSettings',
    'DomainRStudioServerProDomainSettings',
    'DomainResourceSpec',
    'DomainSettings',
    'DomainSharingSettings',
    'DomainTag',
    'DomainUserSettings',
    'EndpointAlarm',
    'EndpointAutoRollbackConfig',
    'EndpointBlueGreenUpdatePolicy',
    'EndpointCapacitySize',
    'EndpointConfigAsyncInferenceClientConfig',
    'EndpointConfigAsyncInferenceConfig',
    'EndpointConfigAsyncInferenceNotificationConfig',
    'EndpointConfigAsyncInferenceOutputConfig',
    'EndpointConfigCaptureContentTypeHeader',
    'EndpointConfigCaptureOption',
    'EndpointConfigClarifyExplainerConfig',
    'EndpointConfigClarifyFeatureType',
    'EndpointConfigClarifyHeader',
    'EndpointConfigClarifyInferenceConfig',
    'EndpointConfigClarifyShapBaselineConfig',
    'EndpointConfigClarifyShapConfig',
    'EndpointConfigClarifyTextConfig',
    'EndpointConfigDataCaptureConfig',
    'EndpointConfigExplainerConfig',
    'EndpointConfigProductionVariant',
    'EndpointConfigServerlessConfig',
    'EndpointConfigTag',
    'EndpointDeploymentConfig',
    'EndpointRollingUpdatePolicy',
    'EndpointTag',
    'EndpointTrafficRoutingConfig',
    'EndpointVariantProperty',
    'FeatureGroupDataCatalogConfig',
    'FeatureGroupFeatureDefinition',
    'FeatureGroupOnlineStoreSecurityConfig',
    'FeatureGroupS3StorageConfig',
    'FeatureGroupTag',
    'ImageTag',
    'InferenceExperimentCaptureContentTypeHeader',
    'InferenceExperimentDataStorageConfig',
    'InferenceExperimentEndpointMetadata',
    'InferenceExperimentModelInfrastructureConfig',
    'InferenceExperimentModelVariantConfig',
    'InferenceExperimentRealTimeInferenceConfig',
    'InferenceExperimentSchedule',
    'InferenceExperimentShadowModeConfig',
    'InferenceExperimentShadowModelVariantConfig',
    'InferenceExperimentTag',
    'ModelBiasJobDefinitionBatchTransformInput',
    'ModelBiasJobDefinitionClusterConfig',
    'ModelBiasJobDefinitionConstraintsResource',
    'ModelBiasJobDefinitionCsv',
    'ModelBiasJobDefinitionDatasetFormat',
    'ModelBiasJobDefinitionEndpointInput',
    'ModelBiasJobDefinitionJson',
    'ModelBiasJobDefinitionModelBiasAppSpecification',
    'ModelBiasJobDefinitionModelBiasBaselineConfig',
    'ModelBiasJobDefinitionModelBiasJobInput',
    'ModelBiasJobDefinitionMonitoringGroundTruthS3Input',
    'ModelBiasJobDefinitionMonitoringOutput',
    'ModelBiasJobDefinitionMonitoringOutputConfig',
    'ModelBiasJobDefinitionMonitoringResources',
    'ModelBiasJobDefinitionNetworkConfig',
    'ModelBiasJobDefinitionS3Output',
    'ModelBiasJobDefinitionStoppingCondition',
    'ModelBiasJobDefinitionTag',
    'ModelBiasJobDefinitionVpcConfig',
    'ModelCardAdditionalInformation',
    'ModelCardBarChartMetric',
    'ModelCardBusinessDetails',
    'ModelCardContainer',
    'ModelCardContent',
    'ModelCardEvaluationDetail',
    'ModelCardInferenceSpecification',
    'ModelCardIntendedUses',
    'ModelCardLinearGraphMetric',
    'ModelCardMatrixMetric',
    'ModelCardMetricGroup',
    'ModelCardModelOverview',
    'ModelCardModelOverviewInferenceEnvironmentProperties',
    'ModelCardModelPackageCreator',
    'ModelCardModelPackageDetails',
    'ModelCardObjectiveFunction',
    'ModelCardObjectiveFunctionFunctionProperties',
    'ModelCardSecurityConfig',
    'ModelCardSimpleMetric',
    'ModelCardSourceAlgorithm',
    'ModelCardTag',
    'ModelCardTrainingDetails',
    'ModelCardTrainingDetailsTrainingJobDetailsProperties',
    'ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties',
    'ModelCardTrainingHyperParameter',
    'ModelCardTrainingMetric',
    'ModelCardUserContext',
    'ModelContainerDefinition',
    'ModelExplainabilityJobDefinitionBatchTransformInput',
    'ModelExplainabilityJobDefinitionClusterConfig',
    'ModelExplainabilityJobDefinitionConstraintsResource',
    'ModelExplainabilityJobDefinitionCsv',
    'ModelExplainabilityJobDefinitionDatasetFormat',
    'ModelExplainabilityJobDefinitionEndpointInput',
    'ModelExplainabilityJobDefinitionJson',
    'ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification',
    'ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig',
    'ModelExplainabilityJobDefinitionModelExplainabilityJobInput',
    'ModelExplainabilityJobDefinitionMonitoringOutput',
    'ModelExplainabilityJobDefinitionMonitoringOutputConfig',
    'ModelExplainabilityJobDefinitionMonitoringResources',
    'ModelExplainabilityJobDefinitionNetworkConfig',
    'ModelExplainabilityJobDefinitionS3Output',
    'ModelExplainabilityJobDefinitionStoppingCondition',
    'ModelExplainabilityJobDefinitionTag',
    'ModelExplainabilityJobDefinitionVpcConfig',
    'ModelImageConfig',
    'ModelInferenceExecutionConfig',
    'ModelMultiModelConfig',
    'ModelPackageAdditionalInferenceSpecificationDefinition',
    'ModelPackageBias',
    'ModelPackageContainerDefinition',
    'ModelPackageContainerDefinitionModelInputProperties',
    'ModelPackageCustomerMetadataProperties',
    'ModelPackageDataSource',
    'ModelPackageDriftCheckBaselines',
    'ModelPackageDriftCheckBias',
    'ModelPackageDriftCheckExplainability',
    'ModelPackageDriftCheckModelDataQuality',
    'ModelPackageDriftCheckModelQuality',
    'ModelPackageEnvironment',
    'ModelPackageExplainability',
    'ModelPackageFileSource',
    'ModelPackageGroupTag',
    'ModelPackageInferenceSpecification',
    'ModelPackageMetadataProperties',
    'ModelPackageMetricsSource',
    'ModelPackageModelDataQuality',
    'ModelPackageModelMetrics',
    'ModelPackageModelQuality',
    'ModelPackageS3DataSource',
    'ModelPackageSourceAlgorithm',
    'ModelPackageSourceAlgorithmSpecification',
    'ModelPackageStatusDetails',
    'ModelPackageStatusItem',
    'ModelPackageTag',
    'ModelPackageTransformInput',
    'ModelPackageTransformJobDefinition',
    'ModelPackageTransformOutput',
    'ModelPackageTransformResources',
    'ModelPackageValidationProfile',
    'ModelPackageValidationSpecification',
    'ModelQualityJobDefinitionBatchTransformInput',
    'ModelQualityJobDefinitionClusterConfig',
    'ModelQualityJobDefinitionConstraintsResource',
    'ModelQualityJobDefinitionCsv',
    'ModelQualityJobDefinitionDatasetFormat',
    'ModelQualityJobDefinitionEndpointInput',
    'ModelQualityJobDefinitionJson',
    'ModelQualityJobDefinitionModelQualityAppSpecification',
    'ModelQualityJobDefinitionModelQualityBaselineConfig',
    'ModelQualityJobDefinitionModelQualityJobInput',
    'ModelQualityJobDefinitionMonitoringGroundTruthS3Input',
    'ModelQualityJobDefinitionMonitoringOutput',
    'ModelQualityJobDefinitionMonitoringOutputConfig',
    'ModelQualityJobDefinitionMonitoringResources',
    'ModelQualityJobDefinitionNetworkConfig',
    'ModelQualityJobDefinitionS3Output',
    'ModelQualityJobDefinitionStoppingCondition',
    'ModelQualityJobDefinitionTag',
    'ModelQualityJobDefinitionVpcConfig',
    'ModelRepositoryAuthConfig',
    'ModelTag',
    'ModelVpcConfig',
    'MonitoringScheduleBaselineConfig',
    'MonitoringScheduleBatchTransformInput',
    'MonitoringScheduleClusterConfig',
    'MonitoringScheduleConfig',
    'MonitoringScheduleConstraintsResource',
    'MonitoringScheduleCsv',
    'MonitoringScheduleDatasetFormat',
    'MonitoringScheduleEndpointInput',
    'MonitoringScheduleJson',
    'MonitoringScheduleMonitoringAppSpecification',
    'MonitoringScheduleMonitoringExecutionSummary',
    'MonitoringScheduleMonitoringInput',
    'MonitoringScheduleMonitoringJobDefinition',
    'MonitoringScheduleMonitoringOutput',
    'MonitoringScheduleMonitoringOutputConfig',
    'MonitoringScheduleMonitoringResources',
    'MonitoringScheduleNetworkConfig',
    'MonitoringScheduleS3Output',
    'MonitoringScheduleScheduleConfig',
    'MonitoringScheduleStatisticsResource',
    'MonitoringScheduleStoppingCondition',
    'MonitoringScheduleTag',
    'MonitoringScheduleVpcConfig',
    'NotebookInstanceInstanceMetadataServiceConfiguration',
    'NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook',
    'NotebookInstanceTag',
    'OfflineStoreConfigProperties',
    'OnlineStoreConfigProperties',
    'ParallelismConfigurationProperties',
    'PipelineDefinition0Properties',
    'PipelineDefinition1Properties',
    'PipelineS3Location',
    'PipelineTag',
    'ProjectProvisioningParameter',
    'ProjectTag',
    'ServiceCatalogProvisionedProductDetailsProperties',
    'ServiceCatalogProvisioningDetailsProperties',
    'SpaceCustomImage',
    'SpaceJupyterServerAppSettings',
    'SpaceKernelGatewayAppSettings',
    'SpaceResourceSpec',
    'SpaceSettings',
    'SpaceTag',
    'UserProfileCustomImage',
    'UserProfileJupyterServerAppSettings',
    'UserProfileKernelGatewayAppSettings',
    'UserProfileRStudioServerProAppSettings',
    'UserProfileResourceSpec',
    'UserProfileSharingSettings',
    'UserProfileTag',
    'UserProfileUserSettings',
    'WorkteamCognitoMemberDefinition',
    'WorkteamMemberDefinition',
    'WorkteamNotificationConfiguration',
    'WorkteamOidcMemberDefinition',
    'WorkteamTag',
]

@pulumi.output_type
class AppImageConfigFileSystemConfig(dict):
    """
    The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultGid":
            suggest = "default_gid"
        elif key == "defaultUid":
            suggest = "default_uid"
        elif key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigFileSystemConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigFileSystemConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigFileSystemConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_gid: Optional[int] = None,
                 default_uid: Optional[int] = None,
                 mount_path: Optional[str] = None):
        """
        The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        :param int default_gid: The default POSIX group ID (GID). If not specified, defaults to 100.
        :param int default_uid: The default POSIX user ID (UID). If not specified, defaults to 1000.
        :param str mount_path: The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        """
        if default_gid is not None:
            pulumi.set(__self__, "default_gid", default_gid)
        if default_uid is not None:
            pulumi.set(__self__, "default_uid", default_uid)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter(name="defaultGid")
    def default_gid(self) -> Optional[int]:
        """
        The default POSIX group ID (GID). If not specified, defaults to 100.
        """
        return pulumi.get(self, "default_gid")

    @property
    @pulumi.getter(name="defaultUid")
    def default_uid(self) -> Optional[int]:
        """
        The default POSIX user ID (UID). If not specified, defaults to 1000.
        """
        return pulumi.get(self, "default_uid")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[str]:
        """
        The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        """
        return pulumi.get(self, "mount_path")


@pulumi.output_type
class AppImageConfigKernelGatewayImageConfig(dict):
    """
    The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kernelSpecs":
            suggest = "kernel_specs"
        elif key == "fileSystemConfig":
            suggest = "file_system_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigKernelGatewayImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigKernelGatewayImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigKernelGatewayImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kernel_specs: Sequence['outputs.AppImageConfigKernelSpec'],
                 file_system_config: Optional['outputs.AppImageConfigFileSystemConfig'] = None):
        """
        The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
        :param Sequence['AppImageConfigKernelSpec'] kernel_specs: The specification of the Jupyter kernels in the image.
        :param 'AppImageConfigFileSystemConfig' file_system_config: The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        """
        pulumi.set(__self__, "kernel_specs", kernel_specs)
        if file_system_config is not None:
            pulumi.set(__self__, "file_system_config", file_system_config)

    @property
    @pulumi.getter(name="kernelSpecs")
    def kernel_specs(self) -> Sequence['outputs.AppImageConfigKernelSpec']:
        """
        The specification of the Jupyter kernels in the image.
        """
        return pulumi.get(self, "kernel_specs")

    @property
    @pulumi.getter(name="fileSystemConfig")
    def file_system_config(self) -> Optional['outputs.AppImageConfigFileSystemConfig']:
        """
        The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
        """
        return pulumi.get(self, "file_system_config")


@pulumi.output_type
class AppImageConfigKernelSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppImageConfigKernelSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppImageConfigKernelSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppImageConfigKernelSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 display_name: Optional[str] = None):
        """
        :param str name: The name of the kernel.
        :param str display_name: The display name of the kernel.
        """
        pulumi.set(__self__, "name", name)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the kernel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the kernel.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class AppImageConfigTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class AppResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "sageMakerImageArn":
            suggest = "sage_maker_image_arn"
        elif key == "sageMakerImageVersionArn":
            suggest = "sage_maker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional['AppResourceSpecInstanceType'] = None,
                 sage_maker_image_arn: Optional[str] = None,
                 sage_maker_image_version_arn: Optional[str] = None):
        """
        :param 'AppResourceSpecInstanceType' instance_type: The instance type that the image version runs on.
        :param str sage_maker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sage_maker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['AppResourceSpecInstanceType']:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")


@pulumi.output_type
class AppTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CodeRepositoryGitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "secretArn":
            suggest = "secret_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeRepositoryGitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeRepositoryGitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeRepositoryGitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_url: str,
                 branch: Optional[str] = None,
                 secret_arn: Optional[str] = None):
        pulumi.set(__self__, "repository_url", repository_url)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[str]:
        return pulumi.get(self, "secret_arn")


@pulumi.output_type
class CodeRepositoryTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DataQualityJobDefinitionBatchTransformInput(dict):
    """
    The batch transform input for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "excludeFeaturesAttribute":
            suggest = "exclude_features_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.DataQualityJobDefinitionDatasetFormat',
                 local_path: str,
                 exclude_features_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['DataQualityJobDefinitionBatchTransformInputS3InputMode'] = None):
        """
        The batch transform input for a monitoring job.
        :param str data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str exclude_features_attribute: Indexes or names of the features to be excluded from analysis
        :param 'DataQualityJobDefinitionBatchTransformInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'DataQualityJobDefinitionBatchTransformInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if exclude_features_attribute is not None:
            pulumi.set(__self__, "exclude_features_attribute", exclude_features_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.DataQualityJobDefinitionDatasetFormat':
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="excludeFeaturesAttribute")
    def exclude_features_attribute(self) -> Optional[str]:
        """
        Indexes or names of the features to be excluded from analysis
        """
        return pulumi.get(self, "exclude_features_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['DataQualityJobDefinitionBatchTransformInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['DataQualityJobDefinitionBatchTransformInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class DataQualityJobDefinitionClusterConfig(dict):
    """
    Configuration for the cluster used to run model monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class DataQualityJobDefinitionConstraintsResource(dict):
    """
    The baseline constraints resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class DataQualityJobDefinitionCsv(dict):
    """
    The CSV format
    """
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        The CSV format
        :param bool header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityAppSpecification(dict):
    """
    Container image configuration object for the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUri":
            suggest = "image_uri"
        elif key == "containerArguments":
            suggest = "container_arguments"
        elif key == "containerEntrypoint":
            suggest = "container_entrypoint"
        elif key == "postAnalyticsProcessorSourceUri":
            suggest = "post_analytics_processor_source_uri"
        elif key == "recordPreprocessorSourceUri":
            suggest = "record_preprocessor_source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_uri: str,
                 container_arguments: Optional[Sequence[str]] = None,
                 container_entrypoint: Optional[Sequence[str]] = None,
                 environment: Optional[Any] = None,
                 post_analytics_processor_source_uri: Optional[str] = None,
                 record_preprocessor_source_uri: Optional[str] = None):
        """
        Container image configuration object for the monitoring job.
        :param str image_uri: The container image to be run by the monitoring job.
        :param Sequence[str] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param Sequence[str] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        :param str post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param str record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[Sequence[str]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[Sequence[str]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityBaselineConfig(dict):
    """
    Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseliningJobName":
            suggest = "baselining_job_name"
        elif key == "constraintsResource":
            suggest = "constraints_resource"
        elif key == "statisticsResource":
            suggest = "statistics_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baselining_job_name: Optional[str] = None,
                 constraints_resource: Optional['outputs.DataQualityJobDefinitionConstraintsResource'] = None,
                 statistics_resource: Optional['outputs.DataQualityJobDefinitionStatisticsResource'] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[str]:
        return pulumi.get(self, "baselining_job_name")

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.DataQualityJobDefinitionConstraintsResource']:
        return pulumi.get(self, "constraints_resource")

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional['outputs.DataQualityJobDefinitionStatisticsResource']:
        return pulumi.get(self, "statistics_resource")


@pulumi.output_type
class DataQualityJobDefinitionDataQualityJobInput(dict):
    """
    The inputs for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionDataQualityJobInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionDataQualityJobInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionDataQualityJobInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_transform_input: Optional['outputs.DataQualityJobDefinitionBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.DataQualityJobDefinitionEndpointInput'] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.DataQualityJobDefinitionBatchTransformInput']:
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.DataQualityJobDefinitionEndpointInput']:
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class DataQualityJobDefinitionDatasetFormat(dict):
    """
    The dataset format of the data to monitor
    """
    def __init__(__self__, *,
                 csv: Optional['outputs.DataQualityJobDefinitionCsv'] = None,
                 json: Optional['outputs.DataQualityJobDefinitionJson'] = None,
                 parquet: Optional[bool] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.DataQualityJobDefinitionCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.DataQualityJobDefinitionJson']:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def parquet(self) -> Optional[bool]:
        return pulumi.get(self, "parquet")


@pulumi.output_type
class DataQualityJobDefinitionEndpointInput(dict):
    """
    The endpoint for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "excludeFeaturesAttribute":
            suggest = "exclude_features_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: str,
                 exclude_features_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['DataQualityJobDefinitionEndpointInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['DataQualityJobDefinitionEndpointInputS3InputMode'] = None):
        """
        The endpoint for a monitoring job.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str exclude_features_attribute: Indexes or names of the features to be excluded from analysis
        :param 'DataQualityJobDefinitionEndpointInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'DataQualityJobDefinitionEndpointInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if exclude_features_attribute is not None:
            pulumi.set(__self__, "exclude_features_attribute", exclude_features_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="excludeFeaturesAttribute")
    def exclude_features_attribute(self) -> Optional[str]:
        """
        Indexes or names of the features to be excluded from analysis
        """
        return pulumi.get(self, "exclude_features_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['DataQualityJobDefinitionEndpointInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['DataQualityJobDefinitionEndpointInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class DataQualityJobDefinitionJson(dict):
    """
    The Json format
    """
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        The Json format
        :param bool line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class DataQualityJobDefinitionMonitoringOutput(dict):
    """
    The output object for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionMonitoringOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.DataQualityJobDefinitionS3Output'):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.DataQualityJobDefinitionS3Output':
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class DataQualityJobDefinitionMonitoringOutputConfig(dict):
    """
    The output configuration for monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionMonitoringOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: Sequence['outputs.DataQualityJobDefinitionMonitoringOutput'],
                 kms_key_id: Optional[str] = None):
        """
        The output configuration for monitoring jobs.
        :param Sequence['DataQualityJobDefinitionMonitoringOutput'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> Sequence['outputs.DataQualityJobDefinitionMonitoringOutput']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class DataQualityJobDefinitionMonitoringResources(dict):
    """
    Identifies the resources to deploy for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionMonitoringResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionMonitoringResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionMonitoringResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.DataQualityJobDefinitionClusterConfig'):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.DataQualityJobDefinitionClusterConfig':
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class DataQualityJobDefinitionNetworkConfig(dict):
    """
    Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.DataQualityJobDefinitionVpcConfig'] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.DataQualityJobDefinitionVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class DataQualityJobDefinitionS3Output(dict):
    """
    Information about where and how to store the results of a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_path: str,
                 s3_uri: str,
                 s3_upload_mode: Optional['DataQualityJobDefinitionS3OutputS3UploadMode'] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param str local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param 'DataQualityJobDefinitionS3OutputS3UploadMode' s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional['DataQualityJobDefinitionS3OutputS3UploadMode']:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class DataQualityJobDefinitionStatisticsResource(dict):
    """
    The baseline statistics resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionStatisticsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionStatisticsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionStatisticsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline statistics resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class DataQualityJobDefinitionStoppingCondition(dict):
    """
    Specifies a time limit for how long the monitoring job is allowed to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: int):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> int:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class DataQualityJobDefinitionTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DataQualityJobDefinitionVpcConfig(dict):
    """
    Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataQualityJobDefinitionVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataQualityJobDefinitionVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataQualityJobDefinitionVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class Device(dict):
    """
    Edge device you want to create
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "iotThingName":
            suggest = "iot_thing_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Device. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Device.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Device.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: str,
                 description: Optional[str] = None,
                 iot_thing_name: Optional[str] = None):
        """
        Edge device you want to create
        :param str device_name: The name of the device
        :param str description: Description of the device
        :param str iot_thing_name: AWS Internet of Things (IoT) object name.
        """
        pulumi.set(__self__, "device_name", device_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iot_thing_name is not None:
            pulumi.set(__self__, "iot_thing_name", iot_thing_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        The name of the device
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the device
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iotThingName")
    def iot_thing_name(self) -> Optional[str]:
        """
        AWS Internet of Things (IoT) object name.
        """
        return pulumi.get(self, "iot_thing_name")


@pulumi.output_type
class DeviceFleetEdgeOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3OutputLocation":
            suggest = "s3_output_location"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceFleetEdgeOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceFleetEdgeOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceFleetEdgeOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output_location: str,
                 kms_key_id: Optional[str] = None):
        """
        :param str s3_output_location: The Amazon Simple Storage (S3) bucket URI
        :param str kms_key_id: The KMS key id used for encryption on the S3 bucket
        """
        pulumi.set(__self__, "s3_output_location", s3_output_location)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputLocation")
    def s3_output_location(self) -> str:
        """
        The Amazon Simple Storage (S3) bucket URI
        """
        return pulumi.get(self, "s3_output_location")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The KMS key id used for encryption on the S3 bucket
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class DeviceFleetTag(dict):
    """
    Key-value pair to associate as a tag for the resource
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        Key-value pair to associate as a tag for the resource
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DeviceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The key value of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainCustomImage(dict):
    """
    A custom SageMaker image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        A custom SageMaker image.
        :param str app_image_config_name: The Name of the AppImageConfig.
        :param str image_name: The name of the CustomImage. Must be unique to your account.
        :param int image_version_number: The version number of the CustomImage.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The Name of the AppImageConfig.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the CustomImage. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the CustomImage.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class DomainDefaultSpaceSettings(dict):
    """
    A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the Create/Update Domain API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDefaultSpaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDefaultSpaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDefaultSpaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: str,
                 jupyter_server_app_settings: Optional['outputs.DomainJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.DomainKernelGatewayAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None):
        """
        A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the Create/Update Domain API is called.
        :param str execution_role: The execution role for the space.
        :param 'DomainJupyterServerAppSettings' jupyter_server_app_settings: The Jupyter server's app settings.
        :param 'DomainKernelGatewayAppSettings' kernel_gateway_app_settings: The kernel gateway app settings.
        :param Sequence[str] security_groups: The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> str:
        """
        The execution role for the space.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.DomainJupyterServerAppSettings']:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.DomainKernelGatewayAppSettings']:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        return pulumi.get(self, "security_groups")


@pulumi.output_type
class DomainJupyterServerAppSettings(dict):
    """
    The JupyterServer app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: Optional['outputs.DomainResourceSpec'] = None):
        """
        The JupyterServer app settings.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainResourceSpec']:
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class DomainKernelGatewayAppSettings(dict):
    """
    The kernel gateway app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.DomainCustomImage']] = None,
                 default_resource_spec: Optional['outputs.DomainResourceSpec'] = None):
        """
        The kernel gateway app settings.
        :param Sequence['DomainCustomImage'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        :param 'DomainResourceSpec' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.DomainCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class DomainRSessionAppSettings(dict):
    """
    A collection of settings that apply to an RSessionGateway app.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRSessionAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRSessionAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRSessionAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.DomainCustomImage']] = None,
                 default_resource_spec: Optional['outputs.DomainResourceSpec'] = None):
        """
        A collection of settings that apply to an RSessionGateway app.
        :param Sequence['DomainCustomImage'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.DomainCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainResourceSpec']:
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class DomainRStudioServerProAppSettings(dict):
    """
    A collection of settings that configure user interaction with the RStudioServerPro app.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessStatus":
            suggest = "access_status"
        elif key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRStudioServerProAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRStudioServerProAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRStudioServerProAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_status: Optional['DomainRStudioServerProAppSettingsAccessStatus'] = None,
                 user_group: Optional['DomainRStudioServerProAppSettingsUserGroup'] = None):
        """
        A collection of settings that configure user interaction with the RStudioServerPro app.
        :param 'DomainRStudioServerProAppSettingsAccessStatus' access_status: Indicates whether the current user has access to the RStudioServerPro app.
        :param 'DomainRStudioServerProAppSettingsUserGroup' user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional['DomainRStudioServerProAppSettingsAccessStatus']:
        """
        Indicates whether the current user has access to the RStudioServerPro app.
        """
        return pulumi.get(self, "access_status")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional['DomainRStudioServerProAppSettingsUserGroup']:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class DomainRStudioServerProDomainSettings(dict):
    """
    A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainExecutionRoleArn":
            suggest = "domain_execution_role_arn"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"
        elif key == "rStudioConnectUrl":
            suggest = "r_studio_connect_url"
        elif key == "rStudioPackageManagerUrl":
            suggest = "r_studio_package_manager_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRStudioServerProDomainSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRStudioServerProDomainSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRStudioServerProDomainSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_execution_role_arn: str,
                 default_resource_spec: Optional['outputs.DomainResourceSpec'] = None,
                 r_studio_connect_url: Optional[str] = None,
                 r_studio_package_manager_url: Optional[str] = None):
        """
        A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
        :param str domain_execution_role_arn: The ARN of the execution role for the RStudioServerPro Domain-level app.
        :param str r_studio_connect_url: A URL pointing to an RStudio Connect server.
        :param str r_studio_package_manager_url: A URL pointing to an RStudio Package Manager server.
        """
        pulumi.set(__self__, "domain_execution_role_arn", domain_execution_role_arn)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)
        if r_studio_connect_url is not None:
            pulumi.set(__self__, "r_studio_connect_url", r_studio_connect_url)
        if r_studio_package_manager_url is not None:
            pulumi.set(__self__, "r_studio_package_manager_url", r_studio_package_manager_url)

    @property
    @pulumi.getter(name="domainExecutionRoleArn")
    def domain_execution_role_arn(self) -> str:
        """
        The ARN of the execution role for the RStudioServerPro Domain-level app.
        """
        return pulumi.get(self, "domain_execution_role_arn")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.DomainResourceSpec']:
        return pulumi.get(self, "default_resource_spec")

    @property
    @pulumi.getter(name="rStudioConnectUrl")
    def r_studio_connect_url(self) -> Optional[str]:
        """
        A URL pointing to an RStudio Connect server.
        """
        return pulumi.get(self, "r_studio_connect_url")

    @property
    @pulumi.getter(name="rStudioPackageManagerUrl")
    def r_studio_package_manager_url(self) -> Optional[str]:
        """
        A URL pointing to an RStudio Package Manager server.
        """
        return pulumi.get(self, "r_studio_package_manager_url")


@pulumi.output_type
class DomainResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "lifecycleConfigArn":
            suggest = "lifecycle_config_arn"
        elif key == "sageMakerImageArn":
            suggest = "sage_maker_image_arn"
        elif key == "sageMakerImageVersionArn":
            suggest = "sage_maker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional['DomainResourceSpecInstanceType'] = None,
                 lifecycle_config_arn: Optional[str] = None,
                 sage_maker_image_arn: Optional[str] = None,
                 sage_maker_image_version_arn: Optional[str] = None):
        """
        :param 'DomainResourceSpecInstanceType' instance_type: The instance type that the image version runs on.
        :param str lifecycle_config_arn: The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
        :param str sage_maker_image_arn: The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
        :param str sage_maker_image_version_arn: The Amazon Resource Name (ARN) of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if lifecycle_config_arn is not None:
            pulumi.set(__self__, "lifecycle_config_arn", lifecycle_config_arn)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['DomainResourceSpecInstanceType']:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="lifecycleConfigArn")
    def lifecycle_config_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
        """
        return pulumi.get(self, "lifecycle_config_arn")

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")


@pulumi.output_type
class DomainSettings(dict):
    """
    A collection of Domain settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rStudioServerProDomainSettings":
            suggest = "r_studio_server_pro_domain_settings"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 r_studio_server_pro_domain_settings: Optional['outputs.DomainRStudioServerProDomainSettings'] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        A collection of Domain settings.
        :param Sequence[str] security_group_ids: The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        if r_studio_server_pro_domain_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_domain_settings", r_studio_server_pro_domain_settings)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="rStudioServerProDomainSettings")
    def r_studio_server_pro_domain_settings(self) -> Optional['outputs.DomainRStudioServerProDomainSettings']:
        return pulumi.get(self, "r_studio_server_pro_domain_settings")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class DomainSharingSettings(dict):
    """
    Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookOutputOption":
            suggest = "notebook_output_option"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"
        elif key == "s3OutputPath":
            suggest = "s3_output_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainSharingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainSharingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainSharingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_output_option: Optional['DomainSharingSettingsNotebookOutputOption'] = None,
                 s3_kms_key_id: Optional[str] = None,
                 s3_output_path: Optional[str] = None):
        """
        Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
        :param 'DomainSharingSettingsNotebookOutputOption' notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        :param str s3_kms_key_id: When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param str s3_output_path: When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional['DomainSharingSettingsNotebookOutputOption']:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        """
        return pulumi.get(self, "notebook_output_option")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[str]:
        """
        When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        return pulumi.get(self, "s3_output_path")


@pulumi.output_type
class DomainTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainUserSettings(dict):
    """
    A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "rSessionAppSettings":
            suggest = "r_session_app_settings"
        elif key == "rStudioServerProAppSettings":
            suggest = "r_studio_server_pro_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "sharingSettings":
            suggest = "sharing_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainUserSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainUserSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainUserSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: str,
                 jupyter_server_app_settings: Optional['outputs.DomainJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.DomainKernelGatewayAppSettings'] = None,
                 r_session_app_settings: Optional['outputs.DomainRSessionAppSettings'] = None,
                 r_studio_server_pro_app_settings: Optional['outputs.DomainRStudioServerProAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 sharing_settings: Optional['outputs.DomainSharingSettings'] = None):
        """
        A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
        :param str execution_role: The execution role for the user.
        :param 'DomainJupyterServerAppSettings' jupyter_server_app_settings: The Jupyter server's app settings.
        :param 'DomainKernelGatewayAppSettings' kernel_gateway_app_settings: The kernel gateway app settings.
        :param Sequence[str] security_groups: The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        :param 'DomainSharingSettings' sharing_settings: The sharing settings.
        """
        pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_session_app_settings is not None:
            pulumi.set(__self__, "r_session_app_settings", r_session_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> str:
        """
        The execution role for the user.
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.DomainJupyterServerAppSettings']:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.DomainKernelGatewayAppSettings']:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="rSessionAppSettings")
    def r_session_app_settings(self) -> Optional['outputs.DomainRSessionAppSettings']:
        return pulumi.get(self, "r_session_app_settings")

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional['outputs.DomainRStudioServerProAppSettings']:
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional['outputs.DomainSharingSettings']:
        """
        The sharing settings.
        """
        return pulumi.get(self, "sharing_settings")


@pulumi.output_type
class EndpointAlarm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmName":
            suggest = "alarm_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointAlarm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointAlarm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointAlarm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_name: str):
        pulumi.set(__self__, "alarm_name", alarm_name)

    @property
    @pulumi.getter(name="alarmName")
    def alarm_name(self) -> str:
        return pulumi.get(self, "alarm_name")


@pulumi.output_type
class EndpointAutoRollbackConfig(dict):
    def __init__(__self__, *,
                 alarms: Sequence['outputs.EndpointAlarm']):
        pulumi.set(__self__, "alarms", alarms)

    @property
    @pulumi.getter
    def alarms(self) -> Sequence['outputs.EndpointAlarm']:
        return pulumi.get(self, "alarms")


@pulumi.output_type
class EndpointBlueGreenUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trafficRoutingConfiguration":
            suggest = "traffic_routing_configuration"
        elif key == "maximumExecutionTimeoutInSeconds":
            suggest = "maximum_execution_timeout_in_seconds"
        elif key == "terminationWaitInSeconds":
            suggest = "termination_wait_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointBlueGreenUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointBlueGreenUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointBlueGreenUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 traffic_routing_configuration: 'outputs.EndpointTrafficRoutingConfig',
                 maximum_execution_timeout_in_seconds: Optional[int] = None,
                 termination_wait_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "traffic_routing_configuration", traffic_routing_configuration)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if termination_wait_in_seconds is not None:
            pulumi.set(__self__, "termination_wait_in_seconds", termination_wait_in_seconds)

    @property
    @pulumi.getter(name="trafficRoutingConfiguration")
    def traffic_routing_configuration(self) -> 'outputs.EndpointTrafficRoutingConfig':
        return pulumi.get(self, "traffic_routing_configuration")

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @property
    @pulumi.getter(name="terminationWaitInSeconds")
    def termination_wait_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_wait_in_seconds")


@pulumi.output_type
class EndpointCapacitySize(dict):
    def __init__(__self__, *,
                 type: str,
                 value: int):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointConfigAsyncInferenceClientConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentInvocationsPerInstance":
            suggest = "max_concurrent_invocations_per_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigAsyncInferenceClientConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigAsyncInferenceClientConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigAsyncInferenceClientConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent_invocations_per_instance: Optional[int] = None):
        if max_concurrent_invocations_per_instance is not None:
            pulumi.set(__self__, "max_concurrent_invocations_per_instance", max_concurrent_invocations_per_instance)

    @property
    @pulumi.getter(name="maxConcurrentInvocationsPerInstance")
    def max_concurrent_invocations_per_instance(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_invocations_per_instance")


@pulumi.output_type
class EndpointConfigAsyncInferenceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputConfig":
            suggest = "output_config"
        elif key == "clientConfig":
            suggest = "client_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigAsyncInferenceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigAsyncInferenceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigAsyncInferenceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output_config: 'outputs.EndpointConfigAsyncInferenceOutputConfig',
                 client_config: Optional['outputs.EndpointConfigAsyncInferenceClientConfig'] = None):
        pulumi.set(__self__, "output_config", output_config)
        if client_config is not None:
            pulumi.set(__self__, "client_config", client_config)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> 'outputs.EndpointConfigAsyncInferenceOutputConfig':
        return pulumi.get(self, "output_config")

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> Optional['outputs.EndpointConfigAsyncInferenceClientConfig']:
        return pulumi.get(self, "client_config")


@pulumi.output_type
class EndpointConfigAsyncInferenceNotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorTopic":
            suggest = "error_topic"
        elif key == "includeInferenceResponseIn":
            suggest = "include_inference_response_in"
        elif key == "successTopic":
            suggest = "success_topic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigAsyncInferenceNotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigAsyncInferenceNotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigAsyncInferenceNotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_topic: Optional[str] = None,
                 include_inference_response_in: Optional[Sequence[str]] = None,
                 success_topic: Optional[str] = None):
        if error_topic is not None:
            pulumi.set(__self__, "error_topic", error_topic)
        if include_inference_response_in is not None:
            pulumi.set(__self__, "include_inference_response_in", include_inference_response_in)
        if success_topic is not None:
            pulumi.set(__self__, "success_topic", success_topic)

    @property
    @pulumi.getter(name="errorTopic")
    def error_topic(self) -> Optional[str]:
        return pulumi.get(self, "error_topic")

    @property
    @pulumi.getter(name="includeInferenceResponseIn")
    def include_inference_response_in(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "include_inference_response_in")

    @property
    @pulumi.getter(name="successTopic")
    def success_topic(self) -> Optional[str]:
        return pulumi.get(self, "success_topic")


@pulumi.output_type
class EndpointConfigAsyncInferenceOutputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "notificationConfig":
            suggest = "notification_config"
        elif key == "s3FailurePath":
            suggest = "s3_failure_path"
        elif key == "s3OutputPath":
            suggest = "s3_output_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigAsyncInferenceOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigAsyncInferenceOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigAsyncInferenceOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None,
                 notification_config: Optional['outputs.EndpointConfigAsyncInferenceNotificationConfig'] = None,
                 s3_failure_path: Optional[str] = None,
                 s3_output_path: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if notification_config is not None:
            pulumi.set(__self__, "notification_config", notification_config)
        if s3_failure_path is not None:
            pulumi.set(__self__, "s3_failure_path", s3_failure_path)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="notificationConfig")
    def notification_config(self) -> Optional['outputs.EndpointConfigAsyncInferenceNotificationConfig']:
        return pulumi.get(self, "notification_config")

    @property
    @pulumi.getter(name="s3FailurePath")
    def s3_failure_path(self) -> Optional[str]:
        return pulumi.get(self, "s3_failure_path")

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[str]:
        return pulumi.get(self, "s3_output_path")


@pulumi.output_type
class EndpointConfigCaptureContentTypeHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "csvContentTypes":
            suggest = "csv_content_types"
        elif key == "jsonContentTypes":
            suggest = "json_content_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigCaptureContentTypeHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigCaptureContentTypeHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigCaptureContentTypeHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 csv_content_types: Optional[Sequence[str]] = None,
                 json_content_types: Optional[Sequence[str]] = None):
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "csv_content_types")

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "json_content_types")


@pulumi.output_type
class EndpointConfigCaptureOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captureMode":
            suggest = "capture_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigCaptureOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigCaptureOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigCaptureOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capture_mode: str):
        pulumi.set(__self__, "capture_mode", capture_mode)

    @property
    @pulumi.getter(name="captureMode")
    def capture_mode(self) -> str:
        return pulumi.get(self, "capture_mode")


@pulumi.output_type
class EndpointConfigClarifyExplainerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shapConfig":
            suggest = "shap_config"
        elif key == "enableExplanations":
            suggest = "enable_explanations"
        elif key == "inferenceConfig":
            suggest = "inference_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigClarifyExplainerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigClarifyExplainerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigClarifyExplainerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shap_config: 'outputs.EndpointConfigClarifyShapConfig',
                 enable_explanations: Optional[str] = None,
                 inference_config: Optional['outputs.EndpointConfigClarifyInferenceConfig'] = None):
        pulumi.set(__self__, "shap_config", shap_config)
        if enable_explanations is not None:
            pulumi.set(__self__, "enable_explanations", enable_explanations)
        if inference_config is not None:
            pulumi.set(__self__, "inference_config", inference_config)

    @property
    @pulumi.getter(name="shapConfig")
    def shap_config(self) -> 'outputs.EndpointConfigClarifyShapConfig':
        return pulumi.get(self, "shap_config")

    @property
    @pulumi.getter(name="enableExplanations")
    def enable_explanations(self) -> Optional[str]:
        return pulumi.get(self, "enable_explanations")

    @property
    @pulumi.getter(name="inferenceConfig")
    def inference_config(self) -> Optional['outputs.EndpointConfigClarifyInferenceConfig']:
        return pulumi.get(self, "inference_config")


@pulumi.output_type
class EndpointConfigClarifyFeatureType(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class EndpointConfigClarifyHeader(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class EndpointConfigClarifyInferenceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentTemplate":
            suggest = "content_template"
        elif key == "featureHeaders":
            suggest = "feature_headers"
        elif key == "featureTypes":
            suggest = "feature_types"
        elif key == "featuresAttribute":
            suggest = "features_attribute"
        elif key == "labelAttribute":
            suggest = "label_attribute"
        elif key == "labelHeaders":
            suggest = "label_headers"
        elif key == "labelIndex":
            suggest = "label_index"
        elif key == "maxPayloadInMb":
            suggest = "max_payload_in_mb"
        elif key == "maxRecordCount":
            suggest = "max_record_count"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "probabilityIndex":
            suggest = "probability_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigClarifyInferenceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigClarifyInferenceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigClarifyInferenceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_template: Optional[str] = None,
                 feature_headers: Optional[Sequence['outputs.EndpointConfigClarifyHeader']] = None,
                 feature_types: Optional[Sequence['outputs.EndpointConfigClarifyFeatureType']] = None,
                 features_attribute: Optional[str] = None,
                 label_attribute: Optional[str] = None,
                 label_headers: Optional[Sequence['outputs.EndpointConfigClarifyHeader']] = None,
                 label_index: Optional[int] = None,
                 max_payload_in_mb: Optional[int] = None,
                 max_record_count: Optional[int] = None,
                 probability_attribute: Optional[str] = None,
                 probability_index: Optional[int] = None):
        if content_template is not None:
            pulumi.set(__self__, "content_template", content_template)
        if feature_headers is not None:
            pulumi.set(__self__, "feature_headers", feature_headers)
        if feature_types is not None:
            pulumi.set(__self__, "feature_types", feature_types)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if label_attribute is not None:
            pulumi.set(__self__, "label_attribute", label_attribute)
        if label_headers is not None:
            pulumi.set(__self__, "label_headers", label_headers)
        if label_index is not None:
            pulumi.set(__self__, "label_index", label_index)
        if max_payload_in_mb is not None:
            pulumi.set(__self__, "max_payload_in_mb", max_payload_in_mb)
        if max_record_count is not None:
            pulumi.set(__self__, "max_record_count", max_record_count)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_index is not None:
            pulumi.set(__self__, "probability_index", probability_index)

    @property
    @pulumi.getter(name="contentTemplate")
    def content_template(self) -> Optional[str]:
        return pulumi.get(self, "content_template")

    @property
    @pulumi.getter(name="featureHeaders")
    def feature_headers(self) -> Optional[Sequence['outputs.EndpointConfigClarifyHeader']]:
        return pulumi.get(self, "feature_headers")

    @property
    @pulumi.getter(name="featureTypes")
    def feature_types(self) -> Optional[Sequence['outputs.EndpointConfigClarifyFeatureType']]:
        return pulumi.get(self, "feature_types")

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[str]:
        return pulumi.get(self, "features_attribute")

    @property
    @pulumi.getter(name="labelAttribute")
    def label_attribute(self) -> Optional[str]:
        return pulumi.get(self, "label_attribute")

    @property
    @pulumi.getter(name="labelHeaders")
    def label_headers(self) -> Optional[Sequence['outputs.EndpointConfigClarifyHeader']]:
        return pulumi.get(self, "label_headers")

    @property
    @pulumi.getter(name="labelIndex")
    def label_index(self) -> Optional[int]:
        return pulumi.get(self, "label_index")

    @property
    @pulumi.getter(name="maxPayloadInMb")
    def max_payload_in_mb(self) -> Optional[int]:
        return pulumi.get(self, "max_payload_in_mb")

    @property
    @pulumi.getter(name="maxRecordCount")
    def max_record_count(self) -> Optional[int]:
        return pulumi.get(self, "max_record_count")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="probabilityIndex")
    def probability_index(self) -> Optional[int]:
        return pulumi.get(self, "probability_index")


@pulumi.output_type
class EndpointConfigClarifyShapBaselineConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mimeType":
            suggest = "mime_type"
        elif key == "shapBaseline":
            suggest = "shap_baseline"
        elif key == "shapBaselineUri":
            suggest = "shap_baseline_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigClarifyShapBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigClarifyShapBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigClarifyShapBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mime_type: Optional[str] = None,
                 shap_baseline: Optional[str] = None,
                 shap_baseline_uri: Optional[str] = None):
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if shap_baseline is not None:
            pulumi.set(__self__, "shap_baseline", shap_baseline)
        if shap_baseline_uri is not None:
            pulumi.set(__self__, "shap_baseline_uri", shap_baseline_uri)

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[str]:
        return pulumi.get(self, "mime_type")

    @property
    @pulumi.getter(name="shapBaseline")
    def shap_baseline(self) -> Optional[str]:
        return pulumi.get(self, "shap_baseline")

    @property
    @pulumi.getter(name="shapBaselineUri")
    def shap_baseline_uri(self) -> Optional[str]:
        return pulumi.get(self, "shap_baseline_uri")


@pulumi.output_type
class EndpointConfigClarifyShapConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shapBaselineConfig":
            suggest = "shap_baseline_config"
        elif key == "numberOfSamples":
            suggest = "number_of_samples"
        elif key == "textConfig":
            suggest = "text_config"
        elif key == "useLogit":
            suggest = "use_logit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigClarifyShapConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigClarifyShapConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigClarifyShapConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shap_baseline_config: 'outputs.EndpointConfigClarifyShapBaselineConfig',
                 number_of_samples: Optional[int] = None,
                 seed: Optional[int] = None,
                 text_config: Optional['outputs.EndpointConfigClarifyTextConfig'] = None,
                 use_logit: Optional[bool] = None):
        pulumi.set(__self__, "shap_baseline_config", shap_baseline_config)
        if number_of_samples is not None:
            pulumi.set(__self__, "number_of_samples", number_of_samples)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if text_config is not None:
            pulumi.set(__self__, "text_config", text_config)
        if use_logit is not None:
            pulumi.set(__self__, "use_logit", use_logit)

    @property
    @pulumi.getter(name="shapBaselineConfig")
    def shap_baseline_config(self) -> 'outputs.EndpointConfigClarifyShapBaselineConfig':
        return pulumi.get(self, "shap_baseline_config")

    @property
    @pulumi.getter(name="numberOfSamples")
    def number_of_samples(self) -> Optional[int]:
        return pulumi.get(self, "number_of_samples")

    @property
    @pulumi.getter
    def seed(self) -> Optional[int]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="textConfig")
    def text_config(self) -> Optional['outputs.EndpointConfigClarifyTextConfig']:
        return pulumi.get(self, "text_config")

    @property
    @pulumi.getter(name="useLogit")
    def use_logit(self) -> Optional[bool]:
        return pulumi.get(self, "use_logit")


@pulumi.output_type
class EndpointConfigClarifyTextConfig(dict):
    def __init__(__self__, *,
                 granularity: str,
                 language: str):
        pulumi.set(__self__, "granularity", granularity)
        pulumi.set(__self__, "language", language)

    @property
    @pulumi.getter
    def granularity(self) -> str:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter
    def language(self) -> str:
        return pulumi.get(self, "language")


@pulumi.output_type
class EndpointConfigDataCaptureConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "captureOptions":
            suggest = "capture_options"
        elif key == "destinationS3Uri":
            suggest = "destination_s3_uri"
        elif key == "initialSamplingPercentage":
            suggest = "initial_sampling_percentage"
        elif key == "captureContentTypeHeader":
            suggest = "capture_content_type_header"
        elif key == "enableCapture":
            suggest = "enable_capture"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigDataCaptureConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigDataCaptureConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigDataCaptureConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capture_options: Sequence['outputs.EndpointConfigCaptureOption'],
                 destination_s3_uri: str,
                 initial_sampling_percentage: int,
                 capture_content_type_header: Optional['outputs.EndpointConfigCaptureContentTypeHeader'] = None,
                 enable_capture: Optional[bool] = None,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "capture_options", capture_options)
        pulumi.set(__self__, "destination_s3_uri", destination_s3_uri)
        pulumi.set(__self__, "initial_sampling_percentage", initial_sampling_percentage)
        if capture_content_type_header is not None:
            pulumi.set(__self__, "capture_content_type_header", capture_content_type_header)
        if enable_capture is not None:
            pulumi.set(__self__, "enable_capture", enable_capture)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="captureOptions")
    def capture_options(self) -> Sequence['outputs.EndpointConfigCaptureOption']:
        return pulumi.get(self, "capture_options")

    @property
    @pulumi.getter(name="destinationS3Uri")
    def destination_s3_uri(self) -> str:
        return pulumi.get(self, "destination_s3_uri")

    @property
    @pulumi.getter(name="initialSamplingPercentage")
    def initial_sampling_percentage(self) -> int:
        return pulumi.get(self, "initial_sampling_percentage")

    @property
    @pulumi.getter(name="captureContentTypeHeader")
    def capture_content_type_header(self) -> Optional['outputs.EndpointConfigCaptureContentTypeHeader']:
        return pulumi.get(self, "capture_content_type_header")

    @property
    @pulumi.getter(name="enableCapture")
    def enable_capture(self) -> Optional[bool]:
        return pulumi.get(self, "enable_capture")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class EndpointConfigExplainerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clarifyExplainerConfig":
            suggest = "clarify_explainer_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigExplainerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigExplainerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigExplainerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 clarify_explainer_config: Optional['outputs.EndpointConfigClarifyExplainerConfig'] = None):
        if clarify_explainer_config is not None:
            pulumi.set(__self__, "clarify_explainer_config", clarify_explainer_config)

    @property
    @pulumi.getter(name="clarifyExplainerConfig")
    def clarify_explainer_config(self) -> Optional['outputs.EndpointConfigClarifyExplainerConfig']:
        return pulumi.get(self, "clarify_explainer_config")


@pulumi.output_type
class EndpointConfigProductionVariant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialVariantWeight":
            suggest = "initial_variant_weight"
        elif key == "modelName":
            suggest = "model_name"
        elif key == "variantName":
            suggest = "variant_name"
        elif key == "acceleratorType":
            suggest = "accelerator_type"
        elif key == "containerStartupHealthCheckTimeoutInSeconds":
            suggest = "container_startup_health_check_timeout_in_seconds"
        elif key == "enableSsmAccess":
            suggest = "enable_ssm_access"
        elif key == "initialInstanceCount":
            suggest = "initial_instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "modelDataDownloadTimeoutInSeconds":
            suggest = "model_data_download_timeout_in_seconds"
        elif key == "serverlessConfig":
            suggest = "serverless_config"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigProductionVariant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigProductionVariant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigProductionVariant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initial_variant_weight: float,
                 model_name: str,
                 variant_name: str,
                 accelerator_type: Optional[str] = None,
                 container_startup_health_check_timeout_in_seconds: Optional[int] = None,
                 enable_ssm_access: Optional[bool] = None,
                 initial_instance_count: Optional[int] = None,
                 instance_type: Optional[str] = None,
                 model_data_download_timeout_in_seconds: Optional[int] = None,
                 serverless_config: Optional['outputs.EndpointConfigServerlessConfig'] = None,
                 volume_size_in_gb: Optional[int] = None):
        pulumi.set(__self__, "initial_variant_weight", initial_variant_weight)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "variant_name", variant_name)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if container_startup_health_check_timeout_in_seconds is not None:
            pulumi.set(__self__, "container_startup_health_check_timeout_in_seconds", container_startup_health_check_timeout_in_seconds)
        if enable_ssm_access is not None:
            pulumi.set(__self__, "enable_ssm_access", enable_ssm_access)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_download_timeout_in_seconds is not None:
            pulumi.set(__self__, "model_data_download_timeout_in_seconds", model_data_download_timeout_in_seconds)
        if serverless_config is not None:
            pulumi.set(__self__, "serverless_config", serverless_config)
        if volume_size_in_gb is not None:
            pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)

    @property
    @pulumi.getter(name="initialVariantWeight")
    def initial_variant_weight(self) -> float:
        return pulumi.get(self, "initial_variant_weight")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> str:
        return pulumi.get(self, "variant_name")

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[str]:
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter(name="containerStartupHealthCheckTimeoutInSeconds")
    def container_startup_health_check_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "container_startup_health_check_timeout_in_seconds")

    @property
    @pulumi.getter(name="enableSsmAccess")
    def enable_ssm_access(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ssm_access")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="modelDataDownloadTimeoutInSeconds")
    def model_data_download_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "model_data_download_timeout_in_seconds")

    @property
    @pulumi.getter(name="serverlessConfig")
    def serverless_config(self) -> Optional['outputs.EndpointConfigServerlessConfig']:
        return pulumi.get(self, "serverless_config")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> Optional[int]:
        return pulumi.get(self, "volume_size_in_gb")


@pulumi.output_type
class EndpointConfigServerlessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrency":
            suggest = "max_concurrency"
        elif key == "memorySizeInMb":
            suggest = "memory_size_in_mb"
        elif key == "provisionedConcurrency":
            suggest = "provisioned_concurrency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointConfigServerlessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointConfigServerlessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointConfigServerlessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrency: int,
                 memory_size_in_mb: int,
                 provisioned_concurrency: Optional[int] = None):
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "memory_size_in_mb", memory_size_in_mb)
        if provisioned_concurrency is not None:
            pulumi.set(__self__, "provisioned_concurrency", provisioned_concurrency)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="memorySizeInMb")
    def memory_size_in_mb(self) -> int:
        return pulumi.get(self, "memory_size_in_mb")

    @property
    @pulumi.getter(name="provisionedConcurrency")
    def provisioned_concurrency(self) -> Optional[int]:
        return pulumi.get(self, "provisioned_concurrency")


@pulumi.output_type
class EndpointConfigTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRollbackConfiguration":
            suggest = "auto_rollback_configuration"
        elif key == "blueGreenUpdatePolicy":
            suggest = "blue_green_update_policy"
        elif key == "rollingUpdatePolicy":
            suggest = "rolling_update_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_rollback_configuration: Optional['outputs.EndpointAutoRollbackConfig'] = None,
                 blue_green_update_policy: Optional['outputs.EndpointBlueGreenUpdatePolicy'] = None,
                 rolling_update_policy: Optional['outputs.EndpointRollingUpdatePolicy'] = None):
        if auto_rollback_configuration is not None:
            pulumi.set(__self__, "auto_rollback_configuration", auto_rollback_configuration)
        if blue_green_update_policy is not None:
            pulumi.set(__self__, "blue_green_update_policy", blue_green_update_policy)
        if rolling_update_policy is not None:
            pulumi.set(__self__, "rolling_update_policy", rolling_update_policy)

    @property
    @pulumi.getter(name="autoRollbackConfiguration")
    def auto_rollback_configuration(self) -> Optional['outputs.EndpointAutoRollbackConfig']:
        return pulumi.get(self, "auto_rollback_configuration")

    @property
    @pulumi.getter(name="blueGreenUpdatePolicy")
    def blue_green_update_policy(self) -> Optional['outputs.EndpointBlueGreenUpdatePolicy']:
        return pulumi.get(self, "blue_green_update_policy")

    @property
    @pulumi.getter(name="rollingUpdatePolicy")
    def rolling_update_policy(self) -> Optional['outputs.EndpointRollingUpdatePolicy']:
        return pulumi.get(self, "rolling_update_policy")


@pulumi.output_type
class EndpointRollingUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumBatchSize":
            suggest = "maximum_batch_size"
        elif key == "waitIntervalInSeconds":
            suggest = "wait_interval_in_seconds"
        elif key == "maximumExecutionTimeoutInSeconds":
            suggest = "maximum_execution_timeout_in_seconds"
        elif key == "rollbackMaximumBatchSize":
            suggest = "rollback_maximum_batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointRollingUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointRollingUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointRollingUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_batch_size: 'outputs.EndpointCapacitySize',
                 wait_interval_in_seconds: int,
                 maximum_execution_timeout_in_seconds: Optional[int] = None,
                 rollback_maximum_batch_size: Optional['outputs.EndpointCapacitySize'] = None):
        pulumi.set(__self__, "maximum_batch_size", maximum_batch_size)
        pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)
        if maximum_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "maximum_execution_timeout_in_seconds", maximum_execution_timeout_in_seconds)
        if rollback_maximum_batch_size is not None:
            pulumi.set(__self__, "rollback_maximum_batch_size", rollback_maximum_batch_size)

    @property
    @pulumi.getter(name="maximumBatchSize")
    def maximum_batch_size(self) -> 'outputs.EndpointCapacitySize':
        return pulumi.get(self, "maximum_batch_size")

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> int:
        return pulumi.get(self, "wait_interval_in_seconds")

    @property
    @pulumi.getter(name="maximumExecutionTimeoutInSeconds")
    def maximum_execution_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "maximum_execution_timeout_in_seconds")

    @property
    @pulumi.getter(name="rollbackMaximumBatchSize")
    def rollback_maximum_batch_size(self) -> Optional['outputs.EndpointCapacitySize']:
        return pulumi.get(self, "rollback_maximum_batch_size")


@pulumi.output_type
class EndpointTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class EndpointTrafficRoutingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canarySize":
            suggest = "canary_size"
        elif key == "linearStepSize":
            suggest = "linear_step_size"
        elif key == "waitIntervalInSeconds":
            suggest = "wait_interval_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointTrafficRoutingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointTrafficRoutingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointTrafficRoutingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 canary_size: Optional['outputs.EndpointCapacitySize'] = None,
                 linear_step_size: Optional['outputs.EndpointCapacitySize'] = None,
                 wait_interval_in_seconds: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if canary_size is not None:
            pulumi.set(__self__, "canary_size", canary_size)
        if linear_step_size is not None:
            pulumi.set(__self__, "linear_step_size", linear_step_size)
        if wait_interval_in_seconds is not None:
            pulumi.set(__self__, "wait_interval_in_seconds", wait_interval_in_seconds)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="canarySize")
    def canary_size(self) -> Optional['outputs.EndpointCapacitySize']:
        return pulumi.get(self, "canary_size")

    @property
    @pulumi.getter(name="linearStepSize")
    def linear_step_size(self) -> Optional['outputs.EndpointCapacitySize']:
        return pulumi.get(self, "linear_step_size")

    @property
    @pulumi.getter(name="waitIntervalInSeconds")
    def wait_interval_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "wait_interval_in_seconds")


@pulumi.output_type
class EndpointVariantProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variantPropertyType":
            suggest = "variant_property_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointVariantProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointVariantProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointVariantProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 variant_property_type: Optional[str] = None):
        if variant_property_type is not None:
            pulumi.set(__self__, "variant_property_type", variant_property_type)

    @property
    @pulumi.getter(name="variantPropertyType")
    def variant_property_type(self) -> Optional[str]:
        return pulumi.get(self, "variant_property_type")


@pulumi.output_type
class FeatureGroupDataCatalogConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupDataCatalogConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupDataCatalogConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupDataCatalogConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: str,
                 database: str,
                 table_name: str):
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def catalog(self) -> str:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class FeatureGroupFeatureDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "featureName":
            suggest = "feature_name"
        elif key == "featureType":
            suggest = "feature_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupFeatureDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupFeatureDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupFeatureDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 feature_name: str,
                 feature_type: 'FeatureGroupFeatureDefinitionFeatureType'):
        pulumi.set(__self__, "feature_name", feature_name)
        pulumi.set(__self__, "feature_type", feature_type)

    @property
    @pulumi.getter(name="featureName")
    def feature_name(self) -> str:
        return pulumi.get(self, "feature_name")

    @property
    @pulumi.getter(name="featureType")
    def feature_type(self) -> 'FeatureGroupFeatureDefinitionFeatureType':
        return pulumi.get(self, "feature_type")


@pulumi.output_type
class FeatureGroupOnlineStoreSecurityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupOnlineStoreSecurityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupOnlineStoreSecurityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupOnlineStoreSecurityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class FeatureGroupS3StorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureGroupS3StorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureGroupS3StorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureGroupS3StorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str,
                 kms_key_id: Optional[str] = None):
        pulumi.set(__self__, "s3_uri", s3_uri)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class FeatureGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InferenceExperimentCaptureContentTypeHeader(dict):
    """
    Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "csvContentTypes":
            suggest = "csv_content_types"
        elif key == "jsonContentTypes":
            suggest = "json_content_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentCaptureContentTypeHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentCaptureContentTypeHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentCaptureContentTypeHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 csv_content_types: Optional[Sequence[str]] = None,
                 json_content_types: Optional[Sequence[str]] = None):
        """
        Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
        :param Sequence[str] csv_content_types: The list of all content type headers that SageMaker will treat as CSV and capture accordingly.
        :param Sequence[str] json_content_types: The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
        """
        if csv_content_types is not None:
            pulumi.set(__self__, "csv_content_types", csv_content_types)
        if json_content_types is not None:
            pulumi.set(__self__, "json_content_types", json_content_types)

    @property
    @pulumi.getter(name="csvContentTypes")
    def csv_content_types(self) -> Optional[Sequence[str]]:
        """
        The list of all content type headers that SageMaker will treat as CSV and capture accordingly.
        """
        return pulumi.get(self, "csv_content_types")

    @property
    @pulumi.getter(name="jsonContentTypes")
    def json_content_types(self) -> Optional[Sequence[str]]:
        """
        The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
        """
        return pulumi.get(self, "json_content_types")


@pulumi.output_type
class InferenceExperimentDataStorageConfig(dict):
    """
    The Amazon S3 location and configuration for storing inference request and response data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "kmsKey":
            suggest = "kms_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentDataStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentDataStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentDataStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: str,
                 content_type: Optional['outputs.InferenceExperimentCaptureContentTypeHeader'] = None,
                 kms_key: Optional[str] = None):
        """
        The Amazon S3 location and configuration for storing inference request and response data.
        :param str destination: The Amazon S3 bucket where the inference request and response data is stored.
        :param str kms_key: The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "destination", destination)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if kms_key is not None:
            pulumi.set(__self__, "kms_key", kms_key)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The Amazon S3 bucket where the inference request and response data is stored.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.InferenceExperimentCaptureContentTypeHeader']:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[str]:
        """
        The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key")


@pulumi.output_type
class InferenceExperimentEndpointMetadata(dict):
    """
    The metadata of the endpoint on which the inference experiment ran.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "endpointConfigName":
            suggest = "endpoint_config_name"
        elif key == "endpointStatus":
            suggest = "endpoint_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentEndpointMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentEndpointMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentEndpointMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 endpoint_config_name: Optional[str] = None,
                 endpoint_status: Optional['InferenceExperimentEndpointMetadataEndpointStatus'] = None):
        """
        The metadata of the endpoint on which the inference experiment ran.
        :param str endpoint_config_name: The name of the endpoint configuration.
        :param 'InferenceExperimentEndpointMetadataEndpointStatus' endpoint_status: The status of the endpoint. For possible values of the status of an endpoint.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        if endpoint_config_name is not None:
            pulumi.set(__self__, "endpoint_config_name", endpoint_config_name)
        if endpoint_status is not None:
            pulumi.set(__self__, "endpoint_status", endpoint_status)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="endpointConfigName")
    def endpoint_config_name(self) -> Optional[str]:
        """
        The name of the endpoint configuration.
        """
        return pulumi.get(self, "endpoint_config_name")

    @property
    @pulumi.getter(name="endpointStatus")
    def endpoint_status(self) -> Optional['InferenceExperimentEndpointMetadataEndpointStatus']:
        """
        The status of the endpoint. For possible values of the status of an endpoint.
        """
        return pulumi.get(self, "endpoint_status")


@pulumi.output_type
class InferenceExperimentModelInfrastructureConfig(dict):
    """
    The configuration for the infrastructure that the model will be deployed to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "realTimeInferenceConfig":
            suggest = "real_time_inference_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentModelInfrastructureConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentModelInfrastructureConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentModelInfrastructureConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 infrastructure_type: 'InferenceExperimentModelInfrastructureConfigInfrastructureType',
                 real_time_inference_config: 'outputs.InferenceExperimentRealTimeInferenceConfig'):
        """
        The configuration for the infrastructure that the model will be deployed to.
        :param 'InferenceExperimentModelInfrastructureConfigInfrastructureType' infrastructure_type: The type of the inference experiment that you want to run.
        """
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "real_time_inference_config", real_time_inference_config)

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> 'InferenceExperimentModelInfrastructureConfigInfrastructureType':
        """
        The type of the inference experiment that you want to run.
        """
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="realTimeInferenceConfig")
    def real_time_inference_config(self) -> 'outputs.InferenceExperimentRealTimeInferenceConfig':
        return pulumi.get(self, "real_time_inference_config")


@pulumi.output_type
class InferenceExperimentModelVariantConfig(dict):
    """
    Contains information about the deployment options of a model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "infrastructureConfig":
            suggest = "infrastructure_config"
        elif key == "modelName":
            suggest = "model_name"
        elif key == "variantName":
            suggest = "variant_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentModelVariantConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentModelVariantConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentModelVariantConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 infrastructure_config: 'outputs.InferenceExperimentModelInfrastructureConfig',
                 model_name: str,
                 variant_name: str):
        """
        Contains information about the deployment options of a model.
        :param str model_name: The name of the Amazon SageMaker Model entity.
        :param str variant_name: The name of the variant.
        """
        pulumi.set(__self__, "infrastructure_config", infrastructure_config)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "variant_name", variant_name)

    @property
    @pulumi.getter(name="infrastructureConfig")
    def infrastructure_config(self) -> 'outputs.InferenceExperimentModelInfrastructureConfig':
        return pulumi.get(self, "infrastructure_config")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        """
        The name of the Amazon SageMaker Model entity.
        """
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="variantName")
    def variant_name(self) -> str:
        """
        The name of the variant.
        """
        return pulumi.get(self, "variant_name")


@pulumi.output_type
class InferenceExperimentRealTimeInferenceConfig(dict):
    """
    The infrastructure configuration for deploying the model to a real-time inference endpoint.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentRealTimeInferenceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentRealTimeInferenceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentRealTimeInferenceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str):
        """
        The infrastructure configuration for deploying the model to a real-time inference endpoint.
        :param int instance_count: The number of instances of the type specified by InstanceType.
        :param str instance_type: The instance type the model is deployed to.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of instances of the type specified by InstanceType.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The instance type the model is deployed to.
        """
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class InferenceExperimentSchedule(dict):
    """
    The duration for which you want the inference experiment to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        The duration for which you want the inference experiment to run.
        :param str end_time: The timestamp at which the inference experiment ended or will end.
        :param str start_time: The timestamp at which the inference experiment started or will start.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The timestamp at which the inference experiment ended or will end.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The timestamp at which the inference experiment started or will start.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class InferenceExperimentShadowModeConfig(dict):
    """
    The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shadowModelVariants":
            suggest = "shadow_model_variants"
        elif key == "sourceModelVariantName":
            suggest = "source_model_variant_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentShadowModeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentShadowModeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentShadowModeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shadow_model_variants: Sequence['outputs.InferenceExperimentShadowModelVariantConfig'],
                 source_model_variant_name: str):
        """
        The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
        :param Sequence['InferenceExperimentShadowModelVariantConfig'] shadow_model_variants: List of shadow variant configurations.
        :param str source_model_variant_name: The name of the production variant, which takes all the inference requests.
        """
        pulumi.set(__self__, "shadow_model_variants", shadow_model_variants)
        pulumi.set(__self__, "source_model_variant_name", source_model_variant_name)

    @property
    @pulumi.getter(name="shadowModelVariants")
    def shadow_model_variants(self) -> Sequence['outputs.InferenceExperimentShadowModelVariantConfig']:
        """
        List of shadow variant configurations.
        """
        return pulumi.get(self, "shadow_model_variants")

    @property
    @pulumi.getter(name="sourceModelVariantName")
    def source_model_variant_name(self) -> str:
        """
        The name of the production variant, which takes all the inference requests.
        """
        return pulumi.get(self, "source_model_variant_name")


@pulumi.output_type
class InferenceExperimentShadowModelVariantConfig(dict):
    """
    The name and sampling percentage of a shadow variant.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "samplingPercentage":
            suggest = "sampling_percentage"
        elif key == "shadowModelVariantName":
            suggest = "shadow_model_variant_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InferenceExperimentShadowModelVariantConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InferenceExperimentShadowModelVariantConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InferenceExperimentShadowModelVariantConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sampling_percentage: int,
                 shadow_model_variant_name: str):
        """
        The name and sampling percentage of a shadow variant.
        :param int sampling_percentage: The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
        :param str shadow_model_variant_name: The name of the shadow variant.
        """
        pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        pulumi.set(__self__, "shadow_model_variant_name", shadow_model_variant_name)

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> int:
        """
        The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
        """
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="shadowModelVariantName")
    def shadow_model_variant_name(self) -> str:
        """
        The name of the shadow variant.
        """
        return pulumi.get(self, "shadow_model_variant_name")


@pulumi.output_type
class InferenceExperimentTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelBiasJobDefinitionBatchTransformInput(dict):
    """
    The batch transform input for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "featuresAttribute":
            suggest = "features_attribute"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "probabilityThresholdAttribute":
            suggest = "probability_threshold_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.ModelBiasJobDefinitionDatasetFormat',
                 local_path: str,
                 end_time_offset: Optional[str] = None,
                 features_attribute: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 probability_threshold_attribute: Optional[float] = None,
                 s3_data_distribution_type: Optional['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelBiasJobDefinitionBatchTransformInputS3InputMode'] = None,
                 start_time_offset: Optional[str] = None):
        """
        The batch transform input for a monitoring job.
        :param str data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str end_time_offset: Monitoring end time offset, e.g. PT0H
        :param str features_attribute: JSONpath to locate features in JSONlines dataset
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelBiasJobDefinitionBatchTransformInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param str start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.ModelBiasJobDefinitionDatasetFormat':
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[str]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[str]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[float]:
        return pulumi.get(self, "probability_threshold_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelBiasJobDefinitionBatchTransformInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[str]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class ModelBiasJobDefinitionClusterConfig(dict):
    """
    Configuration for the cluster used to run model monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class ModelBiasJobDefinitionConstraintsResource(dict):
    """
    The baseline constraints resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelBiasJobDefinitionCsv(dict):
    """
    The CSV format
    """
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        The CSV format
        :param bool header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class ModelBiasJobDefinitionDatasetFormat(dict):
    """
    The dataset format of the data to monitor
    """
    def __init__(__self__, *,
                 csv: Optional['outputs.ModelBiasJobDefinitionCsv'] = None,
                 json: Optional['outputs.ModelBiasJobDefinitionJson'] = None,
                 parquet: Optional[bool] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.ModelBiasJobDefinitionCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.ModelBiasJobDefinitionJson']:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def parquet(self) -> Optional[bool]:
        return pulumi.get(self, "parquet")


@pulumi.output_type
class ModelBiasJobDefinitionEndpointInput(dict):
    """
    The endpoint for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "featuresAttribute":
            suggest = "features_attribute"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "probabilityThresholdAttribute":
            suggest = "probability_threshold_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: str,
                 end_time_offset: Optional[str] = None,
                 features_attribute: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 probability_threshold_attribute: Optional[float] = None,
                 s3_data_distribution_type: Optional['ModelBiasJobDefinitionEndpointInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelBiasJobDefinitionEndpointInputS3InputMode'] = None,
                 start_time_offset: Optional[str] = None):
        """
        The endpoint for a monitoring job.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str end_time_offset: Monitoring end time offset, e.g. PT0H
        :param str features_attribute: JSONpath to locate features in JSONlines dataset
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelBiasJobDefinitionEndpointInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelBiasJobDefinitionEndpointInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param str start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[str]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[str]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[float]:
        return pulumi.get(self, "probability_threshold_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelBiasJobDefinitionEndpointInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelBiasJobDefinitionEndpointInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[str]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class ModelBiasJobDefinitionJson(dict):
    """
    The Json format
    """
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        The Json format
        :param bool line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class ModelBiasJobDefinitionModelBiasAppSpecification(dict):
    """
    Container image configuration object for the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configUri":
            suggest = "config_uri"
        elif key == "imageUri":
            suggest = "image_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionModelBiasAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionModelBiasAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionModelBiasAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_uri: str,
                 image_uri: str,
                 environment: Optional[Any] = None):
        """
        Container image configuration object for the monitoring job.
        :param str config_uri: The S3 URI to an analysis configuration file
        :param str image_uri: The container image to be run by the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "config_uri", config_uri)
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="configUri")
    def config_uri(self) -> str:
        """
        The S3 URI to an analysis configuration file
        """
        return pulumi.get(self, "config_uri")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")


@pulumi.output_type
class ModelBiasJobDefinitionModelBiasBaselineConfig(dict):
    """
    Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseliningJobName":
            suggest = "baselining_job_name"
        elif key == "constraintsResource":
            suggest = "constraints_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionModelBiasBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionModelBiasBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionModelBiasBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baselining_job_name: Optional[str] = None,
                 constraints_resource: Optional['outputs.ModelBiasJobDefinitionConstraintsResource'] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[str]:
        return pulumi.get(self, "baselining_job_name")

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.ModelBiasJobDefinitionConstraintsResource']:
        return pulumi.get(self, "constraints_resource")


@pulumi.output_type
class ModelBiasJobDefinitionModelBiasJobInput(dict):
    """
    The inputs for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groundTruthS3Input":
            suggest = "ground_truth_s3_input"
        elif key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionModelBiasJobInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionModelBiasJobInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionModelBiasJobInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ground_truth_s3_input: 'outputs.ModelBiasJobDefinitionMonitoringGroundTruthS3Input',
                 batch_transform_input: Optional['outputs.ModelBiasJobDefinitionBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.ModelBiasJobDefinitionEndpointInput'] = None):
        """
        The inputs for a monitoring job.
        """
        pulumi.set(__self__, "ground_truth_s3_input", ground_truth_s3_input)
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="groundTruthS3Input")
    def ground_truth_s3_input(self) -> 'outputs.ModelBiasJobDefinitionMonitoringGroundTruthS3Input':
        return pulumi.get(self, "ground_truth_s3_input")

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.ModelBiasJobDefinitionBatchTransformInput']:
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.ModelBiasJobDefinitionEndpointInput']:
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class ModelBiasJobDefinitionMonitoringGroundTruthS3Input(dict):
    """
    Ground truth input provided in S3 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionMonitoringGroundTruthS3Input. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionMonitoringGroundTruthS3Input.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionMonitoringGroundTruthS3Input.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str):
        """
        Ground truth input provided in S3 
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelBiasJobDefinitionMonitoringOutput(dict):
    """
    The output object for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionMonitoringOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionMonitoringOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionMonitoringOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.ModelBiasJobDefinitionS3Output'):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.ModelBiasJobDefinitionS3Output':
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class ModelBiasJobDefinitionMonitoringOutputConfig(dict):
    """
    The output configuration for monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionMonitoringOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: Sequence['outputs.ModelBiasJobDefinitionMonitoringOutput'],
                 kms_key_id: Optional[str] = None):
        """
        The output configuration for monitoring jobs.
        :param Sequence['ModelBiasJobDefinitionMonitoringOutput'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> Sequence['outputs.ModelBiasJobDefinitionMonitoringOutput']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ModelBiasJobDefinitionMonitoringResources(dict):
    """
    Identifies the resources to deploy for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionMonitoringResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionMonitoringResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionMonitoringResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.ModelBiasJobDefinitionClusterConfig'):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.ModelBiasJobDefinitionClusterConfig':
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class ModelBiasJobDefinitionNetworkConfig(dict):
    """
    Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.ModelBiasJobDefinitionVpcConfig'] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.ModelBiasJobDefinitionVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class ModelBiasJobDefinitionS3Output(dict):
    """
    Information about where and how to store the results of a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_path: str,
                 s3_uri: str,
                 s3_upload_mode: Optional['ModelBiasJobDefinitionS3OutputS3UploadMode'] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param str local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param 'ModelBiasJobDefinitionS3OutputS3UploadMode' s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional['ModelBiasJobDefinitionS3OutputS3UploadMode']:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class ModelBiasJobDefinitionStoppingCondition(dict):
    """
    Specifies a time limit for how long the monitoring job is allowed to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: int):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> int:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class ModelBiasJobDefinitionTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelBiasJobDefinitionVpcConfig(dict):
    """
    Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBiasJobDefinitionVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBiasJobDefinitionVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBiasJobDefinitionVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class ModelCardAdditionalInformation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caveatsAndRecommendations":
            suggest = "caveats_and_recommendations"
        elif key == "customDetails":
            suggest = "custom_details"
        elif key == "ethicalConsiderations":
            suggest = "ethical_considerations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardAdditionalInformation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardAdditionalInformation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardAdditionalInformation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 caveats_and_recommendations: Optional[str] = None,
                 custom_details: Optional[Any] = None,
                 ethical_considerations: Optional[str] = None):
        """
        :param str caveats_and_recommendations: Caveats and recommendations for people who might use this model in their applications.
        :param Any custom_details: customer details.
        :param str ethical_considerations: Any ethical considerations that the author wants to provide.
        """
        if caveats_and_recommendations is not None:
            pulumi.set(__self__, "caveats_and_recommendations", caveats_and_recommendations)
        if custom_details is not None:
            pulumi.set(__self__, "custom_details", custom_details)
        if ethical_considerations is not None:
            pulumi.set(__self__, "ethical_considerations", ethical_considerations)

    @property
    @pulumi.getter(name="caveatsAndRecommendations")
    def caveats_and_recommendations(self) -> Optional[str]:
        """
        Caveats and recommendations for people who might use this model in their applications.
        """
        return pulumi.get(self, "caveats_and_recommendations")

    @property
    @pulumi.getter(name="customDetails")
    def custom_details(self) -> Optional[Any]:
        """
        customer details.
        """
        return pulumi.get(self, "custom_details")

    @property
    @pulumi.getter(name="ethicalConsiderations")
    def ethical_considerations(self) -> Optional[str]:
        """
        Any ethical considerations that the author wants to provide.
        """
        return pulumi.get(self, "ethical_considerations")


@pulumi.output_type
class ModelCardBarChartMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxisName":
            suggest = "x_axis_name"
        elif key == "yAxisName":
            suggest = "y_axis_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardBarChartMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardBarChartMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardBarChartMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: 'ModelCardBarChartMetricType',
                 value: Sequence[float],
                 notes: Optional[str] = None,
                 x_axis_name: Optional[Sequence[str]] = None,
                 y_axis_name: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if x_axis_name is not None:
            pulumi.set(__self__, "x_axis_name", x_axis_name)
        if y_axis_name is not None:
            pulumi.set(__self__, "y_axis_name", y_axis_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> 'ModelCardBarChartMetricType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Sequence[float]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="xAxisName")
    def x_axis_name(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_axis_name")

    @property
    @pulumi.getter(name="yAxisName")
    def y_axis_name(self) -> Optional[str]:
        return pulumi.get(self, "y_axis_name")


@pulumi.output_type
class ModelCardBusinessDetails(dict):
    """
    Business details.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "businessProblem":
            suggest = "business_problem"
        elif key == "businessStakeholders":
            suggest = "business_stakeholders"
        elif key == "lineOfBusiness":
            suggest = "line_of_business"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardBusinessDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardBusinessDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardBusinessDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 business_problem: Optional[str] = None,
                 business_stakeholders: Optional[str] = None,
                 line_of_business: Optional[str] = None):
        """
        Business details.
        :param str business_problem: What business problem does the model solve?
        :param str business_stakeholders: Business stakeholders.
        :param str line_of_business: Line of business.
        """
        if business_problem is not None:
            pulumi.set(__self__, "business_problem", business_problem)
        if business_stakeholders is not None:
            pulumi.set(__self__, "business_stakeholders", business_stakeholders)
        if line_of_business is not None:
            pulumi.set(__self__, "line_of_business", line_of_business)

    @property
    @pulumi.getter(name="businessProblem")
    def business_problem(self) -> Optional[str]:
        """
        What business problem does the model solve?
        """
        return pulumi.get(self, "business_problem")

    @property
    @pulumi.getter(name="businessStakeholders")
    def business_stakeholders(self) -> Optional[str]:
        """
        Business stakeholders.
        """
        return pulumi.get(self, "business_stakeholders")

    @property
    @pulumi.getter(name="lineOfBusiness")
    def line_of_business(self) -> Optional[str]:
        """
        Line of business.
        """
        return pulumi.get(self, "line_of_business")


@pulumi.output_type
class ModelCardContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelDataUrl":
            suggest = "model_data_url"
        elif key == "nearestModelName":
            suggest = "nearest_model_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 model_data_url: Optional[str] = None,
                 nearest_model_name: Optional[str] = None):
        """
        :param str image: Inference environment path. The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        :param str model_data_url: The Amazon S3 path where the model artifacts, which result from model training, are stored.
        :param str nearest_model_name: The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        """
        pulumi.set(__self__, "image", image)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if nearest_model_name is not None:
            pulumi.set(__self__, "nearest_model_name", nearest_model_name)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        Inference environment path. The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        The Amazon S3 path where the model artifacts, which result from model training, are stored.
        """
        return pulumi.get(self, "model_data_url")

    @property
    @pulumi.getter(name="nearestModelName")
    def nearest_model_name(self) -> Optional[str]:
        """
        The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        """
        return pulumi.get(self, "nearest_model_name")


@pulumi.output_type
class ModelCardContent(dict):
    """
    The content of the model card.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalInformation":
            suggest = "additional_information"
        elif key == "businessDetails":
            suggest = "business_details"
        elif key == "evaluationDetails":
            suggest = "evaluation_details"
        elif key == "intendedUses":
            suggest = "intended_uses"
        elif key == "modelOverview":
            suggest = "model_overview"
        elif key == "modelPackageDetails":
            suggest = "model_package_details"
        elif key == "trainingDetails":
            suggest = "training_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_information: Optional['outputs.ModelCardAdditionalInformation'] = None,
                 business_details: Optional['outputs.ModelCardBusinessDetails'] = None,
                 evaluation_details: Optional[Sequence['outputs.ModelCardEvaluationDetail']] = None,
                 intended_uses: Optional['outputs.ModelCardIntendedUses'] = None,
                 model_overview: Optional['outputs.ModelCardModelOverview'] = None,
                 model_package_details: Optional['outputs.ModelCardModelPackageDetails'] = None,
                 training_details: Optional['outputs.ModelCardTrainingDetails'] = None):
        """
        The content of the model card.
        """
        if additional_information is not None:
            pulumi.set(__self__, "additional_information", additional_information)
        if business_details is not None:
            pulumi.set(__self__, "business_details", business_details)
        if evaluation_details is not None:
            pulumi.set(__self__, "evaluation_details", evaluation_details)
        if intended_uses is not None:
            pulumi.set(__self__, "intended_uses", intended_uses)
        if model_overview is not None:
            pulumi.set(__self__, "model_overview", model_overview)
        if model_package_details is not None:
            pulumi.set(__self__, "model_package_details", model_package_details)
        if training_details is not None:
            pulumi.set(__self__, "training_details", training_details)

    @property
    @pulumi.getter(name="additionalInformation")
    def additional_information(self) -> Optional['outputs.ModelCardAdditionalInformation']:
        return pulumi.get(self, "additional_information")

    @property
    @pulumi.getter(name="businessDetails")
    def business_details(self) -> Optional['outputs.ModelCardBusinessDetails']:
        return pulumi.get(self, "business_details")

    @property
    @pulumi.getter(name="evaluationDetails")
    def evaluation_details(self) -> Optional[Sequence['outputs.ModelCardEvaluationDetail']]:
        return pulumi.get(self, "evaluation_details")

    @property
    @pulumi.getter(name="intendedUses")
    def intended_uses(self) -> Optional['outputs.ModelCardIntendedUses']:
        return pulumi.get(self, "intended_uses")

    @property
    @pulumi.getter(name="modelOverview")
    def model_overview(self) -> Optional['outputs.ModelCardModelOverview']:
        return pulumi.get(self, "model_overview")

    @property
    @pulumi.getter(name="modelPackageDetails")
    def model_package_details(self) -> Optional['outputs.ModelCardModelPackageDetails']:
        return pulumi.get(self, "model_package_details")

    @property
    @pulumi.getter(name="trainingDetails")
    def training_details(self) -> Optional['outputs.ModelCardTrainingDetails']:
        return pulumi.get(self, "training_details")


@pulumi.output_type
class ModelCardEvaluationDetail(dict):
    """
    item of evaluation details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationJobArn":
            suggest = "evaluation_job_arn"
        elif key == "evaluationObservation":
            suggest = "evaluation_observation"
        elif key == "metricGroups":
            suggest = "metric_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardEvaluationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardEvaluationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardEvaluationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 datasets: Optional[Sequence[str]] = None,
                 evaluation_job_arn: Optional[str] = None,
                 evaluation_observation: Optional[str] = None,
                 metadata: Optional[Any] = None,
                 metric_groups: Optional[Sequence['outputs.ModelCardMetricGroup']] = None):
        """
        item of evaluation details
        :param Any metadata: additional attributes associated with the evaluation results.
        """
        pulumi.set(__self__, "name", name)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if evaluation_job_arn is not None:
            pulumi.set(__self__, "evaluation_job_arn", evaluation_job_arn)
        if evaluation_observation is not None:
            pulumi.set(__self__, "evaluation_observation", evaluation_observation)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metric_groups is not None:
            pulumi.set(__self__, "metric_groups", metric_groups)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def datasets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter(name="evaluationJobArn")
    def evaluation_job_arn(self) -> Optional[str]:
        return pulumi.get(self, "evaluation_job_arn")

    @property
    @pulumi.getter(name="evaluationObservation")
    def evaluation_observation(self) -> Optional[str]:
        return pulumi.get(self, "evaluation_observation")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Any]:
        """
        additional attributes associated with the evaluation results.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metricGroups")
    def metric_groups(self) -> Optional[Sequence['outputs.ModelCardMetricGroup']]:
        return pulumi.get(self, "metric_groups")


@pulumi.output_type
class ModelCardInferenceSpecification(dict):
    def __init__(__self__, *,
                 containers: Sequence['outputs.ModelCardContainer']):
        """
        :param Sequence['ModelCardContainer'] containers: Contains inference related information which were used to create model package.
        """
        pulumi.set(__self__, "containers", containers)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.ModelCardContainer']:
        """
        Contains inference related information which were used to create model package.
        """
        return pulumi.get(self, "containers")


@pulumi.output_type
class ModelCardIntendedUses(dict):
    """
    Intended usage of model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "explanationsForRiskRating":
            suggest = "explanations_for_risk_rating"
        elif key == "factorsAffectingModelEfficiency":
            suggest = "factors_affecting_model_efficiency"
        elif key == "intendedUses":
            suggest = "intended_uses"
        elif key == "purposeOfModel":
            suggest = "purpose_of_model"
        elif key == "riskRating":
            suggest = "risk_rating"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardIntendedUses. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardIntendedUses.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardIntendedUses.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 explanations_for_risk_rating: Optional[str] = None,
                 factors_affecting_model_efficiency: Optional[str] = None,
                 intended_uses: Optional[str] = None,
                 purpose_of_model: Optional[str] = None,
                 risk_rating: Optional['ModelCardRiskRating'] = None):
        """
        Intended usage of model.
        :param str intended_uses: intended use cases.
        :param str purpose_of_model: Why the model was developed?
        """
        if explanations_for_risk_rating is not None:
            pulumi.set(__self__, "explanations_for_risk_rating", explanations_for_risk_rating)
        if factors_affecting_model_efficiency is not None:
            pulumi.set(__self__, "factors_affecting_model_efficiency", factors_affecting_model_efficiency)
        if intended_uses is not None:
            pulumi.set(__self__, "intended_uses", intended_uses)
        if purpose_of_model is not None:
            pulumi.set(__self__, "purpose_of_model", purpose_of_model)
        if risk_rating is not None:
            pulumi.set(__self__, "risk_rating", risk_rating)

    @property
    @pulumi.getter(name="explanationsForRiskRating")
    def explanations_for_risk_rating(self) -> Optional[str]:
        return pulumi.get(self, "explanations_for_risk_rating")

    @property
    @pulumi.getter(name="factorsAffectingModelEfficiency")
    def factors_affecting_model_efficiency(self) -> Optional[str]:
        return pulumi.get(self, "factors_affecting_model_efficiency")

    @property
    @pulumi.getter(name="intendedUses")
    def intended_uses(self) -> Optional[str]:
        """
        intended use cases.
        """
        return pulumi.get(self, "intended_uses")

    @property
    @pulumi.getter(name="purposeOfModel")
    def purpose_of_model(self) -> Optional[str]:
        """
        Why the model was developed?
        """
        return pulumi.get(self, "purpose_of_model")

    @property
    @pulumi.getter(name="riskRating")
    def risk_rating(self) -> Optional['ModelCardRiskRating']:
        return pulumi.get(self, "risk_rating")


@pulumi.output_type
class ModelCardLinearGraphMetric(dict):
    """
    Linear graph metric.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxisName":
            suggest = "x_axis_name"
        elif key == "yAxisName":
            suggest = "y_axis_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardLinearGraphMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardLinearGraphMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardLinearGraphMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: 'ModelCardLinearGraphMetricType',
                 value: Sequence[Sequence[float]],
                 notes: Optional[str] = None,
                 x_axis_name: Optional[str] = None,
                 y_axis_name: Optional[str] = None):
        """
        Linear graph metric.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if x_axis_name is not None:
            pulumi.set(__self__, "x_axis_name", x_axis_name)
        if y_axis_name is not None:
            pulumi.set(__self__, "y_axis_name", y_axis_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> 'ModelCardLinearGraphMetricType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Sequence[Sequence[float]]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="xAxisName")
    def x_axis_name(self) -> Optional[str]:
        return pulumi.get(self, "x_axis_name")

    @property
    @pulumi.getter(name="yAxisName")
    def y_axis_name(self) -> Optional[str]:
        return pulumi.get(self, "y_axis_name")


@pulumi.output_type
class ModelCardMatrixMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxisName":
            suggest = "x_axis_name"
        elif key == "yAxisName":
            suggest = "y_axis_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardMatrixMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardMatrixMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardMatrixMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: 'ModelCardMatrixMetricType',
                 value: Sequence[Sequence[float]],
                 notes: Optional[str] = None,
                 x_axis_name: Optional[Sequence[str]] = None,
                 y_axis_name: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if x_axis_name is not None:
            pulumi.set(__self__, "x_axis_name", x_axis_name)
        if y_axis_name is not None:
            pulumi.set(__self__, "y_axis_name", y_axis_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> 'ModelCardMatrixMetricType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Sequence[Sequence[float]]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="xAxisName")
    def x_axis_name(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "x_axis_name")

    @property
    @pulumi.getter(name="yAxisName")
    def y_axis_name(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "y_axis_name")


@pulumi.output_type
class ModelCardMetricGroup(dict):
    """
    item in metric groups
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricData":
            suggest = "metric_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardMetricGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardMetricGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardMetricGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_data: Sequence[Any],
                 name: str):
        """
        item in metric groups
        """
        pulumi.set(__self__, "metric_data", metric_data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="metricData")
    def metric_data(self) -> Sequence[Any]:
        return pulumi.get(self, "metric_data")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class ModelCardModelOverview(dict):
    """
    Overview about the model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algorithmType":
            suggest = "algorithm_type"
        elif key == "inferenceEnvironment":
            suggest = "inference_environment"
        elif key == "modelArtifact":
            suggest = "model_artifact"
        elif key == "modelCreator":
            suggest = "model_creator"
        elif key == "modelDescription":
            suggest = "model_description"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "modelName":
            suggest = "model_name"
        elif key == "modelOwner":
            suggest = "model_owner"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "problemType":
            suggest = "problem_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardModelOverview. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardModelOverview.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardModelOverview.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm_type: Optional[str] = None,
                 inference_environment: Optional['outputs.ModelCardModelOverviewInferenceEnvironmentProperties'] = None,
                 model_artifact: Optional[Sequence[str]] = None,
                 model_creator: Optional[str] = None,
                 model_description: Optional[str] = None,
                 model_id: Optional[str] = None,
                 model_name: Optional[str] = None,
                 model_owner: Optional[str] = None,
                 model_version: Optional[float] = None,
                 problem_type: Optional[str] = None):
        """
        Overview about the model.
        :param str algorithm_type: Algorithm used to solve the problem.
        :param 'ModelCardModelOverviewInferenceEnvironmentProperties' inference_environment: Overview about the inference.
        :param Sequence[str] model_artifact: Location of the model artifact.
        :param str model_creator: Creator of model.
        :param str model_description: description of model.
        :param str model_id: SageMaker Model Arn or Non SageMaker Model id.
        :param str model_name: Name of the model.
        :param str model_owner: Owner of model.
        :param float model_version: Version of the model.
        :param str problem_type: Problem being solved with the model.
        """
        if algorithm_type is not None:
            pulumi.set(__self__, "algorithm_type", algorithm_type)
        if inference_environment is not None:
            pulumi.set(__self__, "inference_environment", inference_environment)
        if model_artifact is not None:
            pulumi.set(__self__, "model_artifact", model_artifact)
        if model_creator is not None:
            pulumi.set(__self__, "model_creator", model_creator)
        if model_description is not None:
            pulumi.set(__self__, "model_description", model_description)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if model_name is not None:
            pulumi.set(__self__, "model_name", model_name)
        if model_owner is not None:
            pulumi.set(__self__, "model_owner", model_owner)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if problem_type is not None:
            pulumi.set(__self__, "problem_type", problem_type)

    @property
    @pulumi.getter(name="algorithmType")
    def algorithm_type(self) -> Optional[str]:
        """
        Algorithm used to solve the problem.
        """
        return pulumi.get(self, "algorithm_type")

    @property
    @pulumi.getter(name="inferenceEnvironment")
    def inference_environment(self) -> Optional['outputs.ModelCardModelOverviewInferenceEnvironmentProperties']:
        """
        Overview about the inference.
        """
        return pulumi.get(self, "inference_environment")

    @property
    @pulumi.getter(name="modelArtifact")
    def model_artifact(self) -> Optional[Sequence[str]]:
        """
        Location of the model artifact.
        """
        return pulumi.get(self, "model_artifact")

    @property
    @pulumi.getter(name="modelCreator")
    def model_creator(self) -> Optional[str]:
        """
        Creator of model.
        """
        return pulumi.get(self, "model_creator")

    @property
    @pulumi.getter(name="modelDescription")
    def model_description(self) -> Optional[str]:
        """
        description of model.
        """
        return pulumi.get(self, "model_description")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[str]:
        """
        SageMaker Model Arn or Non SageMaker Model id.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> Optional[str]:
        """
        Name of the model.
        """
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="modelOwner")
    def model_owner(self) -> Optional[str]:
        """
        Owner of model.
        """
        return pulumi.get(self, "model_owner")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[float]:
        """
        Version of the model.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="problemType")
    def problem_type(self) -> Optional[str]:
        """
        Problem being solved with the model.
        """
        return pulumi.get(self, "problem_type")


@pulumi.output_type
class ModelCardModelOverviewInferenceEnvironmentProperties(dict):
    """
    Overview about the inference.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardModelOverviewInferenceEnvironmentProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardModelOverviewInferenceEnvironmentProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardModelOverviewInferenceEnvironmentProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_image: Optional[Sequence[str]] = None):
        """
        Overview about the inference.
        :param Sequence[str] container_image: SageMaker inference image uri.
        """
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[Sequence[str]]:
        """
        SageMaker inference image uri.
        """
        return pulumi.get(self, "container_image")


@pulumi.output_type
class ModelCardModelPackageCreator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userProfileName":
            suggest = "user_profile_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardModelPackageCreator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardModelPackageCreator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardModelPackageCreator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_profile_name: Optional[str] = None):
        """
        :param str user_profile_name: The name of the user's profile in Studio
        """
        if user_profile_name is not None:
            pulumi.set(__self__, "user_profile_name", user_profile_name)

    @property
    @pulumi.getter(name="userProfileName")
    def user_profile_name(self) -> Optional[str]:
        """
        The name of the user's profile in Studio
        """
        return pulumi.get(self, "user_profile_name")


@pulumi.output_type
class ModelCardModelPackageDetails(dict):
    """
    Metadata information related to model package version
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvalDescription":
            suggest = "approval_description"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "inferenceSpecification":
            suggest = "inference_specification"
        elif key == "modelApprovalStatus":
            suggest = "model_approval_status"
        elif key == "modelPackageArn":
            suggest = "model_package_arn"
        elif key == "modelPackageDescription":
            suggest = "model_package_description"
        elif key == "modelPackageGroupName":
            suggest = "model_package_group_name"
        elif key == "modelPackageName":
            suggest = "model_package_name"
        elif key == "modelPackageStatus":
            suggest = "model_package_status"
        elif key == "modelPackageVersion":
            suggest = "model_package_version"
        elif key == "sourceAlgorithms":
            suggest = "source_algorithms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardModelPackageDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardModelPackageDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardModelPackageDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approval_description: Optional[str] = None,
                 created_by: Optional['outputs.ModelCardModelPackageCreator'] = None,
                 domain: Optional[str] = None,
                 inference_specification: Optional['outputs.ModelCardInferenceSpecification'] = None,
                 model_approval_status: Optional['ModelCardModelPackageDetailsModelApprovalStatus'] = None,
                 model_package_arn: Optional[str] = None,
                 model_package_description: Optional[str] = None,
                 model_package_group_name: Optional[str] = None,
                 model_package_name: Optional[str] = None,
                 model_package_status: Optional['ModelCardModelPackageDetailsModelPackageStatus'] = None,
                 model_package_version: Optional[float] = None,
                 source_algorithms: Optional[Sequence['outputs.ModelCardSourceAlgorithm']] = None,
                 task: Optional[str] = None):
        """
        Metadata information related to model package version
        :param str approval_description: A description provided for the model approval
        :param 'ModelCardModelPackageCreator' created_by: Information about the user who created model package.
        :param str domain: The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
        :param 'ModelCardInferenceSpecification' inference_specification: Details about inference jobs that can be run with models based on this model package.
        :param 'ModelCardModelPackageDetailsModelApprovalStatus' model_approval_status: Current approval status of model package
        :param str model_package_arn: The Amazon Resource Name (ARN) of the model package
        :param str model_package_description: A brief summary of the model package
        :param str model_package_group_name: If the model is a versioned model, the name of the model group that the versioned model belongs to.
        :param str model_package_name: Name of the model package
        :param 'ModelCardModelPackageDetailsModelPackageStatus' model_package_status: Current status of model package
        :param float model_package_version: Version of the model package
        :param Sequence['ModelCardSourceAlgorithm'] source_algorithms: A list of algorithms that were used to create a model package.
        :param str task: The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
        """
        if approval_description is not None:
            pulumi.set(__self__, "approval_description", approval_description)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if inference_specification is not None:
            pulumi.set(__self__, "inference_specification", inference_specification)
        if model_approval_status is not None:
            pulumi.set(__self__, "model_approval_status", model_approval_status)
        if model_package_arn is not None:
            pulumi.set(__self__, "model_package_arn", model_package_arn)
        if model_package_description is not None:
            pulumi.set(__self__, "model_package_description", model_package_description)
        if model_package_group_name is not None:
            pulumi.set(__self__, "model_package_group_name", model_package_group_name)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)
        if model_package_status is not None:
            pulumi.set(__self__, "model_package_status", model_package_status)
        if model_package_version is not None:
            pulumi.set(__self__, "model_package_version", model_package_version)
        if source_algorithms is not None:
            pulumi.set(__self__, "source_algorithms", source_algorithms)
        if task is not None:
            pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter(name="approvalDescription")
    def approval_description(self) -> Optional[str]:
        """
        A description provided for the model approval
        """
        return pulumi.get(self, "approval_description")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional['outputs.ModelCardModelPackageCreator']:
        """
        Information about the user who created model package.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="inferenceSpecification")
    def inference_specification(self) -> Optional['outputs.ModelCardInferenceSpecification']:
        """
        Details about inference jobs that can be run with models based on this model package.
        """
        return pulumi.get(self, "inference_specification")

    @property
    @pulumi.getter(name="modelApprovalStatus")
    def model_approval_status(self) -> Optional['ModelCardModelPackageDetailsModelApprovalStatus']:
        """
        Current approval status of model package
        """
        return pulumi.get(self, "model_approval_status")

    @property
    @pulumi.getter(name="modelPackageArn")
    def model_package_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the model package
        """
        return pulumi.get(self, "model_package_arn")

    @property
    @pulumi.getter(name="modelPackageDescription")
    def model_package_description(self) -> Optional[str]:
        """
        A brief summary of the model package
        """
        return pulumi.get(self, "model_package_description")

    @property
    @pulumi.getter(name="modelPackageGroupName")
    def model_package_group_name(self) -> Optional[str]:
        """
        If the model is a versioned model, the name of the model group that the versioned model belongs to.
        """
        return pulumi.get(self, "model_package_group_name")

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[str]:
        """
        Name of the model package
        """
        return pulumi.get(self, "model_package_name")

    @property
    @pulumi.getter(name="modelPackageStatus")
    def model_package_status(self) -> Optional['ModelCardModelPackageDetailsModelPackageStatus']:
        """
        Current status of model package
        """
        return pulumi.get(self, "model_package_status")

    @property
    @pulumi.getter(name="modelPackageVersion")
    def model_package_version(self) -> Optional[float]:
        """
        Version of the model package
        """
        return pulumi.get(self, "model_package_version")

    @property
    @pulumi.getter(name="sourceAlgorithms")
    def source_algorithms(self) -> Optional[Sequence['outputs.ModelCardSourceAlgorithm']]:
        """
        A list of algorithms that were used to create a model package.
        """
        return pulumi.get(self, "source_algorithms")

    @property
    @pulumi.getter
    def task(self) -> Optional[str]:
        """
        The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
        """
        return pulumi.get(self, "task")


@pulumi.output_type
class ModelCardObjectiveFunction(dict):
    """
    the objective function the model will optimize for.
    """
    def __init__(__self__, *,
                 function: Optional['outputs.ModelCardObjectiveFunctionFunctionProperties'] = None,
                 notes: Optional[str] = None):
        """
        the objective function the model will optimize for.
        :param 'ModelCardObjectiveFunctionFunctionProperties' function: objective function that training job is optimized for.
        """
        if function is not None:
            pulumi.set(__self__, "function", function)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)

    @property
    @pulumi.getter
    def function(self) -> Optional['outputs.ModelCardObjectiveFunctionFunctionProperties']:
        """
        objective function that training job is optimized for.
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")


@pulumi.output_type
class ModelCardObjectiveFunctionFunctionProperties(dict):
    """
    objective function that training job is optimized for.
    """
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 facet: Optional[str] = None,
                 function: Optional['ModelCardObjectiveFunctionFunctionPropertiesFunction'] = None):
        """
        objective function that training job is optimized for.
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if function is not None:
            pulumi.set(__self__, "function", function)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def facet(self) -> Optional[str]:
        return pulumi.get(self, "facet")

    @property
    @pulumi.getter
    def function(self) -> Optional['ModelCardObjectiveFunctionFunctionPropertiesFunction']:
        return pulumi.get(self, "function")


@pulumi.output_type
class ModelCardSecurityConfig(dict):
    """
    An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardSecurityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardSecurityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardSecurityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        """
        An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.


        :param str kms_key_id: A Key Management Service key ID to use for encrypting a model card.
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        A Key Management Service key ID to use for encrypting a model card.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ModelCardSimpleMetric(dict):
    """
    metric data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "xAxisName":
            suggest = "x_axis_name"
        elif key == "yAxisName":
            suggest = "y_axis_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardSimpleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardSimpleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardSimpleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: 'ModelCardSimpleMetricType',
                 value: Any,
                 notes: Optional[str] = None,
                 x_axis_name: Optional[str] = None,
                 y_axis_name: Optional[str] = None):
        """
        metric data
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if x_axis_name is not None:
            pulumi.set(__self__, "x_axis_name", x_axis_name)
        if y_axis_name is not None:
            pulumi.set(__self__, "y_axis_name", y_axis_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> 'ModelCardSimpleMetricType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Any:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="xAxisName")
    def x_axis_name(self) -> Optional[str]:
        return pulumi.get(self, "x_axis_name")

    @property
    @pulumi.getter(name="yAxisName")
    def y_axis_name(self) -> Optional[str]:
        return pulumi.get(self, "y_axis_name")


@pulumi.output_type
class ModelCardSourceAlgorithm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algorithmName":
            suggest = "algorithm_name"
        elif key == "modelDataUrl":
            suggest = "model_data_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardSourceAlgorithm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardSourceAlgorithm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardSourceAlgorithm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm_name: str,
                 model_data_url: Optional[str] = None):
        """
        :param str algorithm_name: The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        :param str model_data_url: The Amazon S3 path where the model artifacts, which result from model training, are stored.
        """
        pulumi.set(__self__, "algorithm_name", algorithm_name)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)

    @property
    @pulumi.getter(name="algorithmName")
    def algorithm_name(self) -> str:
        """
        The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        """
        return pulumi.get(self, "algorithm_name")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        The Amazon S3 path where the model artifacts, which result from model training, are stored.
        """
        return pulumi.get(self, "model_data_url")


@pulumi.output_type
class ModelCardTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The tag key. Tag keys must be unique per resource.
        :param str value: The tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The tag key. Tag keys must be unique per resource.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelCardTrainingDetails(dict):
    """
    Overview about the training.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectiveFunction":
            suggest = "objective_function"
        elif key == "trainingJobDetails":
            suggest = "training_job_details"
        elif key == "trainingObservations":
            suggest = "training_observations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardTrainingDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardTrainingDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardTrainingDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 objective_function: Optional['outputs.ModelCardObjectiveFunction'] = None,
                 training_job_details: Optional['outputs.ModelCardTrainingDetailsTrainingJobDetailsProperties'] = None,
                 training_observations: Optional[str] = None):
        """
        Overview about the training.
        """
        if objective_function is not None:
            pulumi.set(__self__, "objective_function", objective_function)
        if training_job_details is not None:
            pulumi.set(__self__, "training_job_details", training_job_details)
        if training_observations is not None:
            pulumi.set(__self__, "training_observations", training_observations)

    @property
    @pulumi.getter(name="objectiveFunction")
    def objective_function(self) -> Optional['outputs.ModelCardObjectiveFunction']:
        return pulumi.get(self, "objective_function")

    @property
    @pulumi.getter(name="trainingJobDetails")
    def training_job_details(self) -> Optional['outputs.ModelCardTrainingDetailsTrainingJobDetailsProperties']:
        return pulumi.get(self, "training_job_details")

    @property
    @pulumi.getter(name="trainingObservations")
    def training_observations(self) -> Optional[str]:
        return pulumi.get(self, "training_observations")


@pulumi.output_type
class ModelCardTrainingDetailsTrainingJobDetailsProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hyperParameters":
            suggest = "hyper_parameters"
        elif key == "trainingArn":
            suggest = "training_arn"
        elif key == "trainingDatasets":
            suggest = "training_datasets"
        elif key == "trainingEnvironment":
            suggest = "training_environment"
        elif key == "trainingMetrics":
            suggest = "training_metrics"
        elif key == "userProvidedHyperParameters":
            suggest = "user_provided_hyper_parameters"
        elif key == "userProvidedTrainingMetrics":
            suggest = "user_provided_training_metrics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardTrainingDetailsTrainingJobDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardTrainingDetailsTrainingJobDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardTrainingDetailsTrainingJobDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hyper_parameters: Optional[Sequence['outputs.ModelCardTrainingHyperParameter']] = None,
                 training_arn: Optional[str] = None,
                 training_datasets: Optional[Sequence[str]] = None,
                 training_environment: Optional['outputs.ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties'] = None,
                 training_metrics: Optional[Sequence['outputs.ModelCardTrainingMetric']] = None,
                 user_provided_hyper_parameters: Optional[Sequence['outputs.ModelCardTrainingHyperParameter']] = None,
                 user_provided_training_metrics: Optional[Sequence['outputs.ModelCardTrainingMetric']] = None):
        """
        :param str training_arn: SageMaker Training job arn.
        :param Sequence[str] training_datasets: Location of the model datasets.
        """
        if hyper_parameters is not None:
            pulumi.set(__self__, "hyper_parameters", hyper_parameters)
        if training_arn is not None:
            pulumi.set(__self__, "training_arn", training_arn)
        if training_datasets is not None:
            pulumi.set(__self__, "training_datasets", training_datasets)
        if training_environment is not None:
            pulumi.set(__self__, "training_environment", training_environment)
        if training_metrics is not None:
            pulumi.set(__self__, "training_metrics", training_metrics)
        if user_provided_hyper_parameters is not None:
            pulumi.set(__self__, "user_provided_hyper_parameters", user_provided_hyper_parameters)
        if user_provided_training_metrics is not None:
            pulumi.set(__self__, "user_provided_training_metrics", user_provided_training_metrics)

    @property
    @pulumi.getter(name="hyperParameters")
    def hyper_parameters(self) -> Optional[Sequence['outputs.ModelCardTrainingHyperParameter']]:
        return pulumi.get(self, "hyper_parameters")

    @property
    @pulumi.getter(name="trainingArn")
    def training_arn(self) -> Optional[str]:
        """
        SageMaker Training job arn.
        """
        return pulumi.get(self, "training_arn")

    @property
    @pulumi.getter(name="trainingDatasets")
    def training_datasets(self) -> Optional[Sequence[str]]:
        """
        Location of the model datasets.
        """
        return pulumi.get(self, "training_datasets")

    @property
    @pulumi.getter(name="trainingEnvironment")
    def training_environment(self) -> Optional['outputs.ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties']:
        return pulumi.get(self, "training_environment")

    @property
    @pulumi.getter(name="trainingMetrics")
    def training_metrics(self) -> Optional[Sequence['outputs.ModelCardTrainingMetric']]:
        return pulumi.get(self, "training_metrics")

    @property
    @pulumi.getter(name="userProvidedHyperParameters")
    def user_provided_hyper_parameters(self) -> Optional[Sequence['outputs.ModelCardTrainingHyperParameter']]:
        return pulumi.get(self, "user_provided_hyper_parameters")

    @property
    @pulumi.getter(name="userProvidedTrainingMetrics")
    def user_provided_training_metrics(self) -> Optional[Sequence['outputs.ModelCardTrainingMetric']]:
        return pulumi.get(self, "user_provided_training_metrics")


@pulumi.output_type
class ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_image: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] container_image: SageMaker training image uri.
        """
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[Sequence[str]]:
        """
        SageMaker training image uri.
        """
        return pulumi.get(self, "container_image")


@pulumi.output_type
class ModelCardTrainingHyperParameter(dict):
    """
    training hyper parameter
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        training hyper parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelCardTrainingMetric(dict):
    """
    training metric data.
    """
    def __init__(__self__, *,
                 name: str,
                 value: float,
                 notes: Optional[str] = None):
        """
        training metric data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")


@pulumi.output_type
class ModelCardUserContext(dict):
    """
    Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainId":
            suggest = "domain_id"
        elif key == "userProfileArn":
            suggest = "user_profile_arn"
        elif key == "userProfileName":
            suggest = "user_profile_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCardUserContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCardUserContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCardUserContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_id: Optional[str] = None,
                 user_profile_arn: Optional[str] = None,
                 user_profile_name: Optional[str] = None):
        """
        Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        :param str domain_id: The domain associated with the user.
        :param str user_profile_arn: The Amazon Resource Name (ARN) of the user's profile.
        :param str user_profile_name: The name of the user's profile.
        """
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if user_profile_arn is not None:
            pulumi.set(__self__, "user_profile_arn", user_profile_arn)
        if user_profile_name is not None:
            pulumi.set(__self__, "user_profile_name", user_profile_name)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        """
        The domain associated with the user.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="userProfileArn")
    def user_profile_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the user's profile.
        """
        return pulumi.get(self, "user_profile_arn")

    @property
    @pulumi.getter(name="userProfileName")
    def user_profile_name(self) -> Optional[str]:
        """
        The name of the user's profile.
        """
        return pulumi.get(self, "user_profile_name")


@pulumi.output_type
class ModelContainerDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerHostname":
            suggest = "container_hostname"
        elif key == "imageConfig":
            suggest = "image_config"
        elif key == "inferenceSpecificationName":
            suggest = "inference_specification_name"
        elif key == "modelDataUrl":
            suggest = "model_data_url"
        elif key == "modelPackageName":
            suggest = "model_package_name"
        elif key == "multiModelConfig":
            suggest = "multi_model_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelContainerDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelContainerDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelContainerDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_hostname: Optional[str] = None,
                 environment: Optional[Any] = None,
                 image: Optional[str] = None,
                 image_config: Optional['outputs.ModelImageConfig'] = None,
                 inference_specification_name: Optional[str] = None,
                 mode: Optional[str] = None,
                 model_data_url: Optional[str] = None,
                 model_package_name: Optional[str] = None,
                 multi_model_config: Optional['outputs.ModelMultiModelConfig'] = None):
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_config is not None:
            pulumi.set(__self__, "image_config", image_config)
        if inference_specification_name is not None:
            pulumi.set(__self__, "inference_specification_name", inference_specification_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_package_name is not None:
            pulumi.set(__self__, "model_package_name", model_package_name)
        if multi_model_config is not None:
            pulumi.set(__self__, "multi_model_config", multi_model_config)

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[str]:
        return pulumi.get(self, "container_hostname")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageConfig")
    def image_config(self) -> Optional['outputs.ModelImageConfig']:
        return pulumi.get(self, "image_config")

    @property
    @pulumi.getter(name="inferenceSpecificationName")
    def inference_specification_name(self) -> Optional[str]:
        return pulumi.get(self, "inference_specification_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        return pulumi.get(self, "model_data_url")

    @property
    @pulumi.getter(name="modelPackageName")
    def model_package_name(self) -> Optional[str]:
        return pulumi.get(self, "model_package_name")

    @property
    @pulumi.getter(name="multiModelConfig")
    def multi_model_config(self) -> Optional['outputs.ModelMultiModelConfig']:
        return pulumi.get(self, "multi_model_config")


@pulumi.output_type
class ModelExplainabilityJobDefinitionBatchTransformInput(dict):
    """
    The batch transform input for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "featuresAttribute":
            suggest = "features_attribute"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.ModelExplainabilityJobDefinitionDatasetFormat',
                 local_path: str,
                 features_attribute: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode'] = None):
        """
        The batch transform input for a monitoring job.
        :param str data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str features_attribute: JSONpath to locate features in JSONlines dataset
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.ModelExplainabilityJobDefinitionDatasetFormat':
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[str]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class ModelExplainabilityJobDefinitionClusterConfig(dict):
    """
    Configuration for the cluster used to run model monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class ModelExplainabilityJobDefinitionConstraintsResource(dict):
    """
    The baseline constraints resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelExplainabilityJobDefinitionCsv(dict):
    """
    The CSV format
    """
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        The CSV format
        :param bool header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class ModelExplainabilityJobDefinitionDatasetFormat(dict):
    """
    The dataset format of the data to monitor
    """
    def __init__(__self__, *,
                 csv: Optional['outputs.ModelExplainabilityJobDefinitionCsv'] = None,
                 json: Optional['outputs.ModelExplainabilityJobDefinitionJson'] = None,
                 parquet: Optional[bool] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.ModelExplainabilityJobDefinitionCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.ModelExplainabilityJobDefinitionJson']:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def parquet(self) -> Optional[bool]:
        return pulumi.get(self, "parquet")


@pulumi.output_type
class ModelExplainabilityJobDefinitionEndpointInput(dict):
    """
    The endpoint for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "featuresAttribute":
            suggest = "features_attribute"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: str,
                 features_attribute: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelExplainabilityJobDefinitionEndpointInputS3InputMode'] = None):
        """
        The endpoint for a monitoring job.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str features_attribute: JSONpath to locate features in JSONlines dataset
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelExplainabilityJobDefinitionEndpointInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if features_attribute is not None:
            pulumi.set(__self__, "features_attribute", features_attribute)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="featuresAttribute")
    def features_attribute(self) -> Optional[str]:
        """
        JSONpath to locate features in JSONlines dataset
        """
        return pulumi.get(self, "features_attribute")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelExplainabilityJobDefinitionEndpointInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class ModelExplainabilityJobDefinitionJson(dict):
    """
    The Json format
    """
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        The Json format
        :param bool line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification(dict):
    """
    Container image configuration object for the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configUri":
            suggest = "config_uri"
        elif key == "imageUri":
            suggest = "image_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_uri: str,
                 image_uri: str,
                 environment: Optional[Any] = None):
        """
        Container image configuration object for the monitoring job.
        :param str config_uri: The S3 URI to an analysis configuration file
        :param str image_uri: The container image to be run by the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "config_uri", config_uri)
        pulumi.set(__self__, "image_uri", image_uri)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="configUri")
    def config_uri(self) -> str:
        """
        The S3 URI to an analysis configuration file
        """
        return pulumi.get(self, "config_uri")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")


@pulumi.output_type
class ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig(dict):
    """
    Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseliningJobName":
            suggest = "baselining_job_name"
        elif key == "constraintsResource":
            suggest = "constraints_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baselining_job_name: Optional[str] = None,
                 constraints_resource: Optional['outputs.ModelExplainabilityJobDefinitionConstraintsResource'] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[str]:
        return pulumi.get(self, "baselining_job_name")

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.ModelExplainabilityJobDefinitionConstraintsResource']:
        return pulumi.get(self, "constraints_resource")


@pulumi.output_type
class ModelExplainabilityJobDefinitionModelExplainabilityJobInput(dict):
    """
    The inputs for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionModelExplainabilityJobInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityJobInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionModelExplainabilityJobInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_transform_input: Optional['outputs.ModelExplainabilityJobDefinitionBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.ModelExplainabilityJobDefinitionEndpointInput'] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.ModelExplainabilityJobDefinitionBatchTransformInput']:
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.ModelExplainabilityJobDefinitionEndpointInput']:
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class ModelExplainabilityJobDefinitionMonitoringOutput(dict):
    """
    The output object for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionMonitoringOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.ModelExplainabilityJobDefinitionS3Output'):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.ModelExplainabilityJobDefinitionS3Output':
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class ModelExplainabilityJobDefinitionMonitoringOutputConfig(dict):
    """
    The output configuration for monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionMonitoringOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: Sequence['outputs.ModelExplainabilityJobDefinitionMonitoringOutput'],
                 kms_key_id: Optional[str] = None):
        """
        The output configuration for monitoring jobs.
        :param Sequence['ModelExplainabilityJobDefinitionMonitoringOutput'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> Sequence['outputs.ModelExplainabilityJobDefinitionMonitoringOutput']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ModelExplainabilityJobDefinitionMonitoringResources(dict):
    """
    Identifies the resources to deploy for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionMonitoringResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionMonitoringResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionMonitoringResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.ModelExplainabilityJobDefinitionClusterConfig'):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.ModelExplainabilityJobDefinitionClusterConfig':
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class ModelExplainabilityJobDefinitionNetworkConfig(dict):
    """
    Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.ModelExplainabilityJobDefinitionVpcConfig'] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.ModelExplainabilityJobDefinitionVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class ModelExplainabilityJobDefinitionS3Output(dict):
    """
    Information about where and how to store the results of a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_path: str,
                 s3_uri: str,
                 s3_upload_mode: Optional['ModelExplainabilityJobDefinitionS3OutputS3UploadMode'] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param str local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param 'ModelExplainabilityJobDefinitionS3OutputS3UploadMode' s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional['ModelExplainabilityJobDefinitionS3OutputS3UploadMode']:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class ModelExplainabilityJobDefinitionStoppingCondition(dict):
    """
    Specifies a time limit for how long the monitoring job is allowed to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: int):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> int:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class ModelExplainabilityJobDefinitionTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelExplainabilityJobDefinitionVpcConfig(dict):
    """
    Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelExplainabilityJobDefinitionVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelExplainabilityJobDefinitionVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelExplainabilityJobDefinitionVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class ModelImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryAccessMode":
            suggest = "repository_access_mode"
        elif key == "repositoryAuthConfig":
            suggest = "repository_auth_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_access_mode: str,
                 repository_auth_config: Optional['outputs.ModelRepositoryAuthConfig'] = None):
        pulumi.set(__self__, "repository_access_mode", repository_access_mode)
        if repository_auth_config is not None:
            pulumi.set(__self__, "repository_auth_config", repository_auth_config)

    @property
    @pulumi.getter(name="repositoryAccessMode")
    def repository_access_mode(self) -> str:
        return pulumi.get(self, "repository_access_mode")

    @property
    @pulumi.getter(name="repositoryAuthConfig")
    def repository_auth_config(self) -> Optional['outputs.ModelRepositoryAuthConfig']:
        return pulumi.get(self, "repository_auth_config")


@pulumi.output_type
class ModelInferenceExecutionConfig(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class ModelMultiModelConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelCacheSetting":
            suggest = "model_cache_setting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelMultiModelConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelMultiModelConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelMultiModelConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_cache_setting: Optional[str] = None):
        if model_cache_setting is not None:
            pulumi.set(__self__, "model_cache_setting", model_cache_setting)

    @property
    @pulumi.getter(name="modelCacheSetting")
    def model_cache_setting(self) -> Optional[str]:
        return pulumi.get(self, "model_cache_setting")


@pulumi.output_type
class ModelPackageAdditionalInferenceSpecificationDefinition(dict):
    """
    Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportedContentTypes":
            suggest = "supported_content_types"
        elif key == "supportedRealtimeInferenceInstanceTypes":
            suggest = "supported_realtime_inference_instance_types"
        elif key == "supportedResponseMimeTypes":
            suggest = "supported_response_mime_types"
        elif key == "supportedTransformInstanceTypes":
            suggest = "supported_transform_instance_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageAdditionalInferenceSpecificationDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageAdditionalInferenceSpecificationDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageAdditionalInferenceSpecificationDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Sequence['outputs.ModelPackageContainerDefinition'],
                 name: str,
                 description: Optional[str] = None,
                 supported_content_types: Optional[Sequence[str]] = None,
                 supported_realtime_inference_instance_types: Optional[Sequence[str]] = None,
                 supported_response_mime_types: Optional[Sequence[str]] = None,
                 supported_transform_instance_types: Optional[Sequence[str]] = None):
        """
        Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
        :param Sequence['ModelPackageContainerDefinition'] containers: The Amazon ECR registry path of the Docker image that contains the inference code.
        :param str name: A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        :param str description: A description of the additional Inference specification.
        :param Sequence[str] supported_content_types: The supported MIME types for the input data.
        :param Sequence[str] supported_realtime_inference_instance_types: A list of the instance types that are used to generate inferences in real-time
        :param Sequence[str] supported_response_mime_types: The supported MIME types for the output data.
        :param Sequence[str] supported_transform_instance_types: A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if supported_content_types is not None:
            pulumi.set(__self__, "supported_content_types", supported_content_types)
        if supported_realtime_inference_instance_types is not None:
            pulumi.set(__self__, "supported_realtime_inference_instance_types", supported_realtime_inference_instance_types)
        if supported_response_mime_types is not None:
            pulumi.set(__self__, "supported_response_mime_types", supported_response_mime_types)
        if supported_transform_instance_types is not None:
            pulumi.set(__self__, "supported_transform_instance_types", supported_transform_instance_types)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.ModelPackageContainerDefinition']:
        """
        The Amazon ECR registry path of the Docker image that contains the inference code.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the additional Inference specification.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="supportedContentTypes")
    def supported_content_types(self) -> Optional[Sequence[str]]:
        """
        The supported MIME types for the input data.
        """
        return pulumi.get(self, "supported_content_types")

    @property
    @pulumi.getter(name="supportedRealtimeInferenceInstanceTypes")
    def supported_realtime_inference_instance_types(self) -> Optional[Sequence[str]]:
        """
        A list of the instance types that are used to generate inferences in real-time
        """
        return pulumi.get(self, "supported_realtime_inference_instance_types")

    @property
    @pulumi.getter(name="supportedResponseMimeTypes")
    def supported_response_mime_types(self) -> Optional[Sequence[str]]:
        """
        The supported MIME types for the output data.
        """
        return pulumi.get(self, "supported_response_mime_types")

    @property
    @pulumi.getter(name="supportedTransformInstanceTypes")
    def supported_transform_instance_types(self) -> Optional[Sequence[str]]:
        """
        A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        return pulumi.get(self, "supported_transform_instance_types")


@pulumi.output_type
class ModelPackageBias(dict):
    """
    Contains bias metrics for a model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postTrainingReport":
            suggest = "post_training_report"
        elif key == "preTrainingReport":
            suggest = "pre_training_report"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageBias. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageBias.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageBias.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_training_report: Optional['outputs.ModelPackageMetricsSource'] = None,
                 pre_training_report: Optional['outputs.ModelPackageMetricsSource'] = None,
                 report: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Contains bias metrics for a model.
        """
        if post_training_report is not None:
            pulumi.set(__self__, "post_training_report", post_training_report)
        if pre_training_report is not None:
            pulumi.set(__self__, "pre_training_report", pre_training_report)
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter(name="postTrainingReport")
    def post_training_report(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "post_training_report")

    @property
    @pulumi.getter(name="preTrainingReport")
    def pre_training_report(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "pre_training_report")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "report")


@pulumi.output_type
class ModelPackageContainerDefinition(dict):
    """
    Describes the Docker container for the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerHostname":
            suggest = "container_hostname"
        elif key == "frameworkVersion":
            suggest = "framework_version"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "modelDataUrl":
            suggest = "model_data_url"
        elif key == "modelInput":
            suggest = "model_input"
        elif key == "nearestModelName":
            suggest = "nearest_model_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageContainerDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageContainerDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageContainerDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 container_hostname: Optional[str] = None,
                 environment: Optional['outputs.ModelPackageEnvironment'] = None,
                 framework: Optional[str] = None,
                 framework_version: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 model_data_url: Optional[str] = None,
                 model_input: Optional['outputs.ModelPackageContainerDefinitionModelInputProperties'] = None,
                 nearest_model_name: Optional[str] = None):
        """
        Describes the Docker container for the model package.
        :param str image: The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        :param str container_hostname: The DNS host name for the Docker container.
        :param str framework: The machine learning framework of the model package container image.
        :param str framework_version: The framework version of the Model Package Container Image.
        :param str image_digest: An MD5 hash of the training algorithm that identifies the Docker image used for training.
        :param str model_data_url: A structure with Model Input details.
        :param str nearest_model_name: The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        """
        pulumi.set(__self__, "image", image)
        if container_hostname is not None:
            pulumi.set(__self__, "container_hostname", container_hostname)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if framework is not None:
            pulumi.set(__self__, "framework", framework)
        if framework_version is not None:
            pulumi.set(__self__, "framework_version", framework_version)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)
        if model_input is not None:
            pulumi.set(__self__, "model_input", model_input)
        if nearest_model_name is not None:
            pulumi.set(__self__, "nearest_model_name", nearest_model_name)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="containerHostname")
    def container_hostname(self) -> Optional[str]:
        """
        The DNS host name for the Docker container.
        """
        return pulumi.get(self, "container_hostname")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ModelPackageEnvironment']:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def framework(self) -> Optional[str]:
        """
        The machine learning framework of the model package container image.
        """
        return pulumi.get(self, "framework")

    @property
    @pulumi.getter(name="frameworkVersion")
    def framework_version(self) -> Optional[str]:
        """
        The framework version of the Model Package Container Image.
        """
        return pulumi.get(self, "framework_version")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        """
        An MD5 hash of the training algorithm that identifies the Docker image used for training.
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        A structure with Model Input details.
        """
        return pulumi.get(self, "model_data_url")

    @property
    @pulumi.getter(name="modelInput")
    def model_input(self) -> Optional['outputs.ModelPackageContainerDefinitionModelInputProperties']:
        return pulumi.get(self, "model_input")

    @property
    @pulumi.getter(name="nearestModelName")
    def nearest_model_name(self) -> Optional[str]:
        """
        The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
        """
        return pulumi.get(self, "nearest_model_name")


@pulumi.output_type
class ModelPackageContainerDefinitionModelInputProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataInputConfig":
            suggest = "data_input_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageContainerDefinitionModelInputProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageContainerDefinitionModelInputProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageContainerDefinitionModelInputProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_input_config: str):
        """
        :param str data_input_config: The input configuration object for the model.
        """
        pulumi.set(__self__, "data_input_config", data_input_config)

    @property
    @pulumi.getter(name="dataInputConfig")
    def data_input_config(self) -> str:
        """
        The input configuration object for the model.
        """
        return pulumi.get(self, "data_input_config")


@pulumi.output_type
class ModelPackageCustomerMetadataProperties(dict):
    """
    The metadata properties associated with the model package versions.
    """
    def __init__(__self__):
        """
        The metadata properties associated with the model package versions.
        """
        pass


@pulumi.output_type
class ModelPackageDataSource(dict):
    """
    Describes the input source of a transform job and the way the transform job consumes it.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3DataSource":
            suggest = "s3_data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_data_source: 'outputs.ModelPackageS3DataSource'):
        """
        Describes the input source of a transform job and the way the transform job consumes it.
        """
        pulumi.set(__self__, "s3_data_source", s3_data_source)

    @property
    @pulumi.getter(name="s3DataSource")
    def s3_data_source(self) -> 'outputs.ModelPackageS3DataSource':
        return pulumi.get(self, "s3_data_source")


@pulumi.output_type
class ModelPackageDriftCheckBaselines(dict):
    """
    Represents the drift check baselines that can be used when the model monitor is set using the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelDataQuality":
            suggest = "model_data_quality"
        elif key == "modelQuality":
            suggest = "model_quality"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageDriftCheckBaselines. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageDriftCheckBaselines.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageDriftCheckBaselines.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bias: Optional['outputs.ModelPackageDriftCheckBias'] = None,
                 explainability: Optional['outputs.ModelPackageDriftCheckExplainability'] = None,
                 model_data_quality: Optional['outputs.ModelPackageDriftCheckModelDataQuality'] = None,
                 model_quality: Optional['outputs.ModelPackageDriftCheckModelQuality'] = None):
        """
        Represents the drift check baselines that can be used when the model monitor is set using the model package.
        """
        if bias is not None:
            pulumi.set(__self__, "bias", bias)
        if explainability is not None:
            pulumi.set(__self__, "explainability", explainability)
        if model_data_quality is not None:
            pulumi.set(__self__, "model_data_quality", model_data_quality)
        if model_quality is not None:
            pulumi.set(__self__, "model_quality", model_quality)

    @property
    @pulumi.getter
    def bias(self) -> Optional['outputs.ModelPackageDriftCheckBias']:
        return pulumi.get(self, "bias")

    @property
    @pulumi.getter
    def explainability(self) -> Optional['outputs.ModelPackageDriftCheckExplainability']:
        return pulumi.get(self, "explainability")

    @property
    @pulumi.getter(name="modelDataQuality")
    def model_data_quality(self) -> Optional['outputs.ModelPackageDriftCheckModelDataQuality']:
        return pulumi.get(self, "model_data_quality")

    @property
    @pulumi.getter(name="modelQuality")
    def model_quality(self) -> Optional['outputs.ModelPackageDriftCheckModelQuality']:
        return pulumi.get(self, "model_quality")


@pulumi.output_type
class ModelPackageDriftCheckBias(dict):
    """
    Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configFile":
            suggest = "config_file"
        elif key == "postTrainingConstraints":
            suggest = "post_training_constraints"
        elif key == "preTrainingConstraints":
            suggest = "pre_training_constraints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageDriftCheckBias. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageDriftCheckBias.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageDriftCheckBias.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_file: Optional['outputs.ModelPackageFileSource'] = None,
                 post_training_constraints: Optional['outputs.ModelPackageMetricsSource'] = None,
                 pre_training_constraints: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
        """
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if post_training_constraints is not None:
            pulumi.set(__self__, "post_training_constraints", post_training_constraints)
        if pre_training_constraints is not None:
            pulumi.set(__self__, "pre_training_constraints", pre_training_constraints)

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional['outputs.ModelPackageFileSource']:
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter(name="postTrainingConstraints")
    def post_training_constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "post_training_constraints")

    @property
    @pulumi.getter(name="preTrainingConstraints")
    def pre_training_constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "pre_training_constraints")


@pulumi.output_type
class ModelPackageDriftCheckExplainability(dict):
    """
    Contains explainability metrics for a model.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configFile":
            suggest = "config_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageDriftCheckExplainability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageDriftCheckExplainability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageDriftCheckExplainability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_file: Optional['outputs.ModelPackageFileSource'] = None,
                 constraints: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Contains explainability metrics for a model.
        """
        if config_file is not None:
            pulumi.set(__self__, "config_file", config_file)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)

    @property
    @pulumi.getter(name="configFile")
    def config_file(self) -> Optional['outputs.ModelPackageFileSource']:
        return pulumi.get(self, "config_file")

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "constraints")


@pulumi.output_type
class ModelPackageDriftCheckModelDataQuality(dict):
    """
    Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
    """
    def __init__(__self__, *,
                 constraints: Optional['outputs.ModelPackageMetricsSource'] = None,
                 statistics: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def statistics(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "statistics")


@pulumi.output_type
class ModelPackageDriftCheckModelQuality(dict):
    """
    Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
    """
    def __init__(__self__, *,
                 constraints: Optional['outputs.ModelPackageMetricsSource'] = None,
                 statistics: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def statistics(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "statistics")


@pulumi.output_type
class ModelPackageEnvironment(dict):
    """
    Sets the environment variables in the Docker container
    """
    def __init__(__self__):
        """
        Sets the environment variables in the Docker container
        """
        pass


@pulumi.output_type
class ModelPackageExplainability(dict):
    """
    Contains explainability metrics for a model.
    """
    def __init__(__self__, *,
                 report: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Contains explainability metrics for a model.
        """
        if report is not None:
            pulumi.set(__self__, "report", report)

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "report")


@pulumi.output_type
class ModelPackageFileSource(dict):
    """
    Represents a File Source Object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"
        elif key == "contentDigest":
            suggest = "content_digest"
        elif key == "contentType":
            suggest = "content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageFileSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageFileSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageFileSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str,
                 content_digest: Optional[str] = None,
                 content_type: Optional[str] = None):
        """
        Represents a File Source Object.
        :param str s3_uri: The Amazon S3 URI for the file source.
        :param str content_digest: The digest of the file source.
        :param str content_type: The type of content stored in the file source.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)
        if content_digest is not None:
            pulumi.set(__self__, "content_digest", content_digest)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        The Amazon S3 URI for the file source.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="contentDigest")
    def content_digest(self) -> Optional[str]:
        """
        The digest of the file source.
        """
        return pulumi.get(self, "content_digest")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        The type of content stored in the file source.
        """
        return pulumi.get(self, "content_type")


@pulumi.output_type
class ModelPackageGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelPackageInferenceSpecification(dict):
    """
    Details about inference jobs that can be run with models based on this model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "supportedContentTypes":
            suggest = "supported_content_types"
        elif key == "supportedResponseMimeTypes":
            suggest = "supported_response_mime_types"
        elif key == "supportedRealtimeInferenceInstanceTypes":
            suggest = "supported_realtime_inference_instance_types"
        elif key == "supportedTransformInstanceTypes":
            suggest = "supported_transform_instance_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageInferenceSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageInferenceSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageInferenceSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Sequence['outputs.ModelPackageContainerDefinition'],
                 supported_content_types: Sequence[str],
                 supported_response_mime_types: Sequence[str],
                 supported_realtime_inference_instance_types: Optional[Sequence[str]] = None,
                 supported_transform_instance_types: Optional[Sequence[str]] = None):
        """
        Details about inference jobs that can be run with models based on this model package.
        :param Sequence['ModelPackageContainerDefinition'] containers: The Amazon ECR registry path of the Docker image that contains the inference code.
        :param Sequence[str] supported_content_types: The supported MIME types for the input data.
        :param Sequence[str] supported_response_mime_types: The supported MIME types for the output data.
        :param Sequence[str] supported_realtime_inference_instance_types: A list of the instance types that are used to generate inferences in real-time
        :param Sequence[str] supported_transform_instance_types: A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "supported_content_types", supported_content_types)
        pulumi.set(__self__, "supported_response_mime_types", supported_response_mime_types)
        if supported_realtime_inference_instance_types is not None:
            pulumi.set(__self__, "supported_realtime_inference_instance_types", supported_realtime_inference_instance_types)
        if supported_transform_instance_types is not None:
            pulumi.set(__self__, "supported_transform_instance_types", supported_transform_instance_types)

    @property
    @pulumi.getter
    def containers(self) -> Sequence['outputs.ModelPackageContainerDefinition']:
        """
        The Amazon ECR registry path of the Docker image that contains the inference code.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="supportedContentTypes")
    def supported_content_types(self) -> Sequence[str]:
        """
        The supported MIME types for the input data.
        """
        return pulumi.get(self, "supported_content_types")

    @property
    @pulumi.getter(name="supportedResponseMimeTypes")
    def supported_response_mime_types(self) -> Sequence[str]:
        """
        The supported MIME types for the output data.
        """
        return pulumi.get(self, "supported_response_mime_types")

    @property
    @pulumi.getter(name="supportedRealtimeInferenceInstanceTypes")
    def supported_realtime_inference_instance_types(self) -> Optional[Sequence[str]]:
        """
        A list of the instance types that are used to generate inferences in real-time
        """
        return pulumi.get(self, "supported_realtime_inference_instance_types")

    @property
    @pulumi.getter(name="supportedTransformInstanceTypes")
    def supported_transform_instance_types(self) -> Optional[Sequence[str]]:
        """
        A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        """
        return pulumi.get(self, "supported_transform_instance_types")


@pulumi.output_type
class ModelPackageMetadataProperties(dict):
    """
    Metadata properties of the tracking entity, trial, or trial component.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitId":
            suggest = "commit_id"
        elif key == "generatedBy":
            suggest = "generated_by"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageMetadataProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageMetadataProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageMetadataProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commit_id: Optional[str] = None,
                 generated_by: Optional[str] = None,
                 project_id: Optional[str] = None,
                 repository: Optional[str] = None):
        """
        Metadata properties of the tracking entity, trial, or trial component.
        :param str commit_id: The commit ID.
        :param str generated_by: The entity this entity was generated by.
        :param str project_id: The project ID metadata.
        :param str repository: The repository metadata.
        """
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if generated_by is not None:
            pulumi.set(__self__, "generated_by", generated_by)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[str]:
        """
        The commit ID.
        """
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter(name="generatedBy")
    def generated_by(self) -> Optional[str]:
        """
        The entity this entity was generated by.
        """
        return pulumi.get(self, "generated_by")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        The project ID metadata.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        The repository metadata.
        """
        return pulumi.get(self, "repository")


@pulumi.output_type
class ModelPackageMetricsSource(dict):
    """
    Represents a Metric Source Object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "contentDigest":
            suggest = "content_digest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageMetricsSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageMetricsSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageMetricsSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_type: str,
                 s3_uri: str,
                 content_digest: Optional[str] = None):
        """
        Represents a Metric Source Object.
        :param str content_type: The type of content stored in the metric source.
        :param str s3_uri: The Amazon S3 URI for the metric source.
        :param str content_digest: The digest of the metric source.
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if content_digest is not None:
            pulumi.set(__self__, "content_digest", content_digest)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The type of content stored in the metric source.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        The Amazon S3 URI for the metric source.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="contentDigest")
    def content_digest(self) -> Optional[str]:
        """
        The digest of the metric source.
        """
        return pulumi.get(self, "content_digest")


@pulumi.output_type
class ModelPackageModelDataQuality(dict):
    """
    Metrics that measure the quality of the input data for a model.
    """
    def __init__(__self__, *,
                 constraints: Optional['outputs.ModelPackageMetricsSource'] = None,
                 statistics: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Metrics that measure the quality of the input data for a model.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def statistics(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "statistics")


@pulumi.output_type
class ModelPackageModelMetrics(dict):
    """
    A structure that contains model metrics reports.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelDataQuality":
            suggest = "model_data_quality"
        elif key == "modelQuality":
            suggest = "model_quality"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageModelMetrics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageModelMetrics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageModelMetrics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bias: Optional['outputs.ModelPackageBias'] = None,
                 explainability: Optional['outputs.ModelPackageExplainability'] = None,
                 model_data_quality: Optional['outputs.ModelPackageModelDataQuality'] = None,
                 model_quality: Optional['outputs.ModelPackageModelQuality'] = None):
        """
        A structure that contains model metrics reports.
        """
        if bias is not None:
            pulumi.set(__self__, "bias", bias)
        if explainability is not None:
            pulumi.set(__self__, "explainability", explainability)
        if model_data_quality is not None:
            pulumi.set(__self__, "model_data_quality", model_data_quality)
        if model_quality is not None:
            pulumi.set(__self__, "model_quality", model_quality)

    @property
    @pulumi.getter
    def bias(self) -> Optional['outputs.ModelPackageBias']:
        return pulumi.get(self, "bias")

    @property
    @pulumi.getter
    def explainability(self) -> Optional['outputs.ModelPackageExplainability']:
        return pulumi.get(self, "explainability")

    @property
    @pulumi.getter(name="modelDataQuality")
    def model_data_quality(self) -> Optional['outputs.ModelPackageModelDataQuality']:
        return pulumi.get(self, "model_data_quality")

    @property
    @pulumi.getter(name="modelQuality")
    def model_quality(self) -> Optional['outputs.ModelPackageModelQuality']:
        return pulumi.get(self, "model_quality")


@pulumi.output_type
class ModelPackageModelQuality(dict):
    """
    Metrics that measure the quality of a model.
    """
    def __init__(__self__, *,
                 constraints: Optional['outputs.ModelPackageMetricsSource'] = None,
                 statistics: Optional['outputs.ModelPackageMetricsSource'] = None):
        """
        Metrics that measure the quality of a model.
        """
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def statistics(self) -> Optional['outputs.ModelPackageMetricsSource']:
        return pulumi.get(self, "statistics")


@pulumi.output_type
class ModelPackageS3DataSource(dict):
    """
    Describes the S3 data source.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3DataType":
            suggest = "s3_data_type"
        elif key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageS3DataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageS3DataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageS3DataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_data_type: 'ModelPackageS3DataSourceS3DataType',
                 s3_uri: str):
        """
        Describes the S3 data source.
        :param 'ModelPackageS3DataSourceS3DataType' s3_data_type: The S3 Data Source Type
        :param str s3_uri: Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
        """
        pulumi.set(__self__, "s3_data_type", s3_data_type)
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3DataType")
    def s3_data_type(self) -> 'ModelPackageS3DataSourceS3DataType':
        """
        The S3 Data Source Type
        """
        return pulumi.get(self, "s3_data_type")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelPackageSourceAlgorithm(dict):
    """
    Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "algorithmName":
            suggest = "algorithm_name"
        elif key == "modelDataUrl":
            suggest = "model_data_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageSourceAlgorithm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageSourceAlgorithm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageSourceAlgorithm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm_name: str,
                 model_data_url: Optional[str] = None):
        """
        Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        :param str algorithm_name: The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        :param str model_data_url: The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        """
        pulumi.set(__self__, "algorithm_name", algorithm_name)
        if model_data_url is not None:
            pulumi.set(__self__, "model_data_url", model_data_url)

    @property
    @pulumi.getter(name="algorithmName")
    def algorithm_name(self) -> str:
        """
        The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
        """
        return pulumi.get(self, "algorithm_name")

    @property
    @pulumi.getter(name="modelDataUrl")
    def model_data_url(self) -> Optional[str]:
        """
        The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        """
        return pulumi.get(self, "model_data_url")


@pulumi.output_type
class ModelPackageSourceAlgorithmSpecification(dict):
    """
    Details about the algorithm that was used to create the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAlgorithms":
            suggest = "source_algorithms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageSourceAlgorithmSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageSourceAlgorithmSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageSourceAlgorithmSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_algorithms: Sequence['outputs.ModelPackageSourceAlgorithm']):
        """
        Details about the algorithm that was used to create the model package.
        :param Sequence['ModelPackageSourceAlgorithm'] source_algorithms: A list of algorithms that were used to create a model package.
        """
        pulumi.set(__self__, "source_algorithms", source_algorithms)

    @property
    @pulumi.getter(name="sourceAlgorithms")
    def source_algorithms(self) -> Sequence['outputs.ModelPackageSourceAlgorithm']:
        """
        A list of algorithms that were used to create a model package.
        """
        return pulumi.get(self, "source_algorithms")


@pulumi.output_type
class ModelPackageStatusDetails(dict):
    """
    Details about the current status of the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationStatuses":
            suggest = "validation_statuses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageStatusDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageStatusDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageStatusDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validation_statuses: Optional[Sequence['outputs.ModelPackageStatusItem']] = None):
        """
        Details about the current status of the model package.
        """
        if validation_statuses is not None:
            pulumi.set(__self__, "validation_statuses", validation_statuses)

    @property
    @pulumi.getter(name="validationStatuses")
    def validation_statuses(self) -> Optional[Sequence['outputs.ModelPackageStatusItem']]:
        return pulumi.get(self, "validation_statuses")


@pulumi.output_type
class ModelPackageStatusItem(dict):
    """
    Represents the overall status of a model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureReason":
            suggest = "failure_reason"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageStatusItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageStatusItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageStatusItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status: 'ModelPackageStatusItemStatus',
                 failure_reason: Optional[str] = None):
        """
        Represents the overall status of a model package.
        :param str name: The name of the model package for which the overall status is being reported.
        :param 'ModelPackageStatusItemStatus' status: The current status.
        :param str failure_reason: If the overall status is Failed, the reason for the failure.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the model package for which the overall status is being reported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> 'ModelPackageStatusItemStatus':
        """
        The current status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        If the overall status is Failed, the reason for the failure.
        """
        return pulumi.get(self, "failure_reason")


@pulumi.output_type
class ModelPackageTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelPackageTransformInput(dict):
    """
    Describes the input source of a transform job and the way the transform job consumes it.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "compressionType":
            suggest = "compression_type"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "splitType":
            suggest = "split_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: 'outputs.ModelPackageDataSource',
                 compression_type: Optional['ModelPackageTransformInputCompressionType'] = None,
                 content_type: Optional[str] = None,
                 split_type: Optional['ModelPackageTransformInputSplitType'] = None):
        """
        Describes the input source of a transform job and the way the transform job consumes it.
        :param 'ModelPackageTransformInputCompressionType' compression_type: If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        :param str content_type: The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        :param 'ModelPackageTransformInputSplitType' split_type: The method to use to split the transform job's data files into smaller batches. 
        """
        pulumi.set(__self__, "data_source", data_source)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if split_type is not None:
            pulumi.set(__self__, "split_type", split_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.ModelPackageDataSource':
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional['ModelPackageTransformInputCompressionType']:
        """
        If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        """
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="splitType")
    def split_type(self) -> Optional['ModelPackageTransformInputSplitType']:
        """
        The method to use to split the transform job's data files into smaller batches. 
        """
        return pulumi.get(self, "split_type")


@pulumi.output_type
class ModelPackageTransformJobDefinition(dict):
    """
    Defines the input needed to run a transform job using the inference specification specified in the algorithm.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "transformInput":
            suggest = "transform_input"
        elif key == "transformOutput":
            suggest = "transform_output"
        elif key == "transformResources":
            suggest = "transform_resources"
        elif key == "batchStrategy":
            suggest = "batch_strategy"
        elif key == "maxConcurrentTransforms":
            suggest = "max_concurrent_transforms"
        elif key == "maxPayloadInMb":
            suggest = "max_payload_in_mb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageTransformJobDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageTransformJobDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageTransformJobDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 transform_input: 'outputs.ModelPackageTransformInput',
                 transform_output: 'outputs.ModelPackageTransformOutput',
                 transform_resources: 'outputs.ModelPackageTransformResources',
                 batch_strategy: Optional['ModelPackageTransformJobDefinitionBatchStrategy'] = None,
                 environment: Optional['outputs.ModelPackageEnvironment'] = None,
                 max_concurrent_transforms: Optional[int] = None,
                 max_payload_in_mb: Optional[int] = None):
        """
        Defines the input needed to run a transform job using the inference specification specified in the algorithm.
        :param 'ModelPackageTransformJobDefinitionBatchStrategy' batch_strategy: A string that determines the number of records included in a single mini-batch.
        :param int max_concurrent_transforms: The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        :param int max_payload_in_mb: The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        """
        pulumi.set(__self__, "transform_input", transform_input)
        pulumi.set(__self__, "transform_output", transform_output)
        pulumi.set(__self__, "transform_resources", transform_resources)
        if batch_strategy is not None:
            pulumi.set(__self__, "batch_strategy", batch_strategy)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if max_concurrent_transforms is not None:
            pulumi.set(__self__, "max_concurrent_transforms", max_concurrent_transforms)
        if max_payload_in_mb is not None:
            pulumi.set(__self__, "max_payload_in_mb", max_payload_in_mb)

    @property
    @pulumi.getter(name="transformInput")
    def transform_input(self) -> 'outputs.ModelPackageTransformInput':
        return pulumi.get(self, "transform_input")

    @property
    @pulumi.getter(name="transformOutput")
    def transform_output(self) -> 'outputs.ModelPackageTransformOutput':
        return pulumi.get(self, "transform_output")

    @property
    @pulumi.getter(name="transformResources")
    def transform_resources(self) -> 'outputs.ModelPackageTransformResources':
        return pulumi.get(self, "transform_resources")

    @property
    @pulumi.getter(name="batchStrategy")
    def batch_strategy(self) -> Optional['ModelPackageTransformJobDefinitionBatchStrategy']:
        """
        A string that determines the number of records included in a single mini-batch.
        """
        return pulumi.get(self, "batch_strategy")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ModelPackageEnvironment']:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="maxConcurrentTransforms")
    def max_concurrent_transforms(self) -> Optional[int]:
        """
        The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        """
        return pulumi.get(self, "max_concurrent_transforms")

    @property
    @pulumi.getter(name="maxPayloadInMb")
    def max_payload_in_mb(self) -> Optional[int]:
        """
        The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        """
        return pulumi.get(self, "max_payload_in_mb")


@pulumi.output_type
class ModelPackageTransformOutput(dict):
    """
    Describes the results of a transform job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3OutputPath":
            suggest = "s3_output_path"
        elif key == "assembleWith":
            suggest = "assemble_with"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageTransformOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageTransformOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageTransformOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output_path: str,
                 accept: Optional[str] = None,
                 assemble_with: Optional['ModelPackageTransformOutputAssembleWith'] = None,
                 kms_key_id: Optional[str] = None):
        """
        Describes the results of a transform job.
        :param str s3_output_path: The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
        :param str accept: The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        :param 'ModelPackageTransformOutputAssembleWith' assemble_with: Defines how to assemble the results of the transform job as a single S3 object.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "s3_output_path", s3_output_path)
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if assemble_with is not None:
            pulumi.set(__self__, "assemble_with", assemble_with)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> str:
        """
        The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
        """
        return pulumi.get(self, "s3_output_path")

    @property
    @pulumi.getter
    def accept(self) -> Optional[str]:
        """
        The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        """
        return pulumi.get(self, "accept")

    @property
    @pulumi.getter(name="assembleWith")
    def assemble_with(self) -> Optional['ModelPackageTransformOutputAssembleWith']:
        """
        Defines how to assemble the results of the transform job as a single S3 object.
        """
        return pulumi.get(self, "assemble_with")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ModelPackageTransformResources(dict):
    """
    Describes the resources, including ML instance types and ML instance count, to use for transform job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageTransformResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageTransformResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageTransformResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_kms_key_id: Optional[str] = None):
        """
        Describes the resources, including ML instance types and ML instance count, to use for transform job.
        :param int instance_count: The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the transform job.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the transform job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class ModelPackageValidationProfile(dict):
    """
    Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileName":
            suggest = "profile_name"
        elif key == "transformJobDefinition":
            suggest = "transform_job_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageValidationProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageValidationProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageValidationProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profile_name: str,
                 transform_job_definition: 'outputs.ModelPackageTransformJobDefinition'):
        """
        Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
        :param str profile_name: The name of the profile for the model package.
        """
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "transform_job_definition", transform_job_definition)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        """
        The name of the profile for the model package.
        """
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="transformJobDefinition")
    def transform_job_definition(self) -> 'outputs.ModelPackageTransformJobDefinition':
        return pulumi.get(self, "transform_job_definition")


@pulumi.output_type
class ModelPackageValidationSpecification(dict):
    """
    Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationProfiles":
            suggest = "validation_profiles"
        elif key == "validationRole":
            suggest = "validation_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelPackageValidationSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelPackageValidationSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelPackageValidationSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 validation_profiles: Sequence['outputs.ModelPackageValidationProfile'],
                 validation_role: str):
        """
        Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
        :param str validation_role: The IAM roles to be used for the validation of the model package.
        """
        pulumi.set(__self__, "validation_profiles", validation_profiles)
        pulumi.set(__self__, "validation_role", validation_role)

    @property
    @pulumi.getter(name="validationProfiles")
    def validation_profiles(self) -> Sequence['outputs.ModelPackageValidationProfile']:
        return pulumi.get(self, "validation_profiles")

    @property
    @pulumi.getter(name="validationRole")
    def validation_role(self) -> str:
        """
        The IAM roles to be used for the validation of the model package.
        """
        return pulumi.get(self, "validation_role")


@pulumi.output_type
class ModelQualityJobDefinitionBatchTransformInput(dict):
    """
    The batch transform input for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "probabilityThresholdAttribute":
            suggest = "probability_threshold_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.ModelQualityJobDefinitionDatasetFormat',
                 local_path: str,
                 end_time_offset: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 probability_threshold_attribute: Optional[float] = None,
                 s3_data_distribution_type: Optional['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelQualityJobDefinitionBatchTransformInputS3InputMode'] = None,
                 start_time_offset: Optional[str] = None):
        """
        The batch transform input for a monitoring job.
        :param str data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str end_time_offset: Monitoring end time offset, e.g. PT0H
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelQualityJobDefinitionBatchTransformInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param str start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.ModelQualityJobDefinitionDatasetFormat':
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[str]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[float]:
        return pulumi.get(self, "probability_threshold_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelQualityJobDefinitionBatchTransformInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[str]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class ModelQualityJobDefinitionClusterConfig(dict):
    """
    Configuration for the cluster used to run model monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class ModelQualityJobDefinitionConstraintsResource(dict):
    """
    The baseline constraints resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelQualityJobDefinitionCsv(dict):
    """
    The CSV format
    """
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        The CSV format
        :param bool header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class ModelQualityJobDefinitionDatasetFormat(dict):
    """
    The dataset format of the data to monitor
    """
    def __init__(__self__, *,
                 csv: Optional['outputs.ModelQualityJobDefinitionCsv'] = None,
                 json: Optional['outputs.ModelQualityJobDefinitionJson'] = None,
                 parquet: Optional[bool] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.ModelQualityJobDefinitionCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.ModelQualityJobDefinitionJson']:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def parquet(self) -> Optional[bool]:
        return pulumi.get(self, "parquet")


@pulumi.output_type
class ModelQualityJobDefinitionEndpointInput(dict):
    """
    The endpoint for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "inferenceAttribute":
            suggest = "inference_attribute"
        elif key == "probabilityAttribute":
            suggest = "probability_attribute"
        elif key == "probabilityThresholdAttribute":
            suggest = "probability_threshold_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: str,
                 end_time_offset: Optional[str] = None,
                 inference_attribute: Optional[str] = None,
                 probability_attribute: Optional[str] = None,
                 probability_threshold_attribute: Optional[float] = None,
                 s3_data_distribution_type: Optional['ModelQualityJobDefinitionEndpointInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['ModelQualityJobDefinitionEndpointInputS3InputMode'] = None,
                 start_time_offset: Optional[str] = None):
        """
        The endpoint for a monitoring job.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str end_time_offset: Monitoring end time offset, e.g. PT0H
        :param str inference_attribute: Index or JSONpath to locate predicted label(s)
        :param str probability_attribute: Index or JSONpath to locate probabilities
        :param 'ModelQualityJobDefinitionEndpointInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'ModelQualityJobDefinitionEndpointInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        :param str start_time_offset: Monitoring start time offset, e.g. -PT1H
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if inference_attribute is not None:
            pulumi.set(__self__, "inference_attribute", inference_attribute)
        if probability_attribute is not None:
            pulumi.set(__self__, "probability_attribute", probability_attribute)
        if probability_threshold_attribute is not None:
            pulumi.set(__self__, "probability_threshold_attribute", probability_threshold_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[str]:
        """
        Monitoring end time offset, e.g. PT0H
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="inferenceAttribute")
    def inference_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate predicted label(s)
        """
        return pulumi.get(self, "inference_attribute")

    @property
    @pulumi.getter(name="probabilityAttribute")
    def probability_attribute(self) -> Optional[str]:
        """
        Index or JSONpath to locate probabilities
        """
        return pulumi.get(self, "probability_attribute")

    @property
    @pulumi.getter(name="probabilityThresholdAttribute")
    def probability_threshold_attribute(self) -> Optional[float]:
        return pulumi.get(self, "probability_threshold_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['ModelQualityJobDefinitionEndpointInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['ModelQualityJobDefinitionEndpointInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[str]:
        """
        Monitoring start time offset, e.g. -PT1H
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class ModelQualityJobDefinitionJson(dict):
    """
    The Json format
    """
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        The Json format
        :param bool line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class ModelQualityJobDefinitionModelQualityAppSpecification(dict):
    """
    Container image configuration object for the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUri":
            suggest = "image_uri"
        elif key == "problemType":
            suggest = "problem_type"
        elif key == "containerArguments":
            suggest = "container_arguments"
        elif key == "containerEntrypoint":
            suggest = "container_entrypoint"
        elif key == "postAnalyticsProcessorSourceUri":
            suggest = "post_analytics_processor_source_uri"
        elif key == "recordPreprocessorSourceUri":
            suggest = "record_preprocessor_source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionModelQualityAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionModelQualityAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionModelQualityAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_uri: str,
                 problem_type: 'ModelQualityJobDefinitionProblemType',
                 container_arguments: Optional[Sequence[str]] = None,
                 container_entrypoint: Optional[Sequence[str]] = None,
                 environment: Optional[Any] = None,
                 post_analytics_processor_source_uri: Optional[str] = None,
                 record_preprocessor_source_uri: Optional[str] = None):
        """
        Container image configuration object for the monitoring job.
        :param str image_uri: The container image to be run by the monitoring job.
        :param Sequence[str] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param Sequence[str] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param Any environment: Sets the environment variables in the Docker container
        :param str post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param str record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "problem_type", problem_type)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="problemType")
    def problem_type(self) -> 'ModelQualityJobDefinitionProblemType':
        return pulumi.get(self, "problem_type")

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[Sequence[str]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[Sequence[str]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")


@pulumi.output_type
class ModelQualityJobDefinitionModelQualityBaselineConfig(dict):
    """
    Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseliningJobName":
            suggest = "baselining_job_name"
        elif key == "constraintsResource":
            suggest = "constraints_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionModelQualityBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionModelQualityBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionModelQualityBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baselining_job_name: Optional[str] = None,
                 constraints_resource: Optional['outputs.ModelQualityJobDefinitionConstraintsResource'] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if baselining_job_name is not None:
            pulumi.set(__self__, "baselining_job_name", baselining_job_name)
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)

    @property
    @pulumi.getter(name="baseliningJobName")
    def baselining_job_name(self) -> Optional[str]:
        return pulumi.get(self, "baselining_job_name")

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.ModelQualityJobDefinitionConstraintsResource']:
        return pulumi.get(self, "constraints_resource")


@pulumi.output_type
class ModelQualityJobDefinitionModelQualityJobInput(dict):
    """
    The inputs for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groundTruthS3Input":
            suggest = "ground_truth_s3_input"
        elif key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionModelQualityJobInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionModelQualityJobInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionModelQualityJobInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ground_truth_s3_input: 'outputs.ModelQualityJobDefinitionMonitoringGroundTruthS3Input',
                 batch_transform_input: Optional['outputs.ModelQualityJobDefinitionBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.ModelQualityJobDefinitionEndpointInput'] = None):
        """
        The inputs for a monitoring job.
        """
        pulumi.set(__self__, "ground_truth_s3_input", ground_truth_s3_input)
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="groundTruthS3Input")
    def ground_truth_s3_input(self) -> 'outputs.ModelQualityJobDefinitionMonitoringGroundTruthS3Input':
        return pulumi.get(self, "ground_truth_s3_input")

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.ModelQualityJobDefinitionBatchTransformInput']:
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.ModelQualityJobDefinitionEndpointInput']:
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class ModelQualityJobDefinitionMonitoringGroundTruthS3Input(dict):
    """
    Ground truth input provided in S3 
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionMonitoringGroundTruthS3Input. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionMonitoringGroundTruthS3Input.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionMonitoringGroundTruthS3Input.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: str):
        """
        Ground truth input provided in S3 
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class ModelQualityJobDefinitionMonitoringOutput(dict):
    """
    The output object for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionMonitoringOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionMonitoringOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.ModelQualityJobDefinitionS3Output'):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.ModelQualityJobDefinitionS3Output':
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class ModelQualityJobDefinitionMonitoringOutputConfig(dict):
    """
    The output configuration for monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionMonitoringOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionMonitoringOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: Sequence['outputs.ModelQualityJobDefinitionMonitoringOutput'],
                 kms_key_id: Optional[str] = None):
        """
        The output configuration for monitoring jobs.
        :param Sequence['ModelQualityJobDefinitionMonitoringOutput'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> Sequence['outputs.ModelQualityJobDefinitionMonitoringOutput']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class ModelQualityJobDefinitionMonitoringResources(dict):
    """
    Identifies the resources to deploy for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionMonitoringResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionMonitoringResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionMonitoringResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.ModelQualityJobDefinitionClusterConfig'):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.ModelQualityJobDefinitionClusterConfig':
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class ModelQualityJobDefinitionNetworkConfig(dict):
    """
    Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.ModelQualityJobDefinitionVpcConfig'] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.ModelQualityJobDefinitionVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class ModelQualityJobDefinitionS3Output(dict):
    """
    Information about where and how to store the results of a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_path: str,
                 s3_uri: str,
                 s3_upload_mode: Optional['ModelQualityJobDefinitionS3OutputS3UploadMode'] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param str local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param 'ModelQualityJobDefinitionS3OutputS3UploadMode' s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional['ModelQualityJobDefinitionS3OutputS3UploadMode']:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class ModelQualityJobDefinitionStoppingCondition(dict):
    """
    Specifies a time limit for how long the monitoring job is allowed to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: int):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> int:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class ModelQualityJobDefinitionTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelQualityJobDefinitionVpcConfig(dict):
    """
    Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelQualityJobDefinitionVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelQualityJobDefinitionVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelQualityJobDefinitionVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class ModelRepositoryAuthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryCredentialsProviderArn":
            suggest = "repository_credentials_provider_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelRepositoryAuthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelRepositoryAuthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelRepositoryAuthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_credentials_provider_arn: str):
        pulumi.set(__self__, "repository_credentials_provider_arn", repository_credentials_provider_arn)

    @property
    @pulumi.getter(name="repositoryCredentialsProviderArn")
    def repository_credentials_provider_arn(self) -> str:
        return pulumi.get(self, "repository_credentials_provider_arn")


@pulumi.output_type
class ModelTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class MonitoringScheduleBaselineConfig(dict):
    """
    Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "constraintsResource":
            suggest = "constraints_resource"
        elif key == "statisticsResource":
            suggest = "statistics_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleBaselineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleBaselineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleBaselineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 constraints_resource: Optional['outputs.MonitoringScheduleConstraintsResource'] = None,
                 statistics_resource: Optional['outputs.MonitoringScheduleStatisticsResource'] = None):
        """
        Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        """
        if constraints_resource is not None:
            pulumi.set(__self__, "constraints_resource", constraints_resource)
        if statistics_resource is not None:
            pulumi.set(__self__, "statistics_resource", statistics_resource)

    @property
    @pulumi.getter(name="constraintsResource")
    def constraints_resource(self) -> Optional['outputs.MonitoringScheduleConstraintsResource']:
        return pulumi.get(self, "constraints_resource")

    @property
    @pulumi.getter(name="statisticsResource")
    def statistics_resource(self) -> Optional['outputs.MonitoringScheduleStatisticsResource']:
        return pulumi.get(self, "statistics_resource")


@pulumi.output_type
class MonitoringScheduleBatchTransformInput(dict):
    """
    The batch transform input for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCapturedDestinationS3Uri":
            suggest = "data_captured_destination_s3_uri"
        elif key == "datasetFormat":
            suggest = "dataset_format"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "excludeFeaturesAttribute":
            suggest = "exclude_features_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleBatchTransformInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleBatchTransformInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleBatchTransformInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_captured_destination_s3_uri: str,
                 dataset_format: 'outputs.MonitoringScheduleDatasetFormat',
                 local_path: str,
                 exclude_features_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['MonitoringScheduleBatchTransformInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['MonitoringScheduleBatchTransformInputS3InputMode'] = None):
        """
        The batch transform input for a monitoring job.
        :param str data_captured_destination_s3_uri: A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str exclude_features_attribute: Indexes or names of the features to be excluded from analysis
        :param 'MonitoringScheduleBatchTransformInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'MonitoringScheduleBatchTransformInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "data_captured_destination_s3_uri", data_captured_destination_s3_uri)
        pulumi.set(__self__, "dataset_format", dataset_format)
        pulumi.set(__self__, "local_path", local_path)
        if exclude_features_attribute is not None:
            pulumi.set(__self__, "exclude_features_attribute", exclude_features_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="dataCapturedDestinationS3Uri")
    def data_captured_destination_s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
        """
        return pulumi.get(self, "data_captured_destination_s3_uri")

    @property
    @pulumi.getter(name="datasetFormat")
    def dataset_format(self) -> 'outputs.MonitoringScheduleDatasetFormat':
        return pulumi.get(self, "dataset_format")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="excludeFeaturesAttribute")
    def exclude_features_attribute(self) -> Optional[str]:
        """
        Indexes or names of the features to be excluded from analysis
        """
        return pulumi.get(self, "exclude_features_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['MonitoringScheduleBatchTransformInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['MonitoringScheduleBatchTransformInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class MonitoringScheduleClusterConfig(dict):
    """
    Configuration for the cluster used to run model monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "volumeSizeInGb":
            suggest = "volume_size_in_gb"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 instance_type: str,
                 volume_size_in_gb: int,
                 volume_kms_key_id: Optional[str] = None):
        """
        Configuration for the cluster used to run model monitoring jobs.
        :param int instance_count: The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        :param str instance_type: The ML compute instance type for the processing job.
        :param int volume_size_in_gb: The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        :param str volume_kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "volume_size_in_gb", volume_size_in_gb)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The ML compute instance type for the processing job.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="volumeSizeInGb")
    def volume_size_in_gb(self) -> int:
        """
        The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        """
        return pulumi.get(self, "volume_size_in_gb")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        """
        return pulumi.get(self, "volume_kms_key_id")


@pulumi.output_type
class MonitoringScheduleConfig(dict):
    """
    The configuration object that specifies the monitoring schedule and defines the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringJobDefinition":
            suggest = "monitoring_job_definition"
        elif key == "monitoringJobDefinitionName":
            suggest = "monitoring_job_definition_name"
        elif key == "monitoringType":
            suggest = "monitoring_type"
        elif key == "scheduleConfig":
            suggest = "schedule_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_job_definition: Optional['outputs.MonitoringScheduleMonitoringJobDefinition'] = None,
                 monitoring_job_definition_name: Optional[str] = None,
                 monitoring_type: Optional['MonitoringScheduleMonitoringType'] = None,
                 schedule_config: Optional['outputs.MonitoringScheduleScheduleConfig'] = None):
        """
        The configuration object that specifies the monitoring schedule and defines the monitoring job.
        :param str monitoring_job_definition_name: Name of the job definition
        """
        if monitoring_job_definition is not None:
            pulumi.set(__self__, "monitoring_job_definition", monitoring_job_definition)
        if monitoring_job_definition_name is not None:
            pulumi.set(__self__, "monitoring_job_definition_name", monitoring_job_definition_name)
        if monitoring_type is not None:
            pulumi.set(__self__, "monitoring_type", monitoring_type)
        if schedule_config is not None:
            pulumi.set(__self__, "schedule_config", schedule_config)

    @property
    @pulumi.getter(name="monitoringJobDefinition")
    def monitoring_job_definition(self) -> Optional['outputs.MonitoringScheduleMonitoringJobDefinition']:
        return pulumi.get(self, "monitoring_job_definition")

    @property
    @pulumi.getter(name="monitoringJobDefinitionName")
    def monitoring_job_definition_name(self) -> Optional[str]:
        """
        Name of the job definition
        """
        return pulumi.get(self, "monitoring_job_definition_name")

    @property
    @pulumi.getter(name="monitoringType")
    def monitoring_type(self) -> Optional['MonitoringScheduleMonitoringType']:
        return pulumi.get(self, "monitoring_type")

    @property
    @pulumi.getter(name="scheduleConfig")
    def schedule_config(self) -> Optional['outputs.MonitoringScheduleScheduleConfig']:
        return pulumi.get(self, "schedule_config")


@pulumi.output_type
class MonitoringScheduleConstraintsResource(dict):
    """
    The baseline constraints resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleConstraintsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleConstraintsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleConstraintsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline constraints resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class MonitoringScheduleCsv(dict):
    """
    The CSV format
    """
    def __init__(__self__, *,
                 header: Optional[bool] = None):
        """
        The CSV format
        :param bool header: A boolean flag indicating if given CSV has header
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[bool]:
        """
        A boolean flag indicating if given CSV has header
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class MonitoringScheduleDatasetFormat(dict):
    """
    The dataset format of the data to monitor
    """
    def __init__(__self__, *,
                 csv: Optional['outputs.MonitoringScheduleCsv'] = None,
                 json: Optional['outputs.MonitoringScheduleJson'] = None,
                 parquet: Optional[bool] = None):
        """
        The dataset format of the data to monitor
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if parquet is not None:
            pulumi.set(__self__, "parquet", parquet)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.MonitoringScheduleCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.MonitoringScheduleJson']:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def parquet(self) -> Optional[bool]:
        return pulumi.get(self, "parquet")


@pulumi.output_type
class MonitoringScheduleEndpointInput(dict):
    """
    The endpoint for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointName":
            suggest = "endpoint_name"
        elif key == "localPath":
            suggest = "local_path"
        elif key == "excludeFeaturesAttribute":
            suggest = "exclude_features_attribute"
        elif key == "s3DataDistributionType":
            suggest = "s3_data_distribution_type"
        elif key == "s3InputMode":
            suggest = "s3_input_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleEndpointInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleEndpointInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleEndpointInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_name: str,
                 local_path: str,
                 exclude_features_attribute: Optional[str] = None,
                 s3_data_distribution_type: Optional['MonitoringScheduleEndpointInputS3DataDistributionType'] = None,
                 s3_input_mode: Optional['MonitoringScheduleEndpointInputS3InputMode'] = None):
        """
        The endpoint for a monitoring job.
        :param str local_path: Path to the filesystem where the endpoint data is available to the container.
        :param str exclude_features_attribute: Indexes or names of the features to be excluded from analysis
        :param 'MonitoringScheduleEndpointInputS3DataDistributionType' s3_data_distribution_type: Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        :param 'MonitoringScheduleEndpointInputS3InputMode' s3_input_mode: Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        pulumi.set(__self__, "local_path", local_path)
        if exclude_features_attribute is not None:
            pulumi.set(__self__, "exclude_features_attribute", exclude_features_attribute)
        if s3_data_distribution_type is not None:
            pulumi.set(__self__, "s3_data_distribution_type", s3_data_distribution_type)
        if s3_input_mode is not None:
            pulumi.set(__self__, "s3_input_mode", s3_input_mode)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        Path to the filesystem where the endpoint data is available to the container.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="excludeFeaturesAttribute")
    def exclude_features_attribute(self) -> Optional[str]:
        """
        Indexes or names of the features to be excluded from analysis
        """
        return pulumi.get(self, "exclude_features_attribute")

    @property
    @pulumi.getter(name="s3DataDistributionType")
    def s3_data_distribution_type(self) -> Optional['MonitoringScheduleEndpointInputS3DataDistributionType']:
        """
        Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
        """
        return pulumi.get(self, "s3_data_distribution_type")

    @property
    @pulumi.getter(name="s3InputMode")
    def s3_input_mode(self) -> Optional['MonitoringScheduleEndpointInputS3InputMode']:
        """
        Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        """
        return pulumi.get(self, "s3_input_mode")


@pulumi.output_type
class MonitoringScheduleJson(dict):
    """
    The Json format
    """
    def __init__(__self__, *,
                 line: Optional[bool] = None):
        """
        The Json format
        :param bool line: A boolean flag indicating if it is JSON line format
        """
        if line is not None:
            pulumi.set(__self__, "line", line)

    @property
    @pulumi.getter
    def line(self) -> Optional[bool]:
        """
        A boolean flag indicating if it is JSON line format
        """
        return pulumi.get(self, "line")


@pulumi.output_type
class MonitoringScheduleMonitoringAppSpecification(dict):
    """
    Container image configuration object for the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageUri":
            suggest = "image_uri"
        elif key == "containerArguments":
            suggest = "container_arguments"
        elif key == "containerEntrypoint":
            suggest = "container_entrypoint"
        elif key == "postAnalyticsProcessorSourceUri":
            suggest = "post_analytics_processor_source_uri"
        elif key == "recordPreprocessorSourceUri":
            suggest = "record_preprocessor_source_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringAppSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringAppSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringAppSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_uri: str,
                 container_arguments: Optional[Sequence[str]] = None,
                 container_entrypoint: Optional[Sequence[str]] = None,
                 post_analytics_processor_source_uri: Optional[str] = None,
                 record_preprocessor_source_uri: Optional[str] = None):
        """
        Container image configuration object for the monitoring job.
        :param str image_uri: The container image to be run by the monitoring job.
        :param Sequence[str] container_arguments: An array of arguments for the container used to run the monitoring job.
        :param Sequence[str] container_entrypoint: Specifies the entrypoint for a container used to run the monitoring job.
        :param str post_analytics_processor_source_uri: An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        :param str record_preprocessor_source_uri: An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if container_arguments is not None:
            pulumi.set(__self__, "container_arguments", container_arguments)
        if container_entrypoint is not None:
            pulumi.set(__self__, "container_entrypoint", container_entrypoint)
        if post_analytics_processor_source_uri is not None:
            pulumi.set(__self__, "post_analytics_processor_source_uri", post_analytics_processor_source_uri)
        if record_preprocessor_source_uri is not None:
            pulumi.set(__self__, "record_preprocessor_source_uri", record_preprocessor_source_uri)

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The container image to be run by the monitoring job.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="containerArguments")
    def container_arguments(self) -> Optional[Sequence[str]]:
        """
        An array of arguments for the container used to run the monitoring job.
        """
        return pulumi.get(self, "container_arguments")

    @property
    @pulumi.getter(name="containerEntrypoint")
    def container_entrypoint(self) -> Optional[Sequence[str]]:
        """
        Specifies the entrypoint for a container used to run the monitoring job.
        """
        return pulumi.get(self, "container_entrypoint")

    @property
    @pulumi.getter(name="postAnalyticsProcessorSourceUri")
    def post_analytics_processor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        """
        return pulumi.get(self, "post_analytics_processor_source_uri")

    @property
    @pulumi.getter(name="recordPreprocessorSourceUri")
    def record_preprocessor_source_uri(self) -> Optional[str]:
        """
        An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
        """
        return pulumi.get(self, "record_preprocessor_source_uri")


@pulumi.output_type
class MonitoringScheduleMonitoringExecutionSummary(dict):
    """
    Summary of information about monitoring job
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "lastModifiedTime":
            suggest = "last_modified_time"
        elif key == "monitoringExecutionStatus":
            suggest = "monitoring_execution_status"
        elif key == "monitoringScheduleName":
            suggest = "monitoring_schedule_name"
        elif key == "scheduledTime":
            suggest = "scheduled_time"
        elif key == "endpointName":
            suggest = "endpoint_name"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "processingJobArn":
            suggest = "processing_job_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringExecutionSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringExecutionSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringExecutionSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: str,
                 last_modified_time: str,
                 monitoring_execution_status: 'MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus',
                 monitoring_schedule_name: str,
                 scheduled_time: str,
                 endpoint_name: Optional[str] = None,
                 failure_reason: Optional[str] = None,
                 processing_job_arn: Optional[str] = None):
        """
        Summary of information about monitoring job
        :param str creation_time: The time at which the monitoring job was created.
        :param str last_modified_time: A timestamp that indicates the last time the monitoring job was modified.
        :param 'MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus' monitoring_execution_status: The status of the monitoring job.
        :param str scheduled_time: The time the monitoring job was scheduled.
        :param str failure_reason: Contains the reason a monitoring job failed, if it failed.
        :param str processing_job_arn: The Amazon Resource Name (ARN) of the monitoring job.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "monitoring_execution_status", monitoring_execution_status)
        pulumi.set(__self__, "monitoring_schedule_name", monitoring_schedule_name)
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if processing_job_arn is not None:
            pulumi.set(__self__, "processing_job_arn", processing_job_arn)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time at which the monitoring job was created.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> str:
        """
        A timestamp that indicates the last time the monitoring job was modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="monitoringExecutionStatus")
    def monitoring_execution_status(self) -> 'MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus':
        """
        The status of the monitoring job.
        """
        return pulumi.get(self, "monitoring_execution_status")

    @property
    @pulumi.getter(name="monitoringScheduleName")
    def monitoring_schedule_name(self) -> str:
        return pulumi.get(self, "monitoring_schedule_name")

    @property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> str:
        """
        The time the monitoring job was scheduled.
        """
        return pulumi.get(self, "scheduled_time")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        Contains the reason a monitoring job failed, if it failed.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="processingJobArn")
    def processing_job_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the monitoring job.
        """
        return pulumi.get(self, "processing_job_arn")


@pulumi.output_type
class MonitoringScheduleMonitoringInput(dict):
    """
    The inputs for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchTransformInput":
            suggest = "batch_transform_input"
        elif key == "endpointInput":
            suggest = "endpoint_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_transform_input: Optional['outputs.MonitoringScheduleBatchTransformInput'] = None,
                 endpoint_input: Optional['outputs.MonitoringScheduleEndpointInput'] = None):
        """
        The inputs for a monitoring job.
        """
        if batch_transform_input is not None:
            pulumi.set(__self__, "batch_transform_input", batch_transform_input)
        if endpoint_input is not None:
            pulumi.set(__self__, "endpoint_input", endpoint_input)

    @property
    @pulumi.getter(name="batchTransformInput")
    def batch_transform_input(self) -> Optional['outputs.MonitoringScheduleBatchTransformInput']:
        return pulumi.get(self, "batch_transform_input")

    @property
    @pulumi.getter(name="endpointInput")
    def endpoint_input(self) -> Optional['outputs.MonitoringScheduleEndpointInput']:
        return pulumi.get(self, "endpoint_input")


@pulumi.output_type
class MonitoringScheduleMonitoringJobDefinition(dict):
    """
    Defines the monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringAppSpecification":
            suggest = "monitoring_app_specification"
        elif key == "monitoringInputs":
            suggest = "monitoring_inputs"
        elif key == "monitoringOutputConfig":
            suggest = "monitoring_output_config"
        elif key == "monitoringResources":
            suggest = "monitoring_resources"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "baselineConfig":
            suggest = "baseline_config"
        elif key == "networkConfig":
            suggest = "network_config"
        elif key == "stoppingCondition":
            suggest = "stopping_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringJobDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringJobDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringJobDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_app_specification: 'outputs.MonitoringScheduleMonitoringAppSpecification',
                 monitoring_inputs: Sequence['outputs.MonitoringScheduleMonitoringInput'],
                 monitoring_output_config: 'outputs.MonitoringScheduleMonitoringOutputConfig',
                 monitoring_resources: 'outputs.MonitoringScheduleMonitoringResources',
                 role_arn: str,
                 baseline_config: Optional['outputs.MonitoringScheduleBaselineConfig'] = None,
                 environment: Optional[Any] = None,
                 network_config: Optional['outputs.MonitoringScheduleNetworkConfig'] = None,
                 stopping_condition: Optional['outputs.MonitoringScheduleStoppingCondition'] = None):
        """
        Defines the monitoring job.
        :param str role_arn: The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        :param Any environment: Sets the environment variables in the Docker container
        """
        pulumi.set(__self__, "monitoring_app_specification", monitoring_app_specification)
        pulumi.set(__self__, "monitoring_inputs", monitoring_inputs)
        pulumi.set(__self__, "monitoring_output_config", monitoring_output_config)
        pulumi.set(__self__, "monitoring_resources", monitoring_resources)
        pulumi.set(__self__, "role_arn", role_arn)
        if baseline_config is not None:
            pulumi.set(__self__, "baseline_config", baseline_config)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if network_config is not None:
            pulumi.set(__self__, "network_config", network_config)
        if stopping_condition is not None:
            pulumi.set(__self__, "stopping_condition", stopping_condition)

    @property
    @pulumi.getter(name="monitoringAppSpecification")
    def monitoring_app_specification(self) -> 'outputs.MonitoringScheduleMonitoringAppSpecification':
        return pulumi.get(self, "monitoring_app_specification")

    @property
    @pulumi.getter(name="monitoringInputs")
    def monitoring_inputs(self) -> Sequence['outputs.MonitoringScheduleMonitoringInput']:
        return pulumi.get(self, "monitoring_inputs")

    @property
    @pulumi.getter(name="monitoringOutputConfig")
    def monitoring_output_config(self) -> 'outputs.MonitoringScheduleMonitoringOutputConfig':
        return pulumi.get(self, "monitoring_output_config")

    @property
    @pulumi.getter(name="monitoringResources")
    def monitoring_resources(self) -> 'outputs.MonitoringScheduleMonitoringResources':
        return pulumi.get(self, "monitoring_resources")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="baselineConfig")
    def baseline_config(self) -> Optional['outputs.MonitoringScheduleBaselineConfig']:
        return pulumi.get(self, "baseline_config")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Any]:
        """
        Sets the environment variables in the Docker container
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional['outputs.MonitoringScheduleNetworkConfig']:
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter(name="stoppingCondition")
    def stopping_condition(self) -> Optional['outputs.MonitoringScheduleStoppingCondition']:
        return pulumi.get(self, "stopping_condition")


@pulumi.output_type
class MonitoringScheduleMonitoringOutput(dict):
    """
    The output object for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Output":
            suggest = "s3_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_output: 'outputs.MonitoringScheduleS3Output'):
        """
        The output object for a monitoring job.
        """
        pulumi.set(__self__, "s3_output", s3_output)

    @property
    @pulumi.getter(name="s3Output")
    def s3_output(self) -> 'outputs.MonitoringScheduleS3Output':
        return pulumi.get(self, "s3_output")


@pulumi.output_type
class MonitoringScheduleMonitoringOutputConfig(dict):
    """
    The output configuration for monitoring jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitoringOutputs":
            suggest = "monitoring_outputs"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringOutputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringOutputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringOutputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitoring_outputs: Sequence['outputs.MonitoringScheduleMonitoringOutput'],
                 kms_key_id: Optional[str] = None):
        """
        The output configuration for monitoring jobs.
        :param Sequence['MonitoringScheduleMonitoringOutput'] monitoring_outputs: Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        :param str kms_key_id: The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        pulumi.set(__self__, "monitoring_outputs", monitoring_outputs)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="monitoringOutputs")
    def monitoring_outputs(self) -> Sequence['outputs.MonitoringScheduleMonitoringOutput']:
        """
        Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        """
        return pulumi.get(self, "monitoring_outputs")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class MonitoringScheduleMonitoringResources(dict):
    """
    Identifies the resources to deploy for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterConfig":
            suggest = "cluster_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleMonitoringResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleMonitoringResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleMonitoringResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_config: 'outputs.MonitoringScheduleClusterConfig'):
        """
        Identifies the resources to deploy for a monitoring job.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.MonitoringScheduleClusterConfig':
        return pulumi.get(self, "cluster_config")


@pulumi.output_type
class MonitoringScheduleNetworkConfig(dict):
    """
    Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInterContainerTrafficEncryption":
            suggest = "enable_inter_container_traffic_encryption"
        elif key == "enableNetworkIsolation":
            suggest = "enable_network_isolation"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_inter_container_traffic_encryption: Optional[bool] = None,
                 enable_network_isolation: Optional[bool] = None,
                 vpc_config: Optional['outputs.MonitoringScheduleVpcConfig'] = None):
        """
        Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        :param bool enable_inter_container_traffic_encryption: Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        :param bool enable_network_isolation: Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        if enable_inter_container_traffic_encryption is not None:
            pulumi.set(__self__, "enable_inter_container_traffic_encryption", enable_inter_container_traffic_encryption)
        if enable_network_isolation is not None:
            pulumi.set(__self__, "enable_network_isolation", enable_network_isolation)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="enableInterContainerTrafficEncryption")
    def enable_inter_container_traffic_encryption(self) -> Optional[bool]:
        """
        Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        """
        return pulumi.get(self, "enable_inter_container_traffic_encryption")

    @property
    @pulumi.getter(name="enableNetworkIsolation")
    def enable_network_isolation(self) -> Optional[bool]:
        """
        Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        """
        return pulumi.get(self, "enable_network_isolation")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.MonitoringScheduleVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class MonitoringScheduleS3Output(dict):
    """
    Information about where and how to store the results of a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"
        elif key == "s3Uri":
            suggest = "s3_uri"
        elif key == "s3UploadMode":
            suggest = "s3_upload_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleS3Output. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleS3Output.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleS3Output.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_path: str,
                 s3_uri: str,
                 s3_upload_mode: Optional['MonitoringScheduleS3OutputS3UploadMode'] = None):
        """
        Information about where and how to store the results of a monitoring job.
        :param str local_path: The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        :param str s3_uri: A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        :param 'MonitoringScheduleS3OutputS3UploadMode' s3_upload_mode: Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        pulumi.set(__self__, "local_path", local_path)
        pulumi.set(__self__, "s3_uri", s3_uri)
        if s3_upload_mode is not None:
            pulumi.set(__self__, "s3_upload_mode", s3_upload_mode)

    @property
    @pulumi.getter(name="localPath")
    def local_path(self) -> str:
        """
        The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        """
        return pulumi.get(self, "local_path")

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> str:
        """
        A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        """
        return pulumi.get(self, "s3_uri")

    @property
    @pulumi.getter(name="s3UploadMode")
    def s3_upload_mode(self) -> Optional['MonitoringScheduleS3OutputS3UploadMode']:
        """
        Whether to upload the results of the monitoring job continuously or after the job completes.
        """
        return pulumi.get(self, "s3_upload_mode")


@pulumi.output_type
class MonitoringScheduleScheduleConfig(dict):
    """
    Configuration details about the monitoring schedule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleExpression":
            suggest = "schedule_expression"
        elif key == "dataAnalysisEndTime":
            suggest = "data_analysis_end_time"
        elif key == "dataAnalysisStartTime":
            suggest = "data_analysis_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleScheduleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleScheduleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleScheduleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_expression: str,
                 data_analysis_end_time: Optional[str] = None,
                 data_analysis_start_time: Optional[str] = None):
        """
        Configuration details about the monitoring schedule.
        :param str schedule_expression: A cron expression or 'NOW' that describes details about the monitoring schedule.
        :param str data_analysis_end_time: Data Analysis end time, e.g. PT0H
        :param str data_analysis_start_time: Data Analysis start time, e.g. -PT1H
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)
        if data_analysis_end_time is not None:
            pulumi.set(__self__, "data_analysis_end_time", data_analysis_end_time)
        if data_analysis_start_time is not None:
            pulumi.set(__self__, "data_analysis_start_time", data_analysis_start_time)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> str:
        """
        A cron expression or 'NOW' that describes details about the monitoring schedule.
        """
        return pulumi.get(self, "schedule_expression")

    @property
    @pulumi.getter(name="dataAnalysisEndTime")
    def data_analysis_end_time(self) -> Optional[str]:
        """
        Data Analysis end time, e.g. PT0H
        """
        return pulumi.get(self, "data_analysis_end_time")

    @property
    @pulumi.getter(name="dataAnalysisStartTime")
    def data_analysis_start_time(self) -> Optional[str]:
        """
        Data Analysis start time, e.g. -PT1H
        """
        return pulumi.get(self, "data_analysis_start_time")


@pulumi.output_type
class MonitoringScheduleStatisticsResource(dict):
    """
    The baseline statistics resource for a monitoring job.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Uri":
            suggest = "s3_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleStatisticsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleStatisticsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleStatisticsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_uri: Optional[str] = None):
        """
        The baseline statistics resource for a monitoring job.
        :param str s3_uri: The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        if s3_uri is not None:
            pulumi.set(__self__, "s3_uri", s3_uri)

    @property
    @pulumi.getter(name="s3Uri")
    def s3_uri(self) -> Optional[str]:
        """
        The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        """
        return pulumi.get(self, "s3_uri")


@pulumi.output_type
class MonitoringScheduleStoppingCondition(dict):
    """
    Specifies a time limit for how long the monitoring job is allowed to run.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxRuntimeInSeconds":
            suggest = "max_runtime_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleStoppingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleStoppingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleStoppingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_runtime_in_seconds: int):
        """
        Specifies a time limit for how long the monitoring job is allowed to run.
        :param int max_runtime_in_seconds: The maximum runtime allowed in seconds.
        """
        pulumi.set(__self__, "max_runtime_in_seconds", max_runtime_in_seconds)

    @property
    @pulumi.getter(name="maxRuntimeInSeconds")
    def max_runtime_in_seconds(self) -> int:
        """
        The maximum runtime allowed in seconds.
        """
        return pulumi.get(self, "max_runtime_in_seconds")


@pulumi.output_type
class MonitoringScheduleTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MonitoringScheduleVpcConfig(dict):
    """
    Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringScheduleVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringScheduleVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringScheduleVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        """
        Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
        :param Sequence[str] security_group_ids: The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        :param Sequence[str] subnets: The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class NotebookInstanceInstanceMetadataServiceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumInstanceMetadataServiceVersion":
            suggest = "minimum_instance_metadata_service_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookInstanceInstanceMetadataServiceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookInstanceInstanceMetadataServiceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookInstanceInstanceMetadataServiceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_instance_metadata_service_version: str):
        pulumi.set(__self__, "minimum_instance_metadata_service_version", minimum_instance_metadata_service_version)

    @property
    @pulumi.getter(name="minimumInstanceMetadataServiceVersion")
    def minimum_instance_metadata_service_version(self) -> str:
        return pulumi.get(self, "minimum_instance_metadata_service_version")


@pulumi.output_type
class NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")


@pulumi.output_type
class NotebookInstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class OfflineStoreConfigProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3StorageConfig":
            suggest = "s3_storage_config"
        elif key == "dataCatalogConfig":
            suggest = "data_catalog_config"
        elif key == "disableGlueTableCreation":
            suggest = "disable_glue_table_creation"
        elif key == "tableFormat":
            suggest = "table_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OfflineStoreConfigProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OfflineStoreConfigProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OfflineStoreConfigProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_storage_config: 'outputs.FeatureGroupS3StorageConfig',
                 data_catalog_config: Optional['outputs.FeatureGroupDataCatalogConfig'] = None,
                 disable_glue_table_creation: Optional[bool] = None,
                 table_format: Optional['FeatureGroupTableFormat'] = None):
        pulumi.set(__self__, "s3_storage_config", s3_storage_config)
        if data_catalog_config is not None:
            pulumi.set(__self__, "data_catalog_config", data_catalog_config)
        if disable_glue_table_creation is not None:
            pulumi.set(__self__, "disable_glue_table_creation", disable_glue_table_creation)
        if table_format is not None:
            pulumi.set(__self__, "table_format", table_format)

    @property
    @pulumi.getter(name="s3StorageConfig")
    def s3_storage_config(self) -> 'outputs.FeatureGroupS3StorageConfig':
        return pulumi.get(self, "s3_storage_config")

    @property
    @pulumi.getter(name="dataCatalogConfig")
    def data_catalog_config(self) -> Optional['outputs.FeatureGroupDataCatalogConfig']:
        return pulumi.get(self, "data_catalog_config")

    @property
    @pulumi.getter(name="disableGlueTableCreation")
    def disable_glue_table_creation(self) -> Optional[bool]:
        return pulumi.get(self, "disable_glue_table_creation")

    @property
    @pulumi.getter(name="tableFormat")
    def table_format(self) -> Optional['FeatureGroupTableFormat']:
        return pulumi.get(self, "table_format")


@pulumi.output_type
class OnlineStoreConfigProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableOnlineStore":
            suggest = "enable_online_store"
        elif key == "securityConfig":
            suggest = "security_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OnlineStoreConfigProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OnlineStoreConfigProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OnlineStoreConfigProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_online_store: Optional[bool] = None,
                 security_config: Optional['outputs.FeatureGroupOnlineStoreSecurityConfig'] = None):
        if enable_online_store is not None:
            pulumi.set(__self__, "enable_online_store", enable_online_store)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)

    @property
    @pulumi.getter(name="enableOnlineStore")
    def enable_online_store(self) -> Optional[bool]:
        return pulumi.get(self, "enable_online_store")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional['outputs.FeatureGroupOnlineStoreSecurityConfig']:
        return pulumi.get(self, "security_config")


@pulumi.output_type
class ParallelismConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxParallelExecutionSteps":
            suggest = "max_parallel_execution_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParallelismConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParallelismConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParallelismConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_parallel_execution_steps: int):
        """
        :param int max_parallel_execution_steps: Maximum parallel execution steps
        """
        pulumi.set(__self__, "max_parallel_execution_steps", max_parallel_execution_steps)

    @property
    @pulumi.getter(name="maxParallelExecutionSteps")
    def max_parallel_execution_steps(self) -> int:
        """
        Maximum parallel execution steps
        """
        return pulumi.get(self, "max_parallel_execution_steps")


@pulumi.output_type
class PipelineDefinition0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pipelineDefinitionBody":
            suggest = "pipeline_definition_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineDefinition0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineDefinition0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineDefinition0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pipeline_definition_body: str):
        """
        :param str pipeline_definition_body: A specification that defines the pipeline in JSON format.
        """
        pulumi.set(__self__, "pipeline_definition_body", pipeline_definition_body)

    @property
    @pulumi.getter(name="pipelineDefinitionBody")
    def pipeline_definition_body(self) -> str:
        """
        A specification that defines the pipeline in JSON format.
        """
        return pulumi.get(self, "pipeline_definition_body")


@pulumi.output_type
class PipelineDefinition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pipelineDefinitionS3Location":
            suggest = "pipeline_definition_s3_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineDefinition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineDefinition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineDefinition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pipeline_definition_s3_location: 'outputs.PipelineS3Location'):
        pulumi.set(__self__, "pipeline_definition_s3_location", pipeline_definition_s3_location)

    @property
    @pulumi.getter(name="pipelineDefinitionS3Location")
    def pipeline_definition_s3_location(self) -> 'outputs.PipelineS3Location':
        return pulumi.get(self, "pipeline_definition_s3_location")


@pulumi.output_type
class PipelineS3Location(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eTag":
            suggest = "e_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineS3Location. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineS3Location.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineS3Location.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 key: str,
                 e_tag: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str bucket: The name of the S3 bucket where the PipelineDefinition file is stored.
        :param str key: The file name of the PipelineDefinition file (Amazon S3 object name).
        :param str e_tag: The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
        :param str version: For versioning-enabled buckets, a specific version of the PipelineDefinition file.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)
        if e_tag is not None:
            pulumi.set(__self__, "e_tag", e_tag)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the S3 bucket where the PipelineDefinition file is stored.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The file name of the PipelineDefinition file (Amazon S3 object name).
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> Optional[str]:
        """
        The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        For versioning-enabled buckets, a specific version of the PipelineDefinition file.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class PipelineTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectProvisioningParameter(dict):
    """
    Information about a parameter used to provision a product.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        Information about a parameter used to provision a product.
        :param str key: The parameter key.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The parameter key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProjectTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceCatalogProvisionedProductDetailsProperties(dict):
    """
    Provisioned ServiceCatalog  Details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisionedProductId":
            suggest = "provisioned_product_id"
        elif key == "provisionedProductStatusMessage":
            suggest = "provisioned_product_status_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceCatalogProvisionedProductDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceCatalogProvisionedProductDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceCatalogProvisionedProductDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioned_product_id: Optional[str] = None,
                 provisioned_product_status_message: Optional[str] = None):
        """
        Provisioned ServiceCatalog  Details
        """
        if provisioned_product_id is not None:
            pulumi.set(__self__, "provisioned_product_id", provisioned_product_id)
        if provisioned_product_status_message is not None:
            pulumi.set(__self__, "provisioned_product_status_message", provisioned_product_status_message)

    @property
    @pulumi.getter(name="provisionedProductId")
    def provisioned_product_id(self) -> Optional[str]:
        return pulumi.get(self, "provisioned_product_id")

    @property
    @pulumi.getter(name="provisionedProductStatusMessage")
    def provisioned_product_status_message(self) -> Optional[str]:
        return pulumi.get(self, "provisioned_product_status_message")


@pulumi.output_type
class ServiceCatalogProvisioningDetailsProperties(dict):
    """
    Input ServiceCatalog Provisioning Details
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productId":
            suggest = "product_id"
        elif key == "pathId":
            suggest = "path_id"
        elif key == "provisioningArtifactId":
            suggest = "provisioning_artifact_id"
        elif key == "provisioningParameters":
            suggest = "provisioning_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceCatalogProvisioningDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceCatalogProvisioningDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceCatalogProvisioningDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 product_id: str,
                 path_id: Optional[str] = None,
                 provisioning_artifact_id: Optional[str] = None,
                 provisioning_parameters: Optional[Sequence['outputs.ProjectProvisioningParameter']] = None):
        """
        Input ServiceCatalog Provisioning Details
        :param Sequence['ProjectProvisioningParameter'] provisioning_parameters: Parameters specified by the administrator that are required for provisioning the product.
        """
        pulumi.set(__self__, "product_id", product_id)
        if path_id is not None:
            pulumi.set(__self__, "path_id", path_id)
        if provisioning_artifact_id is not None:
            pulumi.set(__self__, "provisioning_artifact_id", provisioning_artifact_id)
        if provisioning_parameters is not None:
            pulumi.set(__self__, "provisioning_parameters", provisioning_parameters)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="pathId")
    def path_id(self) -> Optional[str]:
        return pulumi.get(self, "path_id")

    @property
    @pulumi.getter(name="provisioningArtifactId")
    def provisioning_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "provisioning_artifact_id")

    @property
    @pulumi.getter(name="provisioningParameters")
    def provisioning_parameters(self) -> Optional[Sequence['outputs.ProjectProvisioningParameter']]:
        """
        Parameters specified by the administrator that are required for provisioning the product.
        """
        return pulumi.get(self, "provisioning_parameters")


@pulumi.output_type
class SpaceCustomImage(dict):
    """
    A custom SageMaker image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        A custom SageMaker image.
        :param str app_image_config_name: The Name of the AppImageConfig.
        :param str image_name: The name of the CustomImage. Must be unique to your account.
        :param int image_version_number: The version number of the CustomImage.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The Name of the AppImageConfig.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the CustomImage. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the CustomImage.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class SpaceJupyterServerAppSettings(dict):
    """
    The JupyterServer app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: Optional['outputs.SpaceResourceSpec'] = None):
        """
        The JupyterServer app settings.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.SpaceResourceSpec']:
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class SpaceKernelGatewayAppSettings(dict):
    """
    The kernel gateway app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.SpaceCustomImage']] = None,
                 default_resource_spec: Optional['outputs.SpaceResourceSpec'] = None):
        """
        The kernel gateway app settings.
        :param Sequence['SpaceCustomImage'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        :param 'SpaceResourceSpec' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.SpaceCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.SpaceResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class SpaceResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "sageMakerImageArn":
            suggest = "sage_maker_image_arn"
        elif key == "sageMakerImageVersionArn":
            suggest = "sage_maker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional['SpaceResourceSpecInstanceType'] = None,
                 sage_maker_image_arn: Optional[str] = None,
                 sage_maker_image_version_arn: Optional[str] = None):
        """
        :param 'SpaceResourceSpecInstanceType' instance_type: The instance type that the image version runs on.
        :param str sage_maker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sage_maker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['SpaceResourceSpecInstanceType']:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")


@pulumi.output_type
class SpaceSettings(dict):
    """
    A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the CreateSpace API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SpaceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SpaceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SpaceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jupyter_server_app_settings: Optional['outputs.SpaceJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.SpaceKernelGatewayAppSettings'] = None):
        """
        A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the CreateSpace API is called.
        :param 'SpaceJupyterServerAppSettings' jupyter_server_app_settings: The Jupyter server's app settings.
        :param 'SpaceKernelGatewayAppSettings' kernel_gateway_app_settings: The kernel gateway app settings.
        """
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.SpaceJupyterServerAppSettings']:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.SpaceKernelGatewayAppSettings']:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")


@pulumi.output_type
class SpaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserProfileCustomImage(dict):
    """
    A custom SageMaker image.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appImageConfigName":
            suggest = "app_image_config_name"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "imageVersionNumber":
            suggest = "image_version_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileCustomImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileCustomImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileCustomImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_image_config_name: str,
                 image_name: str,
                 image_version_number: Optional[int] = None):
        """
        A custom SageMaker image.
        :param str app_image_config_name: The Name of the AppImageConfig.
        :param str image_name: The name of the CustomImage. Must be unique to your account.
        :param int image_version_number: The version number of the CustomImage.
        """
        pulumi.set(__self__, "app_image_config_name", app_image_config_name)
        pulumi.set(__self__, "image_name", image_name)
        if image_version_number is not None:
            pulumi.set(__self__, "image_version_number", image_version_number)

    @property
    @pulumi.getter(name="appImageConfigName")
    def app_image_config_name(self) -> str:
        """
        The Name of the AppImageConfig.
        """
        return pulumi.get(self, "app_image_config_name")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of the CustomImage. Must be unique to your account.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageVersionNumber")
    def image_version_number(self) -> Optional[int]:
        """
        The version number of the CustomImage.
        """
        return pulumi.get(self, "image_version_number")


@pulumi.output_type
class UserProfileJupyterServerAppSettings(dict):
    """
    The JupyterServer app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileJupyterServerAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileJupyterServerAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileJupyterServerAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_resource_spec: Optional['outputs.UserProfileResourceSpec'] = None):
        """
        The JupyterServer app settings.
        """
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.UserProfileResourceSpec']:
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class UserProfileKernelGatewayAppSettings(dict):
    """
    The kernel gateway app settings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customImages":
            suggest = "custom_images"
        elif key == "defaultResourceSpec":
            suggest = "default_resource_spec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileKernelGatewayAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileKernelGatewayAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileKernelGatewayAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_images: Optional[Sequence['outputs.UserProfileCustomImage']] = None,
                 default_resource_spec: Optional['outputs.UserProfileResourceSpec'] = None):
        """
        The kernel gateway app settings.
        :param Sequence['UserProfileCustomImage'] custom_images: A list of custom SageMaker images that are configured to run as a KernelGateway app.
        :param 'UserProfileResourceSpec' default_resource_spec: The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        if custom_images is not None:
            pulumi.set(__self__, "custom_images", custom_images)
        if default_resource_spec is not None:
            pulumi.set(__self__, "default_resource_spec", default_resource_spec)

    @property
    @pulumi.getter(name="customImages")
    def custom_images(self) -> Optional[Sequence['outputs.UserProfileCustomImage']]:
        """
        A list of custom SageMaker images that are configured to run as a KernelGateway app.
        """
        return pulumi.get(self, "custom_images")

    @property
    @pulumi.getter(name="defaultResourceSpec")
    def default_resource_spec(self) -> Optional['outputs.UserProfileResourceSpec']:
        """
        The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
        """
        return pulumi.get(self, "default_resource_spec")


@pulumi.output_type
class UserProfileRStudioServerProAppSettings(dict):
    """
    A collection of settings that configure user interaction with the RStudioServerPro app.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessStatus":
            suggest = "access_status"
        elif key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileRStudioServerProAppSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileRStudioServerProAppSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileRStudioServerProAppSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_status: Optional['UserProfileRStudioServerProAppSettingsAccessStatus'] = None,
                 user_group: Optional['UserProfileRStudioServerProAppSettingsUserGroup'] = None):
        """
        A collection of settings that configure user interaction with the RStudioServerPro app.
        :param 'UserProfileRStudioServerProAppSettingsAccessStatus' access_status: Indicates whether the current user has access to the RStudioServerPro app.
        :param 'UserProfileRStudioServerProAppSettingsUserGroup' user_group: The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        if access_status is not None:
            pulumi.set(__self__, "access_status", access_status)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="accessStatus")
    def access_status(self) -> Optional['UserProfileRStudioServerProAppSettingsAccessStatus']:
        """
        Indicates whether the current user has access to the RStudioServerPro app.
        """
        return pulumi.get(self, "access_status")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional['UserProfileRStudioServerProAppSettingsUserGroup']:
        """
        The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
        """
        return pulumi.get(self, "user_group")


@pulumi.output_type
class UserProfileResourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "sageMakerImageArn":
            suggest = "sage_maker_image_arn"
        elif key == "sageMakerImageVersionArn":
            suggest = "sage_maker_image_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileResourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileResourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileResourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_type: Optional['UserProfileResourceSpecInstanceType'] = None,
                 sage_maker_image_arn: Optional[str] = None,
                 sage_maker_image_version_arn: Optional[str] = None):
        """
        :param 'UserProfileResourceSpecInstanceType' instance_type: The instance type that the image version runs on.
        :param str sage_maker_image_arn: The ARN of the SageMaker image that the image version belongs to.
        :param str sage_maker_image_version_arn: The ARN of the image version created on the instance.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if sage_maker_image_arn is not None:
            pulumi.set(__self__, "sage_maker_image_arn", sage_maker_image_arn)
        if sage_maker_image_version_arn is not None:
            pulumi.set(__self__, "sage_maker_image_version_arn", sage_maker_image_version_arn)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional['UserProfileResourceSpecInstanceType']:
        """
        The instance type that the image version runs on.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="sageMakerImageArn")
    def sage_maker_image_arn(self) -> Optional[str]:
        """
        The ARN of the SageMaker image that the image version belongs to.
        """
        return pulumi.get(self, "sage_maker_image_arn")

    @property
    @pulumi.getter(name="sageMakerImageVersionArn")
    def sage_maker_image_version_arn(self) -> Optional[str]:
        """
        The ARN of the image version created on the instance.
        """
        return pulumi.get(self, "sage_maker_image_version_arn")


@pulumi.output_type
class UserProfileSharingSettings(dict):
    """
    Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookOutputOption":
            suggest = "notebook_output_option"
        elif key == "s3KmsKeyId":
            suggest = "s3_kms_key_id"
        elif key == "s3OutputPath":
            suggest = "s3_output_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileSharingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileSharingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileSharingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_output_option: Optional['UserProfileSharingSettingsNotebookOutputOption'] = None,
                 s3_kms_key_id: Optional[str] = None,
                 s3_output_path: Optional[str] = None):
        """
        Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
        :param 'UserProfileSharingSettingsNotebookOutputOption' notebook_output_option: Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        :param str s3_kms_key_id: When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        :param str s3_output_path: When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        if notebook_output_option is not None:
            pulumi.set(__self__, "notebook_output_option", notebook_output_option)
        if s3_kms_key_id is not None:
            pulumi.set(__self__, "s3_kms_key_id", s3_kms_key_id)
        if s3_output_path is not None:
            pulumi.set(__self__, "s3_output_path", s3_output_path)

    @property
    @pulumi.getter(name="notebookOutputOption")
    def notebook_output_option(self) -> Optional['UserProfileSharingSettingsNotebookOutputOption']:
        """
        Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        """
        return pulumi.get(self, "notebook_output_option")

    @property
    @pulumi.getter(name="s3KmsKeyId")
    def s3_kms_key_id(self) -> Optional[str]:
        """
        When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_kms_key_id")

    @property
    @pulumi.getter(name="s3OutputPath")
    def s3_output_path(self) -> Optional[str]:
        """
        When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        """
        return pulumi.get(self, "s3_output_path")


@pulumi.output_type
class UserProfileTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserProfileUserSettings(dict):
    """
    A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executionRole":
            suggest = "execution_role"
        elif key == "jupyterServerAppSettings":
            suggest = "jupyter_server_app_settings"
        elif key == "kernelGatewayAppSettings":
            suggest = "kernel_gateway_app_settings"
        elif key == "rStudioServerProAppSettings":
            suggest = "r_studio_server_pro_app_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "sharingSettings":
            suggest = "sharing_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserProfileUserSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserProfileUserSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserProfileUserSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execution_role: Optional[str] = None,
                 jupyter_server_app_settings: Optional['outputs.UserProfileJupyterServerAppSettings'] = None,
                 kernel_gateway_app_settings: Optional['outputs.UserProfileKernelGatewayAppSettings'] = None,
                 r_studio_server_pro_app_settings: Optional['outputs.UserProfileRStudioServerProAppSettings'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 sharing_settings: Optional['outputs.UserProfileSharingSettings'] = None):
        """
        A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
        :param str execution_role: The user profile Amazon Resource Name (ARN).
        :param 'UserProfileJupyterServerAppSettings' jupyter_server_app_settings: The Jupyter server's app settings.
        :param 'UserProfileKernelGatewayAppSettings' kernel_gateway_app_settings: The kernel gateway app settings.
        :param Sequence[str] security_groups: The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        :param 'UserProfileSharingSettings' sharing_settings: The sharing settings.
        """
        if execution_role is not None:
            pulumi.set(__self__, "execution_role", execution_role)
        if jupyter_server_app_settings is not None:
            pulumi.set(__self__, "jupyter_server_app_settings", jupyter_server_app_settings)
        if kernel_gateway_app_settings is not None:
            pulumi.set(__self__, "kernel_gateway_app_settings", kernel_gateway_app_settings)
        if r_studio_server_pro_app_settings is not None:
            pulumi.set(__self__, "r_studio_server_pro_app_settings", r_studio_server_pro_app_settings)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharing_settings is not None:
            pulumi.set(__self__, "sharing_settings", sharing_settings)

    @property
    @pulumi.getter(name="executionRole")
    def execution_role(self) -> Optional[str]:
        """
        The user profile Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "execution_role")

    @property
    @pulumi.getter(name="jupyterServerAppSettings")
    def jupyter_server_app_settings(self) -> Optional['outputs.UserProfileJupyterServerAppSettings']:
        """
        The Jupyter server's app settings.
        """
        return pulumi.get(self, "jupyter_server_app_settings")

    @property
    @pulumi.getter(name="kernelGatewayAppSettings")
    def kernel_gateway_app_settings(self) -> Optional['outputs.UserProfileKernelGatewayAppSettings']:
        """
        The kernel gateway app settings.
        """
        return pulumi.get(self, "kernel_gateway_app_settings")

    @property
    @pulumi.getter(name="rStudioServerProAppSettings")
    def r_studio_server_pro_app_settings(self) -> Optional['outputs.UserProfileRStudioServerProAppSettings']:
        return pulumi.get(self, "r_studio_server_pro_app_settings")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sharingSettings")
    def sharing_settings(self) -> Optional['outputs.UserProfileSharingSettings']:
        """
        The sharing settings.
        """
        return pulumi.get(self, "sharing_settings")


@pulumi.output_type
class WorkteamCognitoMemberDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cognitoClientId":
            suggest = "cognito_client_id"
        elif key == "cognitoUserGroup":
            suggest = "cognito_user_group"
        elif key == "cognitoUserPool":
            suggest = "cognito_user_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamCognitoMemberDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamCognitoMemberDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamCognitoMemberDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cognito_client_id: str,
                 cognito_user_group: str,
                 cognito_user_pool: str):
        pulumi.set(__self__, "cognito_client_id", cognito_client_id)
        pulumi.set(__self__, "cognito_user_group", cognito_user_group)
        pulumi.set(__self__, "cognito_user_pool", cognito_user_pool)

    @property
    @pulumi.getter(name="cognitoClientId")
    def cognito_client_id(self) -> str:
        return pulumi.get(self, "cognito_client_id")

    @property
    @pulumi.getter(name="cognitoUserGroup")
    def cognito_user_group(self) -> str:
        return pulumi.get(self, "cognito_user_group")

    @property
    @pulumi.getter(name="cognitoUserPool")
    def cognito_user_pool(self) -> str:
        return pulumi.get(self, "cognito_user_pool")


@pulumi.output_type
class WorkteamMemberDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cognitoMemberDefinition":
            suggest = "cognito_member_definition"
        elif key == "oidcMemberDefinition":
            suggest = "oidc_member_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamMemberDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamMemberDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamMemberDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cognito_member_definition: Optional['outputs.WorkteamCognitoMemberDefinition'] = None,
                 oidc_member_definition: Optional['outputs.WorkteamOidcMemberDefinition'] = None):
        if cognito_member_definition is not None:
            pulumi.set(__self__, "cognito_member_definition", cognito_member_definition)
        if oidc_member_definition is not None:
            pulumi.set(__self__, "oidc_member_definition", oidc_member_definition)

    @property
    @pulumi.getter(name="cognitoMemberDefinition")
    def cognito_member_definition(self) -> Optional['outputs.WorkteamCognitoMemberDefinition']:
        return pulumi.get(self, "cognito_member_definition")

    @property
    @pulumi.getter(name="oidcMemberDefinition")
    def oidc_member_definition(self) -> Optional['outputs.WorkteamOidcMemberDefinition']:
        return pulumi.get(self, "oidc_member_definition")


@pulumi.output_type
class WorkteamNotificationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationTopicArn":
            suggest = "notification_topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamNotificationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamNotificationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamNotificationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_topic_arn: str):
        pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> str:
        return pulumi.get(self, "notification_topic_arn")


@pulumi.output_type
class WorkteamOidcMemberDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oidcGroups":
            suggest = "oidc_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkteamOidcMemberDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkteamOidcMemberDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkteamOidcMemberDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 oidc_groups: Sequence[str]):
        pulumi.set(__self__, "oidc_groups", oidc_groups)

    @property
    @pulumi.getter(name="oidcGroups")
    def oidc_groups(self) -> Sequence[str]:
        return pulumi.get(self, "oidc_groups")


@pulumi.output_type
class WorkteamTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


