# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotebookInstanceLifecycleConfigArgs', 'NotebookInstanceLifecycleConfig']

@pulumi.input_type
class NotebookInstanceLifecycleConfigArgs:
    def __init__(__self__, *,
                 notebook_instance_lifecycle_config_name: Optional[pulumi.Input[str]] = None,
                 on_create: Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]] = None,
                 on_start: Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]] = None):
        """
        The set of arguments for constructing a NotebookInstanceLifecycleConfig resource.
        """
        if notebook_instance_lifecycle_config_name is not None:
            pulumi.set(__self__, "notebook_instance_lifecycle_config_name", notebook_instance_lifecycle_config_name)
        if on_create is not None:
            pulumi.set(__self__, "on_create", on_create)
        if on_start is not None:
            pulumi.set(__self__, "on_start", on_start)

    @property
    @pulumi.getter(name="notebookInstanceLifecycleConfigName")
    def notebook_instance_lifecycle_config_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notebook_instance_lifecycle_config_name")

    @notebook_instance_lifecycle_config_name.setter
    def notebook_instance_lifecycle_config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notebook_instance_lifecycle_config_name", value)

    @property
    @pulumi.getter(name="onCreate")
    def on_create(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]:
        return pulumi.get(self, "on_create")

    @on_create.setter
    def on_create(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]):
        pulumi.set(self, "on_create", value)

    @property
    @pulumi.getter(name="onStart")
    def on_start(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]:
        return pulumi.get(self, "on_start")

    @on_start.setter
    def on_start(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]):
        pulumi.set(self, "on_start", value)


warnings.warn("""NotebookInstanceLifecycleConfig is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class NotebookInstanceLifecycleConfig(pulumi.CustomResource):
    warnings.warn("""NotebookInstanceLifecycleConfig is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 notebook_instance_lifecycle_config_name: Optional[pulumi.Input[str]] = None,
                 on_create: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]] = None,
                 on_start: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SageMaker::NotebookInstanceLifecycleConfig

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NotebookInstanceLifecycleConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SageMaker::NotebookInstanceLifecycleConfig

        :param str resource_name: The name of the resource.
        :param NotebookInstanceLifecycleConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotebookInstanceLifecycleConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 notebook_instance_lifecycle_config_name: Optional[pulumi.Input[str]] = None,
                 on_create: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]] = None,
                 on_start: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookArgs']]]]] = None,
                 __props__=None):
        pulumi.log.warn("""NotebookInstanceLifecycleConfig is deprecated: NotebookInstanceLifecycleConfig is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotebookInstanceLifecycleConfigArgs.__new__(NotebookInstanceLifecycleConfigArgs)

            __props__.__dict__["notebook_instance_lifecycle_config_name"] = notebook_instance_lifecycle_config_name
            __props__.__dict__["on_create"] = on_create
            __props__.__dict__["on_start"] = on_start
        super(NotebookInstanceLifecycleConfig, __self__).__init__(
            'aws-native:sagemaker:NotebookInstanceLifecycleConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NotebookInstanceLifecycleConfig':
        """
        Get an existing NotebookInstanceLifecycleConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NotebookInstanceLifecycleConfigArgs.__new__(NotebookInstanceLifecycleConfigArgs)

        __props__.__dict__["notebook_instance_lifecycle_config_name"] = None
        __props__.__dict__["on_create"] = None
        __props__.__dict__["on_start"] = None
        return NotebookInstanceLifecycleConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="notebookInstanceLifecycleConfigName")
    def notebook_instance_lifecycle_config_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notebook_instance_lifecycle_config_name")

    @property
    @pulumi.getter(name="onCreate")
    def on_create(self) -> pulumi.Output[Optional[Sequence['outputs.NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook']]]:
        return pulumi.get(self, "on_create")

    @property
    @pulumi.getter(name="onStart")
    def on_start(self) -> pulumi.Output[Optional[Sequence['outputs.NotebookInstanceLifecycleConfigNotebookInstanceLifecycleHook']]]:
        return pulumi.get(self, "on_start")

