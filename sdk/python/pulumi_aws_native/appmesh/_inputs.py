# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GatewayRouteGrpcGatewayRouteActionArgs',
    'GatewayRouteGrpcGatewayRouteMatchArgs',
    'GatewayRouteGrpcGatewayRouteMetadataArgs',
    'GatewayRouteGrpcGatewayRouteRewriteArgs',
    'GatewayRouteGrpcGatewayRouteArgs',
    'GatewayRouteHostnameMatchArgs',
    'GatewayRouteHostnameRewriteArgs',
    'GatewayRouteHttpGatewayRouteActionArgs',
    'GatewayRouteHttpGatewayRouteHeaderMatchArgs',
    'GatewayRouteHttpGatewayRouteHeaderArgs',
    'GatewayRouteHttpGatewayRouteMatchArgs',
    'GatewayRouteHttpGatewayRoutePathRewriteArgs',
    'GatewayRouteHttpGatewayRoutePrefixRewriteArgs',
    'GatewayRouteHttpGatewayRouteRewriteArgs',
    'GatewayRouteHttpGatewayRouteArgs',
    'GatewayRouteHttpPathMatchArgs',
    'GatewayRouteHttpQueryParameterMatchArgs',
    'GatewayRouteMetadataMatchArgs',
    'GatewayRouteQueryParameterArgs',
    'GatewayRouteRangeMatchArgs',
    'GatewayRouteSpecArgs',
    'GatewayRouteTagArgs',
    'GatewayRouteTargetArgs',
    'GatewayRouteVirtualServiceArgs',
    'MeshEgressFilterArgs',
    'MeshServiceDiscoveryArgs',
    'MeshSpecArgs',
    'MeshTagArgs',
    'RouteDurationArgs',
    'RouteGrpcRetryPolicyArgs',
    'RouteGrpcRouteActionArgs',
    'RouteGrpcRouteMatchArgs',
    'RouteGrpcRouteMetadataMatchMethodArgs',
    'RouteGrpcRouteMetadataArgs',
    'RouteGrpcRouteArgs',
    'RouteGrpcTimeoutArgs',
    'RouteHeaderMatchMethodArgs',
    'RouteHttpPathMatchArgs',
    'RouteHttpQueryParameterMatchArgs',
    'RouteHttpRetryPolicyArgs',
    'RouteHttpRouteActionArgs',
    'RouteHttpRouteHeaderArgs',
    'RouteHttpRouteMatchArgs',
    'RouteHttpRouteArgs',
    'RouteHttpTimeoutArgs',
    'RouteMatchRangeArgs',
    'RouteQueryParameterArgs',
    'RouteSpecArgs',
    'RouteTagArgs',
    'RouteTcpRouteActionArgs',
    'RouteTcpRouteMatchArgs',
    'RouteTcpRouteArgs',
    'RouteTcpTimeoutArgs',
    'RouteWeightedTargetArgs',
    'VirtualGatewayAccessLogArgs',
    'VirtualGatewayBackendDefaultsArgs',
    'VirtualGatewayClientPolicyTlsArgs',
    'VirtualGatewayClientPolicyArgs',
    'VirtualGatewayClientTlsCertificateArgs',
    'VirtualGatewayConnectionPoolArgs',
    'VirtualGatewayFileAccessLogArgs',
    'VirtualGatewayGrpcConnectionPoolArgs',
    'VirtualGatewayHealthCheckPolicyArgs',
    'VirtualGatewayHttp2ConnectionPoolArgs',
    'VirtualGatewayHttpConnectionPoolArgs',
    'VirtualGatewayJsonFormatRefArgs',
    'VirtualGatewayListenerTlsAcmCertificateArgs',
    'VirtualGatewayListenerTlsCertificateArgs',
    'VirtualGatewayListenerTlsFileCertificateArgs',
    'VirtualGatewayListenerTlsSdsCertificateArgs',
    'VirtualGatewayListenerTlsValidationContextTrustArgs',
    'VirtualGatewayListenerTlsValidationContextArgs',
    'VirtualGatewayListenerTlsArgs',
    'VirtualGatewayListenerArgs',
    'VirtualGatewayLoggingFormatArgs',
    'VirtualGatewayLoggingArgs',
    'VirtualGatewayPortMappingArgs',
    'VirtualGatewaySpecArgs',
    'VirtualGatewaySubjectAlternativeNameMatchersArgs',
    'VirtualGatewaySubjectAlternativeNamesArgs',
    'VirtualGatewayTagArgs',
    'VirtualGatewayTlsValidationContextAcmTrustArgs',
    'VirtualGatewayTlsValidationContextFileTrustArgs',
    'VirtualGatewayTlsValidationContextSdsTrustArgs',
    'VirtualGatewayTlsValidationContextTrustArgs',
    'VirtualGatewayTlsValidationContextArgs',
    'VirtualNodeAccessLogArgs',
    'VirtualNodeAwsCloudMapInstanceAttributeArgs',
    'VirtualNodeAwsCloudMapServiceDiscoveryArgs',
    'VirtualNodeBackendDefaultsArgs',
    'VirtualNodeBackendArgs',
    'VirtualNodeClientPolicyTlsArgs',
    'VirtualNodeClientPolicyArgs',
    'VirtualNodeClientTlsCertificateArgs',
    'VirtualNodeConnectionPoolArgs',
    'VirtualNodeDnsServiceDiscoveryArgs',
    'VirtualNodeDurationArgs',
    'VirtualNodeFileAccessLogArgs',
    'VirtualNodeGrpcConnectionPoolArgs',
    'VirtualNodeGrpcTimeoutArgs',
    'VirtualNodeHealthCheckArgs',
    'VirtualNodeHttp2ConnectionPoolArgs',
    'VirtualNodeHttpConnectionPoolArgs',
    'VirtualNodeHttpTimeoutArgs',
    'VirtualNodeJsonFormatRefArgs',
    'VirtualNodeListenerTimeoutArgs',
    'VirtualNodeListenerTlsAcmCertificateArgs',
    'VirtualNodeListenerTlsCertificateArgs',
    'VirtualNodeListenerTlsFileCertificateArgs',
    'VirtualNodeListenerTlsSdsCertificateArgs',
    'VirtualNodeListenerTlsValidationContextTrustArgs',
    'VirtualNodeListenerTlsValidationContextArgs',
    'VirtualNodeListenerTlsArgs',
    'VirtualNodeListenerArgs',
    'VirtualNodeLoggingFormatArgs',
    'VirtualNodeLoggingArgs',
    'VirtualNodeOutlierDetectionArgs',
    'VirtualNodePortMappingArgs',
    'VirtualNodeServiceDiscoveryArgs',
    'VirtualNodeSpecArgs',
    'VirtualNodeSubjectAlternativeNameMatchersArgs',
    'VirtualNodeSubjectAlternativeNamesArgs',
    'VirtualNodeTagArgs',
    'VirtualNodeTcpConnectionPoolArgs',
    'VirtualNodeTcpTimeoutArgs',
    'VirtualNodeTlsValidationContextAcmTrustArgs',
    'VirtualNodeTlsValidationContextFileTrustArgs',
    'VirtualNodeTlsValidationContextSdsTrustArgs',
    'VirtualNodeTlsValidationContextTrustArgs',
    'VirtualNodeTlsValidationContextArgs',
    'VirtualNodeVirtualServiceBackendArgs',
    'VirtualRouterListenerArgs',
    'VirtualRouterPortMappingArgs',
    'VirtualRouterSpecArgs',
    'VirtualRouterTagArgs',
    'VirtualServiceProviderArgs',
    'VirtualServiceSpecArgs',
    'VirtualServiceTagArgs',
    'VirtualServiceVirtualNodeServiceProviderArgs',
    'VirtualServiceVirtualRouterServiceProviderArgs',
]

@pulumi.input_type
class GatewayRouteGrpcGatewayRouteActionArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['GatewayRouteTargetArgs'],
                 rewrite: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteRewriteArgs']] = None):
        GatewayRouteGrpcGatewayRouteActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            rewrite=rewrite,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input['GatewayRouteTargetArgs'],
             rewrite: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteRewriteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if rewrite is not None:
            _setter("rewrite", rewrite)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['GatewayRouteTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['GatewayRouteTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def rewrite(self) -> Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteRewriteArgs']]:
        return pulumi.get(self, "rewrite")

    @rewrite.setter
    def rewrite(self, value: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteRewriteArgs']]):
        pulumi.set(self, "rewrite", value)


@pulumi.input_type
class GatewayRouteGrpcGatewayRouteMatchArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']] = None,
                 metadata: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteGrpcGatewayRouteMetadataArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        GatewayRouteGrpcGatewayRouteMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            metadata=metadata,
            port=port,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']] = None,
             metadata: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteGrpcGatewayRouteMetadataArgs']]]] = None,
             port: Optional[pulumi.Input[int]] = None,
             service_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if hostname is not None:
            _setter("hostname", hostname)
        if metadata is not None:
            _setter("metadata", metadata)
        if port is not None:
            _setter("port", port)
        if service_name is not None:
            _setter("service_name", service_name)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteGrpcGatewayRouteMetadataArgs']]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteGrpcGatewayRouteMetadataArgs']]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class GatewayRouteGrpcGatewayRouteMetadataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 invert: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input['GatewayRouteMetadataMatchArgs']] = None):
        GatewayRouteGrpcGatewayRouteMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            invert=invert,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             invert: Optional[pulumi.Input[bool]] = None,
             match: Optional[pulumi.Input['GatewayRouteMetadataMatchArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if invert is not None:
            _setter("invert", invert)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def invert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert")

    @invert.setter
    def invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['GatewayRouteMetadataMatchArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['GatewayRouteMetadataMatchArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class GatewayRouteGrpcGatewayRouteRewriteArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']] = None):
        GatewayRouteGrpcGatewayRouteRewriteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if hostname is not None:
            _setter("hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class GatewayRouteGrpcGatewayRouteArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['GatewayRouteGrpcGatewayRouteActionArgs'],
                 match: pulumi.Input['GatewayRouteGrpcGatewayRouteMatchArgs']):
        GatewayRouteGrpcGatewayRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['GatewayRouteGrpcGatewayRouteActionArgs'],
             match: pulumi.Input['GatewayRouteGrpcGatewayRouteMatchArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("match", match)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['GatewayRouteGrpcGatewayRouteActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['GatewayRouteGrpcGatewayRouteActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['GatewayRouteGrpcGatewayRouteMatchArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['GatewayRouteGrpcGatewayRouteMatchArgs']):
        pulumi.set(self, "match", value)


@pulumi.input_type
class GatewayRouteHostnameMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        GatewayRouteHostnameMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class GatewayRouteHostnameRewriteArgs:
    def __init__(__self__, *,
                 default_target_hostname: Optional[pulumi.Input[str]] = None):
        GatewayRouteHostnameRewriteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_target_hostname=default_target_hostname,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_target_hostname: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_target_hostname is not None:
            _setter("default_target_hostname", default_target_hostname)

    @property
    @pulumi.getter(name="defaultTargetHostname")
    def default_target_hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_target_hostname")

    @default_target_hostname.setter
    def default_target_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_target_hostname", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteActionArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['GatewayRouteTargetArgs'],
                 rewrite: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteRewriteArgs']] = None):
        GatewayRouteHttpGatewayRouteActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            rewrite=rewrite,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input['GatewayRouteTargetArgs'],
             rewrite: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteRewriteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if rewrite is not None:
            _setter("rewrite", rewrite)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['GatewayRouteTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['GatewayRouteTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def rewrite(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRouteRewriteArgs']]:
        return pulumi.get(self, "rewrite")

    @rewrite.setter
    def rewrite(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteRewriteArgs']]):
        pulumi.set(self, "rewrite", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteHeaderMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        GatewayRouteHttpGatewayRouteHeaderMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            prefix=prefix,
            range=range,
            regex=regex,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             range: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']] = None,
             regex: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)
        if range is not None:
            _setter("range", range)
        if regex is not None:
            _setter("regex", regex)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['GatewayRouteRangeMatchArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 invert: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderMatchArgs']] = None):
        GatewayRouteHttpGatewayRouteHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            invert=invert,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             invert: Optional[pulumi.Input[bool]] = None,
             match: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderMatchArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if invert is not None:
            _setter("invert", invert)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def invert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert")

    @invert.setter
    def invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderMatchArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderMatchArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteMatchArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderArgs']]]] = None,
                 hostname: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['GatewayRouteHttpPathMatchArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 query_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteQueryParameterArgs']]]] = None):
        GatewayRouteHttpGatewayRouteMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            headers=headers,
            hostname=hostname,
            method=method,
            path=path,
            port=port,
            prefix=prefix,
            query_parameters=query_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderArgs']]]] = None,
             hostname: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']] = None,
             method: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input['GatewayRouteHttpPathMatchArgs']] = None,
             port: Optional[pulumi.Input[int]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             query_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteQueryParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if headers is not None:
            _setter("headers", headers)
        if hostname is not None:
            _setter("hostname", hostname)
        if method is not None:
            _setter("method", method)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if prefix is not None:
            _setter("prefix", prefix)
        if query_parameters is not None:
            _setter("query_parameters", query_parameters)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteHttpGatewayRouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['GatewayRouteHostnameMatchArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['GatewayRouteHttpPathMatchArgs']]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['GatewayRouteHttpPathMatchArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteQueryParameterArgs']]]]:
        return pulumi.get(self, "query_parameters")

    @query_parameters.setter
    def query_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayRouteQueryParameterArgs']]]]):
        pulumi.set(self, "query_parameters", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRoutePathRewriteArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None):
        GatewayRouteHttpGatewayRoutePathRewriteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRoutePrefixRewriteArgs:
    def __init__(__self__, *,
                 default_prefix: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        GatewayRouteHttpGatewayRoutePrefixRewriteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_prefix=default_prefix,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_prefix: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_prefix is not None:
            _setter("default_prefix", default_prefix)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="defaultPrefix")
    def default_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_prefix")

    @default_prefix.setter
    def default_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_prefix", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteRewriteArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']] = None,
                 path: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePathRewriteArgs']] = None,
                 prefix: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePrefixRewriteArgs']] = None):
        GatewayRouteHttpGatewayRouteRewriteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            path=path,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']] = None,
             path: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePathRewriteArgs']] = None,
             prefix: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePrefixRewriteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if hostname is not None:
            _setter("hostname", hostname)
        if path is not None:
            _setter("path", path)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['GatewayRouteHostnameRewriteArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePathRewriteArgs']]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePathRewriteArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePrefixRewriteArgs']]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRoutePrefixRewriteArgs']]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class GatewayRouteHttpGatewayRouteArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['GatewayRouteHttpGatewayRouteActionArgs'],
                 match: pulumi.Input['GatewayRouteHttpGatewayRouteMatchArgs']):
        GatewayRouteHttpGatewayRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['GatewayRouteHttpGatewayRouteActionArgs'],
             match: pulumi.Input['GatewayRouteHttpGatewayRouteMatchArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("match", match)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['GatewayRouteHttpGatewayRouteActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['GatewayRouteHttpGatewayRouteActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['GatewayRouteHttpGatewayRouteMatchArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['GatewayRouteHttpGatewayRouteMatchArgs']):
        pulumi.set(self, "match", value)


@pulumi.input_type
class GatewayRouteHttpPathMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        GatewayRouteHttpPathMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             regex: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GatewayRouteHttpQueryParameterMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None):
        GatewayRouteHttpQueryParameterMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class GatewayRouteMetadataMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        GatewayRouteMetadataMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            prefix=prefix,
            range=range,
            regex=regex,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             range: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']] = None,
             regex: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)
        if range is not None:
            _setter("range", range)
        if regex is not None:
            _setter("regex", regex)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['GatewayRouteRangeMatchArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['GatewayRouteRangeMatchArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class GatewayRouteQueryParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 match: Optional[pulumi.Input['GatewayRouteHttpQueryParameterMatchArgs']] = None):
        GatewayRouteQueryParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             match: Optional[pulumi.Input['GatewayRouteHttpQueryParameterMatchArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['GatewayRouteHttpQueryParameterMatchArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['GatewayRouteHttpQueryParameterMatchArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class GatewayRouteRangeMatchArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        GatewayRouteRangeMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: pulumi.Input[int],
             start: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class GatewayRouteSpecArgs:
    def __init__(__self__, *,
                 grpc_route: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteArgs']] = None,
                 http2_route: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']] = None,
                 http_route: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        GatewayRouteSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grpc_route=grpc_route,
            http2_route=http2_route,
            http_route=http_route,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grpc_route: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteArgs']] = None,
             http2_route: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']] = None,
             http_route: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']] = None,
             priority: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grpc_route is not None:
            _setter("grpc_route", grpc_route)
        if http2_route is not None:
            _setter("http2_route", http2_route)
        if http_route is not None:
            _setter("http_route", http_route)
        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter(name="grpcRoute")
    def grpc_route(self) -> Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteArgs']]:
        return pulumi.get(self, "grpc_route")

    @grpc_route.setter
    def grpc_route(self, value: Optional[pulumi.Input['GatewayRouteGrpcGatewayRouteArgs']]):
        pulumi.set(self, "grpc_route", value)

    @property
    @pulumi.getter(name="http2Route")
    def http2_route(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']]:
        return pulumi.get(self, "http2_route")

    @http2_route.setter
    def http2_route(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']]):
        pulumi.set(self, "http2_route", value)

    @property
    @pulumi.getter(name="httpRoute")
    def http_route(self) -> Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']]:
        return pulumi.get(self, "http_route")

    @http_route.setter
    def http_route(self, value: Optional[pulumi.Input['GatewayRouteHttpGatewayRouteArgs']]):
        pulumi.set(self, "http_route", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class GatewayRouteTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        GatewayRouteTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GatewayRouteTargetArgs:
    def __init__(__self__, *,
                 virtual_service: pulumi.Input['GatewayRouteVirtualServiceArgs'],
                 port: Optional[pulumi.Input[int]] = None):
        GatewayRouteTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_service=virtual_service,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_service: pulumi.Input['GatewayRouteVirtualServiceArgs'],
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_service", virtual_service)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="virtualService")
    def virtual_service(self) -> pulumi.Input['GatewayRouteVirtualServiceArgs']:
        return pulumi.get(self, "virtual_service")

    @virtual_service.setter
    def virtual_service(self, value: pulumi.Input['GatewayRouteVirtualServiceArgs']):
        pulumi.set(self, "virtual_service", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewayRouteVirtualServiceArgs:
    def __init__(__self__, *,
                 virtual_service_name: pulumi.Input[str]):
        GatewayRouteVirtualServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_service_name=virtual_service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_service_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_service_name", virtual_service_name)

    @property
    @pulumi.getter(name="virtualServiceName")
    def virtual_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_service_name")

    @virtual_service_name.setter
    def virtual_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_service_name", value)


@pulumi.input_type
class MeshEgressFilterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        MeshEgressFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class MeshServiceDiscoveryArgs:
    def __init__(__self__, *,
                 ip_preference: Optional[pulumi.Input[str]] = None):
        MeshServiceDiscoveryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_preference=ip_preference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_preference: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ip_preference is not None:
            _setter("ip_preference", ip_preference)

    @property
    @pulumi.getter(name="ipPreference")
    def ip_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_preference")

    @ip_preference.setter
    def ip_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_preference", value)


@pulumi.input_type
class MeshSpecArgs:
    def __init__(__self__, *,
                 egress_filter: Optional[pulumi.Input['MeshEgressFilterArgs']] = None,
                 service_discovery: Optional[pulumi.Input['MeshServiceDiscoveryArgs']] = None):
        MeshSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            egress_filter=egress_filter,
            service_discovery=service_discovery,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             egress_filter: Optional[pulumi.Input['MeshEgressFilterArgs']] = None,
             service_discovery: Optional[pulumi.Input['MeshServiceDiscoveryArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if egress_filter is not None:
            _setter("egress_filter", egress_filter)
        if service_discovery is not None:
            _setter("service_discovery", service_discovery)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input['MeshEgressFilterArgs']]:
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input['MeshEgressFilterArgs']]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="serviceDiscovery")
    def service_discovery(self) -> Optional[pulumi.Input['MeshServiceDiscoveryArgs']]:
        return pulumi.get(self, "service_discovery")

    @service_discovery.setter
    def service_discovery(self, value: Optional[pulumi.Input['MeshServiceDiscoveryArgs']]):
        pulumi.set(self, "service_discovery", value)


@pulumi.input_type
class MeshTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        MeshTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RouteDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        RouteDurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: pulumi.Input[str],
             value: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RouteGrpcRetryPolicyArgs:
    def __init__(__self__, *,
                 max_retries: pulumi.Input[int],
                 per_retry_timeout: pulumi.Input['RouteDurationArgs'],
                 grpc_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 http_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tcp_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        RouteGrpcRetryPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_retries=max_retries,
            per_retry_timeout=per_retry_timeout,
            grpc_retry_events=grpc_retry_events,
            http_retry_events=http_retry_events,
            tcp_retry_events=tcp_retry_events,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_retries: pulumi.Input[int],
             per_retry_timeout: pulumi.Input['RouteDurationArgs'],
             grpc_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             http_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tcp_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_retries", max_retries)
        _setter("per_retry_timeout", per_retry_timeout)
        if grpc_retry_events is not None:
            _setter("grpc_retry_events", grpc_retry_events)
        if http_retry_events is not None:
            _setter("http_retry_events", http_retry_events)
        if tcp_retry_events is not None:
            _setter("tcp_retry_events", tcp_retry_events)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="perRetryTimeout")
    def per_retry_timeout(self) -> pulumi.Input['RouteDurationArgs']:
        return pulumi.get(self, "per_retry_timeout")

    @per_retry_timeout.setter
    def per_retry_timeout(self, value: pulumi.Input['RouteDurationArgs']):
        pulumi.set(self, "per_retry_timeout", value)

    @property
    @pulumi.getter(name="grpcRetryEvents")
    def grpc_retry_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "grpc_retry_events")

    @grpc_retry_events.setter
    def grpc_retry_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "grpc_retry_events", value)

    @property
    @pulumi.getter(name="httpRetryEvents")
    def http_retry_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "http_retry_events")

    @http_retry_events.setter
    def http_retry_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "http_retry_events", value)

    @property
    @pulumi.getter(name="tcpRetryEvents")
    def tcp_retry_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tcp_retry_events")

    @tcp_retry_events.setter
    def tcp_retry_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tcp_retry_events", value)


@pulumi.input_type
class RouteGrpcRouteActionArgs:
    def __init__(__self__, *,
                 weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        RouteGrpcRouteActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            weighted_targets=weighted_targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("weighted_targets", weighted_targets)

    @property
    @pulumi.getter(name="weightedTargets")
    def weighted_targets(self) -> pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]:
        return pulumi.get(self, "weighted_targets")

    @weighted_targets.setter
    def weighted_targets(self, value: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        pulumi.set(self, "weighted_targets", value)


@pulumi.input_type
class RouteGrpcRouteMatchArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input[Sequence[pulumi.Input['RouteGrpcRouteMetadataArgs']]]] = None,
                 method_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        RouteGrpcRouteMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metadata=metadata,
            method_name=method_name,
            port=port,
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metadata: Optional[pulumi.Input[Sequence[pulumi.Input['RouteGrpcRouteMetadataArgs']]]] = None,
             method_name: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             service_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if metadata is not None:
            _setter("metadata", metadata)
        if method_name is not None:
            _setter("method_name", method_name)
        if port is not None:
            _setter("port", port)
        if service_name is not None:
            _setter("service_name", service_name)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteGrpcRouteMetadataArgs']]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteGrpcRouteMetadataArgs']]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="methodName")
    def method_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method_name")

    @method_name.setter
    def method_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class RouteGrpcRouteMetadataMatchMethodArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input['RouteMatchRangeArgs']] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        RouteGrpcRouteMetadataMatchMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            prefix=prefix,
            range=range,
            regex=regex,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             range: Optional[pulumi.Input['RouteMatchRangeArgs']] = None,
             regex: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)
        if range is not None:
            _setter("range", range)
        if regex is not None:
            _setter("regex", regex)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['RouteMatchRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['RouteMatchRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class RouteGrpcRouteMetadataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 invert: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input['RouteGrpcRouteMetadataMatchMethodArgs']] = None):
        RouteGrpcRouteMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            invert=invert,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             invert: Optional[pulumi.Input[bool]] = None,
             match: Optional[pulumi.Input['RouteGrpcRouteMetadataMatchMethodArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if invert is not None:
            _setter("invert", invert)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def invert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert")

    @invert.setter
    def invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['RouteGrpcRouteMetadataMatchMethodArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['RouteGrpcRouteMetadataMatchMethodArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class RouteGrpcRouteArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RouteGrpcRouteActionArgs'],
                 match: pulumi.Input['RouteGrpcRouteMatchArgs'],
                 retry_policy: Optional[pulumi.Input['RouteGrpcRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['RouteGrpcTimeoutArgs']] = None):
        RouteGrpcRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match=match,
            retry_policy=retry_policy,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['RouteGrpcRouteActionArgs'],
             match: pulumi.Input['RouteGrpcRouteMatchArgs'],
             retry_policy: Optional[pulumi.Input['RouteGrpcRetryPolicyArgs']] = None,
             timeout: Optional[pulumi.Input['RouteGrpcTimeoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("match", match)
        if retry_policy is not None:
            _setter("retry_policy", retry_policy)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RouteGrpcRouteActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RouteGrpcRouteActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['RouteGrpcRouteMatchArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['RouteGrpcRouteMatchArgs']):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['RouteGrpcRetryPolicyArgs']]:
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['RouteGrpcRetryPolicyArgs']]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['RouteGrpcTimeoutArgs']]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['RouteGrpcTimeoutArgs']]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RouteGrpcTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['RouteDurationArgs']] = None,
                 per_request: Optional[pulumi.Input['RouteDurationArgs']] = None):
        RouteGrpcTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
            per_request=per_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['RouteDurationArgs']] = None,
             per_request: Optional[pulumi.Input['RouteDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)
        if per_request is not None:
            _setter("per_request", per_request)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['RouteDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['RouteDurationArgs']]):
        pulumi.set(self, "idle", value)

    @property
    @pulumi.getter(name="perRequest")
    def per_request(self) -> Optional[pulumi.Input['RouteDurationArgs']]:
        return pulumi.get(self, "per_request")

    @per_request.setter
    def per_request(self, value: Optional[pulumi.Input['RouteDurationArgs']]):
        pulumi.set(self, "per_request", value)


@pulumi.input_type
class RouteHeaderMatchMethodArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input['RouteMatchRangeArgs']] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        RouteHeaderMatchMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            prefix=prefix,
            range=range,
            regex=regex,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             range: Optional[pulumi.Input['RouteMatchRangeArgs']] = None,
             regex: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)
        if range is not None:
            _setter("range", range)
        if regex is not None:
            _setter("regex", regex)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['RouteMatchRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['RouteMatchRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class RouteHttpPathMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        RouteHttpPathMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             regex: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class RouteHttpQueryParameterMatchArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None):
        RouteHttpQueryParameterMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class RouteHttpRetryPolicyArgs:
    def __init__(__self__, *,
                 max_retries: pulumi.Input[int],
                 per_retry_timeout: pulumi.Input['RouteDurationArgs'],
                 http_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tcp_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        RouteHttpRetryPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_retries=max_retries,
            per_retry_timeout=per_retry_timeout,
            http_retry_events=http_retry_events,
            tcp_retry_events=tcp_retry_events,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_retries: pulumi.Input[int],
             per_retry_timeout: pulumi.Input['RouteDurationArgs'],
             http_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tcp_retry_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_retries", max_retries)
        _setter("per_retry_timeout", per_retry_timeout)
        if http_retry_events is not None:
            _setter("http_retry_events", http_retry_events)
        if tcp_retry_events is not None:
            _setter("tcp_retry_events", tcp_retry_events)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="perRetryTimeout")
    def per_retry_timeout(self) -> pulumi.Input['RouteDurationArgs']:
        return pulumi.get(self, "per_retry_timeout")

    @per_retry_timeout.setter
    def per_retry_timeout(self, value: pulumi.Input['RouteDurationArgs']):
        pulumi.set(self, "per_retry_timeout", value)

    @property
    @pulumi.getter(name="httpRetryEvents")
    def http_retry_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "http_retry_events")

    @http_retry_events.setter
    def http_retry_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "http_retry_events", value)

    @property
    @pulumi.getter(name="tcpRetryEvents")
    def tcp_retry_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tcp_retry_events")

    @tcp_retry_events.setter
    def tcp_retry_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tcp_retry_events", value)


@pulumi.input_type
class RouteHttpRouteActionArgs:
    def __init__(__self__, *,
                 weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        RouteHttpRouteActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            weighted_targets=weighted_targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("weighted_targets", weighted_targets)

    @property
    @pulumi.getter(name="weightedTargets")
    def weighted_targets(self) -> pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]:
        return pulumi.get(self, "weighted_targets")

    @weighted_targets.setter
    def weighted_targets(self, value: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        pulumi.set(self, "weighted_targets", value)


@pulumi.input_type
class RouteHttpRouteHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 invert: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input['RouteHeaderMatchMethodArgs']] = None):
        RouteHttpRouteHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            invert=invert,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             invert: Optional[pulumi.Input[bool]] = None,
             match: Optional[pulumi.Input['RouteHeaderMatchMethodArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if invert is not None:
            _setter("invert", invert)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def invert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invert")

    @invert.setter
    def invert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invert", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['RouteHeaderMatchMethodArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['RouteHeaderMatchMethodArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class RouteHttpRouteMatchArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHttpRouteHeaderArgs']]]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['RouteHttpPathMatchArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 query_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RouteQueryParameterArgs']]]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        RouteHttpRouteMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            headers=headers,
            method=method,
            path=path,
            port=port,
            prefix=prefix,
            query_parameters=query_parameters,
            scheme=scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHttpRouteHeaderArgs']]]] = None,
             method: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input['RouteHttpPathMatchArgs']] = None,
             port: Optional[pulumi.Input[int]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             query_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RouteQueryParameterArgs']]]] = None,
             scheme: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if headers is not None:
            _setter("headers", headers)
        if method is not None:
            _setter("method", method)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if prefix is not None:
            _setter("prefix", prefix)
        if query_parameters is not None:
            _setter("query_parameters", query_parameters)
        if scheme is not None:
            _setter("scheme", scheme)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteHttpRouteHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteHttpRouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['RouteHttpPathMatchArgs']]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['RouteHttpPathMatchArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteQueryParameterArgs']]]]:
        return pulumi.get(self, "query_parameters")

    @query_parameters.setter
    def query_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteQueryParameterArgs']]]]):
        pulumi.set(self, "query_parameters", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class RouteHttpRouteArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RouteHttpRouteActionArgs'],
                 match: pulumi.Input['RouteHttpRouteMatchArgs'],
                 retry_policy: Optional[pulumi.Input['RouteHttpRetryPolicyArgs']] = None,
                 timeout: Optional[pulumi.Input['RouteHttpTimeoutArgs']] = None):
        RouteHttpRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match=match,
            retry_policy=retry_policy,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['RouteHttpRouteActionArgs'],
             match: pulumi.Input['RouteHttpRouteMatchArgs'],
             retry_policy: Optional[pulumi.Input['RouteHttpRetryPolicyArgs']] = None,
             timeout: Optional[pulumi.Input['RouteHttpTimeoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("match", match)
        if retry_policy is not None:
            _setter("retry_policy", retry_policy)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RouteHttpRouteActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RouteHttpRouteActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['RouteHttpRouteMatchArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['RouteHttpRouteMatchArgs']):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input['RouteHttpRetryPolicyArgs']]:
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input['RouteHttpRetryPolicyArgs']]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['RouteHttpTimeoutArgs']]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['RouteHttpTimeoutArgs']]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RouteHttpTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['RouteDurationArgs']] = None,
                 per_request: Optional[pulumi.Input['RouteDurationArgs']] = None):
        RouteHttpTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
            per_request=per_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['RouteDurationArgs']] = None,
             per_request: Optional[pulumi.Input['RouteDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)
        if per_request is not None:
            _setter("per_request", per_request)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['RouteDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['RouteDurationArgs']]):
        pulumi.set(self, "idle", value)

    @property
    @pulumi.getter(name="perRequest")
    def per_request(self) -> Optional[pulumi.Input['RouteDurationArgs']]:
        return pulumi.get(self, "per_request")

    @per_request.setter
    def per_request(self, value: Optional[pulumi.Input['RouteDurationArgs']]):
        pulumi.set(self, "per_request", value)


@pulumi.input_type
class RouteMatchRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        RouteMatchRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: pulumi.Input[int],
             start: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class RouteQueryParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 match: Optional[pulumi.Input['RouteHttpQueryParameterMatchArgs']] = None):
        RouteQueryParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             match: Optional[pulumi.Input['RouteHttpQueryParameterMatchArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if match is not None:
            _setter("match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['RouteHttpQueryParameterMatchArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['RouteHttpQueryParameterMatchArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class RouteSpecArgs:
    def __init__(__self__, *,
                 grpc_route: Optional[pulumi.Input['RouteGrpcRouteArgs']] = None,
                 http2_route: Optional[pulumi.Input['RouteHttpRouteArgs']] = None,
                 http_route: Optional[pulumi.Input['RouteHttpRouteArgs']] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 tcp_route: Optional[pulumi.Input['RouteTcpRouteArgs']] = None):
        RouteSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grpc_route=grpc_route,
            http2_route=http2_route,
            http_route=http_route,
            priority=priority,
            tcp_route=tcp_route,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grpc_route: Optional[pulumi.Input['RouteGrpcRouteArgs']] = None,
             http2_route: Optional[pulumi.Input['RouteHttpRouteArgs']] = None,
             http_route: Optional[pulumi.Input['RouteHttpRouteArgs']] = None,
             priority: Optional[pulumi.Input[int]] = None,
             tcp_route: Optional[pulumi.Input['RouteTcpRouteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grpc_route is not None:
            _setter("grpc_route", grpc_route)
        if http2_route is not None:
            _setter("http2_route", http2_route)
        if http_route is not None:
            _setter("http_route", http_route)
        if priority is not None:
            _setter("priority", priority)
        if tcp_route is not None:
            _setter("tcp_route", tcp_route)

    @property
    @pulumi.getter(name="grpcRoute")
    def grpc_route(self) -> Optional[pulumi.Input['RouteGrpcRouteArgs']]:
        return pulumi.get(self, "grpc_route")

    @grpc_route.setter
    def grpc_route(self, value: Optional[pulumi.Input['RouteGrpcRouteArgs']]):
        pulumi.set(self, "grpc_route", value)

    @property
    @pulumi.getter(name="http2Route")
    def http2_route(self) -> Optional[pulumi.Input['RouteHttpRouteArgs']]:
        return pulumi.get(self, "http2_route")

    @http2_route.setter
    def http2_route(self, value: Optional[pulumi.Input['RouteHttpRouteArgs']]):
        pulumi.set(self, "http2_route", value)

    @property
    @pulumi.getter(name="httpRoute")
    def http_route(self) -> Optional[pulumi.Input['RouteHttpRouteArgs']]:
        return pulumi.get(self, "http_route")

    @http_route.setter
    def http_route(self, value: Optional[pulumi.Input['RouteHttpRouteArgs']]):
        pulumi.set(self, "http_route", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="tcpRoute")
    def tcp_route(self) -> Optional[pulumi.Input['RouteTcpRouteArgs']]:
        return pulumi.get(self, "tcp_route")

    @tcp_route.setter
    def tcp_route(self, value: Optional[pulumi.Input['RouteTcpRouteArgs']]):
        pulumi.set(self, "tcp_route", value)


@pulumi.input_type
class RouteTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        RouteTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RouteTcpRouteActionArgs:
    def __init__(__self__, *,
                 weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        RouteTcpRouteActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            weighted_targets=weighted_targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             weighted_targets: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("weighted_targets", weighted_targets)

    @property
    @pulumi.getter(name="weightedTargets")
    def weighted_targets(self) -> pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]:
        return pulumi.get(self, "weighted_targets")

    @weighted_targets.setter
    def weighted_targets(self, value: pulumi.Input[Sequence[pulumi.Input['RouteWeightedTargetArgs']]]):
        pulumi.set(self, "weighted_targets", value)


@pulumi.input_type
class RouteTcpRouteMatchArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None):
        RouteTcpRouteMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class RouteTcpRouteArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RouteTcpRouteActionArgs'],
                 match: Optional[pulumi.Input['RouteTcpRouteMatchArgs']] = None,
                 timeout: Optional[pulumi.Input['RouteTcpTimeoutArgs']] = None):
        RouteTcpRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            match=match,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['RouteTcpRouteActionArgs'],
             match: Optional[pulumi.Input['RouteTcpRouteMatchArgs']] = None,
             timeout: Optional[pulumi.Input['RouteTcpTimeoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        if match is not None:
            _setter("match", match)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RouteTcpRouteActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RouteTcpRouteActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['RouteTcpRouteMatchArgs']]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['RouteTcpRouteMatchArgs']]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['RouteTcpTimeoutArgs']]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['RouteTcpTimeoutArgs']]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RouteTcpTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['RouteDurationArgs']] = None):
        RouteTcpTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['RouteDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['RouteDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['RouteDurationArgs']]):
        pulumi.set(self, "idle", value)


@pulumi.input_type
class RouteWeightedTargetArgs:
    def __init__(__self__, *,
                 virtual_node: pulumi.Input[str],
                 weight: pulumi.Input[int],
                 port: Optional[pulumi.Input[int]] = None):
        RouteWeightedTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_node=virtual_node,
            weight=weight,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_node: pulumi.Input[str],
             weight: pulumi.Input[int],
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_node", virtual_node)
        _setter("weight", weight)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="virtualNode")
    def virtual_node(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_node")

    @virtual_node.setter
    def virtual_node(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_node", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class VirtualGatewayAccessLogArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualGatewayFileAccessLogArgs']] = None):
        VirtualGatewayAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualGatewayFileAccessLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualGatewayFileAccessLogArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualGatewayFileAccessLogArgs']]):
        pulumi.set(self, "file", value)


@pulumi.input_type
class VirtualGatewayBackendDefaultsArgs:
    def __init__(__self__, *,
                 client_policy: Optional[pulumi.Input['VirtualGatewayClientPolicyArgs']] = None):
        VirtualGatewayBackendDefaultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_policy=client_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_policy: Optional[pulumi.Input['VirtualGatewayClientPolicyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_policy is not None:
            _setter("client_policy", client_policy)

    @property
    @pulumi.getter(name="clientPolicy")
    def client_policy(self) -> Optional[pulumi.Input['VirtualGatewayClientPolicyArgs']]:
        return pulumi.get(self, "client_policy")

    @client_policy.setter
    def client_policy(self, value: Optional[pulumi.Input['VirtualGatewayClientPolicyArgs']]):
        pulumi.set(self, "client_policy", value)


@pulumi.input_type
class VirtualGatewayClientPolicyTlsArgs:
    def __init__(__self__, *,
                 validation: pulumi.Input['VirtualGatewayTlsValidationContextArgs'],
                 certificate: Optional[pulumi.Input['VirtualGatewayClientTlsCertificateArgs']] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        VirtualGatewayClientPolicyTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            validation=validation,
            certificate=certificate,
            enforce=enforce,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             validation: pulumi.Input['VirtualGatewayTlsValidationContextArgs'],
             certificate: Optional[pulumi.Input['VirtualGatewayClientTlsCertificateArgs']] = None,
             enforce: Optional[pulumi.Input[bool]] = None,
             ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("validation", validation)
        if certificate is not None:
            _setter("certificate", certificate)
        if enforce is not None:
            _setter("enforce", enforce)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def validation(self) -> pulumi.Input['VirtualGatewayTlsValidationContextArgs']:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: pulumi.Input['VirtualGatewayTlsValidationContextArgs']):
        pulumi.set(self, "validation", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input['VirtualGatewayClientTlsCertificateArgs']]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input['VirtualGatewayClientTlsCertificateArgs']]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class VirtualGatewayClientPolicyArgs:
    def __init__(__self__, *,
                 tls: Optional[pulumi.Input['VirtualGatewayClientPolicyTlsArgs']] = None):
        VirtualGatewayClientPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tls: Optional[pulumi.Input['VirtualGatewayClientPolicyTlsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tls is not None:
            _setter("tls", tls)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualGatewayClientPolicyTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualGatewayClientPolicyTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualGatewayClientTlsCertificateArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']] = None):
        VirtualGatewayClientTlsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']] = None,
             sds: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualGatewayConnectionPoolArgs:
    def __init__(__self__, *,
                 grpc: Optional[pulumi.Input['VirtualGatewayGrpcConnectionPoolArgs']] = None,
                 http: Optional[pulumi.Input['VirtualGatewayHttpConnectionPoolArgs']] = None,
                 http2: Optional[pulumi.Input['VirtualGatewayHttp2ConnectionPoolArgs']] = None):
        VirtualGatewayConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grpc=grpc,
            http=http,
            http2=http2,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grpc: Optional[pulumi.Input['VirtualGatewayGrpcConnectionPoolArgs']] = None,
             http: Optional[pulumi.Input['VirtualGatewayHttpConnectionPoolArgs']] = None,
             http2: Optional[pulumi.Input['VirtualGatewayHttp2ConnectionPoolArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grpc is not None:
            _setter("grpc", grpc)
        if http is not None:
            _setter("http", http)
        if http2 is not None:
            _setter("http2", http2)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['VirtualGatewayGrpcConnectionPoolArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['VirtualGatewayGrpcConnectionPoolArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['VirtualGatewayHttpConnectionPoolArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['VirtualGatewayHttpConnectionPoolArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input['VirtualGatewayHttp2ConnectionPoolArgs']]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input['VirtualGatewayHttp2ConnectionPoolArgs']]):
        pulumi.set(self, "http2", value)


@pulumi.input_type
class VirtualGatewayFileAccessLogArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 format: Optional[pulumi.Input['VirtualGatewayLoggingFormatArgs']] = None):
        VirtualGatewayFileAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             format: Optional[pulumi.Input['VirtualGatewayLoggingFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("path", path)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['VirtualGatewayLoggingFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['VirtualGatewayLoggingFormatArgs']]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class VirtualGatewayGrpcConnectionPoolArgs:
    def __init__(__self__, *,
                 max_requests: pulumi.Input[int]):
        VirtualGatewayGrpcConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_requests=max_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_requests: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_requests", max_requests)

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_requests")

    @max_requests.setter
    def max_requests(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_requests", value)


@pulumi.input_type
class VirtualGatewayHealthCheckPolicyArgs:
    def __init__(__self__, *,
                 healthy_threshold: pulumi.Input[int],
                 interval_millis: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 timeout_millis: pulumi.Input[int],
                 unhealthy_threshold: pulumi.Input[int],
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        VirtualGatewayHealthCheckPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy_threshold=healthy_threshold,
            interval_millis=interval_millis,
            protocol=protocol,
            timeout_millis=timeout_millis,
            unhealthy_threshold=unhealthy_threshold,
            path=path,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy_threshold: pulumi.Input[int],
             interval_millis: pulumi.Input[int],
             protocol: pulumi.Input[str],
             timeout_millis: pulumi.Input[int],
             unhealthy_threshold: pulumi.Input[int],
             path: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("healthy_threshold", healthy_threshold)
        _setter("interval_millis", interval_millis)
        _setter("protocol", protocol)
        _setter("timeout_millis", timeout_millis)
        _setter("unhealthy_threshold", unhealthy_threshold)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="intervalMillis")
    def interval_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "interval_millis")

    @interval_millis.setter
    def interval_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval_millis", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeoutMillis")
    def timeout_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "timeout_millis")

    @timeout_millis.setter
    def timeout_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_millis", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "unhealthy_threshold", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class VirtualGatewayHttp2ConnectionPoolArgs:
    def __init__(__self__, *,
                 max_requests: pulumi.Input[int]):
        VirtualGatewayHttp2ConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_requests=max_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_requests: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_requests", max_requests)

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_requests")

    @max_requests.setter
    def max_requests(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_requests", value)


@pulumi.input_type
class VirtualGatewayHttpConnectionPoolArgs:
    def __init__(__self__, *,
                 max_connections: pulumi.Input[int],
                 max_pending_requests: Optional[pulumi.Input[int]] = None):
        VirtualGatewayHttpConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_connections=max_connections,
            max_pending_requests=max_pending_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_connections: pulumi.Input[int],
             max_pending_requests: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_connections", max_connections)
        if max_pending_requests is not None:
            _setter("max_pending_requests", max_pending_requests)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter(name="maxPendingRequests")
    def max_pending_requests(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pending_requests")

    @max_pending_requests.setter
    def max_pending_requests(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pending_requests", value)


@pulumi.input_type
class VirtualGatewayJsonFormatRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualGatewayJsonFormatRefArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualGatewayListenerTlsAcmCertificateArgs:
    def __init__(__self__, *,
                 certificate_arn: pulumi.Input[str]):
        VirtualGatewayListenerTlsAcmCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_arn=certificate_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_arn", certificate_arn)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_arn", value)


@pulumi.input_type
class VirtualGatewayListenerTlsCertificateArgs:
    def __init__(__self__, *,
                 acm: Optional[pulumi.Input['VirtualGatewayListenerTlsAcmCertificateArgs']] = None,
                 file: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']] = None):
        VirtualGatewayListenerTlsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm=acm,
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm: Optional[pulumi.Input['VirtualGatewayListenerTlsAcmCertificateArgs']] = None,
             file: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']] = None,
             sds: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acm is not None:
            _setter("acm", acm)
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsAcmCertificateArgs']]:
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsAcmCertificateArgs']]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsFileCertificateArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsSdsCertificateArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualGatewayListenerTlsFileCertificateArgs:
    def __init__(__self__, *,
                 certificate_chain: pulumi.Input[str],
                 private_key: pulumi.Input[str]):
        VirtualGatewayListenerTlsFileCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_chain=certificate_chain,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_chain: pulumi.Input[str],
             private_key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_chain", certificate_chain)
        _setter("private_key", private_key)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_chain", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class VirtualGatewayListenerTlsSdsCertificateArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str]):
        VirtualGatewayListenerTlsSdsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class VirtualGatewayListenerTlsValidationContextTrustArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']] = None):
        VirtualGatewayListenerTlsValidationContextTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']] = None,
             sds: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualGatewayListenerTlsValidationContextArgs:
    def __init__(__self__, *,
                 trust: pulumi.Input['VirtualGatewayListenerTlsValidationContextTrustArgs'],
                 subject_alternative_names: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']] = None):
        VirtualGatewayListenerTlsValidationContextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust=trust,
            subject_alternative_names=subject_alternative_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust: pulumi.Input['VirtualGatewayListenerTlsValidationContextTrustArgs'],
             subject_alternative_names: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("trust", trust)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter
    def trust(self) -> pulumi.Input['VirtualGatewayListenerTlsValidationContextTrustArgs']:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: pulumi.Input['VirtualGatewayListenerTlsValidationContextTrustArgs']):
        pulumi.set(self, "trust", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']]):
        pulumi.set(self, "subject_alternative_names", value)


@pulumi.input_type
class VirtualGatewayListenerTlsArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input['VirtualGatewayListenerTlsCertificateArgs'],
                 mode: pulumi.Input[str],
                 validation: Optional[pulumi.Input['VirtualGatewayListenerTlsValidationContextArgs']] = None):
        VirtualGatewayListenerTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate=certificate,
            mode=mode,
            validation=validation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate: pulumi.Input['VirtualGatewayListenerTlsCertificateArgs'],
             mode: pulumi.Input[str],
             validation: Optional[pulumi.Input['VirtualGatewayListenerTlsValidationContextArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate", certificate)
        _setter("mode", mode)
        if validation is not None:
            _setter("validation", validation)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input['VirtualGatewayListenerTlsCertificateArgs']:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input['VirtualGatewayListenerTlsCertificateArgs']):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsValidationContextArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsValidationContextArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class VirtualGatewayListenerArgs:
    def __init__(__self__, *,
                 port_mapping: pulumi.Input['VirtualGatewayPortMappingArgs'],
                 connection_pool: Optional[pulumi.Input['VirtualGatewayConnectionPoolArgs']] = None,
                 health_check: Optional[pulumi.Input['VirtualGatewayHealthCheckPolicyArgs']] = None,
                 tls: Optional[pulumi.Input['VirtualGatewayListenerTlsArgs']] = None):
        VirtualGatewayListenerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_mapping=port_mapping,
            connection_pool=connection_pool,
            health_check=health_check,
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_mapping: pulumi.Input['VirtualGatewayPortMappingArgs'],
             connection_pool: Optional[pulumi.Input['VirtualGatewayConnectionPoolArgs']] = None,
             health_check: Optional[pulumi.Input['VirtualGatewayHealthCheckPolicyArgs']] = None,
             tls: Optional[pulumi.Input['VirtualGatewayListenerTlsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_mapping", port_mapping)
        if connection_pool is not None:
            _setter("connection_pool", connection_pool)
        if health_check is not None:
            _setter("health_check", health_check)
        if tls is not None:
            _setter("tls", tls)

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> pulumi.Input['VirtualGatewayPortMappingArgs']:
        return pulumi.get(self, "port_mapping")

    @port_mapping.setter
    def port_mapping(self, value: pulumi.Input['VirtualGatewayPortMappingArgs']):
        pulumi.set(self, "port_mapping", value)

    @property
    @pulumi.getter(name="connectionPool")
    def connection_pool(self) -> Optional[pulumi.Input['VirtualGatewayConnectionPoolArgs']]:
        return pulumi.get(self, "connection_pool")

    @connection_pool.setter
    def connection_pool(self, value: Optional[pulumi.Input['VirtualGatewayConnectionPoolArgs']]):
        pulumi.set(self, "connection_pool", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['VirtualGatewayHealthCheckPolicyArgs']]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['VirtualGatewayHealthCheckPolicyArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualGatewayListenerTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualGatewayListenerTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualGatewayLoggingFormatArgs:
    def __init__(__self__, *,
                 json: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayJsonFormatRefArgs']]]] = None,
                 text: Optional[pulumi.Input[str]] = None):
        VirtualGatewayLoggingFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            json=json,
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             json: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayJsonFormatRefArgs']]]] = None,
             text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if json is not None:
            _setter("json", json)
        if text is not None:
            _setter("text", text)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayJsonFormatRefArgs']]]]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayJsonFormatRefArgs']]]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class VirtualGatewayLoggingArgs:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['VirtualGatewayAccessLogArgs']] = None):
        VirtualGatewayLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_log=access_log,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_log: Optional[pulumi.Input['VirtualGatewayAccessLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_log is not None:
            _setter("access_log", access_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['VirtualGatewayAccessLogArgs']]:
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['VirtualGatewayAccessLogArgs']]):
        pulumi.set(self, "access_log", value)


@pulumi.input_type
class VirtualGatewayPortMappingArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        VirtualGatewayPortMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: pulumi.Input[int],
             protocol: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class VirtualGatewaySpecArgs:
    def __init__(__self__, *,
                 listeners: pulumi.Input[Sequence[pulumi.Input['VirtualGatewayListenerArgs']]],
                 backend_defaults: Optional[pulumi.Input['VirtualGatewayBackendDefaultsArgs']] = None,
                 logging: Optional[pulumi.Input['VirtualGatewayLoggingArgs']] = None):
        VirtualGatewaySpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            listeners=listeners,
            backend_defaults=backend_defaults,
            logging=logging,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             listeners: pulumi.Input[Sequence[pulumi.Input['VirtualGatewayListenerArgs']]],
             backend_defaults: Optional[pulumi.Input['VirtualGatewayBackendDefaultsArgs']] = None,
             logging: Optional[pulumi.Input['VirtualGatewayLoggingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("listeners", listeners)
        if backend_defaults is not None:
            _setter("backend_defaults", backend_defaults)
        if logging is not None:
            _setter("logging", logging)

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Input[Sequence[pulumi.Input['VirtualGatewayListenerArgs']]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: pulumi.Input[Sequence[pulumi.Input['VirtualGatewayListenerArgs']]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter(name="backendDefaults")
    def backend_defaults(self) -> Optional[pulumi.Input['VirtualGatewayBackendDefaultsArgs']]:
        return pulumi.get(self, "backend_defaults")

    @backend_defaults.setter
    def backend_defaults(self, value: Optional[pulumi.Input['VirtualGatewayBackendDefaultsArgs']]):
        pulumi.set(self, "backend_defaults", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['VirtualGatewayLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['VirtualGatewayLoggingArgs']]):
        pulumi.set(self, "logging", value)


@pulumi.input_type
class VirtualGatewaySubjectAlternativeNameMatchersArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        VirtualGatewaySubjectAlternativeNameMatchersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class VirtualGatewaySubjectAlternativeNamesArgs:
    def __init__(__self__, *,
                 match: pulumi.Input['VirtualGatewaySubjectAlternativeNameMatchersArgs']):
        VirtualGatewaySubjectAlternativeNamesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: pulumi.Input['VirtualGatewaySubjectAlternativeNameMatchersArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match", match)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['VirtualGatewaySubjectAlternativeNameMatchersArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['VirtualGatewaySubjectAlternativeNameMatchersArgs']):
        pulumi.set(self, "match", value)


@pulumi.input_type
class VirtualGatewayTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualGatewayTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualGatewayTlsValidationContextAcmTrustArgs:
    def __init__(__self__, *,
                 certificate_authority_arns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        VirtualGatewayTlsValidationContextAcmTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_authority_arns=certificate_authority_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_authority_arns: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_authority_arns", certificate_authority_arns)

    @property
    @pulumi.getter(name="certificateAuthorityArns")
    def certificate_authority_arns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "certificate_authority_arns")

    @certificate_authority_arns.setter
    def certificate_authority_arns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "certificate_authority_arns", value)


@pulumi.input_type
class VirtualGatewayTlsValidationContextFileTrustArgs:
    def __init__(__self__, *,
                 certificate_chain: pulumi.Input[str]):
        VirtualGatewayTlsValidationContextFileTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_chain=certificate_chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_chain: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_chain", certificate_chain)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_chain", value)


@pulumi.input_type
class VirtualGatewayTlsValidationContextSdsTrustArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str]):
        VirtualGatewayTlsValidationContextSdsTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class VirtualGatewayTlsValidationContextTrustArgs:
    def __init__(__self__, *,
                 acm: Optional[pulumi.Input['VirtualGatewayTlsValidationContextAcmTrustArgs']] = None,
                 file: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']] = None):
        VirtualGatewayTlsValidationContextTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm=acm,
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm: Optional[pulumi.Input['VirtualGatewayTlsValidationContextAcmTrustArgs']] = None,
             file: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']] = None,
             sds: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acm is not None:
            _setter("acm", acm)
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input['VirtualGatewayTlsValidationContextAcmTrustArgs']]:
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input['VirtualGatewayTlsValidationContextAcmTrustArgs']]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualGatewayTlsValidationContextFileTrustArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualGatewayTlsValidationContextSdsTrustArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualGatewayTlsValidationContextArgs:
    def __init__(__self__, *,
                 trust: pulumi.Input['VirtualGatewayTlsValidationContextTrustArgs'],
                 subject_alternative_names: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']] = None):
        VirtualGatewayTlsValidationContextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust=trust,
            subject_alternative_names=subject_alternative_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust: pulumi.Input['VirtualGatewayTlsValidationContextTrustArgs'],
             subject_alternative_names: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("trust", trust)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter
    def trust(self) -> pulumi.Input['VirtualGatewayTlsValidationContextTrustArgs']:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: pulumi.Input['VirtualGatewayTlsValidationContextTrustArgs']):
        pulumi.set(self, "trust", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input['VirtualGatewaySubjectAlternativeNamesArgs']]):
        pulumi.set(self, "subject_alternative_names", value)


@pulumi.input_type
class VirtualNodeAccessLogArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualNodeFileAccessLogArgs']] = None):
        VirtualNodeAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualNodeFileAccessLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualNodeFileAccessLogArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualNodeFileAccessLogArgs']]):
        pulumi.set(self, "file", value)


@pulumi.input_type
class VirtualNodeAwsCloudMapInstanceAttributeArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualNodeAwsCloudMapInstanceAttributeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualNodeAwsCloudMapServiceDiscoveryArgs:
    def __init__(__self__, *,
                 namespace_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeAwsCloudMapInstanceAttributeArgs']]]] = None,
                 ip_preference: Optional[pulumi.Input[str]] = None):
        VirtualNodeAwsCloudMapServiceDiscoveryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            namespace_name=namespace_name,
            service_name=service_name,
            attributes=attributes,
            ip_preference=ip_preference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             namespace_name: pulumi.Input[str],
             service_name: pulumi.Input[str],
             attributes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeAwsCloudMapInstanceAttributeArgs']]]] = None,
             ip_preference: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("namespace_name", namespace_name)
        _setter("service_name", service_name)
        if attributes is not None:
            _setter("attributes", attributes)
        if ip_preference is not None:
            _setter("ip_preference", ip_preference)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeAwsCloudMapInstanceAttributeArgs']]]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeAwsCloudMapInstanceAttributeArgs']]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="ipPreference")
    def ip_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_preference")

    @ip_preference.setter
    def ip_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_preference", value)


@pulumi.input_type
class VirtualNodeBackendDefaultsArgs:
    def __init__(__self__, *,
                 client_policy: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']] = None):
        VirtualNodeBackendDefaultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_policy=client_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_policy: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_policy is not None:
            _setter("client_policy", client_policy)

    @property
    @pulumi.getter(name="clientPolicy")
    def client_policy(self) -> Optional[pulumi.Input['VirtualNodeClientPolicyArgs']]:
        return pulumi.get(self, "client_policy")

    @client_policy.setter
    def client_policy(self, value: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']]):
        pulumi.set(self, "client_policy", value)


@pulumi.input_type
class VirtualNodeBackendArgs:
    def __init__(__self__, *,
                 virtual_service: Optional[pulumi.Input['VirtualNodeVirtualServiceBackendArgs']] = None):
        VirtualNodeBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_service=virtual_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_service: Optional[pulumi.Input['VirtualNodeVirtualServiceBackendArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if virtual_service is not None:
            _setter("virtual_service", virtual_service)

    @property
    @pulumi.getter(name="virtualService")
    def virtual_service(self) -> Optional[pulumi.Input['VirtualNodeVirtualServiceBackendArgs']]:
        return pulumi.get(self, "virtual_service")

    @virtual_service.setter
    def virtual_service(self, value: Optional[pulumi.Input['VirtualNodeVirtualServiceBackendArgs']]):
        pulumi.set(self, "virtual_service", value)


@pulumi.input_type
class VirtualNodeClientPolicyTlsArgs:
    def __init__(__self__, *,
                 validation: pulumi.Input['VirtualNodeTlsValidationContextArgs'],
                 certificate: Optional[pulumi.Input['VirtualNodeClientTlsCertificateArgs']] = None,
                 enforce: Optional[pulumi.Input[bool]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        VirtualNodeClientPolicyTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            validation=validation,
            certificate=certificate,
            enforce=enforce,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             validation: pulumi.Input['VirtualNodeTlsValidationContextArgs'],
             certificate: Optional[pulumi.Input['VirtualNodeClientTlsCertificateArgs']] = None,
             enforce: Optional[pulumi.Input[bool]] = None,
             ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("validation", validation)
        if certificate is not None:
            _setter("certificate", certificate)
        if enforce is not None:
            _setter("enforce", enforce)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def validation(self) -> pulumi.Input['VirtualNodeTlsValidationContextArgs']:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: pulumi.Input['VirtualNodeTlsValidationContextArgs']):
        pulumi.set(self, "validation", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input['VirtualNodeClientTlsCertificateArgs']]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input['VirtualNodeClientTlsCertificateArgs']]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class VirtualNodeClientPolicyArgs:
    def __init__(__self__, *,
                 tls: Optional[pulumi.Input['VirtualNodeClientPolicyTlsArgs']] = None):
        VirtualNodeClientPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tls: Optional[pulumi.Input['VirtualNodeClientPolicyTlsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tls is not None:
            _setter("tls", tls)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualNodeClientPolicyTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualNodeClientPolicyTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualNodeClientTlsCertificateArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']] = None):
        VirtualNodeClientTlsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']] = None,
             sds: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualNodeConnectionPoolArgs:
    def __init__(__self__, *,
                 grpc: Optional[pulumi.Input['VirtualNodeGrpcConnectionPoolArgs']] = None,
                 http: Optional[pulumi.Input['VirtualNodeHttpConnectionPoolArgs']] = None,
                 http2: Optional[pulumi.Input['VirtualNodeHttp2ConnectionPoolArgs']] = None,
                 tcp: Optional[pulumi.Input['VirtualNodeTcpConnectionPoolArgs']] = None):
        VirtualNodeConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grpc=grpc,
            http=http,
            http2=http2,
            tcp=tcp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grpc: Optional[pulumi.Input['VirtualNodeGrpcConnectionPoolArgs']] = None,
             http: Optional[pulumi.Input['VirtualNodeHttpConnectionPoolArgs']] = None,
             http2: Optional[pulumi.Input['VirtualNodeHttp2ConnectionPoolArgs']] = None,
             tcp: Optional[pulumi.Input['VirtualNodeTcpConnectionPoolArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grpc is not None:
            _setter("grpc", grpc)
        if http is not None:
            _setter("http", http)
        if http2 is not None:
            _setter("http2", http2)
        if tcp is not None:
            _setter("tcp", tcp)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['VirtualNodeGrpcConnectionPoolArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['VirtualNodeGrpcConnectionPoolArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['VirtualNodeHttpConnectionPoolArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['VirtualNodeHttpConnectionPoolArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input['VirtualNodeHttp2ConnectionPoolArgs']]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input['VirtualNodeHttp2ConnectionPoolArgs']]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['VirtualNodeTcpConnectionPoolArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['VirtualNodeTcpConnectionPoolArgs']]):
        pulumi.set(self, "tcp", value)


@pulumi.input_type
class VirtualNodeDnsServiceDiscoveryArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 ip_preference: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None):
        VirtualNodeDnsServiceDiscoveryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            ip_preference=ip_preference,
            response_type=response_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: pulumi.Input[str],
             ip_preference: Optional[pulumi.Input[str]] = None,
             response_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hostname", hostname)
        if ip_preference is not None:
            _setter("ip_preference", ip_preference)
        if response_type is not None:
            _setter("response_type", response_type)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipPreference")
    def ip_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_preference")

    @ip_preference.setter
    def ip_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_preference", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)


@pulumi.input_type
class VirtualNodeDurationArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input[str],
                 value: pulumi.Input[int]):
        VirtualNodeDurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: pulumi.Input[str],
             value: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualNodeFileAccessLogArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 format: Optional[pulumi.Input['VirtualNodeLoggingFormatArgs']] = None):
        VirtualNodeFileAccessLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             format: Optional[pulumi.Input['VirtualNodeLoggingFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("path", path)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['VirtualNodeLoggingFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['VirtualNodeLoggingFormatArgs']]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class VirtualNodeGrpcConnectionPoolArgs:
    def __init__(__self__, *,
                 max_requests: pulumi.Input[int]):
        VirtualNodeGrpcConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_requests=max_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_requests: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_requests", max_requests)

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_requests")

    @max_requests.setter
    def max_requests(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_requests", value)


@pulumi.input_type
class VirtualNodeGrpcTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
                 per_request: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None):
        VirtualNodeGrpcTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
            per_request=per_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
             per_request: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)
        if per_request is not None:
            _setter("per_request", per_request)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['VirtualNodeDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['VirtualNodeDurationArgs']]):
        pulumi.set(self, "idle", value)

    @property
    @pulumi.getter(name="perRequest")
    def per_request(self) -> Optional[pulumi.Input['VirtualNodeDurationArgs']]:
        return pulumi.get(self, "per_request")

    @per_request.setter
    def per_request(self, value: Optional[pulumi.Input['VirtualNodeDurationArgs']]):
        pulumi.set(self, "per_request", value)


@pulumi.input_type
class VirtualNodeHealthCheckArgs:
    def __init__(__self__, *,
                 healthy_threshold: pulumi.Input[int],
                 interval_millis: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 timeout_millis: pulumi.Input[int],
                 unhealthy_threshold: pulumi.Input[int],
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        VirtualNodeHealthCheckArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy_threshold=healthy_threshold,
            interval_millis=interval_millis,
            protocol=protocol,
            timeout_millis=timeout_millis,
            unhealthy_threshold=unhealthy_threshold,
            path=path,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy_threshold: pulumi.Input[int],
             interval_millis: pulumi.Input[int],
             protocol: pulumi.Input[str],
             timeout_millis: pulumi.Input[int],
             unhealthy_threshold: pulumi.Input[int],
             path: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("healthy_threshold", healthy_threshold)
        _setter("interval_millis", interval_millis)
        _setter("protocol", protocol)
        _setter("timeout_millis", timeout_millis)
        _setter("unhealthy_threshold", unhealthy_threshold)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="intervalMillis")
    def interval_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "interval_millis")

    @interval_millis.setter
    def interval_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval_millis", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeoutMillis")
    def timeout_millis(self) -> pulumi.Input[int]:
        return pulumi.get(self, "timeout_millis")

    @timeout_millis.setter
    def timeout_millis(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout_millis", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "unhealthy_threshold", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class VirtualNodeHttp2ConnectionPoolArgs:
    def __init__(__self__, *,
                 max_requests: pulumi.Input[int]):
        VirtualNodeHttp2ConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_requests=max_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_requests: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_requests", max_requests)

    @property
    @pulumi.getter(name="maxRequests")
    def max_requests(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_requests")

    @max_requests.setter
    def max_requests(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_requests", value)


@pulumi.input_type
class VirtualNodeHttpConnectionPoolArgs:
    def __init__(__self__, *,
                 max_connections: pulumi.Input[int],
                 max_pending_requests: Optional[pulumi.Input[int]] = None):
        VirtualNodeHttpConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_connections=max_connections,
            max_pending_requests=max_pending_requests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_connections: pulumi.Input[int],
             max_pending_requests: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_connections", max_connections)
        if max_pending_requests is not None:
            _setter("max_pending_requests", max_pending_requests)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter(name="maxPendingRequests")
    def max_pending_requests(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pending_requests")

    @max_pending_requests.setter
    def max_pending_requests(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pending_requests", value)


@pulumi.input_type
class VirtualNodeHttpTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
                 per_request: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None):
        VirtualNodeHttpTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
            per_request=per_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
             per_request: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)
        if per_request is not None:
            _setter("per_request", per_request)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['VirtualNodeDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['VirtualNodeDurationArgs']]):
        pulumi.set(self, "idle", value)

    @property
    @pulumi.getter(name="perRequest")
    def per_request(self) -> Optional[pulumi.Input['VirtualNodeDurationArgs']]:
        return pulumi.get(self, "per_request")

    @per_request.setter
    def per_request(self, value: Optional[pulumi.Input['VirtualNodeDurationArgs']]):
        pulumi.set(self, "per_request", value)


@pulumi.input_type
class VirtualNodeJsonFormatRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualNodeJsonFormatRefArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualNodeListenerTimeoutArgs:
    def __init__(__self__, *,
                 grpc: Optional[pulumi.Input['VirtualNodeGrpcTimeoutArgs']] = None,
                 http: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']] = None,
                 http2: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']] = None,
                 tcp: Optional[pulumi.Input['VirtualNodeTcpTimeoutArgs']] = None):
        VirtualNodeListenerTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grpc=grpc,
            http=http,
            http2=http2,
            tcp=tcp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grpc: Optional[pulumi.Input['VirtualNodeGrpcTimeoutArgs']] = None,
             http: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']] = None,
             http2: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']] = None,
             tcp: Optional[pulumi.Input['VirtualNodeTcpTimeoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grpc is not None:
            _setter("grpc", grpc)
        if http is not None:
            _setter("http", http)
        if http2 is not None:
            _setter("http2", http2)
        if tcp is not None:
            _setter("tcp", tcp)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['VirtualNodeGrpcTimeoutArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['VirtualNodeGrpcTimeoutArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input['VirtualNodeHttpTimeoutArgs']]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['VirtualNodeTcpTimeoutArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['VirtualNodeTcpTimeoutArgs']]):
        pulumi.set(self, "tcp", value)


@pulumi.input_type
class VirtualNodeListenerTlsAcmCertificateArgs:
    def __init__(__self__, *,
                 certificate_arn: pulumi.Input[str]):
        VirtualNodeListenerTlsAcmCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_arn=certificate_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_arn", certificate_arn)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_arn")

    @certificate_arn.setter
    def certificate_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_arn", value)


@pulumi.input_type
class VirtualNodeListenerTlsCertificateArgs:
    def __init__(__self__, *,
                 acm: Optional[pulumi.Input['VirtualNodeListenerTlsAcmCertificateArgs']] = None,
                 file: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']] = None):
        VirtualNodeListenerTlsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm=acm,
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm: Optional[pulumi.Input['VirtualNodeListenerTlsAcmCertificateArgs']] = None,
             file: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']] = None,
             sds: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acm is not None:
            _setter("acm", acm)
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsAcmCertificateArgs']]:
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsAcmCertificateArgs']]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsFileCertificateArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsSdsCertificateArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualNodeListenerTlsFileCertificateArgs:
    def __init__(__self__, *,
                 certificate_chain: pulumi.Input[str],
                 private_key: pulumi.Input[str]):
        VirtualNodeListenerTlsFileCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_chain=certificate_chain,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_chain: pulumi.Input[str],
             private_key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_chain", certificate_chain)
        _setter("private_key", private_key)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_chain", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class VirtualNodeListenerTlsSdsCertificateArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str]):
        VirtualNodeListenerTlsSdsCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class VirtualNodeListenerTlsValidationContextTrustArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']] = None):
        VirtualNodeListenerTlsValidationContextTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             file: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']] = None,
             sds: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualNodeListenerTlsValidationContextArgs:
    def __init__(__self__, *,
                 trust: pulumi.Input['VirtualNodeListenerTlsValidationContextTrustArgs'],
                 subject_alternative_names: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']] = None):
        VirtualNodeListenerTlsValidationContextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust=trust,
            subject_alternative_names=subject_alternative_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust: pulumi.Input['VirtualNodeListenerTlsValidationContextTrustArgs'],
             subject_alternative_names: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("trust", trust)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter
    def trust(self) -> pulumi.Input['VirtualNodeListenerTlsValidationContextTrustArgs']:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: pulumi.Input['VirtualNodeListenerTlsValidationContextTrustArgs']):
        pulumi.set(self, "trust", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']]):
        pulumi.set(self, "subject_alternative_names", value)


@pulumi.input_type
class VirtualNodeListenerTlsArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input['VirtualNodeListenerTlsCertificateArgs'],
                 mode: pulumi.Input[str],
                 validation: Optional[pulumi.Input['VirtualNodeListenerTlsValidationContextArgs']] = None):
        VirtualNodeListenerTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate=certificate,
            mode=mode,
            validation=validation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate: pulumi.Input['VirtualNodeListenerTlsCertificateArgs'],
             mode: pulumi.Input[str],
             validation: Optional[pulumi.Input['VirtualNodeListenerTlsValidationContextArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate", certificate)
        _setter("mode", mode)
        if validation is not None:
            _setter("validation", validation)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input['VirtualNodeListenerTlsCertificateArgs']:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input['VirtualNodeListenerTlsCertificateArgs']):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsValidationContextArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsValidationContextArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class VirtualNodeListenerArgs:
    def __init__(__self__, *,
                 port_mapping: pulumi.Input['VirtualNodePortMappingArgs'],
                 connection_pool: Optional[pulumi.Input['VirtualNodeConnectionPoolArgs']] = None,
                 health_check: Optional[pulumi.Input['VirtualNodeHealthCheckArgs']] = None,
                 outlier_detection: Optional[pulumi.Input['VirtualNodeOutlierDetectionArgs']] = None,
                 timeout: Optional[pulumi.Input['VirtualNodeListenerTimeoutArgs']] = None,
                 tls: Optional[pulumi.Input['VirtualNodeListenerTlsArgs']] = None):
        VirtualNodeListenerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_mapping=port_mapping,
            connection_pool=connection_pool,
            health_check=health_check,
            outlier_detection=outlier_detection,
            timeout=timeout,
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_mapping: pulumi.Input['VirtualNodePortMappingArgs'],
             connection_pool: Optional[pulumi.Input['VirtualNodeConnectionPoolArgs']] = None,
             health_check: Optional[pulumi.Input['VirtualNodeHealthCheckArgs']] = None,
             outlier_detection: Optional[pulumi.Input['VirtualNodeOutlierDetectionArgs']] = None,
             timeout: Optional[pulumi.Input['VirtualNodeListenerTimeoutArgs']] = None,
             tls: Optional[pulumi.Input['VirtualNodeListenerTlsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_mapping", port_mapping)
        if connection_pool is not None:
            _setter("connection_pool", connection_pool)
        if health_check is not None:
            _setter("health_check", health_check)
        if outlier_detection is not None:
            _setter("outlier_detection", outlier_detection)
        if timeout is not None:
            _setter("timeout", timeout)
        if tls is not None:
            _setter("tls", tls)

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> pulumi.Input['VirtualNodePortMappingArgs']:
        return pulumi.get(self, "port_mapping")

    @port_mapping.setter
    def port_mapping(self, value: pulumi.Input['VirtualNodePortMappingArgs']):
        pulumi.set(self, "port_mapping", value)

    @property
    @pulumi.getter(name="connectionPool")
    def connection_pool(self) -> Optional[pulumi.Input['VirtualNodeConnectionPoolArgs']]:
        return pulumi.get(self, "connection_pool")

    @connection_pool.setter
    def connection_pool(self, value: Optional[pulumi.Input['VirtualNodeConnectionPoolArgs']]):
        pulumi.set(self, "connection_pool", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['VirtualNodeHealthCheckArgs']]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['VirtualNodeHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="outlierDetection")
    def outlier_detection(self) -> Optional[pulumi.Input['VirtualNodeOutlierDetectionArgs']]:
        return pulumi.get(self, "outlier_detection")

    @outlier_detection.setter
    def outlier_detection(self, value: Optional[pulumi.Input['VirtualNodeOutlierDetectionArgs']]):
        pulumi.set(self, "outlier_detection", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input['VirtualNodeListenerTimeoutArgs']]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input['VirtualNodeListenerTimeoutArgs']]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualNodeListenerTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualNodeListenerTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualNodeLoggingFormatArgs:
    def __init__(__self__, *,
                 json: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeJsonFormatRefArgs']]]] = None,
                 text: Optional[pulumi.Input[str]] = None):
        VirtualNodeLoggingFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            json=json,
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             json: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeJsonFormatRefArgs']]]] = None,
             text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if json is not None:
            _setter("json", json)
        if text is not None:
            _setter("text", text)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeJsonFormatRefArgs']]]]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeJsonFormatRefArgs']]]]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class VirtualNodeLoggingArgs:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['VirtualNodeAccessLogArgs']] = None):
        VirtualNodeLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_log=access_log,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_log: Optional[pulumi.Input['VirtualNodeAccessLogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_log is not None:
            _setter("access_log", access_log)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['VirtualNodeAccessLogArgs']]:
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['VirtualNodeAccessLogArgs']]):
        pulumi.set(self, "access_log", value)


@pulumi.input_type
class VirtualNodeOutlierDetectionArgs:
    def __init__(__self__, *,
                 base_ejection_duration: pulumi.Input['VirtualNodeDurationArgs'],
                 interval: pulumi.Input['VirtualNodeDurationArgs'],
                 max_ejection_percent: pulumi.Input[int],
                 max_server_errors: pulumi.Input[int]):
        VirtualNodeOutlierDetectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_ejection_duration=base_ejection_duration,
            interval=interval,
            max_ejection_percent=max_ejection_percent,
            max_server_errors=max_server_errors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_ejection_duration: pulumi.Input['VirtualNodeDurationArgs'],
             interval: pulumi.Input['VirtualNodeDurationArgs'],
             max_ejection_percent: pulumi.Input[int],
             max_server_errors: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("base_ejection_duration", base_ejection_duration)
        _setter("interval", interval)
        _setter("max_ejection_percent", max_ejection_percent)
        _setter("max_server_errors", max_server_errors)

    @property
    @pulumi.getter(name="baseEjectionDuration")
    def base_ejection_duration(self) -> pulumi.Input['VirtualNodeDurationArgs']:
        return pulumi.get(self, "base_ejection_duration")

    @base_ejection_duration.setter
    def base_ejection_duration(self, value: pulumi.Input['VirtualNodeDurationArgs']):
        pulumi.set(self, "base_ejection_duration", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input['VirtualNodeDurationArgs']:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input['VirtualNodeDurationArgs']):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="maxEjectionPercent")
    def max_ejection_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_ejection_percent")

    @max_ejection_percent.setter
    def max_ejection_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_ejection_percent", value)

    @property
    @pulumi.getter(name="maxServerErrors")
    def max_server_errors(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_server_errors")

    @max_server_errors.setter
    def max_server_errors(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_server_errors", value)


@pulumi.input_type
class VirtualNodePortMappingArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        VirtualNodePortMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: pulumi.Input[int],
             protocol: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class VirtualNodeServiceDiscoveryArgs:
    def __init__(__self__, *,
                 aws_cloud_map: Optional[pulumi.Input['VirtualNodeAwsCloudMapServiceDiscoveryArgs']] = None,
                 dns: Optional[pulumi.Input['VirtualNodeDnsServiceDiscoveryArgs']] = None):
        VirtualNodeServiceDiscoveryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_cloud_map=aws_cloud_map,
            dns=dns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_cloud_map: Optional[pulumi.Input['VirtualNodeAwsCloudMapServiceDiscoveryArgs']] = None,
             dns: Optional[pulumi.Input['VirtualNodeDnsServiceDiscoveryArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_cloud_map is not None:
            _setter("aws_cloud_map", aws_cloud_map)
        if dns is not None:
            _setter("dns", dns)

    @property
    @pulumi.getter(name="awsCloudMap")
    def aws_cloud_map(self) -> Optional[pulumi.Input['VirtualNodeAwsCloudMapServiceDiscoveryArgs']]:
        return pulumi.get(self, "aws_cloud_map")

    @aws_cloud_map.setter
    def aws_cloud_map(self, value: Optional[pulumi.Input['VirtualNodeAwsCloudMapServiceDiscoveryArgs']]):
        pulumi.set(self, "aws_cloud_map", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['VirtualNodeDnsServiceDiscoveryArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['VirtualNodeDnsServiceDiscoveryArgs']]):
        pulumi.set(self, "dns", value)


@pulumi.input_type
class VirtualNodeSpecArgs:
    def __init__(__self__, *,
                 backend_defaults: Optional[pulumi.Input['VirtualNodeBackendDefaultsArgs']] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeBackendArgs']]]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeListenerArgs']]]] = None,
                 logging: Optional[pulumi.Input['VirtualNodeLoggingArgs']] = None,
                 service_discovery: Optional[pulumi.Input['VirtualNodeServiceDiscoveryArgs']] = None):
        VirtualNodeSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backend_defaults=backend_defaults,
            backends=backends,
            listeners=listeners,
            logging=logging,
            service_discovery=service_discovery,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backend_defaults: Optional[pulumi.Input['VirtualNodeBackendDefaultsArgs']] = None,
             backends: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeBackendArgs']]]] = None,
             listeners: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeListenerArgs']]]] = None,
             logging: Optional[pulumi.Input['VirtualNodeLoggingArgs']] = None,
             service_discovery: Optional[pulumi.Input['VirtualNodeServiceDiscoveryArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if backend_defaults is not None:
            _setter("backend_defaults", backend_defaults)
        if backends is not None:
            _setter("backends", backends)
        if listeners is not None:
            _setter("listeners", listeners)
        if logging is not None:
            _setter("logging", logging)
        if service_discovery is not None:
            _setter("service_discovery", service_discovery)

    @property
    @pulumi.getter(name="backendDefaults")
    def backend_defaults(self) -> Optional[pulumi.Input['VirtualNodeBackendDefaultsArgs']]:
        return pulumi.get(self, "backend_defaults")

    @backend_defaults.setter
    def backend_defaults(self, value: Optional[pulumi.Input['VirtualNodeBackendDefaultsArgs']]):
        pulumi.set(self, "backend_defaults", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeBackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeListenerArgs']]]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNodeListenerArgs']]]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['VirtualNodeLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['VirtualNodeLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter(name="serviceDiscovery")
    def service_discovery(self) -> Optional[pulumi.Input['VirtualNodeServiceDiscoveryArgs']]:
        return pulumi.get(self, "service_discovery")

    @service_discovery.setter
    def service_discovery(self, value: Optional[pulumi.Input['VirtualNodeServiceDiscoveryArgs']]):
        pulumi.set(self, "service_discovery", value)


@pulumi.input_type
class VirtualNodeSubjectAlternativeNameMatchersArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        VirtualNodeSubjectAlternativeNameMatchersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class VirtualNodeSubjectAlternativeNamesArgs:
    def __init__(__self__, *,
                 match: pulumi.Input['VirtualNodeSubjectAlternativeNameMatchersArgs']):
        VirtualNodeSubjectAlternativeNamesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: pulumi.Input['VirtualNodeSubjectAlternativeNameMatchersArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match", match)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input['VirtualNodeSubjectAlternativeNameMatchersArgs']:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input['VirtualNodeSubjectAlternativeNameMatchersArgs']):
        pulumi.set(self, "match", value)


@pulumi.input_type
class VirtualNodeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualNodeTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualNodeTcpConnectionPoolArgs:
    def __init__(__self__, *,
                 max_connections: pulumi.Input[int]):
        VirtualNodeTcpConnectionPoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_connections=max_connections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_connections: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_connections", max_connections)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_connections", value)


@pulumi.input_type
class VirtualNodeTcpTimeoutArgs:
    def __init__(__self__, *,
                 idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None):
        VirtualNodeTcpTimeoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle=idle,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle: Optional[pulumi.Input['VirtualNodeDurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if idle is not None:
            _setter("idle", idle)

    @property
    @pulumi.getter
    def idle(self) -> Optional[pulumi.Input['VirtualNodeDurationArgs']]:
        return pulumi.get(self, "idle")

    @idle.setter
    def idle(self, value: Optional[pulumi.Input['VirtualNodeDurationArgs']]):
        pulumi.set(self, "idle", value)


@pulumi.input_type
class VirtualNodeTlsValidationContextAcmTrustArgs:
    def __init__(__self__, *,
                 certificate_authority_arns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        VirtualNodeTlsValidationContextAcmTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_authority_arns=certificate_authority_arns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_authority_arns: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_authority_arns", certificate_authority_arns)

    @property
    @pulumi.getter(name="certificateAuthorityArns")
    def certificate_authority_arns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "certificate_authority_arns")

    @certificate_authority_arns.setter
    def certificate_authority_arns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "certificate_authority_arns", value)


@pulumi.input_type
class VirtualNodeTlsValidationContextFileTrustArgs:
    def __init__(__self__, *,
                 certificate_chain: pulumi.Input[str]):
        VirtualNodeTlsValidationContextFileTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_chain=certificate_chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_chain: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_chain", certificate_chain)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_chain")

    @certificate_chain.setter
    def certificate_chain(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_chain", value)


@pulumi.input_type
class VirtualNodeTlsValidationContextSdsTrustArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str]):
        VirtualNodeTlsValidationContextSdsTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_name=secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class VirtualNodeTlsValidationContextTrustArgs:
    def __init__(__self__, *,
                 acm: Optional[pulumi.Input['VirtualNodeTlsValidationContextAcmTrustArgs']] = None,
                 file: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']] = None,
                 sds: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']] = None):
        VirtualNodeTlsValidationContextTrustArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm=acm,
            file=file,
            sds=sds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm: Optional[pulumi.Input['VirtualNodeTlsValidationContextAcmTrustArgs']] = None,
             file: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']] = None,
             sds: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acm is not None:
            _setter("acm", acm)
        if file is not None:
            _setter("file", file)
        if sds is not None:
            _setter("sds", sds)

    @property
    @pulumi.getter
    def acm(self) -> Optional[pulumi.Input['VirtualNodeTlsValidationContextAcmTrustArgs']]:
        return pulumi.get(self, "acm")

    @acm.setter
    def acm(self, value: Optional[pulumi.Input['VirtualNodeTlsValidationContextAcmTrustArgs']]):
        pulumi.set(self, "acm", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['VirtualNodeTlsValidationContextFileTrustArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def sds(self) -> Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']]:
        return pulumi.get(self, "sds")

    @sds.setter
    def sds(self, value: Optional[pulumi.Input['VirtualNodeTlsValidationContextSdsTrustArgs']]):
        pulumi.set(self, "sds", value)


@pulumi.input_type
class VirtualNodeTlsValidationContextArgs:
    def __init__(__self__, *,
                 trust: pulumi.Input['VirtualNodeTlsValidationContextTrustArgs'],
                 subject_alternative_names: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']] = None):
        VirtualNodeTlsValidationContextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust=trust,
            subject_alternative_names=subject_alternative_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust: pulumi.Input['VirtualNodeTlsValidationContextTrustArgs'],
             subject_alternative_names: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("trust", trust)
        if subject_alternative_names is not None:
            _setter("subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter
    def trust(self) -> pulumi.Input['VirtualNodeTlsValidationContextTrustArgs']:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: pulumi.Input['VirtualNodeTlsValidationContextTrustArgs']):
        pulumi.set(self, "trust", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input['VirtualNodeSubjectAlternativeNamesArgs']]):
        pulumi.set(self, "subject_alternative_names", value)


@pulumi.input_type
class VirtualNodeVirtualServiceBackendArgs:
    def __init__(__self__, *,
                 virtual_service_name: pulumi.Input[str],
                 client_policy: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']] = None):
        VirtualNodeVirtualServiceBackendArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_service_name=virtual_service_name,
            client_policy=client_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_service_name: pulumi.Input[str],
             client_policy: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_service_name", virtual_service_name)
        if client_policy is not None:
            _setter("client_policy", client_policy)

    @property
    @pulumi.getter(name="virtualServiceName")
    def virtual_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_service_name")

    @virtual_service_name.setter
    def virtual_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_service_name", value)

    @property
    @pulumi.getter(name="clientPolicy")
    def client_policy(self) -> Optional[pulumi.Input['VirtualNodeClientPolicyArgs']]:
        return pulumi.get(self, "client_policy")

    @client_policy.setter
    def client_policy(self, value: Optional[pulumi.Input['VirtualNodeClientPolicyArgs']]):
        pulumi.set(self, "client_policy", value)


@pulumi.input_type
class VirtualRouterListenerArgs:
    def __init__(__self__, *,
                 port_mapping: pulumi.Input['VirtualRouterPortMappingArgs']):
        VirtualRouterListenerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port_mapping=port_mapping,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port_mapping: pulumi.Input['VirtualRouterPortMappingArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port_mapping", port_mapping)

    @property
    @pulumi.getter(name="portMapping")
    def port_mapping(self) -> pulumi.Input['VirtualRouterPortMappingArgs']:
        return pulumi.get(self, "port_mapping")

    @port_mapping.setter
    def port_mapping(self, value: pulumi.Input['VirtualRouterPortMappingArgs']):
        pulumi.set(self, "port_mapping", value)


@pulumi.input_type
class VirtualRouterPortMappingArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        VirtualRouterPortMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            port=port,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             port: pulumi.Input[int],
             protocol: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("port", port)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class VirtualRouterSpecArgs:
    def __init__(__self__, *,
                 listeners: pulumi.Input[Sequence[pulumi.Input['VirtualRouterListenerArgs']]]):
        VirtualRouterSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            listeners=listeners,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             listeners: pulumi.Input[Sequence[pulumi.Input['VirtualRouterListenerArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("listeners", listeners)

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Input[Sequence[pulumi.Input['VirtualRouterListenerArgs']]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: pulumi.Input[Sequence[pulumi.Input['VirtualRouterListenerArgs']]]):
        pulumi.set(self, "listeners", value)


@pulumi.input_type
class VirtualRouterTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualRouterTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServiceProviderArgs:
    def __init__(__self__, *,
                 virtual_node: Optional[pulumi.Input['VirtualServiceVirtualNodeServiceProviderArgs']] = None,
                 virtual_router: Optional[pulumi.Input['VirtualServiceVirtualRouterServiceProviderArgs']] = None):
        VirtualServiceProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_node=virtual_node,
            virtual_router=virtual_router,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_node: Optional[pulumi.Input['VirtualServiceVirtualNodeServiceProviderArgs']] = None,
             virtual_router: Optional[pulumi.Input['VirtualServiceVirtualRouterServiceProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if virtual_node is not None:
            _setter("virtual_node", virtual_node)
        if virtual_router is not None:
            _setter("virtual_router", virtual_router)

    @property
    @pulumi.getter(name="virtualNode")
    def virtual_node(self) -> Optional[pulumi.Input['VirtualServiceVirtualNodeServiceProviderArgs']]:
        return pulumi.get(self, "virtual_node")

    @virtual_node.setter
    def virtual_node(self, value: Optional[pulumi.Input['VirtualServiceVirtualNodeServiceProviderArgs']]):
        pulumi.set(self, "virtual_node", value)

    @property
    @pulumi.getter(name="virtualRouter")
    def virtual_router(self) -> Optional[pulumi.Input['VirtualServiceVirtualRouterServiceProviderArgs']]:
        return pulumi.get(self, "virtual_router")

    @virtual_router.setter
    def virtual_router(self, value: Optional[pulumi.Input['VirtualServiceVirtualRouterServiceProviderArgs']]):
        pulumi.set(self, "virtual_router", value)


@pulumi.input_type
class VirtualServiceSpecArgs:
    def __init__(__self__, *,
                 provider: Optional[pulumi.Input['VirtualServiceProviderArgs']] = None):
        VirtualServiceSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            provider=provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             provider: Optional[pulumi.Input['VirtualServiceProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if provider is not None:
            _setter("provider", provider)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input['VirtualServiceProviderArgs']]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input['VirtualServiceProviderArgs']]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class VirtualServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VirtualServiceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServiceVirtualNodeServiceProviderArgs:
    def __init__(__self__, *,
                 virtual_node_name: pulumi.Input[str]):
        VirtualServiceVirtualNodeServiceProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_node_name=virtual_node_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_node_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_node_name", virtual_node_name)

    @property
    @pulumi.getter(name="virtualNodeName")
    def virtual_node_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_node_name")

    @virtual_node_name.setter
    def virtual_node_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_node_name", value)


@pulumi.input_type
class VirtualServiceVirtualRouterServiceProviderArgs:
    def __init__(__self__, *,
                 virtual_router_name: pulumi.Input[str]):
        VirtualServiceVirtualRouterServiceProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_router_name=virtual_router_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_router_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("virtual_router_name", virtual_router_name)

    @property
    @pulumi.getter(name="virtualRouterName")
    def virtual_router_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_router_name")

    @virtual_router_name.setter
    def virtual_router_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_router_name", value)


