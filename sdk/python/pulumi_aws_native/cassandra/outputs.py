# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'KeyspaceReplicationSpecification',
    'KeyspaceTag',
    'TableBillingMode',
    'TableClusteringKeyColumn',
    'TableColumn',
    'TableEncryptionSpecification',
    'TableProvisionedThroughput',
    'TableTag',
]

@pulumi.output_type
class KeyspaceReplicationSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionList":
            suggest = "region_list"
        elif key == "replicationStrategy":
            suggest = "replication_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeyspaceReplicationSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeyspaceReplicationSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeyspaceReplicationSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_list: Optional[Sequence['KeyspaceRegionListItem']] = None,
                 replication_strategy: Optional['KeyspaceReplicationSpecificationReplicationStrategy'] = None):
        KeyspaceReplicationSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region_list=region_list,
            replication_strategy=replication_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region_list: Optional[Sequence['KeyspaceRegionListItem']] = None,
             replication_strategy: Optional['KeyspaceReplicationSpecificationReplicationStrategy'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if region_list is None and 'regionList' in kwargs:
            region_list = kwargs['regionList']
        if replication_strategy is None and 'replicationStrategy' in kwargs:
            replication_strategy = kwargs['replicationStrategy']

        if region_list is not None:
            _setter("region_list", region_list)
        if replication_strategy is not None:
            _setter("replication_strategy", replication_strategy)

    @property
    @pulumi.getter(name="regionList")
    def region_list(self) -> Optional[Sequence['KeyspaceRegionListItem']]:
        return pulumi.get(self, "region_list")

    @property
    @pulumi.getter(name="replicationStrategy")
    def replication_strategy(self) -> Optional['KeyspaceReplicationSpecificationReplicationStrategy']:
        return pulumi.get(self, "replication_strategy")


@pulumi.output_type
class KeyspaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        KeyspaceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TableBillingMode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisionedThroughput":
            suggest = "provisioned_throughput"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableBillingMode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableBillingMode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableBillingMode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: 'TableMode',
                 provisioned_throughput: Optional['outputs.TableProvisionedThroughput'] = None):
        TableBillingMode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            provisioned_throughput=provisioned_throughput,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional['TableMode'] = None,
             provisioned_throughput: Optional['outputs.TableProvisionedThroughput'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mode is None:
            raise TypeError("Missing 'mode' argument")
        if provisioned_throughput is None and 'provisionedThroughput' in kwargs:
            provisioned_throughput = kwargs['provisionedThroughput']

        _setter("mode", mode)
        if provisioned_throughput is not None:
            _setter("provisioned_throughput", provisioned_throughput)

    @property
    @pulumi.getter
    def mode(self) -> 'TableMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="provisionedThroughput")
    def provisioned_throughput(self) -> Optional['outputs.TableProvisionedThroughput']:
        return pulumi.get(self, "provisioned_throughput")


@pulumi.output_type
class TableClusteringKeyColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orderBy":
            suggest = "order_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableClusteringKeyColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableClusteringKeyColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableClusteringKeyColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column: 'outputs.TableColumn',
                 order_by: Optional['TableClusteringKeyColumnOrderBy'] = None):
        TableClusteringKeyColumn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            order_by=order_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: Optional['outputs.TableColumn'] = None,
             order_by: Optional['TableClusteringKeyColumnOrderBy'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if column is None:
            raise TypeError("Missing 'column' argument")
        if order_by is None and 'orderBy' in kwargs:
            order_by = kwargs['orderBy']

        _setter("column", column)
        if order_by is not None:
            _setter("order_by", order_by)

    @property
    @pulumi.getter
    def column(self) -> 'outputs.TableColumn':
        return pulumi.get(self, "column")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional['TableClusteringKeyColumnOrderBy']:
        return pulumi.get(self, "order_by")


@pulumi.output_type
class TableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "columnType":
            suggest = "column_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 column_type: str):
        TableColumn._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            column_type=column_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: Optional[str] = None,
             column_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if column_name is None and 'columnName' in kwargs:
            column_name = kwargs['columnName']
        if column_name is None:
            raise TypeError("Missing 'column_name' argument")
        if column_type is None and 'columnType' in kwargs:
            column_type = kwargs['columnType']
        if column_type is None:
            raise TypeError("Missing 'column_type' argument")

        _setter("column_name", column_name)
        _setter("column_type", column_type)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="columnType")
    def column_type(self) -> str:
        return pulumi.get(self, "column_type")


@pulumi.output_type
class TableEncryptionSpecification(dict):
    """
    Represents the settings used to enable server-side encryption
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKeyIdentifier":
            suggest = "kms_key_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableEncryptionSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableEncryptionSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableEncryptionSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: 'TableEncryptionType',
                 kms_key_identifier: Optional[str] = None):
        """
        Represents the settings used to enable server-side encryption
        """
        TableEncryptionSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_type=encryption_type,
            kms_key_identifier=kms_key_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_type: Optional['TableEncryptionType'] = None,
             kms_key_identifier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if encryption_type is None and 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if encryption_type is None:
            raise TypeError("Missing 'encryption_type' argument")
        if kms_key_identifier is None and 'kmsKeyIdentifier' in kwargs:
            kms_key_identifier = kwargs['kmsKeyIdentifier']

        _setter("encryption_type", encryption_type)
        if kms_key_identifier is not None:
            _setter("kms_key_identifier", kms_key_identifier)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> 'TableEncryptionType':
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsKeyIdentifier")
    def kms_key_identifier(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_identifier")


@pulumi.output_type
class TableProvisionedThroughput(dict):
    """
    Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readCapacityUnits":
            suggest = "read_capacity_units"
        elif key == "writeCapacityUnits":
            suggest = "write_capacity_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableProvisionedThroughput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableProvisionedThroughput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableProvisionedThroughput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 read_capacity_units: int,
                 write_capacity_units: int):
        """
        Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
        """
        TableProvisionedThroughput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            read_capacity_units=read_capacity_units,
            write_capacity_units=write_capacity_units,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             read_capacity_units: Optional[int] = None,
             write_capacity_units: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if read_capacity_units is None and 'readCapacityUnits' in kwargs:
            read_capacity_units = kwargs['readCapacityUnits']
        if read_capacity_units is None:
            raise TypeError("Missing 'read_capacity_units' argument")
        if write_capacity_units is None and 'writeCapacityUnits' in kwargs:
            write_capacity_units = kwargs['writeCapacityUnits']
        if write_capacity_units is None:
            raise TypeError("Missing 'write_capacity_units' argument")

        _setter("read_capacity_units", read_capacity_units)
        _setter("write_capacity_units", write_capacity_units)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> int:
        return pulumi.get(self, "read_capacity_units")

    @property
    @pulumi.getter(name="writeCapacityUnits")
    def write_capacity_units(self) -> int:
        return pulumi.get(self, "write_capacity_units")


@pulumi.output_type
class TableTag(dict):
    """
    A key-value pair to apply to the resource
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to apply to the resource
        """
        TableTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


