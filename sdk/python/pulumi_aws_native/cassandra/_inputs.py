# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'KeyspaceReplicationSpecificationArgs',
    'KeyspaceTagArgs',
    'TableAutoScalingSettingArgs',
    'TableAutoScalingSpecificationArgs',
    'TableBillingModeArgs',
    'TableClusteringKeyColumnArgs',
    'TableColumnArgs',
    'TableEncryptionSpecificationArgs',
    'TableProvisionedThroughputArgs',
    'TableReplicaSpecificationArgs',
    'TableScalingPolicyArgs',
    'TableTagArgs',
    'TableTargetTrackingScalingPolicyConfigurationArgs',
]

@pulumi.input_type
class KeyspaceReplicationSpecificationArgs:
    def __init__(__self__, *,
                 region_list: Optional[pulumi.Input[Sequence[pulumi.Input['KeyspaceRegionListItem']]]] = None,
                 replication_strategy: Optional[pulumi.Input['KeyspaceReplicationSpecificationReplicationStrategy']] = None):
        if region_list is not None:
            pulumi.set(__self__, "region_list", region_list)
        if replication_strategy is not None:
            pulumi.set(__self__, "replication_strategy", replication_strategy)

    @property
    @pulumi.getter(name="regionList")
    def region_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyspaceRegionListItem']]]]:
        return pulumi.get(self, "region_list")

    @region_list.setter
    def region_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyspaceRegionListItem']]]]):
        pulumi.set(self, "region_list", value)

    @property
    @pulumi.getter(name="replicationStrategy")
    def replication_strategy(self) -> Optional[pulumi.Input['KeyspaceReplicationSpecificationReplicationStrategy']]:
        return pulumi.get(self, "replication_strategy")

    @replication_strategy.setter
    def replication_strategy(self, value: Optional[pulumi.Input['KeyspaceReplicationSpecificationReplicationStrategy']]):
        pulumi.set(self, "replication_strategy", value)


@pulumi.input_type
class KeyspaceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TableAutoScalingSettingArgs:
    def __init__(__self__, *,
                 auto_scaling_disabled: Optional[pulumi.Input[bool]] = None,
                 maximum_units: Optional[pulumi.Input[int]] = None,
                 minimum_units: Optional[pulumi.Input[int]] = None,
                 scaling_policy: Optional[pulumi.Input['TableScalingPolicyArgs']] = None):
        """
        Represents configuration for auto scaling.
        """
        if auto_scaling_disabled is not None:
            pulumi.set(__self__, "auto_scaling_disabled", auto_scaling_disabled)
        if maximum_units is not None:
            pulumi.set(__self__, "maximum_units", maximum_units)
        if minimum_units is not None:
            pulumi.set(__self__, "minimum_units", minimum_units)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="autoScalingDisabled")
    def auto_scaling_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_scaling_disabled")

    @auto_scaling_disabled.setter
    def auto_scaling_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scaling_disabled", value)

    @property
    @pulumi.getter(name="maximumUnits")
    def maximum_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_units")

    @maximum_units.setter
    def maximum_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_units", value)

    @property
    @pulumi.getter(name="minimumUnits")
    def minimum_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_units")

    @minimum_units.setter
    def minimum_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_units", value)

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[pulumi.Input['TableScalingPolicyArgs']]:
        return pulumi.get(self, "scaling_policy")

    @scaling_policy.setter
    def scaling_policy(self, value: Optional[pulumi.Input['TableScalingPolicyArgs']]):
        pulumi.set(self, "scaling_policy", value)


@pulumi.input_type
class TableAutoScalingSpecificationArgs:
    def __init__(__self__, *,
                 read_capacity_auto_scaling: Optional[pulumi.Input['TableAutoScalingSettingArgs']] = None,
                 write_capacity_auto_scaling: Optional[pulumi.Input['TableAutoScalingSettingArgs']] = None):
        """
        Represents the read and write settings used for AutoScaling.
        """
        if read_capacity_auto_scaling is not None:
            pulumi.set(__self__, "read_capacity_auto_scaling", read_capacity_auto_scaling)
        if write_capacity_auto_scaling is not None:
            pulumi.set(__self__, "write_capacity_auto_scaling", write_capacity_auto_scaling)

    @property
    @pulumi.getter(name="readCapacityAutoScaling")
    def read_capacity_auto_scaling(self) -> Optional[pulumi.Input['TableAutoScalingSettingArgs']]:
        return pulumi.get(self, "read_capacity_auto_scaling")

    @read_capacity_auto_scaling.setter
    def read_capacity_auto_scaling(self, value: Optional[pulumi.Input['TableAutoScalingSettingArgs']]):
        pulumi.set(self, "read_capacity_auto_scaling", value)

    @property
    @pulumi.getter(name="writeCapacityAutoScaling")
    def write_capacity_auto_scaling(self) -> Optional[pulumi.Input['TableAutoScalingSettingArgs']]:
        return pulumi.get(self, "write_capacity_auto_scaling")

    @write_capacity_auto_scaling.setter
    def write_capacity_auto_scaling(self, value: Optional[pulumi.Input['TableAutoScalingSettingArgs']]):
        pulumi.set(self, "write_capacity_auto_scaling", value)


@pulumi.input_type
class TableBillingModeArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input['TableMode'],
                 provisioned_throughput: Optional[pulumi.Input['TableProvisionedThroughputArgs']] = None):
        pulumi.set(__self__, "mode", mode)
        if provisioned_throughput is not None:
            pulumi.set(__self__, "provisioned_throughput", provisioned_throughput)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input['TableMode']:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input['TableMode']):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="provisionedThroughput")
    def provisioned_throughput(self) -> Optional[pulumi.Input['TableProvisionedThroughputArgs']]:
        return pulumi.get(self, "provisioned_throughput")

    @provisioned_throughput.setter
    def provisioned_throughput(self, value: Optional[pulumi.Input['TableProvisionedThroughputArgs']]):
        pulumi.set(self, "provisioned_throughput", value)


@pulumi.input_type
class TableClusteringKeyColumnArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TableColumnArgs'],
                 order_by: Optional[pulumi.Input['TableClusteringKeyColumnOrderBy']] = None):
        pulumi.set(__self__, "column", column)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TableColumnArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TableColumnArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input['TableClusteringKeyColumnOrderBy']]:
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input['TableClusteringKeyColumnOrderBy']]):
        pulumi.set(self, "order_by", value)


@pulumi.input_type
class TableColumnArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 column_type: pulumi.Input[str]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "column_type", column_type)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnType")
    def column_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_type")

    @column_type.setter
    def column_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_type", value)


@pulumi.input_type
class TableEncryptionSpecificationArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input['TableEncryptionType'],
                 kms_key_identifier: Optional[pulumi.Input[str]] = None):
        """
        Represents the settings used to enable server-side encryption
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        if kms_key_identifier is not None:
            pulumi.set(__self__, "kms_key_identifier", kms_key_identifier)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input['TableEncryptionType']:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input['TableEncryptionType']):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="kmsKeyIdentifier")
    def kms_key_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_identifier")

    @kms_key_identifier.setter
    def kms_key_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_identifier", value)


@pulumi.input_type
class TableProvisionedThroughputArgs:
    def __init__(__self__, *,
                 read_capacity_units: pulumi.Input[int],
                 write_capacity_units: pulumi.Input[int]):
        """
        Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
        """
        pulumi.set(__self__, "read_capacity_units", read_capacity_units)
        pulumi.set(__self__, "write_capacity_units", write_capacity_units)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> pulumi.Input[int]:
        return pulumi.get(self, "read_capacity_units")

    @read_capacity_units.setter
    def read_capacity_units(self, value: pulumi.Input[int]):
        pulumi.set(self, "read_capacity_units", value)

    @property
    @pulumi.getter(name="writeCapacityUnits")
    def write_capacity_units(self) -> pulumi.Input[int]:
        return pulumi.get(self, "write_capacity_units")

    @write_capacity_units.setter
    def write_capacity_units(self, value: pulumi.Input[int]):
        pulumi.set(self, "write_capacity_units", value)


@pulumi.input_type
class TableReplicaSpecificationArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 read_capacity_auto_scaling: Optional[pulumi.Input['TableAutoScalingSettingArgs']] = None,
                 read_capacity_units: Optional[pulumi.Input[int]] = None):
        """
        Represents replica specifications.
        """
        pulumi.set(__self__, "region", region)
        if read_capacity_auto_scaling is not None:
            pulumi.set(__self__, "read_capacity_auto_scaling", read_capacity_auto_scaling)
        if read_capacity_units is not None:
            pulumi.set(__self__, "read_capacity_units", read_capacity_units)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="readCapacityAutoScaling")
    def read_capacity_auto_scaling(self) -> Optional[pulumi.Input['TableAutoScalingSettingArgs']]:
        return pulumi.get(self, "read_capacity_auto_scaling")

    @read_capacity_auto_scaling.setter
    def read_capacity_auto_scaling(self, value: Optional[pulumi.Input['TableAutoScalingSettingArgs']]):
        pulumi.set(self, "read_capacity_auto_scaling", value)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "read_capacity_units")

    @read_capacity_units.setter
    def read_capacity_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_capacity_units", value)


@pulumi.input_type
class TableScalingPolicyArgs:
    def __init__(__self__, *,
                 target_tracking_scaling_policy_configuration: Optional[pulumi.Input['TableTargetTrackingScalingPolicyConfigurationArgs']] = None):
        """
        Represents scaling policy.
        """
        if target_tracking_scaling_policy_configuration is not None:
            pulumi.set(__self__, "target_tracking_scaling_policy_configuration", target_tracking_scaling_policy_configuration)

    @property
    @pulumi.getter(name="targetTrackingScalingPolicyConfiguration")
    def target_tracking_scaling_policy_configuration(self) -> Optional[pulumi.Input['TableTargetTrackingScalingPolicyConfigurationArgs']]:
        return pulumi.get(self, "target_tracking_scaling_policy_configuration")

    @target_tracking_scaling_policy_configuration.setter
    def target_tracking_scaling_policy_configuration(self, value: Optional[pulumi.Input['TableTargetTrackingScalingPolicyConfigurationArgs']]):
        pulumi.set(self, "target_tracking_scaling_policy_configuration", value)


@pulumi.input_type
class TableTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to apply to the resource
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TableTargetTrackingScalingPolicyConfigurationArgs:
    def __init__(__self__, *,
                 target_value: pulumi.Input[int],
                 disable_scale_in: Optional[pulumi.Input[bool]] = None,
                 scale_in_cooldown: Optional[pulumi.Input[int]] = None,
                 scale_out_cooldown: Optional[pulumi.Input[int]] = None):
        """
        Represents configuration for target tracking scaling policy.
        """
        pulumi.set(__self__, "target_value", target_value)
        if disable_scale_in is not None:
            pulumi.set(__self__, "disable_scale_in", disable_scale_in)
        if scale_in_cooldown is not None:
            pulumi.set(__self__, "scale_in_cooldown", scale_in_cooldown)
        if scale_out_cooldown is not None:
            pulumi.set(__self__, "scale_out_cooldown", scale_out_cooldown)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter(name="disableScaleIn")
    def disable_scale_in(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_scale_in")

    @disable_scale_in.setter
    def disable_scale_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_scale_in", value)

    @property
    @pulumi.getter(name="scaleInCooldown")
    def scale_in_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_in_cooldown")

    @scale_in_cooldown.setter
    def scale_in_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_cooldown", value)

    @property
    @pulumi.getter(name="scaleOutCooldown")
    def scale_out_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_out_cooldown")

    @scale_out_cooldown.setter
    def scale_out_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_out_cooldown", value)


