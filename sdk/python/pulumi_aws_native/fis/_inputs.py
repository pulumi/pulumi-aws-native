# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ExperimentTemplateActionArgs',
    'ExperimentTemplateExperimentOptionsArgs',
    'ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationPropertiesArgs',
    'ExperimentTemplateLogConfigurationS3ConfigurationPropertiesArgs',
    'ExperimentTemplateLogConfigurationArgs',
    'ExperimentTemplateStopConditionArgs',
    'ExperimentTemplateTargetFilterArgs',
    'ExperimentTemplateTargetArgs',
]

@pulumi.input_type
class ExperimentTemplateActionArgs:
    def __init__(__self__, *,
                 action_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 start_after: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 targets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Specifies an action for the experiment template.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The parameters for the action, if applicable.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] targets: One or more targets for the action.
        """
        pulumi.set(__self__, "action_id", action_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if start_after is not None:
            pulumi.set(__self__, "start_after", start_after)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The parameters for the action, if applicable.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="startAfter")
    def start_after(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "start_after")

    @start_after.setter
    def start_after(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "start_after", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        One or more targets for the action.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class ExperimentTemplateExperimentOptionsArgs:
    def __init__(__self__, *,
                 account_targeting: Optional[pulumi.Input['ExperimentTemplateExperimentOptionsAccountTargeting']] = None,
                 empty_target_resolution_mode: Optional[pulumi.Input['ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode']] = None):
        """
        :param pulumi.Input['ExperimentTemplateExperimentOptionsAccountTargeting'] account_targeting: The account targeting setting for the experiment template.
        :param pulumi.Input['ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode'] empty_target_resolution_mode: The target resolution failure mode for the experiment template.
        """
        if account_targeting is not None:
            pulumi.set(__self__, "account_targeting", account_targeting)
        if empty_target_resolution_mode is not None:
            pulumi.set(__self__, "empty_target_resolution_mode", empty_target_resolution_mode)

    @property
    @pulumi.getter(name="accountTargeting")
    def account_targeting(self) -> Optional[pulumi.Input['ExperimentTemplateExperimentOptionsAccountTargeting']]:
        """
        The account targeting setting for the experiment template.
        """
        return pulumi.get(self, "account_targeting")

    @account_targeting.setter
    def account_targeting(self, value: Optional[pulumi.Input['ExperimentTemplateExperimentOptionsAccountTargeting']]):
        pulumi.set(self, "account_targeting", value)

    @property
    @pulumi.getter(name="emptyTargetResolutionMode")
    def empty_target_resolution_mode(self) -> Optional[pulumi.Input['ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode']]:
        """
        The target resolution failure mode for the experiment template.
        """
        return pulumi.get(self, "empty_target_resolution_mode")

    @empty_target_resolution_mode.setter
    def empty_target_resolution_mode(self, value: Optional[pulumi.Input['ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode']]):
        pulumi.set(self, "empty_target_resolution_mode", value)


@pulumi.input_type
class ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 log_group_arn: pulumi.Input[str]):
        pulumi.set(__self__, "log_group_arn", log_group_arn)

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_group_arn")

    @log_group_arn.setter
    def log_group_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_group_arn", value)


@pulumi.input_type
class ExperimentTemplateLogConfigurationS3ConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class ExperimentTemplateLogConfigurationArgs:
    def __init__(__self__, *,
                 log_schema_version: pulumi.Input[int],
                 cloud_watch_logs_configuration: Optional[pulumi.Input['ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationPropertiesArgs']] = None,
                 s3_configuration: Optional[pulumi.Input['ExperimentTemplateLogConfigurationS3ConfigurationPropertiesArgs']] = None):
        pulumi.set(__self__, "log_schema_version", log_schema_version)
        if cloud_watch_logs_configuration is not None:
            pulumi.set(__self__, "cloud_watch_logs_configuration", cloud_watch_logs_configuration)
        if s3_configuration is not None:
            pulumi.set(__self__, "s3_configuration", s3_configuration)

    @property
    @pulumi.getter(name="logSchemaVersion")
    def log_schema_version(self) -> pulumi.Input[int]:
        return pulumi.get(self, "log_schema_version")

    @log_schema_version.setter
    def log_schema_version(self, value: pulumi.Input[int]):
        pulumi.set(self, "log_schema_version", value)

    @property
    @pulumi.getter(name="cloudWatchLogsConfiguration")
    def cloud_watch_logs_configuration(self) -> Optional[pulumi.Input['ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationPropertiesArgs']]:
        return pulumi.get(self, "cloud_watch_logs_configuration")

    @cloud_watch_logs_configuration.setter
    def cloud_watch_logs_configuration(self, value: Optional[pulumi.Input['ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationPropertiesArgs']]):
        pulumi.set(self, "cloud_watch_logs_configuration", value)

    @property
    @pulumi.getter(name="s3Configuration")
    def s3_configuration(self) -> Optional[pulumi.Input['ExperimentTemplateLogConfigurationS3ConfigurationPropertiesArgs']]:
        return pulumi.get(self, "s3_configuration")

    @s3_configuration.setter
    def s3_configuration(self, value: Optional[pulumi.Input['ExperimentTemplateLogConfigurationS3ConfigurationPropertiesArgs']]):
        pulumi.set(self, "s3_configuration", value)


@pulumi.input_type
class ExperimentTemplateStopConditionArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source", source)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ExperimentTemplateTargetFilterArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Describes a filter used for the target resource input in an experiment template.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ExperimentTemplateTargetArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 selection_mode: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['ExperimentTemplateTargetFilterArgs']]]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 resource_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Specifies a target for an experiment.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "selection_mode", selection_mode)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if resource_arns is not None:
            pulumi.set(__self__, "resource_arns", resource_arns)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="selectionMode")
    def selection_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selection_mode")

    @selection_mode.setter
    def selection_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "selection_mode", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExperimentTemplateTargetFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExperimentTemplateTargetFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="resourceArns")
    def resource_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_arns")

    @resource_arns.setter
    def resource_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_arns", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "resource_tags", value)


