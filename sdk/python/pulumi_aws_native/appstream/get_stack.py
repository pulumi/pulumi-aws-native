# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetStackResult',
    'AwaitableGetStackResult',
    'get_stack',
    'get_stack_output',
]

@pulumi.output_type
class GetStackResult:
    def __init__(__self__, access_endpoints=None, application_settings=None, attributes_to_delete=None, delete_storage_connectors=None, description=None, display_name=None, embed_host_domains=None, feedback_url=None, id=None, redirect_url=None, storage_connectors=None, streaming_experience_settings=None, tags=None, user_settings=None):
        if access_endpoints and not isinstance(access_endpoints, list):
            raise TypeError("Expected argument 'access_endpoints' to be a list")
        pulumi.set(__self__, "access_endpoints", access_endpoints)
        if application_settings and not isinstance(application_settings, dict):
            raise TypeError("Expected argument 'application_settings' to be a dict")
        pulumi.set(__self__, "application_settings", application_settings)
        if attributes_to_delete and not isinstance(attributes_to_delete, list):
            raise TypeError("Expected argument 'attributes_to_delete' to be a list")
        pulumi.set(__self__, "attributes_to_delete", attributes_to_delete)
        if delete_storage_connectors and not isinstance(delete_storage_connectors, bool):
            raise TypeError("Expected argument 'delete_storage_connectors' to be a bool")
        pulumi.set(__self__, "delete_storage_connectors", delete_storage_connectors)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if embed_host_domains and not isinstance(embed_host_domains, list):
            raise TypeError("Expected argument 'embed_host_domains' to be a list")
        pulumi.set(__self__, "embed_host_domains", embed_host_domains)
        if feedback_url and not isinstance(feedback_url, str):
            raise TypeError("Expected argument 'feedback_url' to be a str")
        pulumi.set(__self__, "feedback_url", feedback_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if storage_connectors and not isinstance(storage_connectors, list):
            raise TypeError("Expected argument 'storage_connectors' to be a list")
        pulumi.set(__self__, "storage_connectors", storage_connectors)
        if streaming_experience_settings and not isinstance(streaming_experience_settings, dict):
            raise TypeError("Expected argument 'streaming_experience_settings' to be a dict")
        pulumi.set(__self__, "streaming_experience_settings", streaming_experience_settings)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if user_settings and not isinstance(user_settings, list):
            raise TypeError("Expected argument 'user_settings' to be a list")
        pulumi.set(__self__, "user_settings", user_settings)

    @property
    @pulumi.getter(name="accessEndpoints")
    def access_endpoints(self) -> Optional[Sequence['outputs.StackAccessEndpoint']]:
        return pulumi.get(self, "access_endpoints")

    @property
    @pulumi.getter(name="applicationSettings")
    def application_settings(self) -> Optional['outputs.StackApplicationSettings']:
        return pulumi.get(self, "application_settings")

    @property
    @pulumi.getter(name="attributesToDelete")
    def attributes_to_delete(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attributes_to_delete")

    @property
    @pulumi.getter(name="deleteStorageConnectors")
    def delete_storage_connectors(self) -> Optional[bool]:
        return pulumi.get(self, "delete_storage_connectors")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="embedHostDomains")
    def embed_host_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "embed_host_domains")

    @property
    @pulumi.getter(name="feedbackUrl")
    def feedback_url(self) -> Optional[str]:
        return pulumi.get(self, "feedback_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="storageConnectors")
    def storage_connectors(self) -> Optional[Sequence['outputs.StackStorageConnector']]:
        return pulumi.get(self, "storage_connectors")

    @property
    @pulumi.getter(name="streamingExperienceSettings")
    def streaming_experience_settings(self) -> Optional['outputs.StackStreamingExperienceSettings']:
        return pulumi.get(self, "streaming_experience_settings")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.StackTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userSettings")
    def user_settings(self) -> Optional[Sequence['outputs.StackUserSetting']]:
        return pulumi.get(self, "user_settings")


class AwaitableGetStackResult(GetStackResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackResult(
            access_endpoints=self.access_endpoints,
            application_settings=self.application_settings,
            attributes_to_delete=self.attributes_to_delete,
            delete_storage_connectors=self.delete_storage_connectors,
            description=self.description,
            display_name=self.display_name,
            embed_host_domains=self.embed_host_domains,
            feedback_url=self.feedback_url,
            id=self.id,
            redirect_url=self.redirect_url,
            storage_connectors=self.storage_connectors,
            streaming_experience_settings=self.streaming_experience_settings,
            tags=self.tags,
            user_settings=self.user_settings)


def get_stack(id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackResult:
    """
    Resource Type definition for AWS::AppStream::Stack
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:appstream:getStack', __args__, opts=opts, typ=GetStackResult).value

    return AwaitableGetStackResult(
        access_endpoints=pulumi.get(__ret__, 'access_endpoints'),
        application_settings=pulumi.get(__ret__, 'application_settings'),
        attributes_to_delete=pulumi.get(__ret__, 'attributes_to_delete'),
        delete_storage_connectors=pulumi.get(__ret__, 'delete_storage_connectors'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        embed_host_domains=pulumi.get(__ret__, 'embed_host_domains'),
        feedback_url=pulumi.get(__ret__, 'feedback_url'),
        id=pulumi.get(__ret__, 'id'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        storage_connectors=pulumi.get(__ret__, 'storage_connectors'),
        streaming_experience_settings=pulumi.get(__ret__, 'streaming_experience_settings'),
        tags=pulumi.get(__ret__, 'tags'),
        user_settings=pulumi.get(__ret__, 'user_settings'))


@_utilities.lift_output_func(get_stack)
def get_stack_output(id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackResult]:
    """
    Resource Type definition for AWS::AppStream::Stack
    """
    ...
