# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetStackFleetAssociationResult',
    'AwaitableGetStackFleetAssociationResult',
    'get_stack_fleet_association',
    'get_stack_fleet_association_output',
]

@pulumi.output_type
class GetStackFleetAssociationResult:
    def __init__(__self__, fleet_name=None, id=None, stack_name=None):
        if fleet_name and not isinstance(fleet_name, str):
            raise TypeError("Expected argument 'fleet_name' to be a str")
        pulumi.set(__self__, "fleet_name", fleet_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if stack_name and not isinstance(stack_name, str):
            raise TypeError("Expected argument 'stack_name' to be a str")
        pulumi.set(__self__, "stack_name", stack_name)

    @property
    @pulumi.getter(name="fleetName")
    def fleet_name(self) -> Optional[str]:
        return pulumi.get(self, "fleet_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> Optional[str]:
        return pulumi.get(self, "stack_name")


class AwaitableGetStackFleetAssociationResult(GetStackFleetAssociationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStackFleetAssociationResult(
            fleet_name=self.fleet_name,
            id=self.id,
            stack_name=self.stack_name)


def get_stack_fleet_association(id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStackFleetAssociationResult:
    """
    Resource Type definition for AWS::AppStream::StackFleetAssociation
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:appstream:getStackFleetAssociation', __args__, opts=opts, typ=GetStackFleetAssociationResult).value

    return AwaitableGetStackFleetAssociationResult(
        fleet_name=pulumi.get(__ret__, 'fleet_name'),
        id=pulumi.get(__ret__, 'id'),
        stack_name=pulumi.get(__ret__, 'stack_name'))


@_utilities.lift_output_func(get_stack_fleet_association)
def get_stack_fleet_association_output(id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStackFleetAssociationResult]:
    """
    Resource Type definition for AWS::AppStream::StackFleetAssociation
    """
    ...
