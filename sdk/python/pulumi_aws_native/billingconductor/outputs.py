# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BillingGroupAccountGrouping',
    'BillingGroupComputationPreference',
    'BillingGroupTag',
    'CustomLineItemBillingPeriodRange',
    'CustomLineItemChargeDetails',
    'CustomLineItemFlatChargeDetails',
    'CustomLineItemPercentageChargeDetails',
    'CustomLineItemTag',
    'PricingPlanTag',
    'PricingRuleTag',
]

@pulumi.output_type
class BillingGroupAccountGrouping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkedAccountIds":
            suggest = "linked_account_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingGroupAccountGrouping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingGroupAccountGrouping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingGroupAccountGrouping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 linked_account_ids: Sequence[str]):
        pulumi.set(__self__, "linked_account_ids", linked_account_ids)

    @property
    @pulumi.getter(name="linkedAccountIds")
    def linked_account_ids(self) -> Sequence[str]:
        return pulumi.get(self, "linked_account_ids")


@pulumi.output_type
class BillingGroupComputationPreference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pricingPlanArn":
            suggest = "pricing_plan_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BillingGroupComputationPreference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BillingGroupComputationPreference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BillingGroupComputationPreference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pricing_plan_arn: str):
        """
        :param str pricing_plan_arn: ARN of the attached pricing plan
        """
        pulumi.set(__self__, "pricing_plan_arn", pricing_plan_arn)

    @property
    @pulumi.getter(name="pricingPlanArn")
    def pricing_plan_arn(self) -> str:
        """
        ARN of the attached pricing plan
        """
        return pulumi.get(self, "pricing_plan_arn")


@pulumi.output_type
class BillingGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class CustomLineItemBillingPeriodRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exclusiveEndBillingPeriod":
            suggest = "exclusive_end_billing_period"
        elif key == "inclusiveStartBillingPeriod":
            suggest = "inclusive_start_billing_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomLineItemBillingPeriodRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomLineItemBillingPeriodRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomLineItemBillingPeriodRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusive_end_billing_period: Optional[str] = None,
                 inclusive_start_billing_period: Optional[str] = None):
        if exclusive_end_billing_period is not None:
            pulumi.set(__self__, "exclusive_end_billing_period", exclusive_end_billing_period)
        if inclusive_start_billing_period is not None:
            pulumi.set(__self__, "inclusive_start_billing_period", inclusive_start_billing_period)

    @property
    @pulumi.getter(name="exclusiveEndBillingPeriod")
    def exclusive_end_billing_period(self) -> Optional[str]:
        return pulumi.get(self, "exclusive_end_billing_period")

    @property
    @pulumi.getter(name="inclusiveStartBillingPeriod")
    def inclusive_start_billing_period(self) -> Optional[str]:
        return pulumi.get(self, "inclusive_start_billing_period")


@pulumi.output_type
class CustomLineItemChargeDetails(dict):
    def __init__(__self__, *,
                 type: 'CustomLineItemType',
                 flat: Optional['outputs.CustomLineItemFlatChargeDetails'] = None,
                 percentage: Optional['outputs.CustomLineItemPercentageChargeDetails'] = None):
        pulumi.set(__self__, "type", type)
        if flat is not None:
            pulumi.set(__self__, "flat", flat)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def type(self) -> 'CustomLineItemType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def flat(self) -> Optional['outputs.CustomLineItemFlatChargeDetails']:
        return pulumi.get(self, "flat")

    @property
    @pulumi.getter
    def percentage(self) -> Optional['outputs.CustomLineItemPercentageChargeDetails']:
        return pulumi.get(self, "percentage")


@pulumi.output_type
class CustomLineItemFlatChargeDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chargeValue":
            suggest = "charge_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomLineItemFlatChargeDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomLineItemFlatChargeDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomLineItemFlatChargeDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 charge_value: float):
        pulumi.set(__self__, "charge_value", charge_value)

    @property
    @pulumi.getter(name="chargeValue")
    def charge_value(self) -> float:
        return pulumi.get(self, "charge_value")


@pulumi.output_type
class CustomLineItemPercentageChargeDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "percentageValue":
            suggest = "percentage_value"
        elif key == "childAssociatedResources":
            suggest = "child_associated_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomLineItemPercentageChargeDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomLineItemPercentageChargeDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomLineItemPercentageChargeDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percentage_value: float,
                 child_associated_resources: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "percentage_value", percentage_value)
        if child_associated_resources is not None:
            pulumi.set(__self__, "child_associated_resources", child_associated_resources)

    @property
    @pulumi.getter(name="percentageValue")
    def percentage_value(self) -> float:
        return pulumi.get(self, "percentage_value")

    @property
    @pulumi.getter(name="childAssociatedResources")
    def child_associated_resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "child_associated_resources")


@pulumi.output_type
class CustomLineItemTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PricingPlanTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PricingRuleTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


