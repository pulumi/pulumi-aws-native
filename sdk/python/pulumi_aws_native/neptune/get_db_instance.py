# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetDbInstanceResult',
    'AwaitableGetDbInstanceResult',
    'get_db_instance',
    'get_db_instance_output',
]

@pulumi.output_type
class GetDbInstanceResult:
    def __init__(__self__, auto_minor_version_upgrade=None, db_instance_class=None, db_parameter_group_name=None, endpoint=None, port=None, preferred_maintenance_window=None, tags=None):
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if db_instance_class and not isinstance(db_instance_class, str):
            raise TypeError("Expected argument 'db_instance_class' to be a str")
        pulumi.set(__self__, "db_instance_class", db_instance_class)
        if db_parameter_group_name and not isinstance(db_parameter_group_name, str):
            raise TypeError("Expected argument 'db_parameter_group_name' to be a str")
        pulumi.set(__self__, "db_parameter_group_name", db_parameter_group_name)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if preferred_maintenance_window and not isinstance(preferred_maintenance_window, str):
            raise TypeError("Expected argument 'preferred_maintenance_window' to be a str")
        pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[builtins.bool]:
        """
        Indicates that minor version patches are applied automatically.

        When updating this property, some interruptions may occur.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="dbInstanceClass")
    def db_instance_class(self) -> Optional[builtins.str]:
        """
        Contains the name of the compute and memory capacity class of the DB instance.

        If you update this property, some interruptions may occur.
        """
        return pulumi.get(self, "db_instance_class")

    @property
    @pulumi.getter(name="dbParameterGroupName")
    def db_parameter_group_name(self) -> Optional[builtins.str]:
        """
        The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template. If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.
        """
        return pulumi.get(self, "db_parameter_group_name")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[builtins.str]:
        """
        The connection endpoint for the database. For example: `mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com`.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        """
        The port number on which the database accepts connections. For example: `8182`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[builtins.str]:
        """
        Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        """
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An arbitrary set of tags (key-value pairs) for this DB instance.
        """
        return pulumi.get(self, "tags")


class AwaitableGetDbInstanceResult(GetDbInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbInstanceResult(
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            db_instance_class=self.db_instance_class,
            db_parameter_group_name=self.db_parameter_group_name,
            endpoint=self.endpoint,
            port=self.port,
            preferred_maintenance_window=self.preferred_maintenance_window,
            tags=self.tags)


def get_db_instance(db_instance_identifier: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbInstanceResult:
    """
    The AWS::Neptune::DBInstance resource creates an Amazon Neptune DB instance.


    :param builtins.str db_instance_identifier: Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
    """
    __args__ = dict()
    __args__['dbInstanceIdentifier'] = db_instance_identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:neptune:getDbInstance', __args__, opts=opts, typ=GetDbInstanceResult).value

    return AwaitableGetDbInstanceResult(
        auto_minor_version_upgrade=pulumi.get(__ret__, 'auto_minor_version_upgrade'),
        db_instance_class=pulumi.get(__ret__, 'db_instance_class'),
        db_parameter_group_name=pulumi.get(__ret__, 'db_parameter_group_name'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        port=pulumi.get(__ret__, 'port'),
        preferred_maintenance_window=pulumi.get(__ret__, 'preferred_maintenance_window'),
        tags=pulumi.get(__ret__, 'tags'))
def get_db_instance_output(db_instance_identifier: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbInstanceResult]:
    """
    The AWS::Neptune::DBInstance resource creates an Amazon Neptune DB instance.


    :param builtins.str db_instance_identifier: Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
    """
    __args__ = dict()
    __args__['dbInstanceIdentifier'] = db_instance_identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:neptune:getDbInstance', __args__, opts=opts, typ=GetDbInstanceResult)
    return __ret__.apply(lambda __response__: GetDbInstanceResult(
        auto_minor_version_upgrade=pulumi.get(__response__, 'auto_minor_version_upgrade'),
        db_instance_class=pulumi.get(__response__, 'db_instance_class'),
        db_parameter_group_name=pulumi.get(__response__, 'db_parameter_group_name'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        port=pulumi.get(__response__, 'port'),
        preferred_maintenance_window=pulumi.get(__response__, 'preferred_maintenance_window'),
        tags=pulumi.get(__response__, 'tags')))
