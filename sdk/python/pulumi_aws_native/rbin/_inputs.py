# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'RuleResourceTagArgs',
    'RuleResourceTagArgsDict',
    'RuleRetentionPeriodArgs',
    'RuleRetentionPeriodArgsDict',
    'RuleUnlockDelayArgs',
    'RuleUnlockDelayArgsDict',
]

MYPY = False

if not MYPY:
    class RuleResourceTagArgsDict(TypedDict):
        """
        The resource tag of the rule.
        """
        resource_tag_key: pulumi.Input[str]
        """
        The tag key of the resource.
        """
        resource_tag_value: pulumi.Input[str]
        """
        The tag value of the resource
        """
elif False:
    RuleResourceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleResourceTagArgs:
    def __init__(__self__, *,
                 resource_tag_key: pulumi.Input[str],
                 resource_tag_value: pulumi.Input[str]):
        """
        The resource tag of the rule.
        :param pulumi.Input[str] resource_tag_key: The tag key of the resource.
        :param pulumi.Input[str] resource_tag_value: The tag value of the resource
        """
        pulumi.set(__self__, "resource_tag_key", resource_tag_key)
        pulumi.set(__self__, "resource_tag_value", resource_tag_value)

    @property
    @pulumi.getter(name="resourceTagKey")
    def resource_tag_key(self) -> pulumi.Input[str]:
        """
        The tag key of the resource.
        """
        return pulumi.get(self, "resource_tag_key")

    @resource_tag_key.setter
    def resource_tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_tag_key", value)

    @property
    @pulumi.getter(name="resourceTagValue")
    def resource_tag_value(self) -> pulumi.Input[str]:
        """
        The tag value of the resource
        """
        return pulumi.get(self, "resource_tag_value")

    @resource_tag_value.setter
    def resource_tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_tag_value", value)


if not MYPY:
    class RuleRetentionPeriodArgsDict(TypedDict):
        """
        The retention period of the rule.
        """
        retention_period_unit: pulumi.Input['RuleRetentionPeriodRetentionPeriodUnit']
        """
        The retention period unit of the rule
        """
        retention_period_value: pulumi.Input[int]
        """
        The retention period value of the rule.
        """
elif False:
    RuleRetentionPeriodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleRetentionPeriodArgs:
    def __init__(__self__, *,
                 retention_period_unit: pulumi.Input['RuleRetentionPeriodRetentionPeriodUnit'],
                 retention_period_value: pulumi.Input[int]):
        """
        The retention period of the rule.
        :param pulumi.Input['RuleRetentionPeriodRetentionPeriodUnit'] retention_period_unit: The retention period unit of the rule
        :param pulumi.Input[int] retention_period_value: The retention period value of the rule.
        """
        pulumi.set(__self__, "retention_period_unit", retention_period_unit)
        pulumi.set(__self__, "retention_period_value", retention_period_value)

    @property
    @pulumi.getter(name="retentionPeriodUnit")
    def retention_period_unit(self) -> pulumi.Input['RuleRetentionPeriodRetentionPeriodUnit']:
        """
        The retention period unit of the rule
        """
        return pulumi.get(self, "retention_period_unit")

    @retention_period_unit.setter
    def retention_period_unit(self, value: pulumi.Input['RuleRetentionPeriodRetentionPeriodUnit']):
        pulumi.set(self, "retention_period_unit", value)

    @property
    @pulumi.getter(name="retentionPeriodValue")
    def retention_period_value(self) -> pulumi.Input[int]:
        """
        The retention period value of the rule.
        """
        return pulumi.get(self, "retention_period_value")

    @retention_period_value.setter
    def retention_period_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "retention_period_value", value)


if not MYPY:
    class RuleUnlockDelayArgsDict(TypedDict):
        unlock_delay_unit: NotRequired[pulumi.Input['RuleUnlockDelayUnlockDelayUnit']]
        """
        The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        """
        unlock_delay_value: NotRequired[pulumi.Input[int]]
        """
        The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
elif False:
    RuleUnlockDelayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleUnlockDelayArgs:
    def __init__(__self__, *,
                 unlock_delay_unit: Optional[pulumi.Input['RuleUnlockDelayUnlockDelayUnit']] = None,
                 unlock_delay_value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['RuleUnlockDelayUnlockDelayUnit'] unlock_delay_unit: The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        :param pulumi.Input[int] unlock_delay_value: The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        if unlock_delay_unit is not None:
            pulumi.set(__self__, "unlock_delay_unit", unlock_delay_unit)
        if unlock_delay_value is not None:
            pulumi.set(__self__, "unlock_delay_value", unlock_delay_value)

    @property
    @pulumi.getter(name="unlockDelayUnit")
    def unlock_delay_unit(self) -> Optional[pulumi.Input['RuleUnlockDelayUnlockDelayUnit']]:
        """
        The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.
        """
        return pulumi.get(self, "unlock_delay_unit")

    @unlock_delay_unit.setter
    def unlock_delay_unit(self, value: Optional[pulumi.Input['RuleUnlockDelayUnlockDelayUnit']]):
        pulumi.set(self, "unlock_delay_unit", value)

    @property
    @pulumi.getter(name="unlockDelayValue")
    def unlock_delay_value(self) -> Optional[pulumi.Input[int]]:
        """
        The unlock delay period, measured in the unit specified for UnlockDelayUnit.
        """
        return pulumi.get(self, "unlock_delay_value")

    @unlock_delay_value.setter
    def unlock_delay_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unlock_delay_value", value)


