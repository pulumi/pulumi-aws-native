# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GraphVectorSearchConfiguration',
]

@pulumi.output_type
class GraphVectorSearchConfiguration(dict):
    """
    The vector search configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vectorSearchDimension":
            suggest = "vector_search_dimension"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GraphVectorSearchConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GraphVectorSearchConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GraphVectorSearchConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vector_search_dimension: int):
        """
        The vector search configuration.
        :param int vector_search_dimension: The vector search dimension
        """
        pulumi.set(__self__, "vector_search_dimension", vector_search_dimension)

    @property
    @pulumi.getter(name="vectorSearchDimension")
    def vector_search_dimension(self) -> int:
        """
        The vector search dimension
        """
        return pulumi.get(self, "vector_search_dimension")


