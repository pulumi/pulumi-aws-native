# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ManagedInstancePropertiesArgs',
    'ManagedInstancePropertiesArgsDict',
    'VolumeTagSpecificationArgs',
    'VolumeTagSpecificationArgsDict',
    'VolumeTagArgs',
    'VolumeTagArgsDict',
    'WorkspaceInstanceBlockDeviceMappingArgs',
    'WorkspaceInstanceBlockDeviceMappingArgsDict',
    'WorkspaceInstanceCapacityReservationSpecificationArgs',
    'WorkspaceInstanceCapacityReservationSpecificationArgsDict',
    'WorkspaceInstanceCapacityReservationTargetArgs',
    'WorkspaceInstanceCapacityReservationTargetArgsDict',
    'WorkspaceInstanceCpuOptionsRequestArgs',
    'WorkspaceInstanceCpuOptionsRequestArgsDict',
    'WorkspaceInstanceCreditSpecificationRequestArgs',
    'WorkspaceInstanceCreditSpecificationRequestArgsDict',
    'WorkspaceInstanceEbsBlockDeviceArgs',
    'WorkspaceInstanceEbsBlockDeviceArgsDict',
    'WorkspaceInstanceEnclaveOptionsRequestArgs',
    'WorkspaceInstanceEnclaveOptionsRequestArgsDict',
    'WorkspaceInstanceHibernationOptionsRequestArgs',
    'WorkspaceInstanceHibernationOptionsRequestArgsDict',
    'WorkspaceInstanceIamInstanceProfileSpecificationArgs',
    'WorkspaceInstanceIamInstanceProfileSpecificationArgsDict',
    'WorkspaceInstanceInstanceMaintenanceOptionsRequestArgs',
    'WorkspaceInstanceInstanceMaintenanceOptionsRequestArgsDict',
    'WorkspaceInstanceInstanceMarketOptionsRequestArgs',
    'WorkspaceInstanceInstanceMarketOptionsRequestArgsDict',
    'WorkspaceInstanceInstanceMetadataOptionsRequestArgs',
    'WorkspaceInstanceInstanceMetadataOptionsRequestArgsDict',
    'WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgs',
    'WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgsDict',
    'WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgs',
    'WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgsDict',
    'WorkspaceInstanceLicenseConfigurationRequestArgs',
    'WorkspaceInstanceLicenseConfigurationRequestArgsDict',
    'WorkspaceInstancePlacementArgs',
    'WorkspaceInstancePlacementArgsDict',
    'WorkspaceInstancePrivateDnsNameOptionsRequestArgs',
    'WorkspaceInstancePrivateDnsNameOptionsRequestArgsDict',
    'WorkspaceInstanceRunInstancesMonitoringEnabledArgs',
    'WorkspaceInstanceRunInstancesMonitoringEnabledArgsDict',
    'WorkspaceInstanceSpotMarketOptionsArgs',
    'WorkspaceInstanceSpotMarketOptionsArgsDict',
    'WorkspaceInstanceTagSpecificationArgs',
    'WorkspaceInstanceTagSpecificationArgsDict',
    'WorkspaceInstanceTagArgs',
    'WorkspaceInstanceTagArgsDict',
]

MYPY = False

if not MYPY:
    class ManagedInstancePropertiesArgsDict(TypedDict):
        image_id: pulumi.Input[builtins.str]
        instance_type: pulumi.Input[builtins.str]
        block_device_mappings: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceBlockDeviceMappingArgsDict']]]]
        capacity_reservation_specification: NotRequired[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationArgsDict']]
        cpu_options: NotRequired[pulumi.Input['WorkspaceInstanceCpuOptionsRequestArgsDict']]
        credit_specification: NotRequired[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestArgsDict']]
        disable_api_stop: NotRequired[pulumi.Input[builtins.bool]]
        ebs_optimized: NotRequired[pulumi.Input[builtins.bool]]
        enable_primary_ipv6: NotRequired[pulumi.Input[builtins.bool]]
        enclave_options: NotRequired[pulumi.Input['WorkspaceInstanceEnclaveOptionsRequestArgsDict']]
        hibernation_options: NotRequired[pulumi.Input['WorkspaceInstanceHibernationOptionsRequestArgsDict']]
        iam_instance_profile: NotRequired[pulumi.Input['WorkspaceInstanceIamInstanceProfileSpecificationArgsDict']]
        instance_market_options: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestArgsDict']]
        ipv6_address_count: NotRequired[pulumi.Input[builtins.int]]
        key_name: NotRequired[pulumi.Input[builtins.str]]
        license_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceLicenseConfigurationRequestArgsDict']]]]
        maintenance_options: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestArgsDict']]
        metadata_options: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestArgsDict']]
        monitoring: NotRequired[pulumi.Input['WorkspaceInstanceRunInstancesMonitoringEnabledArgsDict']]
        network_interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgsDict']]]]
        network_performance_options: NotRequired[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgsDict']]
        placement: NotRequired[pulumi.Input['WorkspaceInstancePlacementArgsDict']]
        private_dns_name_options: NotRequired[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestArgsDict']]
        subnet_id: NotRequired[pulumi.Input[builtins.str]]
        tag_specifications: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagSpecificationArgsDict']]]]
        user_data: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ManagedInstancePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ManagedInstancePropertiesArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[builtins.str],
                 instance_type: pulumi.Input[builtins.str],
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceBlockDeviceMappingArgs']]]] = None,
                 capacity_reservation_specification: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationArgs']] = None,
                 cpu_options: Optional[pulumi.Input['WorkspaceInstanceCpuOptionsRequestArgs']] = None,
                 credit_specification: Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestArgs']] = None,
                 disable_api_stop: Optional[pulumi.Input[builtins.bool]] = None,
                 ebs_optimized: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_primary_ipv6: Optional[pulumi.Input[builtins.bool]] = None,
                 enclave_options: Optional[pulumi.Input['WorkspaceInstanceEnclaveOptionsRequestArgs']] = None,
                 hibernation_options: Optional[pulumi.Input['WorkspaceInstanceHibernationOptionsRequestArgs']] = None,
                 iam_instance_profile: Optional[pulumi.Input['WorkspaceInstanceIamInstanceProfileSpecificationArgs']] = None,
                 instance_market_options: Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestArgs']] = None,
                 ipv6_address_count: Optional[pulumi.Input[builtins.int]] = None,
                 key_name: Optional[pulumi.Input[builtins.str]] = None,
                 license_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceLicenseConfigurationRequestArgs']]]] = None,
                 maintenance_options: Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestArgs']] = None,
                 metadata_options: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestArgs']] = None,
                 monitoring: Optional[pulumi.Input['WorkspaceInstanceRunInstancesMonitoringEnabledArgs']] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgs']]]] = None,
                 network_performance_options: Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgs']] = None,
                 placement: Optional[pulumi.Input['WorkspaceInstancePlacementArgs']] = None,
                 private_dns_name_options: Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestArgs']] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagSpecificationArgs']]]] = None,
                 user_data: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_type", instance_type)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if capacity_reservation_specification is not None:
            pulumi.set(__self__, "capacity_reservation_specification", capacity_reservation_specification)
        if cpu_options is not None:
            pulumi.set(__self__, "cpu_options", cpu_options)
        if credit_specification is not None:
            pulumi.set(__self__, "credit_specification", credit_specification)
        if disable_api_stop is not None:
            pulumi.set(__self__, "disable_api_stop", disable_api_stop)
        if ebs_optimized is not None:
            pulumi.set(__self__, "ebs_optimized", ebs_optimized)
        if enable_primary_ipv6 is not None:
            pulumi.set(__self__, "enable_primary_ipv6", enable_primary_ipv6)
        if enclave_options is not None:
            pulumi.set(__self__, "enclave_options", enclave_options)
        if hibernation_options is not None:
            pulumi.set(__self__, "hibernation_options", hibernation_options)
        if iam_instance_profile is not None:
            pulumi.set(__self__, "iam_instance_profile", iam_instance_profile)
        if instance_market_options is not None:
            pulumi.set(__self__, "instance_market_options", instance_market_options)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if license_specifications is not None:
            pulumi.set(__self__, "license_specifications", license_specifications)
        if maintenance_options is not None:
            pulumi.set(__self__, "maintenance_options", maintenance_options)
        if metadata_options is not None:
            pulumi.set(__self__, "metadata_options", metadata_options)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if network_performance_options is not None:
            pulumi.set(__self__, "network_performance_options", network_performance_options)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if private_dns_name_options is not None:
            pulumi.set(__self__, "private_dns_name_options", private_dns_name_options)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceBlockDeviceMappingArgs']]]]:
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @property
    @pulumi.getter(name="capacityReservationSpecification")
    def capacity_reservation_specification(self) -> Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationArgs']]:
        return pulumi.get(self, "capacity_reservation_specification")

    @capacity_reservation_specification.setter
    def capacity_reservation_specification(self, value: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationArgs']]):
        pulumi.set(self, "capacity_reservation_specification", value)

    @property
    @pulumi.getter(name="cpuOptions")
    def cpu_options(self) -> Optional[pulumi.Input['WorkspaceInstanceCpuOptionsRequestArgs']]:
        return pulumi.get(self, "cpu_options")

    @cpu_options.setter
    def cpu_options(self, value: Optional[pulumi.Input['WorkspaceInstanceCpuOptionsRequestArgs']]):
        pulumi.set(self, "cpu_options", value)

    @property
    @pulumi.getter(name="creditSpecification")
    def credit_specification(self) -> Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestArgs']]:
        return pulumi.get(self, "credit_specification")

    @credit_specification.setter
    def credit_specification(self, value: Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestArgs']]):
        pulumi.set(self, "credit_specification", value)

    @property
    @pulumi.getter(name="disableApiStop")
    def disable_api_stop(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disable_api_stop")

    @disable_api_stop.setter
    def disable_api_stop(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disable_api_stop", value)

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ebs_optimized")

    @ebs_optimized.setter
    def ebs_optimized(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ebs_optimized", value)

    @property
    @pulumi.getter(name="enablePrimaryIpv6")
    def enable_primary_ipv6(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_primary_ipv6")

    @enable_primary_ipv6.setter
    def enable_primary_ipv6(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_primary_ipv6", value)

    @property
    @pulumi.getter(name="enclaveOptions")
    def enclave_options(self) -> Optional[pulumi.Input['WorkspaceInstanceEnclaveOptionsRequestArgs']]:
        return pulumi.get(self, "enclave_options")

    @enclave_options.setter
    def enclave_options(self, value: Optional[pulumi.Input['WorkspaceInstanceEnclaveOptionsRequestArgs']]):
        pulumi.set(self, "enclave_options", value)

    @property
    @pulumi.getter(name="hibernationOptions")
    def hibernation_options(self) -> Optional[pulumi.Input['WorkspaceInstanceHibernationOptionsRequestArgs']]:
        return pulumi.get(self, "hibernation_options")

    @hibernation_options.setter
    def hibernation_options(self, value: Optional[pulumi.Input['WorkspaceInstanceHibernationOptionsRequestArgs']]):
        pulumi.set(self, "hibernation_options", value)

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[pulumi.Input['WorkspaceInstanceIamInstanceProfileSpecificationArgs']]:
        return pulumi.get(self, "iam_instance_profile")

    @iam_instance_profile.setter
    def iam_instance_profile(self, value: Optional[pulumi.Input['WorkspaceInstanceIamInstanceProfileSpecificationArgs']]):
        pulumi.set(self, "iam_instance_profile", value)

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestArgs']]:
        return pulumi.get(self, "instance_market_options")

    @instance_market_options.setter
    def instance_market_options(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestArgs']]):
        pulumi.set(self, "instance_market_options", value)

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "ipv6_address_count")

    @ipv6_address_count.setter
    def ipv6_address_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ipv6_address_count", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="licenseSpecifications")
    def license_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceLicenseConfigurationRequestArgs']]]]:
        return pulumi.get(self, "license_specifications")

    @license_specifications.setter
    def license_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceLicenseConfigurationRequestArgs']]]]):
        pulumi.set(self, "license_specifications", value)

    @property
    @pulumi.getter(name="maintenanceOptions")
    def maintenance_options(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestArgs']]:
        return pulumi.get(self, "maintenance_options")

    @maintenance_options.setter
    def maintenance_options(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestArgs']]):
        pulumi.set(self, "maintenance_options", value)

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestArgs']]:
        return pulumi.get(self, "metadata_options")

    @metadata_options.setter
    def metadata_options(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestArgs']]):
        pulumi.set(self, "metadata_options", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['WorkspaceInstanceRunInstancesMonitoringEnabledArgs']]:
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['WorkspaceInstanceRunInstancesMonitoringEnabledArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter(name="networkPerformanceOptions")
    def network_performance_options(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgs']]:
        return pulumi.get(self, "network_performance_options")

    @network_performance_options.setter
    def network_performance_options(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgs']]):
        pulumi.set(self, "network_performance_options", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['WorkspaceInstancePlacementArgs']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['WorkspaceInstancePlacementArgs']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="privateDnsNameOptions")
    def private_dns_name_options(self) -> Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestArgs']]:
        return pulumi.get(self, "private_dns_name_options")

    @private_dns_name_options.setter
    def private_dns_name_options(self, value: Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestArgs']]):
        pulumi.set(self, "private_dns_name_options", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagSpecificationArgs']]]]:
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_data", value)


if not MYPY:
    class VolumeTagSpecificationArgsDict(TypedDict):
        resource_type: NotRequired[pulumi.Input['VolumeTagSpecificationResourceType']]
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgsDict']]]]
        """
        The tags to apply to the resource
        """
elif False:
    VolumeTagSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeTagSpecificationArgs:
    def __init__(__self__, *,
                 resource_type: Optional[pulumi.Input['VolumeTagSpecificationResourceType']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]] tags: The tags to apply to the resource
        """
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input['VolumeTagSpecificationResourceType']]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input['VolumeTagSpecificationResourceType']]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]:
        """
        The tags to apply to the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class VolumeTagArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        """
        The key name of the tag
        """
        value: pulumi.Input[builtins.str]
        """
        The value for the tag
        """
elif False:
    VolumeTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] key: The key name of the tag
        :param pulumi.Input[builtins.str] value: The value for the tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The key name of the tag
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        The value for the tag
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class WorkspaceInstanceBlockDeviceMappingArgsDict(TypedDict):
        device_name: NotRequired[pulumi.Input[builtins.str]]
        ebs: NotRequired[pulumi.Input['WorkspaceInstanceEbsBlockDeviceArgsDict']]
        no_device: NotRequired[pulumi.Input[builtins.str]]
        virtual_name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceBlockDeviceMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceBlockDeviceMappingArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[builtins.str]] = None,
                 ebs: Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceArgs']] = None,
                 no_device: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_name: Optional[pulumi.Input[builtins.str]] = None):
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if ebs is not None:
            pulumi.set(__self__, "ebs", ebs)
        if no_device is not None:
            pulumi.set(__self__, "no_device", no_device)
        if virtual_name is not None:
            pulumi.set(__self__, "virtual_name", virtual_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def ebs(self) -> Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceArgs']]:
        return pulumi.get(self, "ebs")

    @ebs.setter
    def ebs(self, value: Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceArgs']]):
        pulumi.set(self, "ebs", value)

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "no_device")

    @no_device.setter
    def no_device(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "no_device", value)

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "virtual_name")

    @virtual_name.setter
    def virtual_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "virtual_name", value)


if not MYPY:
    class WorkspaceInstanceCapacityReservationSpecificationArgsDict(TypedDict):
        capacity_reservation_preference: NotRequired[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationCapacityReservationPreference']]
        capacity_reservation_target: NotRequired[pulumi.Input['WorkspaceInstanceCapacityReservationTargetArgsDict']]
elif False:
    WorkspaceInstanceCapacityReservationSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceCapacityReservationSpecificationArgs:
    def __init__(__self__, *,
                 capacity_reservation_preference: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationCapacityReservationPreference']] = None,
                 capacity_reservation_target: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationTargetArgs']] = None):
        if capacity_reservation_preference is not None:
            pulumi.set(__self__, "capacity_reservation_preference", capacity_reservation_preference)
        if capacity_reservation_target is not None:
            pulumi.set(__self__, "capacity_reservation_target", capacity_reservation_target)

    @property
    @pulumi.getter(name="capacityReservationPreference")
    def capacity_reservation_preference(self) -> Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationCapacityReservationPreference']]:
        return pulumi.get(self, "capacity_reservation_preference")

    @capacity_reservation_preference.setter
    def capacity_reservation_preference(self, value: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationSpecificationCapacityReservationPreference']]):
        pulumi.set(self, "capacity_reservation_preference", value)

    @property
    @pulumi.getter(name="capacityReservationTarget")
    def capacity_reservation_target(self) -> Optional[pulumi.Input['WorkspaceInstanceCapacityReservationTargetArgs']]:
        return pulumi.get(self, "capacity_reservation_target")

    @capacity_reservation_target.setter
    def capacity_reservation_target(self, value: Optional[pulumi.Input['WorkspaceInstanceCapacityReservationTargetArgs']]):
        pulumi.set(self, "capacity_reservation_target", value)


if not MYPY:
    class WorkspaceInstanceCapacityReservationTargetArgsDict(TypedDict):
        capacity_reservation_id: NotRequired[pulumi.Input[builtins.str]]
        capacity_reservation_resource_group_arn: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceCapacityReservationTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceCapacityReservationTargetArgs:
    def __init__(__self__, *,
                 capacity_reservation_id: Optional[pulumi.Input[builtins.str]] = None,
                 capacity_reservation_resource_group_arn: Optional[pulumi.Input[builtins.str]] = None):
        if capacity_reservation_id is not None:
            pulumi.set(__self__, "capacity_reservation_id", capacity_reservation_id)
        if capacity_reservation_resource_group_arn is not None:
            pulumi.set(__self__, "capacity_reservation_resource_group_arn", capacity_reservation_resource_group_arn)

    @property
    @pulumi.getter(name="capacityReservationId")
    def capacity_reservation_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "capacity_reservation_id")

    @capacity_reservation_id.setter
    def capacity_reservation_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "capacity_reservation_id", value)

    @property
    @pulumi.getter(name="capacityReservationResourceGroupArn")
    def capacity_reservation_resource_group_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "capacity_reservation_resource_group_arn")

    @capacity_reservation_resource_group_arn.setter
    def capacity_reservation_resource_group_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "capacity_reservation_resource_group_arn", value)


if not MYPY:
    class WorkspaceInstanceCpuOptionsRequestArgsDict(TypedDict):
        core_count: NotRequired[pulumi.Input[builtins.int]]
        threads_per_core: NotRequired[pulumi.Input[builtins.int]]
elif False:
    WorkspaceInstanceCpuOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceCpuOptionsRequestArgs:
    def __init__(__self__, *,
                 core_count: Optional[pulumi.Input[builtins.int]] = None,
                 threads_per_core: Optional[pulumi.Input[builtins.int]] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if threads_per_core is not None:
            pulumi.set(__self__, "threads_per_core", threads_per_core)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "core_count")

    @core_count.setter
    def core_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "core_count", value)

    @property
    @pulumi.getter(name="threadsPerCore")
    def threads_per_core(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "threads_per_core")

    @threads_per_core.setter
    def threads_per_core(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "threads_per_core", value)


if not MYPY:
    class WorkspaceInstanceCreditSpecificationRequestArgsDict(TypedDict):
        cpu_credits: NotRequired[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestCpuCredits']]
elif False:
    WorkspaceInstanceCreditSpecificationRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceCreditSpecificationRequestArgs:
    def __init__(__self__, *,
                 cpu_credits: Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestCpuCredits']] = None):
        if cpu_credits is not None:
            pulumi.set(__self__, "cpu_credits", cpu_credits)

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestCpuCredits']]:
        return pulumi.get(self, "cpu_credits")

    @cpu_credits.setter
    def cpu_credits(self, value: Optional[pulumi.Input['WorkspaceInstanceCreditSpecificationRequestCpuCredits']]):
        pulumi.set(self, "cpu_credits", value)


if not MYPY:
    class WorkspaceInstanceEbsBlockDeviceArgsDict(TypedDict):
        encrypted: NotRequired[pulumi.Input[builtins.bool]]
        iops: NotRequired[pulumi.Input[builtins.int]]
        kms_key_id: NotRequired[pulumi.Input[builtins.str]]
        throughput: NotRequired[pulumi.Input[builtins.int]]
        volume_size: NotRequired[pulumi.Input[builtins.int]]
        volume_type: NotRequired[pulumi.Input['WorkspaceInstanceEbsBlockDeviceVolumeType']]
elif False:
    WorkspaceInstanceEbsBlockDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceEbsBlockDeviceArgs:
    def __init__(__self__, *,
                 encrypted: Optional[pulumi.Input[builtins.bool]] = None,
                 iops: Optional[pulumi.Input[builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 throughput: Optional[pulumi.Input[builtins.int]] = None,
                 volume_size: Optional[pulumi.Input[builtins.int]] = None,
                 volume_type: Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceVolumeType']] = None):
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceVolumeType']]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input['WorkspaceInstanceEbsBlockDeviceVolumeType']]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class WorkspaceInstanceEnclaveOptionsRequestArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WorkspaceInstanceEnclaveOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceEnclaveOptionsRequestArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WorkspaceInstanceHibernationOptionsRequestArgsDict(TypedDict):
        configured: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WorkspaceInstanceHibernationOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceHibernationOptionsRequestArgs:
    def __init__(__self__, *,
                 configured: Optional[pulumi.Input[builtins.bool]] = None):
        if configured is not None:
            pulumi.set(__self__, "configured", configured)

    @property
    @pulumi.getter
    def configured(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "configured")

    @configured.setter
    def configured(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "configured", value)


if not MYPY:
    class WorkspaceInstanceIamInstanceProfileSpecificationArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceIamInstanceProfileSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceIamInstanceProfileSpecificationArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkspaceInstanceInstanceMaintenanceOptionsRequestArgsDict(TypedDict):
        auto_recovery: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery']]
elif False:
    WorkspaceInstanceInstanceMaintenanceOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceInstanceMaintenanceOptionsRequestArgs:
    def __init__(__self__, *,
                 auto_recovery: Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery']] = None):
        if auto_recovery is not None:
            pulumi.set(__self__, "auto_recovery", auto_recovery)

    @property
    @pulumi.getter(name="autoRecovery")
    def auto_recovery(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery']]:
        return pulumi.get(self, "auto_recovery")

    @auto_recovery.setter
    def auto_recovery(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery']]):
        pulumi.set(self, "auto_recovery", value)


if not MYPY:
    class WorkspaceInstanceInstanceMarketOptionsRequestArgsDict(TypedDict):
        market_type: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestMarketType']]
        spot_options: NotRequired[pulumi.Input['WorkspaceInstanceSpotMarketOptionsArgsDict']]
elif False:
    WorkspaceInstanceInstanceMarketOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceInstanceMarketOptionsRequestArgs:
    def __init__(__self__, *,
                 market_type: Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestMarketType']] = None,
                 spot_options: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsArgs']] = None):
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)
        if spot_options is not None:
            pulumi.set(__self__, "spot_options", spot_options)

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestMarketType']]:
        return pulumi.get(self, "market_type")

    @market_type.setter
    def market_type(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMarketOptionsRequestMarketType']]):
        pulumi.set(self, "market_type", value)

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsArgs']]:
        return pulumi.get(self, "spot_options")

    @spot_options.setter
    def spot_options(self, value: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsArgs']]):
        pulumi.set(self, "spot_options", value)


if not MYPY:
    class WorkspaceInstanceInstanceMetadataOptionsRequestArgsDict(TypedDict):
        http_endpoint: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint']]
        http_protocol_ipv6: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6']]
        http_put_response_hop_limit: NotRequired[pulumi.Input[builtins.int]]
        http_tokens: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens']]
        instance_metadata_tags: NotRequired[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags']]
elif False:
    WorkspaceInstanceInstanceMetadataOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceInstanceMetadataOptionsRequestArgs:
    def __init__(__self__, *,
                 http_endpoint: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint']] = None,
                 http_protocol_ipv6: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6']] = None,
                 http_put_response_hop_limit: Optional[pulumi.Input[builtins.int]] = None,
                 http_tokens: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens']] = None,
                 instance_metadata_tags: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags']] = None):
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if http_protocol_ipv6 is not None:
            pulumi.set(__self__, "http_protocol_ipv6", http_protocol_ipv6)
        if http_put_response_hop_limit is not None:
            pulumi.set(__self__, "http_put_response_hop_limit", http_put_response_hop_limit)
        if http_tokens is not None:
            pulumi.set(__self__, "http_tokens", http_tokens)
        if instance_metadata_tags is not None:
            pulumi.set(__self__, "instance_metadata_tags", instance_metadata_tags)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint']]:
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint']]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpProtocolIpv6")
    def http_protocol_ipv6(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6']]:
        return pulumi.get(self, "http_protocol_ipv6")

    @http_protocol_ipv6.setter
    def http_protocol_ipv6(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6']]):
        pulumi.set(self, "http_protocol_ipv6", value)

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "http_put_response_hop_limit")

    @http_put_response_hop_limit.setter
    def http_put_response_hop_limit(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "http_put_response_hop_limit", value)

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens']]:
        return pulumi.get(self, "http_tokens")

    @http_tokens.setter
    def http_tokens(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens']]):
        pulumi.set(self, "http_tokens", value)

    @property
    @pulumi.getter(name="instanceMetadataTags")
    def instance_metadata_tags(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags']]:
        return pulumi.get(self, "instance_metadata_tags")

    @instance_metadata_tags.setter
    def instance_metadata_tags(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags']]):
        pulumi.set(self, "instance_metadata_tags", value)


if not MYPY:
    class WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[builtins.str]]
        device_index: NotRequired[pulumi.Input[builtins.int]]
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        subnet_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceInstanceNetworkInterfaceSpecificationArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 device_index: Optional[pulumi.Input[builtins.int]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "device_index")

    @device_index.setter
    def device_index(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "device_index", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgsDict(TypedDict):
        bandwidth_weighting: NotRequired[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting']]
elif False:
    WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestArgs:
    def __init__(__self__, *,
                 bandwidth_weighting: Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting']] = None):
        if bandwidth_weighting is not None:
            pulumi.set(__self__, "bandwidth_weighting", bandwidth_weighting)

    @property
    @pulumi.getter(name="bandwidthWeighting")
    def bandwidth_weighting(self) -> Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting']]:
        return pulumi.get(self, "bandwidth_weighting")

    @bandwidth_weighting.setter
    def bandwidth_weighting(self, value: Optional[pulumi.Input['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting']]):
        pulumi.set(self, "bandwidth_weighting", value)


if not MYPY:
    class WorkspaceInstanceLicenseConfigurationRequestArgsDict(TypedDict):
        license_configuration_arn: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceLicenseConfigurationRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceLicenseConfigurationRequestArgs:
    def __init__(__self__, *,
                 license_configuration_arn: Optional[pulumi.Input[builtins.str]] = None):
        if license_configuration_arn is not None:
            pulumi.set(__self__, "license_configuration_arn", license_configuration_arn)

    @property
    @pulumi.getter(name="licenseConfigurationArn")
    def license_configuration_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "license_configuration_arn")

    @license_configuration_arn.setter
    def license_configuration_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "license_configuration_arn", value)


if not MYPY:
    class WorkspaceInstancePlacementArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[builtins.str]]
        group_id: NotRequired[pulumi.Input[builtins.str]]
        group_name: NotRequired[pulumi.Input[builtins.str]]
        partition_number: NotRequired[pulumi.Input[builtins.int]]
        tenancy: NotRequired[pulumi.Input['WorkspaceInstancePlacementTenancy']]
elif False:
    WorkspaceInstancePlacementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstancePlacementArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 group_id: Optional[pulumi.Input[builtins.str]] = None,
                 group_name: Optional[pulumi.Input[builtins.str]] = None,
                 partition_number: Optional[pulumi.Input[builtins.int]] = None,
                 tenancy: Optional[pulumi.Input['WorkspaceInstancePlacementTenancy']] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if partition_number is not None:
            pulumi.set(__self__, "partition_number", partition_number)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="partitionNumber")
    def partition_number(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "partition_number")

    @partition_number.setter
    def partition_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "partition_number", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input['WorkspaceInstancePlacementTenancy']]:
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input['WorkspaceInstancePlacementTenancy']]):
        pulumi.set(self, "tenancy", value)


if not MYPY:
    class WorkspaceInstancePrivateDnsNameOptionsRequestArgsDict(TypedDict):
        enable_resource_name_dns_a_record: NotRequired[pulumi.Input[builtins.bool]]
        enable_resource_name_dns_aaaa_record: NotRequired[pulumi.Input[builtins.bool]]
        hostname_type: NotRequired[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType']]
elif False:
    WorkspaceInstancePrivateDnsNameOptionsRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstancePrivateDnsNameOptionsRequestArgs:
    def __init__(__self__, *,
                 enable_resource_name_dns_a_record: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_resource_name_dns_aaaa_record: Optional[pulumi.Input[builtins.bool]] = None,
                 hostname_type: Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType']] = None):
        if enable_resource_name_dns_a_record is not None:
            pulumi.set(__self__, "enable_resource_name_dns_a_record", enable_resource_name_dns_a_record)
        if enable_resource_name_dns_aaaa_record is not None:
            pulumi.set(__self__, "enable_resource_name_dns_aaaa_record", enable_resource_name_dns_aaaa_record)
        if hostname_type is not None:
            pulumi.set(__self__, "hostname_type", hostname_type)

    @property
    @pulumi.getter(name="enableResourceNameDnsARecord")
    def enable_resource_name_dns_a_record(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_resource_name_dns_a_record")

    @enable_resource_name_dns_a_record.setter
    def enable_resource_name_dns_a_record(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_resource_name_dns_a_record", value)

    @property
    @pulumi.getter(name="enableResourceNameDnsAaaaRecord")
    def enable_resource_name_dns_aaaa_record(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_resource_name_dns_aaaa_record")

    @enable_resource_name_dns_aaaa_record.setter
    def enable_resource_name_dns_aaaa_record(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_resource_name_dns_aaaa_record", value)

    @property
    @pulumi.getter(name="hostnameType")
    def hostname_type(self) -> Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType']]:
        return pulumi.get(self, "hostname_type")

    @hostname_type.setter
    def hostname_type(self, value: Optional[pulumi.Input['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType']]):
        pulumi.set(self, "hostname_type", value)


if not MYPY:
    class WorkspaceInstanceRunInstancesMonitoringEnabledArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    WorkspaceInstanceRunInstancesMonitoringEnabledArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceRunInstancesMonitoringEnabledArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WorkspaceInstanceSpotMarketOptionsArgsDict(TypedDict):
        instance_interruption_behavior: NotRequired[pulumi.Input['WorkspaceInstanceSpotMarketOptionsInstanceInterruptionBehavior']]
        max_price: NotRequired[pulumi.Input[builtins.str]]
        spot_instance_type: NotRequired[pulumi.Input['WorkspaceInstanceSpotMarketOptionsSpotInstanceType']]
        valid_until_utc: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceSpotMarketOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceSpotMarketOptionsArgs:
    def __init__(__self__, *,
                 instance_interruption_behavior: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsInstanceInterruptionBehavior']] = None,
                 max_price: Optional[pulumi.Input[builtins.str]] = None,
                 spot_instance_type: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsSpotInstanceType']] = None,
                 valid_until_utc: Optional[pulumi.Input[builtins.str]] = None):
        if instance_interruption_behavior is not None:
            pulumi.set(__self__, "instance_interruption_behavior", instance_interruption_behavior)
        if max_price is not None:
            pulumi.set(__self__, "max_price", max_price)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if valid_until_utc is not None:
            pulumi.set(__self__, "valid_until_utc", valid_until_utc)

    @property
    @pulumi.getter(name="instanceInterruptionBehavior")
    def instance_interruption_behavior(self) -> Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsInstanceInterruptionBehavior']]:
        return pulumi.get(self, "instance_interruption_behavior")

    @instance_interruption_behavior.setter
    def instance_interruption_behavior(self, value: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsInstanceInterruptionBehavior']]):
        pulumi.set(self, "instance_interruption_behavior", value)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_price", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsSpotInstanceType']]:
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input['WorkspaceInstanceSpotMarketOptionsSpotInstanceType']]):
        pulumi.set(self, "spot_instance_type", value)

    @property
    @pulumi.getter(name="validUntilUtc")
    def valid_until_utc(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "valid_until_utc")

    @valid_until_utc.setter
    def valid_until_utc(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "valid_until_utc", value)


if not MYPY:
    class WorkspaceInstanceTagSpecificationArgsDict(TypedDict):
        resource_type: NotRequired[pulumi.Input['WorkspaceInstanceTagSpecificationResourceType']]
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagArgsDict']]]]
elif False:
    WorkspaceInstanceTagSpecificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceTagSpecificationArgs:
    def __init__(__self__, *,
                 resource_type: Optional[pulumi.Input['WorkspaceInstanceTagSpecificationResourceType']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagArgs']]]] = None):
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input['WorkspaceInstanceTagSpecificationResourceType']]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input['WorkspaceInstanceTagSpecificationResourceType']]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceInstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class WorkspaceInstanceTagArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    WorkspaceInstanceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceInstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 value: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


