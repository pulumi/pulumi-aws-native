# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ManagedInstanceProperties',
    'VolumeTag',
    'VolumeTagSpecification',
    'WorkspaceInstanceBlockDeviceMapping',
    'WorkspaceInstanceCpuOptionsRequest',
    'WorkspaceInstanceCreditSpecificationRequest',
    'WorkspaceInstanceEbsBlockDevice',
    'WorkspaceInstanceEc2ManagedInstance',
    'WorkspaceInstanceEnclaveOptionsRequest',
    'WorkspaceInstanceHibernationOptionsRequest',
    'WorkspaceInstanceIamInstanceProfileSpecification',
    'WorkspaceInstanceInstanceMaintenanceOptionsRequest',
    'WorkspaceInstanceInstanceMetadataOptionsRequest',
    'WorkspaceInstanceInstanceNetworkInterfaceSpecification',
    'WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest',
    'WorkspaceInstancePlacement',
    'WorkspaceInstancePrivateDnsNameOptionsRequest',
    'WorkspaceInstanceRunInstancesMonitoringEnabled',
    'WorkspaceInstanceTag',
    'WorkspaceInstanceTagSpecification',
]

@pulumi.output_type
class ManagedInstanceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "blockDeviceMappings":
            suggest = "block_device_mappings"
        elif key == "cpuOptions":
            suggest = "cpu_options"
        elif key == "creditSpecification":
            suggest = "credit_specification"
        elif key == "disableApiStop":
            suggest = "disable_api_stop"
        elif key == "ebsOptimized":
            suggest = "ebs_optimized"
        elif key == "enclaveOptions":
            suggest = "enclave_options"
        elif key == "hibernationOptions":
            suggest = "hibernation_options"
        elif key == "iamInstanceProfile":
            suggest = "iam_instance_profile"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "maintenanceOptions":
            suggest = "maintenance_options"
        elif key == "metadataOptions":
            suggest = "metadata_options"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "networkPerformanceOptions":
            suggest = "network_performance_options"
        elif key == "privateDnsNameOptions":
            suggest = "private_dns_name_options"
        elif key == "tagSpecifications":
            suggest = "tag_specifications"
        elif key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedInstanceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedInstanceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedInstanceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_id: builtins.str,
                 instance_type: builtins.str,
                 block_device_mappings: Optional[Sequence['outputs.WorkspaceInstanceBlockDeviceMapping']] = None,
                 cpu_options: Optional['outputs.WorkspaceInstanceCpuOptionsRequest'] = None,
                 credit_specification: Optional['outputs.WorkspaceInstanceCreditSpecificationRequest'] = None,
                 disable_api_stop: Optional[builtins.bool] = None,
                 ebs_optimized: Optional[builtins.bool] = None,
                 enclave_options: Optional['outputs.WorkspaceInstanceEnclaveOptionsRequest'] = None,
                 hibernation_options: Optional['outputs.WorkspaceInstanceHibernationOptionsRequest'] = None,
                 iam_instance_profile: Optional['outputs.WorkspaceInstanceIamInstanceProfileSpecification'] = None,
                 key_name: Optional[builtins.str] = None,
                 maintenance_options: Optional['outputs.WorkspaceInstanceInstanceMaintenanceOptionsRequest'] = None,
                 metadata_options: Optional['outputs.WorkspaceInstanceInstanceMetadataOptionsRequest'] = None,
                 monitoring: Optional['outputs.WorkspaceInstanceRunInstancesMonitoringEnabled'] = None,
                 network_interfaces: Optional[Sequence['outputs.WorkspaceInstanceInstanceNetworkInterfaceSpecification']] = None,
                 network_performance_options: Optional['outputs.WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest'] = None,
                 placement: Optional['outputs.WorkspaceInstancePlacement'] = None,
                 private_dns_name_options: Optional['outputs.WorkspaceInstancePrivateDnsNameOptionsRequest'] = None,
                 tag_specifications: Optional[Sequence['outputs.WorkspaceInstanceTagSpecification']] = None,
                 user_data: Optional[builtins.str] = None):
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_type", instance_type)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if cpu_options is not None:
            pulumi.set(__self__, "cpu_options", cpu_options)
        if credit_specification is not None:
            pulumi.set(__self__, "credit_specification", credit_specification)
        if disable_api_stop is not None:
            pulumi.set(__self__, "disable_api_stop", disable_api_stop)
        if ebs_optimized is not None:
            pulumi.set(__self__, "ebs_optimized", ebs_optimized)
        if enclave_options is not None:
            pulumi.set(__self__, "enclave_options", enclave_options)
        if hibernation_options is not None:
            pulumi.set(__self__, "hibernation_options", hibernation_options)
        if iam_instance_profile is not None:
            pulumi.set(__self__, "iam_instance_profile", iam_instance_profile)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if maintenance_options is not None:
            pulumi.set(__self__, "maintenance_options", maintenance_options)
        if metadata_options is not None:
            pulumi.set(__self__, "metadata_options", metadata_options)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if network_performance_options is not None:
            pulumi.set(__self__, "network_performance_options", network_performance_options)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if private_dns_name_options is not None:
            pulumi.set(__self__, "private_dns_name_options", private_dns_name_options)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> builtins.str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[Sequence['outputs.WorkspaceInstanceBlockDeviceMapping']]:
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="cpuOptions")
    def cpu_options(self) -> Optional['outputs.WorkspaceInstanceCpuOptionsRequest']:
        return pulumi.get(self, "cpu_options")

    @property
    @pulumi.getter(name="creditSpecification")
    def credit_specification(self) -> Optional['outputs.WorkspaceInstanceCreditSpecificationRequest']:
        return pulumi.get(self, "credit_specification")

    @property
    @pulumi.getter(name="disableApiStop")
    def disable_api_stop(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "disable_api_stop")

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "ebs_optimized")

    @property
    @pulumi.getter(name="enclaveOptions")
    def enclave_options(self) -> Optional['outputs.WorkspaceInstanceEnclaveOptionsRequest']:
        return pulumi.get(self, "enclave_options")

    @property
    @pulumi.getter(name="hibernationOptions")
    def hibernation_options(self) -> Optional['outputs.WorkspaceInstanceHibernationOptionsRequest']:
        return pulumi.get(self, "hibernation_options")

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional['outputs.WorkspaceInstanceIamInstanceProfileSpecification']:
        return pulumi.get(self, "iam_instance_profile")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="maintenanceOptions")
    def maintenance_options(self) -> Optional['outputs.WorkspaceInstanceInstanceMaintenanceOptionsRequest']:
        return pulumi.get(self, "maintenance_options")

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> Optional['outputs.WorkspaceInstanceInstanceMetadataOptionsRequest']:
        return pulumi.get(self, "metadata_options")

    @property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.WorkspaceInstanceRunInstancesMonitoringEnabled']:
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.WorkspaceInstanceInstanceNetworkInterfaceSpecification']]:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkPerformanceOptions")
    def network_performance_options(self) -> Optional['outputs.WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest']:
        return pulumi.get(self, "network_performance_options")

    @property
    @pulumi.getter
    def placement(self) -> Optional['outputs.WorkspaceInstancePlacement']:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="privateDnsNameOptions")
    def private_dns_name_options(self) -> Optional['outputs.WorkspaceInstancePrivateDnsNameOptionsRequest']:
        return pulumi.get(self, "private_dns_name_options")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[Sequence['outputs.WorkspaceInstanceTagSpecification']]:
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[builtins.str]:
        return pulumi.get(self, "user_data")


@pulumi.output_type
class VolumeTag(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: The key name of the tag
        :param builtins.str value: The value for the tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key name of the tag
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value for the tag
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VolumeTagSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeTagSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeTagSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeTagSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: Optional['VolumeTagSpecificationResourceType'] = None,
                 tags: Optional[Sequence['outputs.VolumeTag']] = None):
        """
        :param Sequence['VolumeTag'] tags: The tags to apply to the resource
        """
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional['VolumeTagSpecificationResourceType']:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.VolumeTag']]:
        """
        The tags to apply to the resource
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class WorkspaceInstanceBlockDeviceMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "noDevice":
            suggest = "no_device"
        elif key == "virtualName":
            suggest = "virtual_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceBlockDeviceMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceBlockDeviceMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceBlockDeviceMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: Optional[builtins.str] = None,
                 ebs: Optional['outputs.WorkspaceInstanceEbsBlockDevice'] = None,
                 no_device: Optional[builtins.str] = None,
                 virtual_name: Optional[builtins.str] = None):
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if ebs is not None:
            pulumi.set(__self__, "ebs", ebs)
        if no_device is not None:
            pulumi.set(__self__, "no_device", no_device)
        if virtual_name is not None:
            pulumi.set(__self__, "virtual_name", virtual_name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def ebs(self) -> Optional['outputs.WorkspaceInstanceEbsBlockDevice']:
        return pulumi.get(self, "ebs")

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[builtins.str]:
        return pulumi.get(self, "no_device")

    @property
    @pulumi.getter(name="virtualName")
    def virtual_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "virtual_name")


@pulumi.output_type
class WorkspaceInstanceCpuOptionsRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreCount":
            suggest = "core_count"
        elif key == "threadsPerCore":
            suggest = "threads_per_core"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceCpuOptionsRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceCpuOptionsRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceCpuOptionsRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_count: Optional[builtins.int] = None,
                 threads_per_core: Optional[builtins.int] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if threads_per_core is not None:
            pulumi.set(__self__, "threads_per_core", threads_per_core)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="threadsPerCore")
    def threads_per_core(self) -> Optional[builtins.int]:
        return pulumi.get(self, "threads_per_core")


@pulumi.output_type
class WorkspaceInstanceCreditSpecificationRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCredits":
            suggest = "cpu_credits"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceCreditSpecificationRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceCreditSpecificationRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceCreditSpecificationRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_credits: Optional['WorkspaceInstanceCreditSpecificationRequestCpuCredits'] = None):
        if cpu_credits is not None:
            pulumi.set(__self__, "cpu_credits", cpu_credits)

    @property
    @pulumi.getter(name="cpuCredits")
    def cpu_credits(self) -> Optional['WorkspaceInstanceCreditSpecificationRequestCpuCredits']:
        return pulumi.get(self, "cpu_credits")


@pulumi.output_type
class WorkspaceInstanceEbsBlockDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceEbsBlockDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceEbsBlockDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceEbsBlockDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypted: Optional[builtins.bool] = None,
                 iops: Optional[builtins.int] = None,
                 kms_key_id: Optional[builtins.str] = None,
                 throughput: Optional[builtins.int] = None,
                 volume_size: Optional[builtins.int] = None,
                 volume_type: Optional['WorkspaceInstanceEbsBlockDeviceVolumeType'] = None):
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def iops(self) -> Optional[builtins.int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[builtins.int]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[builtins.int]:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional['WorkspaceInstanceEbsBlockDeviceVolumeType']:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class WorkspaceInstanceEc2ManagedInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceEc2ManagedInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceEc2ManagedInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceEc2ManagedInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[builtins.str] = None):
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class WorkspaceInstanceEnclaveOptionsRequest(dict):
    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkspaceInstanceHibernationOptionsRequest(dict):
    def __init__(__self__, *,
                 configured: Optional[builtins.bool] = None):
        if configured is not None:
            pulumi.set(__self__, "configured", configured)

    @property
    @pulumi.getter
    def configured(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "configured")


@pulumi.output_type
class WorkspaceInstanceIamInstanceProfileSpecification(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class WorkspaceInstanceInstanceMaintenanceOptionsRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRecovery":
            suggest = "auto_recovery"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceInstanceMaintenanceOptionsRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceInstanceMaintenanceOptionsRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceInstanceMaintenanceOptionsRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_recovery: Optional['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery'] = None):
        if auto_recovery is not None:
            pulumi.set(__self__, "auto_recovery", auto_recovery)

    @property
    @pulumi.getter(name="autoRecovery")
    def auto_recovery(self) -> Optional['WorkspaceInstanceInstanceMaintenanceOptionsRequestAutoRecovery']:
        return pulumi.get(self, "auto_recovery")


@pulumi.output_type
class WorkspaceInstanceInstanceMetadataOptionsRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpEndpoint":
            suggest = "http_endpoint"
        elif key == "httpProtocolIpv6":
            suggest = "http_protocol_ipv6"
        elif key == "httpPutResponseHopLimit":
            suggest = "http_put_response_hop_limit"
        elif key == "httpTokens":
            suggest = "http_tokens"
        elif key == "instanceMetadataTags":
            suggest = "instance_metadata_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceInstanceMetadataOptionsRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceInstanceMetadataOptionsRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceInstanceMetadataOptionsRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_endpoint: Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint'] = None,
                 http_protocol_ipv6: Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6'] = None,
                 http_put_response_hop_limit: Optional[builtins.int] = None,
                 http_tokens: Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens'] = None,
                 instance_metadata_tags: Optional['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags'] = None):
        if http_endpoint is not None:
            pulumi.set(__self__, "http_endpoint", http_endpoint)
        if http_protocol_ipv6 is not None:
            pulumi.set(__self__, "http_protocol_ipv6", http_protocol_ipv6)
        if http_put_response_hop_limit is not None:
            pulumi.set(__self__, "http_put_response_hop_limit", http_put_response_hop_limit)
        if http_tokens is not None:
            pulumi.set(__self__, "http_tokens", http_tokens)
        if instance_metadata_tags is not None:
            pulumi.set(__self__, "instance_metadata_tags", instance_metadata_tags)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpEndpoint']:
        return pulumi.get(self, "http_endpoint")

    @property
    @pulumi.getter(name="httpProtocolIpv6")
    def http_protocol_ipv6(self) -> Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpProtocolIpv6']:
        return pulumi.get(self, "http_protocol_ipv6")

    @property
    @pulumi.getter(name="httpPutResponseHopLimit")
    def http_put_response_hop_limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "http_put_response_hop_limit")

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional['WorkspaceInstanceInstanceMetadataOptionsRequestHttpTokens']:
        return pulumi.get(self, "http_tokens")

    @property
    @pulumi.getter(name="instanceMetadataTags")
    def instance_metadata_tags(self) -> Optional['WorkspaceInstanceInstanceMetadataOptionsRequestInstanceMetadataTags']:
        return pulumi.get(self, "instance_metadata_tags")


@pulumi.output_type
class WorkspaceInstanceInstanceNetworkInterfaceSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceIndex":
            suggest = "device_index"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceInstanceNetworkInterfaceSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceInstanceNetworkInterfaceSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceInstanceNetworkInterfaceSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 device_index: Optional[builtins.int] = None,
                 groups: Optional[Sequence[builtins.str]] = None,
                 subnet_id: Optional[builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_index is not None:
            pulumi.set(__self__, "device_index", device_index)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIndex")
    def device_index(self) -> Optional[builtins.int]:
        return pulumi.get(self, "device_index")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthWeighting":
            suggest = "bandwidth_weighting"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceInstanceNetworkPerformanceOptionsRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_weighting: Optional['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting'] = None):
        if bandwidth_weighting is not None:
            pulumi.set(__self__, "bandwidth_weighting", bandwidth_weighting)

    @property
    @pulumi.getter(name="bandwidthWeighting")
    def bandwidth_weighting(self) -> Optional['WorkspaceInstanceInstanceNetworkPerformanceOptionsRequestBandwidthWeighting']:
        return pulumi.get(self, "bandwidth_weighting")


@pulumi.output_type
class WorkspaceInstancePlacement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstancePlacement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstancePlacement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstancePlacement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[builtins.str] = None,
                 group_name: Optional[builtins.str] = None,
                 tenancy: Optional['WorkspaceInstancePlacementTenancy'] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[builtins.str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def tenancy(self) -> Optional['WorkspaceInstancePlacementTenancy']:
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class WorkspaceInstancePrivateDnsNameOptionsRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableResourceNameDnsARecord":
            suggest = "enable_resource_name_dns_a_record"
        elif key == "enableResourceNameDnsAaaaRecord":
            suggest = "enable_resource_name_dns_aaaa_record"
        elif key == "hostnameType":
            suggest = "hostname_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstancePrivateDnsNameOptionsRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstancePrivateDnsNameOptionsRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstancePrivateDnsNameOptionsRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_resource_name_dns_a_record: Optional[builtins.bool] = None,
                 enable_resource_name_dns_aaaa_record: Optional[builtins.bool] = None,
                 hostname_type: Optional['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType'] = None):
        if enable_resource_name_dns_a_record is not None:
            pulumi.set(__self__, "enable_resource_name_dns_a_record", enable_resource_name_dns_a_record)
        if enable_resource_name_dns_aaaa_record is not None:
            pulumi.set(__self__, "enable_resource_name_dns_aaaa_record", enable_resource_name_dns_aaaa_record)
        if hostname_type is not None:
            pulumi.set(__self__, "hostname_type", hostname_type)

    @property
    @pulumi.getter(name="enableResourceNameDnsARecord")
    def enable_resource_name_dns_a_record(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enable_resource_name_dns_a_record")

    @property
    @pulumi.getter(name="enableResourceNameDnsAaaaRecord")
    def enable_resource_name_dns_aaaa_record(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enable_resource_name_dns_aaaa_record")

    @property
    @pulumi.getter(name="hostnameType")
    def hostname_type(self) -> Optional['WorkspaceInstancePrivateDnsNameOptionsRequestHostnameType']:
        return pulumi.get(self, "hostname_type")


@pulumi.output_type
class WorkspaceInstanceRunInstancesMonitoringEnabled(dict):
    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WorkspaceInstanceTag(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: Optional[builtins.str] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkspaceInstanceTagSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceInstanceTagSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceInstanceTagSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceInstanceTagSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: Optional['WorkspaceInstanceTagSpecificationResourceType'] = None,
                 tags: Optional[Sequence['outputs.WorkspaceInstanceTag']] = None):
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional['WorkspaceInstanceTagSpecificationResourceType']:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.WorkspaceInstanceTag']]:
        return pulumi.get(self, "tags")


