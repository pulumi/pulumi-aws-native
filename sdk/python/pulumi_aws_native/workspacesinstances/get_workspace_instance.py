# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetWorkspaceInstanceResult',
    'AwaitableGetWorkspaceInstanceResult',
    'get_workspace_instance',
    'get_workspace_instance_output',
]

@pulumi.output_type
class GetWorkspaceInstanceResult:
    def __init__(__self__, ec2_managed_instance=None, provision_state=None, tags=None, workspace_instance_id=None):
        if ec2_managed_instance and not isinstance(ec2_managed_instance, dict):
            raise TypeError("Expected argument 'ec2_managed_instance' to be a dict")
        pulumi.set(__self__, "ec2_managed_instance", ec2_managed_instance)
        if provision_state and not isinstance(provision_state, str):
            raise TypeError("Expected argument 'provision_state' to be a str")
        pulumi.set(__self__, "provision_state", provision_state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if workspace_instance_id and not isinstance(workspace_instance_id, str):
            raise TypeError("Expected argument 'workspace_instance_id' to be a str")
        pulumi.set(__self__, "workspace_instance_id", workspace_instance_id)

    @property
    @pulumi.getter(name="ec2ManagedInstance")
    def ec2_managed_instance(self) -> Optional['outputs.WorkspaceInstanceEc2ManagedInstance']:
        return pulumi.get(self, "ec2_managed_instance")

    @property
    @pulumi.getter(name="provisionState")
    def provision_state(self) -> Optional['WorkspaceInstanceProvisionState']:
        """
        The current state of the workspace instance
        """
        return pulumi.get(self, "provision_state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workspaceInstanceId")
    def workspace_instance_id(self) -> Optional[builtins.str]:
        """
        Unique identifier for the workspace instance
        """
        return pulumi.get(self, "workspace_instance_id")


class AwaitableGetWorkspaceInstanceResult(GetWorkspaceInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceInstanceResult(
            ec2_managed_instance=self.ec2_managed_instance,
            provision_state=self.provision_state,
            tags=self.tags,
            workspace_instance_id=self.workspace_instance_id)


def get_workspace_instance(workspace_instance_id: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceInstanceResult:
    """
    Resource Type definition for AWS::WorkspacesInstances::WorkspaceInstance


    :param builtins.str workspace_instance_id: Unique identifier for the workspace instance
    """
    __args__ = dict()
    __args__['workspaceInstanceId'] = workspace_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:workspacesinstances:getWorkspaceInstance', __args__, opts=opts, typ=GetWorkspaceInstanceResult).value

    return AwaitableGetWorkspaceInstanceResult(
        ec2_managed_instance=pulumi.get(__ret__, 'ec2_managed_instance'),
        provision_state=pulumi.get(__ret__, 'provision_state'),
        tags=pulumi.get(__ret__, 'tags'),
        workspace_instance_id=pulumi.get(__ret__, 'workspace_instance_id'))
def get_workspace_instance_output(workspace_instance_id: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkspaceInstanceResult]:
    """
    Resource Type definition for AWS::WorkspacesInstances::WorkspaceInstance


    :param builtins.str workspace_instance_id: Unique identifier for the workspace instance
    """
    __args__ = dict()
    __args__['workspaceInstanceId'] = workspace_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:workspacesinstances:getWorkspaceInstance', __args__, opts=opts, typ=GetWorkspaceInstanceResult)
    return __ret__.apply(lambda __response__: GetWorkspaceInstanceResult(
        ec2_managed_instance=pulumi.get(__response__, 'ec2_managed_instance'),
        provision_state=pulumi.get(__response__, 'provision_state'),
        tags=pulumi.get(__response__, 'tags'),
        workspace_instance_id=pulumi.get(__response__, 'workspace_instance_id')))
