# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['VolumeAssociationArgs', 'VolumeAssociation']

@pulumi.input_type
class VolumeAssociationArgs:
    def __init__(__self__, *,
                 device: pulumi.Input[builtins.str],
                 volume_id: pulumi.Input[builtins.str],
                 workspace_instance_id: pulumi.Input[builtins.str],
                 disassociate_mode: Optional[pulumi.Input['VolumeAssociationDisassociateMode']] = None):
        """
        The set of arguments for constructing a VolumeAssociation resource.
        :param pulumi.Input[builtins.str] device: The device name for the volume attachment
        :param pulumi.Input[builtins.str] volume_id: ID of the volume to attach to the workspace instance
        :param pulumi.Input[builtins.str] workspace_instance_id: ID of the workspace instance to associate with the volume
        :param pulumi.Input['VolumeAssociationDisassociateMode'] disassociate_mode: Mode to use when disassociating the volume
        """
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "workspace_instance_id", workspace_instance_id)
        if disassociate_mode is not None:
            pulumi.set(__self__, "disassociate_mode", disassociate_mode)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Input[builtins.str]:
        """
        The device name for the volume attachment
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the volume to attach to the workspace instance
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="workspaceInstanceId")
    def workspace_instance_id(self) -> pulumi.Input[builtins.str]:
        """
        ID of the workspace instance to associate with the volume
        """
        return pulumi.get(self, "workspace_instance_id")

    @workspace_instance_id.setter
    def workspace_instance_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "workspace_instance_id", value)

    @property
    @pulumi.getter(name="disassociateMode")
    def disassociate_mode(self) -> Optional[pulumi.Input['VolumeAssociationDisassociateMode']]:
        """
        Mode to use when disassociating the volume
        """
        return pulumi.get(self, "disassociate_mode")

    @disassociate_mode.setter
    def disassociate_mode(self, value: Optional[pulumi.Input['VolumeAssociationDisassociateMode']]):
        pulumi.set(self, "disassociate_mode", value)


@pulumi.type_token("aws-native:workspacesinstances:VolumeAssociation")
class VolumeAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[builtins.str]] = None,
                 disassociate_mode: Optional[pulumi.Input['VolumeAssociationDisassociateMode']] = None,
                 volume_id: Optional[pulumi.Input[builtins.str]] = None,
                 workspace_instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::WorkspacesInstances::VolumeAssociation

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] device: The device name for the volume attachment
        :param pulumi.Input['VolumeAssociationDisassociateMode'] disassociate_mode: Mode to use when disassociating the volume
        :param pulumi.Input[builtins.str] volume_id: ID of the volume to attach to the workspace instance
        :param pulumi.Input[builtins.str] workspace_instance_id: ID of the workspace instance to associate with the volume
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::WorkspacesInstances::VolumeAssociation

        :param str resource_name: The name of the resource.
        :param VolumeAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[builtins.str]] = None,
                 disassociate_mode: Optional[pulumi.Input['VolumeAssociationDisassociateMode']] = None,
                 volume_id: Optional[pulumi.Input[builtins.str]] = None,
                 workspace_instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeAssociationArgs.__new__(VolumeAssociationArgs)

            if device is None and not opts.urn:
                raise TypeError("Missing required property 'device'")
            __props__.__dict__["device"] = device
            __props__.__dict__["disassociate_mode"] = disassociate_mode
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            if workspace_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_instance_id'")
            __props__.__dict__["workspace_instance_id"] = workspace_instance_id
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["device", "volumeId", "workspaceInstanceId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(VolumeAssociation, __self__).__init__(
            'aws-native:workspacesinstances:VolumeAssociation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VolumeAssociation':
        """
        Get an existing VolumeAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VolumeAssociationArgs.__new__(VolumeAssociationArgs)

        __props__.__dict__["device"] = None
        __props__.__dict__["disassociate_mode"] = None
        __props__.__dict__["volume_id"] = None
        __props__.__dict__["workspace_instance_id"] = None
        return VolumeAssociation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[builtins.str]:
        """
        The device name for the volume attachment
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="disassociateMode")
    def disassociate_mode(self) -> pulumi.Output[Optional['VolumeAssociationDisassociateMode']]:
        """
        Mode to use when disassociating the volume
        """
        return pulumi.get(self, "disassociate_mode")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[builtins.str]:
        """
        ID of the volume to attach to the workspace instance
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="workspaceInstanceId")
    def workspace_instance_id(self) -> pulumi.Output[builtins.str]:
        """
        ID of the workspace instance to associate with the volume
        """
        return pulumi.get(self, "workspace_instance_id")

