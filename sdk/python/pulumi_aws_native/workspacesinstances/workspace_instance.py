# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['WorkspaceInstanceArgs', 'WorkspaceInstance']

@pulumi.input_type
class WorkspaceInstanceArgs:
    def __init__(__self__, *,
                 managed_instance: Optional[pulumi.Input['ManagedInstancePropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a WorkspaceInstance resource.
        """
        if managed_instance is not None:
            pulumi.set(__self__, "managed_instance", managed_instance)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="managedInstance")
    def managed_instance(self) -> Optional[pulumi.Input['ManagedInstancePropertiesArgs']]:
        return pulumi.get(self, "managed_instance")

    @managed_instance.setter
    def managed_instance(self, value: Optional[pulumi.Input['ManagedInstancePropertiesArgs']]):
        pulumi.set(self, "managed_instance", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:workspacesinstances:WorkspaceInstance")
class WorkspaceInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_instance: Optional[pulumi.Input[Union['ManagedInstancePropertiesArgs', 'ManagedInstancePropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::WorkspacesInstances::WorkspaceInstance

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkspaceInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::WorkspacesInstances::WorkspaceInstance

        :param str resource_name: The name of the resource.
        :param WorkspaceInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 managed_instance: Optional[pulumi.Input[Union['ManagedInstancePropertiesArgs', 'ManagedInstancePropertiesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceInstanceArgs.__new__(WorkspaceInstanceArgs)

            __props__.__dict__["managed_instance"] = managed_instance
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ec2_managed_instance"] = None
            __props__.__dict__["provision_state"] = None
            __props__.__dict__["workspace_instance_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["managedInstance"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(WorkspaceInstance, __self__).__init__(
            'aws-native:workspacesinstances:WorkspaceInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WorkspaceInstance':
        """
        Get an existing WorkspaceInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = WorkspaceInstanceArgs.__new__(WorkspaceInstanceArgs)

        __props__.__dict__["ec2_managed_instance"] = None
        __props__.__dict__["managed_instance"] = None
        __props__.__dict__["provision_state"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["workspace_instance_id"] = None
        return WorkspaceInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ec2ManagedInstance")
    def ec2_managed_instance(self) -> pulumi.Output['outputs.WorkspaceInstanceEc2ManagedInstance']:
        return pulumi.get(self, "ec2_managed_instance")

    @property
    @pulumi.getter(name="managedInstance")
    def managed_instance(self) -> pulumi.Output[Optional['outputs.ManagedInstanceProperties']]:
        return pulumi.get(self, "managed_instance")

    @property
    @pulumi.getter(name="provisionState")
    def provision_state(self) -> pulumi.Output['WorkspaceInstanceProvisionState']:
        """
        The current state of the workspace instance
        """
        return pulumi.get(self, "provision_state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workspaceInstanceId")
    def workspace_instance_id(self) -> pulumi.Output[builtins.str]:
        """
        Unique identifier for the workspace instance
        """
        return pulumi.get(self, "workspace_instance_id")

