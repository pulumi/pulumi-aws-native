# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['VolumeArgs', 'Volume']

@pulumi.input_type
class VolumeArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[builtins.str],
                 encrypted: Optional[pulumi.Input[builtins.bool]] = None,
                 iops: Optional[pulumi.Input[builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 size_in_gb: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagSpecificationArgs']]]] = None,
                 throughput: Optional[pulumi.Input[builtins.int]] = None,
                 volume_type: Optional[pulumi.Input['VolumeType']] = None):
        """
        The set of arguments for constructing a Volume resource.
        :param pulumi.Input[builtins.str] availability_zone: The Availability Zone in which to create the volume
        :param pulumi.Input[builtins.bool] encrypted: Indicates whether the volume should be encrypted
        :param pulumi.Input[builtins.int] iops: The number of I/O operations per second (IOPS)
        :param pulumi.Input[builtins.str] kms_key_id: The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
        :param pulumi.Input[builtins.int] size_in_gb: The size of the volume, in GiBs
        :param pulumi.Input[builtins.str] snapshot_id: The snapshot from which to create the volume
        :param pulumi.Input[Sequence[pulumi.Input['VolumeTagSpecificationArgs']]] tag_specifications: The tags passed to EBS volume
        :param pulumi.Input[builtins.int] throughput: The throughput to provision for a volume, with a maximum of 1,000 MiB/s
        :param pulumi.Input['VolumeType'] volume_type: The volume type
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if size_in_gb is not None:
            pulumi.set(__self__, "size_in_gb", size_in_gb)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[builtins.str]:
        """
        The Availability Zone in which to create the volume
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the volume should be encrypted
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of I/O operations per second (IOPS)
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The size of the volume, in GiBs
        """
        return pulumi.get(self, "size_in_gb")

    @size_in_gb.setter
    def size_in_gb(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size_in_gb", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The snapshot from which to create the volume
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagSpecificationArgs']]]]:
        """
        The tags passed to EBS volume
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The throughput to provision for a volume, with a maximum of 1,000 MiB/s
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "throughput", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input['VolumeType']]:
        """
        The volume type
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input['VolumeType']]):
        pulumi.set(self, "volume_type", value)


@pulumi.type_token("aws-native:workspacesinstances:Volume")
class Volume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 encrypted: Optional[pulumi.Input[builtins.bool]] = None,
                 iops: Optional[pulumi.Input[builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 size_in_gb: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagSpecificationArgs', 'VolumeTagSpecificationArgsDict']]]]] = None,
                 throughput: Optional[pulumi.Input[builtins.int]] = None,
                 volume_type: Optional[pulumi.Input['VolumeType']] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::WorkspacesInstances::Volume - Manages WorkSpaces Volume resources

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] availability_zone: The Availability Zone in which to create the volume
        :param pulumi.Input[builtins.bool] encrypted: Indicates whether the volume should be encrypted
        :param pulumi.Input[builtins.int] iops: The number of I/O operations per second (IOPS)
        :param pulumi.Input[builtins.str] kms_key_id: The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
        :param pulumi.Input[builtins.int] size_in_gb: The size of the volume, in GiBs
        :param pulumi.Input[builtins.str] snapshot_id: The snapshot from which to create the volume
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagSpecificationArgs', 'VolumeTagSpecificationArgsDict']]]] tag_specifications: The tags passed to EBS volume
        :param pulumi.Input[builtins.int] throughput: The throughput to provision for a volume, with a maximum of 1,000 MiB/s
        :param pulumi.Input['VolumeType'] volume_type: The volume type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::WorkspacesInstances::Volume - Manages WorkSpaces Volume resources

        :param str resource_name: The name of the resource.
        :param VolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[builtins.str]] = None,
                 encrypted: Optional[pulumi.Input[builtins.bool]] = None,
                 iops: Optional[pulumi.Input[builtins.int]] = None,
                 kms_key_id: Optional[pulumi.Input[builtins.str]] = None,
                 size_in_gb: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagSpecificationArgs', 'VolumeTagSpecificationArgsDict']]]]] = None,
                 throughput: Optional[pulumi.Input[builtins.int]] = None,
                 volume_type: Optional[pulumi.Input['VolumeType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeArgs.__new__(VolumeArgs)

            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["encrypted"] = encrypted
            __props__.__dict__["iops"] = iops
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["size_in_gb"] = size_in_gb
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tag_specifications"] = tag_specifications
            __props__.__dict__["throughput"] = throughput
            __props__.__dict__["volume_type"] = volume_type
            __props__.__dict__["volume_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["availabilityZone", "encrypted", "iops", "kmsKeyId", "sizeInGb", "snapshotId", "tagSpecifications[*]", "throughput", "volumeType"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Volume, __self__).__init__(
            'aws-native:workspacesinstances:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VolumeArgs.__new__(VolumeArgs)

        __props__.__dict__["availability_zone"] = None
        __props__.__dict__["encrypted"] = None
        __props__.__dict__["iops"] = None
        __props__.__dict__["kms_key_id"] = None
        __props__.__dict__["size_in_gb"] = None
        __props__.__dict__["snapshot_id"] = None
        __props__.__dict__["tag_specifications"] = None
        __props__.__dict__["throughput"] = None
        __props__.__dict__["volume_id"] = None
        __props__.__dict__["volume_type"] = None
        return Volume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[builtins.str]:
        """
        The Availability Zone in which to create the volume
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def encrypted(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether the volume should be encrypted
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of I/O operations per second (IOPS)
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The size of the volume, in GiBs
        """
        return pulumi.get(self, "size_in_gb")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The snapshot from which to create the volume
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> pulumi.Output[Optional[Sequence['outputs.VolumeTagSpecification']]]:
        """
        The tags passed to EBS volume
        """
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter
    def throughput(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The throughput to provision for a volume, with a maximum of 1,000 MiB/s
        """
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[builtins.str]:
        """
        Unique identifier for the volume
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[Optional['VolumeType']]:
        """
        The volume type
        """
        return pulumi.get(self, "volume_type")

