# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetTopicPolicyResult',
    'AwaitableGetTopicPolicyResult',
    'get_topic_policy',
    'get_topic_policy_output',
]

@pulumi.output_type
class GetTopicPolicyResult:
    def __init__(__self__, id=None, policy_document=None, topics=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_document and not isinstance(policy_document, dict):
            raise TypeError("Expected argument 'policy_document' to be a dict")
        pulumi.set(__self__, "policy_document", policy_document)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[Any]:
        """
        A policy document that contains permissions to add to the specified SNS topics.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter
    def topics(self) -> Optional[Sequence[str]]:
        """
        The Amazon Resource Names (ARN) of the topics to which you want to add the policy. You can use the [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html)` function to specify an [AWS::SNS::Topic](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html) resource.
        """
        return pulumi.get(self, "topics")


class AwaitableGetTopicPolicyResult(GetTopicPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicPolicyResult(
            id=self.id,
            policy_document=self.policy_document,
            topics=self.topics)


def get_topic_policy(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicPolicyResult:
    """
    Schema for AWS::SNS::TopicPolicy


    :param str id: The provider-assigned unique ID for this managed resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:sns:getTopicPolicy', __args__, opts=opts, typ=GetTopicPolicyResult).value

    return AwaitableGetTopicPolicyResult(
        id=pulumi.get(__ret__, 'id'),
        policy_document=pulumi.get(__ret__, 'policy_document'),
        topics=pulumi.get(__ret__, 'topics'))


@_utilities.lift_output_func(get_topic_policy)
def get_topic_policy_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTopicPolicyResult]:
    """
    Schema for AWS::SNS::TopicPolicy


    :param str id: The provider-assigned unique ID for this managed resource.
    """
    ...
