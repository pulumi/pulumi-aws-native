# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'TopicLoggingConfigArgs',
    'TopicSubscriptionArgs',
    'TopicTagArgs',
]

@pulumi.input_type
class TopicLoggingConfigArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input['TopicLoggingConfigProtocol'],
                 failure_feedback_role_arn: Optional[pulumi.Input[str]] = None,
                 success_feedback_role_arn: Optional[pulumi.Input[str]] = None,
                 success_feedback_sample_rate: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['TopicLoggingConfigProtocol'] protocol: Indicates one of the supported protocols for the SNS topic
        :param pulumi.Input[str] failure_feedback_role_arn: The IAM role ARN to be used when logging failed message deliveries in Amazon CloudWatch
        :param pulumi.Input[str] success_feedback_role_arn: The IAM role ARN to be used when logging successful message deliveries in Amazon CloudWatch
        :param pulumi.Input[str] success_feedback_sample_rate: The percentage of successful message deliveries to be logged in Amazon CloudWatch. Valid percentage values range from 0 to 100
        """
        pulumi.set(__self__, "protocol", protocol)
        if failure_feedback_role_arn is not None:
            pulumi.set(__self__, "failure_feedback_role_arn", failure_feedback_role_arn)
        if success_feedback_role_arn is not None:
            pulumi.set(__self__, "success_feedback_role_arn", success_feedback_role_arn)
        if success_feedback_sample_rate is not None:
            pulumi.set(__self__, "success_feedback_sample_rate", success_feedback_sample_rate)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input['TopicLoggingConfigProtocol']:
        """
        Indicates one of the supported protocols for the SNS topic
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input['TopicLoggingConfigProtocol']):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="failureFeedbackRoleArn")
    def failure_feedback_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM role ARN to be used when logging failed message deliveries in Amazon CloudWatch
        """
        return pulumi.get(self, "failure_feedback_role_arn")

    @failure_feedback_role_arn.setter
    def failure_feedback_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_feedback_role_arn", value)

    @property
    @pulumi.getter(name="successFeedbackRoleArn")
    def success_feedback_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM role ARN to be used when logging successful message deliveries in Amazon CloudWatch
        """
        return pulumi.get(self, "success_feedback_role_arn")

    @success_feedback_role_arn.setter
    def success_feedback_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_feedback_role_arn", value)

    @property
    @pulumi.getter(name="successFeedbackSampleRate")
    def success_feedback_sample_rate(self) -> Optional[pulumi.Input[str]]:
        """
        The percentage of successful message deliveries to be logged in Amazon CloudWatch. Valid percentage values range from 0 to 100
        """
        return pulumi.get(self, "success_feedback_sample_rate")

    @success_feedback_sample_rate.setter
    def success_feedback_sample_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_feedback_sample_rate", value)


@pulumi.input_type
class TopicSubscriptionArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 protocol: pulumi.Input[str]):
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class TopicTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, `_`, `.`, `/`, `=`, `+`, and `-`.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 characters in length.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, `_`, `.`, `/`, `=`, `+`, and `-`.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 characters in length.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


