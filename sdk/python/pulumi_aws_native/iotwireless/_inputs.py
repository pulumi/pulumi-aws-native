# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DestinationTagArgs',
    'DeviceProfileLoRaWANDeviceProfileArgs',
    'DeviceProfileTagArgs',
    'FuotaTaskLoRaWANArgs',
    'FuotaTaskTagArgs',
    'MulticastGroupLoRaWANArgs',
    'MulticastGroupTagArgs',
    'NetworkAnalyzerConfigurationTagArgs',
    'PartnerAccountSidewalkAccountInfoArgs',
    'PartnerAccountSidewalkUpdateAccountArgs',
    'PartnerAccountTagArgs',
    'ServiceProfileLoRaWANServiceProfileArgs',
    'ServiceProfileTagArgs',
    'TaskDefinitionLoRaWANGatewayVersionArgs',
    'TaskDefinitionLoRaWANUpdateGatewayTaskCreateArgs',
    'TaskDefinitionLoRaWANUpdateGatewayTaskEntryArgs',
    'TaskDefinitionTagArgs',
    'TaskDefinitionUpdateWirelessGatewayTaskCreateArgs',
    'TraceContentPropertiesArgs',
    'WirelessDeviceAbpV10xArgs',
    'WirelessDeviceAbpV11Args',
    'WirelessDeviceLoRaWANDeviceArgs',
    'WirelessDeviceOtaaV10xArgs',
    'WirelessDeviceOtaaV11Args',
    'WirelessDeviceSessionKeysAbpV10xArgs',
    'WirelessDeviceSessionKeysAbpV11Args',
    'WirelessDeviceTagArgs',
    'WirelessGatewayLoRaWANGatewayArgs',
    'WirelessGatewayTagArgs',
]

@pulumi.input_type
class DestinationTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeviceProfileLoRaWANDeviceProfileArgs:
    def __init__(__self__, *,
                 class_b_timeout: Optional[pulumi.Input[int]] = None,
                 class_c_timeout: Optional[pulumi.Input[int]] = None,
                 factory_preset_freqs_list: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 mac_version: Optional[pulumi.Input[str]] = None,
                 max_duty_cycle: Optional[pulumi.Input[int]] = None,
                 max_eirp: Optional[pulumi.Input[int]] = None,
                 ping_slot_dr: Optional[pulumi.Input[int]] = None,
                 ping_slot_freq: Optional[pulumi.Input[int]] = None,
                 ping_slot_period: Optional[pulumi.Input[int]] = None,
                 reg_params_revision: Optional[pulumi.Input[str]] = None,
                 rf_region: Optional[pulumi.Input[str]] = None,
                 rx_data_rate2: Optional[pulumi.Input[int]] = None,
                 rx_delay1: Optional[pulumi.Input[int]] = None,
                 rx_dr_offset1: Optional[pulumi.Input[int]] = None,
                 rx_freq2: Optional[pulumi.Input[int]] = None,
                 supports32_bit_f_cnt: Optional[pulumi.Input[bool]] = None,
                 supports_class_b: Optional[pulumi.Input[bool]] = None,
                 supports_class_c: Optional[pulumi.Input[bool]] = None,
                 supports_join: Optional[pulumi.Input[bool]] = None):
        if class_b_timeout is not None:
            pulumi.set(__self__, "class_b_timeout", class_b_timeout)
        if class_c_timeout is not None:
            pulumi.set(__self__, "class_c_timeout", class_c_timeout)
        if factory_preset_freqs_list is not None:
            pulumi.set(__self__, "factory_preset_freqs_list", factory_preset_freqs_list)
        if mac_version is not None:
            pulumi.set(__self__, "mac_version", mac_version)
        if max_duty_cycle is not None:
            pulumi.set(__self__, "max_duty_cycle", max_duty_cycle)
        if max_eirp is not None:
            pulumi.set(__self__, "max_eirp", max_eirp)
        if ping_slot_dr is not None:
            pulumi.set(__self__, "ping_slot_dr", ping_slot_dr)
        if ping_slot_freq is not None:
            pulumi.set(__self__, "ping_slot_freq", ping_slot_freq)
        if ping_slot_period is not None:
            pulumi.set(__self__, "ping_slot_period", ping_slot_period)
        if reg_params_revision is not None:
            pulumi.set(__self__, "reg_params_revision", reg_params_revision)
        if rf_region is not None:
            pulumi.set(__self__, "rf_region", rf_region)
        if rx_data_rate2 is not None:
            pulumi.set(__self__, "rx_data_rate2", rx_data_rate2)
        if rx_delay1 is not None:
            pulumi.set(__self__, "rx_delay1", rx_delay1)
        if rx_dr_offset1 is not None:
            pulumi.set(__self__, "rx_dr_offset1", rx_dr_offset1)
        if rx_freq2 is not None:
            pulumi.set(__self__, "rx_freq2", rx_freq2)
        if supports32_bit_f_cnt is not None:
            pulumi.set(__self__, "supports32_bit_f_cnt", supports32_bit_f_cnt)
        if supports_class_b is not None:
            pulumi.set(__self__, "supports_class_b", supports_class_b)
        if supports_class_c is not None:
            pulumi.set(__self__, "supports_class_c", supports_class_c)
        if supports_join is not None:
            pulumi.set(__self__, "supports_join", supports_join)

    @property
    @pulumi.getter(name="classBTimeout")
    def class_b_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "class_b_timeout")

    @class_b_timeout.setter
    def class_b_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_b_timeout", value)

    @property
    @pulumi.getter(name="classCTimeout")
    def class_c_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "class_c_timeout")

    @class_c_timeout.setter
    def class_c_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_c_timeout", value)

    @property
    @pulumi.getter(name="factoryPresetFreqsList")
    def factory_preset_freqs_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "factory_preset_freqs_list")

    @factory_preset_freqs_list.setter
    def factory_preset_freqs_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "factory_preset_freqs_list", value)

    @property
    @pulumi.getter(name="macVersion")
    def mac_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_version")

    @mac_version.setter
    def mac_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_version", value)

    @property
    @pulumi.getter(name="maxDutyCycle")
    def max_duty_cycle(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_duty_cycle")

    @max_duty_cycle.setter
    def max_duty_cycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_duty_cycle", value)

    @property
    @pulumi.getter(name="maxEirp")
    def max_eirp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_eirp")

    @max_eirp.setter
    def max_eirp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_eirp", value)

    @property
    @pulumi.getter(name="pingSlotDr")
    def ping_slot_dr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ping_slot_dr")

    @ping_slot_dr.setter
    def ping_slot_dr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_slot_dr", value)

    @property
    @pulumi.getter(name="pingSlotFreq")
    def ping_slot_freq(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ping_slot_freq")

    @ping_slot_freq.setter
    def ping_slot_freq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_slot_freq", value)

    @property
    @pulumi.getter(name="pingSlotPeriod")
    def ping_slot_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ping_slot_period")

    @ping_slot_period.setter
    def ping_slot_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_slot_period", value)

    @property
    @pulumi.getter(name="regParamsRevision")
    def reg_params_revision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reg_params_revision")

    @reg_params_revision.setter
    def reg_params_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reg_params_revision", value)

    @property
    @pulumi.getter(name="rfRegion")
    def rf_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rf_region")

    @rf_region.setter
    def rf_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rf_region", value)

    @property
    @pulumi.getter(name="rxDataRate2")
    def rx_data_rate2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rx_data_rate2")

    @rx_data_rate2.setter
    def rx_data_rate2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rx_data_rate2", value)

    @property
    @pulumi.getter(name="rxDelay1")
    def rx_delay1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rx_delay1")

    @rx_delay1.setter
    def rx_delay1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rx_delay1", value)

    @property
    @pulumi.getter(name="rxDrOffset1")
    def rx_dr_offset1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rx_dr_offset1")

    @rx_dr_offset1.setter
    def rx_dr_offset1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rx_dr_offset1", value)

    @property
    @pulumi.getter(name="rxFreq2")
    def rx_freq2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rx_freq2")

    @rx_freq2.setter
    def rx_freq2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rx_freq2", value)

    @property
    @pulumi.getter(name="supports32BitFCnt")
    def supports32_bit_f_cnt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supports32_bit_f_cnt")

    @supports32_bit_f_cnt.setter
    def supports32_bit_f_cnt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports32_bit_f_cnt", value)

    @property
    @pulumi.getter(name="supportsClassB")
    def supports_class_b(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supports_class_b")

    @supports_class_b.setter
    def supports_class_b(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_class_b", value)

    @property
    @pulumi.getter(name="supportsClassC")
    def supports_class_c(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supports_class_c")

    @supports_class_c.setter
    def supports_class_c(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_class_c", value)

    @property
    @pulumi.getter(name="supportsJoin")
    def supports_join(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supports_join")

    @supports_join.setter
    def supports_join(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_join", value)


@pulumi.input_type
class DeviceProfileTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FuotaTaskLoRaWANArgs:
    def __init__(__self__, *,
                 rf_region: pulumi.Input[str],
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rf_region: FUOTA task LoRaWAN RF region
        :param pulumi.Input[str] start_time: FUOTA task LoRaWAN start time
        """
        pulumi.set(__self__, "rf_region", rf_region)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="rfRegion")
    def rf_region(self) -> pulumi.Input[str]:
        """
        FUOTA task LoRaWAN RF region
        """
        return pulumi.get(self, "rf_region")

    @rf_region.setter
    def rf_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "rf_region", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        FUOTA task LoRaWAN start time
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class FuotaTaskTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MulticastGroupLoRaWANArgs:
    def __init__(__self__, *,
                 dl_class: pulumi.Input[str],
                 rf_region: pulumi.Input[str],
                 number_of_devices_in_group: Optional[pulumi.Input[int]] = None,
                 number_of_devices_requested: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dl_class: Multicast group LoRaWAN DL Class
        :param pulumi.Input[str] rf_region: Multicast group LoRaWAN RF region
        :param pulumi.Input[int] number_of_devices_in_group: Multicast group number of devices in group. Returned after successful read.
        :param pulumi.Input[int] number_of_devices_requested: Multicast group number of devices requested. Returned after successful read.
        """
        pulumi.set(__self__, "dl_class", dl_class)
        pulumi.set(__self__, "rf_region", rf_region)
        if number_of_devices_in_group is not None:
            pulumi.set(__self__, "number_of_devices_in_group", number_of_devices_in_group)
        if number_of_devices_requested is not None:
            pulumi.set(__self__, "number_of_devices_requested", number_of_devices_requested)

    @property
    @pulumi.getter(name="dlClass")
    def dl_class(self) -> pulumi.Input[str]:
        """
        Multicast group LoRaWAN DL Class
        """
        return pulumi.get(self, "dl_class")

    @dl_class.setter
    def dl_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "dl_class", value)

    @property
    @pulumi.getter(name="rfRegion")
    def rf_region(self) -> pulumi.Input[str]:
        """
        Multicast group LoRaWAN RF region
        """
        return pulumi.get(self, "rf_region")

    @rf_region.setter
    def rf_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "rf_region", value)

    @property
    @pulumi.getter(name="numberOfDevicesInGroup")
    def number_of_devices_in_group(self) -> Optional[pulumi.Input[int]]:
        """
        Multicast group number of devices in group. Returned after successful read.
        """
        return pulumi.get(self, "number_of_devices_in_group")

    @number_of_devices_in_group.setter
    def number_of_devices_in_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_devices_in_group", value)

    @property
    @pulumi.getter(name="numberOfDevicesRequested")
    def number_of_devices_requested(self) -> Optional[pulumi.Input[int]]:
        """
        Multicast group number of devices requested. Returned after successful read.
        """
        return pulumi.get(self, "number_of_devices_requested")

    @number_of_devices_requested.setter
    def number_of_devices_requested(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_devices_requested", value)


@pulumi.input_type
class MulticastGroupTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetworkAnalyzerConfigurationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PartnerAccountSidewalkAccountInfoArgs:
    def __init__(__self__, *,
                 app_server_private_key: pulumi.Input[str]):
        pulumi.set(__self__, "app_server_private_key", app_server_private_key)

    @property
    @pulumi.getter(name="appServerPrivateKey")
    def app_server_private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_server_private_key")

    @app_server_private_key.setter
    def app_server_private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_server_private_key", value)


@pulumi.input_type
class PartnerAccountSidewalkUpdateAccountArgs:
    def __init__(__self__, *,
                 app_server_private_key: Optional[pulumi.Input[str]] = None):
        if app_server_private_key is not None:
            pulumi.set(__self__, "app_server_private_key", app_server_private_key)

    @property
    @pulumi.getter(name="appServerPrivateKey")
    def app_server_private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_server_private_key")

    @app_server_private_key.setter
    def app_server_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_server_private_key", value)


@pulumi.input_type
class PartnerAccountTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceProfileLoRaWANServiceProfileArgs:
    def __init__(__self__, *,
                 add_gw_metadata: Optional[pulumi.Input[bool]] = None,
                 channel_mask: Optional[pulumi.Input[str]] = None,
                 dev_status_req_freq: Optional[pulumi.Input[int]] = None,
                 dl_bucket_size: Optional[pulumi.Input[int]] = None,
                 dl_rate: Optional[pulumi.Input[int]] = None,
                 dl_rate_policy: Optional[pulumi.Input[str]] = None,
                 dr_max: Optional[pulumi.Input[int]] = None,
                 dr_min: Optional[pulumi.Input[int]] = None,
                 hr_allowed: Optional[pulumi.Input[bool]] = None,
                 min_gw_diversity: Optional[pulumi.Input[int]] = None,
                 nwk_geo_loc: Optional[pulumi.Input[bool]] = None,
                 pr_allowed: Optional[pulumi.Input[bool]] = None,
                 ra_allowed: Optional[pulumi.Input[bool]] = None,
                 report_dev_status_battery: Optional[pulumi.Input[bool]] = None,
                 report_dev_status_margin: Optional[pulumi.Input[bool]] = None,
                 target_per: Optional[pulumi.Input[int]] = None,
                 ul_bucket_size: Optional[pulumi.Input[int]] = None,
                 ul_rate: Optional[pulumi.Input[int]] = None,
                 ul_rate_policy: Optional[pulumi.Input[str]] = None):
        if add_gw_metadata is not None:
            pulumi.set(__self__, "add_gw_metadata", add_gw_metadata)
        if channel_mask is not None:
            pulumi.set(__self__, "channel_mask", channel_mask)
        if dev_status_req_freq is not None:
            pulumi.set(__self__, "dev_status_req_freq", dev_status_req_freq)
        if dl_bucket_size is not None:
            pulumi.set(__self__, "dl_bucket_size", dl_bucket_size)
        if dl_rate is not None:
            pulumi.set(__self__, "dl_rate", dl_rate)
        if dl_rate_policy is not None:
            pulumi.set(__self__, "dl_rate_policy", dl_rate_policy)
        if dr_max is not None:
            pulumi.set(__self__, "dr_max", dr_max)
        if dr_min is not None:
            pulumi.set(__self__, "dr_min", dr_min)
        if hr_allowed is not None:
            pulumi.set(__self__, "hr_allowed", hr_allowed)
        if min_gw_diversity is not None:
            pulumi.set(__self__, "min_gw_diversity", min_gw_diversity)
        if nwk_geo_loc is not None:
            pulumi.set(__self__, "nwk_geo_loc", nwk_geo_loc)
        if pr_allowed is not None:
            pulumi.set(__self__, "pr_allowed", pr_allowed)
        if ra_allowed is not None:
            pulumi.set(__self__, "ra_allowed", ra_allowed)
        if report_dev_status_battery is not None:
            pulumi.set(__self__, "report_dev_status_battery", report_dev_status_battery)
        if report_dev_status_margin is not None:
            pulumi.set(__self__, "report_dev_status_margin", report_dev_status_margin)
        if target_per is not None:
            pulumi.set(__self__, "target_per", target_per)
        if ul_bucket_size is not None:
            pulumi.set(__self__, "ul_bucket_size", ul_bucket_size)
        if ul_rate is not None:
            pulumi.set(__self__, "ul_rate", ul_rate)
        if ul_rate_policy is not None:
            pulumi.set(__self__, "ul_rate_policy", ul_rate_policy)

    @property
    @pulumi.getter(name="addGwMetadata")
    def add_gw_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_gw_metadata")

    @add_gw_metadata.setter
    def add_gw_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_gw_metadata", value)

    @property
    @pulumi.getter(name="channelMask")
    def channel_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channel_mask")

    @channel_mask.setter
    def channel_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_mask", value)

    @property
    @pulumi.getter(name="devStatusReqFreq")
    def dev_status_req_freq(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dev_status_req_freq")

    @dev_status_req_freq.setter
    def dev_status_req_freq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dev_status_req_freq", value)

    @property
    @pulumi.getter(name="dlBucketSize")
    def dl_bucket_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dl_bucket_size")

    @dl_bucket_size.setter
    def dl_bucket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dl_bucket_size", value)

    @property
    @pulumi.getter(name="dlRate")
    def dl_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dl_rate")

    @dl_rate.setter
    def dl_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dl_rate", value)

    @property
    @pulumi.getter(name="dlRatePolicy")
    def dl_rate_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dl_rate_policy")

    @dl_rate_policy.setter
    def dl_rate_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dl_rate_policy", value)

    @property
    @pulumi.getter(name="drMax")
    def dr_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dr_max")

    @dr_max.setter
    def dr_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dr_max", value)

    @property
    @pulumi.getter(name="drMin")
    def dr_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dr_min")

    @dr_min.setter
    def dr_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dr_min", value)

    @property
    @pulumi.getter(name="hrAllowed")
    def hr_allowed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hr_allowed")

    @hr_allowed.setter
    def hr_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hr_allowed", value)

    @property
    @pulumi.getter(name="minGwDiversity")
    def min_gw_diversity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_gw_diversity")

    @min_gw_diversity.setter
    def min_gw_diversity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_gw_diversity", value)

    @property
    @pulumi.getter(name="nwkGeoLoc")
    def nwk_geo_loc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nwk_geo_loc")

    @nwk_geo_loc.setter
    def nwk_geo_loc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nwk_geo_loc", value)

    @property
    @pulumi.getter(name="prAllowed")
    def pr_allowed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pr_allowed")

    @pr_allowed.setter
    def pr_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pr_allowed", value)

    @property
    @pulumi.getter(name="raAllowed")
    def ra_allowed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ra_allowed")

    @ra_allowed.setter
    def ra_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ra_allowed", value)

    @property
    @pulumi.getter(name="reportDevStatusBattery")
    def report_dev_status_battery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report_dev_status_battery")

    @report_dev_status_battery.setter
    def report_dev_status_battery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_dev_status_battery", value)

    @property
    @pulumi.getter(name="reportDevStatusMargin")
    def report_dev_status_margin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report_dev_status_margin")

    @report_dev_status_margin.setter
    def report_dev_status_margin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_dev_status_margin", value)

    @property
    @pulumi.getter(name="targetPer")
    def target_per(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target_per")

    @target_per.setter
    def target_per(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_per", value)

    @property
    @pulumi.getter(name="ulBucketSize")
    def ul_bucket_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ul_bucket_size")

    @ul_bucket_size.setter
    def ul_bucket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ul_bucket_size", value)

    @property
    @pulumi.getter(name="ulRate")
    def ul_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ul_rate")

    @ul_rate.setter
    def ul_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ul_rate", value)

    @property
    @pulumi.getter(name="ulRatePolicy")
    def ul_rate_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ul_rate_policy")

    @ul_rate_policy.setter
    def ul_rate_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ul_rate_policy", value)


@pulumi.input_type
class ServiceProfileTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TaskDefinitionLoRaWANGatewayVersionArgs:
    def __init__(__self__, *,
                 model: Optional[pulumi.Input[str]] = None,
                 package_version: Optional[pulumi.Input[str]] = None,
                 station: Optional[pulumi.Input[str]] = None):
        if model is not None:
            pulumi.set(__self__, "model", model)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)
        if station is not None:
            pulumi.set(__self__, "station", station)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "package_version")

    @package_version.setter
    def package_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_version", value)

    @property
    @pulumi.getter
    def station(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "station")

    @station.setter
    def station(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "station", value)


@pulumi.input_type
class TaskDefinitionLoRaWANUpdateGatewayTaskCreateArgs:
    def __init__(__self__, *,
                 current_version: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']] = None,
                 sig_key_crc: Optional[pulumi.Input[int]] = None,
                 update_signature: Optional[pulumi.Input[str]] = None,
                 update_version: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']] = None):
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if sig_key_crc is not None:
            pulumi.set(__self__, "sig_key_crc", sig_key_crc)
        if update_signature is not None:
            pulumi.set(__self__, "update_signature", update_signature)
        if update_version is not None:
            pulumi.set(__self__, "update_version", update_version)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]:
        return pulumi.get(self, "current_version")

    @current_version.setter
    def current_version(self, value: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]):
        pulumi.set(self, "current_version", value)

    @property
    @pulumi.getter(name="sigKeyCrc")
    def sig_key_crc(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sig_key_crc")

    @sig_key_crc.setter
    def sig_key_crc(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sig_key_crc", value)

    @property
    @pulumi.getter(name="updateSignature")
    def update_signature(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_signature")

    @update_signature.setter
    def update_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_signature", value)

    @property
    @pulumi.getter(name="updateVersion")
    def update_version(self) -> Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]:
        return pulumi.get(self, "update_version")

    @update_version.setter
    def update_version(self, value: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]):
        pulumi.set(self, "update_version", value)


@pulumi.input_type
class TaskDefinitionLoRaWANUpdateGatewayTaskEntryArgs:
    def __init__(__self__, *,
                 current_version: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']] = None,
                 update_version: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']] = None):
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if update_version is not None:
            pulumi.set(__self__, "update_version", update_version)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]:
        return pulumi.get(self, "current_version")

    @current_version.setter
    def current_version(self, value: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]):
        pulumi.set(self, "current_version", value)

    @property
    @pulumi.getter(name="updateVersion")
    def update_version(self) -> Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]:
        return pulumi.get(self, "update_version")

    @update_version.setter
    def update_version(self, value: Optional[pulumi.Input['TaskDefinitionLoRaWANGatewayVersionArgs']]):
        pulumi.set(self, "update_version", value)


@pulumi.input_type
class TaskDefinitionTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TaskDefinitionUpdateWirelessGatewayTaskCreateArgs:
    def __init__(__self__, *,
                 lo_ra_wan: Optional[pulumi.Input['TaskDefinitionLoRaWANUpdateGatewayTaskCreateArgs']] = None,
                 update_data_role: Optional[pulumi.Input[str]] = None,
                 update_data_source: Optional[pulumi.Input[str]] = None):
        if lo_ra_wan is not None:
            pulumi.set(__self__, "lo_ra_wan", lo_ra_wan)
        if update_data_role is not None:
            pulumi.set(__self__, "update_data_role", update_data_role)
        if update_data_source is not None:
            pulumi.set(__self__, "update_data_source", update_data_source)

    @property
    @pulumi.getter(name="loRaWAN")
    def lo_ra_wan(self) -> Optional[pulumi.Input['TaskDefinitionLoRaWANUpdateGatewayTaskCreateArgs']]:
        return pulumi.get(self, "lo_ra_wan")

    @lo_ra_wan.setter
    def lo_ra_wan(self, value: Optional[pulumi.Input['TaskDefinitionLoRaWANUpdateGatewayTaskCreateArgs']]):
        pulumi.set(self, "lo_ra_wan", value)

    @property
    @pulumi.getter(name="updateDataRole")
    def update_data_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_data_role")

    @update_data_role.setter
    def update_data_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_data_role", value)

    @property
    @pulumi.getter(name="updateDataSource")
    def update_data_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_data_source")

    @update_data_source.setter
    def update_data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_data_source", value)


@pulumi.input_type
class TraceContentPropertiesArgs:
    def __init__(__self__, *,
                 log_level: Optional[pulumi.Input['NetworkAnalyzerConfigurationLogLevel']] = None,
                 wireless_device_frame_info: Optional[pulumi.Input['NetworkAnalyzerConfigurationWirelessDeviceFrameInfo']] = None):
        """
        Trace content for your wireless gateway and wireless device resources
        """
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if wireless_device_frame_info is not None:
            pulumi.set(__self__, "wireless_device_frame_info", wireless_device_frame_info)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input['NetworkAnalyzerConfigurationLogLevel']]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input['NetworkAnalyzerConfigurationLogLevel']]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="wirelessDeviceFrameInfo")
    def wireless_device_frame_info(self) -> Optional[pulumi.Input['NetworkAnalyzerConfigurationWirelessDeviceFrameInfo']]:
        return pulumi.get(self, "wireless_device_frame_info")

    @wireless_device_frame_info.setter
    def wireless_device_frame_info(self, value: Optional[pulumi.Input['NetworkAnalyzerConfigurationWirelessDeviceFrameInfo']]):
        pulumi.set(self, "wireless_device_frame_info", value)


@pulumi.input_type
class WirelessDeviceAbpV10xArgs:
    def __init__(__self__, *,
                 dev_addr: pulumi.Input[str],
                 session_keys: pulumi.Input['WirelessDeviceSessionKeysAbpV10xArgs']):
        pulumi.set(__self__, "dev_addr", dev_addr)
        pulumi.set(__self__, "session_keys", session_keys)

    @property
    @pulumi.getter(name="devAddr")
    def dev_addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dev_addr")

    @dev_addr.setter
    def dev_addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "dev_addr", value)

    @property
    @pulumi.getter(name="sessionKeys")
    def session_keys(self) -> pulumi.Input['WirelessDeviceSessionKeysAbpV10xArgs']:
        return pulumi.get(self, "session_keys")

    @session_keys.setter
    def session_keys(self, value: pulumi.Input['WirelessDeviceSessionKeysAbpV10xArgs']):
        pulumi.set(self, "session_keys", value)


@pulumi.input_type
class WirelessDeviceAbpV11Args:
    def __init__(__self__, *,
                 dev_addr: pulumi.Input[str],
                 session_keys: pulumi.Input['WirelessDeviceSessionKeysAbpV11Args']):
        pulumi.set(__self__, "dev_addr", dev_addr)
        pulumi.set(__self__, "session_keys", session_keys)

    @property
    @pulumi.getter(name="devAddr")
    def dev_addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dev_addr")

    @dev_addr.setter
    def dev_addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "dev_addr", value)

    @property
    @pulumi.getter(name="sessionKeys")
    def session_keys(self) -> pulumi.Input['WirelessDeviceSessionKeysAbpV11Args']:
        return pulumi.get(self, "session_keys")

    @session_keys.setter
    def session_keys(self, value: pulumi.Input['WirelessDeviceSessionKeysAbpV11Args']):
        pulumi.set(self, "session_keys", value)


@pulumi.input_type
class WirelessDeviceLoRaWANDeviceArgs:
    def __init__(__self__, *,
                 abp_v10x: Optional[pulumi.Input['WirelessDeviceAbpV10xArgs']] = None,
                 abp_v11: Optional[pulumi.Input['WirelessDeviceAbpV11Args']] = None,
                 dev_eui: Optional[pulumi.Input[str]] = None,
                 device_profile_id: Optional[pulumi.Input[str]] = None,
                 otaa_v10x: Optional[pulumi.Input['WirelessDeviceOtaaV10xArgs']] = None,
                 otaa_v11: Optional[pulumi.Input['WirelessDeviceOtaaV11Args']] = None,
                 service_profile_id: Optional[pulumi.Input[str]] = None):
        if abp_v10x is not None:
            pulumi.set(__self__, "abp_v10x", abp_v10x)
        if abp_v11 is not None:
            pulumi.set(__self__, "abp_v11", abp_v11)
        if dev_eui is not None:
            pulumi.set(__self__, "dev_eui", dev_eui)
        if device_profile_id is not None:
            pulumi.set(__self__, "device_profile_id", device_profile_id)
        if otaa_v10x is not None:
            pulumi.set(__self__, "otaa_v10x", otaa_v10x)
        if otaa_v11 is not None:
            pulumi.set(__self__, "otaa_v11", otaa_v11)
        if service_profile_id is not None:
            pulumi.set(__self__, "service_profile_id", service_profile_id)

    @property
    @pulumi.getter(name="abpV10x")
    def abp_v10x(self) -> Optional[pulumi.Input['WirelessDeviceAbpV10xArgs']]:
        return pulumi.get(self, "abp_v10x")

    @abp_v10x.setter
    def abp_v10x(self, value: Optional[pulumi.Input['WirelessDeviceAbpV10xArgs']]):
        pulumi.set(self, "abp_v10x", value)

    @property
    @pulumi.getter(name="abpV11")
    def abp_v11(self) -> Optional[pulumi.Input['WirelessDeviceAbpV11Args']]:
        return pulumi.get(self, "abp_v11")

    @abp_v11.setter
    def abp_v11(self, value: Optional[pulumi.Input['WirelessDeviceAbpV11Args']]):
        pulumi.set(self, "abp_v11", value)

    @property
    @pulumi.getter(name="devEui")
    def dev_eui(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dev_eui")

    @dev_eui.setter
    def dev_eui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_eui", value)

    @property
    @pulumi.getter(name="deviceProfileId")
    def device_profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_profile_id")

    @device_profile_id.setter
    def device_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_profile_id", value)

    @property
    @pulumi.getter(name="otaaV10x")
    def otaa_v10x(self) -> Optional[pulumi.Input['WirelessDeviceOtaaV10xArgs']]:
        return pulumi.get(self, "otaa_v10x")

    @otaa_v10x.setter
    def otaa_v10x(self, value: Optional[pulumi.Input['WirelessDeviceOtaaV10xArgs']]):
        pulumi.set(self, "otaa_v10x", value)

    @property
    @pulumi.getter(name="otaaV11")
    def otaa_v11(self) -> Optional[pulumi.Input['WirelessDeviceOtaaV11Args']]:
        return pulumi.get(self, "otaa_v11")

    @otaa_v11.setter
    def otaa_v11(self, value: Optional[pulumi.Input['WirelessDeviceOtaaV11Args']]):
        pulumi.set(self, "otaa_v11", value)

    @property
    @pulumi.getter(name="serviceProfileId")
    def service_profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_profile_id")

    @service_profile_id.setter
    def service_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_profile_id", value)


@pulumi.input_type
class WirelessDeviceOtaaV10xArgs:
    def __init__(__self__, *,
                 app_eui: pulumi.Input[str],
                 app_key: pulumi.Input[str]):
        pulumi.set(__self__, "app_eui", app_eui)
        pulumi.set(__self__, "app_key", app_key)

    @property
    @pulumi.getter(name="appEui")
    def app_eui(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_eui")

    @app_eui.setter
    def app_eui(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_eui", value)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key", value)


@pulumi.input_type
class WirelessDeviceOtaaV11Args:
    def __init__(__self__, *,
                 app_key: pulumi.Input[str],
                 join_eui: pulumi.Input[str],
                 nwk_key: pulumi.Input[str]):
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "join_eui", join_eui)
        pulumi.set(__self__, "nwk_key", nwk_key)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key", value)

    @property
    @pulumi.getter(name="joinEui")
    def join_eui(self) -> pulumi.Input[str]:
        return pulumi.get(self, "join_eui")

    @join_eui.setter
    def join_eui(self, value: pulumi.Input[str]):
        pulumi.set(self, "join_eui", value)

    @property
    @pulumi.getter(name="nwkKey")
    def nwk_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nwk_key")

    @nwk_key.setter
    def nwk_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "nwk_key", value)


@pulumi.input_type
class WirelessDeviceSessionKeysAbpV10xArgs:
    def __init__(__self__, *,
                 app_s_key: pulumi.Input[str],
                 nwk_s_key: pulumi.Input[str]):
        pulumi.set(__self__, "app_s_key", app_s_key)
        pulumi.set(__self__, "nwk_s_key", nwk_s_key)

    @property
    @pulumi.getter(name="appSKey")
    def app_s_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_s_key")

    @app_s_key.setter
    def app_s_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_s_key", value)

    @property
    @pulumi.getter(name="nwkSKey")
    def nwk_s_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nwk_s_key")

    @nwk_s_key.setter
    def nwk_s_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "nwk_s_key", value)


@pulumi.input_type
class WirelessDeviceSessionKeysAbpV11Args:
    def __init__(__self__, *,
                 app_s_key: pulumi.Input[str],
                 f_nwk_s_int_key: pulumi.Input[str],
                 nwk_s_enc_key: pulumi.Input[str],
                 s_nwk_s_int_key: pulumi.Input[str]):
        pulumi.set(__self__, "app_s_key", app_s_key)
        pulumi.set(__self__, "f_nwk_s_int_key", f_nwk_s_int_key)
        pulumi.set(__self__, "nwk_s_enc_key", nwk_s_enc_key)
        pulumi.set(__self__, "s_nwk_s_int_key", s_nwk_s_int_key)

    @property
    @pulumi.getter(name="appSKey")
    def app_s_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_s_key")

    @app_s_key.setter
    def app_s_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_s_key", value)

    @property
    @pulumi.getter(name="fNwkSIntKey")
    def f_nwk_s_int_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "f_nwk_s_int_key")

    @f_nwk_s_int_key.setter
    def f_nwk_s_int_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "f_nwk_s_int_key", value)

    @property
    @pulumi.getter(name="nwkSEncKey")
    def nwk_s_enc_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nwk_s_enc_key")

    @nwk_s_enc_key.setter
    def nwk_s_enc_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "nwk_s_enc_key", value)

    @property
    @pulumi.getter(name="sNwkSIntKey")
    def s_nwk_s_int_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s_nwk_s_int_key")

    @s_nwk_s_int_key.setter
    def s_nwk_s_int_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "s_nwk_s_int_key", value)


@pulumi.input_type
class WirelessDeviceTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessGatewayLoRaWANGatewayArgs:
    def __init__(__self__, *,
                 gateway_eui: pulumi.Input[str],
                 rf_region: pulumi.Input[str]):
        pulumi.set(__self__, "gateway_eui", gateway_eui)
        pulumi.set(__self__, "rf_region", rf_region)

    @property
    @pulumi.getter(name="gatewayEui")
    def gateway_eui(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway_eui")

    @gateway_eui.setter
    def gateway_eui(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_eui", value)

    @property
    @pulumi.getter(name="rfRegion")
    def rf_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rf_region")

    @rf_region.setter
    def rf_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "rf_region", value)


@pulumi.input_type
class WirelessGatewayTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


