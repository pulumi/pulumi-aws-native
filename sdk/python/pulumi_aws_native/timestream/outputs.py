# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DatabaseTag',
    'MagneticStoreWritePropertiesProperties',
    'MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties',
    'MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties',
    'RetentionPropertiesProperties',
    'ScheduledQueryDimensionMapping',
    'ScheduledQueryErrorReportConfiguration',
    'ScheduledQueryMixedMeasureMapping',
    'ScheduledQueryMultiMeasureAttributeMapping',
    'ScheduledQueryMultiMeasureMappings',
    'ScheduledQueryNotificationConfiguration',
    'ScheduledQueryS3Configuration',
    'ScheduledQueryScheduleConfiguration',
    'ScheduledQuerySnsConfiguration',
    'ScheduledQueryTag',
    'ScheduledQueryTargetConfiguration',
    'ScheduledQueryTimestreamConfiguration',
    'SchemaProperties',
    'TablePartitionKey',
    'TableTag',
]

@pulumi.output_type
class DatabaseTag(dict):
    """
    You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
    """
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
        """
        DatabaseTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class MagneticStoreWritePropertiesProperties(dict):
    """
    The properties that determine whether magnetic store writes are enabled.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableMagneticStoreWrites":
            suggest = "enable_magnetic_store_writes"
        elif key == "magneticStoreRejectedDataLocation":
            suggest = "magnetic_store_rejected_data_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MagneticStoreWritePropertiesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MagneticStoreWritePropertiesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MagneticStoreWritePropertiesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_magnetic_store_writes: bool,
                 magnetic_store_rejected_data_location: Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties'] = None):
        """
        The properties that determine whether magnetic store writes are enabled.
        :param bool enable_magnetic_store_writes: Boolean flag indicating whether magnetic store writes are enabled.
        :param 'MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties' magnetic_store_rejected_data_location: Location to store information about records that were asynchronously rejected during magnetic store writes.
        """
        MagneticStoreWritePropertiesProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_magnetic_store_writes=enable_magnetic_store_writes,
            magnetic_store_rejected_data_location=magnetic_store_rejected_data_location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_magnetic_store_writes: Optional[bool] = None,
             magnetic_store_rejected_data_location: Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_magnetic_store_writes is None and 'enableMagneticStoreWrites' in kwargs:
            enable_magnetic_store_writes = kwargs['enableMagneticStoreWrites']
        if enable_magnetic_store_writes is None:
            raise TypeError("Missing 'enable_magnetic_store_writes' argument")
        if magnetic_store_rejected_data_location is None and 'magneticStoreRejectedDataLocation' in kwargs:
            magnetic_store_rejected_data_location = kwargs['magneticStoreRejectedDataLocation']

        _setter("enable_magnetic_store_writes", enable_magnetic_store_writes)
        if magnetic_store_rejected_data_location is not None:
            _setter("magnetic_store_rejected_data_location", magnetic_store_rejected_data_location)

    @property
    @pulumi.getter(name="enableMagneticStoreWrites")
    def enable_magnetic_store_writes(self) -> bool:
        """
        Boolean flag indicating whether magnetic store writes are enabled.
        """
        return pulumi.get(self, "enable_magnetic_store_writes")

    @property
    @pulumi.getter(name="magneticStoreRejectedDataLocation")
    def magnetic_store_rejected_data_location(self) -> Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties']:
        """
        Location to store information about records that were asynchronously rejected during magnetic store writes.
        """
        return pulumi.get(self, "magnetic_store_rejected_data_location")


@pulumi.output_type
class MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties(dict):
    """
    Location to store information about records that were asynchronously rejected during magnetic store writes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Configuration":
            suggest = "s3_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_configuration: Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties'] = None):
        """
        Location to store information about records that were asynchronously rejected during magnetic store writes.
        :param 'MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties' s3_configuration: S3 configuration for location to store rejections from magnetic store writes
        """
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3_configuration=s3_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3_configuration: Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if s3_configuration is None and 's3Configuration' in kwargs:
            s3_configuration = kwargs['s3Configuration']

        if s3_configuration is not None:
            _setter("s3_configuration", s3_configuration)

    @property
    @pulumi.getter(name="s3Configuration")
    def s3_configuration(self) -> Optional['outputs.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties']:
        """
        S3 configuration for location to store rejections from magnetic store writes
        """
        return pulumi.get(self, "s3_configuration")


@pulumi.output_type
class MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties(dict):
    """
    S3 configuration for location to store rejections from magnetic store writes
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "encryptionOption":
            suggest = "encryption_option"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "objectKeyPrefix":
            suggest = "object_key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 encryption_option: str,
                 kms_key_id: Optional[str] = None,
                 object_key_prefix: Optional[str] = None):
        """
        S3 configuration for location to store rejections from magnetic store writes
        :param str bucket_name: The bucket name used to store the data.
        :param str encryption_option: Either SSE_KMS or SSE_S3.
        :param str kms_key_id: Must be provided if SSE_KMS is specified as the encryption option
        :param str object_key_prefix: String used to prefix all data in the bucket.
        """
        MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            encryption_option=encryption_option,
            kms_key_id=kms_key_id,
            object_key_prefix=object_key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: Optional[str] = None,
             encryption_option: Optional[str] = None,
             kms_key_id: Optional[str] = None,
             object_key_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_name is None and 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if bucket_name is None:
            raise TypeError("Missing 'bucket_name' argument")
        if encryption_option is None and 'encryptionOption' in kwargs:
            encryption_option = kwargs['encryptionOption']
        if encryption_option is None:
            raise TypeError("Missing 'encryption_option' argument")
        if kms_key_id is None and 'kmsKeyId' in kwargs:
            kms_key_id = kwargs['kmsKeyId']
        if object_key_prefix is None and 'objectKeyPrefix' in kwargs:
            object_key_prefix = kwargs['objectKeyPrefix']

        _setter("bucket_name", bucket_name)
        _setter("encryption_option", encryption_option)
        if kms_key_id is not None:
            _setter("kms_key_id", kms_key_id)
        if object_key_prefix is not None:
            _setter("object_key_prefix", object_key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The bucket name used to store the data.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="encryptionOption")
    def encryption_option(self) -> str:
        """
        Either SSE_KMS or SSE_S3.
        """
        return pulumi.get(self, "encryption_option")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        Must be provided if SSE_KMS is specified as the encryption option
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[str]:
        """
        String used to prefix all data in the bucket.
        """
        return pulumi.get(self, "object_key_prefix")


@pulumi.output_type
class RetentionPropertiesProperties(dict):
    """
    The retention duration of the memory store and the magnetic store.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "magneticStoreRetentionPeriodInDays":
            suggest = "magnetic_store_retention_period_in_days"
        elif key == "memoryStoreRetentionPeriodInHours":
            suggest = "memory_store_retention_period_in_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetentionPropertiesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetentionPropertiesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetentionPropertiesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 magnetic_store_retention_period_in_days: Optional[str] = None,
                 memory_store_retention_period_in_hours: Optional[str] = None):
        """
        The retention duration of the memory store and the magnetic store.
        :param str magnetic_store_retention_period_in_days: The duration for which data must be stored in the magnetic store.
        :param str memory_store_retention_period_in_hours: The duration for which data must be stored in the memory store.
        """
        RetentionPropertiesProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            magnetic_store_retention_period_in_days=magnetic_store_retention_period_in_days,
            memory_store_retention_period_in_hours=memory_store_retention_period_in_hours,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             magnetic_store_retention_period_in_days: Optional[str] = None,
             memory_store_retention_period_in_hours: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if magnetic_store_retention_period_in_days is None and 'magneticStoreRetentionPeriodInDays' in kwargs:
            magnetic_store_retention_period_in_days = kwargs['magneticStoreRetentionPeriodInDays']
        if memory_store_retention_period_in_hours is None and 'memoryStoreRetentionPeriodInHours' in kwargs:
            memory_store_retention_period_in_hours = kwargs['memoryStoreRetentionPeriodInHours']

        if magnetic_store_retention_period_in_days is not None:
            _setter("magnetic_store_retention_period_in_days", magnetic_store_retention_period_in_days)
        if memory_store_retention_period_in_hours is not None:
            _setter("memory_store_retention_period_in_hours", memory_store_retention_period_in_hours)

    @property
    @pulumi.getter(name="magneticStoreRetentionPeriodInDays")
    def magnetic_store_retention_period_in_days(self) -> Optional[str]:
        """
        The duration for which data must be stored in the magnetic store.
        """
        return pulumi.get(self, "magnetic_store_retention_period_in_days")

    @property
    @pulumi.getter(name="memoryStoreRetentionPeriodInHours")
    def memory_store_retention_period_in_hours(self) -> Optional[str]:
        """
        The duration for which data must be stored in the memory store.
        """
        return pulumi.get(self, "memory_store_retention_period_in_hours")


@pulumi.output_type
class ScheduledQueryDimensionMapping(dict):
    """
    This type is used to map column(s) from the query result to a dimension in the destination table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionValueType":
            suggest = "dimension_value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryDimensionMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryDimensionMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryDimensionMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension_value_type: 'ScheduledQueryDimensionValueType',
                 name: str):
        """
        This type is used to map column(s) from the query result to a dimension in the destination table.
        """
        ScheduledQueryDimensionMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_value_type=dimension_value_type,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_value_type: Optional['ScheduledQueryDimensionValueType'] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if dimension_value_type is None and 'dimensionValueType' in kwargs:
            dimension_value_type = kwargs['dimensionValueType']
        if dimension_value_type is None:
            raise TypeError("Missing 'dimension_value_type' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("dimension_value_type", dimension_value_type)
        _setter("name", name)

    @property
    @pulumi.getter(name="dimensionValueType")
    def dimension_value_type(self) -> 'ScheduledQueryDimensionValueType':
        return pulumi.get(self, "dimension_value_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class ScheduledQueryErrorReportConfiguration(dict):
    """
    Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Configuration":
            suggest = "s3_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryErrorReportConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryErrorReportConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryErrorReportConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_configuration: 'outputs.ScheduledQueryS3Configuration'):
        """
        Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
        """
        ScheduledQueryErrorReportConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3_configuration=s3_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3_configuration: Optional['outputs.ScheduledQueryS3Configuration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if s3_configuration is None and 's3Configuration' in kwargs:
            s3_configuration = kwargs['s3Configuration']
        if s3_configuration is None:
            raise TypeError("Missing 's3_configuration' argument")

        _setter("s3_configuration", s3_configuration)

    @property
    @pulumi.getter(name="s3Configuration")
    def s3_configuration(self) -> 'outputs.ScheduledQueryS3Configuration':
        return pulumi.get(self, "s3_configuration")


@pulumi.output_type
class ScheduledQueryMixedMeasureMapping(dict):
    """
    MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "measureValueType":
            suggest = "measure_value_type"
        elif key == "measureName":
            suggest = "measure_name"
        elif key == "multiMeasureAttributeMappings":
            suggest = "multi_measure_attribute_mappings"
        elif key == "sourceColumn":
            suggest = "source_column"
        elif key == "targetMeasureName":
            suggest = "target_measure_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryMixedMeasureMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryMixedMeasureMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryMixedMeasureMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 measure_value_type: 'ScheduledQueryMixedMeasureMappingMeasureValueType',
                 measure_name: Optional[str] = None,
                 multi_measure_attribute_mappings: Optional[Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping']] = None,
                 source_column: Optional[str] = None,
                 target_measure_name: Optional[str] = None):
        """
        MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
        """
        ScheduledQueryMixedMeasureMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            measure_value_type=measure_value_type,
            measure_name=measure_name,
            multi_measure_attribute_mappings=multi_measure_attribute_mappings,
            source_column=source_column,
            target_measure_name=target_measure_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             measure_value_type: Optional['ScheduledQueryMixedMeasureMappingMeasureValueType'] = None,
             measure_name: Optional[str] = None,
             multi_measure_attribute_mappings: Optional[Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping']] = None,
             source_column: Optional[str] = None,
             target_measure_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if measure_value_type is None and 'measureValueType' in kwargs:
            measure_value_type = kwargs['measureValueType']
        if measure_value_type is None:
            raise TypeError("Missing 'measure_value_type' argument")
        if measure_name is None and 'measureName' in kwargs:
            measure_name = kwargs['measureName']
        if multi_measure_attribute_mappings is None and 'multiMeasureAttributeMappings' in kwargs:
            multi_measure_attribute_mappings = kwargs['multiMeasureAttributeMappings']
        if source_column is None and 'sourceColumn' in kwargs:
            source_column = kwargs['sourceColumn']
        if target_measure_name is None and 'targetMeasureName' in kwargs:
            target_measure_name = kwargs['targetMeasureName']

        _setter("measure_value_type", measure_value_type)
        if measure_name is not None:
            _setter("measure_name", measure_name)
        if multi_measure_attribute_mappings is not None:
            _setter("multi_measure_attribute_mappings", multi_measure_attribute_mappings)
        if source_column is not None:
            _setter("source_column", source_column)
        if target_measure_name is not None:
            _setter("target_measure_name", target_measure_name)

    @property
    @pulumi.getter(name="measureValueType")
    def measure_value_type(self) -> 'ScheduledQueryMixedMeasureMappingMeasureValueType':
        return pulumi.get(self, "measure_value_type")

    @property
    @pulumi.getter(name="measureName")
    def measure_name(self) -> Optional[str]:
        return pulumi.get(self, "measure_name")

    @property
    @pulumi.getter(name="multiMeasureAttributeMappings")
    def multi_measure_attribute_mappings(self) -> Optional[Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping']]:
        return pulumi.get(self, "multi_measure_attribute_mappings")

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> Optional[str]:
        return pulumi.get(self, "source_column")

    @property
    @pulumi.getter(name="targetMeasureName")
    def target_measure_name(self) -> Optional[str]:
        return pulumi.get(self, "target_measure_name")


@pulumi.output_type
class ScheduledQueryMultiMeasureAttributeMapping(dict):
    """
    An attribute mapping to be used for mapping query results to ingest data for multi-measure attributes.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "measureValueType":
            suggest = "measure_value_type"
        elif key == "sourceColumn":
            suggest = "source_column"
        elif key == "targetMultiMeasureAttributeName":
            suggest = "target_multi_measure_attribute_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryMultiMeasureAttributeMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryMultiMeasureAttributeMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryMultiMeasureAttributeMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 measure_value_type: 'ScheduledQueryMultiMeasureAttributeMappingMeasureValueType',
                 source_column: str,
                 target_multi_measure_attribute_name: Optional[str] = None):
        """
        An attribute mapping to be used for mapping query results to ingest data for multi-measure attributes.
        """
        ScheduledQueryMultiMeasureAttributeMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            measure_value_type=measure_value_type,
            source_column=source_column,
            target_multi_measure_attribute_name=target_multi_measure_attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             measure_value_type: Optional['ScheduledQueryMultiMeasureAttributeMappingMeasureValueType'] = None,
             source_column: Optional[str] = None,
             target_multi_measure_attribute_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if measure_value_type is None and 'measureValueType' in kwargs:
            measure_value_type = kwargs['measureValueType']
        if measure_value_type is None:
            raise TypeError("Missing 'measure_value_type' argument")
        if source_column is None and 'sourceColumn' in kwargs:
            source_column = kwargs['sourceColumn']
        if source_column is None:
            raise TypeError("Missing 'source_column' argument")
        if target_multi_measure_attribute_name is None and 'targetMultiMeasureAttributeName' in kwargs:
            target_multi_measure_attribute_name = kwargs['targetMultiMeasureAttributeName']

        _setter("measure_value_type", measure_value_type)
        _setter("source_column", source_column)
        if target_multi_measure_attribute_name is not None:
            _setter("target_multi_measure_attribute_name", target_multi_measure_attribute_name)

    @property
    @pulumi.getter(name="measureValueType")
    def measure_value_type(self) -> 'ScheduledQueryMultiMeasureAttributeMappingMeasureValueType':
        return pulumi.get(self, "measure_value_type")

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> str:
        return pulumi.get(self, "source_column")

    @property
    @pulumi.getter(name="targetMultiMeasureAttributeName")
    def target_multi_measure_attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "target_multi_measure_attribute_name")


@pulumi.output_type
class ScheduledQueryMultiMeasureMappings(dict):
    """
    Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multiMeasureAttributeMappings":
            suggest = "multi_measure_attribute_mappings"
        elif key == "targetMultiMeasureName":
            suggest = "target_multi_measure_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryMultiMeasureMappings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryMultiMeasureMappings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryMultiMeasureMappings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 multi_measure_attribute_mappings: Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping'],
                 target_multi_measure_name: Optional[str] = None):
        """
        Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
        """
        ScheduledQueryMultiMeasureMappings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            multi_measure_attribute_mappings=multi_measure_attribute_mappings,
            target_multi_measure_name=target_multi_measure_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             multi_measure_attribute_mappings: Optional[Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping']] = None,
             target_multi_measure_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if multi_measure_attribute_mappings is None and 'multiMeasureAttributeMappings' in kwargs:
            multi_measure_attribute_mappings = kwargs['multiMeasureAttributeMappings']
        if multi_measure_attribute_mappings is None:
            raise TypeError("Missing 'multi_measure_attribute_mappings' argument")
        if target_multi_measure_name is None and 'targetMultiMeasureName' in kwargs:
            target_multi_measure_name = kwargs['targetMultiMeasureName']

        _setter("multi_measure_attribute_mappings", multi_measure_attribute_mappings)
        if target_multi_measure_name is not None:
            _setter("target_multi_measure_name", target_multi_measure_name)

    @property
    @pulumi.getter(name="multiMeasureAttributeMappings")
    def multi_measure_attribute_mappings(self) -> Sequence['outputs.ScheduledQueryMultiMeasureAttributeMapping']:
        return pulumi.get(self, "multi_measure_attribute_mappings")

    @property
    @pulumi.getter(name="targetMultiMeasureName")
    def target_multi_measure_name(self) -> Optional[str]:
        return pulumi.get(self, "target_multi_measure_name")


@pulumi.output_type
class ScheduledQueryNotificationConfiguration(dict):
    """
    Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "snsConfiguration":
            suggest = "sns_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryNotificationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryNotificationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryNotificationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sns_configuration: 'outputs.ScheduledQuerySnsConfiguration'):
        """
        Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
        """
        ScheduledQueryNotificationConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sns_configuration=sns_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sns_configuration: Optional['outputs.ScheduledQuerySnsConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if sns_configuration is None and 'snsConfiguration' in kwargs:
            sns_configuration = kwargs['snsConfiguration']
        if sns_configuration is None:
            raise TypeError("Missing 'sns_configuration' argument")

        _setter("sns_configuration", sns_configuration)

    @property
    @pulumi.getter(name="snsConfiguration")
    def sns_configuration(self) -> 'outputs.ScheduledQuerySnsConfiguration':
        return pulumi.get(self, "sns_configuration")


@pulumi.output_type
class ScheduledQueryS3Configuration(dict):
    """
    Details on S3 location for error reports that result from running a query.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "encryptionOption":
            suggest = "encryption_option"
        elif key == "objectKeyPrefix":
            suggest = "object_key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryS3Configuration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryS3Configuration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryS3Configuration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 encryption_option: Optional['ScheduledQueryEncryptionOption'] = None,
                 object_key_prefix: Optional[str] = None):
        """
        Details on S3 location for error reports that result from running a query.
        """
        ScheduledQueryS3Configuration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            encryption_option=encryption_option,
            object_key_prefix=object_key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: Optional[str] = None,
             encryption_option: Optional['ScheduledQueryEncryptionOption'] = None,
             object_key_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_name is None and 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if bucket_name is None:
            raise TypeError("Missing 'bucket_name' argument")
        if encryption_option is None and 'encryptionOption' in kwargs:
            encryption_option = kwargs['encryptionOption']
        if object_key_prefix is None and 'objectKeyPrefix' in kwargs:
            object_key_prefix = kwargs['objectKeyPrefix']

        _setter("bucket_name", bucket_name)
        if encryption_option is not None:
            _setter("encryption_option", encryption_option)
        if object_key_prefix is not None:
            _setter("object_key_prefix", object_key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="encryptionOption")
    def encryption_option(self) -> Optional['ScheduledQueryEncryptionOption']:
        return pulumi.get(self, "encryption_option")

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[str]:
        return pulumi.get(self, "object_key_prefix")


@pulumi.output_type
class ScheduledQueryScheduleConfiguration(dict):
    """
    Configuration for when the scheduled query is executed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleExpression":
            suggest = "schedule_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryScheduleConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryScheduleConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryScheduleConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_expression: str):
        """
        Configuration for when the scheduled query is executed.
        """
        ScheduledQueryScheduleConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule_expression=schedule_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule_expression: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if schedule_expression is None and 'scheduleExpression' in kwargs:
            schedule_expression = kwargs['scheduleExpression']
        if schedule_expression is None:
            raise TypeError("Missing 'schedule_expression' argument")

        _setter("schedule_expression", schedule_expression)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> str:
        return pulumi.get(self, "schedule_expression")


@pulumi.output_type
class ScheduledQuerySnsConfiguration(dict):
    """
    SNS configuration for notification upon scheduled query execution.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicArn":
            suggest = "topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQuerySnsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQuerySnsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQuerySnsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_arn: str):
        """
        SNS configuration for notification upon scheduled query execution.
        """
        ScheduledQuerySnsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if topic_arn is None and 'topicArn' in kwargs:
            topic_arn = kwargs['topicArn']
        if topic_arn is None:
            raise TypeError("Missing 'topic_arn' argument")

        _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> str:
        return pulumi.get(self, "topic_arn")


@pulumi.output_type
class ScheduledQueryTag(dict):
    """
    A key-value pair to label the scheduled query.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to label the scheduled query.
        """
        ScheduledQueryTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ScheduledQueryTargetConfiguration(dict):
    """
    Configuration of target store where scheduled query results are written to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timestreamConfiguration":
            suggest = "timestream_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryTargetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryTargetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryTargetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 timestream_configuration: 'outputs.ScheduledQueryTimestreamConfiguration'):
        """
        Configuration of target store where scheduled query results are written to.
        """
        ScheduledQueryTargetConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            timestream_configuration=timestream_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             timestream_configuration: Optional['outputs.ScheduledQueryTimestreamConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if timestream_configuration is None and 'timestreamConfiguration' in kwargs:
            timestream_configuration = kwargs['timestreamConfiguration']
        if timestream_configuration is None:
            raise TypeError("Missing 'timestream_configuration' argument")

        _setter("timestream_configuration", timestream_configuration)

    @property
    @pulumi.getter(name="timestreamConfiguration")
    def timestream_configuration(self) -> 'outputs.ScheduledQueryTimestreamConfiguration':
        return pulumi.get(self, "timestream_configuration")


@pulumi.output_type
class ScheduledQueryTimestreamConfiguration(dict):
    """
    Configuration needed to write data into the Timestream database and table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "dimensionMappings":
            suggest = "dimension_mappings"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "timeColumn":
            suggest = "time_column"
        elif key == "measureNameColumn":
            suggest = "measure_name_column"
        elif key == "mixedMeasureMappings":
            suggest = "mixed_measure_mappings"
        elif key == "multiMeasureMappings":
            suggest = "multi_measure_mappings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledQueryTimestreamConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledQueryTimestreamConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledQueryTimestreamConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 dimension_mappings: Sequence['outputs.ScheduledQueryDimensionMapping'],
                 table_name: str,
                 time_column: str,
                 measure_name_column: Optional[str] = None,
                 mixed_measure_mappings: Optional[Sequence['outputs.ScheduledQueryMixedMeasureMapping']] = None,
                 multi_measure_mappings: Optional['outputs.ScheduledQueryMultiMeasureMappings'] = None):
        """
        Configuration needed to write data into the Timestream database and table.
        """
        ScheduledQueryTimestreamConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_name=database_name,
            dimension_mappings=dimension_mappings,
            table_name=table_name,
            time_column=time_column,
            measure_name_column=measure_name_column,
            mixed_measure_mappings=mixed_measure_mappings,
            multi_measure_mappings=multi_measure_mappings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_name: Optional[str] = None,
             dimension_mappings: Optional[Sequence['outputs.ScheduledQueryDimensionMapping']] = None,
             table_name: Optional[str] = None,
             time_column: Optional[str] = None,
             measure_name_column: Optional[str] = None,
             mixed_measure_mappings: Optional[Sequence['outputs.ScheduledQueryMixedMeasureMapping']] = None,
             multi_measure_mappings: Optional['outputs.ScheduledQueryMultiMeasureMappings'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if database_name is None and 'databaseName' in kwargs:
            database_name = kwargs['databaseName']
        if database_name is None:
            raise TypeError("Missing 'database_name' argument")
        if dimension_mappings is None and 'dimensionMappings' in kwargs:
            dimension_mappings = kwargs['dimensionMappings']
        if dimension_mappings is None:
            raise TypeError("Missing 'dimension_mappings' argument")
        if table_name is None and 'tableName' in kwargs:
            table_name = kwargs['tableName']
        if table_name is None:
            raise TypeError("Missing 'table_name' argument")
        if time_column is None and 'timeColumn' in kwargs:
            time_column = kwargs['timeColumn']
        if time_column is None:
            raise TypeError("Missing 'time_column' argument")
        if measure_name_column is None and 'measureNameColumn' in kwargs:
            measure_name_column = kwargs['measureNameColumn']
        if mixed_measure_mappings is None and 'mixedMeasureMappings' in kwargs:
            mixed_measure_mappings = kwargs['mixedMeasureMappings']
        if multi_measure_mappings is None and 'multiMeasureMappings' in kwargs:
            multi_measure_mappings = kwargs['multiMeasureMappings']

        _setter("database_name", database_name)
        _setter("dimension_mappings", dimension_mappings)
        _setter("table_name", table_name)
        _setter("time_column", time_column)
        if measure_name_column is not None:
            _setter("measure_name_column", measure_name_column)
        if mixed_measure_mappings is not None:
            _setter("mixed_measure_mappings", mixed_measure_mappings)
        if multi_measure_mappings is not None:
            _setter("multi_measure_mappings", multi_measure_mappings)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="dimensionMappings")
    def dimension_mappings(self) -> Sequence['outputs.ScheduledQueryDimensionMapping']:
        return pulumi.get(self, "dimension_mappings")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="timeColumn")
    def time_column(self) -> str:
        return pulumi.get(self, "time_column")

    @property
    @pulumi.getter(name="measureNameColumn")
    def measure_name_column(self) -> Optional[str]:
        return pulumi.get(self, "measure_name_column")

    @property
    @pulumi.getter(name="mixedMeasureMappings")
    def mixed_measure_mappings(self) -> Optional[Sequence['outputs.ScheduledQueryMixedMeasureMapping']]:
        return pulumi.get(self, "mixed_measure_mappings")

    @property
    @pulumi.getter(name="multiMeasureMappings")
    def multi_measure_mappings(self) -> Optional['outputs.ScheduledQueryMultiMeasureMappings']:
        return pulumi.get(self, "multi_measure_mappings")


@pulumi.output_type
class SchemaProperties(dict):
    """
    A Schema specifies the expected data model of the table.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compositePartitionKey":
            suggest = "composite_partition_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 composite_partition_key: Optional[Sequence['outputs.TablePartitionKey']] = None):
        """
        A Schema specifies the expected data model of the table.
        """
        SchemaProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            composite_partition_key=composite_partition_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             composite_partition_key: Optional[Sequence['outputs.TablePartitionKey']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if composite_partition_key is None and 'compositePartitionKey' in kwargs:
            composite_partition_key = kwargs['compositePartitionKey']

        if composite_partition_key is not None:
            _setter("composite_partition_key", composite_partition_key)

    @property
    @pulumi.getter(name="compositePartitionKey")
    def composite_partition_key(self) -> Optional[Sequence['outputs.TablePartitionKey']]:
        return pulumi.get(self, "composite_partition_key")


@pulumi.output_type
class TablePartitionKey(dict):
    """
    An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enforcementInRecord":
            suggest = "enforcement_in_record"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TablePartitionKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TablePartitionKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TablePartitionKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: 'TablePartitionKeyType',
                 enforcement_in_record: Optional['TablePartitionKeyEnforcementLevel'] = None,
                 name: Optional[str] = None):
        """
        An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.
        """
        TablePartitionKey._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            enforcement_in_record=enforcement_in_record,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional['TablePartitionKeyType'] = None,
             enforcement_in_record: Optional['TablePartitionKeyEnforcementLevel'] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if enforcement_in_record is None and 'enforcementInRecord' in kwargs:
            enforcement_in_record = kwargs['enforcementInRecord']

        _setter("type", type)
        if enforcement_in_record is not None:
            _setter("enforcement_in_record", enforcement_in_record)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def type(self) -> 'TablePartitionKeyType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="enforcementInRecord")
    def enforcement_in_record(self) -> Optional['TablePartitionKeyEnforcementLevel']:
        return pulumi.get(self, "enforcement_in_record")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TableTag(dict):
    """
    You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
    """
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
        """
        TableTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


