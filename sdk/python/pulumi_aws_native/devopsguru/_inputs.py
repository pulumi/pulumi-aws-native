# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'NotificationChannelConfigArgs',
    'NotificationChannelNotificationFilterConfigArgs',
    'NotificationChannelSnsChannelConfigArgs',
    'ResourceCollectionCloudFormationCollectionFilterArgs',
    'ResourceCollectionFilterArgs',
    'ResourceCollectionTagCollectionArgs',
]

@pulumi.input_type
class NotificationChannelConfigArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input['NotificationChannelNotificationFilterConfigArgs']] = None,
                 sns: Optional[pulumi.Input['NotificationChannelSnsChannelConfigArgs']] = None):
        """
        Information about notification channels you have configured with DevOps Guru.
        """
        NotificationChannelConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filters=filters,
            sns=sns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filters: Optional[pulumi.Input['NotificationChannelNotificationFilterConfigArgs']] = None,
             sns: Optional[pulumi.Input['NotificationChannelSnsChannelConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filters is not None:
            _setter("filters", filters)
        if sns is not None:
            _setter("sns", sns)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['NotificationChannelNotificationFilterConfigArgs']]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['NotificationChannelNotificationFilterConfigArgs']]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def sns(self) -> Optional[pulumi.Input['NotificationChannelSnsChannelConfigArgs']]:
        return pulumi.get(self, "sns")

    @sns.setter
    def sns(self, value: Optional[pulumi.Input['NotificationChannelSnsChannelConfigArgs']]):
        pulumi.set(self, "sns", value)


@pulumi.input_type
class NotificationChannelNotificationFilterConfigArgs:
    def __init__(__self__, *,
                 message_types: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelNotificationMessageType']]]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelInsightSeverity']]]] = None):
        """
        Information about filters of a notification channel configured in DevOpsGuru to filter for insights.
        """
        NotificationChannelNotificationFilterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            message_types=message_types,
            severities=severities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             message_types: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelNotificationMessageType']]]] = None,
             severities: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelInsightSeverity']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if message_types is not None:
            _setter("message_types", message_types)
        if severities is not None:
            _setter("severities", severities)

    @property
    @pulumi.getter(name="messageTypes")
    def message_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelNotificationMessageType']]]]:
        return pulumi.get(self, "message_types")

    @message_types.setter
    def message_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelNotificationMessageType']]]]):
        pulumi.set(self, "message_types", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelInsightSeverity']]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationChannelInsightSeverity']]]]):
        pulumi.set(self, "severities", value)


@pulumi.input_type
class NotificationChannelSnsChannelConfigArgs:
    def __init__(__self__, *,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        """
        Information about a notification channel configured in DevOps Guru to send notifications when insights are created.
        """
        NotificationChannelSnsChannelConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ResourceCollectionCloudFormationCollectionFilterArgs:
    def __init__(__self__, *,
                 stack_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        CloudFormation resource for DevOps Guru to monitor
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stack_names: An array of CloudFormation stack names.
        """
        ResourceCollectionCloudFormationCollectionFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stack_names=stack_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stack_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if stack_names is not None:
            _setter("stack_names", stack_names)

    @property
    @pulumi.getter(name="stackNames")
    def stack_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of CloudFormation stack names.
        """
        return pulumi.get(self, "stack_names")

    @stack_names.setter
    def stack_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stack_names", value)


@pulumi.input_type
class ResourceCollectionFilterArgs:
    def __init__(__self__, *,
                 cloud_formation: Optional[pulumi.Input['ResourceCollectionCloudFormationCollectionFilterArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceCollectionTagCollectionArgs']]]] = None):
        """
        Information about a filter used to specify which AWS resources are analyzed for anomalous behavior by DevOps Guru.
        """
        ResourceCollectionFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_formation=cloud_formation,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_formation: Optional[pulumi.Input['ResourceCollectionCloudFormationCollectionFilterArgs']] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceCollectionTagCollectionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_formation is not None:
            _setter("cloud_formation", cloud_formation)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="cloudFormation")
    def cloud_formation(self) -> Optional[pulumi.Input['ResourceCollectionCloudFormationCollectionFilterArgs']]:
        return pulumi.get(self, "cloud_formation")

    @cloud_formation.setter
    def cloud_formation(self, value: Optional[pulumi.Input['ResourceCollectionCloudFormationCollectionFilterArgs']]):
        pulumi.set(self, "cloud_formation", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceCollectionTagCollectionArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceCollectionTagCollectionArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceCollectionTagCollectionArgs:
    def __init__(__self__, *,
                 app_boundary_key: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Tagged resource for DevOps Guru to monitor
        :param pulumi.Input[str] app_boundary_key: A Tag key for DevOps Guru app boundary.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_values: Tag values of DevOps Guru app boundary.
        """
        ResourceCollectionTagCollectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_boundary_key=app_boundary_key,
            tag_values=tag_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_boundary_key: Optional[pulumi.Input[str]] = None,
             tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app_boundary_key is not None:
            _setter("app_boundary_key", app_boundary_key)
        if tag_values is not None:
            _setter("tag_values", tag_values)

    @property
    @pulumi.getter(name="appBoundaryKey")
    def app_boundary_key(self) -> Optional[pulumi.Input[str]]:
        """
        A Tag key for DevOps Guru app boundary.
        """
        return pulumi.get(self, "app_boundary_key")

    @app_boundary_key.setter
    def app_boundary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_boundary_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tag values of DevOps Guru app boundary.
        """
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)


