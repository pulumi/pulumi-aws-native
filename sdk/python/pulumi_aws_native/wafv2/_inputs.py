# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'IpSetTagArgs',
    'LoggingConfigurationConditionActionConditionPropertiesArgs',
    'LoggingConfigurationConditionLabelNameConditionPropertiesArgs',
    'LoggingConfigurationConditionArgs',
    'LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs',
    'LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs',
    'LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs',
    'LoggingConfigurationFieldToMatchArgs',
    'LoggingConfigurationFilterArgs',
    'LoggingFilterPropertiesArgs',
    'RegexPatternSetTagArgs',
    'RuleGroupAllowActionArgs',
    'RuleGroupAndStatementArgs',
    'RuleGroupBlockActionArgs',
    'RuleGroupBodyArgs',
    'RuleGroupByteMatchStatementArgs',
    'RuleGroupCaptchaActionArgs',
    'RuleGroupCaptchaConfigArgs',
    'RuleGroupChallengeActionArgs',
    'RuleGroupChallengeConfigArgs',
    'RuleGroupCookieMatchPatternArgs',
    'RuleGroupCookiesArgs',
    'RuleGroupCountActionArgs',
    'RuleGroupCustomHttpHeaderArgs',
    'RuleGroupCustomRequestHandlingArgs',
    'RuleGroupCustomResponseBodiesArgs',
    'RuleGroupCustomResponseArgs',
    'RuleGroupFieldToMatchSingleHeaderPropertiesArgs',
    'RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs',
    'RuleGroupFieldToMatchArgs',
    'RuleGroupForwardedIpConfigurationArgs',
    'RuleGroupGeoMatchStatementArgs',
    'RuleGroupHeaderMatchPatternArgs',
    'RuleGroupHeadersArgs',
    'RuleGroupImmunityTimePropertyArgs',
    'RuleGroupIpSetForwardedIpConfigurationArgs',
    'RuleGroupIpSetReferenceStatementArgs',
    'RuleGroupJsonBodyArgs',
    'RuleGroupJsonMatchPatternArgs',
    'RuleGroupLabelMatchStatementArgs',
    'RuleGroupLabelSummaryArgs',
    'RuleGroupLabelArgs',
    'RuleGroupNotStatementArgs',
    'RuleGroupOrStatementArgs',
    'RuleGroupRateBasedStatementCustomKeyArgs',
    'RuleGroupRateBasedStatementArgs',
    'RuleGroupRateLimitCookieArgs',
    'RuleGroupRateLimitForwardedIpArgs',
    'RuleGroupRateLimitHeaderArgs',
    'RuleGroupRateLimitHttpMethodArgs',
    'RuleGroupRateLimitIpArgs',
    'RuleGroupRateLimitLabelNamespaceArgs',
    'RuleGroupRateLimitQueryArgumentArgs',
    'RuleGroupRateLimitQueryStringArgs',
    'RuleGroupRateLimitUriPathArgs',
    'RuleGroupRegexMatchStatementArgs',
    'RuleGroupRegexPatternSetReferenceStatementArgs',
    'RuleGroupRuleActionArgs',
    'RuleGroupRuleArgs',
    'RuleGroupSizeConstraintStatementArgs',
    'RuleGroupSqliMatchStatementArgs',
    'RuleGroupStatementArgs',
    'RuleGroupTagArgs',
    'RuleGroupTextTransformationArgs',
    'RuleGroupVisibilityConfigArgs',
    'RuleGroupXssMatchStatementArgs',
    'WebAclAllowActionArgs',
    'WebAclAndStatementArgs',
    'WebAclAssociationConfigArgs',
    'WebAclAwsManagedRulesAcfpRuleSetArgs',
    'WebAclAwsManagedRulesAtpRuleSetArgs',
    'WebAclAwsManagedRulesBotControlRuleSetArgs',
    'WebAclBlockActionArgs',
    'WebAclBodyArgs',
    'WebAclByteMatchStatementArgs',
    'WebAclCaptchaActionArgs',
    'WebAclCaptchaConfigArgs',
    'WebAclChallengeActionArgs',
    'WebAclChallengeConfigArgs',
    'WebAclCookieMatchPatternArgs',
    'WebAclCookiesArgs',
    'WebAclCountActionArgs',
    'WebAclCustomHttpHeaderArgs',
    'WebAclCustomRequestHandlingArgs',
    'WebAclCustomResponseBodiesArgs',
    'WebAclCustomResponseArgs',
    'WebAclDefaultActionArgs',
    'WebAclExcludedRuleArgs',
    'WebAclFieldIdentifierArgs',
    'WebAclFieldToMatchSingleHeaderPropertiesArgs',
    'WebAclFieldToMatchSingleQueryArgumentPropertiesArgs',
    'WebAclFieldToMatchArgs',
    'WebAclForwardedIpConfigurationArgs',
    'WebAclGeoMatchStatementArgs',
    'WebAclHeaderMatchPatternArgs',
    'WebAclHeadersArgs',
    'WebAclImmunityTimePropertyArgs',
    'WebAclIpSetForwardedIpConfigurationArgs',
    'WebAclIpSetReferenceStatementArgs',
    'WebAclJsonBodyArgs',
    'WebAclJsonMatchPatternArgs',
    'WebAclLabelMatchStatementArgs',
    'WebAclLabelArgs',
    'WebAclManagedRuleGroupConfigArgs',
    'WebAclManagedRuleGroupStatementArgs',
    'WebAclNotStatementArgs',
    'WebAclOrStatementArgs',
    'WebAclOverrideActionArgs',
    'WebAclRateBasedStatementCustomKeyArgs',
    'WebAclRateBasedStatementArgs',
    'WebAclRateLimitCookieArgs',
    'WebAclRateLimitForwardedIpArgs',
    'WebAclRateLimitHeaderArgs',
    'WebAclRateLimitHttpMethodArgs',
    'WebAclRateLimitIpArgs',
    'WebAclRateLimitLabelNamespaceArgs',
    'WebAclRateLimitQueryArgumentArgs',
    'WebAclRateLimitQueryStringArgs',
    'WebAclRateLimitUriPathArgs',
    'WebAclRegexMatchStatementArgs',
    'WebAclRegexPatternSetReferenceStatementArgs',
    'WebAclRequestBodyArgs',
    'WebAclRequestInspectionAcfpArgs',
    'WebAclRequestInspectionArgs',
    'WebAclResponseInspectionBodyContainsArgs',
    'WebAclResponseInspectionHeaderArgs',
    'WebAclResponseInspectionJsonArgs',
    'WebAclResponseInspectionStatusCodeArgs',
    'WebAclResponseInspectionArgs',
    'WebAclRuleActionOverrideArgs',
    'WebAclRuleActionArgs',
    'WebAclRuleGroupReferenceStatementArgs',
    'WebAclRuleArgs',
    'WebAclSizeConstraintStatementArgs',
    'WebAclSqliMatchStatementArgs',
    'WebAclStatementArgs',
    'WebAclTagArgs',
    'WebAclTextTransformationArgs',
    'WebAclVisibilityConfigArgs',
    'WebAclXssMatchStatementArgs',
]

@pulumi.input_type
class IpSetTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        IpSetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoggingConfigurationConditionActionConditionPropertiesArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesAction']):
        """
        A single action condition.
        :param pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesAction'] action: Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        """
        LoggingConfigurationConditionActionConditionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesAction'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesAction']:
        """
        Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesAction']):
        pulumi.set(self, "action", value)


@pulumi.input_type
class LoggingConfigurationConditionLabelNameConditionPropertiesArgs:
    def __init__(__self__, *,
                 label_name: pulumi.Input[str]):
        """
        A single label name condition.
        :param pulumi.Input[str] label_name: The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 
        """
        LoggingConfigurationConditionLabelNameConditionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_name=label_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label_name", label_name)

    @property
    @pulumi.getter(name="labelName")
    def label_name(self) -> pulumi.Input[str]:
        """
        The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 
        """
        return pulumi.get(self, "label_name")

    @label_name.setter
    def label_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "label_name", value)


@pulumi.input_type
class LoggingConfigurationConditionArgs:
    def __init__(__self__, *,
                 action_condition: Optional[pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesArgs']] = None,
                 label_name_condition: Optional[pulumi.Input['LoggingConfigurationConditionLabelNameConditionPropertiesArgs']] = None):
        """
        :param pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesArgs'] action_condition: A single action condition.
        :param pulumi.Input['LoggingConfigurationConditionLabelNameConditionPropertiesArgs'] label_name_condition: A single label name condition.
        """
        LoggingConfigurationConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_condition=action_condition,
            label_name_condition=label_name_condition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_condition: Optional[pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesArgs']] = None,
             label_name_condition: Optional[pulumi.Input['LoggingConfigurationConditionLabelNameConditionPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action_condition is not None:
            _setter("action_condition", action_condition)
        if label_name_condition is not None:
            _setter("label_name_condition", label_name_condition)

    @property
    @pulumi.getter(name="actionCondition")
    def action_condition(self) -> Optional[pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesArgs']]:
        """
        A single action condition.
        """
        return pulumi.get(self, "action_condition")

    @action_condition.setter
    def action_condition(self, value: Optional[pulumi.Input['LoggingConfigurationConditionActionConditionPropertiesArgs']]):
        pulumi.set(self, "action_condition", value)

    @property
    @pulumi.getter(name="labelNameCondition")
    def label_name_condition(self) -> Optional[pulumi.Input['LoggingConfigurationConditionLabelNameConditionPropertiesArgs']]:
        """
        A single label name condition.
        """
        return pulumi.get(self, "label_name_condition")

    @label_name_condition.setter
    def label_name_condition(self, value: Optional[pulumi.Input['LoggingConfigurationConditionLabelNameConditionPropertiesArgs']]):
        pulumi.set(self, "label_name_condition", value)


@pulumi.input_type
class LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. 
        :param Any all: Match all of the elements. See also MatchScope in JsonBody. You must specify either this setting or the IncludedPaths setting, but not both.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] included_paths: Match only the specified include paths. See also MatchScope in JsonBody.
        """
        LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            included_paths=included_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if included_paths is not None:
            _setter("included_paths", included_paths)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Match all of the elements. See also MatchScope in JsonBody. You must specify either this setting or the IncludedPaths setting, but not both.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Match only the specified include paths. See also MatchScope in JsonBody.
        """
        return pulumi.get(self, "included_paths")

    @included_paths.setter
    def included_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_paths", value)


@pulumi.input_type
class LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs'],
                 match_scope: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope'],
                 invalid_fallback_behavior: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior']] = None):
        """
        Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 
        :param pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs'] match_pattern: The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. 
        :param pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope'] match_scope: The parts of the JSON to match against using the MatchPattern. If you specify All, AWS WAF matches against keys and values. 
        :param pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior'] invalid_fallback_behavior: What AWS WAF should do if it fails to completely parse the JSON body.
        """
        LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            invalid_fallback_behavior=invalid_fallback_behavior,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs'],
             match_scope: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope'],
             invalid_fallback_behavior: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        if invalid_fallback_behavior is not None:
            _setter("invalid_fallback_behavior", invalid_fallback_behavior)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs']:
        """
        The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria. 
        """
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchPatternPropertiesArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope']:
        """
        The parts of the JSON to match against using the MatchPattern. If you specify All, AWS WAF matches against keys and values. 
        """
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="invalidFallbackBehavior")
    def invalid_fallback_behavior(self) -> Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior']]:
        """
        What AWS WAF should do if it fails to completely parse the JSON body.
        """
        return pulumi.get(self, "invalid_fallback_behavior")

    @invalid_fallback_behavior.setter
    def invalid_fallback_behavior(self, value: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior']]):
        pulumi.set(self, "invalid_fallback_behavior", value)


@pulumi.input_type
class LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
        :param pulumi.Input[str] name: The name of the query header to inspect.
        """
        LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query header to inspect.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LoggingConfigurationFieldToMatchArgs:
    def __init__(__self__, *,
                 json_body: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs']] = None,
                 method: Optional[Any] = None,
                 query_string: Optional[Any] = None,
                 single_header: Optional[pulumi.Input['LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs']] = None,
                 uri_path: Optional[Any] = None):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs'] json_body: Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 
        :param Any method: Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
        :param Any query_string: Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
        :param pulumi.Input['LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs'] single_header: Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
        :param Any uri_path: Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
        """
        LoggingConfigurationFieldToMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            json_body=json_body,
            method=method,
            query_string=query_string,
            single_header=single_header,
            uri_path=uri_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             json_body: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs']] = None,
             method: Optional[Any] = None,
             query_string: Optional[Any] = None,
             single_header: Optional[pulumi.Input['LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs']] = None,
             uri_path: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if json_body is not None:
            _setter("json_body", json_body)
        if method is not None:
            _setter("method", method)
        if query_string is not None:
            _setter("query_string", query_string)
        if single_header is not None:
            _setter("single_header", single_header)
        if uri_path is not None:
            _setter("uri_path", uri_path)

    @property
    @pulumi.getter(name="jsonBody")
    def json_body(self) -> Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs']]:
        """
        Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. 
        """
        return pulumi.get(self, "json_body")

    @json_body.setter
    def json_body(self, value: Optional[pulumi.Input['LoggingConfigurationFieldToMatchJsonBodyPropertiesArgs']]):
        pulumi.set(self, "json_body", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[Any]:
        """
        Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[Any]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[Any]:
        """
        Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[Any]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="singleHeader")
    def single_header(self) -> Optional[pulumi.Input['LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs']]:
        """
        Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
        """
        return pulumi.get(self, "single_header")

    @single_header.setter
    def single_header(self, value: Optional[pulumi.Input['LoggingConfigurationFieldToMatchSingleHeaderPropertiesArgs']]):
        pulumi.set(self, "single_header", value)

    @property
    @pulumi.getter(name="uriPath")
    def uri_path(self) -> Optional[Any]:
        """
        Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
        """
        return pulumi.get(self, "uri_path")

    @uri_path.setter
    def uri_path(self, value: Optional[Any]):
        pulumi.set(self, "uri_path", value)


@pulumi.input_type
class LoggingConfigurationFilterArgs:
    def __init__(__self__, *,
                 behavior: pulumi.Input['LoggingConfigurationFilterBehavior'],
                 conditions: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationConditionArgs']]],
                 requirement: pulumi.Input['LoggingConfigurationFilterRequirement']):
        """
        :param pulumi.Input['LoggingConfigurationFilterBehavior'] behavior: How to handle logs that satisfy the filter's conditions and requirement. 
        :param pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationConditionArgs']]] conditions: Match conditions for the filter.
        :param pulumi.Input['LoggingConfigurationFilterRequirement'] requirement: Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        """
        LoggingConfigurationFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior=behavior,
            conditions=conditions,
            requirement=requirement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior: pulumi.Input['LoggingConfigurationFilterBehavior'],
             conditions: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationConditionArgs']]],
             requirement: pulumi.Input['LoggingConfigurationFilterRequirement'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("behavior", behavior)
        _setter("conditions", conditions)
        _setter("requirement", requirement)

    @property
    @pulumi.getter
    def behavior(self) -> pulumi.Input['LoggingConfigurationFilterBehavior']:
        """
        How to handle logs that satisfy the filter's conditions and requirement. 
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: pulumi.Input['LoggingConfigurationFilterBehavior']):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationConditionArgs']]]:
        """
        Match conditions for the filter.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def requirement(self) -> pulumi.Input['LoggingConfigurationFilterRequirement']:
        """
        Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
        """
        return pulumi.get(self, "requirement")

    @requirement.setter
    def requirement(self, value: pulumi.Input['LoggingConfigurationFilterRequirement']):
        pulumi.set(self, "requirement", value)


@pulumi.input_type
class LoggingFilterPropertiesArgs:
    def __init__(__self__, *,
                 default_behavior: pulumi.Input['LoggingConfigurationLoggingFilterPropertiesDefaultBehavior'],
                 filters: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationFilterArgs']]]):
        """
        Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
        :param pulumi.Input['LoggingConfigurationLoggingFilterPropertiesDefaultBehavior'] default_behavior: Default handling for logs that don't match any of the specified filtering conditions.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationFilterArgs']]] filters: The filters that you want to apply to the logs.
        """
        LoggingFilterPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_behavior=default_behavior,
            filters=filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_behavior: pulumi.Input['LoggingConfigurationLoggingFilterPropertiesDefaultBehavior'],
             filters: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationFilterArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_behavior", default_behavior)
        _setter("filters", filters)

    @property
    @pulumi.getter(name="defaultBehavior")
    def default_behavior(self) -> pulumi.Input['LoggingConfigurationLoggingFilterPropertiesDefaultBehavior']:
        """
        Default handling for logs that don't match any of the specified filtering conditions.
        """
        return pulumi.get(self, "default_behavior")

    @default_behavior.setter
    def default_behavior(self, value: pulumi.Input['LoggingConfigurationLoggingFilterPropertiesDefaultBehavior']):
        pulumi.set(self, "default_behavior", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationFilterArgs']]]:
        """
        The filters that you want to apply to the logs.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class RegexPatternSetTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        RegexPatternSetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleGroupAllowActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None):
        """
        Allow traffic towards application.
        """
        RuleGroupAllowActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class RuleGroupAndStatementArgs:
    def __init__(__self__, *,
                 statements: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]):
        RuleGroupAndStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)

    @property
    @pulumi.getter
    def statements(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]:
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]):
        pulumi.set(self, "statements", value)


@pulumi.input_type
class RuleGroupBlockActionArgs:
    def __init__(__self__, *,
                 custom_response: Optional[pulumi.Input['RuleGroupCustomResponseArgs']] = None):
        """
        Block traffic towards application.
        """
        RuleGroupBlockActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_response=custom_response,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_response: Optional[pulumi.Input['RuleGroupCustomResponseArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_response is not None:
            _setter("custom_response", custom_response)

    @property
    @pulumi.getter(name="customResponse")
    def custom_response(self) -> Optional[pulumi.Input['RuleGroupCustomResponseArgs']]:
        return pulumi.get(self, "custom_response")

    @custom_response.setter
    def custom_response(self, value: Optional[pulumi.Input['RuleGroupCustomResponseArgs']]):
        pulumi.set(self, "custom_response", value)


@pulumi.input_type
class RuleGroupBodyArgs:
    def __init__(__self__, *,
                 oversize_handling: Optional[pulumi.Input['RuleGroupOversizeHandling']] = None):
        """
        The body of a web request. This immediately follows the request headers.
        """
        RuleGroupBodyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             oversize_handling: Optional[pulumi.Input['RuleGroupOversizeHandling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if oversize_handling is not None:
            _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> Optional[pulumi.Input['RuleGroupOversizeHandling']]:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: Optional[pulumi.Input['RuleGroupOversizeHandling']]):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class RuleGroupByteMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 positional_constraint: pulumi.Input['RuleGroupPositionalConstraint'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
                 search_string: Optional[pulumi.Input[str]] = None,
                 search_string_base64: Optional[pulumi.Input[str]] = None):
        """
        Byte Match statement.
        """
        RuleGroupByteMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            positional_constraint=positional_constraint,
            text_transformations=text_transformations,
            search_string=search_string,
            search_string_base64=search_string_base64,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             positional_constraint: pulumi.Input['RuleGroupPositionalConstraint'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             search_string: Optional[pulumi.Input[str]] = None,
             search_string_base64: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("positional_constraint", positional_constraint)
        _setter("text_transformations", text_transformations)
        if search_string is not None:
            _setter("search_string", search_string)
        if search_string_base64 is not None:
            _setter("search_string_base64", search_string_base64)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="positionalConstraint")
    def positional_constraint(self) -> pulumi.Input['RuleGroupPositionalConstraint']:
        return pulumi.get(self, "positional_constraint")

    @positional_constraint.setter
    def positional_constraint(self, value: pulumi.Input['RuleGroupPositionalConstraint']):
        pulumi.set(self, "positional_constraint", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string")

    @search_string.setter
    def search_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string", value)

    @property
    @pulumi.getter(name="searchStringBase64")
    def search_string_base64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string_base64")

    @search_string_base64.setter
    def search_string_base64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string_base64", value)


@pulumi.input_type
class RuleGroupCaptchaActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None):
        """
        Checks valid token exists with request.
        """
        RuleGroupCaptchaActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class RuleGroupCaptchaConfigArgs:
    def __init__(__self__, *,
                 immunity_time_property: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']] = None):
        RuleGroupCaptchaConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time_property=immunity_time_property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time_property: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if immunity_time_property is not None:
            _setter("immunity_time_property", immunity_time_property)

    @property
    @pulumi.getter(name="immunityTimeProperty")
    def immunity_time_property(self) -> Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']]:
        return pulumi.get(self, "immunity_time_property")

    @immunity_time_property.setter
    def immunity_time_property(self, value: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']]):
        pulumi.set(self, "immunity_time_property", value)


@pulumi.input_type
class RuleGroupChallengeActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None):
        """
        Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
        """
        RuleGroupChallengeActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class RuleGroupChallengeConfigArgs:
    def __init__(__self__, *,
                 immunity_time_property: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']] = None):
        RuleGroupChallengeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time_property=immunity_time_property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time_property: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if immunity_time_property is not None:
            _setter("immunity_time_property", immunity_time_property)

    @property
    @pulumi.getter(name="immunityTimeProperty")
    def immunity_time_property(self) -> Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']]:
        return pulumi.get(self, "immunity_time_property")

    @immunity_time_property.setter
    def immunity_time_property(self, value: Optional[pulumi.Input['RuleGroupImmunityTimePropertyArgs']]):
        pulumi.set(self, "immunity_time_property", value)


@pulumi.input_type
class RuleGroupCookieMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 excluded_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the request cookies.
        :param Any all: Inspect all parts of the web request cookies.
        """
        RuleGroupCookieMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            excluded_cookies=excluded_cookies,
            included_cookies=included_cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             excluded_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if excluded_cookies is not None:
            _setter("excluded_cookies", excluded_cookies)
        if included_cookies is not None:
            _setter("included_cookies", included_cookies)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request cookies.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="excludedCookies")
    def excluded_cookies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_cookies")

    @excluded_cookies.setter
    def excluded_cookies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_cookies", value)

    @property
    @pulumi.getter(name="includedCookies")
    def included_cookies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_cookies")

    @included_cookies.setter
    def included_cookies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_cookies", value)


@pulumi.input_type
class RuleGroupCookiesArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['RuleGroupCookieMatchPatternArgs'],
                 match_scope: pulumi.Input['RuleGroupMapMatchScope'],
                 oversize_handling: pulumi.Input['RuleGroupOversizeHandling']):
        """
        Includes headers of a web request.
        """
        RuleGroupCookiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['RuleGroupCookieMatchPatternArgs'],
             match_scope: pulumi.Input['RuleGroupMapMatchScope'],
             oversize_handling: pulumi.Input['RuleGroupOversizeHandling'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['RuleGroupCookieMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['RuleGroupCookieMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['RuleGroupMapMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['RuleGroupMapMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> pulumi.Input['RuleGroupOversizeHandling']:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: pulumi.Input['RuleGroupOversizeHandling']):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class RuleGroupCountActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None):
        """
        Count traffic towards application.
        """
        RuleGroupCountActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['RuleGroupCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class RuleGroupCustomHttpHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTP header.
        """
        RuleGroupCustomHttpHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleGroupCustomRequestHandlingArgs:
    def __init__(__self__, *,
                 insert_headers: pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]):
        """
        Custom request handling.
        :param pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]] insert_headers: Collection of HTTP headers.
        """
        RuleGroupCustomRequestHandlingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insert_headers=insert_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insert_headers: pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("insert_headers", insert_headers)

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]:
        """
        Collection of HTTP headers.
        """
        return pulumi.get(self, "insert_headers")

    @insert_headers.setter
    def insert_headers(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]):
        pulumi.set(self, "insert_headers", value)


@pulumi.input_type
class RuleGroupCustomResponseBodiesArgs:
    def __init__(__self__):
        """
        Custom response key and body map.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RuleGroupCustomResponseArgs:
    def __init__(__self__, *,
                 response_code: pulumi.Input[int],
                 custom_response_body_key: Optional[pulumi.Input[str]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]] = None):
        """
        Custom response.
        :param pulumi.Input[str] custom_response_body_key: Custom response body key.
        :param pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]] response_headers: Collection of HTTP headers.
        """
        RuleGroupCustomResponseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            response_code=response_code,
            custom_response_body_key=custom_response_body_key,
            response_headers=response_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             response_code: pulumi.Input[int],
             custom_response_body_key: Optional[pulumi.Input[str]] = None,
             response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("response_code", response_code)
        if custom_response_body_key is not None:
            _setter("custom_response_body_key", custom_response_body_key)
        if response_headers is not None:
            _setter("response_headers", response_headers)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="customResponseBodyKey")
    def custom_response_body_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom response body key.
        """
        return pulumi.get(self, "custom_response_body_key")

    @custom_response_body_key.setter
    def custom_response_body_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_response_body_key", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]]:
        """
        Collection of HTTP headers.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomHttpHeaderArgs']]]]):
        pulumi.set(self, "response_headers", value)


@pulumi.input_type
class RuleGroupFieldToMatchSingleHeaderPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        RuleGroupFieldToMatchSingleHeaderPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        """
        RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleGroupFieldToMatchArgs:
    def __init__(__self__, *,
                 all_query_arguments: Optional[Any] = None,
                 body: Optional[pulumi.Input['RuleGroupBodyArgs']] = None,
                 cookies: Optional[pulumi.Input['RuleGroupCookiesArgs']] = None,
                 headers: Optional[pulumi.Input['RuleGroupHeadersArgs']] = None,
                 json_body: Optional[pulumi.Input['RuleGroupJsonBodyArgs']] = None,
                 method: Optional[Any] = None,
                 query_string: Optional[Any] = None,
                 single_header: Optional[pulumi.Input['RuleGroupFieldToMatchSingleHeaderPropertiesArgs']] = None,
                 single_query_argument: Optional[pulumi.Input['RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs']] = None,
                 uri_path: Optional[Any] = None):
        """
        Field of the request to match.
        :param Any all_query_arguments: All query arguments of a web request.
        :param Any method: The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
        :param Any query_string: The query string of a web request. This is the part of a URL that appears after a ? character, if any.
        :param pulumi.Input['RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs'] single_query_argument: One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        :param Any uri_path: The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        """
        RuleGroupFieldToMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_query_arguments=all_query_arguments,
            body=body,
            cookies=cookies,
            headers=headers,
            json_body=json_body,
            method=method,
            query_string=query_string,
            single_header=single_header,
            single_query_argument=single_query_argument,
            uri_path=uri_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_query_arguments: Optional[Any] = None,
             body: Optional[pulumi.Input['RuleGroupBodyArgs']] = None,
             cookies: Optional[pulumi.Input['RuleGroupCookiesArgs']] = None,
             headers: Optional[pulumi.Input['RuleGroupHeadersArgs']] = None,
             json_body: Optional[pulumi.Input['RuleGroupJsonBodyArgs']] = None,
             method: Optional[Any] = None,
             query_string: Optional[Any] = None,
             single_header: Optional[pulumi.Input['RuleGroupFieldToMatchSingleHeaderPropertiesArgs']] = None,
             single_query_argument: Optional[pulumi.Input['RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs']] = None,
             uri_path: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_query_arguments is not None:
            _setter("all_query_arguments", all_query_arguments)
        if body is not None:
            _setter("body", body)
        if cookies is not None:
            _setter("cookies", cookies)
        if headers is not None:
            _setter("headers", headers)
        if json_body is not None:
            _setter("json_body", json_body)
        if method is not None:
            _setter("method", method)
        if query_string is not None:
            _setter("query_string", query_string)
        if single_header is not None:
            _setter("single_header", single_header)
        if single_query_argument is not None:
            _setter("single_query_argument", single_query_argument)
        if uri_path is not None:
            _setter("uri_path", uri_path)

    @property
    @pulumi.getter(name="allQueryArguments")
    def all_query_arguments(self) -> Optional[Any]:
        """
        All query arguments of a web request.
        """
        return pulumi.get(self, "all_query_arguments")

    @all_query_arguments.setter
    def all_query_arguments(self, value: Optional[Any]):
        pulumi.set(self, "all_query_arguments", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['RuleGroupBodyArgs']]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['RuleGroupBodyArgs']]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[pulumi.Input['RuleGroupCookiesArgs']]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[pulumi.Input['RuleGroupCookiesArgs']]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['RuleGroupHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['RuleGroupHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonBody")
    def json_body(self) -> Optional[pulumi.Input['RuleGroupJsonBodyArgs']]:
        return pulumi.get(self, "json_body")

    @json_body.setter
    def json_body(self, value: Optional[pulumi.Input['RuleGroupJsonBodyArgs']]):
        pulumi.set(self, "json_body", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[Any]:
        """
        The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[Any]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[Any]:
        """
        The query string of a web request. This is the part of a URL that appears after a ? character, if any.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[Any]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="singleHeader")
    def single_header(self) -> Optional[pulumi.Input['RuleGroupFieldToMatchSingleHeaderPropertiesArgs']]:
        return pulumi.get(self, "single_header")

    @single_header.setter
    def single_header(self, value: Optional[pulumi.Input['RuleGroupFieldToMatchSingleHeaderPropertiesArgs']]):
        pulumi.set(self, "single_header", value)

    @property
    @pulumi.getter(name="singleQueryArgument")
    def single_query_argument(self) -> Optional[pulumi.Input['RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs']]:
        """
        One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        """
        return pulumi.get(self, "single_query_argument")

    @single_query_argument.setter
    def single_query_argument(self, value: Optional[pulumi.Input['RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs']]):
        pulumi.set(self, "single_query_argument", value)

    @property
    @pulumi.getter(name="uriPath")
    def uri_path(self) -> Optional[Any]:
        """
        The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        """
        return pulumi.get(self, "uri_path")

    @uri_path.setter
    def uri_path(self, value: Optional[Any]):
        pulumi.set(self, "uri_path", value)


@pulumi.input_type
class RuleGroupForwardedIpConfigurationArgs:
    def __init__(__self__, *,
                 fallback_behavior: pulumi.Input['RuleGroupForwardedIpConfigurationFallbackBehavior'],
                 header_name: pulumi.Input[str]):
        RuleGroupForwardedIpConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_behavior=fallback_behavior,
            header_name=header_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_behavior: pulumi.Input['RuleGroupForwardedIpConfigurationFallbackBehavior'],
             header_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fallback_behavior", fallback_behavior)
        _setter("header_name", header_name)

    @property
    @pulumi.getter(name="fallbackBehavior")
    def fallback_behavior(self) -> pulumi.Input['RuleGroupForwardedIpConfigurationFallbackBehavior']:
        return pulumi.get(self, "fallback_behavior")

    @fallback_behavior.setter
    def fallback_behavior(self, value: pulumi.Input['RuleGroupForwardedIpConfigurationFallbackBehavior']):
        pulumi.set(self, "fallback_behavior", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class RuleGroupGeoMatchStatementArgs:
    def __init__(__self__, *,
                 country_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forwarded_ip_config: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']] = None):
        RuleGroupGeoMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_codes=country_codes,
            forwarded_ip_config=forwarded_ip_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             forwarded_ip_config: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if country_codes is not None:
            _setter("country_codes", country_codes)
        if forwarded_ip_config is not None:
            _setter("forwarded_ip_config", forwarded_ip_config)

    @property
    @pulumi.getter(name="countryCodes")
    def country_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "country_codes")

    @country_codes.setter
    def country_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "country_codes", value)

    @property
    @pulumi.getter(name="forwardedIpConfig")
    def forwarded_ip_config(self) -> Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "forwarded_ip_config")

    @forwarded_ip_config.setter
    def forwarded_ip_config(self, value: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']]):
        pulumi.set(self, "forwarded_ip_config", value)


@pulumi.input_type
class RuleGroupHeaderMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 excluded_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the request headers.
        :param Any all: Inspect all parts of the web request headers.
        """
        RuleGroupHeaderMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            excluded_headers=excluded_headers,
            included_headers=included_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             excluded_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if excluded_headers is not None:
            _setter("excluded_headers", excluded_headers)
        if included_headers is not None:
            _setter("included_headers", included_headers)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request headers.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="excludedHeaders")
    def excluded_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_headers")

    @excluded_headers.setter
    def excluded_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_headers", value)

    @property
    @pulumi.getter(name="includedHeaders")
    def included_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_headers")

    @included_headers.setter
    def included_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_headers", value)


@pulumi.input_type
class RuleGroupHeadersArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['RuleGroupHeaderMatchPatternArgs'],
                 match_scope: pulumi.Input['RuleGroupMapMatchScope'],
                 oversize_handling: pulumi.Input['RuleGroupOversizeHandling']):
        """
        Includes headers of a web request.
        """
        RuleGroupHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['RuleGroupHeaderMatchPatternArgs'],
             match_scope: pulumi.Input['RuleGroupMapMatchScope'],
             oversize_handling: pulumi.Input['RuleGroupOversizeHandling'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['RuleGroupHeaderMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['RuleGroupHeaderMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['RuleGroupMapMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['RuleGroupMapMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> pulumi.Input['RuleGroupOversizeHandling']:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: pulumi.Input['RuleGroupOversizeHandling']):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class RuleGroupImmunityTimePropertyArgs:
    def __init__(__self__, *,
                 immunity_time: pulumi.Input[int]):
        RuleGroupImmunityTimePropertyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time=immunity_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("immunity_time", immunity_time)

    @property
    @pulumi.getter(name="immunityTime")
    def immunity_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "immunity_time")

    @immunity_time.setter
    def immunity_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "immunity_time", value)


@pulumi.input_type
class RuleGroupIpSetForwardedIpConfigurationArgs:
    def __init__(__self__, *,
                 fallback_behavior: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationFallbackBehavior'],
                 header_name: pulumi.Input[str],
                 position: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationPosition']):
        RuleGroupIpSetForwardedIpConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_behavior=fallback_behavior,
            header_name=header_name,
            position=position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_behavior: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationFallbackBehavior'],
             header_name: pulumi.Input[str],
             position: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationPosition'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fallback_behavior", fallback_behavior)
        _setter("header_name", header_name)
        _setter("position", position)

    @property
    @pulumi.getter(name="fallbackBehavior")
    def fallback_behavior(self) -> pulumi.Input['RuleGroupIpSetForwardedIpConfigurationFallbackBehavior']:
        return pulumi.get(self, "fallback_behavior")

    @fallback_behavior.setter
    def fallback_behavior(self, value: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationFallbackBehavior']):
        pulumi.set(self, "fallback_behavior", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input['RuleGroupIpSetForwardedIpConfigurationPosition']:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input['RuleGroupIpSetForwardedIpConfigurationPosition']):
        pulumi.set(self, "position", value)


@pulumi.input_type
class RuleGroupIpSetReferenceStatementArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 ip_set_forwarded_ip_config: Optional[pulumi.Input['RuleGroupIpSetForwardedIpConfigurationArgs']] = None):
        RuleGroupIpSetReferenceStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            ip_set_forwarded_ip_config=ip_set_forwarded_ip_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             ip_set_forwarded_ip_config: Optional[pulumi.Input['RuleGroupIpSetForwardedIpConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        if ip_set_forwarded_ip_config is not None:
            _setter("ip_set_forwarded_ip_config", ip_set_forwarded_ip_config)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="ipSetForwardedIpConfig")
    def ip_set_forwarded_ip_config(self) -> Optional[pulumi.Input['RuleGroupIpSetForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "ip_set_forwarded_ip_config")

    @ip_set_forwarded_ip_config.setter
    def ip_set_forwarded_ip_config(self, value: Optional[pulumi.Input['RuleGroupIpSetForwardedIpConfigurationArgs']]):
        pulumi.set(self, "ip_set_forwarded_ip_config", value)


@pulumi.input_type
class RuleGroupJsonBodyArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['RuleGroupJsonMatchPatternArgs'],
                 match_scope: pulumi.Input['RuleGroupJsonMatchScope'],
                 invalid_fallback_behavior: Optional[pulumi.Input['RuleGroupBodyParsingFallbackBehavior']] = None,
                 oversize_handling: Optional[pulumi.Input['RuleGroupOversizeHandling']] = None):
        """
        Inspect the request body as JSON. The request body immediately follows the request headers.
        """
        RuleGroupJsonBodyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            invalid_fallback_behavior=invalid_fallback_behavior,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['RuleGroupJsonMatchPatternArgs'],
             match_scope: pulumi.Input['RuleGroupJsonMatchScope'],
             invalid_fallback_behavior: Optional[pulumi.Input['RuleGroupBodyParsingFallbackBehavior']] = None,
             oversize_handling: Optional[pulumi.Input['RuleGroupOversizeHandling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        if invalid_fallback_behavior is not None:
            _setter("invalid_fallback_behavior", invalid_fallback_behavior)
        if oversize_handling is not None:
            _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['RuleGroupJsonMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['RuleGroupJsonMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['RuleGroupJsonMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['RuleGroupJsonMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="invalidFallbackBehavior")
    def invalid_fallback_behavior(self) -> Optional[pulumi.Input['RuleGroupBodyParsingFallbackBehavior']]:
        return pulumi.get(self, "invalid_fallback_behavior")

    @invalid_fallback_behavior.setter
    def invalid_fallback_behavior(self, value: Optional[pulumi.Input['RuleGroupBodyParsingFallbackBehavior']]):
        pulumi.set(self, "invalid_fallback_behavior", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> Optional[pulumi.Input['RuleGroupOversizeHandling']]:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: Optional[pulumi.Input['RuleGroupOversizeHandling']]):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class RuleGroupJsonMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the JSON body.
        :param Any all: Inspect all parts of the web request's JSON body.
        """
        RuleGroupJsonMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            included_paths=included_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if included_paths is not None:
            _setter("included_paths", included_paths)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request's JSON body.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_paths")

    @included_paths.setter
    def included_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_paths", value)


@pulumi.input_type
class RuleGroupLabelMatchStatementArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 scope: pulumi.Input['RuleGroupLabelMatchScope']):
        RuleGroupLabelMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            scope=scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             scope: pulumi.Input['RuleGroupLabelMatchScope'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("scope", scope)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['RuleGroupLabelMatchScope']:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['RuleGroupLabelMatchScope']):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class RuleGroupLabelSummaryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        RuleGroupLabelSummaryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleGroupLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        RuleGroupLabelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleGroupNotStatementArgs:
    def __init__(__self__, *,
                 statement: pulumi.Input['RuleGroupStatementArgs']):
        RuleGroupNotStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statement=statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statement: pulumi.Input['RuleGroupStatementArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statement", statement)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input['RuleGroupStatementArgs']:
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input['RuleGroupStatementArgs']):
        pulumi.set(self, "statement", value)


@pulumi.input_type
class RuleGroupOrStatementArgs:
    def __init__(__self__, *,
                 statements: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]):
        RuleGroupOrStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)

    @property
    @pulumi.getter
    def statements(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]:
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatementArgs']]]):
        pulumi.set(self, "statements", value)


@pulumi.input_type
class RuleGroupRateBasedStatementCustomKeyArgs:
    def __init__(__self__, *,
                 cookie: Optional[pulumi.Input['RuleGroupRateLimitCookieArgs']] = None,
                 forwarded_ip: Optional[pulumi.Input['RuleGroupRateLimitForwardedIpArgs']] = None,
                 header: Optional[pulumi.Input['RuleGroupRateLimitHeaderArgs']] = None,
                 http_method: Optional[pulumi.Input['RuleGroupRateLimitHttpMethodArgs']] = None,
                 ip: Optional[pulumi.Input['RuleGroupRateLimitIpArgs']] = None,
                 label_namespace: Optional[pulumi.Input['RuleGroupRateLimitLabelNamespaceArgs']] = None,
                 query_argument: Optional[pulumi.Input['RuleGroupRateLimitQueryArgumentArgs']] = None,
                 query_string: Optional[pulumi.Input['RuleGroupRateLimitQueryStringArgs']] = None,
                 uri_path: Optional[pulumi.Input['RuleGroupRateLimitUriPathArgs']] = None):
        """
        Specifies a single custom aggregate key for a rate-base rule.
        """
        RuleGroupRateBasedStatementCustomKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie=cookie,
            forwarded_ip=forwarded_ip,
            header=header,
            http_method=http_method,
            ip=ip,
            label_namespace=label_namespace,
            query_argument=query_argument,
            query_string=query_string,
            uri_path=uri_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie: Optional[pulumi.Input['RuleGroupRateLimitCookieArgs']] = None,
             forwarded_ip: Optional[pulumi.Input['RuleGroupRateLimitForwardedIpArgs']] = None,
             header: Optional[pulumi.Input['RuleGroupRateLimitHeaderArgs']] = None,
             http_method: Optional[pulumi.Input['RuleGroupRateLimitHttpMethodArgs']] = None,
             ip: Optional[pulumi.Input['RuleGroupRateLimitIpArgs']] = None,
             label_namespace: Optional[pulumi.Input['RuleGroupRateLimitLabelNamespaceArgs']] = None,
             query_argument: Optional[pulumi.Input['RuleGroupRateLimitQueryArgumentArgs']] = None,
             query_string: Optional[pulumi.Input['RuleGroupRateLimitQueryStringArgs']] = None,
             uri_path: Optional[pulumi.Input['RuleGroupRateLimitUriPathArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cookie is not None:
            _setter("cookie", cookie)
        if forwarded_ip is not None:
            _setter("forwarded_ip", forwarded_ip)
        if header is not None:
            _setter("header", header)
        if http_method is not None:
            _setter("http_method", http_method)
        if ip is not None:
            _setter("ip", ip)
        if label_namespace is not None:
            _setter("label_namespace", label_namespace)
        if query_argument is not None:
            _setter("query_argument", query_argument)
        if query_string is not None:
            _setter("query_string", query_string)
        if uri_path is not None:
            _setter("uri_path", uri_path)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input['RuleGroupRateLimitCookieArgs']]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input['RuleGroupRateLimitCookieArgs']]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter(name="forwardedIp")
    def forwarded_ip(self) -> Optional[pulumi.Input['RuleGroupRateLimitForwardedIpArgs']]:
        return pulumi.get(self, "forwarded_ip")

    @forwarded_ip.setter
    def forwarded_ip(self, value: Optional[pulumi.Input['RuleGroupRateLimitForwardedIpArgs']]):
        pulumi.set(self, "forwarded_ip", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['RuleGroupRateLimitHeaderArgs']]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['RuleGroupRateLimitHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input['RuleGroupRateLimitHttpMethodArgs']]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input['RuleGroupRateLimitHttpMethodArgs']]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input['RuleGroupRateLimitIpArgs']]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input['RuleGroupRateLimitIpArgs']]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="labelNamespace")
    def label_namespace(self) -> Optional[pulumi.Input['RuleGroupRateLimitLabelNamespaceArgs']]:
        return pulumi.get(self, "label_namespace")

    @label_namespace.setter
    def label_namespace(self, value: Optional[pulumi.Input['RuleGroupRateLimitLabelNamespaceArgs']]):
        pulumi.set(self, "label_namespace", value)

    @property
    @pulumi.getter(name="queryArgument")
    def query_argument(self) -> Optional[pulumi.Input['RuleGroupRateLimitQueryArgumentArgs']]:
        return pulumi.get(self, "query_argument")

    @query_argument.setter
    def query_argument(self, value: Optional[pulumi.Input['RuleGroupRateLimitQueryArgumentArgs']]):
        pulumi.set(self, "query_argument", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['RuleGroupRateLimitQueryStringArgs']]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['RuleGroupRateLimitQueryStringArgs']]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="uriPath")
    def uri_path(self) -> Optional[pulumi.Input['RuleGroupRateLimitUriPathArgs']]:
        return pulumi.get(self, "uri_path")

    @uri_path.setter
    def uri_path(self, value: Optional[pulumi.Input['RuleGroupRateLimitUriPathArgs']]):
        pulumi.set(self, "uri_path", value)


@pulumi.input_type
class RuleGroupRateBasedStatementArgs:
    def __init__(__self__, *,
                 aggregate_key_type: pulumi.Input['RuleGroupRateBasedStatementAggregateKeyType'],
                 limit: pulumi.Input[int],
                 custom_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupRateBasedStatementCustomKeyArgs']]]] = None,
                 forwarded_ip_config: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']] = None,
                 scope_down_statement: Optional[pulumi.Input['RuleGroupStatementArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleGroupRateBasedStatementCustomKeyArgs']]] custom_keys: Specifies the aggregate keys to use in a rate-base rule.
        """
        RuleGroupRateBasedStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_key_type=aggregate_key_type,
            limit=limit,
            custom_keys=custom_keys,
            forwarded_ip_config=forwarded_ip_config,
            scope_down_statement=scope_down_statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_key_type: pulumi.Input['RuleGroupRateBasedStatementAggregateKeyType'],
             limit: pulumi.Input[int],
             custom_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupRateBasedStatementCustomKeyArgs']]]] = None,
             forwarded_ip_config: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']] = None,
             scope_down_statement: Optional[pulumi.Input['RuleGroupStatementArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregate_key_type", aggregate_key_type)
        _setter("limit", limit)
        if custom_keys is not None:
            _setter("custom_keys", custom_keys)
        if forwarded_ip_config is not None:
            _setter("forwarded_ip_config", forwarded_ip_config)
        if scope_down_statement is not None:
            _setter("scope_down_statement", scope_down_statement)

    @property
    @pulumi.getter(name="aggregateKeyType")
    def aggregate_key_type(self) -> pulumi.Input['RuleGroupRateBasedStatementAggregateKeyType']:
        return pulumi.get(self, "aggregate_key_type")

    @aggregate_key_type.setter
    def aggregate_key_type(self, value: pulumi.Input['RuleGroupRateBasedStatementAggregateKeyType']):
        pulumi.set(self, "aggregate_key_type", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="customKeys")
    def custom_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupRateBasedStatementCustomKeyArgs']]]]:
        """
        Specifies the aggregate keys to use in a rate-base rule.
        """
        return pulumi.get(self, "custom_keys")

    @custom_keys.setter
    def custom_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupRateBasedStatementCustomKeyArgs']]]]):
        pulumi.set(self, "custom_keys", value)

    @property
    @pulumi.getter(name="forwardedIpConfig")
    def forwarded_ip_config(self) -> Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "forwarded_ip_config")

    @forwarded_ip_config.setter
    def forwarded_ip_config(self, value: Optional[pulumi.Input['RuleGroupForwardedIpConfigurationArgs']]):
        pulumi.set(self, "forwarded_ip_config", value)

    @property
    @pulumi.getter(name="scopeDownStatement")
    def scope_down_statement(self) -> Optional[pulumi.Input['RuleGroupStatementArgs']]:
        return pulumi.get(self, "scope_down_statement")

    @scope_down_statement.setter
    def scope_down_statement(self, value: Optional[pulumi.Input['RuleGroupStatementArgs']]):
        pulumi.set(self, "scope_down_statement", value)


@pulumi.input_type
class RuleGroupRateLimitCookieArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Specifies a cookie as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the cookie to use.
        """
        RuleGroupRateLimitCookieArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the cookie to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRateLimitForwardedIpArgs:
    def __init__(__self__):
        """
        Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RuleGroupRateLimitHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Specifies a header as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the header to use.
        """
        RuleGroupRateLimitHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the header to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRateLimitHttpMethodArgs:
    def __init__(__self__):
        """
        Specifies the request's HTTP method as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RuleGroupRateLimitIpArgs:
    def __init__(__self__):
        """
        Specifies the IP address in the web request as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RuleGroupRateLimitLabelNamespaceArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        Specifies a label namespace to use as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] namespace: The namespace to use for aggregation.
        """
        RuleGroupRateLimitLabelNamespaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             namespace: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace to use for aggregation.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class RuleGroupRateLimitQueryArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Specifies a query argument in the request as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the query argument to use.
        """
        RuleGroupRateLimitQueryArgumentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query argument to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRateLimitQueryStringArgs:
    def __init__(__self__, *,
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Specifies the request's query string as an aggregate key for a rate-based rule.
        """
        RuleGroupRateLimitQueryStringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRateLimitUriPathArgs:
    def __init__(__self__, *,
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Specifies the request's URI Path as an aggregate key for a rate-based rule.
        """
        RuleGroupRateLimitUriPathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRegexMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 regex_string: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        RuleGroupRegexMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            regex_string=regex_string,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             regex_string: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("regex_string", regex_string)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="regexString")
    def regex_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex_string")

    @regex_string.setter
    def regex_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex_string", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRegexPatternSetReferenceStatementArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        RuleGroupRegexPatternSetReferenceStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            field_to_match=field_to_match,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupRuleActionArgs:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input['RuleGroupAllowActionArgs']] = None,
                 block: Optional[pulumi.Input['RuleGroupBlockActionArgs']] = None,
                 captcha: Optional[pulumi.Input['RuleGroupCaptchaActionArgs']] = None,
                 challenge: Optional[pulumi.Input['RuleGroupChallengeActionArgs']] = None,
                 count: Optional[pulumi.Input['RuleGroupCountActionArgs']] = None):
        """
        Action taken when Rule matches its condition.
        """
        RuleGroupRuleActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow=allow,
            block=block,
            captcha=captcha,
            challenge=challenge,
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow: Optional[pulumi.Input['RuleGroupAllowActionArgs']] = None,
             block: Optional[pulumi.Input['RuleGroupBlockActionArgs']] = None,
             captcha: Optional[pulumi.Input['RuleGroupCaptchaActionArgs']] = None,
             challenge: Optional[pulumi.Input['RuleGroupChallengeActionArgs']] = None,
             count: Optional[pulumi.Input['RuleGroupCountActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow is not None:
            _setter("allow", allow)
        if block is not None:
            _setter("block", block)
        if captcha is not None:
            _setter("captcha", captcha)
        if challenge is not None:
            _setter("challenge", challenge)
        if count is not None:
            _setter("count", count)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input['RuleGroupAllowActionArgs']]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input['RuleGroupAllowActionArgs']]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input['RuleGroupBlockActionArgs']]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input['RuleGroupBlockActionArgs']]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter
    def captcha(self) -> Optional[pulumi.Input['RuleGroupCaptchaActionArgs']]:
        return pulumi.get(self, "captcha")

    @captcha.setter
    def captcha(self, value: Optional[pulumi.Input['RuleGroupCaptchaActionArgs']]):
        pulumi.set(self, "captcha", value)

    @property
    @pulumi.getter
    def challenge(self) -> Optional[pulumi.Input['RuleGroupChallengeActionArgs']]:
        return pulumi.get(self, "challenge")

    @challenge.setter
    def challenge(self, value: Optional[pulumi.Input['RuleGroupChallengeActionArgs']]):
        pulumi.set(self, "challenge", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input['RuleGroupCountActionArgs']]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input['RuleGroupCountActionArgs']]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class RuleGroupRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 statement: pulumi.Input['RuleGroupStatementArgs'],
                 visibility_config: pulumi.Input['RuleGroupVisibilityConfigArgs'],
                 action: Optional[pulumi.Input['RuleGroupRuleActionArgs']] = None,
                 captcha_config: Optional[pulumi.Input['RuleGroupCaptchaConfigArgs']] = None,
                 challenge_config: Optional[pulumi.Input['RuleGroupChallengeConfigArgs']] = None,
                 rule_labels: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupLabelArgs']]]] = None):
        """
        Rule of RuleGroup that contains condition and action.
        :param pulumi.Input[Sequence[pulumi.Input['RuleGroupLabelArgs']]] rule_labels: Collection of Rule Labels.
        """
        RuleGroupRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            priority=priority,
            statement=statement,
            visibility_config=visibility_config,
            action=action,
            captcha_config=captcha_config,
            challenge_config=challenge_config,
            rule_labels=rule_labels,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             priority: pulumi.Input[int],
             statement: pulumi.Input['RuleGroupStatementArgs'],
             visibility_config: pulumi.Input['RuleGroupVisibilityConfigArgs'],
             action: Optional[pulumi.Input['RuleGroupRuleActionArgs']] = None,
             captcha_config: Optional[pulumi.Input['RuleGroupCaptchaConfigArgs']] = None,
             challenge_config: Optional[pulumi.Input['RuleGroupChallengeConfigArgs']] = None,
             rule_labels: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupLabelArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("priority", priority)
        _setter("statement", statement)
        _setter("visibility_config", visibility_config)
        if action is not None:
            _setter("action", action)
        if captcha_config is not None:
            _setter("captcha_config", captcha_config)
        if challenge_config is not None:
            _setter("challenge_config", challenge_config)
        if rule_labels is not None:
            _setter("rule_labels", rule_labels)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input['RuleGroupStatementArgs']:
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input['RuleGroupStatementArgs']):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter(name="visibilityConfig")
    def visibility_config(self) -> pulumi.Input['RuleGroupVisibilityConfigArgs']:
        return pulumi.get(self, "visibility_config")

    @visibility_config.setter
    def visibility_config(self, value: pulumi.Input['RuleGroupVisibilityConfigArgs']):
        pulumi.set(self, "visibility_config", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['RuleGroupRuleActionArgs']]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['RuleGroupRuleActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="captchaConfig")
    def captcha_config(self) -> Optional[pulumi.Input['RuleGroupCaptchaConfigArgs']]:
        return pulumi.get(self, "captcha_config")

    @captcha_config.setter
    def captcha_config(self, value: Optional[pulumi.Input['RuleGroupCaptchaConfigArgs']]):
        pulumi.set(self, "captcha_config", value)

    @property
    @pulumi.getter(name="challengeConfig")
    def challenge_config(self) -> Optional[pulumi.Input['RuleGroupChallengeConfigArgs']]:
        return pulumi.get(self, "challenge_config")

    @challenge_config.setter
    def challenge_config(self, value: Optional[pulumi.Input['RuleGroupChallengeConfigArgs']]):
        pulumi.set(self, "challenge_config", value)

    @property
    @pulumi.getter(name="ruleLabels")
    def rule_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupLabelArgs']]]]:
        """
        Collection of Rule Labels.
        """
        return pulumi.get(self, "rule_labels")

    @rule_labels.setter
    def rule_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupLabelArgs']]]]):
        pulumi.set(self, "rule_labels", value)


@pulumi.input_type
class RuleGroupSizeConstraintStatementArgs:
    def __init__(__self__, *,
                 comparison_operator: pulumi.Input['RuleGroupSizeConstraintStatementComparisonOperator'],
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 size: pulumi.Input[float],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Size Constraint statement.
        """
        RuleGroupSizeConstraintStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_operator=comparison_operator,
            field_to_match=field_to_match,
            size=size,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_operator: pulumi.Input['RuleGroupSizeConstraintStatementComparisonOperator'],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             size: pulumi.Input[float],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comparison_operator", comparison_operator)
        _setter("field_to_match", field_to_match)
        _setter("size", size)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Input['RuleGroupSizeConstraintStatementComparisonOperator']:
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: pulumi.Input['RuleGroupSizeConstraintStatementComparisonOperator']):
        pulumi.set(self, "comparison_operator", value)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[float]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class RuleGroupSqliMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
                 sensitivity_level: Optional[pulumi.Input['RuleGroupSensitivityLevel']] = None):
        """
        Sqli Match Statement.
        """
        RuleGroupSqliMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformations=text_transformations,
            sensitivity_level=sensitivity_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             sensitivity_level: Optional[pulumi.Input['RuleGroupSensitivityLevel']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)
        if sensitivity_level is not None:
            _setter("sensitivity_level", sensitivity_level)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)

    @property
    @pulumi.getter(name="sensitivityLevel")
    def sensitivity_level(self) -> Optional[pulumi.Input['RuleGroupSensitivityLevel']]:
        return pulumi.get(self, "sensitivity_level")

    @sensitivity_level.setter
    def sensitivity_level(self, value: Optional[pulumi.Input['RuleGroupSensitivityLevel']]):
        pulumi.set(self, "sensitivity_level", value)


@pulumi.input_type
class RuleGroupStatementArgs:
    def __init__(__self__, *,
                 and_statement: Optional[pulumi.Input['RuleGroupAndStatementArgs']] = None,
                 byte_match_statement: Optional[pulumi.Input['RuleGroupByteMatchStatementArgs']] = None,
                 geo_match_statement: Optional[pulumi.Input['RuleGroupGeoMatchStatementArgs']] = None,
                 ip_set_reference_statement: Optional[pulumi.Input['RuleGroupIpSetReferenceStatementArgs']] = None,
                 label_match_statement: Optional[pulumi.Input['RuleGroupLabelMatchStatementArgs']] = None,
                 not_statement: Optional[pulumi.Input['RuleGroupNotStatementArgs']] = None,
                 or_statement: Optional[pulumi.Input['RuleGroupOrStatementArgs']] = None,
                 rate_based_statement: Optional[pulumi.Input['RuleGroupRateBasedStatementArgs']] = None,
                 regex_match_statement: Optional[pulumi.Input['RuleGroupRegexMatchStatementArgs']] = None,
                 regex_pattern_set_reference_statement: Optional[pulumi.Input['RuleGroupRegexPatternSetReferenceStatementArgs']] = None,
                 size_constraint_statement: Optional[pulumi.Input['RuleGroupSizeConstraintStatementArgs']] = None,
                 sqli_match_statement: Optional[pulumi.Input['RuleGroupSqliMatchStatementArgs']] = None,
                 xss_match_statement: Optional[pulumi.Input['RuleGroupXssMatchStatementArgs']] = None):
        """
        First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
        """
        RuleGroupStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            and_statement=and_statement,
            byte_match_statement=byte_match_statement,
            geo_match_statement=geo_match_statement,
            ip_set_reference_statement=ip_set_reference_statement,
            label_match_statement=label_match_statement,
            not_statement=not_statement,
            or_statement=or_statement,
            rate_based_statement=rate_based_statement,
            regex_match_statement=regex_match_statement,
            regex_pattern_set_reference_statement=regex_pattern_set_reference_statement,
            size_constraint_statement=size_constraint_statement,
            sqli_match_statement=sqli_match_statement,
            xss_match_statement=xss_match_statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             and_statement: Optional[pulumi.Input['RuleGroupAndStatementArgs']] = None,
             byte_match_statement: Optional[pulumi.Input['RuleGroupByteMatchStatementArgs']] = None,
             geo_match_statement: Optional[pulumi.Input['RuleGroupGeoMatchStatementArgs']] = None,
             ip_set_reference_statement: Optional[pulumi.Input['RuleGroupIpSetReferenceStatementArgs']] = None,
             label_match_statement: Optional[pulumi.Input['RuleGroupLabelMatchStatementArgs']] = None,
             not_statement: Optional[pulumi.Input['RuleGroupNotStatementArgs']] = None,
             or_statement: Optional[pulumi.Input['RuleGroupOrStatementArgs']] = None,
             rate_based_statement: Optional[pulumi.Input['RuleGroupRateBasedStatementArgs']] = None,
             regex_match_statement: Optional[pulumi.Input['RuleGroupRegexMatchStatementArgs']] = None,
             regex_pattern_set_reference_statement: Optional[pulumi.Input['RuleGroupRegexPatternSetReferenceStatementArgs']] = None,
             size_constraint_statement: Optional[pulumi.Input['RuleGroupSizeConstraintStatementArgs']] = None,
             sqli_match_statement: Optional[pulumi.Input['RuleGroupSqliMatchStatementArgs']] = None,
             xss_match_statement: Optional[pulumi.Input['RuleGroupXssMatchStatementArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if and_statement is not None:
            _setter("and_statement", and_statement)
        if byte_match_statement is not None:
            _setter("byte_match_statement", byte_match_statement)
        if geo_match_statement is not None:
            _setter("geo_match_statement", geo_match_statement)
        if ip_set_reference_statement is not None:
            _setter("ip_set_reference_statement", ip_set_reference_statement)
        if label_match_statement is not None:
            _setter("label_match_statement", label_match_statement)
        if not_statement is not None:
            _setter("not_statement", not_statement)
        if or_statement is not None:
            _setter("or_statement", or_statement)
        if rate_based_statement is not None:
            _setter("rate_based_statement", rate_based_statement)
        if regex_match_statement is not None:
            _setter("regex_match_statement", regex_match_statement)
        if regex_pattern_set_reference_statement is not None:
            _setter("regex_pattern_set_reference_statement", regex_pattern_set_reference_statement)
        if size_constraint_statement is not None:
            _setter("size_constraint_statement", size_constraint_statement)
        if sqli_match_statement is not None:
            _setter("sqli_match_statement", sqli_match_statement)
        if xss_match_statement is not None:
            _setter("xss_match_statement", xss_match_statement)

    @property
    @pulumi.getter(name="andStatement")
    def and_statement(self) -> Optional[pulumi.Input['RuleGroupAndStatementArgs']]:
        return pulumi.get(self, "and_statement")

    @and_statement.setter
    def and_statement(self, value: Optional[pulumi.Input['RuleGroupAndStatementArgs']]):
        pulumi.set(self, "and_statement", value)

    @property
    @pulumi.getter(name="byteMatchStatement")
    def byte_match_statement(self) -> Optional[pulumi.Input['RuleGroupByteMatchStatementArgs']]:
        return pulumi.get(self, "byte_match_statement")

    @byte_match_statement.setter
    def byte_match_statement(self, value: Optional[pulumi.Input['RuleGroupByteMatchStatementArgs']]):
        pulumi.set(self, "byte_match_statement", value)

    @property
    @pulumi.getter(name="geoMatchStatement")
    def geo_match_statement(self) -> Optional[pulumi.Input['RuleGroupGeoMatchStatementArgs']]:
        return pulumi.get(self, "geo_match_statement")

    @geo_match_statement.setter
    def geo_match_statement(self, value: Optional[pulumi.Input['RuleGroupGeoMatchStatementArgs']]):
        pulumi.set(self, "geo_match_statement", value)

    @property
    @pulumi.getter(name="ipSetReferenceStatement")
    def ip_set_reference_statement(self) -> Optional[pulumi.Input['RuleGroupIpSetReferenceStatementArgs']]:
        return pulumi.get(self, "ip_set_reference_statement")

    @ip_set_reference_statement.setter
    def ip_set_reference_statement(self, value: Optional[pulumi.Input['RuleGroupIpSetReferenceStatementArgs']]):
        pulumi.set(self, "ip_set_reference_statement", value)

    @property
    @pulumi.getter(name="labelMatchStatement")
    def label_match_statement(self) -> Optional[pulumi.Input['RuleGroupLabelMatchStatementArgs']]:
        return pulumi.get(self, "label_match_statement")

    @label_match_statement.setter
    def label_match_statement(self, value: Optional[pulumi.Input['RuleGroupLabelMatchStatementArgs']]):
        pulumi.set(self, "label_match_statement", value)

    @property
    @pulumi.getter(name="notStatement")
    def not_statement(self) -> Optional[pulumi.Input['RuleGroupNotStatementArgs']]:
        return pulumi.get(self, "not_statement")

    @not_statement.setter
    def not_statement(self, value: Optional[pulumi.Input['RuleGroupNotStatementArgs']]):
        pulumi.set(self, "not_statement", value)

    @property
    @pulumi.getter(name="orStatement")
    def or_statement(self) -> Optional[pulumi.Input['RuleGroupOrStatementArgs']]:
        return pulumi.get(self, "or_statement")

    @or_statement.setter
    def or_statement(self, value: Optional[pulumi.Input['RuleGroupOrStatementArgs']]):
        pulumi.set(self, "or_statement", value)

    @property
    @pulumi.getter(name="rateBasedStatement")
    def rate_based_statement(self) -> Optional[pulumi.Input['RuleGroupRateBasedStatementArgs']]:
        return pulumi.get(self, "rate_based_statement")

    @rate_based_statement.setter
    def rate_based_statement(self, value: Optional[pulumi.Input['RuleGroupRateBasedStatementArgs']]):
        pulumi.set(self, "rate_based_statement", value)

    @property
    @pulumi.getter(name="regexMatchStatement")
    def regex_match_statement(self) -> Optional[pulumi.Input['RuleGroupRegexMatchStatementArgs']]:
        return pulumi.get(self, "regex_match_statement")

    @regex_match_statement.setter
    def regex_match_statement(self, value: Optional[pulumi.Input['RuleGroupRegexMatchStatementArgs']]):
        pulumi.set(self, "regex_match_statement", value)

    @property
    @pulumi.getter(name="regexPatternSetReferenceStatement")
    def regex_pattern_set_reference_statement(self) -> Optional[pulumi.Input['RuleGroupRegexPatternSetReferenceStatementArgs']]:
        return pulumi.get(self, "regex_pattern_set_reference_statement")

    @regex_pattern_set_reference_statement.setter
    def regex_pattern_set_reference_statement(self, value: Optional[pulumi.Input['RuleGroupRegexPatternSetReferenceStatementArgs']]):
        pulumi.set(self, "regex_pattern_set_reference_statement", value)

    @property
    @pulumi.getter(name="sizeConstraintStatement")
    def size_constraint_statement(self) -> Optional[pulumi.Input['RuleGroupSizeConstraintStatementArgs']]:
        return pulumi.get(self, "size_constraint_statement")

    @size_constraint_statement.setter
    def size_constraint_statement(self, value: Optional[pulumi.Input['RuleGroupSizeConstraintStatementArgs']]):
        pulumi.set(self, "size_constraint_statement", value)

    @property
    @pulumi.getter(name="sqliMatchStatement")
    def sqli_match_statement(self) -> Optional[pulumi.Input['RuleGroupSqliMatchStatementArgs']]:
        return pulumi.get(self, "sqli_match_statement")

    @sqli_match_statement.setter
    def sqli_match_statement(self, value: Optional[pulumi.Input['RuleGroupSqliMatchStatementArgs']]):
        pulumi.set(self, "sqli_match_statement", value)

    @property
    @pulumi.getter(name="xssMatchStatement")
    def xss_match_statement(self) -> Optional[pulumi.Input['RuleGroupXssMatchStatementArgs']]:
        return pulumi.get(self, "xss_match_statement")

    @xss_match_statement.setter
    def xss_match_statement(self, value: Optional[pulumi.Input['RuleGroupXssMatchStatementArgs']]):
        pulumi.set(self, "xss_match_statement", value)


@pulumi.input_type
class RuleGroupTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        RuleGroupTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleGroupTextTransformationArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 type: pulumi.Input['RuleGroupTextTransformationType']):
        """
        Text Transformation on the Search String before match.
        """
        RuleGroupTextTransformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: pulumi.Input[int],
             type: pulumi.Input['RuleGroupTextTransformationType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("priority", priority)
        _setter("type", type)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['RuleGroupTextTransformationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['RuleGroupTextTransformationType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RuleGroupVisibilityConfigArgs:
    def __init__(__self__, *,
                 cloud_watch_metrics_enabled: pulumi.Input[bool],
                 metric_name: pulumi.Input[str],
                 sampled_requests_enabled: pulumi.Input[bool]):
        """
        Visibility Metric of the RuleGroup.
        """
        RuleGroupVisibilityConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_metrics_enabled=cloud_watch_metrics_enabled,
            metric_name=metric_name,
            sampled_requests_enabled=sampled_requests_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_metrics_enabled: pulumi.Input[bool],
             metric_name: pulumi.Input[str],
             sampled_requests_enabled: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cloud_watch_metrics_enabled", cloud_watch_metrics_enabled)
        _setter("metric_name", metric_name)
        _setter("sampled_requests_enabled", sampled_requests_enabled)

    @property
    @pulumi.getter(name="cloudWatchMetricsEnabled")
    def cloud_watch_metrics_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "cloud_watch_metrics_enabled")

    @cloud_watch_metrics_enabled.setter
    def cloud_watch_metrics_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "cloud_watch_metrics_enabled", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="sampledRequestsEnabled")
    def sampled_requests_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sampled_requests_enabled")

    @sampled_requests_enabled.setter
    def sampled_requests_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sampled_requests_enabled", value)


@pulumi.input_type
class RuleGroupXssMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        """
        Xss Match Statement.
        """
        RuleGroupXssMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['RuleGroupFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['RuleGroupFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['RuleGroupFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclAllowActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None):
        """
        Allow traffic towards application.
        """
        WebAclAllowActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class WebAclAndStatementArgs:
    def __init__(__self__, *,
                 statements: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]):
        WebAclAndStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)

    @property
    @pulumi.getter
    def statements(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]:
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]):
        pulumi.set(self, "statements", value)


@pulumi.input_type
class WebAclAssociationConfigArgs:
    def __init__(__self__, *,
                 request_body: Optional[pulumi.Input['WebAclRequestBodyArgs']] = None):
        """
        AssociationConfig for body inspection
        """
        WebAclAssociationConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request_body=request_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request_body: Optional[pulumi.Input['WebAclRequestBodyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if request_body is not None:
            _setter("request_body", request_body)

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[pulumi.Input['WebAclRequestBodyArgs']]:
        return pulumi.get(self, "request_body")

    @request_body.setter
    def request_body(self, value: Optional[pulumi.Input['WebAclRequestBodyArgs']]):
        pulumi.set(self, "request_body", value)


@pulumi.input_type
class WebAclAwsManagedRulesAcfpRuleSetArgs:
    def __init__(__self__, *,
                 creation_path: pulumi.Input[str],
                 registration_page_path: pulumi.Input[str],
                 request_inspection: pulumi.Input['WebAclRequestInspectionAcfpArgs'],
                 enable_regex_in_path: Optional[pulumi.Input[bool]] = None,
                 response_inspection: Optional[pulumi.Input['WebAclResponseInspectionArgs']] = None):
        """
        Configures how to use the Account creation fraud prevention managed rule group in the web ACL
        """
        WebAclAwsManagedRulesAcfpRuleSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            creation_path=creation_path,
            registration_page_path=registration_page_path,
            request_inspection=request_inspection,
            enable_regex_in_path=enable_regex_in_path,
            response_inspection=response_inspection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             creation_path: pulumi.Input[str],
             registration_page_path: pulumi.Input[str],
             request_inspection: pulumi.Input['WebAclRequestInspectionAcfpArgs'],
             enable_regex_in_path: Optional[pulumi.Input[bool]] = None,
             response_inspection: Optional[pulumi.Input['WebAclResponseInspectionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("creation_path", creation_path)
        _setter("registration_page_path", registration_page_path)
        _setter("request_inspection", request_inspection)
        if enable_regex_in_path is not None:
            _setter("enable_regex_in_path", enable_regex_in_path)
        if response_inspection is not None:
            _setter("response_inspection", response_inspection)

    @property
    @pulumi.getter(name="creationPath")
    def creation_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "creation_path")

    @creation_path.setter
    def creation_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "creation_path", value)

    @property
    @pulumi.getter(name="registrationPagePath")
    def registration_page_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "registration_page_path")

    @registration_page_path.setter
    def registration_page_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "registration_page_path", value)

    @property
    @pulumi.getter(name="requestInspection")
    def request_inspection(self) -> pulumi.Input['WebAclRequestInspectionAcfpArgs']:
        return pulumi.get(self, "request_inspection")

    @request_inspection.setter
    def request_inspection(self, value: pulumi.Input['WebAclRequestInspectionAcfpArgs']):
        pulumi.set(self, "request_inspection", value)

    @property
    @pulumi.getter(name="enableRegexInPath")
    def enable_regex_in_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_regex_in_path")

    @enable_regex_in_path.setter
    def enable_regex_in_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_regex_in_path", value)

    @property
    @pulumi.getter(name="responseInspection")
    def response_inspection(self) -> Optional[pulumi.Input['WebAclResponseInspectionArgs']]:
        return pulumi.get(self, "response_inspection")

    @response_inspection.setter
    def response_inspection(self, value: Optional[pulumi.Input['WebAclResponseInspectionArgs']]):
        pulumi.set(self, "response_inspection", value)


@pulumi.input_type
class WebAclAwsManagedRulesAtpRuleSetArgs:
    def __init__(__self__, *,
                 login_path: pulumi.Input[str],
                 enable_regex_in_path: Optional[pulumi.Input[bool]] = None,
                 request_inspection: Optional[pulumi.Input['WebAclRequestInspectionArgs']] = None,
                 response_inspection: Optional[pulumi.Input['WebAclResponseInspectionArgs']] = None):
        """
        Configures how to use the Account Takeover Prevention managed rule group in the web ACL
        """
        WebAclAwsManagedRulesAtpRuleSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            login_path=login_path,
            enable_regex_in_path=enable_regex_in_path,
            request_inspection=request_inspection,
            response_inspection=response_inspection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             login_path: pulumi.Input[str],
             enable_regex_in_path: Optional[pulumi.Input[bool]] = None,
             request_inspection: Optional[pulumi.Input['WebAclRequestInspectionArgs']] = None,
             response_inspection: Optional[pulumi.Input['WebAclResponseInspectionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("login_path", login_path)
        if enable_regex_in_path is not None:
            _setter("enable_regex_in_path", enable_regex_in_path)
        if request_inspection is not None:
            _setter("request_inspection", request_inspection)
        if response_inspection is not None:
            _setter("response_inspection", response_inspection)

    @property
    @pulumi.getter(name="loginPath")
    def login_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "login_path")

    @login_path.setter
    def login_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_path", value)

    @property
    @pulumi.getter(name="enableRegexInPath")
    def enable_regex_in_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_regex_in_path")

    @enable_regex_in_path.setter
    def enable_regex_in_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_regex_in_path", value)

    @property
    @pulumi.getter(name="requestInspection")
    def request_inspection(self) -> Optional[pulumi.Input['WebAclRequestInspectionArgs']]:
        return pulumi.get(self, "request_inspection")

    @request_inspection.setter
    def request_inspection(self, value: Optional[pulumi.Input['WebAclRequestInspectionArgs']]):
        pulumi.set(self, "request_inspection", value)

    @property
    @pulumi.getter(name="responseInspection")
    def response_inspection(self) -> Optional[pulumi.Input['WebAclResponseInspectionArgs']]:
        return pulumi.get(self, "response_inspection")

    @response_inspection.setter
    def response_inspection(self, value: Optional[pulumi.Input['WebAclResponseInspectionArgs']]):
        pulumi.set(self, "response_inspection", value)


@pulumi.input_type
class WebAclAwsManagedRulesBotControlRuleSetArgs:
    def __init__(__self__, *,
                 inspection_level: pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetInspectionLevel'],
                 enable_machine_learning: Optional[pulumi.Input[bool]] = None):
        """
        Configures how to use the Bot Control managed rule group in the web ACL
        """
        WebAclAwsManagedRulesBotControlRuleSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            inspection_level=inspection_level,
            enable_machine_learning=enable_machine_learning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             inspection_level: pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetInspectionLevel'],
             enable_machine_learning: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("inspection_level", inspection_level)
        if enable_machine_learning is not None:
            _setter("enable_machine_learning", enable_machine_learning)

    @property
    @pulumi.getter(name="inspectionLevel")
    def inspection_level(self) -> pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetInspectionLevel']:
        return pulumi.get(self, "inspection_level")

    @inspection_level.setter
    def inspection_level(self, value: pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetInspectionLevel']):
        pulumi.set(self, "inspection_level", value)

    @property
    @pulumi.getter(name="enableMachineLearning")
    def enable_machine_learning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_machine_learning")

    @enable_machine_learning.setter
    def enable_machine_learning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_machine_learning", value)


@pulumi.input_type
class WebAclBlockActionArgs:
    def __init__(__self__, *,
                 custom_response: Optional[pulumi.Input['WebAclCustomResponseArgs']] = None):
        """
        Block traffic towards application.
        """
        WebAclBlockActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_response=custom_response,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_response: Optional[pulumi.Input['WebAclCustomResponseArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_response is not None:
            _setter("custom_response", custom_response)

    @property
    @pulumi.getter(name="customResponse")
    def custom_response(self) -> Optional[pulumi.Input['WebAclCustomResponseArgs']]:
        return pulumi.get(self, "custom_response")

    @custom_response.setter
    def custom_response(self, value: Optional[pulumi.Input['WebAclCustomResponseArgs']]):
        pulumi.set(self, "custom_response", value)


@pulumi.input_type
class WebAclBodyArgs:
    def __init__(__self__, *,
                 oversize_handling: Optional[pulumi.Input['WebAclOversizeHandling']] = None):
        """
        The body of a web request. This immediately follows the request headers.
        """
        WebAclBodyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             oversize_handling: Optional[pulumi.Input['WebAclOversizeHandling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if oversize_handling is not None:
            _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> Optional[pulumi.Input['WebAclOversizeHandling']]:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: Optional[pulumi.Input['WebAclOversizeHandling']]):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class WebAclByteMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 positional_constraint: pulumi.Input['WebAclPositionalConstraint'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
                 search_string: Optional[pulumi.Input[str]] = None,
                 search_string_base64: Optional[pulumi.Input[str]] = None):
        """
        Byte Match statement.
        """
        WebAclByteMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            positional_constraint=positional_constraint,
            text_transformations=text_transformations,
            search_string=search_string,
            search_string_base64=search_string_base64,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             positional_constraint: pulumi.Input['WebAclPositionalConstraint'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             search_string: Optional[pulumi.Input[str]] = None,
             search_string_base64: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("positional_constraint", positional_constraint)
        _setter("text_transformations", text_transformations)
        if search_string is not None:
            _setter("search_string", search_string)
        if search_string_base64 is not None:
            _setter("search_string_base64", search_string_base64)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="positionalConstraint")
    def positional_constraint(self) -> pulumi.Input['WebAclPositionalConstraint']:
        return pulumi.get(self, "positional_constraint")

    @positional_constraint.setter
    def positional_constraint(self, value: pulumi.Input['WebAclPositionalConstraint']):
        pulumi.set(self, "positional_constraint", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)

    @property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string")

    @search_string.setter
    def search_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string", value)

    @property
    @pulumi.getter(name="searchStringBase64")
    def search_string_base64(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_string_base64")

    @search_string_base64.setter
    def search_string_base64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_string_base64", value)


@pulumi.input_type
class WebAclCaptchaActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None):
        """
        Checks valid token exists with request.
        """
        WebAclCaptchaActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class WebAclCaptchaConfigArgs:
    def __init__(__self__, *,
                 immunity_time_property: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']] = None):
        WebAclCaptchaConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time_property=immunity_time_property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time_property: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if immunity_time_property is not None:
            _setter("immunity_time_property", immunity_time_property)

    @property
    @pulumi.getter(name="immunityTimeProperty")
    def immunity_time_property(self) -> Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']]:
        return pulumi.get(self, "immunity_time_property")

    @immunity_time_property.setter
    def immunity_time_property(self, value: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']]):
        pulumi.set(self, "immunity_time_property", value)


@pulumi.input_type
class WebAclChallengeActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None):
        """
        Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
        """
        WebAclChallengeActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class WebAclChallengeConfigArgs:
    def __init__(__self__, *,
                 immunity_time_property: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']] = None):
        WebAclChallengeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time_property=immunity_time_property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time_property: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if immunity_time_property is not None:
            _setter("immunity_time_property", immunity_time_property)

    @property
    @pulumi.getter(name="immunityTimeProperty")
    def immunity_time_property(self) -> Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']]:
        return pulumi.get(self, "immunity_time_property")

    @immunity_time_property.setter
    def immunity_time_property(self, value: Optional[pulumi.Input['WebAclImmunityTimePropertyArgs']]):
        pulumi.set(self, "immunity_time_property", value)


@pulumi.input_type
class WebAclCookieMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 excluded_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the request cookies.
        :param Any all: Inspect all parts of the web request cookies.
        """
        WebAclCookieMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            excluded_cookies=excluded_cookies,
            included_cookies=included_cookies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             excluded_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_cookies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if excluded_cookies is not None:
            _setter("excluded_cookies", excluded_cookies)
        if included_cookies is not None:
            _setter("included_cookies", included_cookies)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request cookies.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="excludedCookies")
    def excluded_cookies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_cookies")

    @excluded_cookies.setter
    def excluded_cookies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_cookies", value)

    @property
    @pulumi.getter(name="includedCookies")
    def included_cookies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_cookies")

    @included_cookies.setter
    def included_cookies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_cookies", value)


@pulumi.input_type
class WebAclCookiesArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['WebAclCookieMatchPatternArgs'],
                 match_scope: pulumi.Input['WebAclMapMatchScope'],
                 oversize_handling: pulumi.Input['WebAclOversizeHandling']):
        """
        Includes headers of a web request.
        """
        WebAclCookiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['WebAclCookieMatchPatternArgs'],
             match_scope: pulumi.Input['WebAclMapMatchScope'],
             oversize_handling: pulumi.Input['WebAclOversizeHandling'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['WebAclCookieMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['WebAclCookieMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['WebAclMapMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['WebAclMapMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> pulumi.Input['WebAclOversizeHandling']:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: pulumi.Input['WebAclOversizeHandling']):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class WebAclCountActionArgs:
    def __init__(__self__, *,
                 custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None):
        """
        Allow traffic towards application.
        """
        WebAclCountActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_request_handling=custom_request_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_request_handling: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_request_handling is not None:
            _setter("custom_request_handling", custom_request_handling)

    @property
    @pulumi.getter(name="customRequestHandling")
    def custom_request_handling(self) -> Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]:
        return pulumi.get(self, "custom_request_handling")

    @custom_request_handling.setter
    def custom_request_handling(self, value: Optional[pulumi.Input['WebAclCustomRequestHandlingArgs']]):
        pulumi.set(self, "custom_request_handling", value)


@pulumi.input_type
class WebAclCustomHttpHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTP header.
        """
        WebAclCustomHttpHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebAclCustomRequestHandlingArgs:
    def __init__(__self__, *,
                 insert_headers: pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]):
        """
        Custom request handling.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]] insert_headers: Collection of HTTP headers.
        """
        WebAclCustomRequestHandlingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            insert_headers=insert_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             insert_headers: pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("insert_headers", insert_headers)

    @property
    @pulumi.getter(name="insertHeaders")
    def insert_headers(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]:
        """
        Collection of HTTP headers.
        """
        return pulumi.get(self, "insert_headers")

    @insert_headers.setter
    def insert_headers(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]):
        pulumi.set(self, "insert_headers", value)


@pulumi.input_type
class WebAclCustomResponseBodiesArgs:
    def __init__(__self__):
        """
        Custom response key and body map.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WebAclCustomResponseArgs:
    def __init__(__self__, *,
                 response_code: pulumi.Input[int],
                 custom_response_body_key: Optional[pulumi.Input[str]] = None,
                 response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]] = None):
        """
        Custom response.
        :param pulumi.Input[str] custom_response_body_key: Custom response body key.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]] response_headers: Collection of HTTP headers.
        """
        WebAclCustomResponseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            response_code=response_code,
            custom_response_body_key=custom_response_body_key,
            response_headers=response_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             response_code: pulumi.Input[int],
             custom_response_body_key: Optional[pulumi.Input[str]] = None,
             response_headers: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("response_code", response_code)
        if custom_response_body_key is not None:
            _setter("custom_response_body_key", custom_response_body_key)
        if response_headers is not None:
            _setter("response_headers", response_headers)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)

    @property
    @pulumi.getter(name="customResponseBodyKey")
    def custom_response_body_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom response body key.
        """
        return pulumi.get(self, "custom_response_body_key")

    @custom_response_body_key.setter
    def custom_response_body_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_response_body_key", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]]:
        """
        Collection of HTTP headers.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclCustomHttpHeaderArgs']]]]):
        pulumi.set(self, "response_headers", value)


@pulumi.input_type
class WebAclDefaultActionArgs:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input['WebAclAllowActionArgs']] = None,
                 block: Optional[pulumi.Input['WebAclBlockActionArgs']] = None):
        """
        Default Action WebACL will take against ingress traffic when there is no matching Rule.
        """
        WebAclDefaultActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow=allow,
            block=block,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow: Optional[pulumi.Input['WebAclAllowActionArgs']] = None,
             block: Optional[pulumi.Input['WebAclBlockActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow is not None:
            _setter("allow", allow)
        if block is not None:
            _setter("block", block)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input['WebAclAllowActionArgs']]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input['WebAclAllowActionArgs']]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input['WebAclBlockActionArgs']]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input['WebAclBlockActionArgs']]):
        pulumi.set(self, "block", value)


@pulumi.input_type
class WebAclExcludedRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Excluded Rule in the RuleGroup or ManagedRuleGroup will not be evaluated.
        """
        WebAclExcludedRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebAclFieldIdentifierArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str]):
        WebAclFieldIdentifierArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("identifier", identifier)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)


@pulumi.input_type
class WebAclFieldToMatchSingleHeaderPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        WebAclFieldToMatchSingleHeaderPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebAclFieldToMatchSingleQueryArgumentPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        """
        WebAclFieldToMatchSingleQueryArgumentPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebAclFieldToMatchArgs:
    def __init__(__self__, *,
                 all_query_arguments: Optional[Any] = None,
                 body: Optional[pulumi.Input['WebAclBodyArgs']] = None,
                 cookies: Optional[pulumi.Input['WebAclCookiesArgs']] = None,
                 headers: Optional[pulumi.Input['WebAclHeadersArgs']] = None,
                 json_body: Optional[pulumi.Input['WebAclJsonBodyArgs']] = None,
                 method: Optional[Any] = None,
                 query_string: Optional[Any] = None,
                 single_header: Optional[pulumi.Input['WebAclFieldToMatchSingleHeaderPropertiesArgs']] = None,
                 single_query_argument: Optional[pulumi.Input['WebAclFieldToMatchSingleQueryArgumentPropertiesArgs']] = None,
                 uri_path: Optional[Any] = None):
        """
        Field of the request to match.
        :param Any all_query_arguments: All query arguments of a web request.
        :param Any method: The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
        :param Any query_string: The query string of a web request. This is the part of a URL that appears after a ? character, if any.
        :param pulumi.Input['WebAclFieldToMatchSingleQueryArgumentPropertiesArgs'] single_query_argument: One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        :param Any uri_path: The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        """
        WebAclFieldToMatchArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_query_arguments=all_query_arguments,
            body=body,
            cookies=cookies,
            headers=headers,
            json_body=json_body,
            method=method,
            query_string=query_string,
            single_header=single_header,
            single_query_argument=single_query_argument,
            uri_path=uri_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_query_arguments: Optional[Any] = None,
             body: Optional[pulumi.Input['WebAclBodyArgs']] = None,
             cookies: Optional[pulumi.Input['WebAclCookiesArgs']] = None,
             headers: Optional[pulumi.Input['WebAclHeadersArgs']] = None,
             json_body: Optional[pulumi.Input['WebAclJsonBodyArgs']] = None,
             method: Optional[Any] = None,
             query_string: Optional[Any] = None,
             single_header: Optional[pulumi.Input['WebAclFieldToMatchSingleHeaderPropertiesArgs']] = None,
             single_query_argument: Optional[pulumi.Input['WebAclFieldToMatchSingleQueryArgumentPropertiesArgs']] = None,
             uri_path: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_query_arguments is not None:
            _setter("all_query_arguments", all_query_arguments)
        if body is not None:
            _setter("body", body)
        if cookies is not None:
            _setter("cookies", cookies)
        if headers is not None:
            _setter("headers", headers)
        if json_body is not None:
            _setter("json_body", json_body)
        if method is not None:
            _setter("method", method)
        if query_string is not None:
            _setter("query_string", query_string)
        if single_header is not None:
            _setter("single_header", single_header)
        if single_query_argument is not None:
            _setter("single_query_argument", single_query_argument)
        if uri_path is not None:
            _setter("uri_path", uri_path)

    @property
    @pulumi.getter(name="allQueryArguments")
    def all_query_arguments(self) -> Optional[Any]:
        """
        All query arguments of a web request.
        """
        return pulumi.get(self, "all_query_arguments")

    @all_query_arguments.setter
    def all_query_arguments(self, value: Optional[Any]):
        pulumi.set(self, "all_query_arguments", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['WebAclBodyArgs']]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['WebAclBodyArgs']]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[pulumi.Input['WebAclCookiesArgs']]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[pulumi.Input['WebAclCookiesArgs']]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['WebAclHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['WebAclHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonBody")
    def json_body(self) -> Optional[pulumi.Input['WebAclJsonBodyArgs']]:
        return pulumi.get(self, "json_body")

    @json_body.setter
    def json_body(self, value: Optional[pulumi.Input['WebAclJsonBodyArgs']]):
        pulumi.set(self, "json_body", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[Any]:
        """
        The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[Any]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[Any]:
        """
        The query string of a web request. This is the part of a URL that appears after a ? character, if any.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[Any]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="singleHeader")
    def single_header(self) -> Optional[pulumi.Input['WebAclFieldToMatchSingleHeaderPropertiesArgs']]:
        return pulumi.get(self, "single_header")

    @single_header.setter
    def single_header(self, value: Optional[pulumi.Input['WebAclFieldToMatchSingleHeaderPropertiesArgs']]):
        pulumi.set(self, "single_header", value)

    @property
    @pulumi.getter(name="singleQueryArgument")
    def single_query_argument(self) -> Optional[pulumi.Input['WebAclFieldToMatchSingleQueryArgumentPropertiesArgs']]:
        """
        One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        """
        return pulumi.get(self, "single_query_argument")

    @single_query_argument.setter
    def single_query_argument(self, value: Optional[pulumi.Input['WebAclFieldToMatchSingleQueryArgumentPropertiesArgs']]):
        pulumi.set(self, "single_query_argument", value)

    @property
    @pulumi.getter(name="uriPath")
    def uri_path(self) -> Optional[Any]:
        """
        The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        """
        return pulumi.get(self, "uri_path")

    @uri_path.setter
    def uri_path(self, value: Optional[Any]):
        pulumi.set(self, "uri_path", value)


@pulumi.input_type
class WebAclForwardedIpConfigurationArgs:
    def __init__(__self__, *,
                 fallback_behavior: pulumi.Input['WebAclForwardedIpConfigurationFallbackBehavior'],
                 header_name: pulumi.Input[str]):
        WebAclForwardedIpConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_behavior=fallback_behavior,
            header_name=header_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_behavior: pulumi.Input['WebAclForwardedIpConfigurationFallbackBehavior'],
             header_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fallback_behavior", fallback_behavior)
        _setter("header_name", header_name)

    @property
    @pulumi.getter(name="fallbackBehavior")
    def fallback_behavior(self) -> pulumi.Input['WebAclForwardedIpConfigurationFallbackBehavior']:
        return pulumi.get(self, "fallback_behavior")

    @fallback_behavior.setter
    def fallback_behavior(self, value: pulumi.Input['WebAclForwardedIpConfigurationFallbackBehavior']):
        pulumi.set(self, "fallback_behavior", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class WebAclGeoMatchStatementArgs:
    def __init__(__self__, *,
                 country_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forwarded_ip_config: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']] = None):
        WebAclGeoMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country_codes=country_codes,
            forwarded_ip_config=forwarded_ip_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             forwarded_ip_config: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if country_codes is not None:
            _setter("country_codes", country_codes)
        if forwarded_ip_config is not None:
            _setter("forwarded_ip_config", forwarded_ip_config)

    @property
    @pulumi.getter(name="countryCodes")
    def country_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "country_codes")

    @country_codes.setter
    def country_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "country_codes", value)

    @property
    @pulumi.getter(name="forwardedIpConfig")
    def forwarded_ip_config(self) -> Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "forwarded_ip_config")

    @forwarded_ip_config.setter
    def forwarded_ip_config(self, value: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']]):
        pulumi.set(self, "forwarded_ip_config", value)


@pulumi.input_type
class WebAclHeaderMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 excluded_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the request headers.
        :param Any all: Inspect all parts of the web request headers.
        """
        WebAclHeaderMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            excluded_headers=excluded_headers,
            included_headers=included_headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             excluded_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             included_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if excluded_headers is not None:
            _setter("excluded_headers", excluded_headers)
        if included_headers is not None:
            _setter("included_headers", included_headers)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request headers.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="excludedHeaders")
    def excluded_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_headers")

    @excluded_headers.setter
    def excluded_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_headers", value)

    @property
    @pulumi.getter(name="includedHeaders")
    def included_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_headers")

    @included_headers.setter
    def included_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_headers", value)


@pulumi.input_type
class WebAclHeadersArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['WebAclHeaderMatchPatternArgs'],
                 match_scope: pulumi.Input['WebAclMapMatchScope'],
                 oversize_handling: pulumi.Input['WebAclOversizeHandling']):
        """
        Includes headers of a web request.
        """
        WebAclHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['WebAclHeaderMatchPatternArgs'],
             match_scope: pulumi.Input['WebAclMapMatchScope'],
             oversize_handling: pulumi.Input['WebAclOversizeHandling'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['WebAclHeaderMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['WebAclHeaderMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['WebAclMapMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['WebAclMapMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> pulumi.Input['WebAclOversizeHandling']:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: pulumi.Input['WebAclOversizeHandling']):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class WebAclImmunityTimePropertyArgs:
    def __init__(__self__, *,
                 immunity_time: pulumi.Input[int]):
        WebAclImmunityTimePropertyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            immunity_time=immunity_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             immunity_time: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("immunity_time", immunity_time)

    @property
    @pulumi.getter(name="immunityTime")
    def immunity_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "immunity_time")

    @immunity_time.setter
    def immunity_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "immunity_time", value)


@pulumi.input_type
class WebAclIpSetForwardedIpConfigurationArgs:
    def __init__(__self__, *,
                 fallback_behavior: pulumi.Input['WebAclIpSetForwardedIpConfigurationFallbackBehavior'],
                 header_name: pulumi.Input[str],
                 position: pulumi.Input['WebAclIpSetForwardedIpConfigurationPosition']):
        WebAclIpSetForwardedIpConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fallback_behavior=fallback_behavior,
            header_name=header_name,
            position=position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fallback_behavior: pulumi.Input['WebAclIpSetForwardedIpConfigurationFallbackBehavior'],
             header_name: pulumi.Input[str],
             position: pulumi.Input['WebAclIpSetForwardedIpConfigurationPosition'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fallback_behavior", fallback_behavior)
        _setter("header_name", header_name)
        _setter("position", position)

    @property
    @pulumi.getter(name="fallbackBehavior")
    def fallback_behavior(self) -> pulumi.Input['WebAclIpSetForwardedIpConfigurationFallbackBehavior']:
        return pulumi.get(self, "fallback_behavior")

    @fallback_behavior.setter
    def fallback_behavior(self, value: pulumi.Input['WebAclIpSetForwardedIpConfigurationFallbackBehavior']):
        pulumi.set(self, "fallback_behavior", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input['WebAclIpSetForwardedIpConfigurationPosition']:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input['WebAclIpSetForwardedIpConfigurationPosition']):
        pulumi.set(self, "position", value)


@pulumi.input_type
class WebAclIpSetReferenceStatementArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 ip_set_forwarded_ip_config: Optional[pulumi.Input['WebAclIpSetForwardedIpConfigurationArgs']] = None):
        WebAclIpSetReferenceStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            ip_set_forwarded_ip_config=ip_set_forwarded_ip_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             ip_set_forwarded_ip_config: Optional[pulumi.Input['WebAclIpSetForwardedIpConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        if ip_set_forwarded_ip_config is not None:
            _setter("ip_set_forwarded_ip_config", ip_set_forwarded_ip_config)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="ipSetForwardedIpConfig")
    def ip_set_forwarded_ip_config(self) -> Optional[pulumi.Input['WebAclIpSetForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "ip_set_forwarded_ip_config")

    @ip_set_forwarded_ip_config.setter
    def ip_set_forwarded_ip_config(self, value: Optional[pulumi.Input['WebAclIpSetForwardedIpConfigurationArgs']]):
        pulumi.set(self, "ip_set_forwarded_ip_config", value)


@pulumi.input_type
class WebAclJsonBodyArgs:
    def __init__(__self__, *,
                 match_pattern: pulumi.Input['WebAclJsonMatchPatternArgs'],
                 match_scope: pulumi.Input['WebAclJsonMatchScope'],
                 invalid_fallback_behavior: Optional[pulumi.Input['WebAclBodyParsingFallbackBehavior']] = None,
                 oversize_handling: Optional[pulumi.Input['WebAclOversizeHandling']] = None):
        """
        Inspect the request body as JSON. The request body immediately follows the request headers.
        """
        WebAclJsonBodyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_pattern=match_pattern,
            match_scope=match_scope,
            invalid_fallback_behavior=invalid_fallback_behavior,
            oversize_handling=oversize_handling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_pattern: pulumi.Input['WebAclJsonMatchPatternArgs'],
             match_scope: pulumi.Input['WebAclJsonMatchScope'],
             invalid_fallback_behavior: Optional[pulumi.Input['WebAclBodyParsingFallbackBehavior']] = None,
             oversize_handling: Optional[pulumi.Input['WebAclOversizeHandling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_pattern", match_pattern)
        _setter("match_scope", match_scope)
        if invalid_fallback_behavior is not None:
            _setter("invalid_fallback_behavior", invalid_fallback_behavior)
        if oversize_handling is not None:
            _setter("oversize_handling", oversize_handling)

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> pulumi.Input['WebAclJsonMatchPatternArgs']:
        return pulumi.get(self, "match_pattern")

    @match_pattern.setter
    def match_pattern(self, value: pulumi.Input['WebAclJsonMatchPatternArgs']):
        pulumi.set(self, "match_pattern", value)

    @property
    @pulumi.getter(name="matchScope")
    def match_scope(self) -> pulumi.Input['WebAclJsonMatchScope']:
        return pulumi.get(self, "match_scope")

    @match_scope.setter
    def match_scope(self, value: pulumi.Input['WebAclJsonMatchScope']):
        pulumi.set(self, "match_scope", value)

    @property
    @pulumi.getter(name="invalidFallbackBehavior")
    def invalid_fallback_behavior(self) -> Optional[pulumi.Input['WebAclBodyParsingFallbackBehavior']]:
        return pulumi.get(self, "invalid_fallback_behavior")

    @invalid_fallback_behavior.setter
    def invalid_fallback_behavior(self, value: Optional[pulumi.Input['WebAclBodyParsingFallbackBehavior']]):
        pulumi.set(self, "invalid_fallback_behavior", value)

    @property
    @pulumi.getter(name="oversizeHandling")
    def oversize_handling(self) -> Optional[pulumi.Input['WebAclOversizeHandling']]:
        return pulumi.get(self, "oversize_handling")

    @oversize_handling.setter
    def oversize_handling(self, value: Optional[pulumi.Input['WebAclOversizeHandling']]):
        pulumi.set(self, "oversize_handling", value)


@pulumi.input_type
class WebAclJsonMatchPatternArgs:
    def __init__(__self__, *,
                 all: Optional[Any] = None,
                 included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The pattern to look for in the JSON body.
        :param Any all: Inspect all parts of the web request's JSON body.
        """
        WebAclJsonMatchPatternArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all=all,
            included_paths=included_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all: Optional[Any] = None,
             included_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all is not None:
            _setter("all", all)
        if included_paths is not None:
            _setter("included_paths", included_paths)

    @property
    @pulumi.getter
    def all(self) -> Optional[Any]:
        """
        Inspect all parts of the web request's JSON body.
        """
        return pulumi.get(self, "all")

    @all.setter
    def all(self, value: Optional[Any]):
        pulumi.set(self, "all", value)

    @property
    @pulumi.getter(name="includedPaths")
    def included_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_paths")

    @included_paths.setter
    def included_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_paths", value)


@pulumi.input_type
class WebAclLabelMatchStatementArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 scope: pulumi.Input['WebAclLabelMatchScope']):
        WebAclLabelMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            scope=scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             scope: pulumi.Input['WebAclLabelMatchScope'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("scope", scope)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['WebAclLabelMatchScope']:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['WebAclLabelMatchScope']):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class WebAclLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        WebAclLabelArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebAclManagedRuleGroupConfigArgs:
    def __init__(__self__, *,
                 aws_managed_rules_acfp_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesAcfpRuleSetArgs']] = None,
                 aws_managed_rules_atp_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesAtpRuleSetArgs']] = None,
                 aws_managed_rules_bot_control_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetArgs']] = None,
                 login_path: Optional[pulumi.Input[str]] = None,
                 password_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
                 payload_type: Optional[pulumi.Input['WebAclManagedRuleGroupConfigPayloadType']] = None,
                 username_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None):
        """
        ManagedRuleGroupConfig.
        """
        WebAclManagedRuleGroupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_managed_rules_acfp_rule_set=aws_managed_rules_acfp_rule_set,
            aws_managed_rules_atp_rule_set=aws_managed_rules_atp_rule_set,
            aws_managed_rules_bot_control_rule_set=aws_managed_rules_bot_control_rule_set,
            login_path=login_path,
            password_field=password_field,
            payload_type=payload_type,
            username_field=username_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_managed_rules_acfp_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesAcfpRuleSetArgs']] = None,
             aws_managed_rules_atp_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesAtpRuleSetArgs']] = None,
             aws_managed_rules_bot_control_rule_set: Optional[pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetArgs']] = None,
             login_path: Optional[pulumi.Input[str]] = None,
             password_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
             payload_type: Optional[pulumi.Input['WebAclManagedRuleGroupConfigPayloadType']] = None,
             username_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_managed_rules_acfp_rule_set is not None:
            _setter("aws_managed_rules_acfp_rule_set", aws_managed_rules_acfp_rule_set)
        if aws_managed_rules_atp_rule_set is not None:
            _setter("aws_managed_rules_atp_rule_set", aws_managed_rules_atp_rule_set)
        if aws_managed_rules_bot_control_rule_set is not None:
            _setter("aws_managed_rules_bot_control_rule_set", aws_managed_rules_bot_control_rule_set)
        if login_path is not None:
            _setter("login_path", login_path)
        if password_field is not None:
            _setter("password_field", password_field)
        if payload_type is not None:
            _setter("payload_type", payload_type)
        if username_field is not None:
            _setter("username_field", username_field)

    @property
    @pulumi.getter(name="awsManagedRulesAcfpRuleSet")
    def aws_managed_rules_acfp_rule_set(self) -> Optional[pulumi.Input['WebAclAwsManagedRulesAcfpRuleSetArgs']]:
        return pulumi.get(self, "aws_managed_rules_acfp_rule_set")

    @aws_managed_rules_acfp_rule_set.setter
    def aws_managed_rules_acfp_rule_set(self, value: Optional[pulumi.Input['WebAclAwsManagedRulesAcfpRuleSetArgs']]):
        pulumi.set(self, "aws_managed_rules_acfp_rule_set", value)

    @property
    @pulumi.getter(name="awsManagedRulesAtpRuleSet")
    def aws_managed_rules_atp_rule_set(self) -> Optional[pulumi.Input['WebAclAwsManagedRulesAtpRuleSetArgs']]:
        return pulumi.get(self, "aws_managed_rules_atp_rule_set")

    @aws_managed_rules_atp_rule_set.setter
    def aws_managed_rules_atp_rule_set(self, value: Optional[pulumi.Input['WebAclAwsManagedRulesAtpRuleSetArgs']]):
        pulumi.set(self, "aws_managed_rules_atp_rule_set", value)

    @property
    @pulumi.getter(name="awsManagedRulesBotControlRuleSet")
    def aws_managed_rules_bot_control_rule_set(self) -> Optional[pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetArgs']]:
        return pulumi.get(self, "aws_managed_rules_bot_control_rule_set")

    @aws_managed_rules_bot_control_rule_set.setter
    def aws_managed_rules_bot_control_rule_set(self, value: Optional[pulumi.Input['WebAclAwsManagedRulesBotControlRuleSetArgs']]):
        pulumi.set(self, "aws_managed_rules_bot_control_rule_set", value)

    @property
    @pulumi.getter(name="loginPath")
    def login_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_path")

    @login_path.setter
    def login_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_path", value)

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> Optional[pulumi.Input['WebAclFieldIdentifierArgs']]:
        return pulumi.get(self, "password_field")

    @password_field.setter
    def password_field(self, value: Optional[pulumi.Input['WebAclFieldIdentifierArgs']]):
        pulumi.set(self, "password_field", value)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> Optional[pulumi.Input['WebAclManagedRuleGroupConfigPayloadType']]:
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: Optional[pulumi.Input['WebAclManagedRuleGroupConfigPayloadType']]):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter(name="usernameField")
    def username_field(self) -> Optional[pulumi.Input['WebAclFieldIdentifierArgs']]:
        return pulumi.get(self, "username_field")

    @username_field.setter
    def username_field(self, value: Optional[pulumi.Input['WebAclFieldIdentifierArgs']]):
        pulumi.set(self, "username_field", value)


@pulumi.input_type
class WebAclManagedRuleGroupStatementArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 vendor_name: pulumi.Input[str],
                 excluded_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]] = None,
                 managed_rule_group_configs: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclManagedRuleGroupConfigArgs']]]] = None,
                 rule_action_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]] = None,
                 scope_down_statement: Optional[pulumi.Input['WebAclStatementArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebAclManagedRuleGroupConfigArgs']]] managed_rule_group_configs: Collection of ManagedRuleGroupConfig.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]] rule_action_overrides: Action overrides for rules in the rule group.
        """
        WebAclManagedRuleGroupStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            vendor_name=vendor_name,
            excluded_rules=excluded_rules,
            managed_rule_group_configs=managed_rule_group_configs,
            rule_action_overrides=rule_action_overrides,
            scope_down_statement=scope_down_statement,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             vendor_name: pulumi.Input[str],
             excluded_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]] = None,
             managed_rule_group_configs: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclManagedRuleGroupConfigArgs']]]] = None,
             rule_action_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]] = None,
             scope_down_statement: Optional[pulumi.Input['WebAclStatementArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("vendor_name", vendor_name)
        if excluded_rules is not None:
            _setter("excluded_rules", excluded_rules)
        if managed_rule_group_configs is not None:
            _setter("managed_rule_group_configs", managed_rule_group_configs)
        if rule_action_overrides is not None:
            _setter("rule_action_overrides", rule_action_overrides)
        if scope_down_statement is not None:
            _setter("scope_down_statement", scope_down_statement)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vendor_name")

    @vendor_name.setter
    def vendor_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vendor_name", value)

    @property
    @pulumi.getter(name="excludedRules")
    def excluded_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]]:
        return pulumi.get(self, "excluded_rules")

    @excluded_rules.setter
    def excluded_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]]):
        pulumi.set(self, "excluded_rules", value)

    @property
    @pulumi.getter(name="managedRuleGroupConfigs")
    def managed_rule_group_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclManagedRuleGroupConfigArgs']]]]:
        """
        Collection of ManagedRuleGroupConfig.
        """
        return pulumi.get(self, "managed_rule_group_configs")

    @managed_rule_group_configs.setter
    def managed_rule_group_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclManagedRuleGroupConfigArgs']]]]):
        pulumi.set(self, "managed_rule_group_configs", value)

    @property
    @pulumi.getter(name="ruleActionOverrides")
    def rule_action_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]]:
        """
        Action overrides for rules in the rule group.
        """
        return pulumi.get(self, "rule_action_overrides")

    @rule_action_overrides.setter
    def rule_action_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]]):
        pulumi.set(self, "rule_action_overrides", value)

    @property
    @pulumi.getter(name="scopeDownStatement")
    def scope_down_statement(self) -> Optional[pulumi.Input['WebAclStatementArgs']]:
        return pulumi.get(self, "scope_down_statement")

    @scope_down_statement.setter
    def scope_down_statement(self, value: Optional[pulumi.Input['WebAclStatementArgs']]):
        pulumi.set(self, "scope_down_statement", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WebAclNotStatementArgs:
    def __init__(__self__, *,
                 statement: pulumi.Input['WebAclStatementArgs']):
        WebAclNotStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statement=statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statement: pulumi.Input['WebAclStatementArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statement", statement)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input['WebAclStatementArgs']:
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input['WebAclStatementArgs']):
        pulumi.set(self, "statement", value)


@pulumi.input_type
class WebAclOrStatementArgs:
    def __init__(__self__, *,
                 statements: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]):
        WebAclOrStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statements=statements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statements: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statements", statements)

    @property
    @pulumi.getter
    def statements(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]:
        return pulumi.get(self, "statements")

    @statements.setter
    def statements(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclStatementArgs']]]):
        pulumi.set(self, "statements", value)


@pulumi.input_type
class WebAclOverrideActionArgs:
    def __init__(__self__, *,
                 count: Optional[Any] = None,
                 none: Optional[Any] = None):
        """
        Override a RuleGroup or ManagedRuleGroup behavior. This can only be applied to Rule that has RuleGroupReferenceStatement or ManagedRuleGroupReferenceStatement.
        :param Any count: Count traffic towards application.
        :param Any none: Keep the RuleGroup or ManagedRuleGroup behavior as is.
        """
        WebAclOverrideActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            none=none,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[Any] = None,
             none: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if count is not None:
            _setter("count", count)
        if none is not None:
            _setter("none", none)

    @property
    @pulumi.getter
    def count(self) -> Optional[Any]:
        """
        Count traffic towards application.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[Any]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def none(self) -> Optional[Any]:
        """
        Keep the RuleGroup or ManagedRuleGroup behavior as is.
        """
        return pulumi.get(self, "none")

    @none.setter
    def none(self, value: Optional[Any]):
        pulumi.set(self, "none", value)


@pulumi.input_type
class WebAclRateBasedStatementCustomKeyArgs:
    def __init__(__self__, *,
                 cookie: Optional[pulumi.Input['WebAclRateLimitCookieArgs']] = None,
                 forwarded_ip: Optional[pulumi.Input['WebAclRateLimitForwardedIpArgs']] = None,
                 header: Optional[pulumi.Input['WebAclRateLimitHeaderArgs']] = None,
                 http_method: Optional[pulumi.Input['WebAclRateLimitHttpMethodArgs']] = None,
                 ip: Optional[pulumi.Input['WebAclRateLimitIpArgs']] = None,
                 label_namespace: Optional[pulumi.Input['WebAclRateLimitLabelNamespaceArgs']] = None,
                 query_argument: Optional[pulumi.Input['WebAclRateLimitQueryArgumentArgs']] = None,
                 query_string: Optional[pulumi.Input['WebAclRateLimitQueryStringArgs']] = None,
                 uri_path: Optional[pulumi.Input['WebAclRateLimitUriPathArgs']] = None):
        """
        Specifies a single custom aggregate key for a rate-base rule.
        """
        WebAclRateBasedStatementCustomKeyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie=cookie,
            forwarded_ip=forwarded_ip,
            header=header,
            http_method=http_method,
            ip=ip,
            label_namespace=label_namespace,
            query_argument=query_argument,
            query_string=query_string,
            uri_path=uri_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie: Optional[pulumi.Input['WebAclRateLimitCookieArgs']] = None,
             forwarded_ip: Optional[pulumi.Input['WebAclRateLimitForwardedIpArgs']] = None,
             header: Optional[pulumi.Input['WebAclRateLimitHeaderArgs']] = None,
             http_method: Optional[pulumi.Input['WebAclRateLimitHttpMethodArgs']] = None,
             ip: Optional[pulumi.Input['WebAclRateLimitIpArgs']] = None,
             label_namespace: Optional[pulumi.Input['WebAclRateLimitLabelNamespaceArgs']] = None,
             query_argument: Optional[pulumi.Input['WebAclRateLimitQueryArgumentArgs']] = None,
             query_string: Optional[pulumi.Input['WebAclRateLimitQueryStringArgs']] = None,
             uri_path: Optional[pulumi.Input['WebAclRateLimitUriPathArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cookie is not None:
            _setter("cookie", cookie)
        if forwarded_ip is not None:
            _setter("forwarded_ip", forwarded_ip)
        if header is not None:
            _setter("header", header)
        if http_method is not None:
            _setter("http_method", http_method)
        if ip is not None:
            _setter("ip", ip)
        if label_namespace is not None:
            _setter("label_namespace", label_namespace)
        if query_argument is not None:
            _setter("query_argument", query_argument)
        if query_string is not None:
            _setter("query_string", query_string)
        if uri_path is not None:
            _setter("uri_path", uri_path)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input['WebAclRateLimitCookieArgs']]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input['WebAclRateLimitCookieArgs']]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter(name="forwardedIp")
    def forwarded_ip(self) -> Optional[pulumi.Input['WebAclRateLimitForwardedIpArgs']]:
        return pulumi.get(self, "forwarded_ip")

    @forwarded_ip.setter
    def forwarded_ip(self, value: Optional[pulumi.Input['WebAclRateLimitForwardedIpArgs']]):
        pulumi.set(self, "forwarded_ip", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['WebAclRateLimitHeaderArgs']]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['WebAclRateLimitHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input['WebAclRateLimitHttpMethodArgs']]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input['WebAclRateLimitHttpMethodArgs']]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input['WebAclRateLimitIpArgs']]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input['WebAclRateLimitIpArgs']]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="labelNamespace")
    def label_namespace(self) -> Optional[pulumi.Input['WebAclRateLimitLabelNamespaceArgs']]:
        return pulumi.get(self, "label_namespace")

    @label_namespace.setter
    def label_namespace(self, value: Optional[pulumi.Input['WebAclRateLimitLabelNamespaceArgs']]):
        pulumi.set(self, "label_namespace", value)

    @property
    @pulumi.getter(name="queryArgument")
    def query_argument(self) -> Optional[pulumi.Input['WebAclRateLimitQueryArgumentArgs']]:
        return pulumi.get(self, "query_argument")

    @query_argument.setter
    def query_argument(self, value: Optional[pulumi.Input['WebAclRateLimitQueryArgumentArgs']]):
        pulumi.set(self, "query_argument", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['WebAclRateLimitQueryStringArgs']]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['WebAclRateLimitQueryStringArgs']]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="uriPath")
    def uri_path(self) -> Optional[pulumi.Input['WebAclRateLimitUriPathArgs']]:
        return pulumi.get(self, "uri_path")

    @uri_path.setter
    def uri_path(self, value: Optional[pulumi.Input['WebAclRateLimitUriPathArgs']]):
        pulumi.set(self, "uri_path", value)


@pulumi.input_type
class WebAclRateBasedStatementArgs:
    def __init__(__self__, *,
                 aggregate_key_type: pulumi.Input['WebAclRateBasedStatementAggregateKeyType'],
                 limit: pulumi.Input[int],
                 custom_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRateBasedStatementCustomKeyArgs']]]] = None,
                 forwarded_ip_config: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']] = None,
                 scope_down_statement: Optional[pulumi.Input['WebAclStatementArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebAclRateBasedStatementCustomKeyArgs']]] custom_keys: Specifies the aggregate keys to use in a rate-base rule.
        """
        WebAclRateBasedStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_key_type=aggregate_key_type,
            limit=limit,
            custom_keys=custom_keys,
            forwarded_ip_config=forwarded_ip_config,
            scope_down_statement=scope_down_statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_key_type: pulumi.Input['WebAclRateBasedStatementAggregateKeyType'],
             limit: pulumi.Input[int],
             custom_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRateBasedStatementCustomKeyArgs']]]] = None,
             forwarded_ip_config: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']] = None,
             scope_down_statement: Optional[pulumi.Input['WebAclStatementArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregate_key_type", aggregate_key_type)
        _setter("limit", limit)
        if custom_keys is not None:
            _setter("custom_keys", custom_keys)
        if forwarded_ip_config is not None:
            _setter("forwarded_ip_config", forwarded_ip_config)
        if scope_down_statement is not None:
            _setter("scope_down_statement", scope_down_statement)

    @property
    @pulumi.getter(name="aggregateKeyType")
    def aggregate_key_type(self) -> pulumi.Input['WebAclRateBasedStatementAggregateKeyType']:
        return pulumi.get(self, "aggregate_key_type")

    @aggregate_key_type.setter
    def aggregate_key_type(self, value: pulumi.Input['WebAclRateBasedStatementAggregateKeyType']):
        pulumi.set(self, "aggregate_key_type", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="customKeys")
    def custom_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRateBasedStatementCustomKeyArgs']]]]:
        """
        Specifies the aggregate keys to use in a rate-base rule.
        """
        return pulumi.get(self, "custom_keys")

    @custom_keys.setter
    def custom_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRateBasedStatementCustomKeyArgs']]]]):
        pulumi.set(self, "custom_keys", value)

    @property
    @pulumi.getter(name="forwardedIpConfig")
    def forwarded_ip_config(self) -> Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']]:
        return pulumi.get(self, "forwarded_ip_config")

    @forwarded_ip_config.setter
    def forwarded_ip_config(self, value: Optional[pulumi.Input['WebAclForwardedIpConfigurationArgs']]):
        pulumi.set(self, "forwarded_ip_config", value)

    @property
    @pulumi.getter(name="scopeDownStatement")
    def scope_down_statement(self) -> Optional[pulumi.Input['WebAclStatementArgs']]:
        return pulumi.get(self, "scope_down_statement")

    @scope_down_statement.setter
    def scope_down_statement(self, value: Optional[pulumi.Input['WebAclStatementArgs']]):
        pulumi.set(self, "scope_down_statement", value)


@pulumi.input_type
class WebAclRateLimitCookieArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Specifies a cookie as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the cookie to use.
        """
        WebAclRateLimitCookieArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the cookie to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRateLimitForwardedIpArgs:
    def __init__(__self__):
        """
        Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WebAclRateLimitHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Specifies a header as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the header to use.
        """
        WebAclRateLimitHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the header to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRateLimitHttpMethodArgs:
    def __init__(__self__):
        """
        Specifies the request's HTTP method as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WebAclRateLimitIpArgs:
    def __init__(__self__):
        """
        Specifies the IP address in the web request as an aggregate key for a rate-based rule.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WebAclRateLimitLabelNamespaceArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str]):
        """
        Specifies a label namespace to use as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] namespace: The namespace to use for aggregation.
        """
        WebAclRateLimitLabelNamespaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            namespace=namespace,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             namespace: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The namespace to use for aggregation.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class WebAclRateLimitQueryArgumentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Specifies a query argument in the request as an aggregate key for a rate-based rule.
        :param pulumi.Input[str] name: The name of the query argument to use.
        """
        WebAclRateLimitQueryArgumentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the query argument to use.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRateLimitQueryStringArgs:
    def __init__(__self__, *,
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Specifies the request's query string as an aggregate key for a rate-based rule.
        """
        WebAclRateLimitQueryStringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRateLimitUriPathArgs:
    def __init__(__self__, *,
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Specifies the request's URI Path as an aggregate key for a rate-based rule.
        """
        WebAclRateLimitUriPathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRegexMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 regex_string: pulumi.Input[str],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        WebAclRegexMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            regex_string=regex_string,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             regex_string: pulumi.Input[str],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("regex_string", regex_string)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="regexString")
    def regex_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex_string")

    @regex_string.setter
    def regex_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex_string", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRegexPatternSetReferenceStatementArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        WebAclRegexPatternSetReferenceStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            field_to_match=field_to_match,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclRequestBodyArgs:
    def __init__(__self__):
        """
        Map of AssociatedResourceType and RequestBodyAssociatedResourceTypeConfig
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class WebAclRequestInspectionAcfpArgs:
    def __init__(__self__, *,
                 payload_type: pulumi.Input['WebAclRequestInspectionAcfpPayloadType'],
                 address_fields: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]] = None,
                 email_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
                 password_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
                 phone_number_fields: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]] = None,
                 username_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None):
        """
        Configures the inspection of sign-up requests
        """
        WebAclRequestInspectionAcfpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            payload_type=payload_type,
            address_fields=address_fields,
            email_field=email_field,
            password_field=password_field,
            phone_number_fields=phone_number_fields,
            username_field=username_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             payload_type: pulumi.Input['WebAclRequestInspectionAcfpPayloadType'],
             address_fields: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]] = None,
             email_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
             password_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
             phone_number_fields: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]] = None,
             username_field: Optional[pulumi.Input['WebAclFieldIdentifierArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("payload_type", payload_type)
        if address_fields is not None:
            _setter("address_fields", address_fields)
        if email_field is not None:
            _setter("email_field", email_field)
        if password_field is not None:
            _setter("password_field", password_field)
        if phone_number_fields is not None:
            _setter("phone_number_fields", phone_number_fields)
        if username_field is not None:
            _setter("username_field", username_field)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> pulumi.Input['WebAclRequestInspectionAcfpPayloadType']:
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: pulumi.Input['WebAclRequestInspectionAcfpPayloadType']):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter(name="addressFields")
    def address_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]]:
        return pulumi.get(self, "address_fields")

    @address_fields.setter
    def address_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]]):
        pulumi.set(self, "address_fields", value)

    @property
    @pulumi.getter(name="emailField")
    def email_field(self) -> Optional[pulumi.Input['WebAclFieldIdentifierArgs']]:
        return pulumi.get(self, "email_field")

    @email_field.setter
    def email_field(self, value: Optional[pulumi.Input['WebAclFieldIdentifierArgs']]):
        pulumi.set(self, "email_field", value)

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> Optional[pulumi.Input['WebAclFieldIdentifierArgs']]:
        return pulumi.get(self, "password_field")

    @password_field.setter
    def password_field(self, value: Optional[pulumi.Input['WebAclFieldIdentifierArgs']]):
        pulumi.set(self, "password_field", value)

    @property
    @pulumi.getter(name="phoneNumberFields")
    def phone_number_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]]:
        return pulumi.get(self, "phone_number_fields")

    @phone_number_fields.setter
    def phone_number_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclFieldIdentifierArgs']]]]):
        pulumi.set(self, "phone_number_fields", value)

    @property
    @pulumi.getter(name="usernameField")
    def username_field(self) -> Optional[pulumi.Input['WebAclFieldIdentifierArgs']]:
        return pulumi.get(self, "username_field")

    @username_field.setter
    def username_field(self, value: Optional[pulumi.Input['WebAclFieldIdentifierArgs']]):
        pulumi.set(self, "username_field", value)


@pulumi.input_type
class WebAclRequestInspectionArgs:
    def __init__(__self__, *,
                 password_field: pulumi.Input['WebAclFieldIdentifierArgs'],
                 payload_type: pulumi.Input['WebAclRequestInspectionPayloadType'],
                 username_field: pulumi.Input['WebAclFieldIdentifierArgs']):
        """
        Configures the inspection of login requests
        """
        WebAclRequestInspectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password_field=password_field,
            payload_type=payload_type,
            username_field=username_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password_field: pulumi.Input['WebAclFieldIdentifierArgs'],
             payload_type: pulumi.Input['WebAclRequestInspectionPayloadType'],
             username_field: pulumi.Input['WebAclFieldIdentifierArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password_field", password_field)
        _setter("payload_type", payload_type)
        _setter("username_field", username_field)

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> pulumi.Input['WebAclFieldIdentifierArgs']:
        return pulumi.get(self, "password_field")

    @password_field.setter
    def password_field(self, value: pulumi.Input['WebAclFieldIdentifierArgs']):
        pulumi.set(self, "password_field", value)

    @property
    @pulumi.getter(name="payloadType")
    def payload_type(self) -> pulumi.Input['WebAclRequestInspectionPayloadType']:
        return pulumi.get(self, "payload_type")

    @payload_type.setter
    def payload_type(self, value: pulumi.Input['WebAclRequestInspectionPayloadType']):
        pulumi.set(self, "payload_type", value)

    @property
    @pulumi.getter(name="usernameField")
    def username_field(self) -> pulumi.Input['WebAclFieldIdentifierArgs']:
        return pulumi.get(self, "username_field")

    @username_field.setter
    def username_field(self, value: pulumi.Input['WebAclFieldIdentifierArgs']):
        pulumi.set(self, "username_field", value)


@pulumi.input_type
class WebAclResponseInspectionBodyContainsArgs:
    def __init__(__self__, *,
                 failure_strings: pulumi.Input[Sequence[pulumi.Input[str]]],
                 success_strings: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Response body contents that indicate success or failure of a login request
        """
        WebAclResponseInspectionBodyContainsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_strings=failure_strings,
            success_strings=success_strings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_strings: pulumi.Input[Sequence[pulumi.Input[str]]],
             success_strings: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_strings", failure_strings)
        _setter("success_strings", success_strings)

    @property
    @pulumi.getter(name="failureStrings")
    def failure_strings(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "failure_strings")

    @failure_strings.setter
    def failure_strings(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "failure_strings", value)

    @property
    @pulumi.getter(name="successStrings")
    def success_strings(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "success_strings")

    @success_strings.setter
    def success_strings(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "success_strings", value)


@pulumi.input_type
class WebAclResponseInspectionHeaderArgs:
    def __init__(__self__, *,
                 failure_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 success_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Response headers that indicate success or failure of a login request
        """
        WebAclResponseInspectionHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_values=failure_values,
            name=name,
            success_values=success_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             name: pulumi.Input[str],
             success_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_values", failure_values)
        _setter("name", name)
        _setter("success_values", success_values)

    @property
    @pulumi.getter(name="failureValues")
    def failure_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "failure_values")

    @failure_values.setter
    def failure_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "failure_values", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="successValues")
    def success_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "success_values")

    @success_values.setter
    def success_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "success_values", value)


@pulumi.input_type
class WebAclResponseInspectionJsonArgs:
    def __init__(__self__, *,
                 failure_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 identifier: pulumi.Input[str],
                 success_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        Response JSON that indicate success or failure of a login request
        """
        WebAclResponseInspectionJsonArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_values=failure_values,
            identifier=identifier,
            success_values=success_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             identifier: pulumi.Input[str],
             success_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_values", failure_values)
        _setter("identifier", identifier)
        _setter("success_values", success_values)

    @property
    @pulumi.getter(name="failureValues")
    def failure_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "failure_values")

    @failure_values.setter
    def failure_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "failure_values", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="successValues")
    def success_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "success_values")

    @success_values.setter
    def success_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "success_values", value)


@pulumi.input_type
class WebAclResponseInspectionStatusCodeArgs:
    def __init__(__self__, *,
                 failure_codes: pulumi.Input[Sequence[pulumi.Input[int]]],
                 success_codes: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        Response status codes that indicate success or failure of a login request
        """
        WebAclResponseInspectionStatusCodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_codes=failure_codes,
            success_codes=success_codes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_codes: pulumi.Input[Sequence[pulumi.Input[int]]],
             success_codes: pulumi.Input[Sequence[pulumi.Input[int]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("failure_codes", failure_codes)
        _setter("success_codes", success_codes)

    @property
    @pulumi.getter(name="failureCodes")
    def failure_codes(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "failure_codes")

    @failure_codes.setter
    def failure_codes(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "failure_codes", value)

    @property
    @pulumi.getter(name="successCodes")
    def success_codes(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "success_codes")

    @success_codes.setter
    def success_codes(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "success_codes", value)


@pulumi.input_type
class WebAclResponseInspectionArgs:
    def __init__(__self__, *,
                 body_contains: Optional[pulumi.Input['WebAclResponseInspectionBodyContainsArgs']] = None,
                 header: Optional[pulumi.Input['WebAclResponseInspectionHeaderArgs']] = None,
                 json: Optional[pulumi.Input['WebAclResponseInspectionJsonArgs']] = None,
                 status_code: Optional[pulumi.Input['WebAclResponseInspectionStatusCodeArgs']] = None):
        """
        Configures the inspection of login responses
        """
        WebAclResponseInspectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_contains=body_contains,
            header=header,
            json=json,
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_contains: Optional[pulumi.Input['WebAclResponseInspectionBodyContainsArgs']] = None,
             header: Optional[pulumi.Input['WebAclResponseInspectionHeaderArgs']] = None,
             json: Optional[pulumi.Input['WebAclResponseInspectionJsonArgs']] = None,
             status_code: Optional[pulumi.Input['WebAclResponseInspectionStatusCodeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body_contains is not None:
            _setter("body_contains", body_contains)
        if header is not None:
            _setter("header", header)
        if json is not None:
            _setter("json", json)
        if status_code is not None:
            _setter("status_code", status_code)

    @property
    @pulumi.getter(name="bodyContains")
    def body_contains(self) -> Optional[pulumi.Input['WebAclResponseInspectionBodyContainsArgs']]:
        return pulumi.get(self, "body_contains")

    @body_contains.setter
    def body_contains(self, value: Optional[pulumi.Input['WebAclResponseInspectionBodyContainsArgs']]):
        pulumi.set(self, "body_contains", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['WebAclResponseInspectionHeaderArgs']]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['WebAclResponseInspectionHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['WebAclResponseInspectionJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['WebAclResponseInspectionJsonArgs']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input['WebAclResponseInspectionStatusCodeArgs']]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input['WebAclResponseInspectionStatusCodeArgs']]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class WebAclRuleActionOverrideArgs:
    def __init__(__self__, *,
                 action_to_use: pulumi.Input['WebAclRuleActionArgs'],
                 name: pulumi.Input[str]):
        """
        Action override for rules in the rule group.
        """
        WebAclRuleActionOverrideArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_to_use=action_to_use,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_to_use: pulumi.Input['WebAclRuleActionArgs'],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_to_use", action_to_use)
        _setter("name", name)

    @property
    @pulumi.getter(name="actionToUse")
    def action_to_use(self) -> pulumi.Input['WebAclRuleActionArgs']:
        return pulumi.get(self, "action_to_use")

    @action_to_use.setter
    def action_to_use(self, value: pulumi.Input['WebAclRuleActionArgs']):
        pulumi.set(self, "action_to_use", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebAclRuleActionArgs:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input['WebAclAllowActionArgs']] = None,
                 block: Optional[pulumi.Input['WebAclBlockActionArgs']] = None,
                 captcha: Optional[pulumi.Input['WebAclCaptchaActionArgs']] = None,
                 challenge: Optional[pulumi.Input['WebAclChallengeActionArgs']] = None,
                 count: Optional[pulumi.Input['WebAclCountActionArgs']] = None):
        """
        Action taken when Rule matches its condition.
        """
        WebAclRuleActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow=allow,
            block=block,
            captcha=captcha,
            challenge=challenge,
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow: Optional[pulumi.Input['WebAclAllowActionArgs']] = None,
             block: Optional[pulumi.Input['WebAclBlockActionArgs']] = None,
             captcha: Optional[pulumi.Input['WebAclCaptchaActionArgs']] = None,
             challenge: Optional[pulumi.Input['WebAclChallengeActionArgs']] = None,
             count: Optional[pulumi.Input['WebAclCountActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow is not None:
            _setter("allow", allow)
        if block is not None:
            _setter("block", block)
        if captcha is not None:
            _setter("captcha", captcha)
        if challenge is not None:
            _setter("challenge", challenge)
        if count is not None:
            _setter("count", count)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input['WebAclAllowActionArgs']]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input['WebAclAllowActionArgs']]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input['WebAclBlockActionArgs']]:
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input['WebAclBlockActionArgs']]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter
    def captcha(self) -> Optional[pulumi.Input['WebAclCaptchaActionArgs']]:
        return pulumi.get(self, "captcha")

    @captcha.setter
    def captcha(self, value: Optional[pulumi.Input['WebAclCaptchaActionArgs']]):
        pulumi.set(self, "captcha", value)

    @property
    @pulumi.getter
    def challenge(self) -> Optional[pulumi.Input['WebAclChallengeActionArgs']]:
        return pulumi.get(self, "challenge")

    @challenge.setter
    def challenge(self, value: Optional[pulumi.Input['WebAclChallengeActionArgs']]):
        pulumi.set(self, "challenge", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input['WebAclCountActionArgs']]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input['WebAclCountActionArgs']]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class WebAclRuleGroupReferenceStatementArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 excluded_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]] = None,
                 rule_action_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]] rule_action_overrides: Action overrides for rules in the rule group.
        """
        WebAclRuleGroupReferenceStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            excluded_rules=excluded_rules,
            rule_action_overrides=rule_action_overrides,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             excluded_rules: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]] = None,
             rule_action_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        if excluded_rules is not None:
            _setter("excluded_rules", excluded_rules)
        if rule_action_overrides is not None:
            _setter("rule_action_overrides", rule_action_overrides)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="excludedRules")
    def excluded_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]]:
        return pulumi.get(self, "excluded_rules")

    @excluded_rules.setter
    def excluded_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclExcludedRuleArgs']]]]):
        pulumi.set(self, "excluded_rules", value)

    @property
    @pulumi.getter(name="ruleActionOverrides")
    def rule_action_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]]:
        """
        Action overrides for rules in the rule group.
        """
        return pulumi.get(self, "rule_action_overrides")

    @rule_action_overrides.setter
    def rule_action_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclRuleActionOverrideArgs']]]]):
        pulumi.set(self, "rule_action_overrides", value)


@pulumi.input_type
class WebAclRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 statement: pulumi.Input['WebAclStatementArgs'],
                 visibility_config: pulumi.Input['WebAclVisibilityConfigArgs'],
                 action: Optional[pulumi.Input['WebAclRuleActionArgs']] = None,
                 captcha_config: Optional[pulumi.Input['WebAclCaptchaConfigArgs']] = None,
                 challenge_config: Optional[pulumi.Input['WebAclChallengeConfigArgs']] = None,
                 override_action: Optional[pulumi.Input['WebAclOverrideActionArgs']] = None,
                 rule_labels: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclLabelArgs']]]] = None):
        """
        Rule of WebACL that contains condition and action.
        :param pulumi.Input[Sequence[pulumi.Input['WebAclLabelArgs']]] rule_labels: Collection of Rule Labels.
        """
        WebAclRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            priority=priority,
            statement=statement,
            visibility_config=visibility_config,
            action=action,
            captcha_config=captcha_config,
            challenge_config=challenge_config,
            override_action=override_action,
            rule_labels=rule_labels,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             priority: pulumi.Input[int],
             statement: pulumi.Input['WebAclStatementArgs'],
             visibility_config: pulumi.Input['WebAclVisibilityConfigArgs'],
             action: Optional[pulumi.Input['WebAclRuleActionArgs']] = None,
             captcha_config: Optional[pulumi.Input['WebAclCaptchaConfigArgs']] = None,
             challenge_config: Optional[pulumi.Input['WebAclChallengeConfigArgs']] = None,
             override_action: Optional[pulumi.Input['WebAclOverrideActionArgs']] = None,
             rule_labels: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclLabelArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("priority", priority)
        _setter("statement", statement)
        _setter("visibility_config", visibility_config)
        if action is not None:
            _setter("action", action)
        if captcha_config is not None:
            _setter("captcha_config", captcha_config)
        if challenge_config is not None:
            _setter("challenge_config", challenge_config)
        if override_action is not None:
            _setter("override_action", override_action)
        if rule_labels is not None:
            _setter("rule_labels", rule_labels)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def statement(self) -> pulumi.Input['WebAclStatementArgs']:
        return pulumi.get(self, "statement")

    @statement.setter
    def statement(self, value: pulumi.Input['WebAclStatementArgs']):
        pulumi.set(self, "statement", value)

    @property
    @pulumi.getter(name="visibilityConfig")
    def visibility_config(self) -> pulumi.Input['WebAclVisibilityConfigArgs']:
        return pulumi.get(self, "visibility_config")

    @visibility_config.setter
    def visibility_config(self, value: pulumi.Input['WebAclVisibilityConfigArgs']):
        pulumi.set(self, "visibility_config", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['WebAclRuleActionArgs']]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['WebAclRuleActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="captchaConfig")
    def captcha_config(self) -> Optional[pulumi.Input['WebAclCaptchaConfigArgs']]:
        return pulumi.get(self, "captcha_config")

    @captcha_config.setter
    def captcha_config(self, value: Optional[pulumi.Input['WebAclCaptchaConfigArgs']]):
        pulumi.set(self, "captcha_config", value)

    @property
    @pulumi.getter(name="challengeConfig")
    def challenge_config(self) -> Optional[pulumi.Input['WebAclChallengeConfigArgs']]:
        return pulumi.get(self, "challenge_config")

    @challenge_config.setter
    def challenge_config(self, value: Optional[pulumi.Input['WebAclChallengeConfigArgs']]):
        pulumi.set(self, "challenge_config", value)

    @property
    @pulumi.getter(name="overrideAction")
    def override_action(self) -> Optional[pulumi.Input['WebAclOverrideActionArgs']]:
        return pulumi.get(self, "override_action")

    @override_action.setter
    def override_action(self, value: Optional[pulumi.Input['WebAclOverrideActionArgs']]):
        pulumi.set(self, "override_action", value)

    @property
    @pulumi.getter(name="ruleLabels")
    def rule_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebAclLabelArgs']]]]:
        """
        Collection of Rule Labels.
        """
        return pulumi.get(self, "rule_labels")

    @rule_labels.setter
    def rule_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebAclLabelArgs']]]]):
        pulumi.set(self, "rule_labels", value)


@pulumi.input_type
class WebAclSizeConstraintStatementArgs:
    def __init__(__self__, *,
                 comparison_operator: pulumi.Input['WebAclSizeConstraintStatementComparisonOperator'],
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 size: pulumi.Input[float],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Size Constraint statement.
        """
        WebAclSizeConstraintStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_operator=comparison_operator,
            field_to_match=field_to_match,
            size=size,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_operator: pulumi.Input['WebAclSizeConstraintStatementComparisonOperator'],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             size: pulumi.Input[float],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comparison_operator", comparison_operator)
        _setter("field_to_match", field_to_match)
        _setter("size", size)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Input['WebAclSizeConstraintStatementComparisonOperator']:
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: pulumi.Input['WebAclSizeConstraintStatementComparisonOperator']):
        pulumi.set(self, "comparison_operator", value)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[float]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


@pulumi.input_type
class WebAclSqliMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
                 sensitivity_level: Optional[pulumi.Input['WebAclSensitivityLevel']] = None):
        """
        Sqli Match Statement.
        """
        WebAclSqliMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformations=text_transformations,
            sensitivity_level=sensitivity_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             sensitivity_level: Optional[pulumi.Input['WebAclSensitivityLevel']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)
        if sensitivity_level is not None:
            _setter("sensitivity_level", sensitivity_level)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)

    @property
    @pulumi.getter(name="sensitivityLevel")
    def sensitivity_level(self) -> Optional[pulumi.Input['WebAclSensitivityLevel']]:
        return pulumi.get(self, "sensitivity_level")

    @sensitivity_level.setter
    def sensitivity_level(self, value: Optional[pulumi.Input['WebAclSensitivityLevel']]):
        pulumi.set(self, "sensitivity_level", value)


@pulumi.input_type
class WebAclStatementArgs:
    def __init__(__self__, *,
                 and_statement: Optional[pulumi.Input['WebAclAndStatementArgs']] = None,
                 byte_match_statement: Optional[pulumi.Input['WebAclByteMatchStatementArgs']] = None,
                 geo_match_statement: Optional[pulumi.Input['WebAclGeoMatchStatementArgs']] = None,
                 ip_set_reference_statement: Optional[pulumi.Input['WebAclIpSetReferenceStatementArgs']] = None,
                 label_match_statement: Optional[pulumi.Input['WebAclLabelMatchStatementArgs']] = None,
                 managed_rule_group_statement: Optional[pulumi.Input['WebAclManagedRuleGroupStatementArgs']] = None,
                 not_statement: Optional[pulumi.Input['WebAclNotStatementArgs']] = None,
                 or_statement: Optional[pulumi.Input['WebAclOrStatementArgs']] = None,
                 rate_based_statement: Optional[pulumi.Input['WebAclRateBasedStatementArgs']] = None,
                 regex_match_statement: Optional[pulumi.Input['WebAclRegexMatchStatementArgs']] = None,
                 regex_pattern_set_reference_statement: Optional[pulumi.Input['WebAclRegexPatternSetReferenceStatementArgs']] = None,
                 rule_group_reference_statement: Optional[pulumi.Input['WebAclRuleGroupReferenceStatementArgs']] = None,
                 size_constraint_statement: Optional[pulumi.Input['WebAclSizeConstraintStatementArgs']] = None,
                 sqli_match_statement: Optional[pulumi.Input['WebAclSqliMatchStatementArgs']] = None,
                 xss_match_statement: Optional[pulumi.Input['WebAclXssMatchStatementArgs']] = None):
        """
        First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
        """
        WebAclStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            and_statement=and_statement,
            byte_match_statement=byte_match_statement,
            geo_match_statement=geo_match_statement,
            ip_set_reference_statement=ip_set_reference_statement,
            label_match_statement=label_match_statement,
            managed_rule_group_statement=managed_rule_group_statement,
            not_statement=not_statement,
            or_statement=or_statement,
            rate_based_statement=rate_based_statement,
            regex_match_statement=regex_match_statement,
            regex_pattern_set_reference_statement=regex_pattern_set_reference_statement,
            rule_group_reference_statement=rule_group_reference_statement,
            size_constraint_statement=size_constraint_statement,
            sqli_match_statement=sqli_match_statement,
            xss_match_statement=xss_match_statement,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             and_statement: Optional[pulumi.Input['WebAclAndStatementArgs']] = None,
             byte_match_statement: Optional[pulumi.Input['WebAclByteMatchStatementArgs']] = None,
             geo_match_statement: Optional[pulumi.Input['WebAclGeoMatchStatementArgs']] = None,
             ip_set_reference_statement: Optional[pulumi.Input['WebAclIpSetReferenceStatementArgs']] = None,
             label_match_statement: Optional[pulumi.Input['WebAclLabelMatchStatementArgs']] = None,
             managed_rule_group_statement: Optional[pulumi.Input['WebAclManagedRuleGroupStatementArgs']] = None,
             not_statement: Optional[pulumi.Input['WebAclNotStatementArgs']] = None,
             or_statement: Optional[pulumi.Input['WebAclOrStatementArgs']] = None,
             rate_based_statement: Optional[pulumi.Input['WebAclRateBasedStatementArgs']] = None,
             regex_match_statement: Optional[pulumi.Input['WebAclRegexMatchStatementArgs']] = None,
             regex_pattern_set_reference_statement: Optional[pulumi.Input['WebAclRegexPatternSetReferenceStatementArgs']] = None,
             rule_group_reference_statement: Optional[pulumi.Input['WebAclRuleGroupReferenceStatementArgs']] = None,
             size_constraint_statement: Optional[pulumi.Input['WebAclSizeConstraintStatementArgs']] = None,
             sqli_match_statement: Optional[pulumi.Input['WebAclSqliMatchStatementArgs']] = None,
             xss_match_statement: Optional[pulumi.Input['WebAclXssMatchStatementArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if and_statement is not None:
            _setter("and_statement", and_statement)
        if byte_match_statement is not None:
            _setter("byte_match_statement", byte_match_statement)
        if geo_match_statement is not None:
            _setter("geo_match_statement", geo_match_statement)
        if ip_set_reference_statement is not None:
            _setter("ip_set_reference_statement", ip_set_reference_statement)
        if label_match_statement is not None:
            _setter("label_match_statement", label_match_statement)
        if managed_rule_group_statement is not None:
            _setter("managed_rule_group_statement", managed_rule_group_statement)
        if not_statement is not None:
            _setter("not_statement", not_statement)
        if or_statement is not None:
            _setter("or_statement", or_statement)
        if rate_based_statement is not None:
            _setter("rate_based_statement", rate_based_statement)
        if regex_match_statement is not None:
            _setter("regex_match_statement", regex_match_statement)
        if regex_pattern_set_reference_statement is not None:
            _setter("regex_pattern_set_reference_statement", regex_pattern_set_reference_statement)
        if rule_group_reference_statement is not None:
            _setter("rule_group_reference_statement", rule_group_reference_statement)
        if size_constraint_statement is not None:
            _setter("size_constraint_statement", size_constraint_statement)
        if sqli_match_statement is not None:
            _setter("sqli_match_statement", sqli_match_statement)
        if xss_match_statement is not None:
            _setter("xss_match_statement", xss_match_statement)

    @property
    @pulumi.getter(name="andStatement")
    def and_statement(self) -> Optional[pulumi.Input['WebAclAndStatementArgs']]:
        return pulumi.get(self, "and_statement")

    @and_statement.setter
    def and_statement(self, value: Optional[pulumi.Input['WebAclAndStatementArgs']]):
        pulumi.set(self, "and_statement", value)

    @property
    @pulumi.getter(name="byteMatchStatement")
    def byte_match_statement(self) -> Optional[pulumi.Input['WebAclByteMatchStatementArgs']]:
        return pulumi.get(self, "byte_match_statement")

    @byte_match_statement.setter
    def byte_match_statement(self, value: Optional[pulumi.Input['WebAclByteMatchStatementArgs']]):
        pulumi.set(self, "byte_match_statement", value)

    @property
    @pulumi.getter(name="geoMatchStatement")
    def geo_match_statement(self) -> Optional[pulumi.Input['WebAclGeoMatchStatementArgs']]:
        return pulumi.get(self, "geo_match_statement")

    @geo_match_statement.setter
    def geo_match_statement(self, value: Optional[pulumi.Input['WebAclGeoMatchStatementArgs']]):
        pulumi.set(self, "geo_match_statement", value)

    @property
    @pulumi.getter(name="ipSetReferenceStatement")
    def ip_set_reference_statement(self) -> Optional[pulumi.Input['WebAclIpSetReferenceStatementArgs']]:
        return pulumi.get(self, "ip_set_reference_statement")

    @ip_set_reference_statement.setter
    def ip_set_reference_statement(self, value: Optional[pulumi.Input['WebAclIpSetReferenceStatementArgs']]):
        pulumi.set(self, "ip_set_reference_statement", value)

    @property
    @pulumi.getter(name="labelMatchStatement")
    def label_match_statement(self) -> Optional[pulumi.Input['WebAclLabelMatchStatementArgs']]:
        return pulumi.get(self, "label_match_statement")

    @label_match_statement.setter
    def label_match_statement(self, value: Optional[pulumi.Input['WebAclLabelMatchStatementArgs']]):
        pulumi.set(self, "label_match_statement", value)

    @property
    @pulumi.getter(name="managedRuleGroupStatement")
    def managed_rule_group_statement(self) -> Optional[pulumi.Input['WebAclManagedRuleGroupStatementArgs']]:
        return pulumi.get(self, "managed_rule_group_statement")

    @managed_rule_group_statement.setter
    def managed_rule_group_statement(self, value: Optional[pulumi.Input['WebAclManagedRuleGroupStatementArgs']]):
        pulumi.set(self, "managed_rule_group_statement", value)

    @property
    @pulumi.getter(name="notStatement")
    def not_statement(self) -> Optional[pulumi.Input['WebAclNotStatementArgs']]:
        return pulumi.get(self, "not_statement")

    @not_statement.setter
    def not_statement(self, value: Optional[pulumi.Input['WebAclNotStatementArgs']]):
        pulumi.set(self, "not_statement", value)

    @property
    @pulumi.getter(name="orStatement")
    def or_statement(self) -> Optional[pulumi.Input['WebAclOrStatementArgs']]:
        return pulumi.get(self, "or_statement")

    @or_statement.setter
    def or_statement(self, value: Optional[pulumi.Input['WebAclOrStatementArgs']]):
        pulumi.set(self, "or_statement", value)

    @property
    @pulumi.getter(name="rateBasedStatement")
    def rate_based_statement(self) -> Optional[pulumi.Input['WebAclRateBasedStatementArgs']]:
        return pulumi.get(self, "rate_based_statement")

    @rate_based_statement.setter
    def rate_based_statement(self, value: Optional[pulumi.Input['WebAclRateBasedStatementArgs']]):
        pulumi.set(self, "rate_based_statement", value)

    @property
    @pulumi.getter(name="regexMatchStatement")
    def regex_match_statement(self) -> Optional[pulumi.Input['WebAclRegexMatchStatementArgs']]:
        return pulumi.get(self, "regex_match_statement")

    @regex_match_statement.setter
    def regex_match_statement(self, value: Optional[pulumi.Input['WebAclRegexMatchStatementArgs']]):
        pulumi.set(self, "regex_match_statement", value)

    @property
    @pulumi.getter(name="regexPatternSetReferenceStatement")
    def regex_pattern_set_reference_statement(self) -> Optional[pulumi.Input['WebAclRegexPatternSetReferenceStatementArgs']]:
        return pulumi.get(self, "regex_pattern_set_reference_statement")

    @regex_pattern_set_reference_statement.setter
    def regex_pattern_set_reference_statement(self, value: Optional[pulumi.Input['WebAclRegexPatternSetReferenceStatementArgs']]):
        pulumi.set(self, "regex_pattern_set_reference_statement", value)

    @property
    @pulumi.getter(name="ruleGroupReferenceStatement")
    def rule_group_reference_statement(self) -> Optional[pulumi.Input['WebAclRuleGroupReferenceStatementArgs']]:
        return pulumi.get(self, "rule_group_reference_statement")

    @rule_group_reference_statement.setter
    def rule_group_reference_statement(self, value: Optional[pulumi.Input['WebAclRuleGroupReferenceStatementArgs']]):
        pulumi.set(self, "rule_group_reference_statement", value)

    @property
    @pulumi.getter(name="sizeConstraintStatement")
    def size_constraint_statement(self) -> Optional[pulumi.Input['WebAclSizeConstraintStatementArgs']]:
        return pulumi.get(self, "size_constraint_statement")

    @size_constraint_statement.setter
    def size_constraint_statement(self, value: Optional[pulumi.Input['WebAclSizeConstraintStatementArgs']]):
        pulumi.set(self, "size_constraint_statement", value)

    @property
    @pulumi.getter(name="sqliMatchStatement")
    def sqli_match_statement(self) -> Optional[pulumi.Input['WebAclSqliMatchStatementArgs']]:
        return pulumi.get(self, "sqli_match_statement")

    @sqli_match_statement.setter
    def sqli_match_statement(self, value: Optional[pulumi.Input['WebAclSqliMatchStatementArgs']]):
        pulumi.set(self, "sqli_match_statement", value)

    @property
    @pulumi.getter(name="xssMatchStatement")
    def xss_match_statement(self) -> Optional[pulumi.Input['WebAclXssMatchStatementArgs']]:
        return pulumi.get(self, "xss_match_statement")

    @xss_match_statement.setter
    def xss_match_statement(self, value: Optional[pulumi.Input['WebAclXssMatchStatementArgs']]):
        pulumi.set(self, "xss_match_statement", value)


@pulumi.input_type
class WebAclTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        WebAclTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebAclTextTransformationArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 type: pulumi.Input['WebAclTextTransformationType']):
        """
        Text Transformation on the Search String before match.
        """
        WebAclTextTransformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: pulumi.Input[int],
             type: pulumi.Input['WebAclTextTransformationType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("priority", priority)
        _setter("type", type)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['WebAclTextTransformationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['WebAclTextTransformationType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WebAclVisibilityConfigArgs:
    def __init__(__self__, *,
                 cloud_watch_metrics_enabled: pulumi.Input[bool],
                 metric_name: pulumi.Input[str],
                 sampled_requests_enabled: pulumi.Input[bool]):
        """
        Visibility Metric of the WebACL.
        """
        WebAclVisibilityConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_metrics_enabled=cloud_watch_metrics_enabled,
            metric_name=metric_name,
            sampled_requests_enabled=sampled_requests_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_metrics_enabled: pulumi.Input[bool],
             metric_name: pulumi.Input[str],
             sampled_requests_enabled: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cloud_watch_metrics_enabled", cloud_watch_metrics_enabled)
        _setter("metric_name", metric_name)
        _setter("sampled_requests_enabled", sampled_requests_enabled)

    @property
    @pulumi.getter(name="cloudWatchMetricsEnabled")
    def cloud_watch_metrics_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "cloud_watch_metrics_enabled")

    @cloud_watch_metrics_enabled.setter
    def cloud_watch_metrics_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "cloud_watch_metrics_enabled", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter(name="sampledRequestsEnabled")
    def sampled_requests_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sampled_requests_enabled")

    @sampled_requests_enabled.setter
    def sampled_requests_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sampled_requests_enabled", value)


@pulumi.input_type
class WebAclXssMatchStatementArgs:
    def __init__(__self__, *,
                 field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
                 text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        """
        Xss Match Statement.
        """
        WebAclXssMatchStatementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformations=text_transformations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: pulumi.Input['WebAclFieldToMatchArgs'],
             text_transformations: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformations", text_transformations)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> pulumi.Input['WebAclFieldToMatchArgs']:
        return pulumi.get(self, "field_to_match")

    @field_to_match.setter
    def field_to_match(self, value: pulumi.Input['WebAclFieldToMatchArgs']):
        pulumi.set(self, "field_to_match", value)

    @property
    @pulumi.getter(name="textTransformations")
    def text_transformations(self) -> pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]:
        return pulumi.get(self, "text_transformations")

    @text_transformations.setter
    def text_transformations(self, value: pulumi.Input[Sequence[pulumi.Input['WebAclTextTransformationArgs']]]):
        pulumi.set(self, "text_transformations", value)


