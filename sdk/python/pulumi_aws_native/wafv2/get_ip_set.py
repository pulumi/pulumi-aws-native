# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetIPSetResult',
    'AwaitableGetIPSetResult',
    'get_ip_set',
    'get_ip_set_output',
]

@pulumi.output_type
class GetIPSetResult:
    def __init__(__self__, addresses=None, arn=None, description=None, i_p_address_version=None, id=None, tags=None):
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if i_p_address_version and not isinstance(i_p_address_version, str):
            raise TypeError("Expected argument 'i_p_address_version' to be a str")
        pulumi.set(__self__, "i_p_address_version", i_p_address_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        """
        List of IPAddresses.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iPAddressVersion")
    def i_p_address_version(self) -> Optional['IPSetIPAddressVersion']:
        return pulumi.get(self, "i_p_address_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.IPSetTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetIPSetResult(GetIPSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIPSetResult(
            addresses=self.addresses,
            arn=self.arn,
            description=self.description,
            i_p_address_version=self.i_p_address_version,
            id=self.id,
            tags=self.tags)


def get_ip_set(id: Optional[str] = None,
               name: Optional[str] = None,
               scope: Optional['IPSetScope'] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIPSetResult:
    """
    Contains a list of IP addresses. This can be either IPV4 or IPV6. The list will be mutually
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:wafv2:getIPSet', __args__, opts=opts, typ=GetIPSetResult).value

    return AwaitableGetIPSetResult(
        addresses=__ret__.addresses,
        arn=__ret__.arn,
        description=__ret__.description,
        i_p_address_version=__ret__.i_p_address_version,
        id=__ret__.id,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_ip_set)
def get_ip_set_output(id: Optional[pulumi.Input[str]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      scope: Optional[pulumi.Input['IPSetScope']] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIPSetResult]:
    """
    Contains a list of IP addresses. This can be either IPV4 or IPV6. The list will be mutually
    """
    ...
