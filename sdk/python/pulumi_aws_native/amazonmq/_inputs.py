# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'BrokerConfigurationIdArgs',
    'BrokerConfigurationIdArgsDict',
    'BrokerEncryptionOptionsArgs',
    'BrokerEncryptionOptionsArgsDict',
    'BrokerLdapServerMetadataArgs',
    'BrokerLdapServerMetadataArgsDict',
    'BrokerLogListArgs',
    'BrokerLogListArgsDict',
    'BrokerMaintenanceWindowArgs',
    'BrokerMaintenanceWindowArgsDict',
    'BrokerUserArgs',
    'BrokerUserArgsDict',
]

MYPY = False

if not MYPY:
    class BrokerConfigurationIdArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Required. The unique ID that Amazon MQ generates for the configuration.
        """
        revision: pulumi.Input[_builtins.int]
        """
        The revision number of the configuration.
        """
elif False:
    BrokerConfigurationIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerConfigurationIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 revision: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.str] id: Required. The unique ID that Amazon MQ generates for the configuration.
        :param pulumi.Input[_builtins.int] revision: The revision number of the configuration.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "revision", revision)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Required. The unique ID that Amazon MQ generates for the configuration.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def revision(self) -> pulumi.Input[_builtins.int]:
        """
        The revision number of the configuration.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "revision", value)


if not MYPY:
    class BrokerEncryptionOptionsArgsDict(TypedDict):
        use_aws_owned_key: pulumi.Input[_builtins.bool]
        """
        Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
        """
        kms_key_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The customer master key (CMK) to use for the A KMS (KMS). 
        This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
        The Key ARN is recommended so that drift can be detected,
        but a key ID or key alias will also be accepted for API compatibility reasons.
        """
elif False:
    BrokerEncryptionOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerEncryptionOptionsArgs:
    def __init__(__self__, *,
                 use_aws_owned_key: pulumi.Input[_builtins.bool],
                 kms_key_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] use_aws_owned_key: Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
        :param pulumi.Input[_builtins.str] kms_key_id: The customer master key (CMK) to use for the A KMS (KMS). 
               This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
               The Key ARN is recommended so that drift can be detected,
               but a key ID or key alias will also be accepted for API compatibility reasons.
        """
        pulumi.set(__self__, "use_aws_owned_key", use_aws_owned_key)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @_builtins.property
    @pulumi.getter(name="useAwsOwnedKey")
    def use_aws_owned_key(self) -> pulumi.Input[_builtins.bool]:
        """
        Enables the use of an AWS owned CMK using AWS KMS (KMS). Set to `true` by default, if no value is provided, for example, for RabbitMQ brokers.
        """
        return pulumi.get(self, "use_aws_owned_key")

    @use_aws_owned_key.setter
    def use_aws_owned_key(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "use_aws_owned_key", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The customer master key (CMK) to use for the A KMS (KMS). 
        This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.
        The Key ARN is recommended so that drift can be detected,
        but a key ID or key alias will also be accepted for API compatibility reasons.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_id", value)


if not MYPY:
    class BrokerLdapServerMetadataArgsDict(TypedDict):
        hosts: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        role_base: pulumi.Input[_builtins.str]
        role_search_matching: pulumi.Input[_builtins.str]
        service_account_username: pulumi.Input[_builtins.str]
        user_base: pulumi.Input[_builtins.str]
        user_search_matching: pulumi.Input[_builtins.str]
        role_name: NotRequired[pulumi.Input[_builtins.str]]
        role_search_subtree: NotRequired[pulumi.Input[_builtins.bool]]
        service_account_password: NotRequired[pulumi.Input[_builtins.str]]
        user_role_name: NotRequired[pulumi.Input[_builtins.str]]
        user_search_subtree: NotRequired[pulumi.Input[_builtins.bool]]
elif False:
    BrokerLdapServerMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerLdapServerMetadataArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 role_base: pulumi.Input[_builtins.str],
                 role_search_matching: pulumi.Input[_builtins.str],
                 service_account_username: pulumi.Input[_builtins.str],
                 user_base: pulumi.Input[_builtins.str],
                 user_search_matching: pulumi.Input[_builtins.str],
                 role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_search_subtree: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_account_password: Optional[pulumi.Input[_builtins.str]] = None,
                 user_role_name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_search_subtree: Optional[pulumi.Input[_builtins.bool]] = None):
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "role_base", role_base)
        pulumi.set(__self__, "role_search_matching", role_search_matching)
        pulumi.set(__self__, "service_account_username", service_account_username)
        pulumi.set(__self__, "user_base", user_base)
        pulumi.set(__self__, "user_search_matching", user_search_matching)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if role_search_subtree is not None:
            pulumi.set(__self__, "role_search_subtree", role_search_subtree)
        if service_account_password is not None:
            pulumi.set(__self__, "service_account_password", service_account_password)
        if user_role_name is not None:
            pulumi.set(__self__, "user_role_name", user_role_name)
        if user_search_subtree is not None:
            pulumi.set(__self__, "user_search_subtree", user_search_subtree)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter(name="roleBase")
    def role_base(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "role_base")

    @role_base.setter
    def role_base(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_base", value)

    @_builtins.property
    @pulumi.getter(name="roleSearchMatching")
    def role_search_matching(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "role_search_matching")

    @role_search_matching.setter
    def role_search_matching(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_search_matching", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountUsername")
    def service_account_username(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "service_account_username")

    @service_account_username.setter
    def service_account_username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_account_username", value)

    @_builtins.property
    @pulumi.getter(name="userBase")
    def user_base(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "user_base")

    @user_base.setter
    def user_base(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_base", value)

    @_builtins.property
    @pulumi.getter(name="userSearchMatching")
    def user_search_matching(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "user_search_matching")

    @user_search_matching.setter
    def user_search_matching(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_search_matching", value)

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_name", value)

    @_builtins.property
    @pulumi.getter(name="roleSearchSubtree")
    def role_search_subtree(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "role_search_subtree")

    @role_search_subtree.setter
    def role_search_subtree(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "role_search_subtree", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountPassword")
    def service_account_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_account_password")

    @service_account_password.setter
    def service_account_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_password", value)

    @_builtins.property
    @pulumi.getter(name="userRoleName")
    def user_role_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_role_name")

    @user_role_name.setter
    def user_role_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_role_name", value)

    @_builtins.property
    @pulumi.getter(name="userSearchSubtree")
    def user_search_subtree(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "user_search_subtree")

    @user_search_subtree.setter
    def user_search_subtree(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_search_subtree", value)


if not MYPY:
    class BrokerLogListArgsDict(TypedDict):
        audit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
        """
        general: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables general logging.
        """
elif False:
    BrokerLogListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerLogListArgs:
    def __init__(__self__, *,
                 audit: Optional[pulumi.Input[_builtins.bool]] = None,
                 general: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] audit: Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[_builtins.bool] general: Enables general logging.
        """
        if audit is not None:
            pulumi.set(__self__, "audit", audit)
        if general is not None:
            pulumi.set(__self__, "general", general)

    @_builtins.property
    @pulumi.getter
    def audit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "audit")

    @audit.setter
    def audit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "audit", value)

    @_builtins.property
    @pulumi.getter
    def general(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables general logging.
        """
        return pulumi.get(self, "general")

    @general.setter
    def general(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "general", value)


if not MYPY:
    class BrokerMaintenanceWindowArgsDict(TypedDict):
        day_of_week: pulumi.Input[Union['BrokerMaintenanceWindowDayOfWeek', _builtins.str]]
        """
        _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
        """
        time_of_day: pulumi.Input[_builtins.str]
        """
        The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
        When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
        """
        time_zone: pulumi.Input[_builtins.str]
        """
        The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
        """
elif False:
    BrokerMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[Union['BrokerMaintenanceWindowDayOfWeek', _builtins.str]],
                 time_of_day: pulumi.Input[_builtins.str],
                 time_zone: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Union['BrokerMaintenanceWindowDayOfWeek', _builtins.str]] day_of_week: _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
        :param pulumi.Input[_builtins.str] time_of_day: The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
               When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
        :param pulumi.Input[_builtins.str] time_zone: The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "time_of_day", time_of_day)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[Union['BrokerMaintenanceWindowDayOfWeek', _builtins.str]]:
        """
        _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[Union['BrokerMaintenanceWindowDayOfWeek', _builtins.str]]):
        pulumi.set(self, "day_of_week", value)

    @_builtins.property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> pulumi.Input[_builtins.str]:
        """
        The time, in 24-hour format, and use only numbers separated by a colon, HH:MM or HH:MM:SS. Example: 13:05.
        When writing YAML this may need to be quoted to prevent a timestamp being read and converted to a number of minutes or seconds.
        """
        return pulumi.get(self, "time_of_day")

    @time_of_day.setter
    def time_of_day(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_of_day", value)

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[_builtins.str]:
        """
        The time zone, UTC by default, in either the Country/City format, or the UTC offset format.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "time_zone", value)


if not MYPY:
    class BrokerUserArgsDict(TypedDict):
        password: pulumi.Input[_builtins.str]
        """
        Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
        """
        username: pulumi.Input[_builtins.str]
        """
        The username of the broker user. The following restrictions apply to broker usernames:

        - For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
        - For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using `guest` as a valid usename. This value must be 2-100 characters long.

        > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
        """
        console_access: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
        """
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
        """
        replication_user: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Defines if this user is intended for CRDR replication purposes.
        """
elif False:
    BrokerUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrokerUserArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[_builtins.str],
                 username: pulumi.Input[_builtins.str],
                 console_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 replication_user: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] password: Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
        :param pulumi.Input[_builtins.str] username: The username of the broker user. The following restrictions apply to broker usernames:
               
               - For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
               - For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using `guest` as a valid usename. This value must be 2-100 characters long.
               
               > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
        :param pulumi.Input[_builtins.bool] console_access: Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[_builtins.bool] replication_user: Defines if this user is intended for CRDR replication purposes.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if console_access is not None:
            pulumi.set(__self__, "console_access", console_access)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if replication_user is not None:
            pulumi.set(__self__, "replication_user", replication_user)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str]:
        """
        The username of the broker user. The following restrictions apply to broker usernames:

        - For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
        - For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using `guest` as a valid usename. This value must be 2-100 characters long.

        > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other AWS services, including CloudWatch Logs . Broker usernames are not intended to be used for private or sensitive data.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "username", value)

    @_builtins.property
    @pulumi.getter(name="consoleAccess")
    def console_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "console_access")

    @console_access.setter
    def console_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "console_access", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="replicationUser")
    def replication_user(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defines if this user is intended for CRDR replication purposes.
        """
        return pulumi.get(self, "replication_user")

    @replication_user.setter
    def replication_user(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "replication_user", value)


