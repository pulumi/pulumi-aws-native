# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetBrokerResult',
    'AwaitableGetBrokerResult',
    'get_broker',
    'get_broker_output',
]

@pulumi.output_type
class GetBrokerResult:
    def __init__(__self__, amqp_endpoints=None, arn=None, auto_minor_version_upgrade=None, configuration_id=None, configuration_revision=None, console_urls=None, data_replication_mode=None, engine_version_current=None, host_instance_type=None, id=None, ip_addresses=None, ldap_server_metadata=None, logs=None, maintenance_window_start_time=None, mqtt_endpoints=None, open_wire_endpoints=None, security_groups=None, stomp_endpoints=None, tags=None, wss_endpoints=None):
        if amqp_endpoints and not isinstance(amqp_endpoints, list):
            raise TypeError("Expected argument 'amqp_endpoints' to be a list")
        pulumi.set(__self__, "amqp_endpoints", amqp_endpoints)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if configuration_id and not isinstance(configuration_id, str):
            raise TypeError("Expected argument 'configuration_id' to be a str")
        pulumi.set(__self__, "configuration_id", configuration_id)
        if configuration_revision and not isinstance(configuration_revision, str):
            raise TypeError("Expected argument 'configuration_revision' to be a str")
        pulumi.set(__self__, "configuration_revision", configuration_revision)
        if console_urls and not isinstance(console_urls, list):
            raise TypeError("Expected argument 'console_urls' to be a list")
        pulumi.set(__self__, "console_urls", console_urls)
        if data_replication_mode and not isinstance(data_replication_mode, dict):
            raise TypeError("Expected argument 'data_replication_mode' to be a dict")
        pulumi.set(__self__, "data_replication_mode", data_replication_mode)
        if engine_version_current and not isinstance(engine_version_current, str):
            raise TypeError("Expected argument 'engine_version_current' to be a str")
        pulumi.set(__self__, "engine_version_current", engine_version_current)
        if host_instance_type and not isinstance(host_instance_type, str):
            raise TypeError("Expected argument 'host_instance_type' to be a str")
        pulumi.set(__self__, "host_instance_type", host_instance_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ldap_server_metadata and not isinstance(ldap_server_metadata, dict):
            raise TypeError("Expected argument 'ldap_server_metadata' to be a dict")
        pulumi.set(__self__, "ldap_server_metadata", ldap_server_metadata)
        if logs and not isinstance(logs, dict):
            raise TypeError("Expected argument 'logs' to be a dict")
        pulumi.set(__self__, "logs", logs)
        if maintenance_window_start_time and not isinstance(maintenance_window_start_time, dict):
            raise TypeError("Expected argument 'maintenance_window_start_time' to be a dict")
        pulumi.set(__self__, "maintenance_window_start_time", maintenance_window_start_time)
        if mqtt_endpoints and not isinstance(mqtt_endpoints, list):
            raise TypeError("Expected argument 'mqtt_endpoints' to be a list")
        pulumi.set(__self__, "mqtt_endpoints", mqtt_endpoints)
        if open_wire_endpoints and not isinstance(open_wire_endpoints, list):
            raise TypeError("Expected argument 'open_wire_endpoints' to be a list")
        pulumi.set(__self__, "open_wire_endpoints", open_wire_endpoints)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if stomp_endpoints and not isinstance(stomp_endpoints, list):
            raise TypeError("Expected argument 'stomp_endpoints' to be a list")
        pulumi.set(__self__, "stomp_endpoints", stomp_endpoints)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if wss_endpoints and not isinstance(wss_endpoints, list):
            raise TypeError("Expected argument 'wss_endpoints' to be a list")
        pulumi.set(__self__, "wss_endpoints", wss_endpoints)

    @_builtins.property
    @pulumi.getter(name="amqpEndpoints")
    def amqp_endpoints(self) -> Optional[Sequence[_builtins.str]]:
        """
        The AMQP endpoints of each broker instance as a list of strings.

        `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
        """
        return pulumi.get(self, "amqp_endpoints")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> Optional[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the Amazon MQ broker.

        `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[_builtins.bool]:
        """
        Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[_builtins.str]:
        """
        The ID of the current actual configuration.
        """
        return pulumi.get(self, "configuration_id")

    @_builtins.property
    @pulumi.getter(name="configurationRevision")
    def configuration_revision(self) -> Optional[_builtins.str]:
        """
        The revision of the current actual configuration.
        """
        return pulumi.get(self, "configuration_revision")

    @_builtins.property
    @pulumi.getter(name="consoleUrls")
    def console_urls(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "console_urls")

    @_builtins.property
    @pulumi.getter(name="dataReplicationMode")
    def data_replication_mode(self) -> Optional[_builtins.str]:
        """
        Defines whether this broker is a part of a data replication pair.
        """
        return pulumi.get(self, "data_replication_mode")

    @_builtins.property
    @pulumi.getter(name="engineVersionCurrent")
    def engine_version_current(self) -> Optional[_builtins.str]:
        """
        The version in use. This may have more precision than the specified EngineVersion.
        """
        return pulumi.get(self, "engine_version_current")

    @_builtins.property
    @pulumi.getter(name="hostInstanceType")
    def host_instance_type(self) -> Optional[_builtins.str]:
        """
        The broker's instance type.
        """
        return pulumi.get(self, "host_instance_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Required. The unique ID that Amazon MQ generates for the configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.

        `['198.51.100.2', '203.0.113.9']`
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="ldapServerMetadata")
    def ldap_server_metadata(self) -> Optional['outputs.BrokerLdapServerMetadata']:
        """
        Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "ldap_server_metadata")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional['outputs.BrokerLogList']:
        """
        Enables Amazon CloudWatch logging for brokers.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="maintenanceWindowStartTime")
    def maintenance_window_start_time(self) -> Optional['outputs.BrokerMaintenanceWindow']:
        """
        The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        """
        return pulumi.get(self, "maintenance_window_start_time")

    @_builtins.property
    @pulumi.getter(name="mqttEndpoints")
    def mqtt_endpoints(self) -> Optional[Sequence[_builtins.str]]:
        """
        The MQTT endpoints of each broker instance as a list of strings.

        `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
        """
        return pulumi.get(self, "mqtt_endpoints")

    @_builtins.property
    @pulumi.getter(name="openWireEndpoints")
    def open_wire_endpoints(self) -> Optional[Sequence[_builtins.str]]:
        """
        The OpenWire endpoints of each broker instance as a list of strings.

        `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
        """
        return pulumi.get(self, "open_wire_endpoints")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="stompEndpoints")
    def stomp_endpoints(self) -> Optional[Sequence[_builtins.str]]:
        """
        The STOMP endpoints of each broker instance as a list of strings.

        `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
        """
        return pulumi.get(self, "stomp_endpoints")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="wssEndpoints")
    def wss_endpoints(self) -> Optional[Sequence[_builtins.str]]:
        """
        The WSS endpoints of each broker instance as a list of strings.

        `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
        """
        return pulumi.get(self, "wss_endpoints")


class AwaitableGetBrokerResult(GetBrokerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrokerResult(
            amqp_endpoints=self.amqp_endpoints,
            arn=self.arn,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            configuration_id=self.configuration_id,
            configuration_revision=self.configuration_revision,
            console_urls=self.console_urls,
            data_replication_mode=self.data_replication_mode,
            engine_version_current=self.engine_version_current,
            host_instance_type=self.host_instance_type,
            id=self.id,
            ip_addresses=self.ip_addresses,
            ldap_server_metadata=self.ldap_server_metadata,
            logs=self.logs,
            maintenance_window_start_time=self.maintenance_window_start_time,
            mqtt_endpoints=self.mqtt_endpoints,
            open_wire_endpoints=self.open_wire_endpoints,
            security_groups=self.security_groups,
            stomp_endpoints=self.stomp_endpoints,
            tags=self.tags,
            wss_endpoints=self.wss_endpoints)


def get_broker(id: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrokerResult:
    """
    Resource type definition for AWS::AmazonMQ::Broker


    :param _builtins.str id: Required. The unique ID that Amazon MQ generates for the configuration.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:amazonmq:getBroker', __args__, opts=opts, typ=GetBrokerResult).value

    return AwaitableGetBrokerResult(
        amqp_endpoints=pulumi.get(__ret__, 'amqp_endpoints'),
        arn=pulumi.get(__ret__, 'arn'),
        auto_minor_version_upgrade=pulumi.get(__ret__, 'auto_minor_version_upgrade'),
        configuration_id=pulumi.get(__ret__, 'configuration_id'),
        configuration_revision=pulumi.get(__ret__, 'configuration_revision'),
        console_urls=pulumi.get(__ret__, 'console_urls'),
        data_replication_mode=pulumi.get(__ret__, 'data_replication_mode'),
        engine_version_current=pulumi.get(__ret__, 'engine_version_current'),
        host_instance_type=pulumi.get(__ret__, 'host_instance_type'),
        id=pulumi.get(__ret__, 'id'),
        ip_addresses=pulumi.get(__ret__, 'ip_addresses'),
        ldap_server_metadata=pulumi.get(__ret__, 'ldap_server_metadata'),
        logs=pulumi.get(__ret__, 'logs'),
        maintenance_window_start_time=pulumi.get(__ret__, 'maintenance_window_start_time'),
        mqtt_endpoints=pulumi.get(__ret__, 'mqtt_endpoints'),
        open_wire_endpoints=pulumi.get(__ret__, 'open_wire_endpoints'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        stomp_endpoints=pulumi.get(__ret__, 'stomp_endpoints'),
        tags=pulumi.get(__ret__, 'tags'),
        wss_endpoints=pulumi.get(__ret__, 'wss_endpoints'))
def get_broker_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBrokerResult]:
    """
    Resource type definition for AWS::AmazonMQ::Broker


    :param _builtins.str id: Required. The unique ID that Amazon MQ generates for the configuration.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:amazonmq:getBroker', __args__, opts=opts, typ=GetBrokerResult)
    return __ret__.apply(lambda __response__: GetBrokerResult(
        amqp_endpoints=pulumi.get(__response__, 'amqp_endpoints'),
        arn=pulumi.get(__response__, 'arn'),
        auto_minor_version_upgrade=pulumi.get(__response__, 'auto_minor_version_upgrade'),
        configuration_id=pulumi.get(__response__, 'configuration_id'),
        configuration_revision=pulumi.get(__response__, 'configuration_revision'),
        console_urls=pulumi.get(__response__, 'console_urls'),
        data_replication_mode=pulumi.get(__response__, 'data_replication_mode'),
        engine_version_current=pulumi.get(__response__, 'engine_version_current'),
        host_instance_type=pulumi.get(__response__, 'host_instance_type'),
        id=pulumi.get(__response__, 'id'),
        ip_addresses=pulumi.get(__response__, 'ip_addresses'),
        ldap_server_metadata=pulumi.get(__response__, 'ldap_server_metadata'),
        logs=pulumi.get(__response__, 'logs'),
        maintenance_window_start_time=pulumi.get(__response__, 'maintenance_window_start_time'),
        mqtt_endpoints=pulumi.get(__response__, 'mqtt_endpoints'),
        open_wire_endpoints=pulumi.get(__response__, 'open_wire_endpoints'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        stomp_endpoints=pulumi.get(__response__, 'stomp_endpoints'),
        tags=pulumi.get(__response__, 'tags'),
        wss_endpoints=pulumi.get(__response__, 'wss_endpoints')))
