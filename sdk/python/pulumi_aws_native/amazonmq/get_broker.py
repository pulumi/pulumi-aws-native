# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBrokerResult',
    'AwaitableGetBrokerResult',
    'get_broker',
    'get_broker_output',
]

@pulumi.output_type
class GetBrokerResult:
    def __init__(__self__, amqp_endpoints=None, arn=None, auto_minor_version_upgrade=None, configuration=None, configuration_id=None, configuration_revision=None, engine_version=None, host_instance_type=None, id=None, ip_addresses=None, ldap_server_metadata=None, logs=None, maintenance_window_start_time=None, mqtt_endpoints=None, open_wire_endpoints=None, security_groups=None, stomp_endpoints=None, tags=None, users=None, wss_endpoints=None):
        if amqp_endpoints and not isinstance(amqp_endpoints, list):
            raise TypeError("Expected argument 'amqp_endpoints' to be a list")
        pulumi.set(__self__, "amqp_endpoints", amqp_endpoints)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if configuration_id and not isinstance(configuration_id, str):
            raise TypeError("Expected argument 'configuration_id' to be a str")
        pulumi.set(__self__, "configuration_id", configuration_id)
        if configuration_revision and not isinstance(configuration_revision, int):
            raise TypeError("Expected argument 'configuration_revision' to be a int")
        pulumi.set(__self__, "configuration_revision", configuration_revision)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if host_instance_type and not isinstance(host_instance_type, str):
            raise TypeError("Expected argument 'host_instance_type' to be a str")
        pulumi.set(__self__, "host_instance_type", host_instance_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ldap_server_metadata and not isinstance(ldap_server_metadata, dict):
            raise TypeError("Expected argument 'ldap_server_metadata' to be a dict")
        pulumi.set(__self__, "ldap_server_metadata", ldap_server_metadata)
        if logs and not isinstance(logs, dict):
            raise TypeError("Expected argument 'logs' to be a dict")
        pulumi.set(__self__, "logs", logs)
        if maintenance_window_start_time and not isinstance(maintenance_window_start_time, dict):
            raise TypeError("Expected argument 'maintenance_window_start_time' to be a dict")
        pulumi.set(__self__, "maintenance_window_start_time", maintenance_window_start_time)
        if mqtt_endpoints and not isinstance(mqtt_endpoints, list):
            raise TypeError("Expected argument 'mqtt_endpoints' to be a list")
        pulumi.set(__self__, "mqtt_endpoints", mqtt_endpoints)
        if open_wire_endpoints and not isinstance(open_wire_endpoints, list):
            raise TypeError("Expected argument 'open_wire_endpoints' to be a list")
        pulumi.set(__self__, "open_wire_endpoints", open_wire_endpoints)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if stomp_endpoints and not isinstance(stomp_endpoints, list):
            raise TypeError("Expected argument 'stomp_endpoints' to be a list")
        pulumi.set(__self__, "stomp_endpoints", stomp_endpoints)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if wss_endpoints and not isinstance(wss_endpoints, list):
            raise TypeError("Expected argument 'wss_endpoints' to be a list")
        pulumi.set(__self__, "wss_endpoints", wss_endpoints)

    @property
    @pulumi.getter(name="amqpEndpoints")
    def amqp_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "amqp_endpoints")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.BrokerConfigurationId']:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[str]:
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="configurationRevision")
    def configuration_revision(self) -> Optional[int]:
        return pulumi.get(self, "configuration_revision")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="hostInstanceType")
    def host_instance_type(self) -> Optional[str]:
        return pulumi.get(self, "host_instance_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ldapServerMetadata")
    def ldap_server_metadata(self) -> Optional['outputs.BrokerLdapServerMetadata']:
        return pulumi.get(self, "ldap_server_metadata")

    @property
    @pulumi.getter
    def logs(self) -> Optional['outputs.BrokerLogList']:
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter(name="maintenanceWindowStartTime")
    def maintenance_window_start_time(self) -> Optional['outputs.BrokerMaintenanceWindow']:
        return pulumi.get(self, "maintenance_window_start_time")

    @property
    @pulumi.getter(name="mqttEndpoints")
    def mqtt_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mqtt_endpoints")

    @property
    @pulumi.getter(name="openWireEndpoints")
    def open_wire_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "open_wire_endpoints")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="stompEndpoints")
    def stomp_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stomp_endpoints")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.BrokerTagsEntry']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.BrokerUser']]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="wssEndpoints")
    def wss_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wss_endpoints")


class AwaitableGetBrokerResult(GetBrokerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrokerResult(
            amqp_endpoints=self.amqp_endpoints,
            arn=self.arn,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            configuration=self.configuration,
            configuration_id=self.configuration_id,
            configuration_revision=self.configuration_revision,
            engine_version=self.engine_version,
            host_instance_type=self.host_instance_type,
            id=self.id,
            ip_addresses=self.ip_addresses,
            ldap_server_metadata=self.ldap_server_metadata,
            logs=self.logs,
            maintenance_window_start_time=self.maintenance_window_start_time,
            mqtt_endpoints=self.mqtt_endpoints,
            open_wire_endpoints=self.open_wire_endpoints,
            security_groups=self.security_groups,
            stomp_endpoints=self.stomp_endpoints,
            tags=self.tags,
            users=self.users,
            wss_endpoints=self.wss_endpoints)


def get_broker(id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrokerResult:
    """
    Resource Type definition for AWS::AmazonMQ::Broker
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:amazonmq:getBroker', __args__, opts=opts, typ=GetBrokerResult).value

    return AwaitableGetBrokerResult(
        amqp_endpoints=__ret__.amqp_endpoints,
        arn=__ret__.arn,
        auto_minor_version_upgrade=__ret__.auto_minor_version_upgrade,
        configuration=__ret__.configuration,
        configuration_id=__ret__.configuration_id,
        configuration_revision=__ret__.configuration_revision,
        engine_version=__ret__.engine_version,
        host_instance_type=__ret__.host_instance_type,
        id=__ret__.id,
        ip_addresses=__ret__.ip_addresses,
        ldap_server_metadata=__ret__.ldap_server_metadata,
        logs=__ret__.logs,
        maintenance_window_start_time=__ret__.maintenance_window_start_time,
        mqtt_endpoints=__ret__.mqtt_endpoints,
        open_wire_endpoints=__ret__.open_wire_endpoints,
        security_groups=__ret__.security_groups,
        stomp_endpoints=__ret__.stomp_endpoints,
        tags=__ret__.tags,
        users=__ret__.users,
        wss_endpoints=__ret__.wss_endpoints)


@_utilities.lift_output_func(get_broker)
def get_broker_output(id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBrokerResult]:
    """
    Resource Type definition for AWS::AmazonMQ::Broker
    """
    ...
