# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['BrokerArgs', 'Broker']

@pulumi.input_type
class BrokerArgs:
    def __init__(__self__, *,
                 deployment_mode: pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]],
                 engine_type: pulumi.Input[Union['BrokerEngineType', _builtins.str]],
                 host_instance_type: pulumi.Input[_builtins.str],
                 publicly_accessible: pulumi.Input[_builtins.bool],
                 authentication_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 broker_name: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input['BrokerConfigurationIdArgs']] = None,
                 data_replication_mode: Optional[pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]]] = None,
                 data_replication_primary_broker_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_options: Optional[pulumi.Input['BrokerEncryptionOptionsArgs']] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ldap_server_metadata: Optional[pulumi.Input['BrokerLdapServerMetadataArgs']] = None,
                 logs: Optional[pulumi.Input['BrokerLogListArgs']] = None,
                 maintenance_window_start_time: Optional[pulumi.Input['BrokerMaintenanceWindowArgs']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[Union['BrokerStorageType', _builtins.str]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['BrokerUserArgs']]]] = None):
        """
        The set of arguments for constructing a Broker resource.
        :param pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]] deployment_mode: The deployment mode of the broker. Available values:
               
               - `SINGLE_INSTANCE`
               - `ACTIVE_STANDBY_MULTI_AZ`
               - `CLUSTER_MULTI_AZ`
        :param pulumi.Input[Union['BrokerEngineType', _builtins.str]] engine_type: The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        :param pulumi.Input[_builtins.str] host_instance_type: The broker's instance type.
        :param pulumi.Input[_builtins.bool] publicly_accessible: Enables connections from applications outside of the VPC that hosts the broker's subnets.
        :param pulumi.Input[_builtins.str] authentication_strategy: Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        :param pulumi.Input[_builtins.str] broker_name: The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
               
               > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        :param pulumi.Input['BrokerConfigurationIdArgs'] configuration: The intended configuration (ID and revision) to be set when creating or updating.
               This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        :param pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]] data_replication_mode: Defines whether this broker is a part of a data replication pair.
        :param pulumi.Input[_builtins.str] data_replication_primary_broker_arn: The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
               This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
               Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        :param pulumi.Input['BrokerEncryptionOptionsArgs'] encryption_options: Encryption options for the broker. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[_builtins.str] engine_version: The version specified to use. See also EngineVersionCurrent.
        :param pulumi.Input['BrokerLdapServerMetadataArgs'] ldap_server_metadata: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        :param pulumi.Input['BrokerLogListArgs'] logs: Enables Amazon CloudWatch logging for brokers.
        :param pulumi.Input['BrokerMaintenanceWindowArgs'] maintenance_window_start_time: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        :param pulumi.Input[Union['BrokerStorageType', _builtins.str]] storage_type: The broker's storage type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
               
               > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        :param pulumi.Input[Sequence[pulumi.Input['BrokerUserArgs']]] users: Users to configure on the broker. 
               For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
               For ActiveMQ, changes to anything but Password are detected and will trigger an update,
               but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        """
        pulumi.set(__self__, "deployment_mode", deployment_mode)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "host_instance_type", host_instance_type)
        pulumi.set(__self__, "publicly_accessible", publicly_accessible)
        if authentication_strategy is not None:
            pulumi.set(__self__, "authentication_strategy", authentication_strategy)
        if auto_minor_version_upgrade is not None:
            pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if broker_name is not None:
            pulumi.set(__self__, "broker_name", broker_name)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if data_replication_mode is not None:
            pulumi.set(__self__, "data_replication_mode", data_replication_mode)
        if data_replication_primary_broker_arn is not None:
            pulumi.set(__self__, "data_replication_primary_broker_arn", data_replication_primary_broker_arn)
        if encryption_options is not None:
            pulumi.set(__self__, "encryption_options", encryption_options)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if ldap_server_metadata is not None:
            pulumi.set(__self__, "ldap_server_metadata", ldap_server_metadata)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if maintenance_window_start_time is not None:
            pulumi.set(__self__, "maintenance_window_start_time", maintenance_window_start_time)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]]:
        """
        The deployment mode of the broker. Available values:

        - `SINGLE_INSTANCE`
        - `ACTIVE_STANDBY_MULTI_AZ`
        - `CLUSTER_MULTI_AZ`
        """
        return pulumi.get(self, "deployment_mode")

    @deployment_mode.setter
    def deployment_mode(self, value: pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]]):
        pulumi.set(self, "deployment_mode", value)

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Input[Union['BrokerEngineType', _builtins.str]]:
        """
        The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: pulumi.Input[Union['BrokerEngineType', _builtins.str]]):
        pulumi.set(self, "engine_type", value)

    @_builtins.property
    @pulumi.getter(name="hostInstanceType")
    def host_instance_type(self) -> pulumi.Input[_builtins.str]:
        """
        The broker's instance type.
        """
        return pulumi.get(self, "host_instance_type")

    @host_instance_type.setter
    def host_instance_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> pulumi.Input[_builtins.bool]:
        """
        Enables connections from applications outside of the VPC that hosts the broker's subnets.
        """
        return pulumi.get(self, "publicly_accessible")

    @publicly_accessible.setter
    def publicly_accessible(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "publicly_accessible", value)

    @_builtins.property
    @pulumi.getter(name="authenticationStrategy")
    def authentication_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        """
        return pulumi.get(self, "authentication_strategy")

    @authentication_strategy.setter
    def authentication_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_strategy", value)

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_minor_version_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="brokerName")
    def broker_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.

        > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        """
        return pulumi.get(self, "broker_name")

    @broker_name.setter
    def broker_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "broker_name", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['BrokerConfigurationIdArgs']]:
        """
        The intended configuration (ID and revision) to be set when creating or updating.
        This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['BrokerConfigurationIdArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="dataReplicationMode")
    def data_replication_mode(self) -> Optional[pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]]]:
        """
        Defines whether this broker is a part of a data replication pair.
        """
        return pulumi.get(self, "data_replication_mode")

    @data_replication_mode.setter
    def data_replication_mode(self, value: Optional[pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]]]):
        pulumi.set(self, "data_replication_mode", value)

    @_builtins.property
    @pulumi.getter(name="dataReplicationPrimaryBrokerArn")
    def data_replication_primary_broker_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
        This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
        Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        """
        return pulumi.get(self, "data_replication_primary_broker_arn")

    @data_replication_primary_broker_arn.setter
    def data_replication_primary_broker_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_replication_primary_broker_arn", value)

    @_builtins.property
    @pulumi.getter(name="encryptionOptions")
    def encryption_options(self) -> Optional[pulumi.Input['BrokerEncryptionOptionsArgs']]:
        """
        Encryption options for the broker. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "encryption_options")

    @encryption_options.setter
    def encryption_options(self, value: Optional[pulumi.Input['BrokerEncryptionOptionsArgs']]):
        pulumi.set(self, "encryption_options", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version specified to use. See also EngineVersionCurrent.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="ldapServerMetadata")
    def ldap_server_metadata(self) -> Optional[pulumi.Input['BrokerLdapServerMetadataArgs']]:
        """
        Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "ldap_server_metadata")

    @ldap_server_metadata.setter
    def ldap_server_metadata(self, value: Optional[pulumi.Input['BrokerLdapServerMetadataArgs']]):
        pulumi.set(self, "ldap_server_metadata", value)

    @_builtins.property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input['BrokerLogListArgs']]:
        """
        Enables Amazon CloudWatch logging for brokers.
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input['BrokerLogListArgs']]):
        pulumi.set(self, "logs", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceWindowStartTime")
    def maintenance_window_start_time(self) -> Optional[pulumi.Input['BrokerMaintenanceWindowArgs']]:
        """
        The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        """
        return pulumi.get(self, "maintenance_window_start_time")

    @maintenance_window_start_time.setter
    def maintenance_window_start_time(self, value: Optional[pulumi.Input['BrokerMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window_start_time", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[Union['BrokerStorageType', _builtins.str]]]:
        """
        The broker's storage type.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[Union['BrokerStorageType', _builtins.str]]]):
        pulumi.set(self, "storage_type", value)

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.

        > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrokerUserArgs']]]]:
        """
        Users to configure on the broker. 
        For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
        For ActiveMQ, changes to anything but Password are detected and will trigger an update,
        but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrokerUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("aws-native:amazonmq:Broker")
class Broker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 broker_name: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['BrokerConfigurationIdArgs', 'BrokerConfigurationIdArgsDict']]] = None,
                 data_replication_mode: Optional[pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]]] = None,
                 data_replication_primary_broker_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 deployment_mode: Optional[pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]]] = None,
                 encryption_options: Optional[pulumi.Input[Union['BrokerEncryptionOptionsArgs', 'BrokerEncryptionOptionsArgsDict']]] = None,
                 engine_type: Optional[pulumi.Input[Union['BrokerEngineType', _builtins.str]]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 host_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ldap_server_metadata: Optional[pulumi.Input[Union['BrokerLdapServerMetadataArgs', 'BrokerLdapServerMetadataArgsDict']]] = None,
                 logs: Optional[pulumi.Input[Union['BrokerLogListArgs', 'BrokerLogListArgsDict']]] = None,
                 maintenance_window_start_time: Optional[pulumi.Input[Union['BrokerMaintenanceWindowArgs', 'BrokerMaintenanceWindowArgsDict']]] = None,
                 publicly_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[Union['BrokerStorageType', _builtins.str]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BrokerUserArgs', 'BrokerUserArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource type definition for AWS::AmazonMQ::Broker

        ## Example Usage
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicActiveBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="ActiveMQ",
            engine_version="5.15.0",
            host_instance_type="mq.t2.micro",
            publicly_accessible=True,
            users=[{
                "console_access": True,
                "groups": ["MyGroup"],
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            publicly_accessible=True,
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicActiveBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="ActiveMQ",
            engine_version="5.15.0",
            host_instance_type="mq.t2.micro",
            publicly_accessible=True,
            users=[{
                "console_access": True,
                "groups": ["MyGroup"],
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            publicly_accessible=True,
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        complex_broker = aws_native.amazonmq.Broker("complexBroker",
            auto_minor_version_upgrade=True,
            broker_name="MyComplexRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            logs={
                "general": True,
            },
            maintenance_window_start_time={
                "day_of_week": "Monday",
                "time_of_day": "22:45",
                "time_zone": "America/Los_Angeles",
            },
            publicly_accessible=False,
            security_groups=["sg-1a234b5cd6efgh7i8"],
            subnet_ids=["subnet-123456b7891abcd1f"],
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        complex_broker = aws_native.amazonmq.Broker("complexBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyComplexRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            logs={
                "general": True,
            },
            maintenance_window_start_time={
                "day_of_week": "Monday",
                "time_of_day": "22:45",
                "time_zone": "America/Los_Angeles",
            },
            publicly_accessible=False,
            security_groups=["sg-1a234b5cd6efgh7i8"],
            subnet_ids=["subnet-123456b7891abcd1f"],
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] authentication_strategy: Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        :param pulumi.Input[_builtins.str] broker_name: The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
               
               > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        :param pulumi.Input[Union['BrokerConfigurationIdArgs', 'BrokerConfigurationIdArgsDict']] configuration: The intended configuration (ID and revision) to be set when creating or updating.
               This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        :param pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]] data_replication_mode: Defines whether this broker is a part of a data replication pair.
        :param pulumi.Input[_builtins.str] data_replication_primary_broker_arn: The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
               This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
               Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        :param pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]] deployment_mode: The deployment mode of the broker. Available values:
               
               - `SINGLE_INSTANCE`
               - `ACTIVE_STANDBY_MULTI_AZ`
               - `CLUSTER_MULTI_AZ`
        :param pulumi.Input[Union['BrokerEncryptionOptionsArgs', 'BrokerEncryptionOptionsArgsDict']] encryption_options: Encryption options for the broker. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[Union['BrokerEngineType', _builtins.str]] engine_type: The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        :param pulumi.Input[_builtins.str] engine_version: The version specified to use. See also EngineVersionCurrent.
        :param pulumi.Input[_builtins.str] host_instance_type: The broker's instance type.
        :param pulumi.Input[Union['BrokerLdapServerMetadataArgs', 'BrokerLdapServerMetadataArgsDict']] ldap_server_metadata: Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        :param pulumi.Input[Union['BrokerLogListArgs', 'BrokerLogListArgsDict']] logs: Enables Amazon CloudWatch logging for brokers.
        :param pulumi.Input[Union['BrokerMaintenanceWindowArgs', 'BrokerMaintenanceWindowArgsDict']] maintenance_window_start_time: The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        :param pulumi.Input[_builtins.bool] publicly_accessible: Enables connections from applications outside of the VPC that hosts the broker's subnets.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        :param pulumi.Input[Union['BrokerStorageType', _builtins.str]] storage_type: The broker's storage type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
               
               > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        :param pulumi.Input[Sequence[pulumi.Input[Union['BrokerUserArgs', 'BrokerUserArgsDict']]]] users: Users to configure on the broker. 
               For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
               For ActiveMQ, changes to anything but Password are detected and will trigger an update,
               but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BrokerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource type definition for AWS::AmazonMQ::Broker

        ## Example Usage
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicActiveBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="ActiveMQ",
            engine_version="5.15.0",
            host_instance_type="mq.t2.micro",
            publicly_accessible=True,
            users=[{
                "console_access": True,
                "groups": ["MyGroup"],
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            publicly_accessible=True,
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicActiveBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="ActiveMQ",
            engine_version="5.15.0",
            host_instance_type="mq.t2.micro",
            publicly_accessible=True,
            users=[{
                "console_access": True,
                "groups": ["MyGroup"],
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        basic_broker = aws_native.amazonmq.Broker("basicBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyBasicRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            publicly_accessible=True,
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        complex_broker = aws_native.amazonmq.Broker("complexBroker",
            auto_minor_version_upgrade=True,
            broker_name="MyComplexRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            logs={
                "general": True,
            },
            maintenance_window_start_time={
                "day_of_week": "Monday",
                "time_of_day": "22:45",
                "time_zone": "America/Los_Angeles",
            },
            publicly_accessible=False,
            security_groups=["sg-1a234b5cd6efgh7i8"],
            subnet_ids=["subnet-123456b7891abcd1f"],
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```
        ### Example

        ```python
        import pulumi
        import pulumi_aws_native as aws_native

        complex_broker = aws_native.amazonmq.Broker("complexBroker",
            auto_minor_version_upgrade=False,
            broker_name="MyComplexRabbitBroker",
            deployment_mode=aws_native.amazonmq.BrokerDeploymentMode.SINGLE_INSTANCE,
            engine_type="RabbitMQ",
            engine_version="3.8.6",
            host_instance_type="mq.t3.micro",
            logs={
                "general": True,
            },
            maintenance_window_start_time={
                "day_of_week": "Monday",
                "time_of_day": "22:45",
                "time_zone": "America/Los_Angeles",
            },
            publicly_accessible=False,
            security_groups=["sg-1a234b5cd6efgh7i8"],
            subnet_ids=["subnet-123456b7891abcd1f"],
            users=[{
                "password": "AmazonMqPassword",
                "username": "AmazonMqUsername",
            }])

        ```

        :param str resource_name: The name of the resource.
        :param BrokerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrokerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 broker_name: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[Union['BrokerConfigurationIdArgs', 'BrokerConfigurationIdArgsDict']]] = None,
                 data_replication_mode: Optional[pulumi.Input[Union['BrokerDataReplicationMode', _builtins.str]]] = None,
                 data_replication_primary_broker_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 deployment_mode: Optional[pulumi.Input[Union['BrokerDeploymentMode', _builtins.str]]] = None,
                 encryption_options: Optional[pulumi.Input[Union['BrokerEncryptionOptionsArgs', 'BrokerEncryptionOptionsArgsDict']]] = None,
                 engine_type: Optional[pulumi.Input[Union['BrokerEngineType', _builtins.str]]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 host_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ldap_server_metadata: Optional[pulumi.Input[Union['BrokerLdapServerMetadataArgs', 'BrokerLdapServerMetadataArgsDict']]] = None,
                 logs: Optional[pulumi.Input[Union['BrokerLogListArgs', 'BrokerLogListArgsDict']]] = None,
                 maintenance_window_start_time: Optional[pulumi.Input[Union['BrokerMaintenanceWindowArgs', 'BrokerMaintenanceWindowArgsDict']]] = None,
                 publicly_accessible: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[Union['BrokerStorageType', _builtins.str]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BrokerUserArgs', 'BrokerUserArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrokerArgs.__new__(BrokerArgs)

            __props__.__dict__["authentication_strategy"] = authentication_strategy
            __props__.__dict__["auto_minor_version_upgrade"] = auto_minor_version_upgrade
            __props__.__dict__["broker_name"] = broker_name
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["data_replication_mode"] = data_replication_mode
            __props__.__dict__["data_replication_primary_broker_arn"] = data_replication_primary_broker_arn
            if deployment_mode is None and not opts.urn:
                raise TypeError("Missing required property 'deployment_mode'")
            __props__.__dict__["deployment_mode"] = deployment_mode
            __props__.__dict__["encryption_options"] = encryption_options
            if engine_type is None and not opts.urn:
                raise TypeError("Missing required property 'engine_type'")
            __props__.__dict__["engine_type"] = engine_type
            __props__.__dict__["engine_version"] = engine_version
            if host_instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'host_instance_type'")
            __props__.__dict__["host_instance_type"] = host_instance_type
            __props__.__dict__["ldap_server_metadata"] = ldap_server_metadata
            __props__.__dict__["logs"] = logs
            __props__.__dict__["maintenance_window_start_time"] = maintenance_window_start_time
            if publicly_accessible is None and not opts.urn:
                raise TypeError("Missing required property 'publicly_accessible'")
            __props__.__dict__["publicly_accessible"] = publicly_accessible
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["users"] = users
            __props__.__dict__["amqp_endpoints"] = None
            __props__.__dict__["arn"] = None
            __props__.__dict__["aws_id"] = None
            __props__.__dict__["configuration_id"] = None
            __props__.__dict__["configuration_revision"] = None
            __props__.__dict__["console_urls"] = None
            __props__.__dict__["engine_version_current"] = None
            __props__.__dict__["ip_addresses"] = None
            __props__.__dict__["mqtt_endpoints"] = None
            __props__.__dict__["open_wire_endpoints"] = None
            __props__.__dict__["stomp_endpoints"] = None
            __props__.__dict__["wss_endpoints"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["authenticationStrategy", "brokerName", "deploymentMode", "encryptionOptions", "engineType", "publiclyAccessible", "storageType", "subnetIds[*]"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Broker, __self__).__init__(
            'aws-native:amazonmq:Broker',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Broker':
        """
        Get an existing Broker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BrokerArgs.__new__(BrokerArgs)

        __props__.__dict__["amqp_endpoints"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["authentication_strategy"] = None
        __props__.__dict__["auto_minor_version_upgrade"] = None
        __props__.__dict__["aws_id"] = None
        __props__.__dict__["broker_name"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["configuration_id"] = None
        __props__.__dict__["configuration_revision"] = None
        __props__.__dict__["console_urls"] = None
        __props__.__dict__["data_replication_mode"] = None
        __props__.__dict__["data_replication_primary_broker_arn"] = None
        __props__.__dict__["deployment_mode"] = None
        __props__.__dict__["encryption_options"] = None
        __props__.__dict__["engine_type"] = None
        __props__.__dict__["engine_version"] = None
        __props__.__dict__["engine_version_current"] = None
        __props__.__dict__["host_instance_type"] = None
        __props__.__dict__["ip_addresses"] = None
        __props__.__dict__["ldap_server_metadata"] = None
        __props__.__dict__["logs"] = None
        __props__.__dict__["maintenance_window_start_time"] = None
        __props__.__dict__["mqtt_endpoints"] = None
        __props__.__dict__["open_wire_endpoints"] = None
        __props__.__dict__["publicly_accessible"] = None
        __props__.__dict__["security_groups"] = None
        __props__.__dict__["stomp_endpoints"] = None
        __props__.__dict__["storage_type"] = None
        __props__.__dict__["subnet_ids"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["users"] = None
        __props__.__dict__["wss_endpoints"] = None
        return Broker(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="amqpEndpoints")
    def amqp_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The AMQP endpoints of each broker instance as a list of strings.

        `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
        """
        return pulumi.get(self, "amqp_endpoints")

    @_builtins.property
    @pulumi.getter
    def arn(self) -> pulumi.Output[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the Amazon MQ broker.

        `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
        """
        return pulumi.get(self, "arn")

    @_builtins.property
    @pulumi.getter(name="authenticationStrategy")
    def authentication_strategy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        """
        return pulumi.get(self, "authentication_strategy")

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @_builtins.property
    @pulumi.getter(name="awsId")
    def aws_id(self) -> pulumi.Output[_builtins.str]:
        """
        Required. The unique ID that Amazon MQ generates for the configuration.
        """
        return pulumi.get(self, "aws_id")

    @_builtins.property
    @pulumi.getter(name="brokerName")
    def broker_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.

        > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        """
        return pulumi.get(self, "broker_name")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.BrokerConfigurationId']]:
        """
        The intended configuration (ID and revision) to be set when creating or updating.
        This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the current actual configuration.
        """
        return pulumi.get(self, "configuration_id")

    @_builtins.property
    @pulumi.getter(name="configurationRevision")
    def configuration_revision(self) -> pulumi.Output[_builtins.str]:
        """
        The revision of the current actual configuration.
        """
        return pulumi.get(self, "configuration_revision")

    @_builtins.property
    @pulumi.getter(name="consoleUrls")
    def console_urls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "console_urls")

    @_builtins.property
    @pulumi.getter(name="dataReplicationMode")
    def data_replication_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Defines whether this broker is a part of a data replication pair.
        """
        return pulumi.get(self, "data_replication_mode")

    @_builtins.property
    @pulumi.getter(name="dataReplicationPrimaryBrokerArn")
    def data_replication_primary_broker_arn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
        This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
        Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        """
        return pulumi.get(self, "data_replication_primary_broker_arn")

    @_builtins.property
    @pulumi.getter(name="deploymentMode")
    def deployment_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The deployment mode of the broker. Available values:

        - `SINGLE_INSTANCE`
        - `ACTIVE_STANDBY_MULTI_AZ`
        - `CLUSTER_MULTI_AZ`
        """
        return pulumi.get(self, "deployment_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionOptions")
    def encryption_options(self) -> pulumi.Output[Optional['outputs.BrokerEncryptionOptions']]:
        """
        Encryption options for the broker. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "encryption_options")

    @_builtins.property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        """
        return pulumi.get(self, "engine_type")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The version specified to use. See also EngineVersionCurrent.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="engineVersionCurrent")
    def engine_version_current(self) -> pulumi.Output[_builtins.str]:
        """
        The version in use. This may have more precision than the specified EngineVersion.
        """
        return pulumi.get(self, "engine_version_current")

    @_builtins.property
    @pulumi.getter(name="hostInstanceType")
    def host_instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        The broker's instance type.
        """
        return pulumi.get(self, "host_instance_type")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.

        `['198.51.100.2', '203.0.113.9']`
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="ldapServerMetadata")
    def ldap_server_metadata(self) -> pulumi.Output[Optional['outputs.BrokerLdapServerMetadata']]:
        """
        Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        """
        return pulumi.get(self, "ldap_server_metadata")

    @_builtins.property
    @pulumi.getter
    def logs(self) -> pulumi.Output[Optional['outputs.BrokerLogList']]:
        """
        Enables Amazon CloudWatch logging for brokers.
        """
        return pulumi.get(self, "logs")

    @_builtins.property
    @pulumi.getter(name="maintenanceWindowStartTime")
    def maintenance_window_start_time(self) -> pulumi.Output[Optional['outputs.BrokerMaintenanceWindow']]:
        """
        The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        """
        return pulumi.get(self, "maintenance_window_start_time")

    @_builtins.property
    @pulumi.getter(name="mqttEndpoints")
    def mqtt_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The MQTT endpoints of each broker instance as a list of strings.

        `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
        """
        return pulumi.get(self, "mqtt_endpoints")

    @_builtins.property
    @pulumi.getter(name="openWireEndpoints")
    def open_wire_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The OpenWire endpoints of each broker instance as a list of strings.

        `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
        """
        return pulumi.get(self, "open_wire_endpoints")

    @_builtins.property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> pulumi.Output[_builtins.bool]:
        """
        Enables connections from applications outside of the VPC that hosts the broker's subnets.
        """
        return pulumi.get(self, "publicly_accessible")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="stompEndpoints")
    def stomp_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The STOMP endpoints of each broker instance as a list of strings.

        `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
        """
        return pulumi.get(self, "stomp_endpoints")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The broker's storage type.
        """
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.

        > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        """
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.BrokerUser']]]:
        """
        Users to configure on the broker. 
        For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
        For ActiveMQ, changes to anything but Password are detected and will trigger an update,
        but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        """
        return pulumi.get(self, "users")

    @_builtins.property
    @pulumi.getter(name="wssEndpoints")
    def wss_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The WSS endpoints of each broker instance as a list of strings.

        `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
        """
        return pulumi.get(self, "wss_endpoints")

